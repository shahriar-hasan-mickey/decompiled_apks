record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractMutableMap` @kind class {
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.ref.ReferenceQueue` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16da4c.  v0:= constclass @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L16da50.  v1:= "_size" @kind object;
  #L16da54.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L16da5a.  v0:= temp @kind object;
  #L16da5c.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L16da60.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L16da74.  v0:= 0I;
  #L16da76.  v1:= 1I;
  #L16da78.  v2:= 0I;
  #L16da7a.  call `<init>`(v3, v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L16da80.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16da94.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractMutableMap;.<init>:()V` @kind direct;
  #L16da9a.  v0:= 0I;
  #L16da9c.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @type ^`int` := v0;
  #L16daa0.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`;
  #L16daa4.  v1:= 16I;
  #L16daa8.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @kind direct;
  #L16daae.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` := v0 @kind object;
  #L16dab2.  if v3 == 0 then goto L16dac2;
  #L16dab6.  v3:= new `java.lang.ref.ReferenceQueue`;
  #L16daba.  call `<init>`(v3) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L16dac0.  goto L16dac4;
  #L16dac2.  v3:= 0I;
  #L16dac4.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` := v3 @kind object;
  #L16dac8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind this, `boolean` v1 , `int` v2 , `kotlin.jvm.internal.DefaultConstructorMarker` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L16dadc.  v2:= v2 ^& 1;
  #L16dae0.  if v2 == 0 then goto L16dae6;
  #L16dae4.  v1:= 0I;
  #L16dae6.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(Z)V` @kind direct;
  #L16daec.  return @kind void;
}
procedure `void` `access$decrementSize`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$decrementSize:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L16db00.  call `c`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.c:()V` @kind direct;
  #L16db06.  return @kind void;
}
procedure `java.lang.ref.ReferenceQueue` `access$getWeakRefQueue$p`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$getWeakRefQueue$p:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)Ljava/lang/ref/ReferenceQueue;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L16d9f4.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L16d9f8.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this, `kotlinx.coroutines.debug.internal.HashedWeakRef` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L16db18.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L16db1c.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L16db20.  call `b`(v0, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @kind virtual;
  #L16db26.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.c:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L16db78.  v0:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L16db7c.  call temp:= `decrementAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L16db82.  return @kind void;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16d934.  @monitorenter v7
  #L16d936.  v0:= v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L16d93a.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L16d93e.  v4:= 0I;
  #L16d940.  v5:= 4I;
  #L16d942.  v6:= 0I;
  #L16d944.  v1:= v0 @kind object;
  #L16d946.  v2:= v8 @kind object;
  #L16d948.  v3:= v9 @kind object;
  #L16d94a.  call temp:= `g`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L16d950.  v1:= temp @kind object;
  #L16d952.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L16d958.  v2:= temp @kind object;
  #L16d95a.  if v1 == v2 then goto L16d962;
  #L16d95e.  @monitorexit v7
  #L16d960.  return v1 @kind object;
  #L16d962.  call temp:= `h`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.h:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;` @kind virtual;
  #L16d968.  v0:= temp @kind object;
  #L16d96a.  v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` := v0 @kind object;
  #L16d96e.  goto L16d93e;
  #L16d970.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16d972.  @monitorexit v7
  #L16d974.  throw v8;
  catch `java.lang.Throwable` @[L16d936..L16d95a] goto L16d970;
  catch `java.lang.Throwable` @[L16d962..L16d96e] goto L16d970;
}
procedure `void` `clear`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16db38.  call temp:= `keySet`(v2) @signature `Lkotlin/collections/AbstractMutableMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L16db3e.  v0:= temp @kind object;
  #L16db40.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L16db46.  v0:= temp @kind object;
  #L16db48.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L16db4e.  v1:= temp;
  #L16db50.  if v1 == 0 then goto L16db64;
  #L16db54.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L16db5a.  v1:= temp @kind object;
  #L16db5c.  call temp:= `remove`(v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16db62.  goto L16db48;
  #L16db64.  return @kind void;
}
procedure `java.lang.Object` `get`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d8b8.  if v2 != 0 then goto L16d8c0;
  #L16d8bc.  v2:= 0I;
  #L16d8be.  return v2 @kind object;
  #L16d8c0.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L16d8c4.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L16d8c8.  call temp:= `c`(v0, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16d8ce.  v2:= temp @kind object;
  #L16d8d0.  return v2 @kind object;
}
procedure `java.util.Set` `getEntries`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16da0c.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c`;
  #L16da10.  v1:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d.a` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` @kind object;
  #L16da14.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L16da1a.  return v0 @kind object;
}
procedure `java.util.Set` `getKeys`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16da2c.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c`;
  #L16da30.  v1:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e.a` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e` @kind object;
  #L16da34.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L16da3a.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d8a0.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @type ^`int`;
  #L16d8a4.  return v0;
}
procedure `java.lang.Object` `put`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16d8e4.  v0:= v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L16d8e8.  v1:= v0 @kind object;
  #L16d8ea.  v1:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v1 @kind object;
  #L16d8ee.  v4:= 0I;
  #L16d8f0.  v5:= 4I;
  #L16d8f2.  v6:= 0I;
  #L16d8f4.  v2:= v8 @kind object;
  #L16d8f6.  v3:= v9 @kind object;
  #L16d8f8.  call temp:= `g`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L16d8fe.  v0:= temp @kind object;
  #L16d900.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L16d906.  v1:= temp @kind object;
  #L16d908.  if v0 != v1 then goto L16d914;
  #L16d90c.  call temp:= `d`(v7, v8, v9) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L16d912.  v0:= temp @kind object;
  #L16d914.  if v0 != 0 then goto L16d922;
  #L16d918.  v8:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L16d91c.  call temp:= `incrementAndGet`(v8, v7) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L16d922.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L16d99c.  v0:= 0I;
  #L16d99e.  if v9 != 0 then goto L16d9a4;
  #L16d9a2.  return v0 @kind object;
  #L16d9a4.  v1:= v8.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L16d9a8.  v2:= v1 @kind object;
  #L16d9aa.  v2:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v2 @kind object;
  #L16d9ae.  v4:= 0I;
  #L16d9b0.  v5:= 0I;
  #L16d9b2.  v6:= 4I;
  #L16d9b4.  v7:= 0I;
  #L16d9b6.  v3:= v9 @kind object;
  #L16d9b8.  call temp:= `g`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L16d9be.  v1:= temp @kind object;
  #L16d9c0.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L16d9c6.  v2:= temp @kind object;
  #L16d9c8.  if v1 != v2 then goto L16d9d4;
  #L16d9cc.  call temp:= `d`(v8, v9, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L16d9d2.  v1:= temp @kind object;
  #L16d9d4.  if v1 == 0 then goto L16d9e2;
  #L16d9d8.  v9:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L16d9dc.  call temp:= `decrementAndGet`(v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L16d9e2.  return v1 @kind object;
}
procedure `void` `runWeakRefQueueCleaningLoopUntilInterrupted`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.runWeakRefQueueCleaningLoopUntilInterrupted:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L16db94.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L16db98.  if v0 == 0 then goto L16dba0;
  #L16db9c.  v0:= 1I;
  #L16db9e.  goto L16dba2;
  #L16dba0.  v0:= 0I;
  #L16dba2.  if v0 == 0 then goto L16dbe2;
  #L16dba6.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L16dbaa.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L16dbb0.  v0:= temp @kind object;
  #L16dbb2.  if v0 == 0 then goto L16dbc2;
  #L16dbb6.  v0:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v0 @kind object;
  #L16dbba.  call `b`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @kind direct;
  #L16dbc0.  goto L16dba6;
  #L16dbc2.  v0:= new `java.lang.NullPointerException`;
  #L16dbc6.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.debug.internal.HashedWeakRef<*>" @kind object;
  #L16dbca.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16dbd0.  throw v0;
  #L16dbd2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L16dbd8.  v0:= temp @kind object;
  #L16dbda.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L16dbe0.  return @kind void;
  #L16dbe2.  v0:= new `java.lang.IllegalStateException`;
  #L16dbe6.  v1:= "Must be created with weakRefQueue = true" @kind object;
  #L16dbea.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16dbf0.  v1:= temp @kind object;
  #L16dbf2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16dbf8.  throw v0;
  catch `java.lang.InterruptedException` @[L16dba6..L16dbd2] goto L16dbd2;
}
