record `kotlinx.coroutines.CoroutineScopeKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlinx.coroutines.CoroutineScope` `CoroutineScope`(`kotlin.coroutines.CoroutineContext` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.CoroutineScope:(Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/CoroutineScope;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L156d0c.  v0:= new `kotlinx.coroutines.internal.ContextScope`;
  #L156d10.  v1:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L156d14.  call temp:= `get`(v3, v1) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L156d1a.  v1:= temp @kind object;
  #L156d1c.  if v1 == 0 then goto L156d22;
  #L156d20.  goto L156d36;
  #L156d22.  v1:= 1I;
  #L156d24.  v2:= 0I;
  #L156d26.  call temp:= `Job$default`(v2, v1, v2) @signature `Lkotlinx/coroutines/JobKt;.Job$default:(Lkotlinx/coroutines/Job;ILjava/lang/Object;)Lkotlinx/coroutines/CompletableJob;` @kind static;
  #L156d2c.  v1:= temp @kind object;
  #L156d2e.  call temp:= `plus`(v3, v1) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156d34.  v3:= temp @kind object;
  #L156d36.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/internal/ContextScope;.<init>:(Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L156d3c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.CoroutineScope` `MainScope`() @signature `Lkotlinx/coroutines/CoroutineScopeKt;.MainScope:()Lkotlinx/coroutines/CoroutineScope;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L156d50.  v0:= new `kotlinx.coroutines.internal.ContextScope`;
  #L156d54.  v1:= 0I;
  #L156d56.  v2:= 1I;
  #L156d58.  call temp:= `SupervisorJob$default`(v1, v2, v1) @signature `Lkotlinx/coroutines/SupervisorKt;.SupervisorJob$default:(Lkotlinx/coroutines/Job;ILjava/lang/Object;)Lkotlinx/coroutines/CompletableJob;` @kind static;
  #L156d5e.  v1:= temp @kind object;
  #L156d60.  v2:= `@@kotlinx.coroutines.Dispatchers.INSTANCE` @type ^`kotlinx.coroutines.Dispatchers` @kind object;
  #L156d64.  call temp:= `getMain`() @signature `Lkotlinx/coroutines/Dispatchers;.getMain:()Lkotlinx/coroutines/MainCoroutineDispatcher;` @kind static;
  #L156d6a.  v2:= temp @kind object;
  #L156d6c.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156d72.  v1:= temp @kind object;
  #L156d74.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/ContextScope;.<init>:(Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L156d7a.  return v0 @kind object;
}
procedure `void` `cancel`(`kotlinx.coroutines.CoroutineScope` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L156e00.  call temp:= `CancellationException`(v1, v2) @signature `Lkotlinx/coroutines/ExceptionsKt;.CancellationException:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/util/concurrent/CancellationException;` @kind static;
  #L156e06.  v1:= temp @kind object;
  #L156e08.  call `cancel`(v0, v1) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;)V` @kind static;
  #L156e0e.  return @kind void;
}
procedure `void` `cancel`(`kotlinx.coroutines.CoroutineScope` v2 @kind object, `java.util.concurrent.CancellationException` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L156e20.  call temp:= `getCoroutineContext`(v2) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156e26.  v0:= temp @kind object;
  #L156e28.  v1:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L156e2c.  call temp:= `get`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L156e32.  v0:= temp @kind object;
  #L156e34.  v0:= (`kotlinx.coroutines.Job`) v0 @kind object;
  #L156e38.  if v0 == 0 then goto L156e44;
  #L156e3c.  call `cancel`(v0, v3) @signature `Lkotlinx/coroutines/Job;.cancel:(Ljava/util/concurrent/CancellationException;)V` @kind interface;
  #L156e42.  return @kind void;
  #L156e44.  v3:= "Scope cannot be cancelled because it does not have a job: " @kind object;
  #L156e48.  call temp:= `stringPlus`(v3, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L156e4e.  v2:= temp @kind object;
  #L156e50.  v3:= new `java.lang.IllegalStateException`;
  #L156e54.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L156e5a.  v2:= temp @kind object;
  #L156e5c.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L156e62.  throw v3;
}
procedure `void` `cancel$default`(`kotlinx.coroutines.CoroutineScope` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel$default:(Lkotlinx/coroutines/CoroutineScope;Ljava/lang/String;Ljava/lang/Throwable;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L156db8.  v3:= v3 ^& 2;
  #L156dbc.  if v3 == 0 then goto L156dc2;
  #L156dc0.  v2:= 0I;
  #L156dc2.  call `cancel`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind static;
  #L156dc8.  return @kind void;
}
procedure `void` `cancel$default`(`kotlinx.coroutines.CoroutineScope` v0 @kind object, `java.util.concurrent.CancellationException` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel$default:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L156ddc.  v2:= v2 ^& 1;
  #L156de0.  if v2 == 0 then goto L156de6;
  #L156de4.  v1:= 0I;
  #L156de6.  call `cancel`(v0, v1) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;)V` @kind static;
  #L156dec.  return @kind void;
}
procedure `java.lang.Object` `coroutineScope`(`kotlin.jvm.functions.Function2` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.coroutineScope:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L156cb0.  v0:= new `kotlinx.coroutines.internal.ScopeCoroutine`;
  #L156cb4.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156cba.  v1:= temp @kind object;
  #L156cbc.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/internal/ScopeCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L156cc2.  call temp:= `startUndispatchedOrReturn`(v0, v0, v2) @signature `Lkotlinx/coroutines/intrinsics/UndispatchedKt;.startUndispatchedOrReturn:(Lkotlinx/coroutines/internal/ScopeCoroutine;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L156cc8.  v2:= temp @kind object;
  #L156cca.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L156cd0.  v0:= temp @kind object;
  #L156cd2.  if v2 != v0 then goto L156cdc;
  #L156cd6.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L156cdc.  return v2 @kind object;
}
procedure `java.lang.Object` `currentCoroutineContext`(`kotlin.coroutines.Continuation` v0 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.currentCoroutineContext:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L156cf0.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156cf6.  v0:= temp @kind object;
  #L156cf8.  return v0 @kind object;
}
procedure `void` `ensureActive`(`kotlinx.coroutines.CoroutineScope` v0 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.ensureActive:(Lkotlinx/coroutines/CoroutineScope;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L156e74.  call temp:= `getCoroutineContext`(v0) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156e7a.  v0:= temp @kind object;
  #L156e7c.  call `ensureActive`(v0) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L156e82.  return @kind void;
}
procedure `boolean` `isActive`(`kotlinx.coroutines.CoroutineScope` v1 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.isActive:(Lkotlinx/coroutines/CoroutineScope;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L156c74.  call temp:= `getCoroutineContext`(v1) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156c7a.  v1:= temp @kind object;
  #L156c7c.  v0:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L156c80.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L156c86.  v1:= temp @kind object;
  #L156c88.  v1:= (`kotlinx.coroutines.Job`) v1 @kind object;
  #L156c8c.  if v1 != 0 then goto L156c94;
  #L156c90.  v1:= 1I;
  #L156c92.  goto L156c9c;
  #L156c94.  call temp:= `isActive`(v1) @signature `Lkotlinx/coroutines/Job;.isActive:()Z` @kind interface;
  #L156c9a.  v1:= temp;
  #L156c9c.  return v1;
}
procedure `void` `isActive$annotations`(`kotlinx.coroutines.CoroutineScope` v0 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.isActive$annotations:(Lkotlinx/coroutines/CoroutineScope;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L156e94.  return @kind void;
}
procedure `kotlinx.coroutines.CoroutineScope` `plus`(`kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.plus:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/CoroutineScope;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L156d8c.  v0:= new `kotlinx.coroutines.internal.ContextScope`;
  #L156d90.  call temp:= `getCoroutineContext`(v1) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156d96.  v1:= temp @kind object;
  #L156d98.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L156d9e.  v1:= temp @kind object;
  #L156da0.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/ContextScope;.<init>:(Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L156da6.  return v0 @kind object;
}
