record `kotlinx.coroutines.NonCancellable` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.AbstractCoroutineContextElement` @kind class, `kotlinx.coroutines.Job` @kind interface {
}
global `kotlinx.coroutines.NonCancellable` `@@kotlinx.coroutines.NonCancellable.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/NonCancellable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15dc30.  v0:= new `kotlinx.coroutines.NonCancellable`;
  #L15dc34.  call `<init>`(v0) @signature `Lkotlinx/coroutines/NonCancellable;.<init>:()V` @kind direct;
  #L15dc3a.  `@@kotlinx.coroutines.NonCancellable.INSTANCE` @type ^`kotlinx.coroutines.NonCancellable` := v0 @kind object;
  #L15dc3e.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.NonCancellable` v1 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15dc50.  v0:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L15dc54.  call `<init>`(v1, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @kind direct;
  #L15dc5a.  return @kind void;
}
procedure `void` `getChildren$annotations`() @signature `Lkotlinx/coroutines/NonCancellable;.getChildren$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L15dc98.  return @kind void;
}
procedure `void` `isActive$annotations`() @signature `Lkotlinx/coroutines/NonCancellable;.isActive$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L15dcac.  return @kind void;
}
procedure `void` `isCancelled$annotations`() @signature `Lkotlinx/coroutines/NonCancellable;.isCancelled$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L15dcc0.  return @kind void;
}
procedure `void` `isCompleted$annotations`() @signature `Lkotlinx/coroutines/NonCancellable;.isCompleted$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L15dcd4.  return @kind void;
}
procedure `kotlinx.coroutines.ChildHandle` `attachChild`(`kotlinx.coroutines.NonCancellable` v0 @kind this, `kotlinx.coroutines.ChildJob` v1 @kind object) @signature `Lkotlinx/coroutines/NonCancellable;.attachChild:(Lkotlinx/coroutines/ChildJob;)Lkotlinx/coroutines/ChildHandle;` @AccessFlag PUBLIC {
    temp;

  #L15dbac.  v1:= `@@kotlinx.coroutines.NonDisposableHandle.INSTANCE` @type ^`kotlinx.coroutines.NonDisposableHandle` @kind object;
  #L15dbb0.  return v1 @kind object;
}
procedure `void` `cancel`(`kotlinx.coroutines.NonCancellable` v0 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.cancel:()V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15dc6c.  call `cancel`(v0) @signature `Lkotlinx/coroutines/Job$DefaultImpls;.cancel:(Lkotlinx/coroutines/Job;)V` @kind static;
  #L15dc72.  return @kind void;
}
procedure `void` `cancel`(`kotlinx.coroutines.NonCancellable` v0 @kind this, `java.util.concurrent.CancellationException` v1 @kind object) @signature `Lkotlinx/coroutines/NonCancellable;.cancel:(Ljava/util/concurrent/CancellationException;)V` @AccessFlag PUBLIC {
    temp;

  #L15dc84.  return @kind void;
}
procedure `boolean` `cancel`(`kotlinx.coroutines.NonCancellable` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/NonCancellable;.cancel:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15dad4.  v1:= 0I;
  #L15dad6.  return v1;
}
procedure `java.util.concurrent.CancellationException` `getCancellationException`(`kotlinx.coroutines.NonCancellable` v2 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.getCancellationException:()Ljava/util/concurrent/CancellationException;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15db70.  v0:= new `java.lang.IllegalStateException`;
  #L15db74.  v1:= "This job is always active" @kind object;
  #L15db78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15db7e.  throw v0;
}
procedure `kotlin.sequences.Sequence` `getChildren`(`kotlinx.coroutines.NonCancellable` v1 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.getChildren:()Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15db90.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L15db96.  v0:= temp @kind object;
  #L15db98.  return v0 @kind object;
}
procedure `kotlinx.coroutines.selects.SelectClause0` `getOnJoin`(`kotlinx.coroutines.NonCancellable` v2 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.getOnJoin:()Lkotlinx/coroutines/selects/SelectClause0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15dc10.  v0:= new `java.lang.UnsupportedOperationException`;
  #L15dc14.  v1:= "This job is always active" @kind object;
  #L15dc18.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15dc1e.  throw v0;
}
procedure `kotlinx.coroutines.DisposableHandle` `invokeOnCompletion`(`kotlinx.coroutines.NonCancellable` v0 @kind this, `kotlin.jvm.functions.Function1` v1 @kind object) @signature `Lkotlinx/coroutines/NonCancellable;.invokeOnCompletion:(Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;` @AccessFlag PUBLIC {
    temp;

  #L15dbdc.  v1:= `@@kotlinx.coroutines.NonDisposableHandle.INSTANCE` @type ^`kotlinx.coroutines.NonDisposableHandle` @kind object;
  #L15dbe0.  return v1 @kind object;
}
procedure `kotlinx.coroutines.DisposableHandle` `invokeOnCompletion`(`kotlinx.coroutines.NonCancellable` v0 @kind this, `boolean` v1 , `boolean` v2 , `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/NonCancellable;.invokeOnCompletion:(ZZLkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;` @AccessFlag PUBLIC {
    temp;

  #L15dbc4.  v1:= `@@kotlinx.coroutines.NonDisposableHandle.INSTANCE` @type ^`kotlinx.coroutines.NonDisposableHandle` @kind object;
  #L15dbc8.  return v1 @kind object;
}
procedure `boolean` `isActive`(`kotlinx.coroutines.NonCancellable` v1 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.isActive:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dae8.  v0:= 1I;
  #L15daea.  return v0;
}
procedure `boolean` `isCancelled`(`kotlinx.coroutines.NonCancellable` v1 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dafc.  v0:= 0I;
  #L15dafe.  return v0;
}
procedure `boolean` `isCompleted`(`kotlinx.coroutines.NonCancellable` v1 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.isCompleted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15db10.  v0:= 0I;
  #L15db12.  return v0;
}
procedure `java.lang.Object` `join`(`kotlinx.coroutines.NonCancellable` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/NonCancellable;.join:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15db38.  v2:= new `java.lang.UnsupportedOperationException`;
  #L15db3c.  v0:= "This job is always active" @kind object;
  #L15db40.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15db46.  throw v2;
}
procedure `kotlinx.coroutines.Job` `plus`(`kotlinx.coroutines.NonCancellable` v0 @kind this, `kotlinx.coroutines.Job` v1 @kind object) @signature `Lkotlinx/coroutines/NonCancellable;.plus:(Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/Job;` @AccessFlag PUBLIC {
    temp;

  #L15dbf4.  call temp:= `plus`(v0, v1) @signature `Lkotlinx/coroutines/Job$DefaultImpls;.plus:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/Job;` @kind static;
  #L15dbfa.  v1:= temp @kind object;
  #L15dbfc.  return v1 @kind object;
}
procedure `boolean` `start`(`kotlinx.coroutines.NonCancellable` v1 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.start:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15db24.  v0:= 0I;
  #L15db26.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.NonCancellable` v1 @kind this) @signature `Lkotlinx/coroutines/NonCancellable;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15db58.  v0:= "NonCancellable" @kind object;
  #L15db5c.  return v0 @kind object;
}
