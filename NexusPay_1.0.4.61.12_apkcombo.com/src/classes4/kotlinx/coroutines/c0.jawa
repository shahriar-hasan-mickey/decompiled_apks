record `kotlinx.coroutines.c0` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.JobNode` @kind class {
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.c0.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.c0` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/c0;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15dfcc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/JobNode;.<init>:()V` @kind direct;
  #L15dfd2.  v0.`kotlinx.coroutines.c0.d` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L15dfd6.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.c0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/c0;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15dfac.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L15dfb0.  call `invoke`(v0, v1) @signature `Lkotlinx/coroutines/c0;.invoke:(Ljava/lang/Throwable;)V` @kind virtual;
  #L15dfb6.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L15dfba.  return v1 @kind object;
}
procedure `void` `invoke`(`kotlinx.coroutines.c0` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lkotlinx/coroutines/c0;.invoke:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15dfe8.  v3:= v2.`kotlinx.coroutines.c0.d` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L15dfec.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L15dff0.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L15dff4.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15dffa.  v0:= temp @kind object;
  #L15dffc.  call `resumeWith`(v3, v0) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L15e002.  return @kind void;
}
