record `kotlinx.coroutines.internal.Segment` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.ConcurrentLinkedListNode` @kind class {
  `long` `kotlinx.coroutines.internal.Segment.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.internal.Segment.cleanedAndPointers` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.internal.Segment.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/Segment;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1894d8.  v0:= constclass @type ^`kotlinx.coroutines.internal.Segment` @kind object;
  #L1894dc.  v1:= "cleanedAndPointers" @kind object;
  #L1894e0.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1894e6.  v0:= temp @kind object;
  #L1894e8.  `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L1894ec.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.Segment` v0 @kind this, `long` v1 , `kotlinx.coroutines.internal.Segment` v3 @kind object, `int` v4 ) @signature `Lkotlinx/coroutines/internal/Segment;.<init>:(JLkotlinx/coroutines/internal/Segment;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L189500.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.<init>:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)V` @kind direct;
  #L189506.  v0.`kotlinx.coroutines.internal.Segment.c` @type ^`long` := v1 @kind wide;
  #L18950a.  v1:= v4 ^< 16;
  #L18950e.  v0.`kotlinx.coroutines.internal.Segment.cleanedAndPointers` @type ^`int` := v1;
  #L189512.  return @kind void;
}
procedure `boolean` `decPointers$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1893f4.  v0:= `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1893f8.  v1:= -65536I;
  #L1893fc.  call temp:= `addAndGet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.addAndGet:(Ljava/lang/Object;I)I` @kind virtual;
  #L189402.  v0:= temp;
  #L189404.  call temp:= `getMaxSlots`(v2) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L18940a.  v1:= temp;
  #L18940c.  if v0 != v1 then goto L189420;
  #L189410.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L189416.  v0:= temp;
  #L189418.  if v0 != 0 then goto L189420;
  #L18941c.  v0:= 1I;
  #L18941e.  goto L189422;
  #L189420.  v0:= 0I;
  #L189422.  return v0;
}
procedure `long` `getId`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1894c0.  v0:= v2.`kotlinx.coroutines.internal.Segment.c` @type ^`long` @kind wide;
  #L1894c4.  return v0 @kind wide;
}
procedure `int` `getMaxSlots`() @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `getRemoved`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L189434.  v0:= v2.`kotlinx.coroutines.internal.Segment.cleanedAndPointers` @type ^`int`;
  #L189438.  call temp:= `getMaxSlots`(v2) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L18943e.  v1:= temp;
  #L189440.  if v0 != v1 then goto L189454;
  #L189444.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L18944a.  v0:= temp;
  #L18944c.  if v0 != 0 then goto L189454;
  #L189450.  v0:= 1I;
  #L189452.  goto L189456;
  #L189454.  v0:= 0I;
  #L189456.  return v0;
}
procedure `void` `onSlotCleaned`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.onSlotCleaned:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L189524.  v0:= `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L189528.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L18952e.  v0:= temp;
  #L189530.  call temp:= `getMaxSlots`(v2) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L189536.  v1:= temp;
  #L189538.  if v0 != v1 then goto L18954e;
  #L18953c.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L189542.  v0:= temp;
  #L189544.  if v0 != 0 then goto L18954e;
  #L189548.  call `remove`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L18954e.  return @kind void;
}
procedure `boolean` `tryIncPointers$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.Segment` v4 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.tryIncPointers$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L189468.  v0:= v4.`kotlinx.coroutines.internal.Segment.cleanedAndPointers` @type ^`int`;
  #L18946c.  call temp:= `getMaxSlots`(v4) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L189472.  v1:= temp;
  #L189474.  v2:= 0I;
  #L189476.  v3:= 1I;
  #L189478.  if v0 != v1 then goto L18948e;
  #L18947c.  call temp:= `isTail`(v4) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L189482.  v1:= temp;
  #L189484.  if v1 == 0 then goto L18948a;
  #L189488.  goto L18948e;
  #L18948a.  v1:= 0I;
  #L18948c.  goto L189490;
  #L18948e.  v1:= 1I;
  #L189490.  if v1 != 0 then goto L189496;
  #L189494.  goto L1894ae;
  #L189496.  v1:= `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18949a.  v2:= 65536I;
  #L18949e.  v2:= v2 + v0 @kind int;
  #L1894a0.  call temp:= `compareAndSet`(v1, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1894a6.  v0:= temp;
  #L1894a8.  if v0 == 0 then goto L189468;
  #L1894ac.  v2:= 1I;
  #L1894ae.  return v2;
}
