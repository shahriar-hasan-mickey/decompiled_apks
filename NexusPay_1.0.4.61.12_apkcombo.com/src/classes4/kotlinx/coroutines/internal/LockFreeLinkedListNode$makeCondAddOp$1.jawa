record `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` @kind class {
  `kotlin.jvm.functions.Function0` `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` v0 @kind this, `kotlin.jvm.functions.Function0` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L187864.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.b` @type ^`kotlin.jvm.functions.Function0` := v1 @kind object;
  #L187868.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L18786e.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L187808.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L18780c.  call temp:= `prepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.prepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L187812.  v1:= temp @kind object;
  #L187814.  return v1 @kind object;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.prepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L187828.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.b` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L18782c.  call temp:= `invoke`(v1) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L187832.  v1:= temp @kind object;
  #L187834.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L187838.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L18783e.  v1:= temp;
  #L187840.  if v1 == 0 then goto L187848;
  #L187844.  v1:= 0I;
  #L187846.  goto L187850;
  #L187848.  call temp:= `getCONDITION_FALSE`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListKt;.getCONDITION_FALSE:()Ljava/lang/Object;` @kind static;
  #L18784e.  v1:= temp @kind object;
  #L187850.  return v1 @kind object;
}
