record `kotlinx.coroutines.internal.AtomicOp` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.OpDescriptor` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.AtomicOp._consensus` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.AtomicOp.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/AtomicOp;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L184b70.  v0:= constclass @type ^`kotlinx.coroutines.internal.AtomicOp` @kind object;
  #L184b74.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L184b78.  v2:= "_consensus" @kind object;
  #L184b7c.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L184b82.  v0:= temp @kind object;
  #L184b84.  `@@kotlinx.coroutines.internal.AtomicOp.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L184b88.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.AtomicOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L184b9c.  call `<init>`(v1) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @kind direct;
  #L184ba2.  v0:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L184ba6.  v1.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` := v0 @kind object;
  #L184baa.  return @kind void;
}
procedure `void` `complete`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `decide`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184a94.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L184a9a.  v0:= temp;
  #L184a9c.  if v0 == 0 then goto L184ac0;
  #L184aa0.  v0:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L184aa4.  if v3 == v0 then goto L184aac;
  #L184aa8.  v0:= 1I;
  #L184aaa.  goto L184aae;
  #L184aac.  v0:= 0I;
  #L184aae.  if v0 == 0 then goto L184ab4;
  #L184ab2.  goto L184ac0;
  #L184ab4.  v3:= new `java.lang.AssertionError`;
  #L184ab8.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L184abe.  throw v3;
  #L184ac0.  v0:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L184ac4.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L184ac8.  if v0 == v1 then goto L184ace;
  #L184acc.  return v0 @kind object;
  #L184ace.  v0:= `@@kotlinx.coroutines.internal.AtomicOp.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L184ad2.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L184ad8.  v0:= temp;
  #L184ada.  if v0 == 0 then goto L184ae0;
  #L184ade.  return v3 @kind object;
  #L184ae0.  v3:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L184ae4.  return v3 @kind object;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`(`kotlinx.coroutines.internal.AtomicOp` v0 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC {
    temp;

  #L184b44.  return v0 @kind object;
}
procedure `java.lang.Object` `getConsensus`(`kotlinx.coroutines.internal.AtomicOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getConsensus:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L184af8.  v0:= v1.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L184afc.  return v0 @kind object;
}
procedure `long` `getOpSequence`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getOpSequence:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L184b58.  v0:= 0L;
  #L184b5c.  return v0 @kind wide;
}
procedure `boolean` `isDecided`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.isDecided:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184a70.  v0:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L184a74.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L184a78.  if v0 == v1 then goto L184a80;
  #L184a7c.  v0:= 1I;
  #L184a7e.  goto L184a82;
  #L184a80.  v0:= 0I;
  #L184a82.  return v0;
}
procedure `java.lang.Object` `perform`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184b10.  v0:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L184b14.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L184b18.  if v0 != v1 then goto L184b2c;
  #L184b1c.  call temp:= `prepare`(v2, v3) @signature `Lkotlinx/coroutines/internal/AtomicOp;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L184b22.  v0:= temp @kind object;
  #L184b24.  call temp:= `decide`(v2, v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L184b2a.  v0:= temp @kind object;
  #L184b2c.  call `complete`(v2, v3, v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L184b32.  return v0 @kind object;
}
procedure `java.lang.Object` `prepare`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
