record `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.AtomicDesc` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1871a4.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.<init>:()V` @kind direct;
  #L1871aa.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v4 @kind this, `kotlinx.coroutines.internal.AtomicOp` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.complete:(Lkotlinx/coroutines/internal/AtomicOp;Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1871bc.  v0:= 1I;
  #L1871be.  if v6 != 0 then goto L1871c6;
  #L1871c2.  v6:= 1I;
  #L1871c4.  goto L1871c8;
  #L1871c6.  v6:= 0I;
  #L1871c8.  call temp:= `getAffectedNode`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L1871ce.  v1:= temp @kind object;
  #L1871d0.  if v1 != 0 then goto L1871f8;
  #L1871d4.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1871da.  v5:= temp;
  #L1871dc.  if v5 == 0 then goto L1871f6;
  #L1871e0.  v5:= v6 ^~ 1;
  #L1871e4.  if v5 == 0 then goto L1871ea;
  #L1871e8.  goto L1871f6;
  #L1871ea.  v5:= new `java.lang.AssertionError`;
  #L1871ee.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1871f4.  throw v5;
  #L1871f6.  return @kind void;
  #L1871f8.  call temp:= `getOriginalNext`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getOriginalNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L1871fe.  v2:= temp @kind object;
  #L187200.  if v2 != 0 then goto L187228;
  #L187204.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18720a.  v5:= temp;
  #L18720c.  if v5 == 0 then goto L187226;
  #L187210.  v5:= v6 ^~ 1;
  #L187214.  if v5 == 0 then goto L18721a;
  #L187218.  goto L187226;
  #L18721a.  v5:= new `java.lang.AssertionError`;
  #L18721e.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L187224.  throw v5;
  #L187226.  return @kind void;
  #L187228.  if v6 == 0 then goto L187236;
  #L18722c.  call temp:= `updatedNext`(v4, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L187232.  v0:= temp @kind object;
  #L187234.  goto L187238;
  #L187236.  v0:= v2 @kind object;
  #L187238.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18723c.  call temp:= `compareAndSet`(v3, v1, v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187242.  v5:= temp;
  #L187244.  if v5 == 0 then goto L187252;
  #L187248.  if v6 == 0 then goto L187252;
  #L18724c.  call `finishOnSuccess`(v4, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishOnSuccess:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L187252.  return @kind void;
}
procedure `java.lang.Object` `failure`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.failure:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L187060.  v1:= 0I;
  #L187062.  return v1 @kind object;
}
procedure `void` `finishOnSuccess`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishOnSuccess:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `finishPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v0 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getAffectedNode`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getOriginalNext`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getOriginalNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `onPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L187074.  call `finishPrepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @kind virtual;
  #L18707a.  v1:= 0I;
  #L18707c.  return v1 @kind object;
}
procedure `void` `onRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onRemoved:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC {
    temp;

  #L187264.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v6 @kind this, `kotlinx.coroutines.internal.AtomicOp` v7 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.prepare:(Lkotlinx/coroutines/internal/AtomicOp;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L187090.  call temp:= `takeAffectedNode`(v6, v7) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.takeAffectedNode:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L187096.  v0:= temp @kind object;
  #L187098.  if v0 != 0 then goto L1870a2;
  #L18709c.  v7:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L1870a0.  return v7 @kind object;
  #L1870a2.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L1870a6.  v2:= 0I;
  #L1870a8.  if v1 != v7 then goto L1870ae;
  #L1870ac.  return v2 @kind object;
  #L1870ae.  call temp:= `isDecided`(v7) @signature `Lkotlinx/coroutines/internal/AtomicOp;.isDecided:()Z` @kind virtual;
  #L1870b4.  v3:= temp;
  #L1870b6.  if v3 == 0 then goto L1870bc;
  #L1870ba.  return v2 @kind object;
  #L1870bc.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L1870c0.  if v3 == 0 then goto L1870e2;
  #L1870c4.  v1:= (`kotlinx.coroutines.internal.OpDescriptor`) v1 @kind object;
  #L1870c8.  call temp:= `isEarlierThan`(v7, v1) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.isEarlierThan:(Lkotlinx/coroutines/internal/OpDescriptor;)Z` @kind virtual;
  #L1870ce.  v2:= temp;
  #L1870d0.  if v2 == 0 then goto L1870da;
  #L1870d4.  v7:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L1870d8.  return v7 @kind object;
  #L1870da.  call temp:= `perform`(v1, v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1870e0.  goto L187090;
  #L1870e2.  call temp:= `failure`(v6, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.failure:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L1870e8.  v3:= temp @kind object;
  #L1870ea.  if v3 == 0 then goto L1870f0;
  #L1870ee.  return v3 @kind object;
  #L1870f0.  call temp:= `retry`(v6, v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.retry:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @kind virtual;
  #L1870f6.  v3:= temp;
  #L1870f8.  if v3 == 0 then goto L1870fe;
  #L1870fc.  goto L187090;
  #L1870fe.  v3:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp`;
  #L187102.  v4:= v1 @kind object;
  #L187104.  v4:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v4 @kind object;
  #L187108.  call `<init>`(v3, v0, v4, v6) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;)V` @kind direct;
  #L18710e.  v4:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187112.  call temp:= `compareAndSet`(v4, v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187118.  v4:= temp;
  #L18711a.  if v4 == 0 then goto L187090;
  #L18711e.  call temp:= `perform`(v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L187124.  v4:= temp @kind object;
  #L187126.  v5:= `@@kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED` @type ^`java.lang.Object` @kind object;
  #L18712a.  if v4 != v5 then goto L187130;
  #L18712e.  goto L187090;
  #L187130.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L187136.  v7:= temp;
  #L187138.  if v7 == 0 then goto L187158;
  #L18713c.  if v4 != 0 then goto L187144;
  #L187140.  v7:= 1I;
  #L187142.  goto L187146;
  #L187144.  v7:= 0I;
  #L187146.  if v7 == 0 then goto L18714c;
  #L18714a.  goto L187158;
  #L18714c.  v7:= new `java.lang.AssertionError`;
  #L187150.  call `<init>`(v7) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L187156.  throw v7;
  #L187158.  return v2 @kind object;
  #L18715a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18715c.  v2:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187160.  call temp:= `compareAndSet`(v2, v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187166.  throw v7;
  catch `java.lang.Throwable` @[L18711e..L187158] goto L18715a;
}
procedure `boolean` `retry`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.retry:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @AccessFlag PROTECTED {
    temp;

  #L18704c.  v1:= 0I;
  #L18704e.  return v1;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `takeAffectedNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.takeAffectedNode:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED {
    temp;

  #L187184.  call temp:= `getAffectedNode`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L18718a.  v1:= temp @kind object;
  #L18718c.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L187192.  return v1 @kind object;
}
procedure `java.lang.Object` `updatedNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
