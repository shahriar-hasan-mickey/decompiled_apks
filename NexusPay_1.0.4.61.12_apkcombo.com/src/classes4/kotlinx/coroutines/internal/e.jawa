record `kotlinx.coroutines.internal.e` @kind class @AccessFlag FINAL {
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.internal.e.a` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object`[] `kotlinx.coroutines.internal.e.b` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.ThreadContextElement`[] `kotlinx.coroutines.internal.e.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.internal.e.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.e` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/internal/e;.<init>:(Lkotlin/coroutines/CoroutineContext;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18aba8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18abae.  v0.`kotlinx.coroutines.internal.e.a` @type ^`kotlin.coroutines.CoroutineContext` := v1 @kind object;
  #L18abb2.  v1:= new `java.lang.Object`[v2];
  #L18abb6.  v0.`kotlinx.coroutines.internal.e.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L18abba.  v1:= new `kotlinx.coroutines.ThreadContextElement`[v2];
  #L18abbe.  v0.`kotlinx.coroutines.internal.e.c` @type ^`kotlinx.coroutines.ThreadContextElement`[] := v1 @kind object;
  #L18abc2.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.internal.e` v2 @kind this, `kotlinx.coroutines.ThreadContextElement` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/e;.a:(Lkotlinx/coroutines/ThreadContextElement;Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18abd4.  v0:= v2.`kotlinx.coroutines.internal.e.b` @type ^`java.lang.Object`[] @kind object;
  #L18abd8.  v1:= v2.`kotlinx.coroutines.internal.e.d` @type ^`int`;
  #L18abdc.  v0[v1]:= v4 @kind object;
  #L18abe0.  v4:= v2.`kotlinx.coroutines.internal.e.c` @type ^`kotlinx.coroutines.ThreadContextElement`[] @kind object;
  #L18abe4.  v0:= v1 + 1;
  #L18abe8.  v2.`kotlinx.coroutines.internal.e.d` @type ^`int` := v0;
  #L18abec.  v4[v1]:= v3 @kind object;
  #L18abf0.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.internal.e` v4 @kind this, `kotlin.coroutines.CoroutineContext` v5 @kind object) @signature `Lkotlinx/coroutines/internal/e;.b:(Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18ac04.  v0:= v4.`kotlinx.coroutines.internal.e.c` @type ^`kotlinx.coroutines.ThreadContextElement`[] @kind object;
  #L18ac08.  v0:= length @variable v0;
  #L18ac0a.  v0:= v0 + -1;
  #L18ac0e.  if v0 < 0 then goto L18ac3c;
  #L18ac12.  v1:= v0 + -1;
  #L18ac16.  v2:= v4.`kotlinx.coroutines.internal.e.c` @type ^`kotlinx.coroutines.ThreadContextElement`[] @kind object;
  #L18ac1a.  v2:= v2[v0] @kind object;
  #L18ac1e.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ac24.  v3:= v4.`kotlinx.coroutines.internal.e.b` @type ^`java.lang.Object`[] @kind object;
  #L18ac28.  v0:= v3[v0] @kind object;
  #L18ac2c.  call `restoreThreadContext`(v2, v5, v0) @signature `Lkotlinx/coroutines/ThreadContextElement;.restoreThreadContext:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @kind interface;
  #L18ac32.  if v1 >= 0 then goto L18ac38;
  #L18ac36.  goto L18ac3c;
  #L18ac38.  v0:= v1;
  #L18ac3a.  goto L18ac12;
  #L18ac3c.  return @kind void;
}
