record `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.AtomicOp` @kind class {
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.newNode` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.oldNext` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1873fc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.<init>:()V` @kind direct;
  #L187402.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.newNode` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L187406.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L187418.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L18741c.  call `complete`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;.complete:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)V` @kind virtual;
  #L187422.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;.complete:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L187434.  if v4 != 0 then goto L18743c;
  #L187438.  v4:= 1I;
  #L18743a.  goto L18743e;
  #L18743c.  v4:= 0I;
  #L18743e.  if v4 == 0 then goto L187448;
  #L187442.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.newNode` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187446.  goto L18744c;
  #L187448.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.oldNext` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18744c.  if v0 == 0 then goto L187478;
  #L187450.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187454.  call temp:= `compareAndSet`(v1, v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18745a.  v3:= temp;
  #L18745c.  if v3 == 0 then goto L187478;
  #L187460.  if v4 == 0 then goto L187478;
  #L187464.  v3:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.newNode` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187468.  v4:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.oldNext` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18746c.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L187472.  call `access$finishAdd`(v3, v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$finishAdd:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind static;
  #L187478.  return @kind void;
}
