record `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L187e54.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L187e58.  v1:= constclass @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187e5c.  v2:= "_next" @kind object;
  #L187e60.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L187e66.  v2:= temp @kind object;
  #L187e68.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L187e6c.  v2:= "_prev" @kind object;
  #L187e70.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L187e76.  v2:= temp @kind object;
  #L187e78.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L187e7c.  v2:= "_removedRef" @kind object;
  #L187e80.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L187e86.  v0:= temp @kind object;
  #L187e88.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L187e8c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L187ea0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L187ea6.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` := v1 @kind object;
  #L187eaa.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` := v1 @kind object;
  #L187eae.  v0:= 0I;
  #L187eb0.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @type ^`java.lang.Object` := v0 @kind object;
  #L187eb4.  return @kind void;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `a`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v7 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v8 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L187ba0.  v0:= v7.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L187ba4.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L187ba8.  v1:= 0I;
  #L187baa.  v2:= v0 @kind object;
  #L187bac.  v3:= v1 @kind object;
  #L187bae.  v4:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L187bb2.  if v4 != v7 then goto L187bd0;
  #L187bb6.  if v0 != v2 then goto L187bbc;
  #L187bba.  return v2 @kind object;
  #L187bbc.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187bc0.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187bc6.  v0:= temp;
  #L187bc8.  if v0 != 0 then goto L187bce;
  #L187bcc.  goto L187ba0;
  #L187bce.  return v2 @kind object;
  #L187bd0.  call temp:= `isRemoved`(v7) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L187bd6.  v5:= temp;
  #L187bd8.  if v5 == 0 then goto L187bde;
  #L187bdc.  return v1 @kind object;
  #L187bde.  if v4 != v8 then goto L187be4;
  #L187be2.  return v2 @kind object;
  #L187be4.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L187be8.  if v5 == 0 then goto L187c10;
  #L187bec.  if v8 == 0 then goto L187c04;
  #L187bf0.  v0:= v4 @kind object;
  #L187bf2.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L187bf6.  call temp:= `isEarlierThan`(v8, v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.isEarlierThan:(Lkotlinx/coroutines/internal/OpDescriptor;)Z` @kind virtual;
  #L187bfc.  v0:= temp;
  #L187bfe.  if v0 == 0 then goto L187c04;
  #L187c02.  return v1 @kind object;
  #L187c04.  v4:= (`kotlinx.coroutines.internal.OpDescriptor`) v4 @kind object;
  #L187c08.  call temp:= `perform`(v4, v2) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L187c0e.  goto L187ba0;
  #L187c10.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L187c14.  if v5 == 0 then goto L187c44;
  #L187c18.  if v3 == 0 then goto L187c3a;
  #L187c1c.  v5:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187c20.  v4:= (`kotlinx.coroutines.internal.b`) v4 @kind object;
  #L187c24.  v4:= v4.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187c28.  call temp:= `compareAndSet`(v5, v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187c2e.  v2:= temp;
  #L187c30.  if v2 != 0 then goto L187c36;
  #L187c34.  goto L187ba0;
  #L187c36.  v2:= v3 @kind object;
  #L187c38.  goto L187bac;
  #L187c3a.  v2:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L187c3e.  v2:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v2 @kind object;
  #L187c42.  goto L187bae;
  #L187c44.  v3:= v4 @kind object;
  #L187c46.  v3:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v3 @kind object;
  #L187c4a.  v6:= v3 @kind object;
  #L187c4c.  v3:= v2 @kind object;
  #L187c4e.  v2:= v6 @kind object;
  #L187c50.  goto L187bae;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `access$correctPrev`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.OpDescriptor` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$correctPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L187b84.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L187b8a.  v0:= temp @kind object;
  #L187b8c.  return v0 @kind object;
}
procedure `void` `access$finishAdd`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$finishAdd:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L187ec8.  call `c`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L187ece.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b` `access$removed`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$removed:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/b;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L187e04.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.d:()Lkotlinx/coroutines/internal/b;` @kind direct;
  #L187e0a.  v0:= temp @kind object;
  #L187e0c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `b`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.b:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L187c64.  call temp:= `isRemoved`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L187c6a.  v0:= temp;
  #L187c6c.  if v0 != 0 then goto L187c72;
  #L187c70.  return v2 @kind object;
  #L187c72.  v2:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L187c76.  v2:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v2 @kind object;
  #L187c7a.  goto L187c64;
}
procedure `void` `c`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L187f08.  v0:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L187f0c.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L187f10.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187f16.  v1:= temp @kind object;
  #L187f18.  if v1 == v3 then goto L187f1e;
  #L187f1c.  return @kind void;
  #L187f1e.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187f22.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187f28.  v0:= temp;
  #L187f2a.  if v0 == 0 then goto L187f08;
  #L187f2e.  call temp:= `isRemoved`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L187f34.  v0:= temp;
  #L187f36.  if v0 == 0 then goto L187f42;
  #L187f3a.  v0:= 0I;
  #L187f3c.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L187f42.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b` `d`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.d:()Lkotlinx/coroutines/internal/b;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L187e20.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @type ^`java.lang.Object` @kind object;
  #L187e24.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L187e28.  if v0 != 0 then goto L187e40;
  #L187e2c.  v0:= new `kotlinx.coroutines.internal.b`;
  #L187e30.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/b;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L187e36.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187e3a.  call `lazySet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L187e40.  return v0 @kind object;
}
procedure `void` `addLast`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLast:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187ee0.  call temp:= `getPrevNode`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L187ee6.  v0:= temp @kind object;
  #L187ee8.  call temp:= `addNext`(v0, v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @kind virtual;
  #L187eee.  v0:= temp;
  #L187ef0.  if v0 == 0 then goto L187ee0;
  #L187ef4.  return @kind void;
}
procedure `boolean` `addLastIf`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `kotlin.jvm.functions.Function0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLastIf:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L187880.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1`;
  #L187884.  call `<init>`(v0, v4, v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L18788a.  call temp:= `getPrevNode`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L187890.  v4:= temp @kind object;
  #L187892.  call temp:= `tryCondAddNext`(v4, v3, v2, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @kind virtual;
  #L187898.  v4:= temp;
  #L18789a.  v1:= 1I;
  #L18789c.  if v4 == v1 then goto L1878ac;
  #L1878a0.  v1:= 2I;
  #L1878a2.  if v4 == v1 then goto L1878a8;
  #L1878a6.  goto L18788a;
  #L1878a8.  v3:= 0I;
  #L1878aa.  return v3;
  #L1878ac.  return v1;
}
procedure `boolean` `addLastIfPrev`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLastIfPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1878c0.  call temp:= `getPrevNode`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L1878c6.  v0:= temp @kind object;
  #L1878c8.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1878ce.  v1:= temp @kind object;
  #L1878d0.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L1878d4.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1878da.  v1:= temp;
  #L1878dc.  if v1 != 0 then goto L1878e4;
  #L1878e0.  v3:= 0I;
  #L1878e2.  return v3;
  #L1878e4.  call temp:= `addNext`(v0, v3, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @kind virtual;
  #L1878ea.  v0:= temp;
  #L1878ec.  if v0 == 0 then goto L1878c0;
  #L1878f0.  v3:= 1I;
  #L1878f2.  return v3;
}
procedure `boolean` `addLastIfPrevAndIf`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object, `kotlin.jvm.functions.Function0` v6 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLastIfPrevAndIf:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L187904.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1`;
  #L187908.  call `<init>`(v0, v6, v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L18790e.  call temp:= `getPrevNode`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L187914.  v6:= temp @kind object;
  #L187916.  call temp:= `invoke`(v5, v6) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L18791c.  v1:= temp @kind object;
  #L18791e.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L187922.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L187928.  v1:= temp;
  #L18792a.  v2:= 0I;
  #L18792c.  if v1 != 0 then goto L187932;
  #L187930.  return v2;
  #L187932.  call temp:= `tryCondAddNext`(v6, v4, v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @kind virtual;
  #L187938.  v6:= temp;
  #L18793a.  v1:= 1I;
  #L18793c.  if v6 == v1 then goto L18794a;
  #L187940.  v1:= 2I;
  #L187942.  if v6 == v1 then goto L187948;
  #L187946.  goto L18790e;
  #L187948.  return v2;
  #L18794a.  return v1;
}
procedure `boolean` `addNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18795c.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187960.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L187966.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18796a.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L187970.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187974.  call temp:= `compareAndSet`(v0, v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18797a.  v0:= temp;
  #L18797c.  if v0 != 0 then goto L187984;
  #L187980.  v2:= 0I;
  #L187982.  return v2;
  #L187984.  call `c`(v2, v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L18798a.  v2:= 1I;
  #L18798c.  return v2;
}
procedure `boolean` `addOneIfEmpty`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addOneIfEmpty:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1879a0.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1879a4.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1879aa.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1879ae.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1879b4.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1879ba.  v0:= temp @kind object;
  #L1879bc.  if v0 == v1 then goto L1879c4;
  #L1879c0.  v2:= 0I;
  #L1879c2.  return v2;
  #L1879c4.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1879c8.  call temp:= `compareAndSet`(v0, v1, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1879ce.  v0:= temp;
  #L1879d0.  if v0 == 0 then goto L1879b4;
  #L1879d4.  call `c`(v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L1879da.  v2:= 1I;
  #L1879dc.  return v2;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` `describeAddLast`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.describeAddLast:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187db0.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc`;
  #L187db4.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L187dba.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` `describeRemoveFirst`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.describeRemoveFirst:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187de8.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc`;
  #L187dec.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L187df2.  return v0 @kind object;
}
procedure `java.lang.Object` `getNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L187a84.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L187a88.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L187a8c.  if v1 != 0 then goto L187a92;
  #L187a90.  return v0 @kind object;
  #L187a92.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L187a96.  call temp:= `perform`(v0, v2) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L187a9c.  goto L187a84;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getNextNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNextNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187c8c.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187c92.  v0:= temp @kind object;
  #L187c94.  call temp:= `unwrap`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListKt;.unwrap:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L187c9a.  v0:= temp @kind object;
  #L187c9c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getPrevNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187cb0.  v0:= 0I;
  #L187cb2.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L187cb8.  v0:= temp @kind object;
  #L187cba.  if v0 != 0 then goto L187cce;
  #L187cbe.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L187cc2.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L187cc6.  call temp:= `b`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.b:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L187ccc.  v0:= temp @kind object;
  #L187cce.  return v0 @kind object;
}
procedure `void` `helpRemove`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L187f54.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187f5a.  v0:= temp @kind object;
  #L187f5c.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L187f60.  v0:= v0.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187f64.  v1:= 0I;
  #L187f66.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L187f6c.  return @kind void;
}
procedure `void` `helpRemovePrev`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemovePrev:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L187f80.  v0:= v3 @kind object;
  #L187f82.  call temp:= `getNext`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187f88.  v1:= temp @kind object;
  #L187f8a.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L187f8e.  if v2 != 0 then goto L187f9c;
  #L187f92.  v1:= 0I;
  #L187f94.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L187f9a.  return @kind void;
  #L187f9c.  v1:= (`kotlinx.coroutines.internal.b`) v1 @kind object;
  #L187fa0.  v0:= v1.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187fa4.  goto L187f82;
}
procedure `boolean` `isRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1879f0.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1879f6.  v0:= temp @kind object;
  #L1879f8.  v0:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L1879fc.  return v0;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` `makeCondAddOp`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlin.jvm.functions.Function0` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.makeCondAddOp:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187dcc.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1`;
  #L187dd0.  call `<init>`(v0, v3, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L187dd6.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `nextIfRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.nextIfRemoved:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L187ce0.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187ce6.  v0:= temp @kind object;
  #L187ce8.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L187cec.  v2:= 0I;
  #L187cee.  if v1 == 0 then goto L187cf8;
  #L187cf2.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L187cf6.  goto L187cfa;
  #L187cf8.  v0:= v2 @kind object;
  #L187cfa.  if v0 != 0 then goto L187d00;
  #L187cfe.  goto L187d04;
  #L187d00.  v2:= v0.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187d04.  return v2 @kind object;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.remove:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L187a10.  call temp:= `removeOrNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeOrNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L187a16.  v0:= temp @kind object;
  #L187a18.  if v0 != 0 then goto L187a20;
  #L187a1c.  v0:= 1I;
  #L187a1e.  goto L187a22;
  #L187a20.  v0:= 0I;
  #L187a22.  return v0;
}
procedure `java.lang.Object` `removeFirstIfIsInstanceOfOrPeekIf`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind this, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeFirstIfIsInstanceOfOrPeekIf:(Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L187ab0.  call temp:= `getNext`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187ab6.  v0:= temp @kind object;
  #L187ab8.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L187abc.  v1:= 0I;
  #L187abe.  if v0 != v4 then goto L187ac4;
  #L187ac2.  return v1 @kind object;
  #L187ac4.  v2:= 3I;
  #L187ac6.  v3:= "T" @kind object;
  #L187aca.  call `reifiedOperationMarker`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L187ad0.  v2:= instanceof @variable v0 @type ^`java.lang.Object` @kind boolean;
  #L187ad4.  if v2 != 0 then goto L187ada;
  #L187ad8.  return v1 @kind object;
  #L187ada.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L187ae0.  v1:= temp @kind object;
  #L187ae2.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L187ae6.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L187aec.  v1:= temp;
  #L187aee.  if v1 == 0 then goto L187b00;
  #L187af2.  call temp:= `isRemoved`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L187af8.  v1:= temp;
  #L187afa.  if v1 != 0 then goto L187b00;
  #L187afe.  return v0 @kind object;
  #L187b00.  call temp:= `removeOrNext`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeOrNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L187b06.  v1:= temp @kind object;
  #L187b08.  if v1 != 0 then goto L187b0e;
  #L187b0c.  return v0 @kind object;
  #L187b0e.  call `helpRemovePrev`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemovePrev:()V` @kind virtual;
  #L187b14.  goto L187ab0;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `removeFirstOrNull`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeFirstOrNull:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L187d18.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187d1e.  v0:= temp @kind object;
  #L187d20.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L187d24.  if v0 != v2 then goto L187d2c;
  #L187d28.  v0:= 0I;
  #L187d2a.  return v0 @kind object;
  #L187d2c.  call temp:= `remove`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.remove:()Z` @kind virtual;
  #L187d32.  v1:= temp;
  #L187d34.  if v1 == 0 then goto L187d3a;
  #L187d38.  return v0 @kind object;
  #L187d3a.  call `helpRemove`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemove:()V` @kind virtual;
  #L187d40.  goto L187d18;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `removeOrNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeOrNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L187d54.  call temp:= `getNext`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L187d5a.  v0:= temp @kind object;
  #L187d5c.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L187d60.  if v1 == 0 then goto L187d6e;
  #L187d64.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L187d68.  v0:= v0.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187d6c.  return v0 @kind object;
  #L187d6e.  if v0 != v4 then goto L187d78;
  #L187d72.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L187d76.  return v0 @kind object;
  #L187d78.  v1:= v0 @kind object;
  #L187d7a.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L187d7e.  call temp:= `d`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.d:()Lkotlinx/coroutines/internal/b;` @kind direct;
  #L187d84.  v2:= temp @kind object;
  #L187d86.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187d8a.  call temp:= `compareAndSet`(v3, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187d90.  v0:= temp;
  #L187d92.  if v0 == 0 then goto L187d54;
  #L187d96.  v0:= 0I;
  #L187d98.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L187d9e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L187b28.  v0:= new `java.lang.StringBuilder`;
  #L187b2c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L187b32.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L187b38.  v1:= temp @kind object;
  #L187b3a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L187b40.  v1:= temp @kind object;
  #L187b42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L187b48.  v1:= 64I;
  #L187b4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L187b52.  call temp:= `identityHashCode`(v2) @signature `Ljava/lang/System;.identityHashCode:(Ljava/lang/Object;)I` @kind static;
  #L187b58.  v1:= temp;
  #L187b5a.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L187b60.  v1:= temp @kind object;
  #L187b62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L187b68.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L187b6e.  v0:= temp @kind object;
  #L187b70.  return v0 @kind object;
}
procedure `int` `tryCondAddNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187a34.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187a38.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L187a3e.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187a42.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L187a48.  v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.oldNext` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v3 @kind object;
  #L187a4c.  v2:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L187a50.  call temp:= `compareAndSet`(v2, v1, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187a56.  v2:= temp;
  #L187a58.  if v2 != 0 then goto L187a60;
  #L187a5c.  v2:= 0I;
  #L187a5e.  return v2;
  #L187a60.  call temp:= `perform`(v4, v1) @signature `Lkotlinx/coroutines/internal/AtomicOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L187a66.  v2:= temp @kind object;
  #L187a68.  if v2 != 0 then goto L187a70;
  #L187a6c.  v2:= 1I;
  #L187a6e.  goto L187a72;
  #L187a70.  v2:= 2I;
  #L187a72.  return v2;
}
procedure `void` `validateNode$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v5 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.validateNode$kotlinx_coroutines_core:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L187fb8.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L187fbe.  v0:= temp;
  #L187fc0.  v1:= 1I;
  #L187fc2.  v2:= 0I;
  #L187fc4.  if v0 == 0 then goto L187fe8;
  #L187fc8.  v0:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L187fcc.  if v4 != v0 then goto L187fd4;
  #L187fd0.  v4:= 1I;
  #L187fd2.  goto L187fd6;
  #L187fd4.  v4:= 0I;
  #L187fd6.  if v4 == 0 then goto L187fdc;
  #L187fda.  goto L187fe8;
  #L187fdc.  v4:= new `java.lang.AssertionError`;
  #L187fe0.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L187fe6.  throw v4;
  #L187fe8.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L187fee.  v4:= temp;
  #L187ff0.  if v4 == 0 then goto L188012;
  #L187ff4.  v4:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L187ff8.  if v5 != v4 then goto L187ffe;
  #L187ffc.  goto L188000;
  #L187ffe.  v1:= 0I;
  #L188000.  if v1 == 0 then goto L188006;
  #L188004.  goto L188012;
  #L188006.  v4:= new `java.lang.AssertionError`;
  #L18800a.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L188010.  throw v4;
  #L188012.  return @kind void;
}
