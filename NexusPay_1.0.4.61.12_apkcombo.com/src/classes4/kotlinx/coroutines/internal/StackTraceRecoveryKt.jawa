record `kotlinx.coroutines.internal.StackTraceRecoveryKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.String` `@@kotlinx.coroutines.internal.StackTraceRecoveryKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.internal.StackTraceRecoveryKt.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L189a98.  v0:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L189a9c.  v0:= "kotlin.coroutines.jvm.internal.BaseContinuationImpl" @kind object;
  #L189aa0.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L189aa6.  v0:= temp @kind object;
  #L189aa8.  call temp:= `getCanonicalName`(v0) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L189aae.  v0:= temp @kind object;
  #L189ab0.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L189ab6.  v0:= temp @kind object;
  #L189ab8.  goto L189ad0;
  #L189aba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L189abc.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L189ac0.  call temp:= `createFailure`(v0) @signature `Lkotlin/ResultKt;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L189ac6.  v0:= temp @kind object;
  #L189ac8.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L189ace.  v0:= temp @kind object;
  #L189ad0.  call temp:= `exceptionOrNull-impl`(v0) @signature `Lkotlin/Result;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L189ad6.  v1:= temp @kind object;
  #L189ad8.  if v1 != 0 then goto L189ade;
  #L189adc.  goto L189ae2;
  #L189ade.  v0:= "kotlin.coroutines.jvm.internal.BaseContinuationImpl" @kind object;
  #L189ae2.  v0:= (`java.lang.String`) v0 @kind object;
  #L189ae6.  `@@kotlinx.coroutines.internal.StackTraceRecoveryKt.a` @type ^`java.lang.String` := v0 @kind object;
  #L189aea.  v0:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L189aee.  v0:= "kotlinx.coroutines.internal.StackTraceRecoveryKt" @kind object;
  #L189af2.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L189af8.  v0:= temp @kind object;
  #L189afa.  call temp:= `getCanonicalName`(v0) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L189b00.  v0:= temp @kind object;
  #L189b02.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L189b08.  v0:= temp @kind object;
  #L189b0a.  goto L189b22;
  #L189b0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L189b0e.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L189b12.  call temp:= `createFailure`(v0) @signature `Lkotlin/ResultKt;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L189b18.  v0:= temp @kind object;
  #L189b1a.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L189b20.  v0:= temp @kind object;
  #L189b22.  call temp:= `exceptionOrNull-impl`(v0) @signature `Lkotlin/Result;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L189b28.  v1:= temp @kind object;
  #L189b2a.  if v1 != 0 then goto L189b30;
  #L189b2e.  goto L189b34;
  #L189b30.  v0:= "kotlinx.coroutines.internal.StackTraceRecoveryKt" @kind object;
  #L189b34.  v0:= (`java.lang.String`) v0 @kind object;
  #L189b38.  `@@kotlinx.coroutines.internal.StackTraceRecoveryKt.b` @type ^`java.lang.String` := v0 @kind object;
  #L189b3c.  return @kind void;
  catch `java.lang.Throwable` @[L189a98..L189ab8] goto L189aba;
  catch `java.lang.Throwable` @[L189aea..L189b0a] goto L189b0c;
}
procedure `void` `CoroutineStackFrame$annotations`() @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.CoroutineStackFrame$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L189b68.  return @kind void;
}
procedure `void` `StackTraceElement$annotations`() @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.StackTraceElement$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L189b7c.  return @kind void;
}
procedure `kotlin.Pair` `a`(`java.lang.Throwable` v6 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.a:(Ljava/lang/Throwable;)Lkotlin/Pair;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L189a08.  call temp:= `getCause`(v6) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L189a0e.  v0:= temp @kind object;
  #L189a10.  v1:= 0I;
  #L189a12.  if v0 == 0 then goto L189a7a;
  #L189a16.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L189a1c.  v2:= temp @kind object;
  #L189a1e.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L189a24.  v3:= temp @kind object;
  #L189a26.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L189a2c.  v2:= temp;
  #L189a2e.  if v2 == 0 then goto L189a7a;
  #L189a32.  call temp:= `getStackTrace`(v6) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L189a38.  v2:= temp @kind object;
  #L189a3a.  v3:= length @variable v2;
  #L189a3c.  v4:= 0I;
  #L189a3e.  if v4 >= v3 then goto L189a5c;
  #L189a42.  v5:= v2[v4] @kind object;
  #L189a46.  call temp:= `isArtificial`(v5) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.isArtificial:(Ljava/lang/StackTraceElement;)Z` @kind static;
  #L189a4c.  v5:= temp;
  #L189a4e.  if v5 == 0 then goto L189a56;
  #L189a52.  v3:= 1I;
  #L189a54.  goto L189a5e;
  #L189a56.  v4:= v4 + 1;
  #L189a5a.  goto L189a3e;
  #L189a5c.  v3:= 0I;
  #L189a5e.  if v3 == 0 then goto L189a6c;
  #L189a62.  call temp:= `to`(v0, v2) @signature `Lkotlin/TuplesKt;.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;` @kind static;
  #L189a68.  v6:= temp @kind object;
  #L189a6a.  goto L189a86;
  #L189a6c.  v0:= new `java.lang.StackTraceElement`[v1];
  #L189a70.  call temp:= `to`(v6, v0) @signature `Lkotlin/TuplesKt;.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;` @kind static;
  #L189a76.  v6:= temp @kind object;
  #L189a78.  goto L189a86;
  #L189a7a.  v0:= new `java.lang.StackTraceElement`[v1];
  #L189a7e.  call temp:= `to`(v6, v0) @signature `Lkotlin/TuplesKt;.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;` @kind static;
  #L189a84.  v6:= temp @kind object;
  #L189a86.  return v6 @kind object;
}
procedure `java.lang.Throwable` `access$recoverFromStackFrame`(`java.lang.Throwable` v0 @kind object, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v1 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.access$recoverFromStackFrame:(Ljava/lang/Throwable;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1896b0.  call temp:= `g`(v0, v1) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.g:(Ljava/lang/Throwable;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Ljava/lang/Throwable;` @kind static;
  #L1896b6.  v0:= temp @kind object;
  #L1896b8.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `artificialFrame`(`java.lang.String` v3 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.artificialFrame:(Ljava/lang/String;)Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L189680.  v0:= new `java.lang.StackTraceElement`;
  #L189684.  v1:= "\b\b\b(" @kind object;
  #L189688.  call temp:= `stringPlus`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18968e.  v3:= temp @kind object;
  #L189690.  v1:= "\b" @kind object;
  #L189694.  v2:= -1I;
  #L189696.  call `<init>`(v0, v3, v1, v1, v2) @signature `Ljava/lang/StackTraceElement;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V` @kind direct;
  #L18969c.  return v0 @kind object;
}
procedure `java.lang.Throwable` `b`(`java.lang.Throwable` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.util.ArrayDeque` v8 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.b:(Ljava/lang/Throwable;Ljava/lang/Throwable;Ljava/util/ArrayDeque;)Ljava/lang/Throwable;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1896cc.  v0:= "Coroutine boundary" @kind object;
  #L1896d0.  call temp:= `artificialFrame`(v0) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.artificialFrame:(Ljava/lang/String;)Ljava/lang/StackTraceElement;` @kind static;
  #L1896d6.  v0:= temp @kind object;
  #L1896d8.  call `addFirst`(v8, v0) @signature `Ljava/util/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L1896de.  call temp:= `getStackTrace`(v6) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L1896e4.  v6:= temp @kind object;
  #L1896e6.  v0:= `@@kotlinx.coroutines.internal.StackTraceRecoveryKt.a` @type ^`java.lang.String` @kind object;
  #L1896ea.  call temp:= `e`(v6, v0) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.e:([Ljava/lang/StackTraceElement;Ljava/lang/String;)I` @kind static;
  #L1896f0.  v0:= temp;
  #L1896f2.  v1:= 0I;
  #L1896f4.  v2:= -1I;
  #L1896f6.  if v0 != v2 then goto L189726;
  #L1896fa.  v6:= new `java.lang.StackTraceElement`[v1];
  #L1896fe.  call temp:= `toArray`(v8, v6) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L189704.  v6:= temp @kind object;
  #L189706.  if v6 == 0 then goto L189716;
  #L18970a.  v6:= (`java.lang.StackTraceElement`[]) v6 @kind object;
  #L18970e.  call `setStackTrace`(v7, v6) @signature `Ljava/lang/Throwable;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L189714.  return v7 @kind object;
  #L189716.  v6:= new `java.lang.NullPointerException`;
  #L18971a.  v7:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L18971e.  call `<init>`(v6, v7) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L189724.  throw v6;
  #L189726.  call temp:= `size`(v8) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L18972c.  v2:= temp;
  #L18972e.  v2:= v2 + v0 @kind int;
  #L189730.  v2:= new `java.lang.StackTraceElement`[v2];
  #L189734.  if v0 <= 0 then goto L189750;
  #L189738.  v3:= 0I;
  #L18973a.  v4:= v3 + 1;
  #L18973e.  v5:= v6[v3] @kind object;
  #L189742.  v2[v3]:= v5 @kind object;
  #L189746.  if v4 < v0 then goto L18974c;
  #L18974a.  goto L189750;
  #L18974c.  v3:= v4;
  #L18974e.  goto L18973a;
  #L189750.  call temp:= `iterator`(v8) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L189756.  v6:= temp @kind object;
  #L189758.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L18975e.  v8:= temp;
  #L189760.  if v8 == 0 then goto L18977e;
  #L189764.  v8:= v1 + 1;
  #L189768.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L18976e.  v3:= temp @kind object;
  #L189770.  v3:= (`java.lang.StackTraceElement`) v3 @kind object;
  #L189774.  v1:= v1 + v0 @kind int;
  #L189776.  v2[v1]:= v3 @kind object;
  #L18977a.  v1:= v8;
  #L18977c.  goto L189758;
  #L18977e.  call `setStackTrace`(v7, v2) @signature `Ljava/lang/Throwable;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L189784.  return v7 @kind object;
}
procedure `java.util.ArrayDeque` `c`(`kotlin.coroutines.jvm.internal.CoroutineStackFrame` v3 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.c:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Ljava/util/ArrayDeque;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1899a0.  v0:= new `java.util.ArrayDeque`;
  #L1899a4.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L1899aa.  call temp:= `getStackTraceElement`(v3) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind interface;
  #L1899b0.  v1:= temp @kind object;
  #L1899b2.  if v1 != 0 then goto L1899b8;
  #L1899b6.  goto L1899be;
  #L1899b8.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1899be.  v1:= instanceof @variable v3 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L1899c2.  v2:= 0I;
  #L1899c4.  if v1 == 0 then goto L1899ca;
  #L1899c8.  goto L1899cc;
  #L1899ca.  v3:= v2 @kind object;
  #L1899cc.  if v3 != 0 then goto L1899d4;
  #L1899d0.  v3:= v2 @kind object;
  #L1899d2.  goto L1899dc;
  #L1899d4.  call temp:= `getCallerFrame`(v3) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind interface;
  #L1899da.  v3:= temp @kind object;
  #L1899dc.  if v3 != 0 then goto L1899e2;
  #L1899e0.  return v0 @kind object;
  #L1899e2.  call temp:= `getStackTraceElement`(v3) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind interface;
  #L1899e8.  v1:= temp @kind object;
  #L1899ea.  if v1 != 0 then goto L1899f0;
  #L1899ee.  goto L1899be;
  #L1899f0.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1899f6.  goto L1899be;
}
procedure `boolean` `d`(`java.lang.StackTraceElement` v2 @kind object, `java.lang.StackTraceElement` v3 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.d:(Ljava/lang/StackTraceElement;Ljava/lang/StackTraceElement;)Z` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L189560.  call temp:= `getLineNumber`(v2) @signature `Ljava/lang/StackTraceElement;.getLineNumber:()I` @kind virtual;
  #L189566.  v0:= temp;
  #L189568.  call temp:= `getLineNumber`(v3) @signature `Ljava/lang/StackTraceElement;.getLineNumber:()I` @kind virtual;
  #L18956e.  v1:= temp;
  #L189570.  if v0 != v1 then goto L1895cc;
  #L189574.  call temp:= `getMethodName`(v2) @signature `Ljava/lang/StackTraceElement;.getMethodName:()Ljava/lang/String;` @kind virtual;
  #L18957a.  v0:= temp @kind object;
  #L18957c.  call temp:= `getMethodName`(v3) @signature `Ljava/lang/StackTraceElement;.getMethodName:()Ljava/lang/String;` @kind virtual;
  #L189582.  v1:= temp @kind object;
  #L189584.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L18958a.  v0:= temp;
  #L18958c.  if v0 == 0 then goto L1895cc;
  #L189590.  call temp:= `getFileName`(v2) @signature `Ljava/lang/StackTraceElement;.getFileName:()Ljava/lang/String;` @kind virtual;
  #L189596.  v0:= temp @kind object;
  #L189598.  call temp:= `getFileName`(v3) @signature `Ljava/lang/StackTraceElement;.getFileName:()Ljava/lang/String;` @kind virtual;
  #L18959e.  v1:= temp @kind object;
  #L1895a0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1895a6.  v0:= temp;
  #L1895a8.  if v0 == 0 then goto L1895cc;
  #L1895ac.  call temp:= `getClassName`(v2) @signature `Ljava/lang/StackTraceElement;.getClassName:()Ljava/lang/String;` @kind virtual;
  #L1895b2.  v2:= temp @kind object;
  #L1895b4.  call temp:= `getClassName`(v3) @signature `Ljava/lang/StackTraceElement;.getClassName:()Ljava/lang/String;` @kind virtual;
  #L1895ba.  v3:= temp @kind object;
  #L1895bc.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1895c2.  v2:= temp;
  #L1895c4.  if v2 == 0 then goto L1895cc;
  #L1895c8.  v2:= 1I;
  #L1895ca.  goto L1895ce;
  #L1895cc.  v2:= 0I;
  #L1895ce.  return v2;
}
procedure `int` `e`(`java.lang.StackTraceElement`[] v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.e:([Ljava/lang/StackTraceElement;Ljava/lang/String;)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18960c.  v0:= length @variable v3;
  #L18960e.  v1:= 0I;
  #L189610.  if v1 >= v0 then goto L189634;
  #L189614.  v2:= v3[v1] @kind object;
  #L189618.  call temp:= `getClassName`(v2) @signature `Ljava/lang/StackTraceElement;.getClassName:()Ljava/lang/String;` @kind virtual;
  #L18961e.  v2:= temp @kind object;
  #L189620.  call temp:= `areEqual`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L189626.  v2:= temp;
  #L189628.  if v2 == 0 then goto L18962e;
  #L18962c.  goto L189636;
  #L18962e.  v1:= v1 + 1;
  #L189632.  goto L189610;
  #L189634.  v1:= -1I;
  #L189636.  return v1;
}
procedure `void` `f`(`java.lang.StackTraceElement`[] v5 @kind object, `java.util.ArrayDeque` v6 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.f:([Ljava/lang/StackTraceElement;Ljava/util/ArrayDeque;)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L189ba8.  v0:= length @variable v5;
  #L189baa.  v1:= 0I;
  #L189bac.  if v1 >= v0 then goto L189bc8;
  #L189bb0.  v2:= v5[v1] @kind object;
  #L189bb4.  call temp:= `isArtificial`(v2) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.isArtificial:(Ljava/lang/StackTraceElement;)Z` @kind static;
  #L189bba.  v2:= temp;
  #L189bbc.  if v2 == 0 then goto L189bc2;
  #L189bc0.  goto L189bca;
  #L189bc2.  v1:= v1 + 1;
  #L189bc6.  goto L189bac;
  #L189bc8.  v1:= -1I;
  #L189bca.  v1:= v1 + 1;
  #L189bce.  v0:= length @variable v5;
  #L189bd0.  v0:= v0 + -1;
  #L189bd4.  if v1 > v0 then goto L189c12;
  #L189bd8.  v2:= v0 + -1;
  #L189bdc.  v3:= v5[v0] @kind object;
  #L189be0.  call temp:= `getLast`(v6) @signature `Ljava/util/ArrayDeque;.getLast:()Ljava/lang/Object;` @kind virtual;
  #L189be6.  v4:= temp @kind object;
  #L189be8.  v4:= (`java.lang.StackTraceElement`) v4 @kind object;
  #L189bec.  call temp:= `d`(v3, v4) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.d:(Ljava/lang/StackTraceElement;Ljava/lang/StackTraceElement;)Z` @kind static;
  #L189bf2.  v3:= temp;
  #L189bf4.  if v3 == 0 then goto L189bfe;
  #L189bf8.  call temp:= `removeLast`(v6) @signature `Ljava/util/ArrayDeque;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L189bfe.  v3:= v5[v0] @kind object;
  #L189c02.  call `addFirst`(v6, v3) @signature `Ljava/util/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L189c08.  if v0 != v1 then goto L189c0e;
  #L189c0c.  goto L189c12;
  #L189c0e.  v0:= v2;
  #L189c10.  goto L189bd8;
  #L189c12.  return @kind void;
}
procedure `java.lang.Throwable` `g`(`java.lang.Throwable` v5 @kind object, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v6 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.g:(Ljava/lang/Throwable;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Ljava/lang/Throwable;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L189798.  call temp:= `a`(v5) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.a:(Ljava/lang/Throwable;)Lkotlin/Pair;` @kind static;
  #L18979e.  v0:= temp @kind object;
  #L1897a0.  call temp:= `component1`(v0) @signature `Lkotlin/Pair;.component1:()Ljava/lang/Object;` @kind virtual;
  #L1897a6.  v1:= temp @kind object;
  #L1897a8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L1897ac.  call temp:= `component2`(v0) @signature `Lkotlin/Pair;.component2:()Ljava/lang/Object;` @kind virtual;
  #L1897b2.  v0:= temp @kind object;
  #L1897b4.  v0:= (`java.lang.StackTraceElement`[]) v0 @kind object;
  #L1897b8.  call temp:= `tryCopyException`(v1) @signature `Lkotlinx/coroutines/internal/ExceptionsConstuctorKt;.tryCopyException:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L1897be.  v2:= temp @kind object;
  #L1897c0.  if v2 != 0 then goto L1897c6;
  #L1897c4.  return v5 @kind object;
  #L1897c6.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1897cc.  v3:= temp @kind object;
  #L1897ce.  call temp:= `getMessage`(v1) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1897d4.  v4:= temp @kind object;
  #L1897d6.  call temp:= `areEqual`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1897dc.  v3:= temp;
  #L1897de.  if v3 != 0 then goto L1897e4;
  #L1897e2.  return v5 @kind object;
  #L1897e4.  call temp:= `c`(v6) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.c:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Ljava/util/ArrayDeque;` @kind static;
  #L1897ea.  v6:= temp @kind object;
  #L1897ec.  call temp:= `isEmpty`(v6) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L1897f2.  v3:= temp;
  #L1897f4.  if v3 == 0 then goto L1897fa;
  #L1897f8.  return v5 @kind object;
  #L1897fa.  if v1 == v5 then goto L189804;
  #L1897fe.  call `f`(v0, v6) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.f:([Ljava/lang/StackTraceElement;Ljava/util/ArrayDeque;)V` @kind static;
  #L189804.  call temp:= `b`(v1, v2, v6) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.b:(Ljava/lang/Throwable;Ljava/lang/Throwable;Ljava/util/ArrayDeque;)Ljava/lang/Throwable;` @kind static;
  #L18980a.  return v2 @kind object;
}
procedure `java.lang.Throwable` `h`(`java.lang.Throwable` v7 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.h:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L189884.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L18988a.  v0:= temp @kind object;
  #L18988c.  v1:= length @variable v0;
  #L18988e.  v2:= `@@kotlinx.coroutines.internal.StackTraceRecoveryKt.b` @type ^`java.lang.String` @kind object;
  #L189892.  call temp:= `e`(v0, v2) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.e:([Ljava/lang/StackTraceElement;Ljava/lang/String;)I` @kind static;
  #L189898.  v2:= temp;
  #L18989a.  v3:= v2 + 1;
  #L18989e.  v4:= `@@kotlinx.coroutines.internal.StackTraceRecoveryKt.a` @type ^`java.lang.String` @kind object;
  #L1898a2.  call temp:= `e`(v0, v4) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.e:([Ljava/lang/StackTraceElement;Ljava/lang/String;)I` @kind static;
  #L1898a8.  v4:= temp;
  #L1898aa.  v5:= 0I;
  #L1898ac.  v6:= -1I;
  #L1898ae.  if v4 != v6 then goto L1898b6;
  #L1898b2.  v4:= 0I;
  #L1898b4.  goto L1898ba;
  #L1898b6.  v4:= v1 - v4 @kind int;
  #L1898ba.  v1:= v1 - v2 @kind int;
  #L1898bc.  v1:= v1 - v4 @kind int;
  #L1898be.  v2:= new `java.lang.StackTraceElement`[v1];
  #L1898c2.  if v5 >= v1 then goto L1898ee;
  #L1898c6.  if v5 != 0 then goto L1898d8;
  #L1898ca.  v4:= "Coroutine boundary" @kind object;
  #L1898ce.  call temp:= `artificialFrame`(v4) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.artificialFrame:(Ljava/lang/String;)Ljava/lang/StackTraceElement;` @kind static;
  #L1898d4.  v4:= temp @kind object;
  #L1898d6.  goto L1898e4;
  #L1898d8.  v4:= v3 + v5 @kind int;
  #L1898dc.  v4:= v4 + -1;
  #L1898e0.  v4:= v0[v4] @kind object;
  #L1898e4.  v2[v5]:= v4 @kind object;
  #L1898e8.  v5:= v5 + 1;
  #L1898ec.  goto L1898c2;
  #L1898ee.  call `setStackTrace`(v7, v2) @signature `Ljava/lang/Throwable;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L1898f4.  return v7 @kind object;
}
procedure `void` `initCause`(`java.lang.Throwable` v0 @kind object, `java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.initCause:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L189b90.  call temp:= `initCause`(v0, v1) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L189b96.  return @kind void;
}
procedure `boolean` `isArtificial`(`java.lang.StackTraceElement` v4 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.isArtificial:(Ljava/lang/StackTraceElement;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1895e0.  call temp:= `getClassName`(v4) @signature `Ljava/lang/StackTraceElement;.getClassName:()Ljava/lang/String;` @kind virtual;
  #L1895e6.  v4:= temp @kind object;
  #L1895e8.  v0:= "\b\b\b" @kind object;
  #L1895ec.  v1:= 0I;
  #L1895ee.  v2:= 2I;
  #L1895f0.  v3:= 0I;
  #L1895f2.  call temp:= `startsWith$default`(v4, v0, v1, v2, v3) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @kind static;
  #L1895f8.  v4:= temp;
  #L1895fa.  return v4;
}
procedure `java.lang.Object` `recoverAndThrow`(`java.lang.Throwable` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.recoverAndThrow:(Ljava/lang/Throwable;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L189648.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/DebugKt;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L18964e.  v0:= temp;
  #L189650.  if v0 == 0 then goto L18966c;
  #L189654.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L189658.  if v0 != 0 then goto L18965e;
  #L18965c.  throw v1;
  #L18965e.  v2:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v2 @kind object;
  #L189662.  call temp:= `access$recoverFromStackFrame`(v1, v2) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.access$recoverFromStackFrame:(Ljava/lang/Throwable;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Ljava/lang/Throwable;` @kind static;
  #L189668.  v1:= temp @kind object;
  #L18966a.  throw v1;
  #L18966c.  throw v1;
}
procedure `java.lang.Throwable` `recoverStackTrace`(`java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.recoverStackTrace:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L18981c.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/DebugKt;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L189822.  v0:= temp;
  #L189824.  if v0 != 0 then goto L18982a;
  #L189828.  return v1 @kind object;
  #L18982a.  call temp:= `tryCopyException`(v1) @signature `Lkotlinx/coroutines/internal/ExceptionsConstuctorKt;.tryCopyException:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L189830.  v0:= temp @kind object;
  #L189832.  if v0 != 0 then goto L189838;
  #L189836.  return v1 @kind object;
  #L189838.  call temp:= `h`(v0) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.h:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L18983e.  return v0 @kind object;
}
procedure `java.lang.Throwable` `recoverStackTrace`(`java.lang.Throwable` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.recoverStackTrace:(Ljava/lang/Throwable;Lkotlin/coroutines/Continuation;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L189850.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/DebugKt;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L189856.  v0:= temp;
  #L189858.  if v0 == 0 then goto L189872;
  #L18985c.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L189860.  if v0 != 0 then goto L189866;
  #L189864.  goto L189872;
  #L189866.  v2:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v2 @kind object;
  #L18986a.  call temp:= `access$recoverFromStackFrame`(v1, v2) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.access$recoverFromStackFrame:(Ljava/lang/Throwable;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Ljava/lang/Throwable;` @kind static;
  #L189870.  v1:= temp @kind object;
  #L189872.  return v1 @kind object;
}
procedure `java.lang.Throwable` `unwrap`(`java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.unwrap:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L189908.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/DebugKt;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L18990e.  v0:= temp;
  #L189910.  if v0 != 0 then goto L189916;
  #L189914.  goto L18991e;
  #L189916.  call temp:= `unwrapImpl`(v1) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.unwrapImpl:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L18991c.  v1:= temp @kind object;
  #L18991e.  return v1 @kind object;
}
procedure `java.lang.Throwable` `unwrapImpl`(`java.lang.Throwable` v6 @kind object) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.unwrapImpl:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L189930.  call temp:= `getCause`(v6) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L189936.  v0:= temp @kind object;
  #L189938.  if v0 == 0 then goto L18998c;
  #L18993c.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L189942.  v1:= temp @kind object;
  #L189944.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L18994a.  v2:= temp @kind object;
  #L18994c.  call temp:= `areEqual`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L189952.  v1:= temp;
  #L189954.  if v1 != 0 then goto L18995a;
  #L189958.  goto L18998c;
  #L18995a.  call temp:= `getStackTrace`(v6) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L189960.  v1:= temp @kind object;
  #L189962.  v2:= length @variable v1;
  #L189964.  v3:= 0I;
  #L189966.  v4:= 0I;
  #L189968.  if v4 >= v2 then goto L189986;
  #L18996c.  v5:= v1[v4] @kind object;
  #L189970.  call temp:= `isArtificial`(v5) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.isArtificial:(Ljava/lang/StackTraceElement;)Z` @kind static;
  #L189976.  v5:= temp;
  #L189978.  if v5 == 0 then goto L189980;
  #L18997c.  v3:= 1I;
  #L18997e.  goto L189986;
  #L189980.  v4:= v4 + 1;
  #L189984.  goto L189968;
  #L189986.  if v3 == 0 then goto L18998c;
  #L18998a.  return v0 @kind object;
  #L18998c.  return v6 @kind object;
}
