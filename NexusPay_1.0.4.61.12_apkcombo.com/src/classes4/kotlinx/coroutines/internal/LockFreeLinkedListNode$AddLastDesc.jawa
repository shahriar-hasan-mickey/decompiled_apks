record `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc._affectedNode` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.queue` @AccessFlag PUBLIC_FINAL;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L187324.  v0:= constclass @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` @kind object;
  #L187328.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L18732c.  v2:= "_affectedNode" @kind object;
  #L187330.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L187336.  v0:= temp @kind object;
  #L187338.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L18733c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L187350.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.<init>:()V` @kind direct;
  #L187356.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L18735a.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v2 @kind object;
  #L18735e.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L187364.  v1:= temp;
  #L187366.  if v1 == 0 then goto L18739e;
  #L18736a.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18736e.  v1:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L187372.  v2:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187376.  if v1 != v2 then goto L18738a;
  #L18737a.  v1:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L18737e.  v2:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187382.  if v1 != v2 then goto L18738a;
  #L187386.  v1:= 1I;
  #L187388.  goto L18738c;
  #L18738a.  v1:= 0I;
  #L18738c.  if v1 == 0 then goto L187392;
  #L187390.  goto L18739e;
  #L187392.  v1:= new `java.lang.AssertionError`;
  #L187396.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18739c.  throw v1;
  #L18739e.  v1:= 0I;
  #L1873a0.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc._affectedNode` @type ^`java.lang.Object` := v1 @kind object;
  #L1873a4.  return @kind void;
}
procedure `void` `finishOnSuccess`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.finishOnSuccess:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PROTECTED {
    temp;

  #L1873b8.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1873bc.  v2:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1873c0.  call `access$finishAdd`(v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$finishAdd:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind static;
  #L1873c6.  return @kind void;
}
procedure `void` `finishPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1873d8.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1873dc.  v3:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1873e0.  v1:= 0I;
  #L1873e2.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1873e8.  return @kind void;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getAffectedNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1872d0.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc._affectedNode` @type ^`java.lang.Object` @kind object;
  #L1872d4.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L1872d8.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getOriginalNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.getOriginalNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1872ec.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1872f0.  return v0 @kind object;
}
procedure `boolean` `retry`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.retry:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @AccessFlag PROTECTED {
    temp;

  #L187278.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18727c.  if v2 == v1 then goto L187284;
  #L187280.  v1:= 1I;
  #L187282.  goto L187286;
  #L187284.  v1:= 0I;
  #L187286.  return v1;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `takeAffectedNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v1 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.takeAffectedNode:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L187304.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L187308.  call temp:= `access$correctPrev`(v0, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$correctPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L18730e.  v2:= temp @kind object;
  #L187310.  return v2 @kind object;
}
procedure `java.lang.Object` `updatedNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L187298.  v3:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18729c.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1872a0.  call temp:= `compareAndSet`(v0, v3, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1872a6.  v2:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1872aa.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1872ae.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1872b2.  call temp:= `compareAndSet`(v3, v2, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1872b8.  v2:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc.node` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1872bc.  return v2 @kind object;
}
