record `kotlinx.coroutines.internal.LockFreeLinkedListHead` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v0 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L186e88.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @kind direct;
  #L186e8e.  return @kind void;
}
procedure `void` `forEach`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v3 @kind this, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.forEach:(Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L186ea0.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L186ea6.  v0:= temp @kind object;
  #L186ea8.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L186eac.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L186eb2.  v1:= temp;
  #L186eb4.  if v1 != 0 then goto L186edc;
  #L186eb8.  v1:= 3I;
  #L186eba.  v2:= "T" @kind object;
  #L186ebe.  call `reifiedOperationMarker`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L186ec4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind boolean;
  #L186ec8.  if v1 == 0 then goto L186ed2;
  #L186ecc.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L186ed2.  call temp:= `getNextNode`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNextNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L186ed8.  v0:= temp @kind object;
  #L186eda.  goto L186eac;
  #L186edc.  return @kind void;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L186e14.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L186e1a.  v0:= temp @kind object;
  #L186e1c.  if v0 != v1 then goto L186e24;
  #L186e20.  v0:= 1I;
  #L186e22.  goto L186e26;
  #L186e24.  v0:= 0I;
  #L186e26.  return v0;
}
procedure `boolean` `isRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isRemoved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L186e38.  v0:= 0I;
  #L186e3a.  return v0;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `nextIfRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.nextIfRemoved:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L186e74.  v0:= 0I;
  #L186e76.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.remove:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L186e4c.  v0:= new `java.lang.IllegalStateException`;
  #L186e50.  v1:= "head cannot be removed" @kind object;
  #L186e54.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L186e5a.  v1:= temp @kind object;
  #L186e5c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L186e62.  throw v0;
}
procedure `void` `validate$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.validate$kotlinx_coroutines_core:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L186ef0.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L186ef6.  v0:= temp @kind object;
  #L186ef8.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L186efc.  v1:= v3 @kind object;
  #L186efe.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L186f04.  v2:= temp;
  #L186f06.  if v2 != 0 then goto L186f1e;
  #L186f0a.  call temp:= `getNextNode`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNextNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L186f10.  v2:= temp @kind object;
  #L186f12.  call `validateNode$kotlinx_coroutines_core`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.validateNode$kotlinx_coroutines_core:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L186f18.  v1:= v0 @kind object;
  #L186f1a.  v0:= v2 @kind object;
  #L186f1c.  goto L186efe;
  #L186f1e.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L186f24.  v0:= temp @kind object;
  #L186f26.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L186f2a.  call `validateNode$kotlinx_coroutines_core`(v3, v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.validateNode$kotlinx_coroutines_core:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L186f30.  return @kind void;
}
