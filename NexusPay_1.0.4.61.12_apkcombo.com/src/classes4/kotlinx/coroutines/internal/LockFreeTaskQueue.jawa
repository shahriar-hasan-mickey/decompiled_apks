record `kotlinx.coroutines.internal.LockFreeTaskQueue` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeTaskQueue.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L188944.  v0:= constclass @type ^`kotlinx.coroutines.internal.LockFreeTaskQueue` @kind object;
  #L188948.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L18894c.  v2:= "_cur" @kind object;
  #L188950.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L188956.  v0:= temp @kind object;
  #L188958.  `@@kotlinx.coroutines.internal.LockFreeTaskQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L18895c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L188970.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L188976.  v0:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore`;
  #L18897a.  v1:= 8I;
  #L18897e.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<init>:(IZ)V` @kind direct;
  #L188984.  v2.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` := v0 @kind object;
  #L188988.  return @kind void;
}
procedure `boolean` `addLast`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L188828.  v0:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` @kind object;
  #L18882c.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L188830.  call temp:= `addLast`(v0, v4) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L188836.  v1:= temp;
  #L188838.  v2:= 1I;
  #L18883a.  if v1 == 0 then goto L188862;
  #L18883e.  if v1 == v2 then goto L18884e;
  #L188842.  v0:= 2I;
  #L188844.  if v1 == v0 then goto L18884a;
  #L188848.  goto L188828;
  #L18884a.  v4:= 0I;
  #L18884c.  return v4;
  #L18884e.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L188852.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L188858.  v2:= temp @kind object;
  #L18885a.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L188860.  goto L188828;
  #L188862.  return v2;
}
procedure `void` `close`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.close:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18899c.  v0:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` @kind object;
  #L1889a0.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L1889a4.  call temp:= `close`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.close:()Z` @kind virtual;
  #L1889aa.  v1:= temp;
  #L1889ac.  if v1 == 0 then goto L1889b2;
  #L1889b0.  return @kind void;
  #L1889b2.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1889b6.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L1889bc.  v2:= temp @kind object;
  #L1889be.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1889c4.  goto L18899c;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1888bc.  v0:= v1.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` @kind object;
  #L1888c0.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L1888c4.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.getSize:()I` @kind virtual;
  #L1888ca.  v0:= temp;
  #L1888cc.  return v0;
}
procedure `boolean` `isClosed`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.isClosed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L188874.  v0:= v1.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` @kind object;
  #L188878.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L18887c.  call temp:= `isClosed`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isClosed:()Z` @kind virtual;
  #L188882.  v0:= temp;
  #L188884.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L188898.  v0:= v1.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` @kind object;
  #L18889c.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L1888a0.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isEmpty:()Z` @kind virtual;
  #L1888a6.  v0:= temp;
  #L1888a8.  return v0;
}
procedure `java.util.List` `map`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v1 @kind this, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.map:(Lkotlin/jvm/functions/Function1;)Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L188920.  v0:= v1.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` @kind object;
  #L188924.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L188928.  call temp:= `map`(v0, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.map:(Lkotlin/jvm/functions/Function1;)Ljava/util/List;` @kind virtual;
  #L18892e.  v2:= temp @kind object;
  #L188930.  return v2 @kind object;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlinx.coroutines.internal.LockFreeTaskQueue` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1888e0.  v0:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueue._cur` @type ^`java.lang.Object` @kind object;
  #L1888e4.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L1888e8.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1888ee.  v1:= temp @kind object;
  #L1888f0.  v2:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1888f4.  if v1 == v2 then goto L1888fa;
  #L1888f8.  return v1 @kind object;
  #L1888fa.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1888fe.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L188904.  v2:= temp @kind object;
  #L188906.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18890c.  goto L1888e0;
}
