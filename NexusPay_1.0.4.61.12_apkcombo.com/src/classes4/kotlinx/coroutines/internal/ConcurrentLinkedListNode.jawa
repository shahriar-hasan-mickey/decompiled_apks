record `kotlinx.coroutines.internal.ConcurrentLinkedListNode` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.Object` `kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L184f48.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L184f4c.  v1:= constclass @type ^`kotlinx.coroutines.internal.ConcurrentLinkedListNode` @kind object;
  #L184f50.  v2:= "_next" @kind object;
  #L184f54.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L184f5a.  v2:= temp @kind object;
  #L184f5c.  `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L184f60.  v2:= "_prev" @kind object;
  #L184f64.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L184f6a.  v0:= temp @kind object;
  #L184f6c.  `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L184f70.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.<init>:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L184f84.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L184f8a.  v0:= 0I;
  #L184f8c.  v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @type ^`java.lang.Object` := v0 @kind object;
  #L184f90.  v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` := v2 @kind object;
  #L184f94.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `a`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.a:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L184e24.  call temp:= `getPrev`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getPrev:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L184e2a.  v0:= temp @kind object;
  #L184e2c.  if v0 == 0 then goto L184e46;
  #L184e30.  call temp:= `getRemoved`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L184e36.  v1:= temp;
  #L184e38.  if v1 == 0 then goto L184e46;
  #L184e3c.  v0:= v0.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L184e40.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L184e44.  goto L184e2c;
  #L184e46.  return v0 @kind object;
}
procedure `java.lang.Object` `access$getNextOrClosed`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v0 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L184df0.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.b:()Ljava/lang/Object;` @kind direct;
  #L184df6.  v0:= temp @kind object;
  #L184df8.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.b:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L184e0c.  v0:= v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L184e10.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `c`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.c:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L184ea4.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L184eaa.  v0:= temp;
  #L184eac.  if v0 == 0 then goto L184ece;
  #L184eb0.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L184eb6.  v0:= temp;
  #L184eb8.  v0:= v0 ^~ 1;
  #L184ebc.  if v0 == 0 then goto L184ec2;
  #L184ec0.  goto L184ece;
  #L184ec2.  v0:= new `java.lang.AssertionError`;
  #L184ec6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L184ecc.  throw v0;
  #L184ece.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L184ed4.  v0:= temp @kind object;
  #L184ed6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L184edc.  call temp:= `getRemoved`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L184ee2.  v1:= temp;
  #L184ee4.  if v1 == 0 then goto L184ef8;
  #L184ee8.  call temp:= `getNext`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L184eee.  v0:= temp @kind object;
  #L184ef0.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L184ef6.  goto L184edc;
  #L184ef8.  return v0 @kind object;
}
procedure `void` `cleanPrev`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.cleanPrev:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184fa8.  v0:= `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L184fac.  v1:= 0I;
  #L184fae.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L184fb4.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `getNext`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184e58.  call temp:= `access$getNextOrClosed`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L184e5e.  v0:= temp @kind object;
  #L184e60.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L184e66.  v1:= temp @kind object;
  #L184e68.  if v0 != v1 then goto L184e70;
  #L184e6c.  v0:= 0I;
  #L184e6e.  return v0 @kind object;
  #L184e70.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L184e74.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `getPrev`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getPrev:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L184e88.  v0:= v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L184e8c.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L184e90.  return v0 @kind object;
}
procedure `boolean` `getRemoved`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isTail`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L184d84.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L184d8a.  v0:= temp @kind object;
  #L184d8c.  if v0 != 0 then goto L184d94;
  #L184d90.  v0:= 1I;
  #L184d92.  goto L184d96;
  #L184d94.  v0:= 0I;
  #L184d96.  return v0;
}
procedure `boolean` `markAsClosed`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v3 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.markAsClosed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L184da8.  v0:= `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L184dac.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L184db2.  v1:= temp @kind object;
  #L184db4.  v2:= 0I;
  #L184db6.  call temp:= `compareAndSet`(v0, v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L184dbc.  v0:= temp;
  #L184dbe.  return v0;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `nextOrIfClosed`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this, `kotlin.jvm.functions.Function0` v3 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.nextOrIfClosed:(Lkotlin/jvm/functions/Function0;)Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184f0c.  call temp:= `access$getNextOrClosed`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L184f12.  v0:= temp @kind object;
  #L184f14.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L184f1a.  v1:= temp @kind object;
  #L184f1c.  if v0 == v1 then goto L184f26;
  #L184f20.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L184f24.  return v0 @kind object;
  #L184f26.  call temp:= `invoke`(v3) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L184f2c.  v3:= new `kotlin.KotlinNothingValueException`;
  #L184f30.  call `<init>`(v3) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L184f36.  throw v3;
}
procedure `void` `remove`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184fc8.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L184fce.  v0:= temp;
  #L184fd0.  if v0 == 0 then goto L184fee;
  #L184fd4.  call temp:= `getRemoved`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L184fda.  v0:= temp;
  #L184fdc.  if v0 == 0 then goto L184fe2;
  #L184fe0.  goto L184fee;
  #L184fe2.  v0:= new `java.lang.AssertionError`;
  #L184fe6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L184fec.  throw v0;
  #L184fee.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L184ff4.  v0:= temp;
  #L184ff6.  if v0 == 0 then goto L185018;
  #L184ffa.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L185000.  v0:= temp;
  #L185002.  v0:= v0 ^~ 1;
  #L185006.  if v0 == 0 then goto L18500c;
  #L18500a.  goto L185018;
  #L18500c.  v0:= new `java.lang.AssertionError`;
  #L185010.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L185016.  throw v0;
  #L185018.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.a:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind direct;
  #L18501e.  v0:= temp @kind object;
  #L185020.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.c:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind direct;
  #L185026.  v1:= temp @kind object;
  #L185028.  v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` := v0 @kind object;
  #L18502c.  if v0 == 0 then goto L185034;
  #L185030.  v0.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @type ^`java.lang.Object` := v1 @kind object;
  #L185034.  call temp:= `getRemoved`(v1) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L18503a.  v1:= temp;
  #L18503c.  if v1 == 0 then goto L185042;
  #L185040.  goto L185018;
  #L185042.  if v0 == 0 then goto L185054;
  #L185046.  call temp:= `getRemoved`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L18504c.  v0:= temp;
  #L18504e.  if v0 == 0 then goto L185054;
  #L185052.  goto L185018;
  #L185054.  return @kind void;
}
procedure `boolean` `trySetNext`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.ConcurrentLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.trySetNext:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L184dd0.  v0:= `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L184dd4.  v1:= 0I;
  #L184dd6.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L184ddc.  v3:= temp;
  #L184dde.  return v3;
}
