record `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.OpDescriptor` @kind class {
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1875f0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @kind direct;
  #L1875f6.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L1875fa.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v2 @kind object;
  #L1875fe.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` := v3 @kind object;
  #L187602.  return @kind void;
}
procedure `void` `finishPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.finishPrepare:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L187614.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L187618.  call `finishPrepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @kind virtual;
  #L18761e.  return @kind void;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1875d0.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L1875d4.  call temp:= `getAtomicOp`(v0) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L1875da.  v0:= temp @kind object;
  #L1875dc.  return v0 @kind object;
}
procedure `java.lang.Object` `perform`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18748c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L187492.  v0:= temp;
  #L187494.  if v0 == 0 then goto L1874b8;
  #L187498.  v0:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18749c.  if v5 != v0 then goto L1874a4;
  #L1874a0.  v0:= 1I;
  #L1874a2.  goto L1874a6;
  #L1874a4.  v0:= 0I;
  #L1874a6.  if v0 == 0 then goto L1874ac;
  #L1874aa.  goto L1874b8;
  #L1874ac.  v5:= new `java.lang.AssertionError`;
  #L1874b0.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1874b6.  throw v5;
  #L1874b8.  if v5 == 0 then goto L187566;
  #L1874bc.  v5:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v5 @kind object;
  #L1874c0.  v0:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L1874c4.  call temp:= `onPrepare`(v0, v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Ljava/lang/Object;` @kind virtual;
  #L1874ca.  v0:= temp @kind object;
  #L1874cc.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED` @type ^`java.lang.Object` @kind object;
  #L1874d0.  v2:= 0I;
  #L1874d2.  if v0 != v1 then goto L187508;
  #L1874d6.  v0:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1874da.  call temp:= `access$removed`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$removed:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/b;` @kind static;
  #L1874e0.  v1:= temp @kind object;
  #L1874e2.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1874e6.  call temp:= `compareAndSet`(v3, v5, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1874ec.  v1:= temp;
  #L1874ee.  if v1 == 0 then goto L187502;
  #L1874f2.  v1:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L1874f6.  call `onRemoved`(v1, v5) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onRemoved:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L1874fc.  call temp:= `access$correctPrev`(v0, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$correctPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L187502.  v5:= `@@kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED` @type ^`java.lang.Object` @kind object;
  #L187506.  return v5 @kind object;
  #L187508.  if v0 == 0 then goto L18751e;
  #L18750c.  call temp:= `getAtomicOp`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L187512.  v1:= temp @kind object;
  #L187514.  call temp:= `decide`(v1, v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18751a.  v0:= temp @kind object;
  #L18751c.  goto L18752e;
  #L18751e.  call temp:= `getAtomicOp`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L187524.  v0:= temp @kind object;
  #L187526.  call temp:= `getConsensus`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getConsensus:()Ljava/lang/Object;` @kind virtual;
  #L18752c.  v0:= temp @kind object;
  #L18752e.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L187532.  if v0 != v1 then goto L187540;
  #L187536.  call temp:= `getAtomicOp`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L18753c.  v0:= temp @kind object;
  #L18753e.  goto L18755a;
  #L187540.  if v0 != 0 then goto L187556;
  #L187544.  v0:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L187548.  v1:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18754c.  call temp:= `updatedNext`(v0, v5, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L187552.  v0:= temp @kind object;
  #L187554.  goto L18755a;
  #L187556.  v0:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L18755a.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18755e.  call temp:= `compareAndSet`(v1, v5, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L187564.  return v2 @kind object;
  #L187566.  v5:= new `java.lang.NullPointerException`;
  #L18756a.  v0:= "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }" @kind object;
  #L18756e.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L187574.  throw v5;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L187588.  v0:= new `java.lang.StringBuilder`;
  #L18758c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L187592.  v1:= "PrepareOp(op=" @kind object;
  #L187596.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18759c.  call temp:= `getAtomicOp`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L1875a2.  v1:= temp @kind object;
  #L1875a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1875aa.  v1:= 41I;
  #L1875ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1875b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1875ba.  v0:= temp @kind object;
  #L1875bc.  return v0 @kind object;
}
