record `kotlinx.coroutines.internal.ThreadSafeHeap` @kind class @AccessFlag PUBLIC {
  `int` `kotlinx.coroutines.internal.ThreadSafeHeap._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.ThreadSafeHeapNode`[] `kotlinx.coroutines.internal.ThreadSafeHeap.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L18a948.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18a94e.  v0:= 0I;
  #L18a950.  v1.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int` := v0;
  #L18a954.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode`[] `a`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.a:()[Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18a8ec.  v0:= v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L18a8f0.  if v0 != 0 then goto L18a900;
  #L18a8f4.  v0:= 4I;
  #L18a8f6.  v0:= new `kotlinx.coroutines.internal.ThreadSafeHeapNode`[v0];
  #L18a8fa.  v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] := v0 @kind object;
  #L18a8fe.  goto L18a934;
  #L18a900.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a906.  v1:= temp;
  #L18a908.  v2:= length @variable v0;
  #L18a90a.  if v1 < v2 then goto L18a934;
  #L18a90e.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a914.  v1:= temp;
  #L18a916.  v1:= v1 * 2;
  #L18a91a.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L18a920.  v0:= temp @kind object;
  #L18a922.  v1:= "java.util.Arrays.copyOf(this, newSize)" @kind object;
  #L18a926.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L18a92c.  v0:= (`kotlinx.coroutines.internal.ThreadSafeHeapNode`[]) v0 @kind object;
  #L18a930.  v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] := v0 @kind object;
  #L18a934.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.internal.ThreadSafeHeap` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L18aa5c.  v0.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int` := v1;
  #L18aa60.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.internal.ThreadSafeHeap` v5 @kind this, `int` v6 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L18aa74.  v0:= v6 * 2;
  #L18aa78.  v0:= v0 + 1;
  #L18aa7c.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18aa82.  v1:= temp;
  #L18aa84.  if v0 < v1 then goto L18aa8a;
  #L18aa88.  return @kind void;
  #L18aa8a.  v1:= v5.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L18aa8e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18aa94.  v2:= v0 + 1;
  #L18aa98.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18aa9e.  v3:= temp;
  #L18aaa0.  if v2 >= v3 then goto L18aaca;
  #L18aaa4.  v3:= v1[v2] @kind object;
  #L18aaa8.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18aaae.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L18aab2.  v4:= v1[v0] @kind object;
  #L18aab6.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18aabc.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L18aac2.  v3:= temp;
  #L18aac4.  if v3 >= 0 then goto L18aaca;
  #L18aac8.  v0:= v2;
  #L18aaca.  v2:= v1[v6] @kind object;
  #L18aace.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18aad4.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L18aad8.  v1:= v1[v0] @kind object;
  #L18aadc.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18aae2.  call temp:= `compareTo`(v2, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L18aae8.  v1:= temp;
  #L18aaea.  if v1 > 0 then goto L18aaf0;
  #L18aaee.  return @kind void;
  #L18aaf0.  call `e`(v5, v6, v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L18aaf6.  v6:= v0;
  #L18aaf8.  goto L18aa74;
}
procedure `void` `d`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.d:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18ab0c.  if v4 > 0 then goto L18ab12;
  #L18ab10.  return @kind void;
  #L18ab12.  v0:= v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L18ab16.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ab1c.  v1:= v4 + -1;
  #L18ab20.  v1:= v1 / 2;
  #L18ab24.  v2:= v0[v1] @kind object;
  #L18ab28.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ab2e.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L18ab32.  v0:= v0[v4] @kind object;
  #L18ab36.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ab3c.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L18ab42.  v0:= temp;
  #L18ab44.  if v0 > 0 then goto L18ab4a;
  #L18ab48.  return @kind void;
  #L18ab4a.  call `e`(v3, v4, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L18ab50.  v4:= v1;
  #L18ab52.  goto L18ab0c;
}
procedure `void` `e`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18ab64.  v0:= v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L18ab68.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ab6e.  v1:= v0[v5] @kind object;
  #L18ab72.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ab78.  v2:= v0[v4] @kind object;
  #L18ab7c.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ab82.  v0[v4]:= v1 @kind object;
  #L18ab86.  v0[v5]:= v2 @kind object;
  #L18ab8a.  call `setIndex`(v1, v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L18ab90.  call `setIndex`(v2, v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L18ab96.  return @kind void;
}
procedure `void` `addImpl`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v4 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addImpl:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18a968.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18a96e.  v0:= temp;
  #L18a970.  if v0 == 0 then goto L18a998;
  #L18a974.  call temp:= `getHeap`(v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.getHeap:()Lkotlinx/coroutines/internal/ThreadSafeHeap;` @kind interface;
  #L18a97a.  v0:= temp @kind object;
  #L18a97c.  if v0 != 0 then goto L18a984;
  #L18a980.  v0:= 1I;
  #L18a982.  goto L18a986;
  #L18a984.  v0:= 0I;
  #L18a986.  if v0 == 0 then goto L18a98c;
  #L18a98a.  goto L18a998;
  #L18a98c.  v4:= new `java.lang.AssertionError`;
  #L18a990.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18a996.  throw v4;
  #L18a998.  call `setHeap`(v4, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setHeap:(Lkotlinx/coroutines/internal/ThreadSafeHeap;)V` @kind interface;
  #L18a99e.  call temp:= `a`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.a:()[Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind direct;
  #L18a9a4.  v0:= temp @kind object;
  #L18a9a6.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a9ac.  v1:= temp;
  #L18a9ae.  v2:= v1 + 1;
  #L18a9b2.  call `b`(v3, v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.b:(I)V` @kind direct;
  #L18a9b8.  v0[v1]:= v4 @kind object;
  #L18a9bc.  call `setIndex`(v4, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L18a9c2.  call `d`(v3, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.d:(I)V` @kind direct;
  #L18a9c8.  return @kind void;
}
procedure `void` `addLast`(`kotlinx.coroutines.internal.ThreadSafeHeap` v0 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLast:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L18a9dc.  @monitorenter v0
  #L18a9de.  call `addImpl`(v0, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addImpl:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L18a9e4.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18a9e8.  @monitorexit v0
  #L18a9ea.  return @kind void;
  #L18a9ec.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18a9ee.  @monitorexit v0
  #L18a9f0.  throw v1;
  catch `java.lang.Throwable` @[L18a9de..L18a9e8] goto L18a9ec;
}
procedure `boolean` `addLastIf`(`kotlinx.coroutines.internal.ThreadSafeHeap` v2 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLastIf:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18a594.  @monitorenter v2
  #L18a596.  v0:= 1I;
  #L18a598.  call temp:= `firstImpl`(v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L18a59e.  v1:= temp @kind object;
  #L18a5a0.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L18a5a6.  v4:= temp @kind object;
  #L18a5a8.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L18a5ac.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L18a5b2.  v4:= temp;
  #L18a5b4.  if v4 == 0 then goto L18a5c2;
  #L18a5b8.  call `addImpl`(v2, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addImpl:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L18a5be.  v3:= 1I;
  #L18a5c0.  goto L18a5c4;
  #L18a5c2.  v3:= 0I;
  #L18a5c4.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L18a5ca.  @monitorexit v2
  #L18a5cc.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L18a5d2.  return v3;
  #L18a5d4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18a5d6.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L18a5dc.  @monitorexit v2
  #L18a5de.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L18a5e4.  throw v3;
  catch `java.lang.Throwable` @[L18a598..L18a5be] goto L18a5d4;
}
procedure `void` `clear`(`kotlinx.coroutines.internal.ThreadSafeHeap` v6 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L18aa10.  @monitorenter v6
  #L18aa12.  v0:= v6.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L18aa16.  if v0 != 0 then goto L18aa1c;
  #L18aa1a.  goto L18aa2c;
  #L18aa1c.  v1:= 0I;
  #L18aa1e.  v2:= 0I;
  #L18aa20.  v3:= 0I;
  #L18aa22.  v4:= 6I;
  #L18aa24.  v5:= 0I;
  #L18aa26.  call `fill$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill$default:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L18aa2c.  v0:= 0I;
  #L18aa2e.  v6.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int` := v0;
  #L18aa32.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18aa36.  @monitorexit v6
  #L18aa38.  return @kind void;
  #L18aa3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18aa3c.  @monitorexit v6
  #L18aa3e.  throw v0;
  catch `java.lang.Throwable` @[L18aa12..L18aa36] goto L18aa3a;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `firstImpl`(`kotlinx.coroutines.internal.ThreadSafeHeap` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18a6b0.  v0:= v2.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L18a6b4.  if v0 != 0 then goto L18a6bc;
  #L18a6b8.  v0:= 0I;
  #L18a6ba.  goto L18a6c2;
  #L18a6bc.  v1:= 0I;
  #L18a6be.  v0:= v0[v1] @kind object;
  #L18a6c2.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18a698.  v0:= v1.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int`;
  #L18a69c.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18a604.  call temp:= `getSize`(v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a60a.  v0:= temp;
  #L18a60c.  if v0 != 0 then goto L18a614;
  #L18a610.  v0:= 1I;
  #L18a612.  goto L18a616;
  #L18a614.  v0:= 0I;
  #L18a616.  return v0;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `peek`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.peek:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18a6d4.  @monitorenter v1
  #L18a6d6.  call temp:= `firstImpl`(v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L18a6dc.  v0:= temp @kind object;
  #L18a6de.  @monitorexit v1
  #L18a6e0.  return v0 @kind object;
  #L18a6e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18a6e4.  @monitorexit v1
  #L18a6e6.  throw v0;
  catch `java.lang.Throwable` @[L18a6d6..L18a6de] goto L18a6e2;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v4 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.remove:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18a628.  @monitorenter v3
  #L18a62a.  call temp:= `getHeap`(v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.getHeap:()Lkotlinx/coroutines/internal/ThreadSafeHeap;` @kind interface;
  #L18a630.  v0:= temp @kind object;
  #L18a632.  v1:= 1I;
  #L18a634.  v2:= 0I;
  #L18a636.  if v0 != 0 then goto L18a63e;
  #L18a63a.  v1:= 0I;
  #L18a63c.  goto L18a670;
  #L18a63e.  call temp:= `getIndex`(v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.getIndex:()I` @kind interface;
  #L18a644.  v4:= temp;
  #L18a646.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18a64c.  v0:= temp;
  #L18a64e.  if v0 == 0 then goto L18a66a;
  #L18a652.  if v4 < 0 then goto L18a658;
  #L18a656.  v2:= 1I;
  #L18a658.  if v2 == 0 then goto L18a65e;
  #L18a65c.  goto L18a66a;
  #L18a65e.  v4:= new `java.lang.AssertionError`;
  #L18a662.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18a668.  throw v4;
  #L18a66a.  call temp:= `removeAtImpl`(v3, v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L18a670.  @monitorexit v3
  #L18a672.  return v1;
  #L18a674.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18a676.  @monitorexit v3
  #L18a678.  throw v4;
  catch `java.lang.Throwable` @[L18a62a..L18a670] goto L18a674;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `removeAtImpl`(`kotlinx.coroutines.internal.ThreadSafeHeap` v7 @kind this, `int` v8 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L18a704.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18a70a.  v0:= temp;
  #L18a70c.  v1:= 0I;
  #L18a70e.  v2:= 1I;
  #L18a710.  if v0 == 0 then goto L18a738;
  #L18a714.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a71a.  v0:= temp;
  #L18a71c.  if v0 <= 0 then goto L18a724;
  #L18a720.  v0:= 1I;
  #L18a722.  goto L18a726;
  #L18a724.  v0:= 0I;
  #L18a726.  if v0 == 0 then goto L18a72c;
  #L18a72a.  goto L18a738;
  #L18a72c.  v8:= new `java.lang.AssertionError`;
  #L18a730.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18a736.  throw v8;
  #L18a738.  v0:= v7.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L18a73c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18a742.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a748.  v3:= temp;
  #L18a74a.  v4:= -1I;
  #L18a74c.  v3:= v3 + v4 @kind int;
  #L18a74e.  call `b`(v7, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.b:(I)V` @kind direct;
  #L18a754.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a75a.  v3:= temp;
  #L18a75c.  if v8 >= v3 then goto L18a7b2;
  #L18a760.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a766.  v3:= temp;
  #L18a768.  call `e`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L18a76e.  v3:= v8 + -1;
  #L18a772.  v3:= v3 / 2;
  #L18a776.  if v8 <= 0 then goto L18a7ac;
  #L18a77a.  v5:= v0[v8] @kind object;
  #L18a77e.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18a784.  v5:= (`java.lang.Comparable`) v5 @kind object;
  #L18a788.  v6:= v0[v3] @kind object;
  #L18a78c.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18a792.  call temp:= `compareTo`(v5, v6) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L18a798.  v5:= temp;
  #L18a79a.  if v5 >= 0 then goto L18a7ac;
  #L18a79e.  call `e`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L18a7a4.  call `d`(v7, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.d:(I)V` @kind direct;
  #L18a7aa.  goto L18a7b2;
  #L18a7ac.  call `c`(v7, v8) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.c:(I)V` @kind direct;
  #L18a7b2.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a7b8.  v8:= temp;
  #L18a7ba.  v8:= v0[v8] @kind object;
  #L18a7be.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18a7c4.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18a7ca.  v3:= temp;
  #L18a7cc.  if v3 == 0 then goto L18a7f0;
  #L18a7d0.  call temp:= `getHeap`(v8) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.getHeap:()Lkotlinx/coroutines/internal/ThreadSafeHeap;` @kind interface;
  #L18a7d6.  v3:= temp @kind object;
  #L18a7d8.  if v3 != v7 then goto L18a7de;
  #L18a7dc.  v1:= 1I;
  #L18a7de.  if v1 == 0 then goto L18a7e4;
  #L18a7e2.  goto L18a7f0;
  #L18a7e4.  v8:= new `java.lang.AssertionError`;
  #L18a7e8.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18a7ee.  throw v8;
  #L18a7f0.  v1:= 0I;
  #L18a7f2.  call `setHeap`(v8, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setHeap:(Lkotlinx/coroutines/internal/ThreadSafeHeap;)V` @kind interface;
  #L18a7f8.  call `setIndex`(v8, v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L18a7fe.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a804.  v2:= temp;
  #L18a806.  v0[v2]:= v1 @kind object;
  #L18a80a.  return v8 @kind object;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `removeFirstIf`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeFirstIf:(Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18a81c.  @monitorenter v3
  #L18a81e.  v0:= 1I;
  #L18a820.  call temp:= `firstImpl`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L18a826.  v1:= temp @kind object;
  #L18a828.  v2:= 0I;
  #L18a82a.  if v1 != 0 then goto L18a840;
  #L18a82e.  v4:= 2I;
  #L18a830.  call `finallyStart`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L18a836.  @monitorexit v3
  #L18a838.  call `finallyEnd`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L18a83e.  return v2 @kind object;
  #L18a840.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L18a846.  v4:= temp @kind object;
  #L18a848.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L18a84c.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L18a852.  v4:= temp;
  #L18a854.  if v4 == 0 then goto L18a862;
  #L18a858.  v4:= 0I;
  #L18a85a.  call temp:= `removeAtImpl`(v3, v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L18a860.  v2:= temp @kind object;
  #L18a862.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L18a868.  @monitorexit v3
  #L18a86a.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L18a870.  return v2 @kind object;
  #L18a872.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18a874.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L18a87a.  @monitorexit v3
  #L18a87c.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L18a882.  throw v4;
  catch `java.lang.Throwable` @[L18a820..L18a828] goto L18a872;
  catch `java.lang.Throwable` @[L18a840..L18a862] goto L18a872;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `removeFirstOrNull`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeFirstOrNull:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18a8a8.  @monitorenter v1
  #L18a8aa.  call temp:= `getSize`(v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L18a8b0.  v0:= temp;
  #L18a8b2.  if v0 <= 0 then goto L18a8c2;
  #L18a8b6.  v0:= 0I;
  #L18a8b8.  call temp:= `removeAtImpl`(v1, v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L18a8be.  v0:= temp @kind object;
  #L18a8c0.  goto L18a8c4;
  #L18a8c2.  v0:= 0I;
  #L18a8c4.  @monitorexit v1
  #L18a8c6.  return v0 @kind object;
  #L18a8c8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18a8ca.  @monitorexit v1
  #L18a8cc.  throw v0;
  catch `java.lang.Throwable` @[L18a8aa..L18a8c0] goto L18a8c8;
}
