record `kotlinx.coroutines.internal.OpDescriptor` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.OpDescriptor` v0 @kind this) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L189058.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18905e.  return @kind void;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`() @signature `Lkotlinx/coroutines/internal/OpDescriptor;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEarlierThan`(`kotlinx.coroutines.internal.OpDescriptor` v6 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v7 @kind object) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.isEarlierThan:(Lkotlinx/coroutines/internal/OpDescriptor;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L188fc0.  call temp:= `getAtomicOp`(v6) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L188fc6.  v0:= temp @kind object;
  #L188fc8.  v1:= 0I;
  #L188fca.  if v0 != 0 then goto L188fd0;
  #L188fce.  return v1;
  #L188fd0.  call temp:= `getAtomicOp`(v7) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L188fd6.  v7:= temp @kind object;
  #L188fd8.  if v7 != 0 then goto L188fde;
  #L188fdc.  return v1;
  #L188fde.  call temp:= `getOpSequence`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getOpSequence:()J` @kind virtual;
  #L188fe4.  v2:= temp @kind wide;
  #L188fe6.  call temp:= `getOpSequence`(v7) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getOpSequence:()J` @kind virtual;
  #L188fec.  v4:= temp @kind wide;
  #L188fee.  v7:= lcmp(v2, v4);
  #L188ff2.  if v7 >= 0 then goto L188ff8;
  #L188ff6.  v1:= 1I;
  #L188ff8.  return v1;
}
procedure `java.lang.Object` `perform`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.OpDescriptor` v2 @kind this) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18900c.  v0:= new `java.lang.StringBuilder`;
  #L189010.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L189016.  call temp:= `getClassSimpleName`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getClassSimpleName:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18901c.  v1:= temp @kind object;
  #L18901e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L189024.  v1:= 64I;
  #L189028.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18902e.  call temp:= `getHexAddress`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L189034.  v1:= temp @kind object;
  #L189036.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18903c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L189042.  v0:= temp @kind object;
  #L189044.  return v0 @kind object;
}
