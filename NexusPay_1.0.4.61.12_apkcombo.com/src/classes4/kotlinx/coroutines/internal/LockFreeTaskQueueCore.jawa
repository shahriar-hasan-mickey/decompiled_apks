record `kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeTaskQueueCore._next` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @AccessFlag PRIVATE_SYNTHETIC;
}
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.ADD_CLOSED` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.ADD_FROZEN` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.ADD_SUCCESS` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.CAPACITY_BITS` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.CLOSED_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.CLOSED_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.FROZEN_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.FROZEN_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.HEAD_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.HEAD_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.INITIAL_CAPACITY` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.MAX_CAPACITY_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.MIN_ADD_SPIN_CAPACITY` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.TAIL_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.TAIL_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L188728.  v0:= constclass @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind object;
  #L18872c.  v1:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion`;
  #L188730.  v2:= 0I;
  #L188732.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L188738.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` := v1 @kind object;
  #L18873c.  v1:= new `kotlinx.coroutines.internal.Symbol`;
  #L188740.  v2:= "REMOVE_FROZEN" @kind object;
  #L188744.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18874a.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @type ^`kotlinx.coroutines.internal.Symbol` := v1 @kind object;
  #L18874e.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L188752.  v2:= "_next" @kind object;
  #L188756.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L18875c.  v1:= temp @kind object;
  #L18875e.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L188762.  v1:= "_state" @kind object;
  #L188766.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L18876c.  v0:= temp @kind object;
  #L18876e.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L188772.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v3 @kind this, `int` v4 , `boolean` v5 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<init>:(IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L188784.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18878a.  v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int` := v4;
  #L18878e.  v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` := v5 @kind boolean;
  #L188792.  v5:= 1I;
  #L188794.  v4:= v4 - v5 @kind int;
  #L188796.  v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int` := v4;
  #L18879a.  v4:= 0I;
  #L18879c.  v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._next` @type ^`java.lang.Object` := v4 @kind object;
  #L1887a0.  v0:= 0L;
  #L1887a4.  v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` := v0 @kind wide;
  #L1887a8.  v4:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1887ac.  v0:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L1887b0.  call `<init>`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1887b6.  v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L1887ba.  v4:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1887be.  v0:= 0I;
  #L1887c0.  v1:= 1073741823I;
  #L1887c6.  if v4 > v1 then goto L1887ce;
  #L1887ca.  v4:= 1I;
  #L1887cc.  goto L1887d0;
  #L1887ce.  v4:= 0I;
  #L1887d0.  v1:= "Check failed." @kind object;
  #L1887d4.  if v4 == 0 then goto L188804;
  #L1887d8.  v4:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L1887dc.  v2:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1887e0.  v4:= v4 ^& v2 @kind int;
  #L1887e2.  if v4 != 0 then goto L1887e8;
  #L1887e6.  goto L1887ea;
  #L1887e8.  v5:= 0I;
  #L1887ea.  if v5 == 0 then goto L1887f0;
  #L1887ee.  return @kind void;
  #L1887f0.  v4:= new `java.lang.IllegalStateException`;
  #L1887f4.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1887fa.  v5:= temp @kind object;
  #L1887fc.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L188802.  throw v4;
  #L188804.  v4:= new `java.lang.IllegalStateException`;
  #L188808.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18880e.  v5:= temp @kind object;
  #L188810.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L188816.  throw v4;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `a`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v6 @kind this, `long` v7 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.a:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L18850c.  v0:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore`;
  #L188510.  v1:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L188514.  v1:= v1 * 2;
  #L188518.  v2:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L18851c.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<init>:(IZ)V` @kind direct;
  #L188522.  v1:= 1073741823L;
  #L188528.  v1:= v1 ^& v7 @kind long;
  #L18852a.  v3:= 0I;
  #L18852c.  v1:= v1 ^> v3 @kind long;
  #L18852e.  v2:= (`int`) v1 @kind l2i;
  #L188530.  v3:= 1152921503533105152L;
  #L18853a.  v3:= v3 ^& v7 @kind long;
  #L18853c.  v1:= 30I;
  #L188540.  v3:= v3 ^> v1 @kind long;
  #L188542.  v1:= (`int`) v3 @kind l2i;
  #L188544.  v3:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L188548.  v4:= v2 ^& v3 @kind int;
  #L18854c.  v5:= v1 ^& v3 @kind int;
  #L188550.  if v4 == v5 then goto L188586;
  #L188554.  v4:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L188558.  v3:= v3 ^& v2 @kind int;
  #L18855a.  call temp:= `get`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L188560.  v3:= temp @kind object;
  #L188562.  if v3 != 0 then goto L188570;
  #L188566.  v3:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder`;
  #L18856a.  call `<init>`(v3, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Placeholder;.<init>:(I)V` @kind direct;
  #L188570.  v4:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L188574.  v5:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L188578.  v5:= v5 ^& v2 @kind int;
  #L18857a.  call `set`(v4, v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L188580.  v2:= v2 + 1;
  #L188584.  goto L188544;
  #L188586.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L18858a.  v2:= 1152921504606846976L;
  #L18858e.  call temp:= `wo`(v1, v7, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.wo:(JJ)J` @kind virtual;
  #L188594.  v7:= temp @kind wide;
  #L188596.  v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` := v7 @kind wide;
  #L18859a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `b`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v3 @kind this, `long` v4 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.b:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1885ac.  v0:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._next` @type ^`java.lang.Object` @kind object;
  #L1885b0.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L1885b4.  if v0 == 0 then goto L1885ba;
  #L1885b8.  return v0 @kind object;
  #L1885ba.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1885be.  v1:= 0I;
  #L1885c0.  call temp:= `a`(v3, v4) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.a:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L1885c6.  v2:= temp @kind object;
  #L1885c8.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1885ce.  goto L1885ac;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `c`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.c:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1885e0.  v0:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1885e4.  v1:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1885e8.  v1:= v1 ^& v3 @kind int;
  #L1885ea.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1885f0.  v0:= temp @kind object;
  #L1885f2.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder` @kind boolean;
  #L1885f6.  if v1 == 0 then goto L188618;
  #L1885fa.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder`) v0 @kind object;
  #L1885fe.  v0:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder.index` @type ^`int`;
  #L188602.  if v0 != v3 then goto L188618;
  #L188606.  v0:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18860a.  v1:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L18860e.  v3:= v3 ^& v1 @kind int;
  #L188610.  call `set`(v0, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L188616.  return v2 @kind object;
  #L188618.  v3:= 0I;
  #L18861a.  return v3 @kind object;
}
procedure `long` `d`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v9 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.d:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1886e4.  v2:= v9.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L1886e8.  v0:= 1152921504606846976L;
  #L1886ec.  v4:= v2 ^& v0 @kind long;
  #L1886f0.  v6:= 0L;
  #L1886f4.  v8:= lcmp(v4, v6);
  #L1886f8.  if v8 == 0 then goto L1886fe;
  #L1886fc.  return v2 @kind wide;
  #L1886fe.  v6:= v2 ^| v0 @kind long;
  #L188702.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L188706.  v1:= v9 @kind object;
  #L188708.  v4:= v6 @kind wide;
  #L18870a.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L188710.  v0:= temp;
  #L188712.  if v0 == 0 then goto L1886e4;
  #L188716.  return v6 @kind wide;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `e`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v8 @kind this, `int` v9 , `int` v10 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.e:(II)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L188650.  v2:= v8.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L188654.  v0:= 1073741823L;
  #L18865a.  v0:= v0 ^& v2 @kind long;
  #L18865c.  v4:= 0I;
  #L18865e.  v0:= v0 ^> v4 @kind long;
  #L188660.  v6:= (`int`) v0 @kind l2i;
  #L188662.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L188668.  v0:= temp;
  #L18866a.  if v0 == 0 then goto L188686;
  #L18866e.  if v6 != v9 then goto L188674;
  #L188672.  v4:= 1I;
  #L188674.  if v4 == 0 then goto L18867a;
  #L188678.  goto L188686;
  #L18867a.  v9:= new `java.lang.AssertionError`;
  #L18867e.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L188684.  throw v9;
  #L188686.  v0:= 1152921504606846976L;
  #L18868a.  v0:= v0 ^& v2 @kind long;
  #L18868c.  v4:= 0L;
  #L188690.  v7:= lcmp(v0, v4);
  #L188694.  if v7 == 0 then goto L1886a2;
  #L188698.  call temp:= `next`(v8) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L18869e.  v9:= temp @kind object;
  #L1886a0.  return v9 @kind object;
  #L1886a2.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1886a6.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L1886aa.  call temp:= `updateHead`(v1, v2, v10) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.updateHead:(JI)J` @kind virtual;
  #L1886b0.  v4:= temp @kind wide;
  #L1886b2.  v1:= v8 @kind object;
  #L1886b4.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1886ba.  v0:= temp;
  #L1886bc.  if v0 == 0 then goto L188650;
  #L1886c0.  v9:= v8.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1886c4.  v10:= v8.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1886c8.  v10:= v10 ^& v6 @kind int;
  #L1886ca.  v0:= 0I;
  #L1886cc.  call `set`(v9, v10, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1886d2.  return v0 @kind object;
}
procedure `int` `addLast`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v12 @kind this, `java.lang.Object` v13 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.addLast:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L188258.  v2:= v12.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L18825c.  v0:= 1.727233711018889E-77D;
  #L188260.  v0:= v0 ^& v2 @kind long;
  #L188262.  v6:= 0L;
  #L188266.  v4:= lcmp(v0, v6);
  #L18826a.  if v4 == 0 then goto L18827c;
  #L18826e.  v13:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L188272.  call temp:= `addFailReason`(v13, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.addFailReason:(J)I` @kind virtual;
  #L188278.  v13:= temp;
  #L18827a.  return v13;
  #L18827c.  v0:= 1073741823L;
  #L188282.  v0:= v0 ^& v2 @kind long;
  #L188284.  v8:= 0I;
  #L188286.  v0:= v0 ^> v8 @kind long;
  #L188288.  v1:= (`int`) v0 @kind l2i;
  #L18828a.  v4:= 1152921503533105152L;
  #L188294.  v4:= v4 ^& v2 @kind long;
  #L188296.  v0:= 30I;
  #L18829a.  v4:= v4 ^> v0 @kind long;
  #L18829c.  v9:= (`int`) v4 @kind l2i;
  #L18829e.  v10:= v12.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1882a2.  v0:= v9 + 2;
  #L1882a6.  v0:= v0 ^& v10 @kind int;
  #L1882a8.  v4:= v1 ^& v10 @kind int;
  #L1882ac.  v5:= 1I;
  #L1882ae.  if v0 != v4 then goto L1882b4;
  #L1882b2.  return v5;
  #L1882b4.  v0:= v12.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L1882b8.  v4:= 1073741823I;
  #L1882be.  if v0 != 0 then goto L1882f2;
  #L1882c2.  v0:= v12.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1882c6.  v11:= v9 ^& v10 @kind int;
  #L1882ca.  call temp:= `get`(v0, v11) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1882d0.  v0:= temp @kind object;
  #L1882d2.  if v0 == 0 then goto L1882f2;
  #L1882d6.  v0:= v12.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L1882da.  v2:= 1024I;
  #L1882de.  if v0 < v2 then goto L1882f0;
  #L1882e2.  v9:= v9 - v1 @kind int;
  #L1882e4.  v1:= v9 ^& v4 @kind int;
  #L1882e8.  v0:= v0 ^> 1;
  #L1882ec.  if v1 <= v0 then goto L188258;
  #L1882f0.  return v5;
  #L1882f2.  v0:= v9 + 1;
  #L1882f6.  v0:= v0 ^& v4 @kind int;
  #L1882f8.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1882fc.  v4:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L188300.  call temp:= `updateTail`(v4, v2, v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.updateTail:(JI)J` @kind virtual;
  #L188306.  v4:= temp @kind wide;
  #L188308.  v0:= v1 @kind object;
  #L18830a.  v1:= v12 @kind object;
  #L18830c.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L188312.  v0:= temp;
  #L188314.  if v0 == 0 then goto L188258;
  #L188318.  v0:= v12.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18831c.  v1:= v9 ^& v10 @kind int;
  #L188320.  call `set`(v0, v1, v13) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L188326.  v0:= v12 @kind object;
  #L188328.  v1:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L18832c.  v3:= 1152921504606846976L;
  #L188330.  v1:= v1 ^& v3 @kind long;
  #L188332.  v3:= lcmp(v1, v6);
  #L188336.  if v3 != 0 then goto L18833c;
  #L18833a.  goto L188350;
  #L18833c.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L188342.  v0:= temp @kind object;
  #L188344.  call temp:= `c`(v0, v9, v13) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.c:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L18834a.  v0:= temp @kind object;
  #L18834c.  if v0 != 0 then goto L188328;
  #L188350.  return v8;
}
procedure `boolean` `close`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v10 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.close:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L188190.  v2:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L188194.  v0:= 2305843009213693952L;
  #L188198.  v4:= v2 ^& v0 @kind long;
  #L18819c.  v6:= 1I;
  #L18819e.  v7:= 0L;
  #L1881a2.  v9:= lcmp(v4, v7);
  #L1881a6.  if v9 == 0 then goto L1881ac;
  #L1881aa.  return v6;
  #L1881ac.  v4:= 1152921504606846976L;
  #L1881b0.  v4:= v4 ^& v2 @kind long;
  #L1881b2.  v9:= lcmp(v4, v7);
  #L1881b6.  if v9 == 0 then goto L1881be;
  #L1881ba.  v0:= 0I;
  #L1881bc.  return v0;
  #L1881be.  v4:= v2 ^| v0 @kind long;
  #L1881c2.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1881c6.  v1:= v10 @kind object;
  #L1881c8.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1881ce.  v0:= temp;
  #L1881d0.  if v0 == 0 then goto L188190;
  #L1881d4.  return v6;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v6 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L188364.  v0:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L188368.  v2:= 1073741823L;
  #L18836e.  v2:= v2 ^& v0 @kind long;
  #L188370.  v4:= 0I;
  #L188372.  v2:= v2 ^> v4 @kind long;
  #L188374.  v3:= (`int`) v2 @kind l2i;
  #L188376.  v4:= 1152921503533105152L;
  #L188380.  v0:= v0 ^& v4 @kind long;
  #L188382.  v2:= 30I;
  #L188386.  v0:= v0 ^> v2 @kind long;
  #L188388.  v1:= (`int`) v0 @kind l2i;
  #L18838a.  v1:= v1 - v3 @kind int;
  #L18838c.  v0:= 1073741823I;
  #L188392.  v0:= v0 ^& v1 @kind int;
  #L188394.  return v0;
}
procedure `boolean` `isClosed`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v5 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isClosed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1881e8.  v0:= v5.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L1881ec.  v2:= 2305843009213693952L;
  #L1881f0.  v0:= v0 ^& v2 @kind long;
  #L1881f2.  v2:= 0L;
  #L1881f6.  v4:= lcmp(v0, v2);
  #L1881fa.  if v4 == 0 then goto L188202;
  #L1881fe.  v0:= 1I;
  #L188200.  goto L188204;
  #L188202.  v0:= 0I;
  #L188204.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v7 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L188218.  v0:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L18821c.  v2:= 1073741823L;
  #L188222.  v2:= v2 ^& v0 @kind long;
  #L188224.  v4:= 0I;
  #L188226.  v2:= v2 ^> v4 @kind long;
  #L188228.  v3:= (`int`) v2 @kind l2i;
  #L18822a.  v5:= 1152921503533105152L;
  #L188234.  v0:= v0 ^& v5 @kind long;
  #L188236.  v2:= 30I;
  #L18823a.  v0:= v0 ^> v2 @kind long;
  #L18823c.  v1:= (`int`) v0 @kind l2i;
  #L18823e.  if v3 != v1 then goto L188244;
  #L188242.  v4:= 1I;
  #L188244.  return v4;
}
procedure `java.util.List` `map`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v7 @kind this, `kotlin.jvm.functions.Function1` v8 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.map:(Lkotlin/jvm/functions/Function1;)Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L188488.  v0:= new `java.util.ArrayList`;
  #L18848c.  v1:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L188490.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L188496.  v1:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L18849a.  v3:= 1073741823L;
  #L1884a0.  v3:= v3 ^& v1 @kind long;
  #L1884a2.  v5:= 0I;
  #L1884a4.  v3:= v3 ^> v5 @kind long;
  #L1884a6.  v4:= (`int`) v3 @kind l2i;
  #L1884a8.  v5:= 1152921503533105152L;
  #L1884b2.  v1:= v1 ^& v5 @kind long;
  #L1884b4.  v3:= 30I;
  #L1884b8.  v1:= v1 ^> v3 @kind long;
  #L1884ba.  v2:= (`int`) v1 @kind l2i;
  #L1884bc.  v1:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1884c0.  v3:= v4 ^& v1 @kind int;
  #L1884c4.  v5:= v2 ^& v1 @kind int;
  #L1884c8.  if v3 == v5 then goto L1884fa;
  #L1884cc.  v3:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1884d0.  v1:= v1 ^& v4 @kind int;
  #L1884d2.  call temp:= `get`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1884d8.  v1:= temp @kind object;
  #L1884da.  if v1 == 0 then goto L1884f4;
  #L1884de.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder` @kind boolean;
  #L1884e2.  if v3 != 0 then goto L1884f4;
  #L1884e6.  call temp:= `invoke`(v8, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1884ec.  v1:= temp @kind object;
  #L1884ee.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1884f4.  v4:= v4 + 1;
  #L1884f8.  goto L1884bc;
  #L1884fa.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `next`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18862c.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.d:()J` @kind direct;
  #L188632.  v0:= temp @kind wide;
  #L188634.  call temp:= `b`(v2, v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.b:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L18863a.  v0:= temp @kind object;
  #L18863c.  return v0 @kind object;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v10 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1883a8.  v2:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L1883ac.  v0:= 1152921504606846976L;
  #L1883b0.  v0:= v0 ^& v2 @kind long;
  #L1883b2.  v4:= 0L;
  #L1883b6.  v6:= lcmp(v0, v4);
  #L1883ba.  if v6 == 0 then goto L1883c4;
  #L1883be.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1883c2.  return v0 @kind object;
  #L1883c4.  v0:= 1073741823L;
  #L1883ca.  v0:= v0 ^& v2 @kind long;
  #L1883cc.  v4:= 0I;
  #L1883ce.  v0:= v0 ^> v4 @kind long;
  #L1883d0.  v6:= (`int`) v0 @kind l2i;
  #L1883d2.  v0:= 1152921503533105152L;
  #L1883dc.  v0:= v0 ^& v2 @kind long;
  #L1883de.  v4:= 30I;
  #L1883e2.  v0:= v0 ^> v4 @kind long;
  #L1883e4.  v1:= (`int`) v0 @kind l2i;
  #L1883e6.  v0:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1883ea.  v1:= v1 ^& v0 @kind int;
  #L1883ec.  v4:= v6 ^& v0 @kind int;
  #L1883f0.  v7:= 0I;
  #L1883f2.  if v1 != v4 then goto L1883f8;
  #L1883f6.  return v7 @kind object;
  #L1883f8.  v1:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1883fc.  v0:= v0 ^& v6 @kind int;
  #L1883fe.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L188404.  v8:= temp @kind object;
  #L188406.  if v8 != 0 then goto L188414;
  #L18840a.  v0:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L18840e.  if v0 == 0 then goto L1883a8;
  #L188412.  return v7 @kind object;
  #L188414.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder` @kind boolean;
  #L188418.  if v0 == 0 then goto L18841e;
  #L18841c.  return v7 @kind object;
  #L18841e.  v0:= v6 + 1;
  #L188422.  v1:= 1073741823I;
  #L188428.  v9:= v0 ^& v1 @kind int;
  #L18842c.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L188430.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L188434.  call temp:= `updateHead`(v1, v2, v9) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.updateHead:(JI)J` @kind virtual;
  #L18843a.  v4:= temp @kind wide;
  #L18843c.  v1:= v10 @kind object;
  #L18843e.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L188444.  v0:= temp;
  #L188446.  if v0 == 0 then goto L18845c;
  #L18844a.  v0:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18844e.  v1:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L188452.  v1:= v1 ^& v6 @kind int;
  #L188454.  call `set`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L18845a.  return v8 @kind object;
  #L18845c.  v0:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L188460.  if v0 != 0 then goto L188466;
  #L188464.  goto L1883a8;
  #L188466.  v0:= v10 @kind object;
  #L188468.  call temp:= `e`(v0, v6, v9) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.e:(II)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L18846e.  v0:= temp @kind object;
  #L188470.  if v0 != 0 then goto L188468;
  #L188474.  return v8 @kind object;
}
