record `kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` @kind class {
  `java.lang.Object` `kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc.element` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListHead` v2 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$TryOfferDesc;.<init>:(Ljava/lang/Object;Lkotlinx/coroutines/internal/LockFreeLinkedListHead;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16125c.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L161262.  v0.`kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc.element` @type ^`java.lang.Object` := v1 @kind object;
  #L161266.  return @kind void;
}
procedure `java.lang.Object` `failure`(`kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$TryOfferDesc;.failure:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1611c8.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L1611cc.  if v0 == 0 then goto L1611d2;
  #L1611d0.  goto L1611e2;
  #L1611d2.  v2:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.ReceiveOrClosed` @kind boolean;
  #L1611d6.  if v2 != 0 then goto L1611e0;
  #L1611da.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1611de.  goto L1611e2;
  #L1611e0.  v2:= 0I;
  #L1611e2.  return v2 @kind object;
}
procedure `java.lang.Object` `onPrepare`(`kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v3 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$TryOfferDesc;.onPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1611f4.  v0:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1611f8.  v0:= (`kotlinx.coroutines.channels.ReceiveOrClosed`) v0 @kind object;
  #L1611fc.  v1:= v2.`kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc.element` @type ^`java.lang.Object` @kind object;
  #L161200.  call temp:= `tryResumeReceive`(v0, v1, v3) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.tryResumeReceive:(Ljava/lang/Object;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Lkotlinx/coroutines/internal/Symbol;` @kind interface;
  #L161206.  v3:= temp @kind object;
  #L161208.  if v3 != 0 then goto L161212;
  #L16120c.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED` @type ^`java.lang.Object` @kind object;
  #L161210.  return v3 @kind object;
  #L161212.  v0:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L161216.  if v3 != v0 then goto L16121c;
  #L16121a.  return v0 @kind object;
  #L16121c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L161222.  v0:= temp;
  #L161224.  if v0 == 0 then goto L161248;
  #L161228.  v0:= `@@kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L16122c.  if v3 != v0 then goto L161234;
  #L161230.  v3:= 1I;
  #L161232.  goto L161236;
  #L161234.  v3:= 0I;
  #L161236.  if v3 == 0 then goto L16123c;
  #L16123a.  goto L161248;
  #L16123c.  v3:= new `java.lang.AssertionError`;
  #L161240.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L161246.  throw v3;
  #L161248.  v3:= 0I;
  #L16124a.  return v3 @kind object;
}
