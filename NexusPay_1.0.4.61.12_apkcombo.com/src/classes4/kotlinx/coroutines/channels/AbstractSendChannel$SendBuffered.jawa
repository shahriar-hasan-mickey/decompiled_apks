record `kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.channels.Send` @kind class {
  `java.lang.Object` `kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered.element` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$SendBuffered;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L160fac.  call `<init>`(v0) @signature `Lkotlinx/coroutines/channels/Send;.<init>:()V` @kind direct;
  #L160fb2.  v0.`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered.element` @type ^`java.lang.Object` := v1 @kind object;
  #L160fb6.  return @kind void;
}
procedure `void` `completeResumeSend`(`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered` v0 @kind this) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$SendBuffered;.completeResumeSend:()V` @AccessFlag PUBLIC {
    temp;

  #L160fc8.  return @kind void;
}
procedure `java.lang.Object` `getPollResult`(`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered` v1 @kind this) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$SendBuffered;.getPollResult:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160f14.  v0:= v1.`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered.element` @type ^`java.lang.Object` @kind object;
  #L160f18.  return v0 @kind object;
}
procedure `void` `resumeSendClosed`(`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered` v0 @kind this, `kotlinx.coroutines.channels.Closed` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$SendBuffered;.resumeSendClosed:(Lkotlinx/coroutines/channels/Closed;)V` @AccessFlag PUBLIC {
    temp;

  #L160fdc.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L160fe2.  v1:= temp;
  #L160fe4.  if v1 == 0 then goto L160ff4;
  #L160fe8.  v1:= new `java.lang.AssertionError`;
  #L160fec.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L160ff2.  throw v1;
  #L160ff4.  return @kind void;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered` v2 @kind this) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$SendBuffered;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L160f2c.  v0:= new `java.lang.StringBuilder`;
  #L160f30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160f36.  v1:= "SendBuffered@" @kind object;
  #L160f3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f40.  call temp:= `getHexAddress`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L160f46.  v1:= temp @kind object;
  #L160f48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f4e.  v1:= 40I;
  #L160f52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f58.  v1:= v2.`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered.element` @type ^`java.lang.Object` @kind object;
  #L160f5c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f62.  v1:= 41I;
  #L160f66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f6c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160f72.  v0:= temp @kind object;
  #L160f74.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `tryResumeSend`(`kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v2 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel$SendBuffered;.tryResumeSend:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160f88.  v0:= `@@kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L160f8c.  if v2 != 0 then goto L160f92;
  #L160f90.  goto L160f98;
  #L160f92.  call `finishPrepare`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.finishPrepare:()V` @kind virtual;
  #L160f98.  return v0 @kind object;
}
