record `kotlinx.coroutines.channels.AbstractChannel$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.channels.ChannelIterator` @kind interface {
  `kotlinx.coroutines.channels.AbstractChannel` `kotlinx.coroutines.channels.AbstractChannel$a.a` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object` `kotlinx.coroutines.channels.AbstractChannel$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.AbstractChannel$a` v0 @kind this, `kotlinx.coroutines.channels.AbstractChannel` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.<init>:(Lkotlinx/coroutines/channels/AbstractChannel;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15fc4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15fc52.  v0.`kotlinx.coroutines.channels.AbstractChannel$a.a` @type ^`kotlinx.coroutines.channels.AbstractChannel` := v1 @kind object;
  #L15fc56.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L15fc5a.  v0.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L15fc5e.  return @kind void;
}
procedure `boolean` `b`(`kotlinx.coroutines.channels.AbstractChannel$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.b:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L15fa04.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L15fa08.  if v0 == 0 then goto L15fa2e;
  #L15fa0c.  v2:= (`kotlinx.coroutines.channels.Closed`) v2 @kind object;
  #L15fa10.  v0:= v2.`kotlinx.coroutines.channels.Closed.closeCause` @type ^`java.lang.Throwable` @kind object;
  #L15fa14.  if v0 != 0 then goto L15fa1c;
  #L15fa18.  v2:= 0I;
  #L15fa1a.  return v2;
  #L15fa1c.  call temp:= `getReceiveException`(v2) @signature `Lkotlinx/coroutines/channels/Closed;.getReceiveException:()Ljava/lang/Throwable;` @kind virtual;
  #L15fa22.  v2:= temp @kind object;
  #L15fa24.  call temp:= `recoverStackTrace`(v2) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.recoverStackTrace:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L15fa2a.  v2:= temp @kind object;
  #L15fa2c.  throw v2;
  #L15fa2e.  v2:= 1I;
  #L15fa30.  return v2;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.channels.AbstractChannel$a` v5 @kind this, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.c:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15fadc.  call temp:= `intercepted`(v6) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L15fae2.  v0:= temp @kind object;
  #L15fae4.  call temp:= `getOrCreateCancellableContinuation`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.getOrCreateCancellableContinuation:(Lkotlin/coroutines/Continuation;)Lkotlinx/coroutines/CancellableContinuationImpl;` @kind static;
  #L15faea.  v0:= temp @kind object;
  #L15faec.  v1:= new `kotlinx.coroutines.channels.AbstractChannel$d`;
  #L15faf0.  call `<init>`(v1, v5, v0) @signature `Lkotlinx/coroutines/channels/AbstractChannel$d;.<init>:(Lkotlinx/coroutines/channels/AbstractChannel$a;Lkotlinx/coroutines/CancellableContinuation;)V` @kind direct;
  #L15faf6.  v2:= v5.`kotlinx.coroutines.channels.AbstractChannel$a.a` @type ^`kotlinx.coroutines.channels.AbstractChannel` @kind object;
  #L15fafa.  call temp:= `access$enqueueReceive`(v2, v1) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.access$enqueueReceive:(Lkotlinx/coroutines/channels/AbstractChannel;Lkotlinx/coroutines/channels/Receive;)Z` @kind static;
  #L15fb00.  v2:= temp;
  #L15fb02.  if v2 == 0 then goto L15fb12;
  #L15fb06.  v2:= v5.`kotlinx.coroutines.channels.AbstractChannel$a.a` @type ^`kotlinx.coroutines.channels.AbstractChannel` @kind object;
  #L15fb0a.  call `access$removeReceiveOnCancel`(v2, v0, v1) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.access$removeReceiveOnCancel:(Lkotlinx/coroutines/channels/AbstractChannel;Lkotlinx/coroutines/CancellableContinuation;Lkotlinx/coroutines/channels/Receive;)V` @kind static;
  #L15fb10.  goto L15fbb2;
  #L15fb12.  v2:= v5.`kotlinx.coroutines.channels.AbstractChannel$a.a` @type ^`kotlinx.coroutines.channels.AbstractChannel` @kind object;
  #L15fb16.  call temp:= `pollInternal`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.pollInternal:()Ljava/lang/Object;` @kind virtual;
  #L15fb1c.  v2:= temp @kind object;
  #L15fb1e.  call `d`(v5, v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L15fb24.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L15fb28.  if v3 == 0 then goto L15fb7a;
  #L15fb2c.  v2:= (`kotlinx.coroutines.channels.Closed`) v2 @kind object;
  #L15fb30.  v1:= v2.`kotlinx.coroutines.channels.Closed.closeCause` @type ^`java.lang.Throwable` @kind object;
  #L15fb34.  if v1 != 0 then goto L15fb56;
  #L15fb38.  v1:= 0I;
  #L15fb3a.  call temp:= `boxBoolean`(v1) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L15fb40.  v1:= temp @kind object;
  #L15fb42.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L15fb46.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15fb4c.  v1:= temp @kind object;
  #L15fb4e.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L15fb54.  goto L15fbb2;
  #L15fb56.  call temp:= `getReceiveException`(v2) @signature `Lkotlinx/coroutines/channels/Closed;.getReceiveException:()Ljava/lang/Throwable;` @kind virtual;
  #L15fb5c.  v1:= temp @kind object;
  #L15fb5e.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L15fb62.  call temp:= `createFailure`(v1) @signature `Lkotlin/ResultKt;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L15fb68.  v1:= temp @kind object;
  #L15fb6a.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L15fb70.  v1:= temp @kind object;
  #L15fb72.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L15fb78.  goto L15fbb2;
  #L15fb7a.  v3:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L15fb7e.  if v2 == v3 then goto L15faf6;
  #L15fb82.  v1:= 1I;
  #L15fb84.  call temp:= `boxBoolean`(v1) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L15fb8a.  v1:= temp @kind object;
  #L15fb8c.  v3:= v5.`kotlinx.coroutines.channels.AbstractChannel$a.a` @type ^`kotlinx.coroutines.channels.AbstractChannel` @kind object;
  #L15fb90.  v3:= v3.`kotlinx.coroutines.channels.AbstractSendChannel.onUndeliveredElement` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L15fb94.  if v3 != 0 then goto L15fb9c;
  #L15fb98.  v2:= 0I;
  #L15fb9a.  goto L15fbac;
  #L15fb9c.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L15fba2.  v4:= temp @kind object;
  #L15fba4.  call temp:= `bindCancellationFun`(v3, v2, v4) @signature `Lkotlinx/coroutines/internal/OnUndeliveredElementKt;.bindCancellationFun:(Lkotlin/jvm/functions/Function1;Ljava/lang/Object;Lkotlin/coroutines/CoroutineContext;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L15fbaa.  v2:= temp @kind object;
  #L15fbac.  call `resume`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuation;.resume:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L15fbb2.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L15fbb8.  v0:= temp @kind object;
  #L15fbba.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L15fbc0.  v1:= temp @kind object;
  #L15fbc2.  if v0 != v1 then goto L15fbcc;
  #L15fbc6.  call `probeCoroutineSuspended`(v6) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L15fbcc.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.channels.AbstractChannel$a` v1 @kind this) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.a:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L15fa44.  v0:= v1.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`java.lang.Object` @kind object;
  #L15fa48.  return v0 @kind object;
}
procedure `void` `d`(`kotlinx.coroutines.channels.AbstractChannel$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L15fc70.  v0.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L15fc74.  return @kind void;
}
procedure `java.lang.Object` `hasNext`(`kotlinx.coroutines.channels.AbstractChannel$a` v2 @kind this, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.hasNext:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15fa5c.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.a:()Ljava/lang/Object;` @kind virtual;
  #L15fa62.  v0:= temp @kind object;
  #L15fa64.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L15fa68.  if v0 == v1 then goto L15fa86;
  #L15fa6c.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.a:()Ljava/lang/Object;` @kind virtual;
  #L15fa72.  v3:= temp @kind object;
  #L15fa74.  call temp:= `b`(v2, v3) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.b:(Ljava/lang/Object;)Z` @kind direct;
  #L15fa7a.  v3:= temp;
  #L15fa7c.  call temp:= `boxBoolean`(v3) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L15fa82.  v3:= temp @kind object;
  #L15fa84.  return v3 @kind object;
  #L15fa86.  v0:= v2.`kotlinx.coroutines.channels.AbstractChannel$a.a` @type ^`kotlinx.coroutines.channels.AbstractChannel` @kind object;
  #L15fa8a.  call temp:= `pollInternal`(v0) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.pollInternal:()Ljava/lang/Object;` @kind virtual;
  #L15fa90.  v0:= temp @kind object;
  #L15fa92.  call `d`(v2, v0) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L15fa98.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.a:()Ljava/lang/Object;` @kind virtual;
  #L15fa9e.  v0:= temp @kind object;
  #L15faa0.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L15faa4.  if v0 == v1 then goto L15fac2;
  #L15faa8.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.a:()Ljava/lang/Object;` @kind virtual;
  #L15faae.  v3:= temp @kind object;
  #L15fab0.  call temp:= `b`(v2, v3) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.b:(Ljava/lang/Object;)Z` @kind direct;
  #L15fab6.  v3:= temp;
  #L15fab8.  call temp:= `boxBoolean`(v3) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L15fabe.  v3:= temp @kind object;
  #L15fac0.  return v3 @kind object;
  #L15fac2.  call temp:= `c`(v2, v3) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.c:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L15fac8.  v3:= temp @kind object;
  #L15faca.  return v3 @kind object;
}
procedure `java.lang.Object` `next`(`kotlinx.coroutines.channels.AbstractChannel$a` v2 @kind this) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15fbe0.  v0:= v2.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`java.lang.Object` @kind object;
  #L15fbe4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L15fbe8.  if v1 != 0 then goto L15fc0a;
  #L15fbec.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L15fbf0.  if v0 == v1 then goto L15fbfa;
  #L15fbf4.  v2.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L15fbf8.  return v0 @kind object;
  #L15fbfa.  v0:= new `java.lang.IllegalStateException`;
  #L15fbfe.  v1:= "'hasNext' should be called prior to 'next' invocation" @kind object;
  #L15fc02.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15fc08.  throw v0;
  #L15fc0a.  v0:= (`kotlinx.coroutines.channels.Closed`) v0 @kind object;
  #L15fc0e.  call temp:= `getReceiveException`(v0) @signature `Lkotlinx/coroutines/channels/Closed;.getReceiveException:()Ljava/lang/Throwable;` @kind virtual;
  #L15fc14.  v0:= temp @kind object;
  #L15fc16.  call temp:= `recoverStackTrace`(v0) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.recoverStackTrace:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L15fc1c.  v0:= temp @kind object;
  #L15fc1e.  throw v0;
}
procedure `java.lang.Object` `next`(`kotlinx.coroutines.channels.AbstractChannel$a` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.next:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15fc30.  call temp:= `next`(v0, v1) @signature `Lkotlinx/coroutines/channels/ChannelIterator$DefaultImpls;.next:(Lkotlinx/coroutines/channels/ChannelIterator;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L15fc36.  v1:= temp @kind object;
  #L15fc38.  return v1 @kind object;
}
