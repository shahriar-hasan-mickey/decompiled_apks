record `kotlinx.coroutines.flow.FlowKt__LimitKt` @kind class @AccessFlag FINAL_SYNTHETIC {
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.FlowCollector` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17619c.  call temp:= `e`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.e:(Lkotlinx/coroutines/flow/FlowCollector;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L1761a2.  v0:= temp @kind object;
  #L1761a4.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.Flow` v4 @kind object, `kotlin.jvm.functions.Function2` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.b:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1761b8.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$a` @kind boolean;
  #L1761bc.  if v0 == 0 then goto L1761de;
  #L1761c0.  v0:= v6 @kind object;
  #L1761c2.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$a`) v0 @kind object;
  #L1761c6.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int`;
  #L1761ca.  v2:= -2147483648I;
  #L1761ce.  v3:= v1 ^& v2 @kind int;
  #L1761d2.  if v3 == 0 then goto L1761de;
  #L1761d6.  v1:= v1 - v2 @kind int;
  #L1761d8.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int` := v1;
  #L1761dc.  goto L1761e8;
  #L1761de.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$a`;
  #L1761e2.  call `<init>`(v0, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1761e8.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.b` @type ^`java.lang.Object` @kind object;
  #L1761ec.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1761f2.  v1:= temp @kind object;
  #L1761f4.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int`;
  #L1761f8.  v3:= 1I;
  #L1761fa.  if v2 == 0 then goto L176226;
  #L1761fe.  if v2 != v3 then goto L176216;
  #L176202.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.a` @type ^`java.lang.Object` @kind object;
  #L176206.  v4:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1`) v4 @kind object;
  #L17620a.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L176210.  goto L176256;
  #L176212.  v5:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L176214.  goto L176250;
  #L176216.  v4:= new `java.lang.IllegalStateException`;
  #L17621a.  v5:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L17621e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L176224.  throw v4;
  #L176226.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17622c.  v6:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1`;
  #L176230.  call `<init>`(v6, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L176236.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.a` @type ^`java.lang.Object` := v6 @kind object;
  #L17623a.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int` := v3;
  #L17623e.  call temp:= `collect`(v4, v6, v0) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L176244.  v4:= temp @kind object;
  #L176246.  if v4 != v1 then goto L176256;
  #L17624a.  return v1 @kind object;
  #L17624c.  v5:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L17624e.  v4:= v6 @kind object;
  #L176250.  call `checkOwnership`(v5, v4) @signature `Lkotlinx/coroutines/flow/internal/FlowExceptions_commonKt;.checkOwnership:(Lkotlinx/coroutines/flow/internal/AbortFlowException;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind static;
  #L176256.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17625a.  return v4 @kind object;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L17620a..L176210] goto L176212;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L176236..L176246] goto L17624c;
}
procedure `kotlinx.coroutines.flow.Flow` `c`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.c:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L17632c.  if v2 < 0 then goto L176334;
  #L176330.  v0:= 1I;
  #L176332.  goto L176336;
  #L176334.  v0:= 0I;
  #L176336.  if v0 == 0 then goto L176346;
  #L17633a.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1`;
  #L17633e.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$drop$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;I)V` @kind direct;
  #L176344.  return v0 @kind object;
  #L176346.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L17634c.  v1:= temp @kind object;
  #L17634e.  v2:= "Drop count should be non-negative, but had " @kind object;
  #L176352.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L176358.  v1:= temp @kind object;
  #L17635a.  v2:= new `java.lang.IllegalArgumentException`;
  #L17635e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L176364.  v1:= temp @kind object;
  #L176366.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17636c.  throw v2;
}
procedure `kotlinx.coroutines.flow.Flow` `d`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.d:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L176380.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$dropWhile$$inlined$unsafeFlow$1`;
  #L176384.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$dropWhile$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L17638a.  return v0 @kind object;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.flow.FlowCollector` v4 @kind object, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.e:(Lkotlinx/coroutines/flow/FlowCollector;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L176288.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$b` @kind boolean;
  #L17628c.  if v0 == 0 then goto L1762ae;
  #L176290.  v0:= v6 @kind object;
  #L176292.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$b`) v0 @kind object;
  #L176296.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.c` @type ^`int`;
  #L17629a.  v2:= -2147483648I;
  #L17629e.  v3:= v1 ^& v2 @kind int;
  #L1762a2.  if v3 == 0 then goto L1762ae;
  #L1762a6.  v1:= v1 - v2 @kind int;
  #L1762a8.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.c` @type ^`int` := v1;
  #L1762ac.  goto L1762b8;
  #L1762ae.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$b`;
  #L1762b2.  call `<init>`(v0, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$b;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1762b8.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.b` @type ^`java.lang.Object` @kind object;
  #L1762bc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1762c2.  v1:= temp @kind object;
  #L1762c4.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.c` @type ^`int`;
  #L1762c8.  v3:= 1I;
  #L1762ca.  if v2 == 0 then goto L1762f2;
  #L1762ce.  if v2 == v3 then goto L1762e2;
  #L1762d2.  v4:= new `java.lang.IllegalStateException`;
  #L1762d6.  v5:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1762da.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1762e0.  throw v4;
  #L1762e2.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.a` @type ^`java.lang.Object` @kind object;
  #L1762e6.  v4:= (`kotlinx.coroutines.flow.FlowCollector`) v4 @kind object;
  #L1762ea.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1762f0.  goto L17630e;
  #L1762f2.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1762f8.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.a` @type ^`java.lang.Object` := v4 @kind object;
  #L1762fc.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.c` @type ^`int` := v3;
  #L176300.  call temp:= `emit`(v4, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L176306.  v5:= temp @kind object;
  #L176308.  if v5 != v1 then goto L17630e;
  #L17630c.  return v1 @kind object;
  #L17630e.  v5:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L176312.  call `<init>`(v5, v4) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L176318.  throw v5;
}
procedure `kotlinx.coroutines.flow.Flow` `f`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.f:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L17639c.  if v2 <= 0 then goto L1763a4;
  #L1763a0.  v0:= 1I;
  #L1763a2.  goto L1763a6;
  #L1763a4.  v0:= 0I;
  #L1763a6.  if v0 == 0 then goto L1763b6;
  #L1763aa.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1`;
  #L1763ae.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;I)V` @kind direct;
  #L1763b4.  return v0 @kind object;
  #L1763b6.  v1:= new `java.lang.StringBuilder`;
  #L1763ba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1763c0.  v0:= "Requested element count " @kind object;
  #L1763c4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1763ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1763d0.  v2:= " should be positive" @kind object;
  #L1763d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1763da.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1763e0.  v1:= temp @kind object;
  #L1763e2.  v2:= new `java.lang.IllegalArgumentException`;
  #L1763e6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1763ec.  v1:= temp @kind object;
  #L1763ee.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1763f4.  throw v2;
}
procedure `kotlinx.coroutines.flow.Flow` `g`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.g:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L176408.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1`;
  #L17640c.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L176412.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `h`(`kotlinx.coroutines.flow.Flow` v2 @kind object, `kotlin.jvm.functions.Function3` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.h:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L176424.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1`;
  #L176428.  v1:= 0I;
  #L17642a.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L176430.  call temp:= `flow`(v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.flow:(Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L176436.  v2:= temp @kind object;
  #L176438.  return v2 @kind object;
}
