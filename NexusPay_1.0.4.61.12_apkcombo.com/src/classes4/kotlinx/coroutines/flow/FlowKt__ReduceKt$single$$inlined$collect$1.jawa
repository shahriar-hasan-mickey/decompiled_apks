record `kotlinx.coroutines.flow.FlowKt__ReduceKt$single$$inlined$collect$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.FlowKt__ReduceKt$single$$inlined$collect$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$single$$inlined$collect$1` v0 @kind this, `kotlin.jvm.internal.Ref$ObjectRef` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$single$$inlined$collect$1;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L177fd4.  v0.`kotlinx.coroutines.flow.FlowKt__ReduceKt$single$$inlined$collect$1.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v1 @kind object;
  #L177fd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L177fde.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$single$$inlined$collect$1` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$single$$inlined$collect$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L177f84.  v3:= v1.`kotlinx.coroutines.flow.FlowKt__ReduceKt$single$$inlined$collect$1.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L177f88.  v3:= v3.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L177f8c.  v0:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L177f90.  if v3 != v0 then goto L177f98;
  #L177f94.  v3:= 1I;
  #L177f96.  goto L177f9a;
  #L177f98.  v3:= 0I;
  #L177f9a.  if v3 == 0 then goto L177fac;
  #L177f9e.  v3:= v1.`kotlinx.coroutines.flow.FlowKt__ReduceKt$single$$inlined$collect$1.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L177fa2.  v3.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v2 @kind object;
  #L177fa6.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L177faa.  return v2 @kind object;
  #L177fac.  v2:= new `java.lang.IllegalArgumentException`;
  #L177fb0.  v3:= "Flow has more than one element" @kind object;
  #L177fb4.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L177fba.  v3:= temp @kind object;
  #L177fbc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L177fc2.  throw v2;
}
