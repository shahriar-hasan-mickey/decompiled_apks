record `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L179760.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L179764.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17976a.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` v5 @kind this, `java.lang.Object` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1796a8.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1` @kind boolean;
  #L1796ac.  if v0 == 0 then goto L1796ce;
  #L1796b0.  v0:= v7 @kind object;
  #L1796b2.  v0:= (`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1`) v0 @kind object;
  #L1796b6.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int`;
  #L1796ba.  v2:= -2147483648I;
  #L1796be.  v3:= v1 ^& v2 @kind int;
  #L1796c2.  if v3 == 0 then goto L1796ce;
  #L1796c6.  v1:= v1 - v2 @kind int;
  #L1796c8.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int` := v1;
  #L1796cc.  goto L1796d8;
  #L1796ce.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1`;
  #L1796d2.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1796d8.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L1796dc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1796e2.  v1:= temp @kind object;
  #L1796e4.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int`;
  #L1796e8.  v3:= 1I;
  #L1796ea.  if v2 == 0 then goto L17970a;
  #L1796ee.  if v2 != v3 then goto L1796fa;
  #L1796f2.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1796f8.  goto L17974a;
  #L1796fa.  v6:= new `java.lang.IllegalStateException`;
  #L1796fe.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L179702.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L179708.  throw v6;
  #L17970a.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L179710.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L179714.  v2:= 3I;
  #L179716.  v4:= "R" @kind object;
  #L17971a.  call `reifiedOperationMarker`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L179720.  v2:= instanceof @variable v6 @type ^`java.lang.Object` @kind boolean;
  #L179724.  call temp:= `boxBoolean`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L17972a.  v2:= temp @kind object;
  #L17972c.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L179732.  v2:= temp;
  #L179734.  if v2 == 0 then goto L17974a;
  #L179738.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int` := v3;
  #L17973c.  call temp:= `emit`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L179742.  v6:= temp @kind object;
  #L179744.  if v6 != v1 then goto L17974a;
  #L179748.  return v1 @kind object;
  #L17974a.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17974e.  return v6 @kind object;
}
procedure `java.lang.Object` `emit$$forInline`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.emit$$forInline:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L179648.  v0:= 4I;
  #L17964a.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179650.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1`;
  #L179654.  call `<init>`(v0, v3, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L17965a.  v0:= 5I;
  #L17965c.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179662.  v0:= v3.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L179666.  v1:= 3I;
  #L179668.  v2:= "R" @kind object;
  #L17966c.  call `reifiedOperationMarker`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L179672.  v1:= instanceof @variable v4 @type ^`java.lang.Object` @kind boolean;
  #L179676.  if v1 == 0 then goto L179690;
  #L17967a.  v1:= 0I;
  #L17967c.  call `mark`(v1) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179682.  call temp:= `emit`(v0, v4, v5) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L179688.  v4:= 1I;
  #L17968a.  call `mark`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179690.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L179694.  return v4 @kind object;
}
