record `kotlinx.coroutines.flow.h` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.AbstractFlow` @kind class {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.h.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.h` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/h;.<init>:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L17e728.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.<init>:()V` @kind direct;
  #L17e72e.  v0.`kotlinx.coroutines.flow.h.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L17e732.  return @kind void;
}
procedure `java.lang.Object` `collectSafely`(`kotlinx.coroutines.flow.h` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/h;.collectSafely:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L17e6f8.  v0:= v1.`kotlinx.coroutines.flow.h.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L17e6fc.  call temp:= `invoke`(v0, v2, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L17e702.  v2:= temp @kind object;
  #L17e704.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17e70a.  v3:= temp @kind object;
  #L17e70c.  if v2 != v3 then goto L17e712;
  #L17e710.  return v2 @kind object;
  #L17e712.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17e716.  return v2 @kind object;
}
