record `kotlinx.coroutines.flow.AbstractFlow` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.Flow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.AbstractFlow` v0 @kind this) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16fe98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16fe9e.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.AbstractFlow` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16fdb4.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.AbstractFlow$a` @kind boolean;
  #L16fdb8.  if v0 == 0 then goto L16fdda;
  #L16fdbc.  v0:= v7 @kind object;
  #L16fdbe.  v0:= (`kotlinx.coroutines.flow.AbstractFlow$a`) v0 @kind object;
  #L16fdc2.  v1:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int`;
  #L16fdc6.  v2:= -2147483648I;
  #L16fdca.  v3:= v1 ^& v2 @kind int;
  #L16fdce.  if v3 == 0 then goto L16fdda;
  #L16fdd2.  v1:= v1 - v2 @kind int;
  #L16fdd4.  v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int` := v1;
  #L16fdd8.  goto L16fde4;
  #L16fdda.  v0:= new `kotlinx.coroutines.flow.AbstractFlow$a`;
  #L16fdde.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/AbstractFlow$a;.<init>:(Lkotlinx/coroutines/flow/AbstractFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L16fde4.  v7:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.b` @type ^`java.lang.Object` @kind object;
  #L16fde8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L16fdee.  v1:= temp @kind object;
  #L16fdf0.  v2:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int`;
  #L16fdf4.  v3:= 1I;
  #L16fdf6.  if v2 == 0 then goto L16fe22;
  #L16fdfa.  if v2 != v3 then goto L16fe12;
  #L16fdfe.  v6:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.a` @type ^`java.lang.Object` @kind object;
  #L16fe02.  v6:= (`kotlinx.coroutines.flow.internal.SafeCollector`) v6 @kind object;
  #L16fe06.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L16fe0c.  goto L16fe52;
  #L16fe0e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16fe10.  goto L16fe66;
  #L16fe12.  v6:= new `java.lang.IllegalStateException`;
  #L16fe16.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L16fe1a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16fe20.  throw v6;
  #L16fe22.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L16fe28.  v7:= new `kotlinx.coroutines.flow.internal.SafeCollector`;
  #L16fe2c.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L16fe32.  v2:= temp @kind object;
  #L16fe34.  call `<init>`(v7, v6, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L16fe3a.  v0.`kotlinx.coroutines.flow.AbstractFlow$a.a` @type ^`java.lang.Object` := v7 @kind object;
  #L16fe3e.  v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int` := v3;
  #L16fe42.  call temp:= `collectSafely`(v5, v7, v0) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.collectSafely:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L16fe48.  v6:= temp @kind object;
  #L16fe4a.  if v6 != v1 then goto L16fe50;
  #L16fe4e.  return v1 @kind object;
  #L16fe50.  v6:= v7 @kind object;
  #L16fe52.  call `releaseIntercepted`(v6) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L16fe58.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L16fe5c.  return v6 @kind object;
  #L16fe5e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16fe60.  v4:= v7 @kind object;
  #L16fe62.  v7:= v6 @kind object;
  #L16fe64.  v6:= v4 @kind object;
  #L16fe66.  call `releaseIntercepted`(v6) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L16fe6c.  throw v7;
  catch `java.lang.Throwable` @[L16fe06..L16fe0c] goto L16fe0e;
  catch `java.lang.Throwable` @[L16fe3a..L16fe4a] goto L16fe5e;
}
procedure `java.lang.Object` `collectSafely`(`kotlinx.coroutines.flow.FlowCollector` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.collectSafely:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
