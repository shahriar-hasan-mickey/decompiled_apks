record `kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L179bec.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L179bf0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L179bf6.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L179b54.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1` @kind boolean;
  #L179b58.  if v0 == 0 then goto L179b7a;
  #L179b5c.  v0:= v6 @kind object;
  #L179b5e.  v0:= (`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1`) v0 @kind object;
  #L179b62.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L179b66.  v2:= -2147483648I;
  #L179b6a.  v3:= v1 ^& v2 @kind int;
  #L179b6e.  if v3 == 0 then goto L179b7a;
  #L179b72.  v1:= v1 - v2 @kind int;
  #L179b74.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v1;
  #L179b78.  goto L179b84;
  #L179b7a.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1`;
  #L179b7e.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L179b84.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L179b88.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L179b8e.  v1:= temp @kind object;
  #L179b90.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L179b94.  v3:= 1I;
  #L179b96.  if v2 == 0 then goto L179bb6;
  #L179b9a.  if v2 != v3 then goto L179ba6;
  #L179b9e.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L179ba4.  goto L179bd6;
  #L179ba6.  v5:= new `java.lang.IllegalStateException`;
  #L179baa.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L179bae.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L179bb4.  throw v5;
  #L179bb6.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L179bbc.  v6:= v4.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L179bc0.  if v5 == 0 then goto L179bd6;
  #L179bc4.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v3;
  #L179bc8.  call temp:= `emit`(v6, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L179bce.  v5:= temp @kind object;
  #L179bd0.  if v5 != v1 then goto L179bd6;
  #L179bd4.  return v1 @kind object;
  #L179bd6.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L179bda.  return v5 @kind object;
}
