record `kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$IntRef` `kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.jvm.internal.Ref$IntRef` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__CountKt$count$$inlined$collect$2;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/jvm/internal/Ref$IntRef;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L172750.  v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L172754.  v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2.b` @type ^`kotlin.jvm.internal.Ref$IntRef` := v2 @kind object;
  #L172758.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17275e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__CountKt$count$$inlined$collect$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L172680.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1` @kind boolean;
  #L172684.  if v0 == 0 then goto L1726a6;
  #L172688.  v0:= v6 @kind object;
  #L17268a.  v0:= (`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1`) v0 @kind object;
  #L17268e.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1.b` @type ^`int`;
  #L172692.  v2:= -2147483648I;
  #L172696.  v3:= v1 ^& v2 @kind int;
  #L17269a.  if v3 == 0 then goto L1726a6;
  #L17269e.  v1:= v1 - v2 @kind int;
  #L1726a0.  v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1.b` @type ^`int` := v1;
  #L1726a4.  goto L1726b0;
  #L1726a6.  v0:= new `kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1`;
  #L1726aa.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__CountKt$count$$inlined$collect$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__CountKt$count$$inlined$collect$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1726b0.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1.a` @type ^`java.lang.Object` @kind object;
  #L1726b4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1726ba.  v1:= temp @kind object;
  #L1726bc.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1.b` @type ^`int`;
  #L1726c0.  v3:= 1I;
  #L1726c2.  if v2 == 0 then goto L1726ea;
  #L1726c6.  if v2 != v3 then goto L1726da;
  #L1726ca.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1.d` @type ^`java.lang.Object` @kind object;
  #L1726ce.  v5:= (`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2`) v5 @kind object;
  #L1726d2.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1726d8.  goto L17271c;
  #L1726da.  v5:= new `java.lang.IllegalStateException`;
  #L1726de.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1726e2.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1726e8.  throw v5;
  #L1726ea.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1726f0.  v6:= v4.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1726f4.  v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1.d` @type ^`java.lang.Object` := v4 @kind object;
  #L1726f8.  v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2$1.b` @type ^`int` := v3;
  #L1726fc.  v2:= 6I;
  #L1726fe.  call `mark`(v2) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L172704.  call temp:= `invoke`(v6, v5, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L17270a.  v6:= temp @kind object;
  #L17270c.  v5:= 7I;
  #L17270e.  call `mark`(v5) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L172714.  if v6 != v1 then goto L17271a;
  #L172718.  return v1 @kind object;
  #L17271a.  v5:= v4 @kind object;
  #L17271c.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L172720.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L172726.  v6:= temp;
  #L172728.  if v6 == 0 then goto L17273a;
  #L17272c.  v5:= v5.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$2.b` @type ^`kotlin.jvm.internal.Ref$IntRef` @kind object;
  #L172730.  v6:= v5.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L172734.  v6:= v6 + v3 @kind int;
  #L172736.  v5.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int` := v6;
  #L17273a.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17273e.  return v5 @kind object;
}
