record `kotlinx.coroutines.flow.FlowKt__ReduceKt$first$$inlined$collectWhile$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.FlowKt__ReduceKt$first$$inlined$collectWhile$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$first$$inlined$collectWhile$1` v0 @kind this, `kotlin.jvm.internal.Ref$ObjectRef` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$first$$inlined$collectWhile$1;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1776e4.  v0.`kotlinx.coroutines.flow.FlowKt__ReduceKt$first$$inlined$collectWhile$1.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v1 @kind object;
  #L1776e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1776ee.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$first$$inlined$collectWhile$1` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$first$$inlined$collectWhile$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1776a4.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ReduceKt$first$$inlined$collectWhile$1.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L1776a8.  v2.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v1 @kind object;
  #L1776ac.  v1:= 0I;
  #L1776ae.  call temp:= `boxBoolean`(v1) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L1776b4.  v1:= temp @kind object;
  #L1776b6.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1776bc.  v1:= temp;
  #L1776be.  if v1 == 0 then goto L1776c8;
  #L1776c2.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1776c6.  return v1 @kind object;
  #L1776c8.  v1:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L1776cc.  call `<init>`(v1, v0) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L1776d2.  throw v1;
}
