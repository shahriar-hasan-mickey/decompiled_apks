record `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;.<init>:(Lkotlinx/coroutines/flow/Flow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L179818.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L17981c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L179822.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1797d8.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1797dc.  call `needClassReification`() @signature `Lkotlin/jvm/internal/Intrinsics;.needClassReification:()V` @kind static;
  #L1797e2.  v1:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2`;
  #L1797e6.  call `<init>`(v1, v3) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L1797ec.  call temp:= `collect`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1797f2.  v3:= temp @kind object;
  #L1797f4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1797fa.  v4:= temp @kind object;
  #L1797fc.  if v3 != v4 then goto L179802;
  #L179800.  return v3 @kind object;
  #L179802.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L179806.  return v3 @kind object;
}
procedure `java.lang.Object` `collect$$forInline`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;.collect$$forInline:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L17977c.  v0:= 4I;
  #L17977e.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179784.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$1`;
  #L179788.  call `<init>`(v0, v2, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L17978e.  v0:= 5I;
  #L179790.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179796.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L17979a.  call `needClassReification`() @signature `Lkotlin/jvm/internal/Intrinsics;.needClassReification:()V` @kind static;
  #L1797a0.  v1:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2`;
  #L1797a4.  call `<init>`(v1, v3) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L1797aa.  v3:= 0I;
  #L1797ac.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L1797b2.  call temp:= `collect`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1797b8.  v3:= 1I;
  #L1797ba.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L1797c0.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1797c4.  return v3 @kind object;
}
