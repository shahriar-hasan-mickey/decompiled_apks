record `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L176870.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L176874.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L176878.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17687e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1767a0.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1` @kind boolean;
  #L1767a4.  if v0 == 0 then goto L1767c6;
  #L1767a8.  v0:= v8 @kind object;
  #L1767aa.  v0:= (`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1`) v0 @kind object;
  #L1767ae.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int`;
  #L1767b2.  v2:= -2147483648I;
  #L1767b6.  v3:= v1 ^& v2 @kind int;
  #L1767ba.  if v3 == 0 then goto L1767c6;
  #L1767be.  v1:= v1 - v2 @kind int;
  #L1767c0.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int` := v1;
  #L1767c4.  goto L1767d0;
  #L1767c6.  v0:= new `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1`;
  #L1767ca.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1767d0.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L1767d4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1767da.  v1:= temp @kind object;
  #L1767dc.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int`;
  #L1767e0.  v3:= 2I;
  #L1767e2.  v4:= 1I;
  #L1767e4.  if v2 == 0 then goto L176818;
  #L1767e8.  if v2 == v4 then goto L176808;
  #L1767ec.  if v2 != v3 then goto L1767f8;
  #L1767f0.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1767f6.  goto L17685a;
  #L1767f8.  v7:= new `java.lang.IllegalStateException`;
  #L1767fc.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L176800.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L176806.  throw v7;
  #L176808.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.c` @type ^`java.lang.Object` @kind object;
  #L17680c.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L176810.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L176816.  goto L176842;
  #L176818.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17681e.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L176822.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L176826.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.c` @type ^`java.lang.Object` := v8 @kind object;
  #L17682a.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int` := v4;
  #L17682e.  call temp:= `invoke`(v2, v7, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L176834.  v7:= temp @kind object;
  #L176836.  if v7 != v1 then goto L17683c;
  #L17683a.  return v1 @kind object;
  #L17683c.  v5:= v8 @kind object;
  #L17683e.  v8:= v7 @kind object;
  #L176840.  v7:= v5 @kind object;
  #L176842.  v2:= 0I;
  #L176844.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.c` @type ^`java.lang.Object` := v2 @kind object;
  #L176848.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int` := v3;
  #L17684c.  call temp:= `emit`(v7, v8, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L176852.  v7:= temp @kind object;
  #L176854.  if v7 != v1 then goto L17685a;
  #L176858.  return v1 @kind object;
  #L17685a.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17685e.  return v7 @kind object;
}
