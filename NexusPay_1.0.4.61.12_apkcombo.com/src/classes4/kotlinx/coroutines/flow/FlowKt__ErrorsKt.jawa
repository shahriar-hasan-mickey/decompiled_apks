record `kotlinx.coroutines.flow.FlowKt__ErrorsKt` @kind class @AccessFlag FINAL_SYNTHETIC {
}
procedure `kotlinx.coroutines.flow.Flow` `a`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function3` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.a:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1753a8.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1`;
  #L1753ac.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;)V` @kind direct;
  #L1753b2.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.Flow` v4 @kind object, `kotlinx.coroutines.flow.FlowCollector` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.b:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1752ac.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a` @kind boolean;
  #L1752b0.  if v0 == 0 then goto L1752d2;
  #L1752b4.  v0:= v6 @kind object;
  #L1752b6.  v0:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a`) v0 @kind object;
  #L1752ba.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a.c` @type ^`int`;
  #L1752be.  v2:= -2147483648I;
  #L1752c2.  v3:= v1 ^& v2 @kind int;
  #L1752c6.  if v3 == 0 then goto L1752d2;
  #L1752ca.  v1:= v1 - v2 @kind int;
  #L1752cc.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a.c` @type ^`int` := v1;
  #L1752d0.  goto L1752dc;
  #L1752d2.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$a`;
  #L1752d6.  call `<init>`(v0, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1752dc.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a.b` @type ^`java.lang.Object` @kind object;
  #L1752e0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1752e6.  v1:= temp @kind object;
  #L1752e8.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a.c` @type ^`int`;
  #L1752ec.  v3:= 1I;
  #L1752ee.  if v2 == 0 then goto L17531a;
  #L1752f2.  if v2 != v3 then goto L17530a;
  #L1752f6.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a.a` @type ^`java.lang.Object` @kind object;
  #L1752fa.  v4:= (`kotlin.jvm.internal.Ref$ObjectRef`) v4 @kind object;
  #L1752fe.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L175304.  goto L17534a;
  #L175306.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L175308.  goto L175352;
  #L17530a.  v4:= new `java.lang.IllegalStateException`;
  #L17530e.  v5:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L175312.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L175318.  throw v4;
  #L17531a.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L175320.  v6:= new `kotlin.jvm.internal.Ref$ObjectRef`;
  #L175324.  call `<init>`(v6) @signature `Lkotlin/jvm/internal/Ref$ObjectRef;.<init>:()V` @kind direct;
  #L17532a.  v2:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$$inlined$collect$1`;
  #L17532e.  call `<init>`(v2, v5, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catchImpl$$inlined$collect$1;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/internal/Ref$ObjectRef;)V` @kind direct;
  #L175334.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a.a` @type ^`java.lang.Object` := v6 @kind object;
  #L175338.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$a.c` @type ^`int` := v3;
  #L17533c.  call temp:= `collect`(v4, v2, v0) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L175342.  v4:= temp @kind object;
  #L175344.  if v4 != v1 then goto L17534a;
  #L175348.  return v1 @kind object;
  #L17534a.  v4:= 0I;
  #L17534c.  return v4 @kind object;
  #L17534e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L175350.  v4:= v6 @kind object;
  #L175352.  v4:= v4.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L175356.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L17535a.  call temp:= `d`(v5, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.d:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Z` @kind static;
  #L175360.  v4:= temp;
  #L175362.  if v4 != 0 then goto L17537c;
  #L175366.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L17536c.  v4:= temp @kind object;
  #L17536e.  call temp:= `c`(v5, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.c:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)Z` @kind static;
  #L175374.  v4:= temp;
  #L175376.  if v4 != 0 then goto L17537c;
  #L17537a.  return v5 @kind object;
  #L17537c.  throw v5;
  catch `java.lang.Throwable` @[L1752fe..L175304] goto L175306;
  catch `java.lang.Throwable` @[L17532a..L175344] goto L17534e;
}
procedure `boolean` `c`(`java.lang.Throwable` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.c:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)Z` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L175210.  v0:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L175214.  call temp:= `get`(v2, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L17521a.  v2:= temp @kind object;
  #L17521c.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L175220.  if v2 == 0 then goto L175244;
  #L175224.  call temp:= `isCancelled`(v2) @signature `Lkotlinx/coroutines/Job;.isCancelled:()Z` @kind interface;
  #L17522a.  v0:= temp;
  #L17522c.  if v0 != 0 then goto L175232;
  #L175230.  goto L175244;
  #L175232.  call temp:= `getCancellationException`(v2) @signature `Lkotlinx/coroutines/Job;.getCancellationException:()Ljava/util/concurrent/CancellationException;` @kind interface;
  #L175238.  v2:= temp @kind object;
  #L17523a.  call temp:= `d`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.d:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Z` @kind static;
  #L175240.  v1:= temp;
  #L175242.  return v1;
  #L175244.  v1:= 0I;
  #L175246.  return v1;
}
procedure `boolean` `d`(`java.lang.Throwable` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.d:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Z` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L175258.  if v2 == 0 then goto L175298;
  #L17525c.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/DebugKt;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L175262.  v0:= temp;
  #L175264.  if v0 != 0 then goto L17526a;
  #L175268.  goto L175272;
  #L17526a.  call temp:= `unwrapImpl`(v2) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.unwrapImpl:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L175270.  v2:= temp @kind object;
  #L175272.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/DebugKt;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L175278.  v0:= temp;
  #L17527a.  if v0 != 0 then goto L175280;
  #L17527e.  goto L175288;
  #L175280.  call temp:= `unwrapImpl`(v1) @signature `Lkotlinx/coroutines/internal/StackTraceRecoveryKt;.unwrapImpl:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L175286.  v1:= temp @kind object;
  #L175288.  call temp:= `areEqual`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L17528e.  v1:= temp;
  #L175290.  if v1 == 0 then goto L175298;
  #L175294.  v1:= 1I;
  #L175296.  goto L17529a;
  #L175298.  v1:= 0I;
  #L17529a.  return v1;
}
procedure `kotlinx.coroutines.flow.Flow` `e`(`kotlinx.coroutines.flow.Flow` v2 @kind object, `kotlinx.coroutines.flow.Flow` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.e:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1753ec.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$c`;
  #L1753f0.  v1:= 0I;
  #L1753f2.  call `<init>`(v0, v4, v3, v1) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$c;.<init>:(Lkotlin/jvm/functions/Function1;Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1753f8.  call temp:= `catch`(v2, v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.catch:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L1753fe.  v2:= temp @kind object;
  #L175400.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `f`(`kotlinx.coroutines.flow.Flow` v0 @kind object, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.f:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1753c4.  v3:= v3 ^& 2;
  #L1753c8.  if v3 == 0 then goto L1753d0;
  #L1753cc.  v2:= `@@kotlinx.coroutines.flow.FlowKt__ErrorsKt$b.a` @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$b` @kind object;
  #L1753d0.  call temp:= `onErrorCollect`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt;.onErrorCollect:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L1753d6.  v0:= temp @kind object;
  #L1753d8.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `g`(`kotlinx.coroutines.flow.Flow` v2 @kind object, `int` v3 , `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.g:(Lkotlinx/coroutines/flow/Flow;ILkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L175488.  if v3 <= 0 then goto L175490;
  #L17548c.  v0:= 1I;
  #L17548e.  goto L175492;
  #L175490.  v0:= 0I;
  #L175492.  if v0 == 0 then goto L1754ac;
  #L175496.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$g`;
  #L17549a.  v1:= 0I;
  #L17549c.  call `<init>`(v0, v4, v3, v1) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$g;.<init>:(Lkotlin/jvm/functions/Function1;ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L1754a2.  call temp:= `retryWhen`(v2, v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.retryWhen:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function4;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L1754a8.  v2:= temp @kind object;
  #L1754aa.  return v2 @kind object;
  #L1754ac.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1754b2.  v2:= temp @kind object;
  #L1754b4.  v3:= "Expected positive amount of retries, but had " @kind object;
  #L1754b8.  call temp:= `stringPlus`(v3, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1754be.  v2:= temp @kind object;
  #L1754c0.  v3:= new `java.lang.IllegalArgumentException`;
  #L1754c4.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1754ca.  v2:= temp @kind object;
  #L1754cc.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1754d2.  throw v3;
}
procedure `kotlinx.coroutines.flow.Flow` `h`(`kotlinx.coroutines.flow.Flow` v3 @kind object, `long` v4 , `kotlin.jvm.functions.Function2` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.h:(Lkotlinx/coroutines/flow/Flow;JLkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1754e4.  v0:= 0L;
  #L1754e8.  v2:= lcmp(v4, v0);
  #L1754ec.  if v2 <= 0 then goto L1754f4;
  #L1754f0.  v0:= 1I;
  #L1754f2.  goto L1754f6;
  #L1754f4.  v0:= 0I;
  #L1754f6.  if v0 == 0 then goto L175510;
  #L1754fa.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$e`;
  #L1754fe.  v1:= 0I;
  #L175500.  call `<init>`(v0, v4, v6, v1) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$e;.<init>:(JLkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L175506.  call temp:= `retryWhen`(v3, v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.retryWhen:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function4;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L17550c.  v3:= temp @kind object;
  #L17550e.  return v3 @kind object;
  #L175510.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L175516.  v3:= temp @kind object;
  #L175518.  v4:= "Expected positive amount of retries, but had " @kind object;
  #L17551c.  call temp:= `stringPlus`(v4, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L175522.  v3:= temp @kind object;
  #L175524.  v4:= new `java.lang.IllegalArgumentException`;
  #L175528.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L17552e.  v3:= temp @kind object;
  #L175530.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L175536.  throw v4;
}
procedure `kotlinx.coroutines.flow.Flow` `i`(`kotlinx.coroutines.flow.Flow` v0 @kind object, `int` v1 , `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.i:(Lkotlinx/coroutines/flow/Flow;ILkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L175414.  v4:= v3 ^& 1;
  #L175418.  if v4 == 0 then goto L175422;
  #L17541c.  v1:= 2147483647I;
  #L175422.  v3:= v3 ^& 2;
  #L175426.  if v3 == 0 then goto L17542e;
  #L17542a.  v2:= `@@kotlinx.coroutines.flow.FlowKt__ErrorsKt$f.a` @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$f` @kind object;
  #L17542e.  call temp:= `retry`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt;.retry:(Lkotlinx/coroutines/flow/Flow;ILkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L175434.  v0:= temp @kind object;
  #L175436.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `j`(`kotlinx.coroutines.flow.Flow` v0 @kind object, `long` v1 , `kotlin.jvm.functions.Function2` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.j:(Lkotlinx/coroutines/flow/Flow;JLkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L175448.  v5:= v4 ^& 1;
  #L17544c.  if v5 == 0 then goto L17545a;
  #L175450.  v1:= 9223372036854775807L;
  #L17545a.  v4:= v4 ^& 2;
  #L17545e.  if v4 == 0 then goto L17546e;
  #L175462.  v3:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$d`;
  #L175466.  v4:= 0I;
  #L175468.  call `<init>`(v3, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$d;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L17546e.  call temp:= `retry`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/FlowKt;.retry:(Lkotlinx/coroutines/flow/Flow;JLkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L175474.  v0:= temp @kind object;
  #L175476.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `k`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function4` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt;.k:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function4;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L175548.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1`;
  #L17554c.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function4;)V` @kind direct;
  #L175552.  return v0 @kind object;
}
