record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @AccessFlag ;
  `kotlinx.coroutines.flow.SharingStarted` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.MutableSharedFlow` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v0 @kind this, `kotlinx.coroutines.flow.SharingStarted` v1 @kind object, `kotlinx.coroutines.flow.Flow` v2 @kind object, `kotlinx.coroutines.flow.MutableSharedFlow` v3 @kind object, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.<init>:(Lkotlinx/coroutines/flow/SharingStarted;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L178e44.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` := v1 @kind object;
  #L178e48.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` := v2 @kind object;
  #L178e4c.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` := v3 @kind object;
  #L178e50.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @type ^`java.lang.Object` := v4 @kind object;
  #L178e54.  v1:= 2I;
  #L178e56.  call `<init>`(v0, v1, v5) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L178e5c.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L178e14.  v7:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1`;
  #L178e18.  v1:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L178e1c.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L178e20.  v3:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L178e24.  v4:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @type ^`java.lang.Object` @kind object;
  #L178e28.  v0:= v7 @kind object;
  #L178e2a.  v5:= v8 @kind object;
  #L178e2c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.<init>:(Lkotlinx/coroutines/flow/SharingStarted;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L178e32.  return v7 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L178c90.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L178c94.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L178c98.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L178c9e.  v1:= temp @kind object;
  #L178ca0.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L178cb4.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L178cba.  v1:= temp @kind object;
  #L178cbc.  v1:= (`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1`) v1 @kind object;
  #L178cc0.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L178cc4.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L178cca.  v1:= temp @kind object;
  #L178ccc.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L178ce0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L178ce6.  v0:= temp @kind object;
  #L178ce8.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int`;
  #L178cec.  v2:= 4I;
  #L178cee.  v3:= 3I;
  #L178cf0.  v4:= 2I;
  #L178cf2.  v5:= 1I;
  #L178cf4.  if v1 == 0 then goto L178d2a;
  #L178cf8.  if v1 == v5 then goto L178d22;
  #L178cfc.  if v1 == v4 then goto L178d1a;
  #L178d00.  if v1 == v3 then goto L178d22;
  #L178d04.  if v1 != v2 then goto L178d0a;
  #L178d08.  goto L178d22;
  #L178d0a.  v8:= new `java.lang.IllegalStateException`;
  #L178d0e.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L178d12.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L178d18.  throw v8;
  #L178d1a.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L178d20.  goto L178d9c;
  #L178d22.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L178d28.  goto L178dfe;
  #L178d2a.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L178d30.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L178d34.  v1:= `@@kotlinx.coroutines.flow.SharingStarted.Companion` @type ^`kotlinx.coroutines.flow.SharingStarted$Companion` @kind object;
  #L178d38.  call temp:= `getEagerly`(v1) @signature `Lkotlinx/coroutines/flow/SharingStarted$Companion;.getEagerly:()Lkotlinx/coroutines/flow/SharingStarted;` @kind virtual;
  #L178d3e.  v1:= temp @kind object;
  #L178d40.  if v8 != v1 then goto L178d5e;
  #L178d44.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L178d48.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L178d4c.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v5;
  #L178d50.  call temp:= `collect`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L178d56.  v8:= temp @kind object;
  #L178d58.  if v8 != v0 then goto L178dfe;
  #L178d5c.  return v0 @kind object;
  #L178d5e.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L178d62.  v1:= `@@kotlinx.coroutines.flow.SharingStarted.Companion` @type ^`kotlinx.coroutines.flow.SharingStarted$Companion` @kind object;
  #L178d66.  call temp:= `getLazily`(v1) @signature `Lkotlinx/coroutines/flow/SharingStarted$Companion;.getLazily:()Lkotlinx/coroutines/flow/SharingStarted;` @kind virtual;
  #L178d6c.  v1:= temp @kind object;
  #L178d6e.  v5:= 0I;
  #L178d70.  if v8 != v1 then goto L178db6;
  #L178d74.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L178d78.  call temp:= `getSubscriptionCount`(v8) @signature `Lkotlinx/coroutines/flow/MutableSharedFlow;.getSubscriptionCount:()Lkotlinx/coroutines/flow/StateFlow;` @kind interface;
  #L178d7e.  v8:= temp @kind object;
  #L178d80.  v1:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a`;
  #L178d84.  call `<init>`(v1, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L178d8a.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v4;
  #L178d8e.  call temp:= `first`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/FlowKt;.first:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L178d94.  v8:= temp @kind object;
  #L178d96.  if v8 != v0 then goto L178d9c;
  #L178d9a.  return v0 @kind object;
  #L178d9c.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L178da0.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L178da4.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v3;
  #L178da8.  call temp:= `collect`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L178dae.  v8:= temp @kind object;
  #L178db0.  if v8 != v0 then goto L178dfe;
  #L178db4.  return v0 @kind object;
  #L178db6.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L178dba.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L178dbe.  call temp:= `getSubscriptionCount`(v1) @signature `Lkotlinx/coroutines/flow/MutableSharedFlow;.getSubscriptionCount:()Lkotlinx/coroutines/flow/StateFlow;` @kind interface;
  #L178dc4.  v1:= temp @kind object;
  #L178dc6.  call temp:= `command`(v8, v1) @signature `Lkotlinx/coroutines/flow/SharingStarted;.command:(Lkotlinx/coroutines/flow/StateFlow;)Lkotlinx/coroutines/flow/Flow;` @kind interface;
  #L178dcc.  v8:= temp @kind object;
  #L178dce.  call temp:= `distinctUntilChanged`(v8) @signature `Lkotlinx/coroutines/flow/FlowKt;.distinctUntilChanged:(Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L178dd4.  v8:= temp @kind object;
  #L178dd6.  v1:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2`;
  #L178dda.  v3:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L178dde.  v4:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L178de2.  v6:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @type ^`java.lang.Object` @kind object;
  #L178de6.  call `<init>`(v1, v3, v4, v6, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L178dec.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v2;
  #L178df0.  call temp:= `collectLatest`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/FlowKt;.collectLatest:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L178df6.  v8:= temp @kind object;
  #L178df8.  if v8 != v0 then goto L178dfe;
  #L178dfc.  return v0 @kind object;
  #L178dfe.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L178e02.  return v8 @kind object;
}
