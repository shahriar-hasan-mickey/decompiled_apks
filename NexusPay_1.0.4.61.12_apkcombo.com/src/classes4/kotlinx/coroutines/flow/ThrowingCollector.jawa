record `kotlinx.coroutines.flow.ThrowingCollector` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `java.lang.Throwable` `kotlinx.coroutines.flow.ThrowingCollector.e` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.ThrowingCollector` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/flow/ThrowingCollector;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1812e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1812ea.  v0.`kotlinx.coroutines.flow.ThrowingCollector.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L1812ee.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.ThrowingCollector` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/ThrowingCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1812cc.  v1:= v0.`kotlinx.coroutines.flow.ThrowingCollector.e` @type ^`java.lang.Throwable` @kind object;
  #L1812d0.  throw v1;
}
