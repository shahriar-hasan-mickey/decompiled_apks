record `kotlinx.coroutines.flow.StateFlowKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.flow.StateFlowKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.flow.StateFlowKt.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L180d50.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L180d54.  v1:= "NONE" @kind object;
  #L180d58.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L180d5e.  `@@kotlinx.coroutines.flow.StateFlowKt.a` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L180d62.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L180d66.  v1:= "PENDING" @kind object;
  #L180d6a.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L180d70.  `@@kotlinx.coroutines.flow.StateFlowKt.b` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L180d74.  return @kind void;
}
procedure `kotlinx.coroutines.flow.MutableStateFlow` `MutableStateFlow`(`java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.MutableStateFlow:(Ljava/lang/Object;)Lkotlinx/coroutines/flow/MutableStateFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L180cfc.  v0:= new `kotlinx.coroutines.flow.m`;
  #L180d00.  if v1 != 0 then goto L180d08;
  #L180d04.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L180d08.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/m;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L180d0e.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L180d20.  v0:= `@@kotlinx.coroutines.flow.StateFlowKt.a` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L180d24.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L180d38.  v0:= `@@kotlinx.coroutines.flow.StateFlowKt.b` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L180d3c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuseStateFlow`(`kotlinx.coroutines.flow.StateFlow` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object, `int` v5 , `kotlinx.coroutines.channels.BufferOverflow` v6 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.fuseStateFlow:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L180c94.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L180c9a.  v0:= temp;
  #L180c9c.  v1:= 1I;
  #L180c9e.  v2:= 0I;
  #L180ca0.  if v0 == 0 then goto L180cc2;
  #L180ca4.  v0:= -1I;
  #L180ca6.  if v5 == v0 then goto L180cae;
  #L180caa.  v0:= 1I;
  #L180cac.  goto L180cb0;
  #L180cae.  v0:= 0I;
  #L180cb0.  if v0 == 0 then goto L180cb6;
  #L180cb4.  goto L180cc2;
  #L180cb6.  v3:= new `java.lang.AssertionError`;
  #L180cba.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L180cc0.  throw v3;
  #L180cc2.  if v5 < 0 then goto L180ccc;
  #L180cc6.  if v5 > v1 then goto L180ccc;
  #L180cca.  goto L180cce;
  #L180ccc.  v1:= 0I;
  #L180cce.  if v1 != 0 then goto L180cd8;
  #L180cd2.  v0:= -2I;
  #L180cd4.  if v5 != v0 then goto L180ce2;
  #L180cd8.  v0:= `@@kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L180cdc.  if v6 != v0 then goto L180ce2;
  #L180ce0.  return v3 @kind object;
  #L180ce2.  call temp:= `fuseSharedFlow`(v3, v4, v5, v6) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.fuseSharedFlow:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L180ce8.  v3:= temp @kind object;
  #L180cea.  return v3 @kind object;
}
procedure `void` `increment`(`kotlinx.coroutines.flow.MutableStateFlow` v2 @kind object, `int` v3 ) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.increment:(Lkotlinx/coroutines/flow/MutableStateFlow;I)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L180d88.  call temp:= `getValue`(v2) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.getValue:()Ljava/lang/Object;` @kind interface;
  #L180d8e.  v0:= temp @kind object;
  #L180d90.  v0:= (`java.lang.Number`) v0 @kind object;
  #L180d94.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L180d9a.  v0:= temp;
  #L180d9c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L180da2.  v1:= temp @kind object;
  #L180da4.  v0:= v0 + v3 @kind int;
  #L180da6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L180dac.  v0:= temp @kind object;
  #L180dae.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L180db4.  v0:= temp;
  #L180db6.  if v0 == 0 then goto L180d88;
  #L180dba.  return @kind void;
}
