record `kotlinx.coroutines.flow.e` @kind class @AccessFlag FINAL_SYNTHETIC {
}
global `kotlin.jvm.functions.Function1` `@@kotlinx.coroutines.flow.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlin.jvm.functions.Function2` `@@kotlinx.coroutines.flow.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L173c1c.  v0:= `@@kotlinx.coroutines.flow.e$b.a` @type ^`kotlinx.coroutines.flow.e$b` @kind object;
  #L173c20.  `@@kotlinx.coroutines.flow.e.a` @type ^`kotlin.jvm.functions.Function1` := v0 @kind object;
  #L173c24.  v0:= `@@kotlinx.coroutines.flow.e$a.a` @type ^`kotlinx.coroutines.flow.e$a` @kind object;
  #L173c28.  `@@kotlinx.coroutines.flow.e.b` @type ^`kotlin.jvm.functions.Function2` := v0 @kind object;
  #L173c2c.  return @kind void;
}
procedure `kotlinx.coroutines.flow.Flow` `a`(`kotlinx.coroutines.flow.Flow` v2 @kind object) @signature `Lkotlinx/coroutines/flow/e;.a:(Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L173b70.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.flow.StateFlow` @kind boolean;
  #L173b74.  if v0 == 0 then goto L173b7a;
  #L173b78.  goto L173b8a;
  #L173b7a.  v0:= `@@kotlinx.coroutines.flow.e.a` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L173b7e.  v1:= `@@kotlinx.coroutines.flow.e.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L173b82.  call temp:= `d`(v2, v0, v1) @signature `Lkotlinx/coroutines/flow/e;.d:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L173b88.  v2:= temp @kind object;
  #L173b8a.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `b`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/e;.b:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L173b9c.  v0:= `@@kotlinx.coroutines.flow.e.a` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L173ba0.  call temp:= `d`(v1, v0, v2) @signature `Lkotlinx/coroutines/flow/e;.d:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L173ba6.  v1:= temp @kind object;
  #L173ba8.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `c`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlinx/coroutines/flow/e;.c:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L173bfc.  v0:= `@@kotlinx.coroutines.flow.e.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L173c00.  call temp:= `d`(v1, v2, v0) @signature `Lkotlinx/coroutines/flow/e;.d:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L173c06.  v1:= temp @kind object;
  #L173c08.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `d`(`kotlinx.coroutines.flow.Flow` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlinx/coroutines/flow/e;.d:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L173bbc.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.flow.DistinctFlowImpl` @kind boolean;
  #L173bc0.  if v0 == 0 then goto L173bdc;
  #L173bc4.  v0:= v2 @kind object;
  #L173bc6.  v0:= (`kotlinx.coroutines.flow.DistinctFlowImpl`) v0 @kind object;
  #L173bca.  v1:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L173bce.  if v1 != v3 then goto L173bdc;
  #L173bd2.  v0:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl.c` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L173bd6.  if v0 != v4 then goto L173bdc;
  #L173bda.  goto L173be8;
  #L173bdc.  v0:= new `kotlinx.coroutines.flow.DistinctFlowImpl`;
  #L173be0.  call `<init>`(v0, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L173be6.  v2:= v0 @kind object;
  #L173be8.  return v2 @kind object;
}
