record `kotlinx.coroutines.flow.m` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.AbstractSharedFlow` @kind class, `kotlinx.coroutines.flow.MutableStateFlow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface, `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.flow.m._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.m.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/m;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L180c34.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.<init>:()V` @kind direct;
  #L180c3a.  v0.`kotlinx.coroutines.flow.m._state` @type ^`java.lang.Object` := v1 @kind object;
  #L180c3e.  return @kind void;
}
procedure `boolean` `c`(`kotlinx.coroutines.flow.m` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/m;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L180820.  call temp:= `getSlots`(v5) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L180826.  @monitorenter v5
  #L180828.  v0:= v5.`kotlinx.coroutines.flow.m._state` @type ^`java.lang.Object` @kind object;
  #L18082c.  v1:= 0I;
  #L18082e.  if v6 == 0 then goto L180842;
  #L180832.  call temp:= `areEqual`(v0, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L180838.  v6:= temp;
  #L18083a.  if v6 != 0 then goto L180842;
  #L18083e.  @monitorexit v5
  #L180840.  return v1;
  #L180842.  call temp:= `areEqual`(v0, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L180848.  v6:= temp;
  #L18084a.  v0:= 1I;
  #L18084c.  if v6 == 0 then goto L180854;
  #L180850.  @monitorexit v5
  #L180852.  return v0;
  #L180854.  v5.`kotlinx.coroutines.flow.m._state` @type ^`java.lang.Object` := v7 @kind object;
  #L180858.  v6:= v5.`kotlinx.coroutines.flow.m.e` @type ^`int`;
  #L18085c.  v7:= v6 ^& 1;
  #L180860.  if v7 != 0 then goto L1808ce;
  #L180864.  v6:= v6 + v0 @kind int;
  #L180866.  v5.`kotlinx.coroutines.flow.m.e` @type ^`int` := v6;
  #L18086a.  call temp:= `getSlots`(v5) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L180870.  v7:= temp @kind object;
  #L180872.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L180876.  @monitorexit v5
  #L180878.  v7:= (`kotlinx.coroutines.flow.n`[]) v7 @kind object;
  #L18087c.  if v7 != 0 then goto L180882;
  #L180880.  goto L1808a0;
  #L180882.  v2:= length @variable v7;
  #L180884.  v3:= 0I;
  #L180886.  if v3 >= v2 then goto L1808a0;
  #L18088a.  v4:= v7[v3] @kind object;
  #L18088e.  if v4 != 0 then goto L180894;
  #L180892.  goto L18089a;
  #L180894.  call `d`(v4) @signature `Lkotlinx/coroutines/flow/n;.d:()V` @kind virtual;
  #L18089a.  v3:= v3 + 1;
  #L18089e.  goto L180886;
  #L1808a0.  @monitorenter v5
  #L1808a2.  v7:= v5.`kotlinx.coroutines.flow.m.e` @type ^`int`;
  #L1808a6.  if v7 != v6 then goto L1808b4;
  #L1808aa.  v6:= v6 + v0 @kind int;
  #L1808ac.  v5.`kotlinx.coroutines.flow.m.e` @type ^`int` := v6;
  #L1808b0.  @monitorexit v5
  #L1808b2.  return v0;
  #L1808b4.  v6:= v5.`kotlinx.coroutines.flow.m.e` @type ^`int`;
  #L1808b8.  call temp:= `getSlots`(v5) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L1808be.  v7:= temp @kind object;
  #L1808c0.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1808c4.  @monitorexit v5
  #L1808c6.  goto L180878;
  #L1808c8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1808ca.  @monitorexit v5
  #L1808cc.  throw v6;
  #L1808ce.  v6:= v6 + 2;
  #L1808d2.  v5.`kotlinx.coroutines.flow.m.e` @type ^`int` := v6;
  #L1808d6.  @monitorexit v5
  #L1808d8.  return v0;
  #L1808da.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1808dc.  @monitorexit v5
  #L1808de.  throw v6;
  catch `java.lang.Throwable` @[L180828..L18083a] goto L1808da;
  catch `java.lang.Throwable` @[L180842..L18084a] goto L1808da;
  catch `java.lang.Throwable` @[L180854..L180876] goto L1808da;
  catch `java.lang.Throwable` @[L1808a2..L1808b0] goto L1808c8;
  catch `java.lang.Throwable` @[L1808b4..L1808c4] goto L1808c8;
  catch `java.lang.Throwable` @[L1808d2..L1808d6] goto L1808da;
}
procedure `kotlinx.coroutines.flow.n` `a`(`kotlinx.coroutines.flow.m` v1 @kind this) @signature `Lkotlinx/coroutines/flow/m;.a:()Lkotlinx/coroutines/flow/n;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L180bc8.  v0:= new `kotlinx.coroutines.flow.n`;
  #L180bcc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/n;.<init>:()V` @kind direct;
  #L180bd2.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.n`[] `b`(`kotlinx.coroutines.flow.m` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/m;.b:(I)[Lkotlinx/coroutines/flow/n;` @AccessFlag PROTECTED {
    temp;

  #L180be4.  v1:= new `kotlinx.coroutines.flow.n`[v1];
  #L180be8.  return v1 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.m` v10 @kind this, `kotlinx.coroutines.flow.FlowCollector` v11 @kind object, `kotlin.coroutines.Continuation` v12 @kind object) @signature `Lkotlinx/coroutines/flow/m;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L180928.  v0:= instanceof @variable v12 @type ^`kotlinx.coroutines.flow.m$a` @kind boolean;
  #L18092c.  if v0 == 0 then goto L18094e;
  #L180930.  v0:= v12 @kind object;
  #L180932.  v0:= (`kotlinx.coroutines.flow.m$a`) v0 @kind object;
  #L180936.  v1:= v0.`kotlinx.coroutines.flow.m$a.h` @type ^`int`;
  #L18093a.  v2:= -2147483648I;
  #L18093e.  v3:= v1 ^& v2 @kind int;
  #L180942.  if v3 == 0 then goto L18094e;
  #L180946.  v1:= v1 - v2 @kind int;
  #L180948.  v0.`kotlinx.coroutines.flow.m$a.h` @type ^`int` := v1;
  #L18094c.  goto L180958;
  #L18094e.  v0:= new `kotlinx.coroutines.flow.m$a`;
  #L180952.  call `<init>`(v0, v10, v12) @signature `Lkotlinx/coroutines/flow/m$a;.<init>:(Lkotlinx/coroutines/flow/m;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L180958.  v12:= v0.`kotlinx.coroutines.flow.m$a.f` @type ^`java.lang.Object` @kind object;
  #L18095c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L180962.  v1:= temp @kind object;
  #L180964.  v2:= v0.`kotlinx.coroutines.flow.m$a.h` @type ^`int`;
  #L180968.  v3:= 0I;
  #L18096a.  v4:= 3I;
  #L18096c.  v5:= 2I;
  #L18096e.  v6:= 1I;
  #L180970.  if v2 == 0 then goto L180a14;
  #L180974.  if v2 == v6 then goto L1809ea;
  #L180978.  if v2 == v5 then goto L1809bc;
  #L18097c.  if v2 != v4 then goto L1809ac;
  #L180980.  v11:= v0.`kotlinx.coroutines.flow.m$a.e` @type ^`java.lang.Object` @kind object;
  #L180984.  v2:= v0.`kotlinx.coroutines.flow.m$a.d` @type ^`java.lang.Object` @kind object;
  #L180988.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L18098c.  v6:= v0.`kotlinx.coroutines.flow.m$a.c` @type ^`java.lang.Object` @kind object;
  #L180990.  v6:= (`kotlinx.coroutines.flow.n`) v6 @kind object;
  #L180994.  v7:= v0.`kotlinx.coroutines.flow.m$a.b` @type ^`java.lang.Object` @kind object;
  #L180998.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L18099c.  v8:= v0.`kotlinx.coroutines.flow.m$a.a` @type ^`java.lang.Object` @kind object;
  #L1809a0.  v8:= (`kotlinx.coroutines.flow.m`) v8 @kind object;
  #L1809a4.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1809aa.  goto L180a74;
  #L1809ac.  v11:= new `java.lang.IllegalStateException`;
  #L1809b0.  v12:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1809b4.  call `<init>`(v11, v12) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1809ba.  throw v11;
  #L1809bc.  v11:= v0.`kotlinx.coroutines.flow.m$a.e` @type ^`java.lang.Object` @kind object;
  #L1809c0.  v2:= v0.`kotlinx.coroutines.flow.m$a.d` @type ^`java.lang.Object` @kind object;
  #L1809c4.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L1809c8.  v6:= v0.`kotlinx.coroutines.flow.m$a.c` @type ^`java.lang.Object` @kind object;
  #L1809cc.  v6:= (`kotlinx.coroutines.flow.n`) v6 @kind object;
  #L1809d0.  v7:= v0.`kotlinx.coroutines.flow.m$a.b` @type ^`java.lang.Object` @kind object;
  #L1809d4.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L1809d8.  v8:= v0.`kotlinx.coroutines.flow.m$a.a` @type ^`java.lang.Object` @kind object;
  #L1809dc.  v8:= (`kotlinx.coroutines.flow.m`) v8 @kind object;
  #L1809e0.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1809e6.  goto L180aca;
  #L1809ea.  v11:= v0.`kotlinx.coroutines.flow.m$a.c` @type ^`java.lang.Object` @kind object;
  #L1809ee.  v6:= v11 @kind object;
  #L1809f0.  v6:= (`kotlinx.coroutines.flow.n`) v6 @kind object;
  #L1809f4.  v11:= v0.`kotlinx.coroutines.flow.m$a.b` @type ^`java.lang.Object` @kind object;
  #L1809f8.  v11:= (`kotlinx.coroutines.flow.FlowCollector`) v11 @kind object;
  #L1809fc.  v2:= v0.`kotlinx.coroutines.flow.m$a.a` @type ^`java.lang.Object` @kind object;
  #L180a00.  v8:= v2 @kind object;
  #L180a02.  v8:= (`kotlinx.coroutines.flow.m`) v8 @kind object;
  #L180a06.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L180a0c.  goto L180a56;
  #L180a0e.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L180a10.  goto L180b02;
  #L180a14.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L180a1a.  call temp:= `allocateSlot`(v10) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.allocateSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L180a20.  v12:= temp @kind object;
  #L180a22.  v12:= (`kotlinx.coroutines.flow.n`) v12 @kind object;
  #L180a26.  v2:= instanceof @variable v11 @type ^`kotlinx.coroutines.flow.SubscribedFlowCollector` @kind boolean;
  #L180a2a.  if v2 == 0 then goto L180a52;
  #L180a2e.  v2:= v11 @kind object;
  #L180a30.  v2:= (`kotlinx.coroutines.flow.SubscribedFlowCollector`) v2 @kind object;
  #L180a34.  v0.`kotlinx.coroutines.flow.m$a.a` @type ^`java.lang.Object` := v10 @kind object;
  #L180a38.  v0.`kotlinx.coroutines.flow.m$a.b` @type ^`java.lang.Object` := v11 @kind object;
  #L180a3c.  v0.`kotlinx.coroutines.flow.m$a.c` @type ^`java.lang.Object` := v12 @kind object;
  #L180a40.  v0.`kotlinx.coroutines.flow.m$a.h` @type ^`int` := v6;
  #L180a44.  call temp:= `onSubscription`(v2, v0) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.onSubscription:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L180a4a.  v2:= temp @kind object;
  #L180a4c.  if v2 != v1 then goto L180a52;
  #L180a50.  return v1 @kind object;
  #L180a52.  v8:= v10 @kind object;
  #L180a54.  v6:= v12 @kind object;
  #L180a56.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L180a5c.  v12:= temp @kind object;
  #L180a5e.  v2:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L180a62.  call temp:= `get`(v12, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L180a68.  v12:= temp @kind object;
  #L180a6a.  v12:= (`kotlinx.coroutines.Job`) v12 @kind object;
  #L180a6e.  v7:= v11 @kind object;
  #L180a70.  v2:= v12 @kind object;
  #L180a72.  v11:= v3 @kind object;
  #L180a74.  v12:= v8.`kotlinx.coroutines.flow.m._state` @type ^`java.lang.Object` @kind object;
  #L180a78.  if v2 != 0 then goto L180a7e;
  #L180a7c.  goto L180a84;
  #L180a7e.  call `ensureActive`(v2) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlinx/coroutines/Job;)V` @kind static;
  #L180a84.  if v11 == 0 then goto L180a94;
  #L180a88.  call temp:= `areEqual`(v11, v12) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L180a8e.  v9:= temp;
  #L180a90.  if v9 != 0 then goto L180aca;
  #L180a94.  v11:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L180a98.  if v12 != v11 then goto L180aa0;
  #L180a9c.  v11:= v3 @kind object;
  #L180a9e.  goto L180aa2;
  #L180aa0.  v11:= v12 @kind object;
  #L180aa2.  v0.`kotlinx.coroutines.flow.m$a.a` @type ^`java.lang.Object` := v8 @kind object;
  #L180aa6.  v0.`kotlinx.coroutines.flow.m$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L180aaa.  v0.`kotlinx.coroutines.flow.m$a.c` @type ^`java.lang.Object` := v6 @kind object;
  #L180aae.  v0.`kotlinx.coroutines.flow.m$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L180ab2.  v0.`kotlinx.coroutines.flow.m$a.e` @type ^`java.lang.Object` := v12 @kind object;
  #L180ab6.  v0.`kotlinx.coroutines.flow.m$a.h` @type ^`int` := v5;
  #L180aba.  call temp:= `emit`(v7, v11, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L180ac0.  v11:= temp @kind object;
  #L180ac2.  if v11 != v1 then goto L180ac8;
  #L180ac6.  return v1 @kind object;
  #L180ac8.  v11:= v12 @kind object;
  #L180aca.  call temp:= `e`(v6) @signature `Lkotlinx/coroutines/flow/n;.e:()Z` @kind virtual;
  #L180ad0.  v12:= temp;
  #L180ad2.  if v12 != 0 then goto L180a74;
  #L180ad6.  v0.`kotlinx.coroutines.flow.m$a.a` @type ^`java.lang.Object` := v8 @kind object;
  #L180ada.  v0.`kotlinx.coroutines.flow.m$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L180ade.  v0.`kotlinx.coroutines.flow.m$a.c` @type ^`java.lang.Object` := v6 @kind object;
  #L180ae2.  v0.`kotlinx.coroutines.flow.m$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L180ae6.  v0.`kotlinx.coroutines.flow.m$a.e` @type ^`java.lang.Object` := v11 @kind object;
  #L180aea.  v0.`kotlinx.coroutines.flow.m$a.h` @type ^`int` := v4;
  #L180aee.  call temp:= `b`(v6, v0) @signature `Lkotlinx/coroutines/flow/n;.b:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L180af4.  v12:= temp @kind object;
  #L180af6.  if v12 != v1 then goto L180a74;
  #L180afa.  return v1 @kind object;
  #L180afc.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L180afe.  v8:= v10 @kind object;
  #L180b00.  v6:= v12 @kind object;
  #L180b02.  call `freeSlot`(v8, v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.freeSlot:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;)V` @kind virtual;
  #L180b08.  throw v11;
  catch `java.lang.Throwable` @[L1809a4..L1809aa] goto L180a0e;
  catch `java.lang.Throwable` @[L1809e0..L1809e6] goto L180a0e;
  catch `java.lang.Throwable` @[L180a06..L180a0c] goto L180a0e;
  catch `java.lang.Throwable` @[L180a26..L180a4c] goto L180afc;
  catch `java.lang.Throwable` @[L180a56..L180af6] goto L180a0e;
}
procedure `boolean` `compareAndSet`(`kotlinx.coroutines.flow.m` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/m;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1807d8.  if v1 != 0 then goto L1807e0;
  #L1807dc.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1807e0.  if v2 != 0 then goto L1807e8;
  #L1807e4.  v2:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1807e8.  call temp:= `c`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/m;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L1807ee.  v1:= temp;
  #L1807f0.  return v1;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `createSlot`(`kotlinx.coroutines.flow.m` v1 @kind this) @signature `Lkotlinx/coroutines/flow/m;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L180bfc.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/flow/m;.a:()Lkotlinx/coroutines/flow/n;` @kind virtual;
  #L180c02.  v0:= temp @kind object;
  #L180c04.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `createSlotArray`(`kotlinx.coroutines.flow.m` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/m;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L180c18.  call temp:= `b`(v0, v1) @signature `Lkotlinx/coroutines/flow/m;.b:(I)[Lkotlinx/coroutines/flow/n;` @kind virtual;
  #L180c1e.  v1:= temp @kind object;
  #L180c20.  return v1 @kind object;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.m` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/m;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L180b4c.  call `setValue`(v0, v1) @signature `Lkotlinx/coroutines/flow/m;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L180b52.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L180b56.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.m` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/m;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;

  #L180bac.  call temp:= `fuseStateFlow`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.fuseStateFlow:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L180bb2.  v1:= temp @kind object;
  #L180bb4.  return v1 @kind object;
}
procedure `java.util.List` `getReplayCache`(`kotlinx.coroutines.flow.m` v1 @kind this) @signature `Lkotlinx/coroutines/flow/m;.getReplayCache:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L180b88.  call temp:= `getValue`(v1) @signature `Lkotlinx/coroutines/flow/m;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L180b8e.  v0:= temp @kind object;
  #L180b90.  call temp:= `listOf`(v0) @signature `Lkotlin/collections/CollectionsKt;.listOf:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L180b96.  v0:= temp @kind object;
  #L180b98.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlinx.coroutines.flow.m` v2 @kind this) @signature `Lkotlinx/coroutines/flow/m;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L180b68.  v0:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L180b6c.  v1:= v2.`kotlinx.coroutines.flow.m._state` @type ^`java.lang.Object` @kind object;
  #L180b70.  if v1 != v0 then goto L180b76;
  #L180b74.  v1:= 0I;
  #L180b76.  return v1 @kind object;
}
procedure `void` `resetReplayCache`(`kotlinx.coroutines.flow.m` v2 @kind this) @signature `Lkotlinx/coroutines/flow/m;.resetReplayCache:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L180c50.  v0:= new `java.lang.UnsupportedOperationException`;
  #L180c54.  v1:= "MutableStateFlow.resetReplayCache is not supported" @kind object;
  #L180c58.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L180c5e.  throw v0;
}
procedure `void` `setValue`(`kotlinx.coroutines.flow.m` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/m;.setValue:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L180c70.  if v2 != 0 then goto L180c78;
  #L180c74.  v2:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L180c78.  v0:= 0I;
  #L180c7a.  call temp:= `c`(v1, v0, v2) @signature `Lkotlinx/coroutines/flow/m;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L180c80.  return @kind void;
}
procedure `boolean` `tryEmit`(`kotlinx.coroutines.flow.m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/m;.tryEmit:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L180804.  call `setValue`(v0, v1) @signature `Lkotlinx/coroutines/flow/m;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L18080a.  v1:= 1I;
  #L18080c.  return v1;
}
