record `kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L179e28.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L179e2c.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L179e30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L179e36.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L179d58.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1` @kind boolean;
  #L179d5c.  if v0 == 0 then goto L179d7e;
  #L179d60.  v0:= v8 @kind object;
  #L179d62.  v0:= (`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1`) v0 @kind object;
  #L179d66.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L179d6a.  v2:= -2147483648I;
  #L179d6e.  v3:= v1 ^& v2 @kind int;
  #L179d72.  if v3 == 0 then goto L179d7e;
  #L179d76.  v1:= v1 - v2 @kind int;
  #L179d78.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v1;
  #L179d7c.  goto L179d88;
  #L179d7e.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1`;
  #L179d82.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L179d88.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L179d8c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L179d92.  v1:= temp @kind object;
  #L179d94.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L179d98.  v3:= 2I;
  #L179d9a.  v4:= 1I;
  #L179d9c.  if v2 == 0 then goto L179dd0;
  #L179da0.  if v2 == v4 then goto L179dc0;
  #L179da4.  if v2 != v3 then goto L179db0;
  #L179da8.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L179dae.  goto L179e12;
  #L179db0.  v7:= new `java.lang.IllegalStateException`;
  #L179db4.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L179db8.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L179dbe.  throw v7;
  #L179dc0.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` @kind object;
  #L179dc4.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L179dc8.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L179dce.  goto L179dfa;
  #L179dd0.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L179dd6.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L179dda.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L179dde.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` := v8 @kind object;
  #L179de2.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v4;
  #L179de6.  call temp:= `invoke`(v2, v7, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L179dec.  v7:= temp @kind object;
  #L179dee.  if v7 != v1 then goto L179df4;
  #L179df2.  return v1 @kind object;
  #L179df4.  v5:= v8 @kind object;
  #L179df6.  v8:= v7 @kind object;
  #L179df8.  v7:= v5 @kind object;
  #L179dfa.  v2:= 0I;
  #L179dfc.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` := v2 @kind object;
  #L179e00.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v3;
  #L179e04.  call temp:= `emit`(v7, v8, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L179e0a.  v7:= temp @kind object;
  #L179e0c.  if v7 != v1 then goto L179e12;
  #L179e10.  return v1 @kind object;
  #L179e12.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L179e16.  return v7 @kind object;
}
procedure `java.lang.Object` `emit$$forInline`(`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2;.emit$$forInline:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L179d00.  v0:= 4I;
  #L179d02.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179d08.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1`;
  #L179d0c.  call `<init>`(v0, v2, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L179d12.  v0:= 5I;
  #L179d14.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179d1a.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L179d1e.  v1:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L179d22.  call temp:= `invoke`(v1, v3, v4) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L179d28.  v3:= temp @kind object;
  #L179d2a.  v1:= 0I;
  #L179d2c.  call `mark`(v1) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179d32.  call temp:= `emit`(v0, v3, v4) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L179d38.  v3:= 1I;
  #L179d3a.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L179d40.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L179d44.  return v3 @kind object;
}
