record `kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlinx.coroutines.flow.DistinctFlowImpl` `kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1` v0 @kind this, `kotlinx.coroutines.flow.DistinctFlowImpl` v1 @kind object, `kotlin.jvm.internal.Ref$ObjectRef` v2 @kind object, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$$inlined$collect$1;.<init>:(Lkotlinx/coroutines/flow/DistinctFlowImpl;Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L170564.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.a` @type ^`kotlinx.coroutines.flow.DistinctFlowImpl` := v1 @kind object;
  #L170568.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.b` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v2 @kind object;
  #L17056c.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.c` @type ^`kotlinx.coroutines.flow.FlowCollector` := v3 @kind object;
  #L170570.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L170576.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1` v5 @kind this, `java.lang.Object` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$$inlined$collect$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L170488.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1` @kind boolean;
  #L17048c.  if v0 == 0 then goto L1704ae;
  #L170490.  v0:= v7 @kind object;
  #L170492.  v0:= (`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1`) v0 @kind object;
  #L170496.  v1:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1.b` @type ^`int`;
  #L17049a.  v2:= -2147483648I;
  #L17049e.  v3:= v1 ^& v2 @kind int;
  #L1704a2.  if v3 == 0 then goto L1704ae;
  #L1704a6.  v1:= v1 - v2 @kind int;
  #L1704a8.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1.b` @type ^`int` := v1;
  #L1704ac.  goto L1704b8;
  #L1704ae.  v0:= new `kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1`;
  #L1704b2.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$$inlined$collect$1$1;.<init>:(Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$$inlined$collect$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1704b8.  v7:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1.a` @type ^`java.lang.Object` @kind object;
  #L1704bc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1704c2.  v1:= temp @kind object;
  #L1704c4.  v2:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1.b` @type ^`int`;
  #L1704c8.  v3:= 1I;
  #L1704ca.  if v2 == 0 then goto L1704ea;
  #L1704ce.  if v2 != v3 then goto L1704da;
  #L1704d2.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1704d8.  goto L17054e;
  #L1704da.  v6:= new `java.lang.IllegalStateException`;
  #L1704de.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1704e2.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1704e8.  throw v6;
  #L1704ea.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1704f0.  v7:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.a` @type ^`kotlinx.coroutines.flow.DistinctFlowImpl` @kind object;
  #L1704f4.  v7:= v7.`kotlinx.coroutines.flow.DistinctFlowImpl.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L1704f8.  call temp:= `invoke`(v7, v6) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1704fe.  v7:= temp @kind object;
  #L170500.  v2:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.b` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L170504.  v2:= v2.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L170508.  v4:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L17050c.  if v2 == v4 then goto L170530;
  #L170510.  v4:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.a` @type ^`kotlinx.coroutines.flow.DistinctFlowImpl` @kind object;
  #L170514.  v4:= v4.`kotlinx.coroutines.flow.DistinctFlowImpl.c` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L170518.  call temp:= `invoke`(v4, v2, v7) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L17051e.  v2:= temp @kind object;
  #L170520.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L170524.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L17052a.  v2:= temp;
  #L17052c.  if v2 != 0 then goto L17054e;
  #L170530.  v2:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.b` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L170534.  v2.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v7 @kind object;
  #L170538.  v7:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L17053c.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1$1.b` @type ^`int` := v3;
  #L170540.  call temp:= `emit`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L170546.  v6:= temp @kind object;
  #L170548.  if v6 != v1 then goto L17054e;
  #L17054c.  return v1 @kind object;
  #L17054e.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L170552.  return v6 @kind object;
}
