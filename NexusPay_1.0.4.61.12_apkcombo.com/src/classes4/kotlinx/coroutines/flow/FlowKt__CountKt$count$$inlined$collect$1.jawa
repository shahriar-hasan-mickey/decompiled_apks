record `kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlin.jvm.internal.Ref$IntRef` `kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$1` v0 @kind this, `kotlin.jvm.internal.Ref$IntRef` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__CountKt$count$$inlined$collect$1;.<init>:(Lkotlin/jvm/internal/Ref$IntRef;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L172614.  v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$1.a` @type ^`kotlin.jvm.internal.Ref$IntRef` := v1 @kind object;
  #L172618.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17261e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$1` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__CountKt$count$$inlined$collect$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1725ec.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__CountKt$count$$inlined$collect$1.a` @type ^`kotlin.jvm.internal.Ref$IntRef` @kind object;
  #L1725f0.  v2:= v1.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L1725f4.  v2:= v2 + 1;
  #L1725f8.  v1.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int` := v2;
  #L1725fc.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L172600.  return v1 @kind object;
}
