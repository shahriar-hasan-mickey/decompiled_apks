record `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L175b80.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L175b84.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.b` @type ^`int` := v2;
  #L175b88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L175b8e.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1` v6 @kind this, `kotlinx.coroutines.flow.FlowCollector` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L175aa8.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1` @kind boolean;
  #L175aac.  if v0 == 0 then goto L175ace;
  #L175ab0.  v0:= v8 @kind object;
  #L175ab2.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L175ab6.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L175aba.  v2:= -2147483648I;
  #L175abe.  v3:= v1 ^& v2 @kind int;
  #L175ac2.  if v3 == 0 then goto L175ace;
  #L175ac6.  v1:= v1 - v2 @kind int;
  #L175ac8.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int` := v1;
  #L175acc.  goto L175ad8;
  #L175ace.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1`;
  #L175ad2.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L175ad8.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.a` @type ^`java.lang.Object` @kind object;
  #L175adc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L175ae2.  v1:= temp @kind object;
  #L175ae4.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L175ae8.  v3:= 1I;
  #L175aea.  if v2 == 0 then goto L175b12;
  #L175aee.  if v2 != v3 then goto L175b02;
  #L175af2.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L175af6.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L175afa.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L175b00.  goto L175b52;
  #L175b02.  v7:= new `java.lang.IllegalStateException`;
  #L175b06.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L175b0a.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L175b10.  throw v7;
  #L175b12.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L175b18.  v8:= new `kotlin.jvm.internal.Ref$IntRef`;
  #L175b1c.  call `<init>`(v8) @signature `Lkotlin/jvm/internal/Ref$IntRef;.<init>:()V` @kind direct;
  #L175b22.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L175b26.  v4:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$take$lambda-7$$inlined$collect$1`;
  #L175b2a.  v5:= v6.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.b` @type ^`int`;
  #L175b2e.  call `<init>`(v4, v8, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$lambda-7$$inlined$collect$1;.<init>:(Lkotlin/jvm/internal/Ref$IntRef;ILkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L175b34.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L175b38.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int` := v3;
  #L175b3c.  call temp:= `collect`(v2, v4, v0) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L175b42.  v7:= temp @kind object;
  #L175b44.  if v7 != v1 then goto L175b52;
  #L175b48.  return v1 @kind object;
  #L175b4a.  v8:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L175b4c.  call `checkOwnership`(v8, v7) @signature `Lkotlinx/coroutines/flow/internal/FlowExceptions_commonKt;.checkOwnership:(Lkotlinx/coroutines/flow/internal/AbortFlowException;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind static;
  #L175b52.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L175b56.  return v7 @kind object;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L175afa..L175b00] goto L175b4a;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L175b22..L175b44] goto L175b4a;
}
