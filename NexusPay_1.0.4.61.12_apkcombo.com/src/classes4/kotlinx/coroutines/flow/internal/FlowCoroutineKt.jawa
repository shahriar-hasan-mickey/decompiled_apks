record `kotlinx.coroutines.flow.internal.FlowCoroutineKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `flowProduce`(`kotlinx.coroutines.CoroutineScope` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlin.jvm.functions.Function2` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.flowProduce:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L183ce4.  v0:= 0I;
  #L183ce6.  v1:= 6I;
  #L183ce8.  call temp:= `Channel$default`(v4, v0, v0, v1, v0) @signature `Lkotlinx/coroutines/channels/ChannelKt;.Channel$default:(ILkotlinx/coroutines/channels/BufferOverflow;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlinx/coroutines/channels/Channel;` @kind static;
  #L183cee.  v4:= temp @kind object;
  #L183cf0.  call temp:= `newCoroutineContext`(v2, v3) @signature `Lkotlinx/coroutines/CoroutineContextKt;.newCoroutineContext:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L183cf6.  v2:= temp @kind object;
  #L183cf8.  v3:= new `kotlinx.coroutines.flow.internal.b`;
  #L183cfc.  call `<init>`(v3, v2, v4) @signature `Lkotlinx/coroutines/flow/internal/b;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/channels/Channel;)V` @kind direct;
  #L183d02.  v2:= `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L183d06.  call `start`(v3, v2, v3, v5) @signature `Lkotlinx/coroutines/AbstractCoroutine;.start:(Lkotlinx/coroutines/CoroutineStart;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)V` @kind virtual;
  #L183d0c.  return v3 @kind object;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `flowProduce$default`(`kotlinx.coroutines.CoroutineScope` v0 @kind object, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlin.jvm.functions.Function2` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.flowProduce$default:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L183cc0.  v4:= v4 ^& 2;
  #L183cc4.  if v4 == 0 then goto L183cca;
  #L183cc8.  v2:= 0I;
  #L183cca.  call temp:= `flowProduce`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.flowProduce:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind static;
  #L183cd0.  v0:= temp @kind object;
  #L183cd2.  return v0 @kind object;
}
procedure `java.lang.Object` `flowScope`(`kotlin.jvm.functions.Function2` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.flowScope:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L183c80.  v0:= new `kotlinx.coroutines.flow.internal.a`;
  #L183c84.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L183c8a.  v1:= temp @kind object;
  #L183c8c.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L183c92.  call temp:= `startUndispatchedOrReturn`(v0, v0, v2) @signature `Lkotlinx/coroutines/intrinsics/UndispatchedKt;.startUndispatchedOrReturn:(Lkotlinx/coroutines/internal/ScopeCoroutine;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L183c98.  v2:= temp @kind object;
  #L183c9a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L183ca0.  v0:= temp @kind object;
  #L183ca2.  if v2 != v0 then goto L183cac;
  #L183ca6.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L183cac.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `scopedFlow`(`kotlin.jvm.functions.Function3` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.scopedFlow:(Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L183d20.  v0:= new `kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1`;
  #L183d24.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1;.<init>:(Lkotlin/jvm/functions/Function3;)V` @kind direct;
  #L183d2a.  return v0 @kind object;
}
