record `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.b` @AccessFlag SYNTHETIC;
  `kotlinx.coroutines.flow.internal.ChannelFlowOperator` `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v0 @kind this, `kotlinx.coroutines.flow.internal.ChannelFlowOperator` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L181e54.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowOperator` := v1 @kind object;
  #L181e58.  v1:= 2I;
  #L181e5a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L181e60.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L181e30.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a`;
  #L181e34.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowOperator` @kind object;
  #L181e38.  call `<init>`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L181e3e.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.b` @type ^`java.lang.Object` := v3 @kind object;
  #L181e42.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L181d78.  v1:= (`kotlinx.coroutines.flow.FlowCollector`) v1 @kind object;
  #L181d7c.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L181d80.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L181d86.  v1:= temp @kind object;
  #L181d88.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L181d9c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L181da2.  v1:= temp @kind object;
  #L181da4.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a`) v1 @kind object;
  #L181da8.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181dac.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L181db2.  v1:= temp @kind object;
  #L181db4.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L181dc8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L181dce.  v0:= temp @kind object;
  #L181dd0.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.a` @type ^`int`;
  #L181dd4.  v2:= 1I;
  #L181dd6.  if v1 == 0 then goto L181df6;
  #L181dda.  if v1 != v2 then goto L181de6;
  #L181dde.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L181de4.  goto L181e1a;
  #L181de6.  v4:= new `java.lang.IllegalStateException`;
  #L181dea.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L181dee.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L181df4.  throw v4;
  #L181df6.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L181dfc.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.b` @type ^`java.lang.Object` @kind object;
  #L181e00.  v4:= (`kotlinx.coroutines.flow.FlowCollector`) v4 @kind object;
  #L181e04.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowOperator` @kind object;
  #L181e08.  v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.a` @type ^`int` := v2;
  #L181e0c.  call temp:= `flowCollect`(v1, v4, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L181e12.  v4:= temp @kind object;
  #L181e14.  if v4 != v0 then goto L181e1a;
  #L181e18.  return v0 @kind object;
  #L181e1a.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181e1e.  return v4 @kind object;
}
