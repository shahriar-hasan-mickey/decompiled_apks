record `kotlinx.coroutines.flow.internal.AbstractSharedFlow` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @AccessFlag PRIVATE;
  `kotlinx.coroutines.flow.MutableStateFlow` `kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v0 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18152c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L181532.  return @kind void;
}
procedure `int` `access$getNCollectors`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v0 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1813b4.  v0:= v0.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int`;
  #L1813b8.  return v0;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `access$getSlots`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v0 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1814fc.  v0:= v0.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] @kind object;
  #L181500.  return v0 @kind object;
}
procedure `void` `getSlots$annotations`() @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots$annotations:()V` @AccessFlag PROTECTED_STATIC_SYNTHETIC {
    temp;

  #L181620.  return @kind void;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `allocateSlot`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v4 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.allocateSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L181430.  @monitorenter v4
  #L181432.  call temp:= `getSlots`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L181438.  v0:= temp @kind object;
  #L18143a.  v1:= 2I;
  #L18143c.  if v0 != 0 then goto L18144e;
  #L181440.  call temp:= `createSlotArray`(v4, v1) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L181446.  v0:= temp @kind object;
  #L181448.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] := v0 @kind object;
  #L18144c.  goto L181482;
  #L18144e.  call temp:= `getNCollectors`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L181454.  v2:= temp;
  #L181456.  v3:= length @variable v0;
  #L181458.  if v2 < v3 then goto L181482;
  #L18145c.  v2:= length @variable v0;
  #L18145e.  v2:= v2 * 2;
  #L181462.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L181468.  v0:= temp @kind object;
  #L18146a.  v1:= "java.util.Arrays.copyOf(this, newSize)" @kind object;
  #L18146e.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L181474.  v1:= v0 @kind object;
  #L181476.  v1:= (`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[]) v1 @kind object;
  #L18147a.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] := v1 @kind object;
  #L18147e.  v0:= (`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[]) v0 @kind object;
  #L181482.  v1:= v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @type ^`int`;
  #L181486.  v2:= v0[v1] @kind object;
  #L18148a.  if v2 != 0 then goto L18149a;
  #L18148e.  call temp:= `createSlot`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L181494.  v2:= temp @kind object;
  #L181496.  v0[v1]:= v2 @kind object;
  #L18149a.  v1:= v1 + 1;
  #L18149e.  v3:= length @variable v0;
  #L1814a0.  if v1 < v3 then goto L1814a6;
  #L1814a4.  v1:= 0I;
  #L1814a6.  call temp:= `allocateLocked`(v2, v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.allocateLocked:(Ljava/lang/Object;)Z` @kind virtual;
  #L1814ac.  v3:= temp;
  #L1814ae.  if v3 == 0 then goto L181486;
  #L1814b2.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @type ^`int` := v1;
  #L1814b6.  call temp:= `getNCollectors`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L1814bc.  v0:= temp;
  #L1814be.  v1:= 1I;
  #L1814c0.  v0:= v0 + v1 @kind int;
  #L1814c2.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int` := v0;
  #L1814c6.  v0:= v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.MutableStateFlow` @kind object;
  #L1814ca.  @monitorexit v4
  #L1814cc.  if v0 != 0 then goto L1814d2;
  #L1814d0.  goto L1814d8;
  #L1814d2.  call `increment`(v0, v1) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.increment:(Lkotlinx/coroutines/flow/MutableStateFlow;I)V` @kind static;
  #L1814d8.  return v2 @kind object;
  #L1814da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1814dc.  @monitorexit v4
  #L1814de.  throw v0;
  catch `java.lang.Throwable` @[L181432..L1814ca] goto L1814da;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `createSlot`() @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `createSlotArray`(`int` v0 ) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `forEachSlotLocked`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v4 @kind this, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.forEachSlotLocked:(Lkotlin/jvm/functions/Function1;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L181544.  call temp:= `access$getNCollectors`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L18154a.  v0:= temp;
  #L18154c.  if v0 != 0 then goto L181552;
  #L181550.  return @kind void;
  #L181552.  call temp:= `access$getSlots`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L181558.  v0:= temp @kind object;
  #L18155a.  if v0 != 0 then goto L181560;
  #L18155e.  goto L18157c;
  #L181560.  v1:= length @variable v0;
  #L181562.  v2:= 0I;
  #L181564.  if v2 >= v1 then goto L18157c;
  #L181568.  v3:= v0[v2] @kind object;
  #L18156c.  if v3 == 0 then goto L181576;
  #L181570.  call temp:= `invoke`(v5, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L181576.  v2:= v2 + 1;
  #L18157a.  goto L181564;
  #L18157c.  return @kind void;
}
procedure `void` `freeSlot`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v7 @kind this, `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` v8 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.freeSlot:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L181590.  @monitorenter v7
  #L181592.  call temp:= `getNCollectors`(v7) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L181598.  v0:= temp;
  #L18159a.  v1:= -1I;
  #L18159c.  v0:= v0 + v1 @kind int;
  #L18159e.  v7.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int` := v0;
  #L1815a2.  v0:= v7.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.MutableStateFlow` @kind object;
  #L1815a6.  call temp:= `getNCollectors`(v7) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L1815ac.  v2:= temp;
  #L1815ae.  v3:= 0I;
  #L1815b0.  if v2 != 0 then goto L1815b8;
  #L1815b4.  v7.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @type ^`int` := v3;
  #L1815b8.  call temp:= `freeLocked`(v8, v7) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.freeLocked:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L1815be.  v8:= temp @kind object;
  #L1815c0.  @monitorexit v7
  #L1815c2.  v2:= length @variable v8;
  #L1815c4.  if v3 >= v2 then goto L1815ee;
  #L1815c8.  v4:= v8[v3] @kind object;
  #L1815cc.  v3:= v3 + 1;
  #L1815d0.  if v4 != 0 then goto L1815d6;
  #L1815d4.  goto L1815c4;
  #L1815d6.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1815da.  v6:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L1815de.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1815e4.  v5:= temp @kind object;
  #L1815e6.  call `resumeWith`(v4, v5) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1815ec.  goto L1815c4;
  #L1815ee.  if v0 != 0 then goto L1815f4;
  #L1815f2.  goto L1815fa;
  #L1815f4.  call `increment`(v0, v1) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.increment:(Lkotlinx/coroutines/flow/MutableStateFlow;I)V` @kind static;
  #L1815fa.  return @kind void;
  #L1815fc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1815fe.  @monitorexit v7
  #L181600.  throw v8;
  catch `java.lang.Throwable` @[L181592..L1815c0] goto L1815fc;
}
procedure `int` `getNCollectors`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1813cc.  v0:= v1.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int`;
  #L1813d0.  return v0;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `getSlots`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L181514.  v0:= v1.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] @kind object;
  #L181518.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.StateFlow` `getSubscriptionCount`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSubscriptionCount:()Lkotlinx/coroutines/flow/StateFlow;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1813e4.  @monitorenter v1
  #L1813e6.  v0:= v1.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.MutableStateFlow` @kind object;
  #L1813ea.  if v0 != 0 then goto L18140a;
  #L1813ee.  call temp:= `getNCollectors`(v1) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L1813f4.  v0:= temp;
  #L1813f6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1813fc.  v0:= temp @kind object;
  #L1813fe.  call temp:= `MutableStateFlow`(v0) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.MutableStateFlow:(Ljava/lang/Object;)Lkotlinx/coroutines/flow/MutableStateFlow;` @kind static;
  #L181404.  v0:= temp @kind object;
  #L181406.  v1.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.MutableStateFlow` := v0 @kind object;
  #L18140a.  @monitorexit v1
  #L18140c.  return v0 @kind object;
  #L18140e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L181410.  @monitorexit v1
  #L181412.  throw v0;
  catch `java.lang.Throwable` @[L1813e6..L18140a] goto L18140e;
}
