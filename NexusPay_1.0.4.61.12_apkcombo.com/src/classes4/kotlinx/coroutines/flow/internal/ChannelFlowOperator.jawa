record `kotlinx.coroutines.flow.internal.ChannelFlowOperator` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18210c.  call `<init>`(v0, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L182112.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L182116.  return @kind void;
}
procedure `java.lang.Object` `access$collectWithContextUndispatched`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind object, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.access$collectWithContextUndispatched:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L181f30.  call temp:= `d`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.d:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L181f36.  v0:= temp @kind object;
  #L181f38.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v4 @kind object, `kotlinx.coroutines.flow.FlowCollector` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.b:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L181f4c.  v0:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L181f50.  v1:= -3I;
  #L181f52.  if v0 != v1 then goto L181fd2;
  #L181f56.  call temp:= `getContext`(v6) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L181f5c.  v0:= temp @kind object;
  #L181f5e.  v1:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L181f62.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L181f68.  v1:= temp @kind object;
  #L181f6a.  call temp:= `areEqual`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L181f70.  v2:= temp;
  #L181f72.  if v2 == 0 then goto L181f92;
  #L181f76.  call temp:= `flowCollect`(v4, v5, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L181f7c.  v4:= temp @kind object;
  #L181f7e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L181f84.  v5:= temp @kind object;
  #L181f86.  if v4 != v5 then goto L181f8c;
  #L181f8a.  return v4 @kind object;
  #L181f8c.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181f90.  return v4 @kind object;
  #L181f92.  v2:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L181f96.  call temp:= `get`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L181f9c.  v2:= temp @kind object;
  #L181f9e.  v3:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L181fa2.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L181fa8.  v0:= temp @kind object;
  #L181faa.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L181fb0.  v0:= temp;
  #L181fb2.  if v0 == 0 then goto L181fd2;
  #L181fb6.  call temp:= `d`(v4, v5, v1, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.d:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L181fbc.  v4:= temp @kind object;
  #L181fbe.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L181fc4.  v5:= temp @kind object;
  #L181fc6.  if v4 != v5 then goto L181fcc;
  #L181fca.  return v4 @kind object;
  #L181fcc.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181fd0.  return v4 @kind object;
  #L181fd2.  call temp:= `collect`(v4, v5, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind super;
  #L181fd8.  v4:= temp @kind object;
  #L181fda.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L181fe0.  v5:= temp @kind object;
  #L181fe2.  if v4 != v5 then goto L181fe8;
  #L181fe6.  return v4 @kind object;
  #L181fe8.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181fec.  return v4 @kind object;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v1 @kind object, `kotlinx.coroutines.channels.ProducerScope` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.c:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L18201c.  v0:= new `kotlinx.coroutines.flow.internal.SendingCollector`;
  #L182020.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/flow/internal/SendingCollector;.<init>:(Lkotlinx/coroutines/channels/SendChannel;)V` @kind direct;
  #L182026.  call temp:= `flowCollect`(v1, v0, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L18202c.  v1:= temp @kind object;
  #L18202e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L182034.  v2:= temp @kind object;
  #L182036.  if v1 != v2 then goto L18203c;
  #L18203a.  return v1 @kind object;
  #L18203c.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L182040.  return v1 @kind object;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v8 @kind this, `kotlinx.coroutines.flow.FlowCollector` v9 @kind object, `kotlin.coroutines.CoroutineContext` v10 @kind object, `kotlin.coroutines.Continuation` v11 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.d:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L182070.  call temp:= `getContext`(v11) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L182076.  v0:= temp @kind object;
  #L182078.  call temp:= `access$withUndispatchedContextCollector`(v9, v0) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.access$withUndispatchedContextCollector:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/flow/FlowCollector;` @kind static;
  #L18207e.  v2:= temp @kind object;
  #L182080.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a`;
  #L182084.  v9:= 0I;
  #L182086.  call `<init>`(v4, v8, v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L18208c.  v3:= 0I;
  #L18208e.  v6:= 4I;
  #L182090.  v7:= 0I;
  #L182092.  v1:= v10 @kind object;
  #L182094.  v5:= v11 @kind object;
  #L182096.  call temp:= `withContextUndispatched$default`(v1, v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.withContextUndispatched$default:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L18209c.  v9:= temp @kind object;
  #L18209e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1820a4.  v10:= temp @kind object;
  #L1820a6.  if v9 != v10 then goto L1820ac;
  #L1820aa.  return v9 @kind object;
  #L1820ac.  v9:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1820b0.  return v9 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L182000.  call temp:= `b`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.b:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L182006.  v1:= temp @kind object;
  #L182008.  return v1 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind this, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L182054.  call temp:= `c`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.c:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L18205a.  v1:= temp @kind object;
  #L18205c.  return v1 @kind object;
}
procedure `java.lang.Object` `flowCollect`(`kotlinx.coroutines.flow.FlowCollector` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1820c4.  v0:= new `java.lang.StringBuilder`;
  #L1820c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1820ce.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1820d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1820d8.  v1:= " -> " @kind object;
  #L1820dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1820e2.  call temp:= `toString`(v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.toString:()Ljava/lang/String;` @kind super;
  #L1820e8.  v1:= temp @kind object;
  #L1820ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1820f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1820f6.  v0:= temp @kind object;
  #L1820f8.  return v0 @kind object;
}
