record `kotlinx.coroutines.flow.internal.b` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.channels.ProducerCoroutine` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.b` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlinx.coroutines.channels.Channel` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/b;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/channels/Channel;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L183dec.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/channels/ProducerCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/channels/Channel;)V` @kind direct;
  #L183df2.  return @kind void;
}
procedure `boolean` `childCancelled`(`kotlinx.coroutines.flow.internal.b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/b;.childCancelled:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L183dc4.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.flow.internal.ChildCancelledException` @kind boolean;
  #L183dc8.  if v0 == 0 then goto L183dd0;
  #L183dcc.  v2:= 1I;
  #L183dce.  return v2;
  #L183dd0.  call temp:= `cancelImpl$kotlinx_coroutines_core`(v1, v2) @signature `Lkotlinx/coroutines/JobSupport;.cancelImpl$kotlinx_coroutines_core:(Ljava/lang/Object;)Z` @kind virtual;
  #L183dd6.  v2:= temp;
  #L183dd8.  return v2;
}
