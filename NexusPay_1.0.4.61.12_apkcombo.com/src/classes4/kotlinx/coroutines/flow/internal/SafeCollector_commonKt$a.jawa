record `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlinx.coroutines.flow.internal.SafeCollector` `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` v0 @kind this, `kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.<init>:(Lkotlinx/coroutines/flow/internal/SafeCollector;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1841cc.  v0.`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a.a` @type ^`kotlinx.coroutines.flow.internal.SafeCollector` := v1 @kind object;
  #L1841d0.  v1:= 2I;
  #L1841d2.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L1841d8.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` v3 @kind this, `int` v4 , `kotlin.coroutines.CoroutineContext$Element` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.a:(ILkotlin/coroutines/CoroutineContext$Element;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1840e8.  call temp:= `getKey`(v5) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L1840ee.  v0:= temp @kind object;
  #L1840f0.  v1:= v3.`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a.a` @type ^`kotlinx.coroutines.flow.internal.SafeCollector` @kind object;
  #L1840f4.  v1:= v1.`kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L1840f8.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L1840fe.  v1:= temp @kind object;
  #L184100.  v2:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L184104.  if v0 == v2 then goto L184118;
  #L184108.  if v5 == v1 then goto L184112;
  #L18410c.  v4:= -2147483648I;
  #L184110.  goto L184116;
  #L184112.  v4:= v4 + 1;
  #L184116.  return v4;
  #L184118.  v1:= (`kotlinx.coroutines.Job`) v1 @kind object;
  #L18411c.  v5:= (`kotlinx.coroutines.Job`) v5 @kind object;
  #L184120.  call temp:= `transitiveCoroutineParent`(v5, v1) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.transitiveCoroutineParent:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/Job;` @kind static;
  #L184126.  v5:= temp @kind object;
  #L184128.  if v5 != v1 then goto L184138;
  #L18412c.  if v1 != 0 then goto L184132;
  #L184130.  goto L184136;
  #L184132.  v4:= v4 + 1;
  #L184136.  return v4;
  #L184138.  v4:= new `java.lang.StringBuilder`;
  #L18413c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L184142.  v0:= "Flow invariant is violated:\n\t\tEmission from another coroutine is detected.\n\t\tChild of " @kind object;
  #L184146.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18414c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L184152.  v5:= ", expected child of " @kind object;
  #L184156.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18415c.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L184162.  v5:= ".\n\t\tFlowCollector is not thread-safe and concurrent emissions are prohibited.\n\t\tTo mitigate this restriction please use 'channelFlow' builder instead of 'flow'" @kind object;
  #L184166.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18416c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L184172.  v4:= temp @kind object;
  #L184174.  v5:= new `java.lang.IllegalStateException`;
  #L184178.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18417e.  v4:= temp @kind object;
  #L184180.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L184186.  throw v5;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L184198.  v1:= (`java.lang.Number`) v1 @kind object;
  #L18419c.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1841a2.  v1:= temp;
  #L1841a4.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L1841a8.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.a:(ILkotlin/coroutines/CoroutineContext$Element;)I` @kind virtual;
  #L1841ae.  v1:= temp;
  #L1841b0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1841b6.  v1:= temp @kind object;
  #L1841b8.  return v1 @kind object;
}
