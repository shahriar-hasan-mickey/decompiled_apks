record `kotlinx.coroutines.flow.internal.SafeCollector_commonKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `checkContext`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.checkContext:(Lkotlinx/coroutines/flow/internal/SafeCollector;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L184318.  v0:= 0I;
  #L18431a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L184320.  v0:= temp @kind object;
  #L184322.  v1:= new `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a`;
  #L184326.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.<init>:(Lkotlinx/coroutines/flow/internal/SafeCollector;)V` @kind direct;
  #L18432c.  call temp:= `fold`(v3, v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L184332.  v0:= temp @kind object;
  #L184334.  v0:= (`java.lang.Number`) v0 @kind object;
  #L184338.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L18433e.  v0:= temp;
  #L184340.  v1:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @type ^`int`;
  #L184344.  if v0 != v1 then goto L18434a;
  #L184348.  return @kind void;
  #L18434a.  v0:= new `java.lang.StringBuilder`;
  #L18434e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L184354.  v1:= "Flow invariant is violated:\n\t\tFlow was collected in " @kind object;
  #L184358.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18435e.  v2:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L184362.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L184368.  v2:= ",\n\t\tbut emission happened in " @kind object;
  #L18436c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L184372.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L184378.  v2:= ".\n\t\tPlease refer to 'flow' documentation or use 'flowOn' instead" @kind object;
  #L18437c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L184382.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L184388.  v2:= temp @kind object;
  #L18438a.  v3:= new `java.lang.IllegalStateException`;
  #L18438e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L184394.  v2:= temp @kind object;
  #L184396.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18439c.  throw v3;
}
procedure `kotlinx.coroutines.Job` `transitiveCoroutineParent`(`kotlinx.coroutines.Job` v1 @kind object, `kotlinx.coroutines.Job` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.transitiveCoroutineParent:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/Job;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1842c4.  if v1 != 0 then goto L1842cc;
  #L1842c8.  v1:= 0I;
  #L1842ca.  return v1 @kind object;
  #L1842cc.  if v1 != v2 then goto L1842d2;
  #L1842d0.  return v1 @kind object;
  #L1842d2.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.ScopeCoroutine` @kind boolean;
  #L1842d6.  if v0 != 0 then goto L1842dc;
  #L1842da.  return v1 @kind object;
  #L1842dc.  v1:= (`kotlinx.coroutines.internal.ScopeCoroutine`) v1 @kind object;
  #L1842e0.  call temp:= `getParent$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/internal/ScopeCoroutine;.getParent$kotlinx_coroutines_core:()Lkotlinx/coroutines/Job;` @kind virtual;
  #L1842e6.  v1:= temp @kind object;
  #L1842e8.  goto L1842c4;
}
procedure `kotlinx.coroutines.flow.Flow` `unsafeFlow`(`kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.unsafeFlow:(Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1842fc.  v0:= new `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1`;
  #L184300.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$unsafeFlow$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L184306.  return v0 @kind object;
}
