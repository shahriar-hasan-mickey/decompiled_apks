record `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlinx.coroutines.Job` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.sync.Semaphore` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.channels.ProducerScope` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.SendingCollector` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1` v0 @kind this, `kotlinx.coroutines.Job` v1 @kind object, `kotlinx.coroutines.sync.Semaphore` v2 @kind object, `kotlinx.coroutines.channels.ProducerScope` v3 @kind object, `kotlinx.coroutines.flow.internal.SendingCollector` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$$inlined$collect$1;.<init>:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/sync/Semaphore;Lkotlinx/coroutines/channels/ProducerScope;Lkotlinx/coroutines/flow/internal/SendingCollector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L181abc.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.a` @type ^`kotlinx.coroutines.Job` := v1 @kind object;
  #L181ac0.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.b` @type ^`kotlinx.coroutines.sync.Semaphore` := v2 @kind object;
  #L181ac4.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.c` @type ^`kotlinx.coroutines.channels.ProducerScope` := v3 @kind object;
  #L181ac8.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.d` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` := v4 @kind object;
  #L181acc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L181ad2.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1` v7 @kind this, `java.lang.Object` v8 @kind object, `kotlin.coroutines.Continuation` v9 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$$inlined$collect$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1819d4.  v0:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1` @kind boolean;
  #L1819d8.  if v0 == 0 then goto L1819fa;
  #L1819dc.  v0:= v9 @kind object;
  #L1819de.  v0:= (`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1`) v0 @kind object;
  #L1819e2.  v1:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.b` @type ^`int`;
  #L1819e6.  v2:= -2147483648I;
  #L1819ea.  v3:= v1 ^& v2 @kind int;
  #L1819ee.  if v3 == 0 then goto L1819fa;
  #L1819f2.  v1:= v1 - v2 @kind int;
  #L1819f4.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.b` @type ^`int` := v1;
  #L1819f8.  goto L181a04;
  #L1819fa.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1`;
  #L1819fe.  call `<init>`(v0, v7, v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$$inlined$collect$1$1;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$$inlined$collect$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L181a04.  v9:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.a` @type ^`java.lang.Object` @kind object;
  #L181a08.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L181a0e.  v1:= temp @kind object;
  #L181a10.  v2:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.b` @type ^`int`;
  #L181a14.  v3:= 1I;
  #L181a16.  if v2 == 0 then goto L181a46;
  #L181a1a.  if v2 != v3 then goto L181a36;
  #L181a1e.  v8:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.e` @type ^`java.lang.Object` @kind object;
  #L181a22.  v8:= (`kotlinx.coroutines.flow.Flow`) v8 @kind object;
  #L181a26.  v0:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.d` @type ^`java.lang.Object` @kind object;
  #L181a2a.  v0:= (`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1`) v0 @kind object;
  #L181a2e.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L181a34.  goto L181a80;
  #L181a36.  v8:= new `java.lang.IllegalStateException`;
  #L181a3a.  v9:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L181a3e.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L181a44.  throw v8;
  #L181a46.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L181a4c.  v8:= (`kotlinx.coroutines.flow.Flow`) v8 @kind object;
  #L181a50.  v9:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.a` @type ^`kotlinx.coroutines.Job` @kind object;
  #L181a54.  if v9 != 0 then goto L181a5a;
  #L181a58.  goto L181a60;
  #L181a5a.  call `ensureActive`(v9) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlinx/coroutines/Job;)V` @kind static;
  #L181a60.  v9:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.b` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L181a64.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L181a68.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.e` @type ^`java.lang.Object` := v8 @kind object;
  #L181a6c.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1.b` @type ^`int` := v3;
  #L181a70.  call temp:= `acquire`(v9, v0) @signature `Lkotlinx/coroutines/sync/Semaphore;.acquire:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L181a76.  v9:= temp @kind object;
  #L181a78.  if v9 != v1 then goto L181a7e;
  #L181a7c.  return v1 @kind object;
  #L181a7e.  v0:= v7 @kind object;
  #L181a80.  v1:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.c` @type ^`kotlinx.coroutines.channels.ProducerScope` @kind object;
  #L181a84.  v2:= 0I;
  #L181a86.  v3:= 0I;
  #L181a88.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a`;
  #L181a8c.  v9:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.d` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L181a90.  v0:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1.b` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L181a94.  v5:= 0I;
  #L181a96.  call `<init>`(v4, v8, v9, v0, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlinx/coroutines/sync/Semaphore;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L181a9c.  v5:= 3I;
  #L181a9e.  v6:= 0I;
  #L181aa0.  call temp:= `launch$default`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/BuildersKt;.launch$default:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/Job;` @kind static;
  #L181aa6.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181aaa.  return v8 @kind object;
}
