record `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `java.lang.Iterable` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge` v0 @kind this, `java.lang.Iterable` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge;.<init>:(Ljava/lang/Iterable;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L182adc.  call `<init>`(v0, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L182ae2.  v0.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.a` @type ^`java.lang.Iterable` := v1 @kind object;
  #L182ae6.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge` v0 @kind this, `java.lang.Iterable` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object, `int` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v6 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge;.<init>:(Ljava/lang/Iterable;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L182af8.  v6:= v5 ^& 2;
  #L182afc.  if v6 == 0 then goto L182b04;
  #L182b00.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L182b04.  v6:= v5 ^& 4;
  #L182b08.  if v6 == 0 then goto L182b0e;
  #L182b0c.  v3:= -2I;
  #L182b0e.  v5:= v5 ^& 8;
  #L182b12.  if v5 == 0 then goto L182b1a;
  #L182b16.  v4:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L182b1a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge;.<init>:(Ljava/lang/Iterable;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L182b20.  return @kind void;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge` v8 @kind this, `kotlinx.coroutines.channels.ProducerScope` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L182a2c.  v10:= new `kotlinx.coroutines.flow.internal.SendingCollector`;
  #L182a30.  call `<init>`(v10, v9) @signature `Lkotlinx/coroutines/flow/internal/SendingCollector;.<init>:(Lkotlinx/coroutines/channels/SendChannel;)V` @kind direct;
  #L182a36.  v0:= v8.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.a` @type ^`java.lang.Iterable` @kind object;
  #L182a3a.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L182a40.  v0:= temp @kind object;
  #L182a42.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L182a48.  v1:= temp;
  #L182a4a.  if v1 == 0 then goto L182a78;
  #L182a4e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L182a54.  v1:= temp @kind object;
  #L182a56.  v1:= (`kotlinx.coroutines.flow.Flow`) v1 @kind object;
  #L182a5a.  v3:= 0I;
  #L182a5c.  v4:= 0I;
  #L182a5e.  v5:= new `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a`;
  #L182a62.  v2:= 0I;
  #L182a64.  call `<init>`(v5, v1, v10, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L182a6a.  v6:= 3I;
  #L182a6c.  v7:= 0I;
  #L182a6e.  v2:= v9 @kind object;
  #L182a70.  call temp:= `launch$default`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/BuildersKt;.launch$default:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/Job;` @kind static;
  #L182a76.  goto L182a42;
  #L182a78.  v9:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L182a7c.  return v9 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L182abc.  v0:= new `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge`;
  #L182ac0.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.a` @type ^`java.lang.Iterable` @kind object;
  #L182ac4.  call `<init>`(v0, v1, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge;.<init>:(Ljava/lang/Iterable;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L182aca.  return v0 @kind object;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `produceImpl`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge` v3 @kind this, `kotlinx.coroutines.CoroutineScope` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L182a90.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L182a94.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L182a98.  call temp:= `getCollectToFun$kotlinx_coroutines_core`(v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getCollectToFun$kotlinx_coroutines_core:()Lkotlin/jvm/functions/Function2;` @kind virtual;
  #L182a9e.  v2:= temp @kind object;
  #L182aa0.  call temp:= `flowProduce`(v4, v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.flowProduce:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind static;
  #L182aa6.  v4:= temp @kind object;
  #L182aa8.  return v4 @kind object;
}
