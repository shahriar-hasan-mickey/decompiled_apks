record `kotlinx.coroutines.flow.internal.a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.ScopeCoroutine` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.a` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L183d64.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/ScopeCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L183d6a.  return @kind void;
}
procedure `boolean` `childCancelled`(`kotlinx.coroutines.flow.internal.a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/a;.childCancelled:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L183d3c.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.flow.internal.ChildCancelledException` @kind boolean;
  #L183d40.  if v0 == 0 then goto L183d48;
  #L183d44.  v2:= 1I;
  #L183d46.  return v2;
  #L183d48.  call temp:= `cancelImpl$kotlinx_coroutines_core`(v1, v2) @signature `Lkotlinx/coroutines/JobSupport;.cancelImpl$kotlinx_coroutines_core:(Ljava/lang/Object;)Z` @kind virtual;
  #L183d4e.  v2:= temp;
  #L183d50.  return v2;
}
