record `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$unsafeFlow$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1842a8.  v0.`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L1842ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1842b2.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L184278.  v0:= v1.`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L18427c.  call temp:= `invoke`(v0, v2, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L184282.  v2:= temp @kind object;
  #L184284.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L18428a.  v3:= temp @kind object;
  #L18428c.  if v2 != v3 then goto L184292;
  #L184290.  return v2 @kind object;
  #L184292.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L184296.  return v2 @kind object;
}
procedure `java.lang.Object` `collect$$forInline`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$unsafeFlow$1;.collect$$forInline:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18423c.  v0:= 4I;
  #L18423e.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L184244.  v0:= new `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1$collect$1`;
  #L184248.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$unsafeFlow$1$collect$1;.<init>:(Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L18424e.  v0:= 5I;
  #L184250.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L184256.  v0:= v1.`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L18425a.  call temp:= `invoke`(v0, v2, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L184260.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L184264.  return v2 @kind object;
}
