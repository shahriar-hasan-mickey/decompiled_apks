record `kotlinx.coroutines.flow.internal.ChannelFlowMerge` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 , `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L181d0c.  call `<init>`(v0, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L181d12.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L181d16.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int` := v2;
  #L181d1a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v6 @kind this, `kotlinx.coroutines.flow.Flow` v7 @kind object, `int` v8 , `kotlin.coroutines.CoroutineContext` v9 @kind object, `int` v10 , `kotlinx.coroutines.channels.BufferOverflow` v11 @kind object, `int` v12 , `kotlin.jvm.internal.DefaultConstructorMarker` v13 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L181d2c.  v13:= v12 ^& 4;
  #L181d30.  if v13 == 0 then goto L181d38;
  #L181d34.  v9:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L181d38.  v3:= v9 @kind object;
  #L181d3a.  v9:= v12 ^& 8;
  #L181d3e.  if v9 == 0 then goto L181d48;
  #L181d42.  v10:= -2I;
  #L181d44.  v4:= -2I;
  #L181d46.  goto L181d4a;
  #L181d48.  v4:= v10;
  #L181d4a.  v9:= v12 ^& 16;
  #L181d4e.  if v9 == 0 then goto L181d56;
  #L181d52.  v11:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L181d56.  v5:= v11 @kind object;
  #L181d58.  v0:= v6 @kind object;
  #L181d5a.  v1:= v7 @kind object;
  #L181d5c.  v2:= v8;
  #L181d5e.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L181d64.  return @kind void;
}
procedure `java.lang.String` `additionalToStringProps`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.additionalToStringProps:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L181c88.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int`;
  #L181c8c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L181c92.  v0:= temp @kind object;
  #L181c94.  v1:= "concurrency=" @kind object;
  #L181c98.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L181c9e.  v0:= temp @kind object;
  #L181ca0.  return v0 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v5 @kind this, `kotlinx.coroutines.channels.ProducerScope` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L181c18.  v0:= v5.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int`;
  #L181c1c.  v1:= 0I;
  #L181c1e.  v2:= 2I;
  #L181c20.  v3:= 0I;
  #L181c22.  call temp:= `Semaphore$default`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore$default:(IIILjava/lang/Object;)Lkotlinx/coroutines/sync/Semaphore;` @kind static;
  #L181c28.  v0:= temp @kind object;
  #L181c2a.  v1:= new `kotlinx.coroutines.flow.internal.SendingCollector`;
  #L181c2e.  call `<init>`(v1, v6) @signature `Lkotlinx/coroutines/flow/internal/SendingCollector;.<init>:(Lkotlinx/coroutines/channels/SendChannel;)V` @kind direct;
  #L181c34.  call temp:= `getContext`(v7) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L181c3a.  v2:= temp @kind object;
  #L181c3c.  v3:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L181c40.  call temp:= `get`(v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L181c46.  v2:= temp @kind object;
  #L181c48.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L181c4c.  v3:= v5.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L181c50.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1`;
  #L181c54.  call `<init>`(v4, v2, v0, v6, v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$$inlined$collect$1;.<init>:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/sync/Semaphore;Lkotlinx/coroutines/channels/ProducerScope;Lkotlinx/coroutines/flow/internal/SendingCollector;)V` @kind direct;
  #L181c5a.  call temp:= `collect`(v3, v4, v7) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L181c60.  v6:= temp @kind object;
  #L181c62.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L181c68.  v7:= temp @kind object;
  #L181c6a.  if v6 != v7 then goto L181c70;
  #L181c6e.  return v6 @kind object;
  #L181c70.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181c74.  return v6 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v7 @kind this, `kotlin.coroutines.CoroutineContext` v8 @kind object, `int` v9 , `kotlinx.coroutines.channels.BufferOverflow` v10 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L181ce0.  v6:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge`;
  #L181ce4.  v1:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L181ce8.  v2:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int`;
  #L181cec.  v0:= v6 @kind object;
  #L181cee.  v3:= v8 @kind object;
  #L181cf0.  v4:= v9;
  #L181cf2.  v5:= v10 @kind object;
  #L181cf4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L181cfa.  return v6 @kind object;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `produceImpl`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v3 @kind this, `kotlinx.coroutines.CoroutineScope` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L181cb4.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L181cb8.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L181cbc.  call temp:= `getCollectToFun$kotlinx_coroutines_core`(v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getCollectToFun$kotlinx_coroutines_core:()Lkotlin/jvm/functions/Function2;` @kind virtual;
  #L181cc2.  v2:= temp @kind object;
  #L181cc4.  call temp:= `flowProduce`(v4, v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.flowProduce:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind static;
  #L181cca.  v4:= temp @kind object;
  #L181ccc.  return v4 @kind object;
}
