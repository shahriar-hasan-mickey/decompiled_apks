record `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.a` @AccessFlag ;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.SendingCollector` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.sync.Semaphore` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlinx.coroutines.flow.internal.SendingCollector` v2 @kind object, `kotlinx.coroutines.sync.Semaphore` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlinx/coroutines/sync/Semaphore;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L181bf0.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L181bf4.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` := v2 @kind object;
  #L181bf8.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` := v3 @kind object;
  #L181bfc.  v1:= 2I;
  #L181bfe.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L181c04.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L181bc8.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a`;
  #L181bcc.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L181bd0.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L181bd4.  v2:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L181bd8.  call `<init>`(v4, v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlinx/coroutines/sync/Semaphore;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L181bde.  return v4 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L181ae4.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L181ae8.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L181aec.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L181af2.  v1:= temp @kind object;
  #L181af4.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L181b08.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L181b0e.  v1:= temp @kind object;
  #L181b10.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a`) v1 @kind object;
  #L181b14.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181b18.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L181b1e.  v1:= temp @kind object;
  #L181b20.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L181b34.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L181b3a.  v0:= temp @kind object;
  #L181b3c.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.a` @type ^`int`;
  #L181b40.  v2:= 1I;
  #L181b42.  if v1 == 0 then goto L181b66;
  #L181b46.  if v1 != v2 then goto L181b56;
  #L181b4a.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L181b50.  goto L181b86;
  #L181b52.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L181b54.  goto L181b96;
  #L181b56.  v4:= new `java.lang.IllegalStateException`;
  #L181b5a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L181b5e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L181b64.  throw v4;
  #L181b66.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L181b6c.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L181b70.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L181b74.  v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.a` @type ^`int` := v2;
  #L181b78.  call temp:= `collect`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L181b7e.  v4:= temp @kind object;
  #L181b80.  if v4 != v0 then goto L181b86;
  #L181b84.  return v0 @kind object;
  #L181b86.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L181b8a.  call `release`(v4) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L181b90.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181b94.  return v4 @kind object;
  #L181b96.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L181b9a.  call `release`(v0) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L181ba0.  throw v4;
  catch `java.lang.Throwable` @[L181b4a..L181b50] goto L181b52;
  catch `java.lang.Throwable` @[L181b6c..L181b80] goto L181b52;
}
