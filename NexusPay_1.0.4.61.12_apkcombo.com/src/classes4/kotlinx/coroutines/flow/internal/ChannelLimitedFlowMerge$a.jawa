record `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.a` @AccessFlag ;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.SendingCollector` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlinx.coroutines.flow.internal.SendingCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L182a08.  v0.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L182a0c.  v0.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` := v2 @kind object;
  #L182a10.  v1:= 2I;
  #L182a12.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L182a18.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1829e4.  v3:= new `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a`;
  #L1829e8.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1829ec.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L1829f0.  call `<init>`(v3, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1829f6.  return v3 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L182930.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L182934.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L182938.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L18293e.  v1:= temp @kind object;
  #L182940.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L182954.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L18295a.  v1:= temp @kind object;
  #L18295c.  v1:= (`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a`) v1 @kind object;
  #L182960.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L182964.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18296a.  v1:= temp @kind object;
  #L18296c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L182980.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L182986.  v0:= temp @kind object;
  #L182988.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.a` @type ^`int`;
  #L18298c.  v2:= 1I;
  #L18298e.  if v1 == 0 then goto L1829ae;
  #L182992.  if v1 != v2 then goto L18299e;
  #L182996.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L18299c.  goto L1829ce;
  #L18299e.  v4:= new `java.lang.IllegalStateException`;
  #L1829a2.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1829a6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1829ac.  throw v4;
  #L1829ae.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1829b4.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1829b8.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L1829bc.  v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.a` @type ^`int` := v2;
  #L1829c0.  call temp:= `collect`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1829c6.  v4:= temp @kind object;
  #L1829c8.  if v4 != v0 then goto L1829ce;
  #L1829cc.  return v0 @kind object;
  #L1829ce.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1829d2.  return v4 @kind object;
}
