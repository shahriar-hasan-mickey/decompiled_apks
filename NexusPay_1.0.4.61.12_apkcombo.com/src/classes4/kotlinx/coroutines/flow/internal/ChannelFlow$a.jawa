record `kotlinx.coroutines.flow.internal.ChannelFlow$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlow$a.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.internal.ChannelFlow$a.b` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.ChannelFlow` `kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L181720.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L181724.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` := v2 @kind object;
  #L181728.  v1:= 2I;
  #L18172a.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L181730.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1816f8.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlow$a`;
  #L1816fc.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L181700.  v2:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` @kind object;
  #L181704.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L18170a.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow$a.b` @type ^`java.lang.Object` := v4 @kind object;
  #L18170e.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L181634.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L181638.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L18163c.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L181642.  v1:= temp @kind object;
  #L181644.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L181658.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L18165e.  v1:= temp @kind object;
  #L181660.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlow$a`) v1 @kind object;
  #L181664.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181668.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18166e.  v1:= temp @kind object;
  #L181670.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L181684.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L18168a.  v0:= temp @kind object;
  #L18168c.  v1:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.a` @type ^`int`;
  #L181690.  v2:= 1I;
  #L181692.  if v1 == 0 then goto L1816b2;
  #L181696.  if v1 != v2 then goto L1816a2;
  #L18169a.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1816a0.  goto L1816e2;
  #L1816a2.  v5:= new `java.lang.IllegalStateException`;
  #L1816a6.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1816aa.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1816b0.  throw v5;
  #L1816b2.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1816b8.  v5:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.b` @type ^`java.lang.Object` @kind object;
  #L1816bc.  v5:= (`kotlinx.coroutines.CoroutineScope`) v5 @kind object;
  #L1816c0.  v1:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L1816c4.  v3:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` @kind object;
  #L1816c8.  call temp:= `produceImpl`(v3, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind virtual;
  #L1816ce.  v5:= temp @kind object;
  #L1816d0.  v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.a` @type ^`int` := v2;
  #L1816d4.  call temp:= `emitAll`(v1, v5, v4) @signature `Lkotlinx/coroutines/flow/FlowKt;.emitAll:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L1816da.  v5:= temp @kind object;
  #L1816dc.  if v5 != v0 then goto L1816e2;
  #L1816e0.  return v0 @kind object;
  #L1816e2.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1816e6.  return v5 @kind object;
}
