record `kotlinx.coroutines.flow.internal.FlowExceptions_commonKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `checkIndexOverflow`(`int` v1 ) @signature `Lkotlinx/coroutines/flow/internal/FlowExceptions_commonKt;.checkIndexOverflow:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L183d7c.  if v1 < 0 then goto L183d82;
  #L183d80.  return v1;
  #L183d82.  v1:= new `java.lang.ArithmeticException`;
  #L183d86.  v0:= "Index overflow has happened" @kind object;
  #L183d8a.  call `<init>`(v1, v0) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L183d90.  throw v1;
}
procedure `void` `checkOwnership`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind object, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/FlowExceptions_commonKt;.checkOwnership:(Lkotlinx/coroutines/flow/internal/AbortFlowException;Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L183da4.  call temp:= `getOwner`(v1) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.getOwner:()Lkotlinx/coroutines/flow/FlowCollector;` @kind virtual;
  #L183daa.  v0:= temp @kind object;
  #L183dac.  if v0 != v2 then goto L183db2;
  #L183db0.  return @kind void;
  #L183db2.  throw v1;
}
