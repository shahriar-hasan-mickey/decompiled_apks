record `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @AccessFlag PUBLIC_FINAL;
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.ChannelFlow.context` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.channels.BufferOverflow` `kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlow` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1828dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1828e2.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` := v1 @kind object;
  #L1828e6.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int` := v2;
  #L1828ea.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` := v3 @kind object;
  #L1828ee.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1828f4.  v1:= temp;
  #L1828f6.  if v1 == 0 then goto L18291c;
  #L1828fa.  v1:= v0.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L1828fe.  v2:= -1I;
  #L182900.  if v1 == v2 then goto L182908;
  #L182904.  v1:= 1I;
  #L182906.  goto L18290a;
  #L182908.  v1:= 0I;
  #L18290a.  if v1 == 0 then goto L182910;
  #L18290e.  goto L18291c;
  #L182910.  v1:= new `java.lang.AssertionError`;
  #L182914.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18291a.  throw v1;
  #L18291c.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind object, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.a:(Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L18260c.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlow$a`;
  #L182610.  v1:= 0I;
  #L182612.  call `<init>`(v0, v3, v2, v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L182618.  call temp:= `coroutineScope`(v0, v4) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.coroutineScope:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L18261e.  v2:= temp @kind object;
  #L182620.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L182626.  v3:= temp @kind object;
  #L182628.  if v2 != v3 then goto L18262e;
  #L18262c.  return v2 @kind object;
  #L18262e.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L182632.  return v2 @kind object;
}
procedure `java.lang.String` `additionalToStringProps`(`kotlinx.coroutines.flow.internal.ChannelFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.additionalToStringProps:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L182660.  v0:= 0I;
  #L182662.  return v0 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.internal.ChannelFlow` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L182644.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.a:(Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L18264a.  v1:= temp @kind object;
  #L18264c.  return v1 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.channels.ProducerScope` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlin.coroutines.CoroutineContext` v0 @kind object, `int` v1 , `kotlinx.coroutines.channels.BufferOverflow` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.flow.Flow` `dropChannelOperators`(`kotlinx.coroutines.flow.internal.ChannelFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.dropChannelOperators:()Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1827bc.  v0:= 0I;
  #L1827be.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.internal.ChannelFlow` v3 @kind this, `kotlin.coroutines.CoroutineContext` v4 @kind object, `int` v5 , `kotlinx.coroutines.channels.BufferOverflow` v6 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1827d0.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1827d6.  v0:= temp;
  #L1827d8.  v1:= 1I;
  #L1827da.  v2:= 0I;
  #L1827dc.  if v0 == 0 then goto L1827fe;
  #L1827e0.  v0:= -1I;
  #L1827e2.  if v5 == v0 then goto L1827ea;
  #L1827e6.  v0:= 1I;
  #L1827e8.  goto L1827ec;
  #L1827ea.  v0:= 0I;
  #L1827ec.  if v0 == 0 then goto L1827f2;
  #L1827f0.  goto L1827fe;
  #L1827f2.  v4:= new `java.lang.AssertionError`;
  #L1827f6.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1827fc.  throw v4;
  #L1827fe.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L182802.  call temp:= `plus`(v4, v0) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L182808.  v4:= temp @kind object;
  #L18280a.  v0:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L18280e.  if v6 == v0 then goto L182814;
  #L182812.  goto L18289e;
  #L182814.  v6:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L182818.  v0:= -3I;
  #L18281a.  if v6 != v0 then goto L182820;
  #L18281e.  goto L18289a;
  #L182820.  if v5 != v0 then goto L182828;
  #L182824.  v5:= v6;
  #L182826.  goto L18289a;
  #L182828.  v0:= -2I;
  #L18282a.  if v6 != v0 then goto L182830;
  #L18282e.  goto L18289a;
  #L182830.  if v5 != v0 then goto L182836;
  #L182834.  goto L182824;
  #L182836.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18283c.  v6:= temp;
  #L18283e.  if v6 == 0 then goto L182862;
  #L182842.  v6:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L182846.  if v6 < 0 then goto L18284e;
  #L18284a.  v6:= 1I;
  #L18284c.  goto L182850;
  #L18284e.  v6:= 0I;
  #L182850.  if v6 == 0 then goto L182856;
  #L182854.  goto L182862;
  #L182856.  v4:= new `java.lang.AssertionError`;
  #L18285a.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L182860.  throw v4;
  #L182862.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L182868.  v6:= temp;
  #L18286a.  if v6 == 0 then goto L182888;
  #L18286e.  if v5 < 0 then goto L182874;
  #L182872.  goto L182876;
  #L182874.  v1:= 0I;
  #L182876.  if v1 == 0 then goto L18287c;
  #L18287a.  goto L182888;
  #L18287c.  v4:= new `java.lang.AssertionError`;
  #L182880.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L182886.  throw v4;
  #L182888.  v6:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L18288c.  v6:= v6 + v5 @kind int;
  #L18288e.  if v6 < 0 then goto L182894;
  #L182892.  goto L182824;
  #L182894.  v5:= 2147483647I;
  #L18289a.  v6:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L18289e.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L1828a2.  call temp:= `areEqual`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1828a8.  v0:= temp;
  #L1828aa.  if v0 == 0 then goto L1828c0;
  #L1828ae.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L1828b2.  if v5 != v0 then goto L1828c0;
  #L1828b6.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L1828ba.  if v6 != v0 then goto L1828c0;
  #L1828be.  return v3 @kind object;
  #L1828c0.  call temp:= `create`(v3, v4, v5, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @kind virtual;
  #L1828c6.  v4:= temp @kind object;
  #L1828c8.  return v4 @kind object;
}
procedure `kotlin.jvm.functions.Function2` `getCollectToFun$kotlinx_coroutines_core`(`kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getCollectToFun$kotlinx_coroutines_core:()Lkotlin/jvm/functions/Function2;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18275c.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlow$b`;
  #L182760.  v1:= 0I;
  #L182762.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$b;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L182768.  return v0 @kind object;
}
procedure `int` `getProduceCapacity$kotlinx_coroutines_core`(`kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getProduceCapacity$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1825ec.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L1825f0.  v1:= -3I;
  #L1825f2.  if v0 != v1 then goto L1825f8;
  #L1825f6.  v0:= -2I;
  #L1825f8.  return v0;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `produceImpl`(`kotlinx.coroutines.flow.internal.ChannelFlow` v9 @kind this, `kotlinx.coroutines.CoroutineScope` v10 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L18277c.  v1:= v9.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L182780.  call temp:= `getProduceCapacity$kotlinx_coroutines_core`(v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getProduceCapacity$kotlinx_coroutines_core:()I` @kind virtual;
  #L182786.  v2:= temp;
  #L182788.  v3:= v9.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L18278c.  v4:= `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L182790.  call temp:= `getCollectToFun$kotlinx_coroutines_core`(v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getCollectToFun$kotlinx_coroutines_core:()Lkotlin/jvm/functions/Function2;` @kind virtual;
  #L182796.  v6:= temp @kind object;
  #L182798.  v5:= 0I;
  #L18279a.  v7:= 16I;
  #L18279e.  v8:= 0I;
  #L1827a0.  v0:= v10 @kind object;
  #L1827a2.  call temp:= `produce$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlinx/coroutines/channels/ProduceKt;.produce$default:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind static;
  #L1827a8.  v10:= temp @kind object;
  #L1827aa.  return v10 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.flow.internal.ChannelFlow` v10 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L182674.  v0:= new `java.util.ArrayList`;
  #L182678.  v1:= 4I;
  #L18267a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L182680.  call temp:= `additionalToStringProps`(v10) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.additionalToStringProps:()Ljava/lang/String;` @kind virtual;
  #L182686.  v1:= temp @kind object;
  #L182688.  if v1 != 0 then goto L18268e;
  #L18268c.  goto L182694;
  #L18268e.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L182694.  v1:= v10.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L182698.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L18269c.  if v1 == v2 then goto L1826b2;
  #L1826a0.  v2:= "context=" @kind object;
  #L1826a4.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1826aa.  v1:= temp @kind object;
  #L1826ac.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1826b2.  v1:= v10.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L1826b6.  v2:= -3I;
  #L1826b8.  if v1 == v2 then goto L1826d6;
  #L1826bc.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1826c2.  v1:= temp @kind object;
  #L1826c4.  v2:= "capacity=" @kind object;
  #L1826c8.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1826ce.  v1:= temp @kind object;
  #L1826d0.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1826d6.  v1:= v10.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L1826da.  v2:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L1826de.  if v1 == v2 then goto L1826f4;
  #L1826e2.  v2:= "onBufferOverflow=" @kind object;
  #L1826e6.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1826ec.  v1:= temp @kind object;
  #L1826ee.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1826f4.  v9:= new `java.lang.StringBuilder`;
  #L1826f8.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1826fe.  call temp:= `getClassSimpleName`(v10) @signature `Lkotlinx/coroutines/DebugStringsKt;.getClassSimpleName:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L182704.  v1:= temp @kind object;
  #L182706.  call temp:= `append`(v9, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18270c.  v1:= 91I;
  #L182710.  call temp:= `append`(v9, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L182716.  v2:= 0I;
  #L182718.  v3:= 0I;
  #L18271a.  v4:= 0I;
  #L18271c.  v5:= 0I;
  #L18271e.  v6:= 0I;
  #L182720.  v7:= 62I;
  #L182724.  v8:= 0I;
  #L182726.  v1:= ", " @kind object;
  #L18272a.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L182730.  v0:= temp @kind object;
  #L182732.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L182738.  v0:= 93I;
  #L18273c.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L182742.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L182748.  v0:= temp @kind object;
  #L18274a.  return v0 @kind object;
}
