record `kotlinx.coroutines.flow.internal.SafeCollector` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.jvm.internal.ContinuationImpl` @kind class, `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface {
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.SafeCollector.a` @AccessFlag PRIVATE;
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.flow.internal.SafeCollector.b` @AccessFlag PRIVATE;
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.internal.SafeCollector.collector` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L184504.  v0:= `@@kotlinx.coroutines.flow.internal.c.a` @type ^`kotlinx.coroutines.flow.internal.c` @kind object;
  #L184508.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L18450c.  call `<init>`(v2, v0, v1) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L184512.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collector` @type ^`kotlinx.coroutines.flow.FlowCollector` := v3 @kind object;
  #L184516.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @type ^`kotlin.coroutines.CoroutineContext` := v4 @kind object;
  #L18451a.  v3:= 0I;
  #L18451c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L184522.  v3:= temp @kind object;
  #L184524.  v0:= `@@kotlinx.coroutines.flow.internal.SafeCollector$a.a` @type ^`kotlinx.coroutines.flow.internal.SafeCollector$a` @kind object;
  #L184528.  call temp:= `fold`(v4, v3, v0) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L18452e.  v3:= temp @kind object;
  #L184530.  v3:= (`java.lang.Number`) v3 @kind object;
  #L184534.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L18453a.  v3:= temp;
  #L18453c.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @type ^`int` := v3;
  #L184540.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L184554.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.flow.internal.DownstreamExceptionElement` @kind boolean;
  #L184558.  if v0 != 0 then goto L184568;
  #L18455c.  call `checkContext`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.checkContext:(Lkotlinx/coroutines/flow/internal/SafeCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L184562.  v1.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` := v2 @kind object;
  #L184566.  return @kind void;
  #L184568.  v3:= (`kotlinx.coroutines.flow.internal.DownstreamExceptionElement`) v3 @kind object;
  #L18456c.  call `c`(v1, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.c:(Lkotlinx/coroutines/flow/internal/DownstreamExceptionElement;Ljava/lang/Object;)V` @kind direct;
  #L184572.  v2:= 0I;
  #L184574.  throw v2;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `kotlin.coroutines.Continuation` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.b:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L18440c.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L184412.  v0:= temp @kind object;
  #L184414.  call `ensureActive`(v0) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L18441a.  v1:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L18441e.  if v1 == v0 then goto L184428;
  #L184422.  call `a`(v2, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @kind direct;
  #L184428.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L18442c.  call temp:= `access$getEmitFun$p`() @signature `Lkotlinx/coroutines/flow/internal/SafeCollectorKt;.access$getEmitFun$p:()Lkotlin/jvm/functions/Function3;` @kind static;
  #L184432.  v3:= temp @kind object;
  #L184434.  v0:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.collector` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L184438.  call temp:= `invoke`(v3, v0, v4, v2) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L18443e.  v3:= temp @kind object;
  #L184440.  return v3 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `kotlinx.coroutines.flow.internal.DownstreamExceptionElement` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.c:(Lkotlinx/coroutines/flow/internal/DownstreamExceptionElement;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L184588.  v0:= new `java.lang.StringBuilder`;
  #L18458c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L184592.  v1:= "\n            Flow exception transparency is violated:\n                Previous 'emit' call has thrown exception " @kind object;
  #L184596.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18459c.  v3:= v3.`kotlinx.coroutines.flow.internal.DownstreamExceptionElement.e` @type ^`java.lang.Throwable` @kind object;
  #L1845a0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1845a6.  v3:= ", but then emission attempt of value '" @kind object;
  #L1845aa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1845b0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1845b6.  v3:= "' has been detected.\n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.\n                For a more detailed explanation, please refer to Flow documentation.\n            " @kind object;
  #L1845ba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1845c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1845c6.  v3:= temp @kind object;
  #L1845c8.  call temp:= `trimIndent`(v3) @signature `Lkotlin/text/StringsKt;.trimIndent:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1845ce.  v3:= temp @kind object;
  #L1845d0.  v4:= new `java.lang.IllegalStateException`;
  #L1845d4.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1845da.  v3:= temp @kind object;
  #L1845dc.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1845e2.  throw v4;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1843b0.  call temp:= `b`(v1, v3, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.b:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L1843b6.  v2:= temp @kind object;
  #L1843b8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1843be.  v0:= temp @kind object;
  #L1843c0.  if v2 != v0 then goto L1843ca;
  #L1843c4.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L1843ca.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1843d0.  v3:= temp @kind object;
  #L1843d2.  if v2 != v3 then goto L1843d8;
  #L1843d6.  return v2 @kind object;
  #L1843d8.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1843dc.  return v2 @kind object;
  #L1843de.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1843e0.  v3:= new `kotlinx.coroutines.flow.internal.DownstreamExceptionElement`;
  #L1843e4.  call `<init>`(v3, v2) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionElement;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1843ea.  v1.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` := v3 @kind object;
  #L1843ee.  throw v2;
  catch `java.lang.Throwable` @[L1843b0..L1843b8] goto L1843de;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1844dc.  v0:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L1844e0.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L1844e4.  if v1 == 0 then goto L1844ee;
  #L1844e8.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L1844ec.  goto L1844f0;
  #L1844ee.  v0:= 0I;
  #L1844f0.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1844ac.  v0:= v1.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L1844b0.  if v0 != 0 then goto L1844b8;
  #L1844b4.  v0:= 0I;
  #L1844b6.  goto L1844c0;
  #L1844b8.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L1844be.  v0:= temp @kind object;
  #L1844c0.  if v0 != 0 then goto L1844c8;
  #L1844c4.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L1844c8.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L184498.  v0:= 0I;
  #L18449a.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L184454.  call temp:= `exceptionOrNull-impl`(v3) @signature `Lkotlin/Result;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L18445a.  v0:= temp @kind object;
  #L18445c.  if v0 == 0 then goto L18446e;
  #L184460.  v1:= new `kotlinx.coroutines.flow.internal.DownstreamExceptionElement`;
  #L184464.  call `<init>`(v1, v0) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionElement;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L18446a.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` := v1 @kind object;
  #L18446e.  v0:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L184472.  if v0 != 0 then goto L184478;
  #L184476.  goto L18447e;
  #L184478.  call `resumeWith`(v0, v3) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L18447e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L184484.  v3:= temp @kind object;
  #L184486.  return v3 @kind object;
}
procedure `void` `releaseIntercepted`(`kotlinx.coroutines.flow.internal.SafeCollector` v0 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @AccessFlag PUBLIC {
    temp;

  #L1845f4.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.releaseIntercepted:()V` @kind super;
  #L1845fa.  return @kind void;
}
