record `kotlinx.coroutines.flow.c` @kind class @AccessFlag  extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.c` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1703e0.  call `<init>`(v0, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L1703e6.  v0.`kotlinx.coroutines.flow.c.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L1703ea.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.c` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object, `int` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v6 @kind object) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1703fc.  v6:= v5 ^& 2;
  #L170400.  if v6 == 0 then goto L170408;
  #L170404.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L170408.  v6:= v5 ^& 4;
  #L17040c.  if v6 == 0 then goto L170412;
  #L170410.  v3:= -2I;
  #L170412.  v5:= v5 ^& 8;
  #L170416.  if v5 == 0 then goto L17041e;
  #L17041a.  v4:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L17041e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L170424.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.c` v0 @kind object, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/c;.b:(Lkotlinx/coroutines/flow/c;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L170324.  v0:= v0.`kotlinx.coroutines.flow.c.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L170328.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L17032e.  v0:= temp @kind object;
  #L170330.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L170336.  v1:= temp @kind object;
  #L170338.  if v0 != v1 then goto L17033e;
  #L17033c.  return v0 @kind object;
  #L17033e.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L170342.  return v0 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.c` v0 @kind this, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/c;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L170354.  call temp:= `b`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/c;.b:(Lkotlinx/coroutines/flow/c;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L17035a.  v1:= temp @kind object;
  #L17035c.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.c` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/c;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1703c0.  v0:= new `kotlinx.coroutines.flow.c`;
  #L1703c4.  v1:= v2.`kotlinx.coroutines.flow.c.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1703c8.  call `<init>`(v0, v1, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L1703ce.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.flow.c` v2 @kind this) @signature `Lkotlinx/coroutines/flow/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L170370.  v0:= new `java.lang.StringBuilder`;
  #L170374.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17037a.  v1:= "block[" @kind object;
  #L17037e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170384.  v1:= v2.`kotlinx.coroutines.flow.c.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L170388.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17038e.  v1:= "] -> " @kind object;
  #L170392.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170398.  call temp:= `toString`(v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.toString:()Ljava/lang/String;` @kind super;
  #L17039e.  v1:= temp @kind object;
  #L1703a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1703a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1703ac.  v0:= temp @kind object;
  #L1703ae.  return v0 @kind object;
}
