record `kotlinx.coroutines.flow.f` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.SharedFlow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface, `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `kotlinx.coroutines.flow.SharedFlow` `kotlinx.coroutines.flow.f.a` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.f` v0 @kind this, `kotlinx.coroutines.flow.SharedFlow` v1 @kind object, `kotlinx.coroutines.Job` v2 @kind object) @signature `Lkotlinx/coroutines/flow/f;.<init>:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlinx/coroutines/Job;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L17e644.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17e64a.  v0.`kotlinx.coroutines.flow.f.a` @type ^`kotlinx.coroutines.flow.SharedFlow` := v1 @kind object;
  #L17e64e.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.f` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/f;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L17e5e8.  v0:= v1.`kotlinx.coroutines.flow.f.a` @type ^`kotlinx.coroutines.flow.SharedFlow` @kind object;
  #L17e5ec.  call temp:= `collect`(v0, v2, v3) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L17e5f2.  v2:= temp @kind object;
  #L17e5f4.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.f` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/f;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;

  #L17e628.  call temp:= `fuseSharedFlow`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.fuseSharedFlow:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L17e62e.  v1:= temp @kind object;
  #L17e630.  return v1 @kind object;
}
procedure `java.util.List` `getReplayCache`(`kotlinx.coroutines.flow.f` v1 @kind this) @signature `Lkotlinx/coroutines/flow/f;.getReplayCache:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L17e608.  v0:= v1.`kotlinx.coroutines.flow.f.a` @type ^`kotlinx.coroutines.flow.SharedFlow` @kind object;
  #L17e60c.  call temp:= `getReplayCache`(v0) @signature `Lkotlinx/coroutines/flow/SharedFlow;.getReplayCache:()Ljava/util/List;` @kind interface;
  #L17e612.  v0:= temp @kind object;
  #L17e614.  return v0 @kind object;
}
