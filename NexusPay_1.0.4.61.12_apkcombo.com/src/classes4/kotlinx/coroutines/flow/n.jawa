record `kotlinx.coroutines.flow.n` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` @kind class {
  `java.lang.Object` `kotlinx.coroutines.flow.n._state` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.flow.n.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L180fbc.  v0:= constclass @type ^`kotlinx.coroutines.flow.n` @kind object;
  #L180fc0.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L180fc4.  v2:= "_state" @kind object;
  #L180fc8.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L180fce.  v0:= temp @kind object;
  #L180fd0.  `@@kotlinx.coroutines.flow.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L180fd4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.n` v1 @kind this) @signature `Lkotlinx/coroutines/flow/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L180fe8.  call `<init>`(v1) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.<init>:()V` @kind direct;
  #L180fee.  v0:= 0I;
  #L180ff0.  v1.`kotlinx.coroutines.flow.n._state` @type ^`java.lang.Object` := v0 @kind object;
  #L180ff4.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.flow.n` v0 @kind this, `kotlinx.coroutines.flow.m` v1 @kind object) @signature `Lkotlinx/coroutines/flow/n;.a:(Lkotlinx/coroutines/flow/m;)Z` @AccessFlag PUBLIC {
    temp;

  #L180dec.  v1:= v0.`kotlinx.coroutines.flow.n._state` @type ^`java.lang.Object` @kind object;
  #L180df0.  if v1 == 0 then goto L180df8;
  #L180df4.  v1:= 0I;
  #L180df6.  return v1;
  #L180df8.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L180dfe.  v1:= temp @kind object;
  #L180e00.  v0.`kotlinx.coroutines.flow.n._state` @type ^`java.lang.Object` := v1 @kind object;
  #L180e04.  v1:= 1I;
  #L180e06.  return v1;
}
procedure `boolean` `allocateLocked`(`kotlinx.coroutines.flow.n` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/n;.allocateLocked:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L180dcc.  v1:= (`kotlinx.coroutines.flow.m`) v1 @kind object;
  #L180dd0.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/n;.a:(Lkotlinx/coroutines/flow/m;)Z` @kind virtual;
  #L180dd6.  v1:= temp;
  #L180dd8.  return v1;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.n` v4 @kind this, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/n;.b:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L180e7c.  v0:= new `kotlinx.coroutines.CancellableContinuationImpl`;
  #L180e80.  call temp:= `intercepted`(v5) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L180e86.  v1:= temp @kind object;
  #L180e88.  v2:= 1I;
  #L180e8a.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L180e90.  call `initCancellability`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.initCancellability:()V` @kind virtual;
  #L180e96.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L180e9c.  v1:= temp;
  #L180e9e.  if v1 == 0 then goto L180ece;
  #L180ea2.  v1:= v4.`kotlinx.coroutines.flow.n._state` @type ^`java.lang.Object` @kind object;
  #L180ea6.  v1:= instanceof @variable v1 @type ^`kotlinx.coroutines.CancellableContinuationImpl` @kind boolean;
  #L180eaa.  v1:= v1 ^~ v2 @kind int;
  #L180eac.  call temp:= `boxBoolean`(v1) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L180eb2.  v1:= temp @kind object;
  #L180eb4.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L180eba.  v1:= temp;
  #L180ebc.  if v1 == 0 then goto L180ec2;
  #L180ec0.  goto L180ece;
  #L180ec2.  v5:= new `java.lang.AssertionError`;
  #L180ec6.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L180ecc.  throw v5;
  #L180ece.  v1:= `@@kotlinx.coroutines.flow.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L180ed2.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L180ed8.  v3:= temp @kind object;
  #L180eda.  call temp:= `compareAndSet`(v1, v4, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L180ee0.  v1:= temp;
  #L180ee2.  if v1 == 0 then goto L180ee8;
  #L180ee6.  goto L180f40;
  #L180ee8.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L180eee.  v1:= temp;
  #L180ef0.  if v1 == 0 then goto L180f2a;
  #L180ef4.  v1:= v4.`kotlinx.coroutines.flow.n._state` @type ^`java.lang.Object` @kind object;
  #L180ef8.  call temp:= `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L180efe.  v3:= temp @kind object;
  #L180f00.  if v1 != v3 then goto L180f06;
  #L180f04.  goto L180f08;
  #L180f06.  v2:= 0I;
  #L180f08.  call temp:= `boxBoolean`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L180f0e.  v1:= temp @kind object;
  #L180f10.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L180f16.  v1:= temp;
  #L180f18.  if v1 == 0 then goto L180f1e;
  #L180f1c.  goto L180f2a;
  #L180f1e.  v5:= new `java.lang.AssertionError`;
  #L180f22.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L180f28.  throw v5;
  #L180f2a.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L180f2e.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L180f32.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L180f38.  v1:= temp @kind object;
  #L180f3a.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L180f40.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L180f46.  v0:= temp @kind object;
  #L180f48.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L180f4e.  v1:= temp @kind object;
  #L180f50.  if v0 != v1 then goto L180f5a;
  #L180f54.  call `probeCoroutineSuspended`(v5) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L180f5a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L180f60.  v5:= temp @kind object;
  #L180f62.  if v0 != v5 then goto L180f68;
  #L180f66.  return v0 @kind object;
  #L180f68.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L180f6c.  return v5 @kind object;
}
procedure `kotlin.coroutines.Continuation`[] `c`(`kotlinx.coroutines.flow.n` v0 @kind this, `kotlinx.coroutines.flow.m` v1 @kind object) @signature `Lkotlinx/coroutines/flow/n;.c:(Lkotlinx/coroutines/flow/m;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;

  #L180fa0.  v1:= 0I;
  #L180fa2.  v0.`kotlinx.coroutines.flow.n._state` @type ^`java.lang.Object` := v1 @kind object;
  #L180fa6.  v1:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L180faa.  return v1 @kind object;
}
procedure `void` `d`(`kotlinx.coroutines.flow.n` v3 @kind this) @signature `Lkotlinx/coroutines/flow/n;.d:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L181008.  v0:= v3.`kotlinx.coroutines.flow.n._state` @type ^`java.lang.Object` @kind object;
  #L18100c.  if v0 != 0 then goto L181012;
  #L181010.  return @kind void;
  #L181012.  call temp:= `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L181018.  v1:= temp @kind object;
  #L18101a.  if v0 != v1 then goto L181020;
  #L18101e.  return @kind void;
  #L181020.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L181026.  v1:= temp @kind object;
  #L181028.  if v0 != v1 then goto L181046;
  #L18102c.  v1:= `@@kotlinx.coroutines.flow.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L181030.  call temp:= `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L181036.  v2:= temp @kind object;
  #L181038.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18103e.  v0:= temp;
  #L181040.  if v0 == 0 then goto L181008;
  #L181044.  return @kind void;
  #L181046.  v1:= `@@kotlinx.coroutines.flow.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18104a.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L181050.  v2:= temp @kind object;
  #L181052.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L181058.  v1:= temp;
  #L18105a.  if v1 == 0 then goto L181008;
  #L18105e.  v0:= (`kotlinx.coroutines.CancellableContinuationImpl`) v0 @kind object;
  #L181062.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L181066.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L18106a.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L181070.  v1:= temp @kind object;
  #L181072.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L181078.  return @kind void;
}
procedure `boolean` `e`(`kotlinx.coroutines.flow.n` v3 @kind this) @signature `Lkotlinx/coroutines/flow/n;.e:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L180e18.  v0:= `@@kotlinx.coroutines.flow.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L180e1c.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L180e22.  v1:= temp @kind object;
  #L180e24.  call temp:= `getAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L180e2a.  v0:= temp @kind object;
  #L180e2c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L180e32.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L180e38.  v1:= temp;
  #L180e3a.  v2:= 1I;
  #L180e3c.  if v1 == 0 then goto L180e58;
  #L180e40.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.CancellableContinuationImpl` @kind boolean;
  #L180e44.  v1:= v1 ^~ v2 @kind int;
  #L180e46.  if v1 == 0 then goto L180e4c;
  #L180e4a.  goto L180e58;
  #L180e4c.  v0:= new `java.lang.AssertionError`;
  #L180e50.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L180e56.  throw v0;
  #L180e58.  call temp:= `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L180e5e.  v1:= temp @kind object;
  #L180e60.  if v0 != v1 then goto L180e66;
  #L180e64.  goto L180e68;
  #L180e66.  v2:= 0I;
  #L180e68.  return v2;
}
procedure `kotlin.coroutines.Continuation`[] `freeLocked`(`kotlinx.coroutines.flow.n` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/n;.freeLocked:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L180f80.  v1:= (`kotlinx.coroutines.flow.m`) v1 @kind object;
  #L180f84.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/flow/n;.c:(Lkotlinx/coroutines/flow/m;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L180f8a.  v1:= temp @kind object;
  #L180f8c.  return v1 @kind object;
}
