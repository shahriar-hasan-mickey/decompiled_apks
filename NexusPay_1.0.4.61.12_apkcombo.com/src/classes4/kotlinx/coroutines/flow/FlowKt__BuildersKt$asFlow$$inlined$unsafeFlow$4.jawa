record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `java.util.Iterator` `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4;.<init>:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L170b84.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L170b88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L170b8e.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L170abc.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1` @kind boolean;
  #L170ac0.  if v0 == 0 then goto L170ae2;
  #L170ac4.  v0:= v7 @kind object;
  #L170ac6.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1`) v0 @kind object;
  #L170aca.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int`;
  #L170ace.  v2:= -2147483648I;
  #L170ad2.  v3:= v1 ^& v2 @kind int;
  #L170ad6.  if v3 == 0 then goto L170ae2;
  #L170ada.  v1:= v1 - v2 @kind int;
  #L170adc.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int` := v1;
  #L170ae0.  goto L170aec;
  #L170ae2.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1`;
  #L170ae6.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L170aec.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.a` @type ^`java.lang.Object` @kind object;
  #L170af0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L170af6.  v1:= temp @kind object;
  #L170af8.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int`;
  #L170afc.  v3:= 1I;
  #L170afe.  if v2 == 0 then goto L170b30;
  #L170b02.  if v2 != v3 then goto L170b20;
  #L170b06.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.e` @type ^`java.lang.Object` @kind object;
  #L170b0a.  v6:= (`java.util.Iterator`) v6 @kind object;
  #L170b0e.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.d` @type ^`java.lang.Object` @kind object;
  #L170b12.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L170b16.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L170b1c.  v7:= v2 @kind object;
  #L170b1e.  goto L170b40;
  #L170b20.  v6:= new `java.lang.IllegalStateException`;
  #L170b24.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L170b28.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L170b2e.  throw v6;
  #L170b30.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L170b36.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4.a` @type ^`java.util.Iterator` @kind object;
  #L170b3a.  v4:= v7 @kind object;
  #L170b3c.  v7:= v6 @kind object;
  #L170b3e.  v6:= v4 @kind object;
  #L170b40.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L170b46.  v2:= temp;
  #L170b48.  if v2 == 0 then goto L170b6e;
  #L170b4c.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L170b52.  v2:= temp @kind object;
  #L170b54.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L170b58.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.e` @type ^`java.lang.Object` := v6 @kind object;
  #L170b5c.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int` := v3;
  #L170b60.  call temp:= `emit`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L170b66.  v2:= temp @kind object;
  #L170b68.  if v2 != v1 then goto L170b40;
  #L170b6c.  return v1 @kind object;
  #L170b6e.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L170b72.  return v6 @kind object;
}
