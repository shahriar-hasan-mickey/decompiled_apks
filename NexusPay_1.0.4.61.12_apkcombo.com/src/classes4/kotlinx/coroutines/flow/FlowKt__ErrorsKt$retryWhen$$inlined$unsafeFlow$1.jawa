record `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function4` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function4` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function4;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1751f0.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L1751f4.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function4` := v2 @kind object;
  #L1751f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1751fe.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1` v11 @kind this, `kotlinx.coroutines.flow.FlowCollector` v12 @kind object, `kotlin.coroutines.Continuation` v13 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L17507c.  v0:= instanceof @variable v13 @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1` @kind boolean;
  #L175080.  if v0 == 0 then goto L1750a2;
  #L175084.  v0:= v13 @kind object;
  #L175086.  v0:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L17508a.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L17508e.  v2:= -2147483648I;
  #L175092.  v3:= v1 ^& v2 @kind int;
  #L175096.  if v3 == 0 then goto L1750a2;
  #L17509a.  v1:= v1 - v2 @kind int;
  #L17509c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int` := v1;
  #L1750a0.  goto L1750ac;
  #L1750a2.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1`;
  #L1750a6.  call `<init>`(v0, v11, v13) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1750ac.  v13:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.a` @type ^`java.lang.Object` @kind object;
  #L1750b0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1750b6.  v1:= temp @kind object;
  #L1750b8.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L1750bc.  v3:= 2I;
  #L1750be.  v4:= 1I;
  #L1750c0.  if v2 == 0 then goto L175120;
  #L1750c4.  if v2 == v4 then goto L175100;
  #L1750c8.  if v2 != v3 then goto L1750f0;
  #L1750cc.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` @kind wide;
  #L1750d0.  v12:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` @kind object;
  #L1750d4.  v12:= (`java.lang.Throwable`) v12 @kind object;
  #L1750d8.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` @kind object;
  #L1750dc.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L1750e0.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L1750e4.  v7:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1`) v7 @kind object;
  #L1750e8.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1750ee.  goto L1751b0;
  #L1750f0.  v12:= new `java.lang.IllegalStateException`;
  #L1750f4.  v13:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1750f8.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1750fe.  throw v12;
  #L175100.  v12:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.h` @type ^`int`;
  #L175104.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` @kind wide;
  #L175108.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` @kind object;
  #L17510c.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L175110.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L175114.  v7:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1`) v7 @kind object;
  #L175118.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17511e.  goto L175164;
  #L175120.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L175126.  v5:= 0L;
  #L17512a.  v13:= v11 @kind object;
  #L17512c.  v2:= 0I;
  #L17512e.  v7:= v13.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L175132.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v13 @kind object;
  #L175136.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v12 @kind object;
  #L17513a.  v8:= 0I;
  #L17513c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v8 @kind object;
  #L175140.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` := v5 @kind wide;
  #L175144.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.h` @type ^`int` := v2;
  #L175148.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int` := v4;
  #L17514c.  call temp:= `catchImpl`(v7, v12, v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.catchImpl:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L175152.  v7:= temp @kind object;
  #L175154.  if v7 != v1 then goto L17515a;
  #L175158.  return v1 @kind object;
  #L17515a.  v2:= v12 @kind object;
  #L17515c.  v12:= 0I;
  #L17515e.  v10:= v7 @kind object;
  #L175160.  v7:= v13 @kind object;
  #L175162.  v13:= v10 @kind object;
  #L175164.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L175168.  if v13 == 0 then goto L1751ce;
  #L17516c.  v12:= v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function4` @kind object;
  #L175170.  call temp:= `boxLong`(v5) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxLong:(J)Ljava/lang/Long;` @kind static;
  #L175176.  v8:= temp @kind object;
  #L175178.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L17517c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v2 @kind object;
  #L175180.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v13 @kind object;
  #L175184.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` := v5 @kind wide;
  #L175188.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int` := v3;
  #L17518c.  v9:= 6I;
  #L17518e.  call `mark`(v9) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L175194.  call temp:= `invoke`(v12, v2, v13, v8, v0) @signature `Lkotlin/jvm/functions/Function4;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L17519a.  v12:= temp @kind object;
  #L17519c.  v8:= 7I;
  #L17519e.  call `mark`(v8) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L1751a4.  if v12 != v1 then goto L1751aa;
  #L1751a8.  return v1 @kind object;
  #L1751aa.  v10:= v13 @kind object;
  #L1751ac.  v13:= v12 @kind object;
  #L1751ae.  v12:= v10 @kind object;
  #L1751b0.  v13:= (`java.lang.Boolean`) v13 @kind object;
  #L1751b4.  call temp:= `booleanValue`(v13) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1751ba.  v13:= temp;
  #L1751bc.  if v13 == 0 then goto L1751cc;
  #L1751c0.  v12:= 1L;
  #L1751c4.  v5:= v5 + v12 @kind long;
  #L1751c6.  v13:= v7 @kind object;
  #L1751c8.  v12:= 1I;
  #L1751ca.  goto L1751d0;
  #L1751cc.  throw v12;
  #L1751ce.  v13:= v7 @kind object;
  #L1751d0.  if v12 != 0 then goto L1751da;
  #L1751d4.  v12:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1751d8.  return v12 @kind object;
  #L1751da.  v12:= v2 @kind object;
  #L1751dc.  goto L17512c;
}
