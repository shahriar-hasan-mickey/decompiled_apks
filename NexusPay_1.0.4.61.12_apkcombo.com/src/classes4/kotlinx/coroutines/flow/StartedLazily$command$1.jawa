record `kotlinx.coroutines.flow.StartedLazily$command$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.StartedLazily$command$1.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.StartedLazily$command$1.b` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.flow.StateFlow` `kotlinx.coroutines.flow.StartedLazily$command$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.StartedLazily$command$1` v0 @kind this, `kotlinx.coroutines.flow.StateFlow` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.<init>:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1801ac.  v0.`kotlinx.coroutines.flow.StartedLazily$command$1.c` @type ^`kotlinx.coroutines.flow.StateFlow` := v1 @kind object;
  #L1801b0.  v1:= 2I;
  #L1801b2.  call `<init>`(v0, v1, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L1801b8.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.StartedLazily$command$1` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L180188.  v0:= new `kotlinx.coroutines.flow.StartedLazily$command$1`;
  #L18018c.  v1:= v2.`kotlinx.coroutines.flow.StartedLazily$command$1.c` @type ^`kotlinx.coroutines.flow.StateFlow` @kind object;
  #L180190.  call `<init>`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.<init>:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L180196.  v0.`kotlinx.coroutines.flow.StartedLazily$command$1.b` @type ^`java.lang.Object` := v3 @kind object;
  #L18019a.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.StartedLazily$command$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1800bc.  v1:= (`kotlinx.coroutines.flow.FlowCollector`) v1 @kind object;
  #L1800c0.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L1800c4.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L1800ca.  v1:= temp @kind object;
  #L1800cc.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.StartedLazily$command$1` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1800e0.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L1800e6.  v1:= temp @kind object;
  #L1800e8.  v1:= (`kotlinx.coroutines.flow.StartedLazily$command$1`) v1 @kind object;
  #L1800ec.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1800f0.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1800f6.  v1:= temp @kind object;
  #L1800f8.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.StartedLazily$command$1` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L18010c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L180112.  v0:= temp @kind object;
  #L180114.  v1:= v5.`kotlinx.coroutines.flow.StartedLazily$command$1.a` @type ^`int`;
  #L180118.  v2:= 1I;
  #L18011a.  if v1 == 0 then goto L18013a;
  #L18011e.  if v1 != v2 then goto L18012a;
  #L180122.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L180128.  goto L180172;
  #L18012a.  v6:= new `java.lang.IllegalStateException`;
  #L18012e.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L180132.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L180138.  throw v6;
  #L18013a.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L180140.  v6:= v5.`kotlinx.coroutines.flow.StartedLazily$command$1.b` @type ^`java.lang.Object` @kind object;
  #L180144.  v6:= (`kotlinx.coroutines.flow.FlowCollector`) v6 @kind object;
  #L180148.  v1:= new `kotlin.jvm.internal.Ref$BooleanRef`;
  #L18014c.  call `<init>`(v1) @signature `Lkotlin/jvm/internal/Ref$BooleanRef;.<init>:()V` @kind direct;
  #L180152.  v3:= v5.`kotlinx.coroutines.flow.StartedLazily$command$1.c` @type ^`kotlinx.coroutines.flow.StateFlow` @kind object;
  #L180156.  v4:= new `kotlinx.coroutines.flow.StartedLazily$command$1$invokeSuspend$$inlined$collect$1`;
  #L18015a.  call `<init>`(v4, v1, v6) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1$invokeSuspend$$inlined$collect$1;.<init>:(Lkotlin/jvm/internal/Ref$BooleanRef;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L180160.  v5.`kotlinx.coroutines.flow.StartedLazily$command$1.a` @type ^`int` := v2;
  #L180164.  call temp:= `collect`(v3, v4, v5) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L18016a.  v6:= temp @kind object;
  #L18016c.  if v6 != v0 then goto L180172;
  #L180170.  return v0 @kind object;
  #L180172.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L180176.  return v6 @kind object;
}
