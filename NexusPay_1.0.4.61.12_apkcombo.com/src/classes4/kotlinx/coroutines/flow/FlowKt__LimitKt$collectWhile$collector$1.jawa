record `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L175714.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L175718.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17571e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L175654.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1` @kind boolean;
  #L175658.  if v0 == 0 then goto L17567a;
  #L17565c.  v0:= v6 @kind object;
  #L17565e.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1`) v0 @kind object;
  #L175662.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.d` @type ^`int`;
  #L175666.  v2:= -2147483648I;
  #L17566a.  v3:= v1 ^& v2 @kind int;
  #L17566e.  if v3 == 0 then goto L17567a;
  #L175672.  v1:= v1 - v2 @kind int;
  #L175674.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.d` @type ^`int` := v1;
  #L175678.  goto L175684;
  #L17567a.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1`;
  #L17567e.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1$emit$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L175684.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.b` @type ^`java.lang.Object` @kind object;
  #L175688.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17568e.  v1:= temp @kind object;
  #L175690.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.d` @type ^`int`;
  #L175694.  v3:= 1I;
  #L175696.  if v2 == 0 then goto L1756be;
  #L17569a.  if v2 != v3 then goto L1756ae;
  #L17569e.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.a` @type ^`java.lang.Object` @kind object;
  #L1756a2.  v5:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1`) v5 @kind object;
  #L1756a6.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1756ac.  goto L1756e0;
  #L1756ae.  v5:= new `java.lang.IllegalStateException`;
  #L1756b2.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1756b6.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1756bc.  throw v5;
  #L1756be.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1756c4.  v6:= v4.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1756c8.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.a` @type ^`java.lang.Object` := v4 @kind object;
  #L1756cc.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.d` @type ^`int` := v3;
  #L1756d0.  call temp:= `invoke`(v6, v5, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1756d6.  v6:= temp @kind object;
  #L1756d8.  if v6 != v1 then goto L1756de;
  #L1756dc.  return v1 @kind object;
  #L1756de.  v5:= v4 @kind object;
  #L1756e0.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L1756e4.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1756ea.  v6:= temp;
  #L1756ec.  if v6 == 0 then goto L1756f6;
  #L1756f0.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1756f4.  return v5 @kind object;
  #L1756f6.  v6:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L1756fa.  call `<init>`(v6, v5) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L175700.  throw v6;
}
procedure `java.lang.Object` `emit$$forInline`(`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;.emit$$forInline:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1755fc.  v0:= 4I;
  #L1755fe.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L175604.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1`;
  #L175608.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1$emit$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L17560e.  v0:= 5I;
  #L175610.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L175616.  v0:= v1.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L17561a.  call temp:= `invoke`(v0, v2, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L175620.  v2:= temp @kind object;
  #L175622.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L175626.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L17562c.  v2:= temp;
  #L17562e.  if v2 == 0 then goto L175638;
  #L175632.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L175636.  return v2 @kind object;
  #L175638.  v2:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L17563c.  call `<init>`(v2, v1) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L175642.  throw v2;
}
