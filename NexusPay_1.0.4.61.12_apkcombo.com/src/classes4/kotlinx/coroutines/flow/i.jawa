record `kotlinx.coroutines.flow.i` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` @kind class {
  `long` `kotlinx.coroutines.flow.i.a` @AccessFlag PUBLIC;
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.flow.i.b` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.i` v2 @kind this) @signature `Lkotlinx/coroutines/flow/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L17fca4.  call `<init>`(v2) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.<init>:()V` @kind direct;
  #L17fcaa.  v0:= -1L;
  #L17fcae.  v2.`kotlinx.coroutines.flow.i.a` @type ^`long` := v0 @kind wide;
  #L17fcb2.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.flow.i` v5 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind object) @signature `Lkotlinx/coroutines/flow/i;.a:(Lkotlinx/coroutines/flow/SharedFlowImpl;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L17fbf0.  v0:= v5.`kotlinx.coroutines.flow.i.a` @type ^`long` @kind wide;
  #L17fbf4.  v2:= 0L;
  #L17fbf8.  v4:= lcmp(v0, v2);
  #L17fbfc.  if v4 < 0 then goto L17fc04;
  #L17fc00.  v6:= 0I;
  #L17fc02.  return v6;
  #L17fc04.  call temp:= `H`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.H:()J` @kind virtual;
  #L17fc0a.  v0:= temp @kind wide;
  #L17fc0c.  v5.`kotlinx.coroutines.flow.i.a` @type ^`long` := v0 @kind wide;
  #L17fc10.  v6:= 1I;
  #L17fc12.  return v6;
}
procedure `boolean` `allocateLocked`(`kotlinx.coroutines.flow.i` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/i;.allocateLocked:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L17fbd0.  v1:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v1 @kind object;
  #L17fbd4.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/i;.a:(Lkotlinx/coroutines/flow/SharedFlowImpl;)Z` @kind virtual;
  #L17fbda.  v1:= temp;
  #L17fbdc.  return v1;
}
procedure `kotlin.coroutines.Continuation`[] `b`(`kotlinx.coroutines.flow.i` v5 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind object) @signature `Lkotlinx/coroutines/flow/i;.b:(Lkotlinx/coroutines/flow/SharedFlowImpl;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L17fc44.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17fc4a.  v0:= temp;
  #L17fc4c.  if v0 == 0 then goto L17fc78;
  #L17fc50.  v0:= v5.`kotlinx.coroutines.flow.i.a` @type ^`long` @kind wide;
  #L17fc54.  v2:= 0L;
  #L17fc58.  v4:= lcmp(v0, v2);
  #L17fc5c.  if v4 < 0 then goto L17fc64;
  #L17fc60.  v0:= 1I;
  #L17fc62.  goto L17fc66;
  #L17fc64.  v0:= 0I;
  #L17fc66.  if v0 == 0 then goto L17fc6c;
  #L17fc6a.  goto L17fc78;
  #L17fc6c.  v6:= new `java.lang.AssertionError`;
  #L17fc70.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17fc76.  throw v6;
  #L17fc78.  v0:= v5.`kotlinx.coroutines.flow.i.a` @type ^`long` @kind wide;
  #L17fc7c.  v2:= -1L;
  #L17fc80.  v5.`kotlinx.coroutines.flow.i.a` @type ^`long` := v2 @kind wide;
  #L17fc84.  v2:= 0I;
  #L17fc86.  v5.`kotlinx.coroutines.flow.i.b` @type ^`kotlin.coroutines.Continuation` := v2 @kind object;
  #L17fc8a.  call temp:= `G`(v6, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.G:(J)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L17fc90.  v6:= temp @kind object;
  #L17fc92.  return v6 @kind object;
}
procedure `kotlin.coroutines.Continuation`[] `freeLocked`(`kotlinx.coroutines.flow.i` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/i;.freeLocked:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L17fc24.  v1:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v1 @kind object;
  #L17fc28.  call temp:= `b`(v0, v1) @signature `Lkotlinx/coroutines/flow/i;.b:(Lkotlinx/coroutines/flow/SharedFlowImpl;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L17fc2e.  v1:= temp @kind object;
  #L17fc30.  return v1 @kind object;
}
