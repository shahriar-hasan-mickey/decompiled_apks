record `kotlinx.coroutines.flow.SharedFlowImpl` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.AbstractSharedFlow` @kind class, `kotlinx.coroutines.flow.MutableSharedFlow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface, `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.e` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.f` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.channels.BufferOverflow` `kotlinx.coroutines.flow.SharedFlowImpl.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `kotlinx.coroutines.flow.SharedFlowImpl.h` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.flow.SharedFlowImpl.i` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.flow.SharedFlowImpl.j` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.k` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 , `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.<init>:(IILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L17f578.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.<init>:()V` @kind direct;
  #L17f57e.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int` := v1;
  #L17f582.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int` := v2;
  #L17f586.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`kotlinx.coroutines.channels.BufferOverflow` := v3 @kind object;
  #L17f58a.  return @kind void;
}
procedure `java.lang.Object`[] `A`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.A:([Ljava/lang/Object;II)[Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L17ef6c.  v0:= 0I;
  #L17ef6e.  if v9 <= 0 then goto L17ef76;
  #L17ef72.  v1:= 1I;
  #L17ef74.  goto L17ef78;
  #L17ef76.  v1:= 0I;
  #L17ef78.  if v1 == 0 then goto L17efb8;
  #L17ef7c.  v9:= new `java.lang.Object`[v9];
  #L17ef80.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] := v9 @kind object;
  #L17ef84.  if v7 != 0 then goto L17ef8a;
  #L17ef88.  return v9 @kind object;
  #L17ef8a.  call temp:= `v`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17ef90.  v1:= temp @kind wide;
  #L17ef92.  if v8 <= 0 then goto L17efb6;
  #L17ef96.  v3:= v0 + 1;
  #L17ef9a.  v4:= (`long`) v0 @kind i2l;
  #L17ef9c.  v4:= v4 + v1 @kind long;
  #L17ef9e.  call temp:= `access$getBufferAt`(v7, v4) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L17efa4.  v0:= temp @kind object;
  #L17efa6.  call `access$setBufferAt`(v9, v4, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17efac.  if v3 < v8 then goto L17efb2;
  #L17efb0.  goto L17efb6;
  #L17efb2.  v0:= v3;
  #L17efb4.  goto L17ef96;
  #L17efb6.  return v9 @kind object;
  #L17efb8.  v7:= new `java.lang.IllegalStateException`;
  #L17efbc.  v8:= "Buffer size overflow" @kind object;
  #L17efc0.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L17efc6.  v8:= temp @kind object;
  #L17efc8.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17efce.  throw v7;
}
procedure `boolean` `B`(`kotlinx.coroutines.flow.SharedFlowImpl` v14 @kind this, `java.lang.Object` v15 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.B:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L17e8c4.  call temp:= `getNCollectors`(v14) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L17e8ca.  v0:= temp;
  #L17e8cc.  if v0 != 0 then goto L17e8da;
  #L17e8d0.  call temp:= `C`(v14, v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.C:(Ljava/lang/Object;)Z` @kind direct;
  #L17e8d6.  v15:= temp;
  #L17e8d8.  return v15;
  #L17e8da.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17e8de.  v1:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17e8e2.  v2:= 1I;
  #L17e8e4.  if v0 < v1 then goto L17e91e;
  #L17e8e8.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17e8ec.  v3:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17e8f0.  v5:= lcmp(v0, v3);
  #L17e8f4.  if v5 > 0 then goto L17e91e;
  #L17e8f8.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L17e8fc.  v1:= `@@kotlinx.coroutines.flow.SharedFlowImpl$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L17e900.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L17e906.  v0:= temp;
  #L17e908.  v0:= v1[v0];
  #L17e90c.  if v0 == v2 then goto L17e91a;
  #L17e910.  v1:= 2I;
  #L17e912.  if v0 == v1 then goto L17e918;
  #L17e916.  goto L17e91e;
  #L17e918.  return v2;
  #L17e91a.  v15:= 0I;
  #L17e91c.  return v15;
  #L17e91e.  call `s`(v14, v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Ljava/lang/Object;)V` @kind direct;
  #L17e924.  v15:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17e928.  v15:= v15 + v2 @kind int;
  #L17e92a.  v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v15;
  #L17e92e.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17e932.  if v15 <= v0 then goto L17e93c;
  #L17e936.  call `q`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:()V` @kind direct;
  #L17e93c.  call temp:= `y`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.y:()I` @kind direct;
  #L17e942.  v15:= temp;
  #L17e944.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L17e948.  if v15 <= v0 then goto L17e974;
  #L17e94c.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17e950.  v3:= 1L;
  #L17e954.  v6:= v0 + v3 @kind long;
  #L17e958.  v8:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17e95c.  call temp:= `u`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:()J` @kind direct;
  #L17e962.  v10:= temp @kind wide;
  #L17e964.  call temp:= `x`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.x:()J` @kind direct;
  #L17e96a.  v12:= temp @kind wide;
  #L17e96c.  v5:= v14 @kind object;
  #L17e96e.  call `F`(v5, v6, v8, v10, v12) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.F:(JJJJ)V` @kind direct;
  #L17e974.  return v2;
}
procedure `boolean` `C`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.C:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L17e988.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17e98e.  v0:= temp;
  #L17e990.  v1:= 1I;
  #L17e992.  if v0 == 0 then goto L17e9ba;
  #L17e996.  call temp:= `getNCollectors`(v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L17e99c.  v0:= temp;
  #L17e99e.  if v0 != 0 then goto L17e9a6;
  #L17e9a2.  v0:= 1I;
  #L17e9a4.  goto L17e9a8;
  #L17e9a6.  v0:= 0I;
  #L17e9a8.  if v0 == 0 then goto L17e9ae;
  #L17e9ac.  goto L17e9ba;
  #L17e9ae.  v7:= new `java.lang.AssertionError`;
  #L17e9b2.  call `<init>`(v7) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17e9b8.  throw v7;
  #L17e9ba.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L17e9be.  if v0 != 0 then goto L17e9c4;
  #L17e9c2.  return v1;
  #L17e9c4.  call `s`(v6, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Ljava/lang/Object;)V` @kind direct;
  #L17e9ca.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17e9ce.  v7:= v7 + v1 @kind int;
  #L17e9d0.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v7;
  #L17e9d4.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L17e9d8.  if v7 <= v0 then goto L17e9e2;
  #L17e9dc.  call `q`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:()V` @kind direct;
  #L17e9e2.  call temp:= `v`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17e9e8.  v2:= temp @kind wide;
  #L17e9ea.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17e9ee.  v4:= (`long`) v7 @kind i2l;
  #L17e9f0.  v2:= v2 + v4 @kind long;
  #L17e9f2.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v2 @kind wide;
  #L17e9f6.  return v1;
}
procedure `long` `D`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `kotlinx.coroutines.flow.i` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.D:(Lkotlinx/coroutines/flow/i;)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L17f4fc.  v0:= v7.`kotlinx.coroutines.flow.i.a` @type ^`long` @kind wide;
  #L17f500.  call temp:= `u`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:()J` @kind direct;
  #L17f506.  v2:= temp @kind wide;
  #L17f508.  v7:= lcmp(v0, v2);
  #L17f50c.  if v7 >= 0 then goto L17f512;
  #L17f510.  return v0 @kind wide;
  #L17f512.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17f516.  v2:= -1L;
  #L17f51a.  if v7 <= 0 then goto L17f520;
  #L17f51e.  return v2 @kind wide;
  #L17f520.  call temp:= `v`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f526.  v4:= temp @kind wide;
  #L17f528.  v7:= lcmp(v0, v4);
  #L17f52c.  if v7 <= 0 then goto L17f532;
  #L17f530.  return v2 @kind wide;
  #L17f532.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f536.  if v7 != 0 then goto L17f53c;
  #L17f53a.  return v2 @kind wide;
  #L17f53c.  return v0 @kind wide;
}
procedure `java.lang.Object` `E`(`kotlinx.coroutines.flow.SharedFlowImpl` v8 @kind this, `kotlinx.coroutines.flow.i` v9 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.E:(Lkotlinx/coroutines/flow/i;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L17eed4.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L17eed8.  @monitorenter v8
  #L17eeda.  call temp:= `D`(v8, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.D:(Lkotlinx/coroutines/flow/i;)J` @kind direct;
  #L17eee0.  v1:= temp @kind wide;
  #L17eee2.  v3:= 0L;
  #L17eee6.  v5:= lcmp(v1, v3);
  #L17eeea.  if v5 >= 0 then goto L17eef4;
  #L17eeee.  v9:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L17eef2.  goto L17ef18;
  #L17eef4.  v3:= v9.`kotlinx.coroutines.flow.i.a` @type ^`long` @kind wide;
  #L17eef8.  call temp:= `w`(v8, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.w:(J)Ljava/lang/Object;` @kind direct;
  #L17eefe.  v0:= temp @kind object;
  #L17ef00.  v5:= 1L;
  #L17ef04.  v1:= v1 + v5 @kind long;
  #L17ef06.  v9.`kotlinx.coroutines.flow.i.a` @type ^`long` := v1 @kind wide;
  #L17ef0a.  call temp:= `G`(v8, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.G:(J)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L17ef10.  v9:= temp @kind object;
  #L17ef12.  v7:= v0 @kind object;
  #L17ef14.  v0:= v9 @kind object;
  #L17ef16.  v9:= v7 @kind object;
  #L17ef18.  @monitorexit v8
  #L17ef1a.  v1:= 0I;
  #L17ef1c.  v2:= length @variable v0;
  #L17ef1e.  if v1 >= v2 then goto L17ef48;
  #L17ef22.  v3:= v0[v1] @kind object;
  #L17ef26.  v1:= v1 + 1;
  #L17ef2a.  if v3 != 0 then goto L17ef30;
  #L17ef2e.  goto L17ef1e;
  #L17ef30.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17ef34.  v5:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L17ef38.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L17ef3e.  v4:= temp @kind object;
  #L17ef40.  call `resumeWith`(v3, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L17ef46.  goto L17ef1e;
  #L17ef48.  return v9 @kind object;
  #L17ef4a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17ef4c.  @monitorexit v8
  #L17ef4e.  throw v9;
  catch `java.lang.Throwable` @[L17eeda..L17ef12] goto L17ef4a;
}
procedure `void` `F`(`kotlinx.coroutines.flow.SharedFlowImpl` v15 @kind this, `long` v16 , `long` v18 , `long` v20 , `long` v22 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.F:(JJJJ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L17f8a4.  v0:= v15 @kind object;
  #L17f8a6.  v1:= v16 @kind wide;
  #L17f8aa.  v3:= v18 @kind wide;
  #L17f8ae.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L17f8b4.  v5:= temp @kind wide;
  #L17f8b6.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17f8bc.  v7:= temp;
  #L17f8be.  v8:= 1I;
  #L17f8c0.  v9:= 0I;
  #L17f8c2.  if v7 == 0 then goto L17f8ee;
  #L17f8c6.  call temp:= `v`(v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f8cc.  v10:= temp @kind wide;
  #L17f8ce.  v7:= lcmp(v5, v10);
  #L17f8d2.  if v7 < 0 then goto L17f8da;
  #L17f8d6.  v7:= 1I;
  #L17f8d8.  goto L17f8dc;
  #L17f8da.  v7:= 0I;
  #L17f8dc.  if v7 == 0 then goto L17f8e2;
  #L17f8e0.  goto L17f8ee;
  #L17f8e2.  v1:= new `java.lang.AssertionError`;
  #L17f8e6.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17f8ec.  throw v1;
  #L17f8ee.  call temp:= `v`(v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f8f4.  v10:= temp @kind wide;
  #L17f8f6.  v7:= lcmp(v10, v5);
  #L17f8fa.  if v7 >= 0 then goto L17f924;
  #L17f8fe.  v12:= 1L;
  #L17f902.  v12:= v12 + v10 @kind long;
  #L17f904.  v7:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f908.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17f90e.  v14:= 0I;
  #L17f910.  call `access$setBufferAt`(v7, v10, v14) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17f916.  v7:= lcmp(v12, v5);
  #L17f91a.  if v7 < 0 then goto L17f920;
  #L17f91e.  goto L17f924;
  #L17f920.  v10:= v12 @kind wide;
  #L17f922.  goto L17f8fe;
  #L17f924.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` := v1 @kind wide;
  #L17f928.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v3 @kind wide;
  #L17f92c.  v1:= v20 - v5 @kind long;
  #L17f930.  v2:= (`int`) v1 @kind l2i;
  #L17f932.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v2;
  #L17f936.  v1:= v22 - v20 @kind long;
  #L17f93a.  v2:= (`int`) v1 @kind l2i;
  #L17f93c.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v2;
  #L17f940.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17f946.  v1:= temp;
  #L17f948.  if v1 == 0 then goto L17f96c;
  #L17f94c.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17f950.  if v1 < 0 then goto L17f958;
  #L17f954.  v1:= 1I;
  #L17f956.  goto L17f95a;
  #L17f958.  v1:= 0I;
  #L17f95a.  if v1 == 0 then goto L17f960;
  #L17f95e.  goto L17f96c;
  #L17f960.  v1:= new `java.lang.AssertionError`;
  #L17f964.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17f96a.  throw v1;
  #L17f96c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17f972.  v1:= temp;
  #L17f974.  if v1 == 0 then goto L17f998;
  #L17f978.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f97c.  if v1 < 0 then goto L17f984;
  #L17f980.  v1:= 1I;
  #L17f982.  goto L17f986;
  #L17f984.  v1:= 0I;
  #L17f986.  if v1 == 0 then goto L17f98c;
  #L17f98a.  goto L17f998;
  #L17f98c.  v1:= new `java.lang.AssertionError`;
  #L17f990.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17f996.  throw v1;
  #L17f998.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17f99e.  v1:= temp;
  #L17f9a0.  if v1 == 0 then goto L17f9d6;
  #L17f9a4.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17f9a8.  call temp:= `v`(v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f9ae.  v3:= temp @kind wide;
  #L17f9b0.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17f9b4.  v5:= (`long`) v5 @kind i2l;
  #L17f9b6.  v3:= v3 + v5 @kind long;
  #L17f9b8.  v5:= lcmp(v1, v3);
  #L17f9bc.  if v5 > 0 then goto L17f9c2;
  #L17f9c0.  goto L17f9c4;
  #L17f9c2.  v8:= 0I;
  #L17f9c4.  if v8 == 0 then goto L17f9ca;
  #L17f9c8.  goto L17f9d6;
  #L17f9ca.  v1:= new `java.lang.AssertionError`;
  #L17f9ce.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17f9d4.  throw v1;
  #L17f9d6.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlinx.coroutines.flow.SharedFlowImpl$a` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.a:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/SharedFlowImpl$a;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17f59c.  call `l`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:(Lkotlinx/coroutines/flow/SharedFlowImpl$a;)V` @kind direct;
  #L17f5a2.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.b:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17f5b4.  call `s`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Ljava/lang/Object;)V` @kind direct;
  #L17f5ba.  return @kind void;
}
procedure `kotlin.coroutines.Continuation`[] `c`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlin.coroutines.Continuation`[] v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.c:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17f068.  call temp:= `t`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L17f06e.  v0:= temp @kind object;
  #L17f070.  return v0 @kind object;
}
procedure `int` `d`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.d:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17ea08.  v0:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17ea0c.  return v0;
}
procedure `long` `e`(`kotlinx.coroutines.flow.SharedFlowImpl` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.e:(Lkotlinx/coroutines/flow/SharedFlowImpl;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L17f450.  call temp:= `v`(v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f456.  v0:= temp @kind wide;
  #L17f458.  return v0 @kind wide;
}
procedure `int` `f`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.f:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17ea20.  v0:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17ea24.  return v0;
}
procedure `int` `g`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.g:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17ea38.  call temp:= `z`(v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()I` @kind direct;
  #L17ea3e.  v0:= temp;
  #L17ea40.  return v0;
}
procedure `void` `h`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.h:(Lkotlinx/coroutines/flow/SharedFlowImpl;I)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17f5cc.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v1;
  #L17f5d0.  return @kind void;
}
procedure `boolean` `i`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.i:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17e834.  call temp:= `B`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.B:(Ljava/lang/Object;)Z` @kind direct;
  #L17e83a.  v0:= temp;
  #L17e83c.  return v0;
}
procedure `long` `j`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlinx.coroutines.flow.i` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.j:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/i;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L17f46c.  call temp:= `D`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.D:(Lkotlinx/coroutines/flow/i;)J` @kind direct;
  #L17f472.  v0:= temp @kind wide;
  #L17f474.  return v0 @kind wide;
}
procedure `java.lang.Object` `k`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `kotlinx.coroutines.flow.i` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:(Lkotlinx/coroutines/flow/i;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L17ea9c.  v0:= new `kotlinx.coroutines.CancellableContinuationImpl`;
  #L17eaa0.  call temp:= `intercepted`(v8) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L17eaa6.  v1:= temp @kind object;
  #L17eaa8.  v2:= 1I;
  #L17eaaa.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L17eab0.  call `initCancellability`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.initCancellability:()V` @kind virtual;
  #L17eab6.  @monitorenter v6
  #L17eab8.  call temp:= `j`(v6, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.j:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/i;)J` @kind static;
  #L17eabe.  v1:= temp @kind wide;
  #L17eac0.  v3:= 0L;
  #L17eac4.  v5:= lcmp(v1, v3);
  #L17eac8.  if v5 >= 0 then goto L17ead6;
  #L17eacc.  v7.`kotlinx.coroutines.flow.i.b` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L17ead0.  v7.`kotlinx.coroutines.flow.i.b` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L17ead4.  goto L17eaec;
  #L17ead6.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17eada.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L17eade.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L17eae4.  v7:= temp @kind object;
  #L17eae6.  call `resumeWith`(v0, v7) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L17eaec.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17eaf0.  @monitorexit v6
  #L17eaf2.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L17eaf8.  v7:= temp @kind object;
  #L17eafa.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17eb00.  v0:= temp @kind object;
  #L17eb02.  if v7 != v0 then goto L17eb0c;
  #L17eb06.  call `probeCoroutineSuspended`(v8) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L17eb0c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17eb12.  v8:= temp @kind object;
  #L17eb14.  if v7 != v8 then goto L17eb1a;
  #L17eb18.  return v7 @kind object;
  #L17eb1a.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17eb1e.  return v7 @kind object;
  #L17eb20.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17eb22.  @monitorexit v6
  #L17eb24.  throw v7;
  catch `java.lang.Throwable` @[L17eab8..L17eaf0] goto L17eb20;
}
procedure `void` `l`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl$a` v6 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:(Lkotlinx/coroutines/flow/SharedFlowImpl$a;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L17f5e4.  @monitorenter v5
  #L17f5e6.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl$a.b` @type ^`long` @kind wide;
  #L17f5ea.  call temp:= `v`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f5f0.  v2:= temp @kind wide;
  #L17f5f2.  v4:= lcmp(v0, v2);
  #L17f5f6.  if v4 >= 0 then goto L17f5fe;
  #L17f5fa.  @monitorexit v5
  #L17f5fc.  return @kind void;
  #L17f5fe.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f602.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17f608.  v1:= v6.`kotlinx.coroutines.flow.SharedFlowImpl$a.b` @type ^`long` @kind wide;
  #L17f60c.  call temp:= `access$getBufferAt`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L17f612.  v1:= temp @kind object;
  #L17f614.  if v1 == v6 then goto L17f61c;
  #L17f618.  @monitorexit v5
  #L17f61a.  return @kind void;
  #L17f61c.  v1:= v6.`kotlinx.coroutines.flow.SharedFlowImpl$a.b` @type ^`long` @kind wide;
  #L17f620.  v6:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L17f624.  call `access$setBufferAt`(v0, v1, v6) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17f62a.  call `m`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.m:()V` @kind direct;
  #L17f630.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17f634.  @monitorexit v5
  #L17f636.  return @kind void;
  #L17f638.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17f63a.  @monitorexit v5
  #L17f63c.  throw v6;
  catch `java.lang.Throwable` @[L17f5e6..L17f5f2] goto L17f638;
  catch `java.lang.Throwable` @[L17f5fe..L17f614] goto L17f638;
  catch `java.lang.Throwable` @[L17f61c..L17f634] goto L17f638;
}
procedure `void` `m`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.m:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L17f66c.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17f670.  if v0 != 0 then goto L17f680;
  #L17f674.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f678.  v1:= 1I;
  #L17f67a.  if v0 > v1 then goto L17f680;
  #L17f67e.  return @kind void;
  #L17f680.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f684.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17f68a.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f68e.  if v1 <= 0 then goto L17f6e6;
  #L17f692.  call temp:= `v`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f698.  v1:= temp @kind wide;
  #L17f69a.  call temp:= `z`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()I` @kind direct;
  #L17f6a0.  v3:= temp;
  #L17f6a2.  v3:= (`long`) v3 @kind i2l;
  #L17f6a4.  v1:= v1 + v3 @kind long;
  #L17f6a6.  v3:= 1L;
  #L17f6aa.  v1:= v1 - v3 @kind long;
  #L17f6ac.  call temp:= `access$getBufferAt`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L17f6b2.  v1:= temp @kind object;
  #L17f6b4.  v2:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L17f6b8.  if v1 != v2 then goto L17f6e6;
  #L17f6bc.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f6c0.  v1:= v1 + -1;
  #L17f6c4.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v1;
  #L17f6c8.  call temp:= `v`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f6ce.  v1:= temp @kind wide;
  #L17f6d0.  call temp:= `z`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()I` @kind direct;
  #L17f6d6.  v3:= temp;
  #L17f6d8.  v3:= (`long`) v3 @kind i2l;
  #L17f6da.  v1:= v1 + v3 @kind long;
  #L17f6dc.  v3:= 0I;
  #L17f6de.  call `access$setBufferAt`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17f6e4.  goto L17f68a;
  #L17f6e6.  return @kind void;
}
procedure `void` `n`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this, `long` v10 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.n:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L17f6f8.  call temp:= `access$getNCollectors`(v9) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L17f6fe.  v0:= temp;
  #L17f700.  if v0 != 0 then goto L17f706;
  #L17f704.  goto L17f74a;
  #L17f706.  call temp:= `access$getSlots`(v9) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L17f70c.  v0:= temp @kind object;
  #L17f70e.  if v0 != 0 then goto L17f714;
  #L17f712.  goto L17f74a;
  #L17f714.  v1:= length @variable v0;
  #L17f716.  v2:= 0I;
  #L17f718.  if v2 >= v1 then goto L17f74a;
  #L17f71c.  v3:= v0[v2] @kind object;
  #L17f720.  if v3 == 0 then goto L17f744;
  #L17f724.  v3:= (`kotlinx.coroutines.flow.i`) v3 @kind object;
  #L17f728.  v4:= v3.`kotlinx.coroutines.flow.i.a` @type ^`long` @kind wide;
  #L17f72c.  v6:= 0L;
  #L17f730.  v8:= lcmp(v4, v6);
  #L17f734.  if v8 < 0 then goto L17f744;
  #L17f738.  v6:= lcmp(v4, v10);
  #L17f73c.  if v6 >= 0 then goto L17f744;
  #L17f740.  v3.`kotlinx.coroutines.flow.i.a` @type ^`long` := v10 @kind wide;
  #L17f744.  v2:= v2 + 1;
  #L17f748.  goto L17f718;
  #L17f74a.  v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v10 @kind wide;
  #L17f74e.  return @kind void;
}
procedure `void` `q`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L17f760.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f764.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17f76a.  call temp:= `v`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f770.  v1:= temp @kind wide;
  #L17f772.  v3:= 0I;
  #L17f774.  call `access$setBufferAt`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17f77a.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17f77e.  v0:= v0 + -1;
  #L17f782.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v0;
  #L17f786.  call temp:= `v`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f78c.  v0:= temp @kind wide;
  #L17f78e.  v2:= 1L;
  #L17f792.  v0:= v0 + v2 @kind long;
  #L17f794.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17f798.  v4:= lcmp(v2, v0);
  #L17f79c.  if v4 >= 0 then goto L17f7a4;
  #L17f7a0.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` := v0 @kind wide;
  #L17f7a4.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f7a8.  v4:= lcmp(v2, v0);
  #L17f7ac.  if v4 >= 0 then goto L17f7b6;
  #L17f7b0.  call `n`(v5, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.n:(J)V` @kind direct;
  #L17f7b6.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17f7bc.  v2:= temp;
  #L17f7be.  if v2 == 0 then goto L17f7ea;
  #L17f7c2.  call temp:= `v`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f7c8.  v2:= temp @kind wide;
  #L17f7ca.  v4:= lcmp(v2, v0);
  #L17f7ce.  if v4 != 0 then goto L17f7d6;
  #L17f7d2.  v0:= 1I;
  #L17f7d4.  goto L17f7d8;
  #L17f7d6.  v0:= 0I;
  #L17f7d8.  if v0 == 0 then goto L17f7de;
  #L17f7dc.  goto L17f7ea;
  #L17f7de.  v0:= new `java.lang.AssertionError`;
  #L17f7e2.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17f7e8.  throw v0;
  #L17f7ea.  return @kind void;
}
procedure `java.lang.Object` `r`(`kotlinx.coroutines.flow.SharedFlowImpl` v10 @kind this, `java.lang.Object` v11 @kind object, `kotlin.coroutines.Continuation` v12 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.r:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L17ed70.  v6:= new `kotlinx.coroutines.CancellableContinuationImpl`;
  #L17ed74.  call temp:= `intercepted`(v12) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L17ed7a.  v0:= temp @kind object;
  #L17ed7c.  v7:= 1I;
  #L17ed7e.  call `<init>`(v6, v0, v7) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L17ed84.  call `initCancellability`(v6) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.initCancellability:()V` @kind virtual;
  #L17ed8a.  v8:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L17ed8e.  @monitorenter v10
  #L17ed90.  call temp:= `i`(v10, v11) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.i:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)Z` @kind static;
  #L17ed96.  v0:= temp;
  #L17ed98.  if v0 == 0 then goto L17edbe;
  #L17ed9c.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17eda0.  v0:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L17eda4.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L17edaa.  v11:= temp @kind object;
  #L17edac.  call `resumeWith`(v6, v11) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L17edb2.  call temp:= `c`(v10, v8) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.c:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind static;
  #L17edb8.  v11:= temp @kind object;
  #L17edba.  v0:= 0I;
  #L17edbc.  goto L17ee12;
  #L17edbe.  v9:= new `kotlinx.coroutines.flow.SharedFlowImpl$a`;
  #L17edc2.  call temp:= `e`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.e:(Lkotlinx/coroutines/flow/SharedFlowImpl;)J` @kind static;
  #L17edc8.  v0:= temp @kind wide;
  #L17edca.  call temp:= `g`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.g:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L17edd0.  v2:= temp;
  #L17edd2.  v2:= (`long`) v2 @kind i2l;
  #L17edd4.  v2:= v2 + v0 @kind long;
  #L17edd6.  v0:= v9 @kind object;
  #L17edd8.  v1:= v10 @kind object;
  #L17edda.  v4:= v11 @kind object;
  #L17eddc.  v5:= v6 @kind object;
  #L17edde.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl$a;.<init>:(Lkotlinx/coroutines/flow/SharedFlowImpl;JLjava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L17ede4.  call `b`(v10, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.b:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)V` @kind static;
  #L17edea.  call temp:= `f`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.f:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L17edf0.  v11:= temp;
  #L17edf2.  v11:= v11 + v7 @kind int;
  #L17edf4.  call `h`(v10, v11) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.h:(Lkotlinx/coroutines/flow/SharedFlowImpl;I)V` @kind static;
  #L17edfa.  call temp:= `d`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.d:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L17ee00.  v11:= temp;
  #L17ee02.  if v11 != 0 then goto L17ee0e;
  #L17ee06.  call temp:= `c`(v10, v8) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.c:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind static;
  #L17ee0c.  v8:= temp @kind object;
  #L17ee0e.  v11:= v8 @kind object;
  #L17ee10.  v0:= v9 @kind object;
  #L17ee12.  @monitorexit v10
  #L17ee14.  if v0 != 0 then goto L17ee1a;
  #L17ee18.  goto L17ee20;
  #L17ee1a.  call `disposeOnCancellation`(v6, v0) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.disposeOnCancellation:(Lkotlinx/coroutines/CancellableContinuation;Lkotlinx/coroutines/DisposableHandle;)V` @kind static;
  #L17ee20.  v0:= 0I;
  #L17ee22.  v1:= length @variable v11;
  #L17ee24.  if v0 >= v1 then goto L17ee4e;
  #L17ee28.  v2:= v11[v0] @kind object;
  #L17ee2c.  v0:= v0 + 1;
  #L17ee30.  if v2 != 0 then goto L17ee36;
  #L17ee34.  goto L17ee24;
  #L17ee36.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17ee3a.  v4:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L17ee3e.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L17ee44.  v3:= temp @kind object;
  #L17ee46.  call `resumeWith`(v2, v3) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L17ee4c.  goto L17ee24;
  #L17ee4e.  call temp:= `getResult`(v6) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L17ee54.  v11:= temp @kind object;
  #L17ee56.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17ee5c.  v0:= temp @kind object;
  #L17ee5e.  if v11 != v0 then goto L17ee68;
  #L17ee62.  call `probeCoroutineSuspended`(v12) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L17ee68.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17ee6e.  v12:= temp @kind object;
  #L17ee70.  if v11 != v12 then goto L17ee76;
  #L17ee74.  return v11 @kind object;
  #L17ee76.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17ee7a.  return v11 @kind object;
  #L17ee7c.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17ee7e.  @monitorexit v10
  #L17ee80.  throw v11;
  catch `java.lang.Throwable` @[L17ed90..L17ee0e] goto L17ee7c;
}
procedure `void` `s`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L17f7fc.  call temp:= `z`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()I` @kind direct;
  #L17f802.  v0:= temp;
  #L17f804.  v1:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f808.  v2:= 2I;
  #L17f80a.  if v1 != 0 then goto L17f81c;
  #L17f80e.  v1:= 0I;
  #L17f810.  v3:= 0I;
  #L17f812.  call temp:= `A`(v6, v1, v3, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.A:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind direct;
  #L17f818.  v1:= temp @kind object;
  #L17f81a.  goto L17f830;
  #L17f81c.  v3:= length @variable v1;
  #L17f81e.  if v0 < v3 then goto L17f830;
  #L17f822.  v3:= length @variable v1;
  #L17f824.  v3:= v3 * 2;
  #L17f828.  call temp:= `A`(v6, v1, v0, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.A:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind direct;
  #L17f82e.  v1:= temp @kind object;
  #L17f830.  call temp:= `v`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f836.  v2:= temp @kind wide;
  #L17f838.  v4:= (`long`) v0 @kind i2l;
  #L17f83a.  v2:= v2 + v4 @kind long;
  #L17f83c.  call `access$setBufferAt`(v1, v2, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17f842.  return @kind void;
}
procedure `kotlin.coroutines.Continuation`[] `t`(`kotlinx.coroutines.flow.SharedFlowImpl` v11 @kind this, `kotlin.coroutines.Continuation`[] v12 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L17f084.  v0:= length @variable v12;
  #L17f086.  call temp:= `access$getNCollectors`(v11) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L17f08c.  v1:= temp;
  #L17f08e.  if v1 != 0 then goto L17f094;
  #L17f092.  goto L17f11a;
  #L17f094.  call temp:= `access$getSlots`(v11) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L17f09a.  v1:= temp @kind object;
  #L17f09c.  if v1 != 0 then goto L17f0a2;
  #L17f0a0.  goto L17f11a;
  #L17f0a2.  v2:= length @variable v1;
  #L17f0a4.  v3:= 0I;
  #L17f0a6.  if v3 >= v2 then goto L17f11a;
  #L17f0aa.  v4:= v1[v3] @kind object;
  #L17f0ae.  if v4 == 0 then goto L17f114;
  #L17f0b2.  v4:= (`kotlinx.coroutines.flow.i`) v4 @kind object;
  #L17f0b6.  v5:= v4.`kotlinx.coroutines.flow.i.b` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L17f0ba.  if v5 != 0 then goto L17f0c0;
  #L17f0be.  goto L17f114;
  #L17f0c0.  call temp:= `D`(v11, v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.D:(Lkotlinx/coroutines/flow/i;)J` @kind direct;
  #L17f0c6.  v6:= temp @kind wide;
  #L17f0c8.  v8:= 0L;
  #L17f0cc.  v10:= lcmp(v6, v8);
  #L17f0d0.  if v10 >= 0 then goto L17f0d6;
  #L17f0d4.  goto L17f114;
  #L17f0d6.  v6:= length @variable v12;
  #L17f0d8.  if v0 < v6 then goto L17f0fe;
  #L17f0dc.  v6:= length @variable v12;
  #L17f0de.  v7:= 2I;
  #L17f0e0.  v6:= v6 * 2;
  #L17f0e4.  call temp:= `max`(v7, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L17f0ea.  v6:= temp;
  #L17f0ec.  call temp:= `copyOf`(v12, v6) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L17f0f2.  v12:= temp @kind object;
  #L17f0f4.  v6:= "java.util.Arrays.copyOf(this, newSize)" @kind object;
  #L17f0f8.  call `checkNotNullExpressionValue`(v12, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17f0fe.  v6:= v12 @kind object;
  #L17f100.  v6:= (`kotlin.coroutines.Continuation`[]) v6 @kind object;
  #L17f104.  v7:= v0 + 1;
  #L17f108.  v6[v0]:= v5 @kind object;
  #L17f10c.  v0:= 0I;
  #L17f10e.  v4.`kotlinx.coroutines.flow.i.b` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L17f112.  v0:= v7;
  #L17f114.  v3:= v3 + 1;
  #L17f118.  goto L17f0a6;
  #L17f11a.  v12:= (`kotlin.coroutines.Continuation`[]) v12 @kind object;
  #L17f11e.  return v12 @kind object;
}
procedure `long` `u`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L17f488.  call temp:= `v`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f48e.  v0:= temp @kind wide;
  #L17f490.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17f494.  v2:= (`long`) v2 @kind i2l;
  #L17f496.  v0:= v0 + v2 @kind long;
  #L17f498.  return v0 @kind wide;
}
procedure `long` `v`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L17f4ac.  v0:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f4b0.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17f4b4.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L17f4ba.  v0:= temp @kind wide;
  #L17f4bc.  return v0 @kind wide;
}
procedure `java.lang.Object` `w`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this, `long` v2 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.w:(J)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L17eea0.  v0:= v1.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17eea4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17eeaa.  call temp:= `access$getBufferAt`(v0, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L17eeb0.  v2:= temp @kind object;
  #L17eeb2.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.flow.SharedFlowImpl$a` @kind boolean;
  #L17eeb6.  if v3 == 0 then goto L17eec2;
  #L17eeba.  v2:= (`kotlinx.coroutines.flow.SharedFlowImpl$a`) v2 @kind object;
  #L17eebe.  v2:= v2.`kotlinx.coroutines.flow.SharedFlowImpl$a.c` @type ^`java.lang.Object` @kind object;
  #L17eec2.  return v2 @kind object;
}
procedure `long` `x`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.x:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L17f4d0.  call temp:= `v`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f4d6.  v0:= temp @kind wide;
  #L17f4d8.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17f4dc.  v2:= (`long`) v2 @kind i2l;
  #L17f4de.  v0:= v0 + v2 @kind long;
  #L17f4e0.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f4e4.  v2:= (`long`) v2 @kind i2l;
  #L17f4e6.  v0:= v0 + v2 @kind long;
  #L17f4e8.  return v0 @kind wide;
}
procedure `int` `y`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.y:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L17ea54.  call temp:= `v`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17ea5a.  v0:= temp @kind wide;
  #L17ea5c.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17ea60.  v2:= (`long`) v2 @kind i2l;
  #L17ea62.  v0:= v0 + v2 @kind long;
  #L17ea64.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17ea68.  v0:= v0 - v2 @kind long;
  #L17ea6a.  v1:= (`int`) v0 @kind l2i;
  #L17ea6c.  return v1;
}
procedure `int` `z`(`kotlinx.coroutines.flow.SharedFlowImpl` v2 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L17ea80.  v0:= v2.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17ea84.  v1:= v2.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17ea88.  v0:= v0 + v1 @kind int;
  #L17ea8a.  return v0;
}
procedure `kotlin.coroutines.Continuation`[] `G`(`kotlinx.coroutines.flow.SharedFlowImpl` v22 @kind this, `long` v23 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.G:(J)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L17f130.  v9:= v22 @kind object;
  #L17f134.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17f13a.  v0:= temp;
  #L17f13c.  if v0 == 0 then goto L17f164;
  #L17f140.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f144.  v2:= lcmp(v23, v0);
  #L17f148.  if v2 < 0 then goto L17f150;
  #L17f14c.  v0:= 1I;
  #L17f14e.  goto L17f152;
  #L17f150.  v0:= 0I;
  #L17f152.  if v0 == 0 then goto L17f158;
  #L17f156.  goto L17f164;
  #L17f158.  v0:= new `java.lang.AssertionError`;
  #L17f15c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17f162.  throw v0;
  #L17f164.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f168.  v2:= lcmp(v23, v0);
  #L17f16c.  if v2 <= 0 then goto L17f176;
  #L17f170.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L17f174.  return v0 @kind object;
  #L17f176.  call temp:= `v`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:()J` @kind direct;
  #L17f17c.  v0:= temp @kind wide;
  #L17f17e.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L17f182.  v2:= (`long`) v2 @kind i2l;
  #L17f184.  v2:= v2 + v0 @kind long;
  #L17f186.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17f18a.  v5:= 1L;
  #L17f18e.  if v4 != 0 then goto L17f19c;
  #L17f192.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f196.  if v4 <= 0 then goto L17f19c;
  #L17f19a.  v2:= v2 + v5 @kind long;
  #L17f19c.  call temp:= `access$getNCollectors`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L17f1a2.  v4:= temp;
  #L17f1a4.  if v4 != 0 then goto L17f1aa;
  #L17f1a8.  goto L17f1ec;
  #L17f1aa.  call temp:= `access$getSlots`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L17f1b0.  v4:= temp @kind object;
  #L17f1b2.  if v4 != 0 then goto L17f1b8;
  #L17f1b6.  goto L17f1ec;
  #L17f1b8.  v7:= length @variable v4;
  #L17f1ba.  v8:= 0I;
  #L17f1bc.  if v8 >= v7 then goto L17f1ec;
  #L17f1c0.  v12:= v4[v8] @kind object;
  #L17f1c4.  if v12 == 0 then goto L17f1e6;
  #L17f1c8.  v12:= (`kotlinx.coroutines.flow.i`) v12 @kind object;
  #L17f1cc.  v12:= v12.`kotlinx.coroutines.flow.i.a` @type ^`long` @kind wide;
  #L17f1d0.  v14:= 0L;
  #L17f1d4.  v16:= lcmp(v12, v14);
  #L17f1d8.  if v16 < 0 then goto L17f1e6;
  #L17f1dc.  v14:= lcmp(v12, v2);
  #L17f1e0.  if v14 >= 0 then goto L17f1e6;
  #L17f1e4.  v2:= v12 @kind wide;
  #L17f1e6.  v8:= v8 + 1;
  #L17f1ea.  goto L17f1bc;
  #L17f1ec.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L17f1f2.  v4:= temp;
  #L17f1f4.  if v4 == 0 then goto L17f21c;
  #L17f1f8.  v7:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f1fc.  v4:= lcmp(v2, v7);
  #L17f200.  if v4 < 0 then goto L17f208;
  #L17f204.  v4:= 1I;
  #L17f206.  goto L17f20a;
  #L17f208.  v4:= 0I;
  #L17f20a.  if v4 == 0 then goto L17f210;
  #L17f20e.  goto L17f21c;
  #L17f210.  v0:= new `java.lang.AssertionError`;
  #L17f214.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L17f21a.  throw v0;
  #L17f21c.  v7:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f220.  v4:= lcmp(v2, v7);
  #L17f224.  if v4 > 0 then goto L17f22e;
  #L17f228.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L17f22c.  return v0 @kind object;
  #L17f22e.  call temp:= `u`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:()J` @kind direct;
  #L17f234.  v7:= temp @kind wide;
  #L17f236.  call temp:= `getNCollectors`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L17f23c.  v4:= temp;
  #L17f23e.  if v4 <= 0 then goto L17f25c;
  #L17f242.  v12:= v7 - v2 @kind long;
  #L17f246.  v4:= (`int`) v12 @kind l2i;
  #L17f248.  v12:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f24c.  v13:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17f250.  v13:= v13 - v4 @kind int;
  #L17f252.  call temp:= `min`(v12, v13) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L17f258.  v4:= temp;
  #L17f25a.  goto L17f260;
  #L17f25c.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f260.  v12:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L17f264.  v13:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L17f268.  v13:= (`long`) v13 @kind i2l;
  #L17f26a.  v13:= v13 + v7 @kind long;
  #L17f26c.  if v4 <= 0 then goto L17f30c;
  #L17f270.  v12:= new `kotlin.coroutines.Continuation`[v4];
  #L17f274.  v15:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f278.  call `checkNotNull`(v15) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17f27e.  v16:= lcmp(v7, v13);
  #L17f282.  if v16 >= 0 then goto L17f30c;
  #L17f286.  v10:= v7 @kind wide;
  #L17f288.  v17:= 0I;
  #L17f28c.  v18:= v7 + v5 @kind long;
  #L17f290.  call temp:= `access$getBufferAt`(v15, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L17f296.  v5:= temp @kind object;
  #L17f298.  v6:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L17f29c.  if v5 == v6 then goto L17f2ee;
  #L17f2a0.  if v5 == 0 then goto L17f2de;
  #L17f2a4.  v5:= (`kotlinx.coroutines.flow.SharedFlowImpl$a`) v5 @kind object;
  #L17f2a8.  v20:= v2 @kind wide;
  #L17f2ac.  v2:= v17 + 1;
  #L17f2b0.  v3:= v5.`kotlinx.coroutines.flow.SharedFlowImpl$a.d` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L17f2b4.  v12[v17]:= v3 @kind object;
  #L17f2b8.  call `access$setBufferAt`(v15, v7, v6) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17f2be.  v3:= v5.`kotlinx.coroutines.flow.SharedFlowImpl$a.c` @type ^`java.lang.Object` @kind object;
  #L17f2c2.  call `access$setBufferAt`(v15, v10, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L17f2c8.  v5:= 1L;
  #L17f2cc.  v7:= v10 + v5 @kind long;
  #L17f2d0.  if v2 < v4 then goto L17f2d6;
  #L17f2d4.  goto L17f310;
  #L17f2d6.  v17:= v2;
  #L17f2da.  v10:= v7 @kind wide;
  #L17f2dc.  goto L17f2f2;
  #L17f2de.  v0:= new `java.lang.NullPointerException`;
  #L17f2e2.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.flow.SharedFlowImpl.Emitter" @kind object;
  #L17f2e6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17f2ec.  throw v0;
  #L17f2ee.  v20:= v2 @kind wide;
  #L17f2f2.  v2:= lcmp(v18, v13);
  #L17f2f6.  if v2 < 0 then goto L17f2fe;
  #L17f2fa.  v7:= v10 @kind wide;
  #L17f2fc.  goto L17f310;
  #L17f2fe.  v7:= v18 @kind wide;
  #L17f302.  v2:= v20 @kind wide;
  #L17f306.  v5:= 1L;
  #L17f30a.  goto L17f28c;
  #L17f30c.  v20:= v2 @kind wide;
  #L17f310.  v0:= v7 - v0 @kind long;
  #L17f314.  v1:= (`int`) v0 @kind l2i;
  #L17f316.  call temp:= `getNCollectors`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L17f31c.  v0:= temp;
  #L17f31e.  if v0 != 0 then goto L17f326;
  #L17f322.  v3:= v7 @kind wide;
  #L17f324.  goto L17f32a;
  #L17f326.  v3:= v20 @kind wide;
  #L17f32a.  v5:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17f32e.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L17f332.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L17f338.  v0:= temp;
  #L17f33a.  v0:= (`long`) v0 @kind i2l;
  #L17f33c.  v0:= v7 - v0 @kind long;
  #L17f340.  call temp:= `max`(v5, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L17f346.  v0:= temp @kind wide;
  #L17f348.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L17f34c.  if v2 != 0 then goto L17f382;
  #L17f350.  v2:= lcmp(v0, v13);
  #L17f354.  if v2 >= 0 then goto L17f382;
  #L17f358.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f35c.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17f362.  call temp:= `access$getBufferAt`(v2, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L17f368.  v2:= temp @kind object;
  #L17f36a.  v5:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L17f36e.  call temp:= `areEqual`(v2, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L17f374.  v2:= temp;
  #L17f376.  if v2 == 0 then goto L17f382;
  #L17f37a.  v5:= 1L;
  #L17f37e.  v7:= v7 + v5 @kind long;
  #L17f380.  v0:= v0 + v5 @kind long;
  #L17f382.  v1:= v0 @kind wide;
  #L17f384.  v5:= v7 @kind wide;
  #L17f386.  v0:= v22 @kind object;
  #L17f38a.  v7:= v13 @kind wide;
  #L17f38c.  call `F`(v0, v1, v3, v5, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.F:(JJJJ)V` @kind direct;
  #L17f392.  call `m`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.m:()V` @kind direct;
  #L17f398.  v0:= length @variable v12;
  #L17f39a.  if v0 != 0 then goto L17f3a2;
  #L17f39e.  v10:= 1I;
  #L17f3a0.  goto L17f3a4;
  #L17f3a2.  v10:= 0I;
  #L17f3a4.  v0:= 1I;
  #L17f3a6.  v0:= v0 ^~ v10 @kind int;
  #L17f3a8.  if v0 == 0 then goto L17f3b4;
  #L17f3ac.  call temp:= `t`(v9, v12) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L17f3b2.  v12:= temp @kind object;
  #L17f3b4.  return v12 @kind object;
}
procedure `long` `H`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.H:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L17f550.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17f554.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f558.  v4:= lcmp(v0, v2);
  #L17f55c.  if v4 >= 0 then goto L17f564;
  #L17f560.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v0 @kind wide;
  #L17f564.  return v0 @kind wide;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.SharedFlowImpl` v8 @kind this, `kotlinx.coroutines.flow.FlowCollector` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L17eb44.  v0:= instanceof @variable v10 @type ^`kotlinx.coroutines.flow.SharedFlowImpl$b` @kind boolean;
  #L17eb48.  if v0 == 0 then goto L17eb6a;
  #L17eb4c.  v0:= v10 @kind object;
  #L17eb4e.  v0:= (`kotlinx.coroutines.flow.SharedFlowImpl$b`) v0 @kind object;
  #L17eb52.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int`;
  #L17eb56.  v2:= -2147483648I;
  #L17eb5a.  v3:= v1 ^& v2 @kind int;
  #L17eb5e.  if v3 == 0 then goto L17eb6a;
  #L17eb62.  v1:= v1 - v2 @kind int;
  #L17eb64.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v1;
  #L17eb68.  goto L17eb74;
  #L17eb6a.  v0:= new `kotlinx.coroutines.flow.SharedFlowImpl$b`;
  #L17eb6e.  call `<init>`(v0, v8, v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl$b;.<init>:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L17eb74.  v10:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.e` @type ^`java.lang.Object` @kind object;
  #L17eb78.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17eb7e.  v1:= temp @kind object;
  #L17eb80.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int`;
  #L17eb84.  v3:= 3I;
  #L17eb86.  v4:= 2I;
  #L17eb88.  v5:= 1I;
  #L17eb8a.  if v2 == 0 then goto L17ec26;
  #L17eb8e.  if v2 == v5 then goto L17ebfe;
  #L17eb92.  if v2 == v4 then goto L17ebd6;
  #L17eb96.  if v2 != v3 then goto L17ebc6;
  #L17eb9a.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` @kind object;
  #L17eb9e.  v9:= (`kotlinx.coroutines.Job`) v9 @kind object;
  #L17eba2.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L17eba6.  v2:= (`kotlinx.coroutines.flow.i`) v2 @kind object;
  #L17ebaa.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L17ebae.  v5:= (`kotlinx.coroutines.flow.FlowCollector`) v5 @kind object;
  #L17ebb2.  v6:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L17ebb6.  v6:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v6 @kind object;
  #L17ebba.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17ebc0.  v10:= v9 @kind object;
  #L17ebc2.  v9:= v5 @kind object;
  #L17ebc4.  goto L17ec80;
  #L17ebc6.  v9:= new `java.lang.IllegalStateException`;
  #L17ebca.  v10:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L17ebce.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17ebd4.  throw v9;
  #L17ebd6.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` @kind object;
  #L17ebda.  v9:= (`kotlinx.coroutines.Job`) v9 @kind object;
  #L17ebde.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L17ebe2.  v2:= (`kotlinx.coroutines.flow.i`) v2 @kind object;
  #L17ebe6.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L17ebea.  v5:= (`kotlinx.coroutines.flow.FlowCollector`) v5 @kind object;
  #L17ebee.  v6:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L17ebf2.  v6:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v6 @kind object;
  #L17ebf6.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17ebfc.  goto L17ec84;
  #L17ebfe.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L17ec02.  v2:= v9 @kind object;
  #L17ec04.  v2:= (`kotlinx.coroutines.flow.i`) v2 @kind object;
  #L17ec08.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L17ec0c.  v9:= (`kotlinx.coroutines.flow.FlowCollector`) v9 @kind object;
  #L17ec10.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L17ec14.  v6:= v5 @kind object;
  #L17ec16.  v6:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v6 @kind object;
  #L17ec1a.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17ec20.  goto L17ec68;
  #L17ec22.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17ec24.  goto L17ece8;
  #L17ec26.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17ec2c.  call temp:= `allocateSlot`(v8) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.allocateSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L17ec32.  v10:= temp @kind object;
  #L17ec34.  v2:= v10 @kind object;
  #L17ec36.  v2:= (`kotlinx.coroutines.flow.i`) v2 @kind object;
  #L17ec3a.  v10:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.SubscribedFlowCollector` @kind boolean;
  #L17ec3e.  if v10 == 0 then goto L17ec66;
  #L17ec42.  v10:= v9 @kind object;
  #L17ec44.  v10:= (`kotlinx.coroutines.flow.SubscribedFlowCollector`) v10 @kind object;
  #L17ec48.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` := v8 @kind object;
  #L17ec4c.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` := v9 @kind object;
  #L17ec50.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` := v2 @kind object;
  #L17ec54.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v5;
  #L17ec58.  call temp:= `onSubscription`(v10, v0) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.onSubscription:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L17ec5e.  v10:= temp @kind object;
  #L17ec60.  if v10 != v1 then goto L17ec66;
  #L17ec64.  return v1 @kind object;
  #L17ec66.  v6:= v8 @kind object;
  #L17ec68.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L17ec6e.  v10:= temp @kind object;
  #L17ec70.  v5:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L17ec74.  call temp:= `get`(v10, v5) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L17ec7a.  v10:= temp @kind object;
  #L17ec7c.  v10:= (`kotlinx.coroutines.Job`) v10 @kind object;
  #L17ec80.  v5:= v9 @kind object;
  #L17ec82.  v9:= v10 @kind object;
  #L17ec84.  call temp:= `E`(v6, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.E:(Lkotlinx/coroutines/flow/i;)Ljava/lang/Object;` @kind direct;
  #L17ec8a.  v10:= temp @kind object;
  #L17ec8c.  v7:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L17ec90.  if v10 == v7 then goto L17ecc2;
  #L17ec94.  if v9 != 0 then goto L17ec9a;
  #L17ec98.  goto L17eca0;
  #L17ec9a.  call `ensureActive`(v9) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlinx/coroutines/Job;)V` @kind static;
  #L17eca0.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` := v6 @kind object;
  #L17eca4.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` := v5 @kind object;
  #L17eca8.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` := v2 @kind object;
  #L17ecac.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` := v9 @kind object;
  #L17ecb0.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v3;
  #L17ecb4.  call temp:= `emit`(v5, v10, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L17ecba.  v10:= temp @kind object;
  #L17ecbc.  if v10 != v1 then goto L17ebc0;
  #L17ecc0.  return v1 @kind object;
  #L17ecc2.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` := v6 @kind object;
  #L17ecc6.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` := v5 @kind object;
  #L17ecca.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` := v2 @kind object;
  #L17ecce.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` := v9 @kind object;
  #L17ecd2.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v4;
  #L17ecd6.  call temp:= `k`(v6, v2, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:(Lkotlinx/coroutines/flow/i;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L17ecdc.  v10:= temp @kind object;
  #L17ecde.  if v10 != v1 then goto L17ec84;
  #L17ece2.  return v1 @kind object;
  #L17ece4.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17ece6.  v6:= v8 @kind object;
  #L17ece8.  call `freeSlot`(v6, v2) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.freeSlot:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;)V` @kind virtual;
  #L17ecee.  throw v9;
  catch `java.lang.Throwable` @[L17ebba..L17ebc0] goto L17ec22;
  catch `java.lang.Throwable` @[L17ebf6..L17ebfc] goto L17ec22;
  catch `java.lang.Throwable` @[L17ec1a..L17ec20] goto L17ec22;
  catch `java.lang.Throwable` @[L17ec3a..L17ec60] goto L17ece4;
  catch `java.lang.Throwable` @[L17ec68..L17ecde] goto L17ec22;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `createSlot`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L17f418.  call temp:= `o`(v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:()Lkotlinx/coroutines/flow/i;` @kind virtual;
  #L17f41e.  v0:= temp @kind object;
  #L17f420.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `createSlotArray`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L17f434.  call temp:= `p`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:(I)[Lkotlinx/coroutines/flow/i;` @kind virtual;
  #L17f43a.  v1:= temp @kind object;
  #L17f43c.  return v1 @kind object;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L17ed30.  call temp:= `tryEmit`(v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.tryEmit:(Ljava/lang/Object;)Z` @kind virtual;
  #L17ed36.  v0:= temp;
  #L17ed38.  if v0 == 0 then goto L17ed42;
  #L17ed3c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17ed40.  return v2 @kind object;
  #L17ed42.  call temp:= `r`(v1, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.r:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L17ed48.  v2:= temp @kind object;
  #L17ed4a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17ed50.  v3:= temp @kind object;
  #L17ed52.  if v2 != v3 then goto L17ed58;
  #L17ed56.  return v2 @kind object;
  #L17ed58.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17ed5c.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;

  #L17f3c8.  call temp:= `fuseSharedFlow`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.fuseSharedFlow:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L17f3ce.  v1:= temp @kind object;
  #L17f3d0.  return v1 @kind object;
}
procedure `java.util.List` `getReplayCache`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.getReplayCache:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L17efe0.  @monitorenter v9
  #L17efe2.  call temp:= `y`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.y:()I` @kind direct;
  #L17efe8.  v0:= temp;
  #L17efea.  if v0 != 0 then goto L17effa;
  #L17efee.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L17eff4.  v0:= temp @kind object;
  #L17eff6.  @monitorexit v9
  #L17eff8.  return v0 @kind object;
  #L17effa.  v1:= new `java.util.ArrayList`;
  #L17effe.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L17f004.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L17f008.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17f00e.  v3:= 0I;
  #L17f010.  if v0 <= 0 then goto L17f038;
  #L17f014.  v4:= v3 + 1;
  #L17f018.  v5:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L17f01c.  v7:= (`long`) v3 @kind i2l;
  #L17f01e.  v5:= v5 + v7 @kind long;
  #L17f020.  call temp:= `access$getBufferAt`(v2, v5) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L17f026.  v3:= temp @kind object;
  #L17f028.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L17f02e.  if v4 < v0 then goto L17f034;
  #L17f032.  goto L17f038;
  #L17f034.  v3:= v4;
  #L17f036.  goto L17f014;
  #L17f038.  @monitorexit v9
  #L17f03a.  return v1 @kind object;
  #L17f03c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17f03e.  @monitorexit v9
  #L17f040.  throw v0;
  catch `java.lang.Throwable` @[L17efe2..L17eff6] goto L17f03c;
  catch `java.lang.Throwable` @[L17effa..L17f02e] goto L17f03c;
}
procedure `kotlinx.coroutines.flow.i` `o`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:()Lkotlinx/coroutines/flow/i;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L17f3e4.  v0:= new `kotlinx.coroutines.flow.i`;
  #L17f3e8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/i;.<init>:()V` @kind direct;
  #L17f3ee.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.i`[] `p`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:(I)[Lkotlinx/coroutines/flow/i;` @AccessFlag PROTECTED {
    temp;

  #L17f400.  v1:= new `kotlinx.coroutines.flow.i`[v1];
  #L17f404.  return v1 @kind object;
}
procedure `void` `resetReplayCache`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.resetReplayCache:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L17f854.  @monitorenter v9
  #L17f856.  call temp:= `u`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:()J` @kind direct;
  #L17f85c.  v1:= temp @kind wide;
  #L17f85e.  v3:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L17f862.  call temp:= `u`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:()J` @kind direct;
  #L17f868.  v5:= temp @kind wide;
  #L17f86a.  call temp:= `x`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.x:()J` @kind direct;
  #L17f870.  v7:= temp @kind wide;
  #L17f872.  v0:= v9 @kind object;
  #L17f874.  call `F`(v0, v1, v3, v5, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.F:(JJJJ)V` @kind direct;
  #L17f87a.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17f87e.  @monitorexit v9
  #L17f880.  return @kind void;
  #L17f882.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17f884.  @monitorexit v9
  #L17f886.  throw v0;
  catch `java.lang.Throwable` @[L17f856..L17f87e] goto L17f882;
}
procedure `boolean` `tryEmit`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.tryEmit:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L17e850.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L17e854.  @monitorenter v6
  #L17e856.  call temp:= `B`(v6, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.B:(Ljava/lang/Object;)Z` @kind direct;
  #L17e85c.  v7:= temp;
  #L17e85e.  v1:= 0I;
  #L17e860.  if v7 == 0 then goto L17e870;
  #L17e864.  call temp:= `t`(v6, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L17e86a.  v0:= temp @kind object;
  #L17e86c.  v7:= 1I;
  #L17e86e.  goto L17e872;
  #L17e870.  v7:= 0I;
  #L17e872.  @monitorexit v6
  #L17e874.  v2:= length @variable v0;
  #L17e876.  if v1 >= v2 then goto L17e8a0;
  #L17e87a.  v3:= v0[v1] @kind object;
  #L17e87e.  v1:= v1 + 1;
  #L17e882.  if v3 != 0 then goto L17e888;
  #L17e886.  goto L17e876;
  #L17e888.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L17e88c.  v5:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L17e890.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L17e896.  v4:= temp @kind object;
  #L17e898.  call `resumeWith`(v3, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L17e89e.  goto L17e876;
  #L17e8a0.  return v7;
  #L17e8a2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L17e8a4.  @monitorexit v6
  #L17e8a6.  throw v7;
  catch `java.lang.Throwable` @[L17e856..L17e86c] goto L17e8a2;
}
