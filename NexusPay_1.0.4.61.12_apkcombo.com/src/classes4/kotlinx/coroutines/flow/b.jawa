record `kotlinx.coroutines.flow.b` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlinx.coroutines.channels.ReceiveChannel` `kotlinx.coroutines.flow.b.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlinx.coroutines.flow.b.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.flow.b.consumed` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.flow.b.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L170238.  v0:= constclass @type ^`kotlinx.coroutines.flow.b` @kind object;
  #L17023c.  v1:= "consumed" @kind object;
  #L170240.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L170246.  v0:= temp @kind object;
  #L170248.  `@@kotlinx.coroutines.flow.b.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L17024c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.b` v0 @kind this, `kotlinx.coroutines.channels.ReceiveChannel` v1 @kind object, `boolean` v2 , `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/b;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L170260.  call `<init>`(v0, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L170266.  v0.`kotlinx.coroutines.flow.b.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` := v1 @kind object;
  #L17026a.  v0.`kotlinx.coroutines.flow.b.b` @type ^`boolean` := v2 @kind boolean;
  #L17026e.  v1:= 0I;
  #L170270.  v0.`kotlinx.coroutines.flow.b.consumed` @type ^`int` := v1;
  #L170274.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.b` v6 @kind this, `kotlinx.coroutines.channels.ReceiveChannel` v7 @kind object, `boolean` v8 , `kotlin.coroutines.CoroutineContext` v9 @kind object, `int` v10 , `kotlinx.coroutines.channels.BufferOverflow` v11 @kind object, `int` v12 , `kotlin.jvm.internal.DefaultConstructorMarker` v13 @kind object) @signature `Lkotlinx/coroutines/flow/b;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L170288.  v13:= v12 ^& 4;
  #L17028c.  if v13 == 0 then goto L170294;
  #L170290.  v9:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L170294.  v3:= v9 @kind object;
  #L170296.  v9:= v12 ^& 8;
  #L17029a.  if v9 == 0 then goto L1702a4;
  #L17029e.  v10:= -3I;
  #L1702a0.  v4:= -3I;
  #L1702a2.  goto L1702a6;
  #L1702a4.  v4:= v10;
  #L1702a6.  v9:= v12 ^& 16;
  #L1702aa.  if v9 == 0 then goto L1702b2;
  #L1702ae.  v11:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L1702b2.  v5:= v11 @kind object;
  #L1702b4.  v0:= v6 @kind object;
  #L1702b6.  v1:= v7 @kind object;
  #L1702b8.  v2:= v8;
  #L1702ba.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/b;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L1702c0.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.flow.b` v2 @kind this) @signature `Lkotlinx/coroutines/flow/b;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1702d4.  v0:= v2.`kotlinx.coroutines.flow.b.b` @type ^`boolean` @kind boolean;
  #L1702d8.  if v0 == 0 then goto L170310;
  #L1702dc.  v0:= `@@kotlinx.coroutines.flow.b.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1702e0.  v1:= 1I;
  #L1702e2.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.getAndSet:(Ljava/lang/Object;I)I` @kind virtual;
  #L1702e8.  v0:= temp;
  #L1702ea.  if v0 != 0 then goto L1702f0;
  #L1702ee.  goto L1702f2;
  #L1702f0.  v1:= 0I;
  #L1702f2.  if v1 == 0 then goto L1702f8;
  #L1702f6.  goto L170310;
  #L1702f8.  v0:= new `java.lang.IllegalStateException`;
  #L1702fc.  v1:= "ReceiveChannel.consumeAsFlow can be collected just once" @kind object;
  #L170300.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L170306.  v1:= temp @kind object;
  #L170308.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17030e.  throw v0;
  #L170310.  return @kind void;
}
procedure `java.lang.String` `additionalToStringProps`(`kotlinx.coroutines.flow.b` v2 @kind this) @signature `Lkotlinx/coroutines/flow/b;.additionalToStringProps:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L170184.  v0:= v2.`kotlinx.coroutines.flow.b.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L170188.  v1:= "channel=" @kind object;
  #L17018c.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L170192.  v0:= temp @kind object;
  #L170194.  return v0 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.b` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/b;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1700e4.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L1700e8.  v1:= -3I;
  #L1700ea.  if v0 != v1 then goto L170118;
  #L1700ee.  call `b`(v2) @signature `Lkotlinx/coroutines/flow/b;.b:()V` @kind direct;
  #L1700f4.  v0:= v2.`kotlinx.coroutines.flow.b.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L1700f8.  v1:= v2.`kotlinx.coroutines.flow.b.b` @type ^`boolean` @kind boolean;
  #L1700fc.  call temp:= `a`(v3, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__ChannelsKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L170102.  v3:= temp @kind object;
  #L170104.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L17010a.  v4:= temp @kind object;
  #L17010c.  if v3 != v4 then goto L170112;
  #L170110.  return v3 @kind object;
  #L170112.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L170116.  return v3 @kind object;
  #L170118.  call temp:= `collect`(v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind super;
  #L17011e.  v3:= temp @kind object;
  #L170120.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L170126.  v4:= temp @kind object;
  #L170128.  if v3 != v4 then goto L17012e;
  #L17012c.  return v3 @kind object;
  #L17012e.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L170132.  return v3 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.b` v2 @kind this, `kotlinx.coroutines.channels.ProducerScope` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/b;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L170144.  v0:= new `kotlinx.coroutines.flow.internal.SendingCollector`;
  #L170148.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/flow/internal/SendingCollector;.<init>:(Lkotlinx/coroutines/channels/SendChannel;)V` @kind direct;
  #L17014e.  v3:= v2.`kotlinx.coroutines.flow.b.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L170152.  v1:= v2.`kotlinx.coroutines.flow.b.b` @type ^`boolean` @kind boolean;
  #L170156.  call temp:= `a`(v0, v3, v1, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__ChannelsKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L17015c.  v3:= temp @kind object;
  #L17015e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L170164.  v4:= temp @kind object;
  #L170166.  if v3 != v4 then goto L17016c;
  #L17016a.  return v3 @kind object;
  #L17016c.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L170170.  return v3 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.b` v7 @kind this, `kotlin.coroutines.CoroutineContext` v8 @kind object, `int` v9 , `kotlinx.coroutines.channels.BufferOverflow` v10 @kind object) @signature `Lkotlinx/coroutines/flow/b;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L17020c.  v6:= new `kotlinx.coroutines.flow.b`;
  #L170210.  v1:= v7.`kotlinx.coroutines.flow.b.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L170214.  v2:= v7.`kotlinx.coroutines.flow.b.b` @type ^`boolean` @kind boolean;
  #L170218.  v0:= v6 @kind object;
  #L17021a.  v3:= v8 @kind object;
  #L17021c.  v4:= v9;
  #L17021e.  v5:= v10 @kind object;
  #L170220.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/b;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L170226.  return v6 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `dropChannelOperators`(`kotlinx.coroutines.flow.b` v9 @kind this) @signature `Lkotlinx/coroutines/flow/b;.dropChannelOperators:()Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1701d8.  v8:= new `kotlinx.coroutines.flow.b`;
  #L1701dc.  v1:= v9.`kotlinx.coroutines.flow.b.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L1701e0.  v2:= v9.`kotlinx.coroutines.flow.b.b` @type ^`boolean` @kind boolean;
  #L1701e4.  v3:= 0I;
  #L1701e6.  v4:= 0I;
  #L1701e8.  v5:= 0I;
  #L1701ea.  v6:= 28I;
  #L1701ee.  v7:= 0I;
  #L1701f0.  v0:= v8 @kind object;
  #L1701f2.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/b;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1701f8.  return v8 @kind object;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `produceImpl`(`kotlinx.coroutines.flow.b` v2 @kind this, `kotlinx.coroutines.CoroutineScope` v3 @kind object) @signature `Lkotlinx/coroutines/flow/b;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1701a8.  call `b`(v2) @signature `Lkotlinx/coroutines/flow/b;.b:()V` @kind direct;
  #L1701ae.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L1701b2.  v1:= -3I;
  #L1701b4.  if v0 != v1 then goto L1701be;
  #L1701b8.  v3:= v2.`kotlinx.coroutines.flow.b.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L1701bc.  goto L1701c6;
  #L1701be.  call temp:= `produceImpl`(v2, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind super;
  #L1701c4.  v3:= temp @kind object;
  #L1701c6.  return v3 @kind object;
}
