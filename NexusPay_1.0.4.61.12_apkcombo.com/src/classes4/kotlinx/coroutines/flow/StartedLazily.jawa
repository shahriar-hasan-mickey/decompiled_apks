record `kotlinx.coroutines.flow.StartedLazily` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.SharingStarted` @kind interface {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.StartedLazily` v0 @kind this) @signature `Lkotlinx/coroutines/flow/StartedLazily;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18020c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L180212.  return @kind void;
}
procedure `kotlinx.coroutines.flow.Flow` `command`(`kotlinx.coroutines.flow.StartedLazily` v2 @kind this, `kotlinx.coroutines.flow.StateFlow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily;.command:(Lkotlinx/coroutines/flow/StateFlow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1801e4.  v0:= new `kotlinx.coroutines.flow.StartedLazily$command$1`;
  #L1801e8.  v1:= 0I;
  #L1801ea.  call `<init>`(v0, v3, v1) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1;.<init>:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1801f0.  call temp:= `flow`(v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.flow:(Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L1801f6.  v3:= temp @kind object;
  #L1801f8.  return v3 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.flow.StartedLazily` v1 @kind this) @signature `Lkotlinx/coroutines/flow/StartedLazily;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1801cc.  v0:= "SharingStarted.Lazily" @kind object;
  #L1801d0.  return v0 @kind object;
}
