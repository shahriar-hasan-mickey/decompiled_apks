record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlin.ranges.IntRange` `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9` v0 @kind this, `kotlin.ranges.IntRange` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9;.<init>:(Lkotlin/ranges/IntRange;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L171200.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9.a` @type ^`kotlin.ranges.IntRange` := v1 @kind object;
  #L171204.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17120a.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L17111c.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1` @kind boolean;
  #L171120.  if v0 == 0 then goto L171142;
  #L171124.  v0:= v7 @kind object;
  #L171126.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1`) v0 @kind object;
  #L17112a.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int`;
  #L17112e.  v2:= -2147483648I;
  #L171132.  v3:= v1 ^& v2 @kind int;
  #L171136.  if v3 == 0 then goto L171142;
  #L17113a.  v1:= v1 - v2 @kind int;
  #L17113c.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int` := v1;
  #L171140.  goto L17114c;
  #L171142.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1`;
  #L171146.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L17114c.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.a` @type ^`java.lang.Object` @kind object;
  #L171150.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L171156.  v1:= temp @kind object;
  #L171158.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int`;
  #L17115c.  v3:= 1I;
  #L17115e.  if v2 == 0 then goto L171190;
  #L171162.  if v2 != v3 then goto L171180;
  #L171166.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.e` @type ^`java.lang.Object` @kind object;
  #L17116a.  v6:= (`java.util.Iterator`) v6 @kind object;
  #L17116e.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.d` @type ^`java.lang.Object` @kind object;
  #L171172.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L171176.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L17117c.  v7:= v2 @kind object;
  #L17117e.  goto L1711a8;
  #L171180.  v6:= new `java.lang.IllegalStateException`;
  #L171184.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L171188.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17118e.  throw v6;
  #L171190.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L171196.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L17119a.  call temp:= `iterator`(v7) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1711a0.  v7:= temp @kind object;
  #L1711a2.  v4:= v7 @kind object;
  #L1711a4.  v7:= v6 @kind object;
  #L1711a6.  v6:= v4 @kind object;
  #L1711a8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1711ae.  v2:= temp;
  #L1711b0.  if v2 == 0 then goto L1711ea;
  #L1711b4.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1711ba.  v2:= temp @kind object;
  #L1711bc.  v2:= (`java.lang.Number`) v2 @kind object;
  #L1711c0.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1711c6.  v2:= temp;
  #L1711c8.  call temp:= `boxInt`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxInt:(I)Ljava/lang/Integer;` @kind static;
  #L1711ce.  v2:= temp @kind object;
  #L1711d0.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L1711d4.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.e` @type ^`java.lang.Object` := v6 @kind object;
  #L1711d8.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int` := v3;
  #L1711dc.  call temp:= `emit`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1711e2.  v2:= temp @kind object;
  #L1711e4.  if v2 != v1 then goto L1711a8;
  #L1711e8.  return v1 @kind object;
  #L1711ea.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1711ee.  return v6 @kind object;
}
