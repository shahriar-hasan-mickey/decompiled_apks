record `kotlinx.coroutines.flow.l$b` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.l$b.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.l$b.b` @AccessFlag SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.l$b` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/l$b;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1804bc.  v0:= 2I;
  #L1804be.  call `<init>`(v1, v0, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L1804c4.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.l$b` v0 @kind this, `kotlinx.coroutines.flow.SharingCommand` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/l$b;.a:(Lkotlinx/coroutines/flow/SharingCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L18041c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/l$b;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L180422.  v1:= temp @kind object;
  #L180424.  v1:= (`kotlinx.coroutines.flow.l$b`) v1 @kind object;
  #L180428.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18042c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/l$b;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L180432.  v1:= temp @kind object;
  #L180434.  return v1 @kind object;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.l$b` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/l$b;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18049c.  v0:= new `kotlinx.coroutines.flow.l$b`;
  #L1804a0.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/flow/l$b;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1804a6.  v0.`kotlinx.coroutines.flow.l$b.b` @type ^`java.lang.Object` := v2 @kind object;
  #L1804aa.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.l$b` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/l$b;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1803f8.  v1:= (`kotlinx.coroutines.flow.SharingCommand`) v1 @kind object;
  #L1803fc.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L180400.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/l$b;.a:(Lkotlinx/coroutines/flow/SharingCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L180406.  v1:= temp @kind object;
  #L180408.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.l$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/l$b;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L180448.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L18044e.  v0:= v1.`kotlinx.coroutines.flow.l$b.a` @type ^`int`;
  #L180452.  if v0 != 0 then goto L18047c;
  #L180456.  call `throwOnFailure`(v2) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L18045c.  v2:= v1.`kotlinx.coroutines.flow.l$b.b` @type ^`java.lang.Object` @kind object;
  #L180460.  v2:= (`kotlinx.coroutines.flow.SharingCommand`) v2 @kind object;
  #L180464.  v0:= `@@kotlinx.coroutines.flow.SharingCommand.START` @type ^`kotlinx.coroutines.flow.SharingCommand` @kind object;
  #L180468.  if v2 == v0 then goto L180470;
  #L18046c.  v2:= 1I;
  #L18046e.  goto L180472;
  #L180470.  v2:= 0I;
  #L180472.  call temp:= `boxBoolean`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L180478.  v2:= temp @kind object;
  #L18047a.  return v2 @kind object;
  #L18047c.  v2:= new `java.lang.IllegalStateException`;
  #L180480.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L180484.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18048a.  throw v2;
}
