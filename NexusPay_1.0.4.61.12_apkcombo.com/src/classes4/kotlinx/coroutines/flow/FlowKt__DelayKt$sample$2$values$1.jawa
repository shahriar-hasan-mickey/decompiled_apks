record `kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.b` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L173648.  v0.`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.c` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L17364c.  v1:= 2I;
  #L17364e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L173654.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1` v0 @kind this, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.a:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L173584.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L17358a.  v1:= temp @kind object;
  #L17358c.  v1:= (`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1`) v1 @kind object;
  #L173590.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L173594.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L17359a.  v1:= temp @kind object;
  #L17359c.  return v1 @kind object;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L173624.  v0:= new `kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1`;
  #L173628.  v1:= v2.`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L17362c.  call `<init>`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L173632.  v0.`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.b` @type ^`java.lang.Object` := v3 @kind object;
  #L173636.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L173560.  v1:= (`kotlinx.coroutines.channels.ProducerScope`) v1 @kind object;
  #L173564.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L173568.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.a:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L17356e.  v1:= temp @kind object;
  #L173570.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1735b0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1735b6.  v0:= temp @kind object;
  #L1735b8.  v1:= v4.`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.a` @type ^`int`;
  #L1735bc.  v2:= 1I;
  #L1735be.  if v1 == 0 then goto L1735de;
  #L1735c2.  if v1 != v2 then goto L1735ce;
  #L1735c6.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1735cc.  goto L17360c;
  #L1735ce.  v5:= new `java.lang.IllegalStateException`;
  #L1735d2.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1735d6.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1735dc.  throw v5;
  #L1735de.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1735e4.  v5:= v4.`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.b` @type ^`java.lang.Object` @kind object;
  #L1735e8.  v5:= (`kotlinx.coroutines.channels.ProducerScope`) v5 @kind object;
  #L1735ec.  v1:= v4.`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1735f0.  v3:= new `kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1$invokeSuspend$$inlined$collect$1`;
  #L1735f4.  call `<init>`(v3, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__DelayKt$sample$2$values$1$invokeSuspend$$inlined$collect$1;.<init>:(Lkotlinx/coroutines/channels/ProducerScope;)V` @kind direct;
  #L1735fa.  v4.`kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2$values$1.a` @type ^`int` := v2;
  #L1735fe.  call temp:= `collect`(v1, v3, v4) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L173604.  v5:= temp @kind object;
  #L173606.  if v5 != v0 then goto L17360c;
  #L17360a.  return v0 @kind object;
  #L17360c.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L173610.  return v5 @kind object;
}
