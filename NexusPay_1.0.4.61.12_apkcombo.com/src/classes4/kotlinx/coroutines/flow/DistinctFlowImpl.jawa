record `kotlinx.coroutines.flow.DistinctFlowImpl` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.DistinctFlowImpl.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlinx.coroutines.flow.DistinctFlowImpl.b` @AccessFlag PUBLIC_FINAL;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.DistinctFlowImpl.c` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.DistinctFlowImpl` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1705d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1705da.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L1705de.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl.b` @type ^`kotlin.jvm.functions.Function1` := v2 @kind object;
  #L1705e2.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl.c` @type ^`kotlin.jvm.functions.Function2` := v3 @kind object;
  #L1705e6.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.DistinctFlowImpl` v3 @kind this, `kotlinx.coroutines.flow.FlowCollector` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L170588.  v0:= new `kotlin.jvm.internal.Ref$ObjectRef`;
  #L17058c.  call `<init>`(v0) @signature `Lkotlin/jvm/internal/Ref$ObjectRef;.<init>:()V` @kind direct;
  #L170592.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L170596.  v0.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v1 @kind object;
  #L17059a.  v1:= v3.`kotlinx.coroutines.flow.DistinctFlowImpl.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L17059e.  v2:= new `kotlinx.coroutines.flow.DistinctFlowImpl$collect$$inlined$collect$1`;
  #L1705a2.  call `<init>`(v2, v3, v0, v4) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$$inlined$collect$1;.<init>:(Lkotlinx/coroutines/flow/DistinctFlowImpl;Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L1705a8.  call temp:= `collect`(v1, v2, v5) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1705ae.  v4:= temp @kind object;
  #L1705b0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1705b6.  v5:= temp @kind object;
  #L1705b8.  if v4 != v5 then goto L1705be;
  #L1705bc.  return v4 @kind object;
  #L1705be.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1705c2.  return v4 @kind object;
}
