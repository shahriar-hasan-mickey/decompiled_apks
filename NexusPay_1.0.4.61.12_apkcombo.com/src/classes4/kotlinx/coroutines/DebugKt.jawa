record `kotlinx.coroutines.DebugKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.String` `@@kotlinx.coroutines.DebugKt.DEBUG_PROPERTY_NAME` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.DebugKt.DEBUG_PROPERTY_VALUE_AUTO` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.DebugKt.DEBUG_PROPERTY_VALUE_OFF` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.DebugKt.DEBUG_PROPERTY_VALUE_ON` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.DebugKt.STACKTRACE_RECOVERY_PROPERTY_NAME` @AccessFlag PUBLIC_STATIC_FINAL;
global `boolean` `@@kotlinx.coroutines.DebugKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@kotlinx.coroutines.DebugKt.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@kotlinx.coroutines.DebugKt.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicLong` `@@kotlinx.coroutines.DebugKt.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/DebugKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15719c.  v0:= constclass @type ^`kotlinx.coroutines.CoroutineId` @kind object;
  #L1571a0.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L1571a6.  v0:= temp;
  #L1571a8.  `@@kotlinx.coroutines.DebugKt.a` @type ^`boolean` := v0 @kind boolean;
  #L1571ac.  v0:= "kotlinx.coroutines.debug" @kind object;
  #L1571b0.  call temp:= `systemProp`(v0) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1571b6.  v0:= temp @kind object;
  #L1571b8.  v1:= 0I;
  #L1571ba.  v2:= 1I;
  #L1571bc.  if v0 == 0 then goto L157274;
  #L1571c0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1571c6.  v3:= temp;
  #L1571c8.  if v3 == 0 then goto L157220;
  #L1571cc.  v4:= 3551I;
  #L1571d0.  if v3 == v4 then goto L15720e;
  #L1571d4.  v4:= 109935I;
  #L1571da.  if v3 == v4 then goto L1571fa;
  #L1571de.  v4:= 3005871I;
  #L1571e4.  if v3 != v4 then goto L157234;
  #L1571e8.  v3:= "auto" @kind object;
  #L1571ec.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1571f2.  v3:= temp;
  #L1571f4.  if v3 == 0 then goto L157234;
  #L1571f8.  goto L157274;
  #L1571fa.  v3:= "off" @kind object;
  #L1571fe.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L157204.  v3:= temp;
  #L157206.  if v3 == 0 then goto L157234;
  #L15720a.  v0:= 0I;
  #L15720c.  goto L15727c;
  #L15720e.  v3:= "on" @kind object;
  #L157212.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L157218.  v3:= temp;
  #L15721a.  if v3 == 0 then goto L157234;
  #L15721e.  goto L157230;
  #L157220.  v3:= "" @kind object;
  #L157224.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15722a.  v3:= temp;
  #L15722c.  if v3 == 0 then goto L157234;
  #L157230.  v0:= 1I;
  #L157232.  goto L15727c;
  #L157234.  v1:= new `java.lang.StringBuilder`;
  #L157238.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15723e.  v2:= "System property 'kotlinx.coroutines.debug' has unrecognized value '" @kind object;
  #L157242.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157248.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15724e.  v0:= 39I;
  #L157252.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L157258.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15725e.  v0:= temp @kind object;
  #L157260.  v1:= new `java.lang.IllegalStateException`;
  #L157264.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L15726a.  v0:= temp @kind object;
  #L15726c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157272.  throw v1;
  #L157274.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L15727a.  v0:= temp;
  #L15727c.  `@@kotlinx.coroutines.DebugKt.b` @type ^`boolean` := v0 @kind boolean;
  #L157280.  if v0 == 0 then goto L157296;
  #L157284.  v0:= "kotlinx.coroutines.stacktrace.recovery" @kind object;
  #L157288.  call temp:= `systemProp`(v0, v2) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp:(Ljava/lang/String;Z)Z` @kind static;
  #L15728e.  v0:= temp;
  #L157290.  if v0 == 0 then goto L157296;
  #L157294.  v1:= 1I;
  #L157296.  `@@kotlinx.coroutines.DebugKt.c` @type ^`boolean` := v1 @kind boolean;
  #L15729a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L15729e.  v1:= 0L;
  #L1572a2.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L1572a8.  `@@kotlinx.coroutines.DebugKt.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L1572ac.  return @kind void;
}
procedure `boolean` `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L15713c.  v0:= `@@kotlinx.coroutines.DebugKt.a` @type ^`boolean` @kind boolean;
  #L157140.  return v0;
}
procedure `java.util.concurrent.atomic.AtomicLong` `getCOROUTINE_ID`() @signature `Lkotlinx/coroutines/DebugKt;.getCOROUTINE_ID:()Ljava/util/concurrent/atomic/AtomicLong;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L157184.  v0:= `@@kotlinx.coroutines.DebugKt.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L157188.  return v0 @kind object;
}
procedure `boolean` `getDEBUG`() @signature `Lkotlinx/coroutines/DebugKt;.getDEBUG:()Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L157154.  v0:= `@@kotlinx.coroutines.DebugKt.b` @type ^`boolean` @kind boolean;
  #L157158.  return v0;
}
procedure `boolean` `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/DebugKt;.getRECOVER_STACK_TRACES:()Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L15716c.  v0:= `@@kotlinx.coroutines.DebugKt.c` @type ^`boolean` @kind boolean;
  #L157170.  return v0;
}
procedure `void` `resetCoroutineId`() @signature `Lkotlinx/coroutines/DebugKt;.resetCoroutineId:()V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1572c0.  v0:= `@@kotlinx.coroutines.DebugKt.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1572c4.  v1:= 0L;
  #L1572c8.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.set:(J)V` @kind virtual;
  #L1572ce.  return @kind void;
}
