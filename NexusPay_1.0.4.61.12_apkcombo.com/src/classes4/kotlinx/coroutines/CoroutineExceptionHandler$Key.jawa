record `kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext$Key` @kind interface {
}
global `kotlinx.coroutines.CoroutineExceptionHandler$Key` `@@kotlinx.coroutines.CoroutineExceptionHandler$Key.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineExceptionHandler$Key;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L156614.  v0:= new `kotlinx.coroutines.CoroutineExceptionHandler$Key`;
  #L156618.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineExceptionHandler$Key;.<init>:()V` @kind direct;
  #L15661e.  `@@kotlinx.coroutines.CoroutineExceptionHandler$Key.a` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` := v0 @kind object;
  #L156622.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.CoroutineExceptionHandler$Key` v0 @kind this) @signature `Lkotlinx/coroutines/CoroutineExceptionHandler$Key;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L156634.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15663a.  return @kind void;
}
