record `kotlinx.coroutines.BlockingEventLoop` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.EventLoopImplBase` @kind class {
  `java.lang.Thread` `kotlinx.coroutines.BlockingEventLoop.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.BlockingEventLoop` v0 @kind this, `java.lang.Thread` v1 @kind object) @signature `Lkotlinx/coroutines/BlockingEventLoop;.<init>:(Ljava/lang/Thread;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L153804.  call `<init>`(v0) @signature `Lkotlinx/coroutines/EventLoopImplBase;.<init>:()V` @kind direct;
  #L15380a.  v0.`kotlinx.coroutines.BlockingEventLoop.f` @type ^`java.lang.Thread` := v1 @kind object;
  #L15380e.  return @kind void;
}
procedure `java.lang.Thread` `getThread`(`kotlinx.coroutines.BlockingEventLoop` v1 @kind this) @signature `Lkotlinx/coroutines/BlockingEventLoop;.getThread:()Ljava/lang/Thread;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1537ec.  v0:= v1.`kotlinx.coroutines.BlockingEventLoop.f` @type ^`java.lang.Thread` @kind object;
  #L1537f0.  return v0 @kind object;
}
