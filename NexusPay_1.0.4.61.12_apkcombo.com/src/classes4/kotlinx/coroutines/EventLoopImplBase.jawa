record `kotlinx.coroutines.EventLoopImplBase` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.EventLoopImplPlatform` @kind class, `kotlinx.coroutines.Delay` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.EventLoopImplBase._delayed` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.EventLoopImplBase._isCompleted` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.EventLoopImplBase._queue` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.EventLoopImplBase.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.EventLoopImplBase.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/EventLoopImplBase;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L159198.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L15919c.  v1:= constclass @type ^`kotlinx.coroutines.EventLoopImplBase` @kind object;
  #L1591a0.  v2:= "_queue" @kind object;
  #L1591a4.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1591aa.  v2:= temp @kind object;
  #L1591ac.  `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L1591b0.  v2:= "_delayed" @kind object;
  #L1591b4.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1591ba.  v0:= temp @kind object;
  #L1591bc.  `@@kotlinx.coroutines.EventLoopImplBase.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L1591c0.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.EventLoopImplBase` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1591d4.  call `<init>`(v1) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.<init>:()V` @kind direct;
  #L1591da.  v0:= 0I;
  #L1591dc.  v1.`kotlinx.coroutines.EventLoopImplBase._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L1591e0.  v1.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L1591e4.  v0:= 0I;
  #L1591e6.  v1.`kotlinx.coroutines.EventLoopImplBase._isCompleted` @type ^`int` := v0;
  #L1591ea.  return @kind void;
}
procedure `boolean` `access$isCompleted`(`kotlinx.coroutines.EventLoopImplBase` v0 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.access$isCompleted:(Lkotlinx/coroutines/EventLoopImplBase;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L158cb0.  call temp:= `isCompleted`(v0) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isCompleted:()Z` @kind direct;
  #L158cb6.  v0:= temp;
  #L158cb8.  return v0;
}
procedure `void` `b`(`kotlinx.coroutines.EventLoopImplBase` v4 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1591fc.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L159202.  v0:= temp;
  #L159204.  if v0 == 0 then goto L159222;
  #L159208.  call temp:= `isCompleted`(v4) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isCompleted:()Z` @kind direct;
  #L15920e.  v0:= temp;
  #L159210.  if v0 == 0 then goto L159216;
  #L159214.  goto L159222;
  #L159216.  v0:= new `java.lang.AssertionError`;
  #L15921a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L159220.  throw v0;
  #L159222.  v0:= v4.`kotlinx.coroutines.EventLoopImplBase._queue` @type ^`java.lang.Object` @kind object;
  #L159226.  if v0 != 0 then goto L159246;
  #L15922a.  v0:= `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L15922e.  v1:= 0I;
  #L159230.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/EventLoop_commonKt;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L159236.  v2:= temp @kind object;
  #L159238.  call temp:= `compareAndSet`(v0, v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L15923e.  v0:= temp;
  #L159240.  if v0 == 0 then goto L159222;
  #L159244.  return @kind void;
  #L159246.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind boolean;
  #L15924a.  if v1 == 0 then goto L15925a;
  #L15924e.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L159252.  call temp:= `close`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.close:()Z` @kind virtual;
  #L159258.  return @kind void;
  #L15925a.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/EventLoop_commonKt;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L159260.  v1:= temp @kind object;
  #L159262.  if v0 != v1 then goto L159268;
  #L159266.  return @kind void;
  #L159268.  v1:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore`;
  #L15926c.  v2:= 8I;
  #L159270.  v3:= 1I;
  #L159272.  call `<init>`(v1, v2, v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<init>:(IZ)V` @kind direct;
  #L159278.  if v0 == 0 then goto L15929a;
  #L15927c.  v2:= v0 @kind object;
  #L15927e.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L159282.  call temp:= `addLast`(v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L159288.  v2:= `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L15928c.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L159292.  v0:= temp;
  #L159294.  if v0 == 0 then goto L159222;
  #L159298.  return @kind void;
  #L15929a.  v0:= new `java.lang.NullPointerException`;
  #L15929e.  v1:= "null cannot be cast to non-null type java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }" @kind object;
  #L1592a2.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1592a8.  throw v0;
}
procedure `java.lang.Runnable` `c`(`kotlinx.coroutines.EventLoopImplBase` v4 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.c:()Ljava/lang/Runnable;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L158ee8.  v0:= v4.`kotlinx.coroutines.EventLoopImplBase._queue` @type ^`java.lang.Object` @kind object;
  #L158eec.  v1:= 0I;
  #L158eee.  if v0 != 0 then goto L158ef4;
  #L158ef2.  return v1 @kind object;
  #L158ef4.  v2:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind boolean;
  #L158ef8.  if v2 == 0 then goto L158f40;
  #L158efc.  if v0 == 0 then goto L158f30;
  #L158f00.  v1:= v0 @kind object;
  #L158f02.  v1:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v1 @kind object;
  #L158f06.  call temp:= `removeFirstOrNull`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L158f0c.  v2:= temp @kind object;
  #L158f0e.  v3:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L158f12.  if v2 == v3 then goto L158f1c;
  #L158f16.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L158f1a.  return v2 @kind object;
  #L158f1c.  v2:= `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L158f20.  call temp:= `next`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L158f26.  v1:= temp @kind object;
  #L158f28.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L158f2e.  goto L158ee8;
  #L158f30.  v0:= new `java.lang.NullPointerException`;
  #L158f34.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeTaskQueueCore<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }>{ kotlinx.coroutines.EventLoop_commonKt.Queue<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }> }" @kind object;
  #L158f38.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158f3e.  throw v0;
  #L158f40.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/EventLoop_commonKt;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L158f46.  v2:= temp @kind object;
  #L158f48.  if v0 != v2 then goto L158f4e;
  #L158f4c.  return v1 @kind object;
  #L158f4e.  v2:= `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L158f52.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L158f58.  v1:= temp;
  #L158f5a.  if v1 == 0 then goto L158ee8;
  #L158f5e.  if v0 == 0 then goto L158f68;
  #L158f62.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L158f66.  return v0 @kind object;
  #L158f68.  v0:= new `java.lang.NullPointerException`;
  #L158f6c.  v1:= "null cannot be cast to non-null type java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }" @kind object;
  #L158f70.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158f76.  throw v0;
}
procedure `boolean` `d`(`kotlinx.coroutines.EventLoopImplBase` v5 @kind this, `java.lang.Runnable` v6 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.d:(Ljava/lang/Runnable;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L158ccc.  v0:= v5.`kotlinx.coroutines.EventLoopImplBase._queue` @type ^`java.lang.Object` @kind object;
  #L158cd0.  call temp:= `isCompleted`(v5) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isCompleted:()Z` @kind direct;
  #L158cd6.  v1:= temp;
  #L158cd8.  v2:= 0I;
  #L158cda.  if v1 == 0 then goto L158ce0;
  #L158cde.  return v2;
  #L158ce0.  v1:= 1I;
  #L158ce2.  if v0 != 0 then goto L158cfa;
  #L158ce6.  v0:= `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L158cea.  v2:= 0I;
  #L158cec.  call temp:= `compareAndSet`(v0, v5, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L158cf2.  v0:= temp;
  #L158cf4.  if v0 == 0 then goto L158ccc;
  #L158cf8.  return v1;
  #L158cfa.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind boolean;
  #L158cfe.  if v3 == 0 then goto L158d4c;
  #L158d02.  if v0 == 0 then goto L158d3c;
  #L158d06.  v3:= v0 @kind object;
  #L158d08.  v3:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v3 @kind object;
  #L158d0c.  call temp:= `addLast`(v3, v6) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L158d12.  v4:= temp;
  #L158d14.  if v4 == 0 then goto L158d3a;
  #L158d18.  if v4 == v1 then goto L158d26;
  #L158d1c.  v0:= 2I;
  #L158d1e.  if v4 == v0 then goto L158d24;
  #L158d22.  goto L158ccc;
  #L158d24.  return v2;
  #L158d26.  v1:= `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L158d2a.  call temp:= `next`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L158d30.  v2:= temp @kind object;
  #L158d32.  call temp:= `compareAndSet`(v1, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L158d38.  goto L158ccc;
  #L158d3a.  return v1;
  #L158d3c.  v6:= new `java.lang.NullPointerException`;
  #L158d40.  v0:= "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeTaskQueueCore<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }>{ kotlinx.coroutines.EventLoop_commonKt.Queue<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }> }" @kind object;
  #L158d44.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158d4a.  throw v6;
  #L158d4c.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/EventLoop_commonKt;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L158d52.  v3:= temp @kind object;
  #L158d54.  if v0 != v3 then goto L158d5a;
  #L158d58.  return v2;
  #L158d5a.  v2:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore`;
  #L158d5e.  v3:= 8I;
  #L158d62.  call `<init>`(v2, v3, v1) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<init>:(IZ)V` @kind direct;
  #L158d68.  if v0 == 0 then goto L158d90;
  #L158d6c.  v3:= v0 @kind object;
  #L158d6e.  v3:= (`java.lang.Runnable`) v3 @kind object;
  #L158d72.  call temp:= `addLast`(v2, v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L158d78.  call temp:= `addLast`(v2, v6) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L158d7e.  v3:= `@@kotlinx.coroutines.EventLoopImplBase.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L158d82.  call temp:= `compareAndSet`(v3, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L158d88.  v0:= temp;
  #L158d8a.  if v0 == 0 then goto L158ccc;
  #L158d8e.  return v1;
  #L158d90.  v6:= new `java.lang.NullPointerException`;
  #L158d94.  v0:= "null cannot be cast to non-null type java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }" @kind object;
  #L158d98.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158d9e.  throw v6;
}
procedure `void` `e`(`kotlinx.coroutines.EventLoopImplBase` v3 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.e:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L159304.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L15930a.  v0:= temp @kind object;
  #L15930c.  if v0 != 0 then goto L15931a;
  #L159310.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L159316.  v0:= temp @kind wide;
  #L159318.  goto L159322;
  #L15931a.  call temp:= `nanoTime`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.nanoTime:()J` @kind virtual;
  #L159320.  v0:= temp @kind wide;
  #L159322.  v2:= v3.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` @kind object;
  #L159326.  v2:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`) v2 @kind object;
  #L15932a.  if v2 != 0 then goto L159332;
  #L15932e.  v2:= 0I;
  #L159330.  goto L15933e;
  #L159332.  call temp:= `removeFirstOrNull`(v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeFirstOrNull:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L159338.  v2:= temp @kind object;
  #L15933a.  v2:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTask`) v2 @kind object;
  #L15933e.  if v2 != 0 then goto L159344;
  #L159342.  return @kind void;
  #L159344.  call `reschedule`(v3, v0, v2) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.reschedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @kind virtual;
  #L15934a.  goto L159322;
}
procedure `int` `f`(`kotlinx.coroutines.EventLoopImplBase` v3 @kind this, `long` v4 , `kotlinx.coroutines.EventLoopImplBase$DelayedTask` v6 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.f:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L158e70.  call temp:= `isCompleted`(v3) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isCompleted:()Z` @kind direct;
  #L158e76.  v0:= temp;
  #L158e78.  if v0 == 0 then goto L158e80;
  #L158e7c.  v4:= 1I;
  #L158e7e.  return v4;
  #L158e80.  v0:= v3.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` @kind object;
  #L158e84.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`) v0 @kind object;
  #L158e88.  if v0 != 0 then goto L158eb0;
  #L158e8c.  v0:= `@@kotlinx.coroutines.EventLoopImplBase.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L158e90.  v1:= 0I;
  #L158e92.  v2:= new `kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`;
  #L158e96.  call `<init>`(v2, v4) @signature `Lkotlinx/coroutines/EventLoopImplBase$DelayedTaskQueue;.<init>:(J)V` @kind direct;
  #L158e9c.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L158ea2.  v0:= v3.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` @kind object;
  #L158ea6.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`) v0 @kind object;
  #L158eaa.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L158eb0.  call temp:= `scheduleTask`(v6, v4, v0, v3) @signature `Lkotlinx/coroutines/EventLoopImplBase$DelayedTask;.scheduleTask:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTaskQueue;Lkotlinx/coroutines/EventLoopImplBase;)I` @kind virtual;
  #L158eb6.  v4:= temp;
  #L158eb8.  return v4;
}
procedure `void` `g`(`kotlinx.coroutines.EventLoopImplBase` v0 @kind this, `boolean` v1 ) @signature `Lkotlinx/coroutines/EventLoopImplBase;.g:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L15943c.  v0.`kotlinx.coroutines.EventLoopImplBase._isCompleted` @type ^`int` := v1;
  #L159440.  return @kind void;
}
procedure `boolean` `h`(`kotlinx.coroutines.EventLoopImplBase` v1 @kind this, `kotlinx.coroutines.EventLoopImplBase$DelayedTask` v2 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.h:(Lkotlinx/coroutines/EventLoopImplBase$DelayedTask;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L158e38.  v0:= v1.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` @kind object;
  #L158e3c.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`) v0 @kind object;
  #L158e40.  if v0 != 0 then goto L158e48;
  #L158e44.  v0:= 0I;
  #L158e46.  goto L158e54;
  #L158e48.  call temp:= `peek`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.peek:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L158e4e.  v0:= temp @kind object;
  #L158e50.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTask`) v0 @kind object;
  #L158e54.  if v0 != v2 then goto L158e5c;
  #L158e58.  v2:= 1I;
  #L158e5a.  goto L158e5e;
  #L158e5c.  v2:= 0I;
  #L158e5e.  return v2;
}
procedure `boolean` `isCompleted`(`kotlinx.coroutines.EventLoopImplBase` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isCompleted:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L158db0.  v0:= v1.`kotlinx.coroutines.EventLoopImplBase._isCompleted` @type ^`int`;
  #L158db4.  return v0;
}
procedure `java.lang.Object` `delay`(`kotlinx.coroutines.EventLoopImplBase` v0 @kind this, `long` v1 , `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.delay:(JLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L158ecc.  call temp:= `delay`(v0, v1, v3) @signature `Lkotlinx/coroutines/Delay$DefaultImpls;.delay:(Lkotlinx/coroutines/Delay;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L158ed2.  v1:= temp @kind object;
  #L158ed4.  return v1 @kind object;
}
procedure `void` `dispatch`(`kotlinx.coroutines.EventLoopImplBase` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.dispatch:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1592bc.  call `enqueue`(v0, v2) @signature `Lkotlinx/coroutines/EventLoopImplBase;.enqueue:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1592c2.  return @kind void;
}
procedure `void` `enqueue`(`kotlinx.coroutines.EventLoopImplBase` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.enqueue:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1592d4.  call temp:= `d`(v1, v2) @signature `Lkotlinx/coroutines/EventLoopImplBase;.d:(Ljava/lang/Runnable;)Z` @kind direct;
  #L1592da.  v0:= temp;
  #L1592dc.  if v0 == 0 then goto L1592e8;
  #L1592e0.  call `unpark`(v1) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.unpark:()V` @kind virtual;
  #L1592e6.  goto L1592f2;
  #L1592e8.  v0:= `@@kotlinx.coroutines.DefaultExecutor.INSTANCE` @type ^`kotlinx.coroutines.DefaultExecutor` @kind object;
  #L1592ec.  call `enqueue`(v0, v2) @signature `Lkotlinx/coroutines/EventLoopImplBase;.enqueue:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1592f2.  return @kind void;
}
procedure `long` `getNextTime`(`kotlinx.coroutines.EventLoopImplBase` v6 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.getNextTime:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L159008.  call temp:= `getNextTime`(v6) @signature `Lkotlinx/coroutines/EventLoop;.getNextTime:()J` @kind super;
  #L15900e.  v0:= temp @kind wide;
  #L159010.  v2:= 0L;
  #L159014.  v4:= lcmp(v0, v2);
  #L159018.  if v4 != 0 then goto L15901e;
  #L15901c.  return v2 @kind wide;
  #L15901e.  v0:= v6.`kotlinx.coroutines.EventLoopImplBase._queue` @type ^`java.lang.Object` @kind object;
  #L159022.  v4:= 9223372036854775807L;
  #L15902c.  if v0 != 0 then goto L159032;
  #L159030.  goto L15904c;
  #L159032.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind boolean;
  #L159036.  if v1 == 0 then goto L15909c;
  #L15903a.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L15903e.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isEmpty:()Z` @kind virtual;
  #L159044.  v0:= temp;
  #L159046.  if v0 != 0 then goto L15904c;
  #L15904a.  return v2 @kind wide;
  #L15904c.  v0:= v6.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` @kind object;
  #L159050.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`) v0 @kind object;
  #L159054.  if v0 != 0 then goto L15905c;
  #L159058.  v0:= 0I;
  #L15905a.  goto L159068;
  #L15905c.  call temp:= `peek`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.peek:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L159062.  v0:= temp @kind object;
  #L159064.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTask`) v0 @kind object;
  #L159068.  if v0 != 0 then goto L15906e;
  #L15906c.  return v4 @kind wide;
  #L15906e.  v0:= v0.`kotlinx.coroutines.EventLoopImplBase$DelayedTask.nanoTime` @type ^`long` @kind wide;
  #L159072.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L159078.  v4:= temp @kind object;
  #L15907a.  if v4 != 0 then goto L159088;
  #L15907e.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L159084.  v4:= temp @kind wide;
  #L159086.  goto L159090;
  #L159088.  call temp:= `nanoTime`(v4) @signature `Lkotlinx/coroutines/AbstractTimeSource;.nanoTime:()J` @kind virtual;
  #L15908e.  v4:= temp @kind wide;
  #L159090.  v0:= v0 - v4 @kind long;
  #L159092.  call temp:= `coerceAtLeast`(v0, v2) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(JJ)J` @kind static;
  #L159098.  v0:= temp @kind wide;
  #L15909a.  return v0 @kind wide;
  #L15909c.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/EventLoop_commonKt;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1590a2.  v1:= temp @kind object;
  #L1590a4.  if v0 != v1 then goto L1590aa;
  #L1590a8.  return v4 @kind wide;
  #L1590aa.  return v2 @kind wide;
}
procedure `kotlinx.coroutines.DisposableHandle` `invokeOnTimeout`(`kotlinx.coroutines.EventLoopImplBase` v0 @kind this, `long` v1 , `java.lang.Runnable` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.invokeOnTimeout:(JLjava/lang/Runnable;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/DisposableHandle;` @AccessFlag PUBLIC {
    temp;

  #L158f88.  call temp:= `invokeOnTimeout`(v0, v1, v3, v4) @signature `Lkotlinx/coroutines/Delay$DefaultImpls;.invokeOnTimeout:(Lkotlinx/coroutines/Delay;JLjava/lang/Runnable;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/DisposableHandle;` @kind static;
  #L158f8e.  v1:= temp @kind object;
  #L158f90.  return v1 @kind object;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.EventLoopImplBase` v4 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isEmpty:()Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L158dc8.  call temp:= `isUnconfinedQueueEmpty`(v4) @signature `Lkotlinx/coroutines/EventLoop;.isUnconfinedQueueEmpty:()Z` @kind virtual;
  #L158dce.  v0:= temp;
  #L158dd0.  v1:= 0I;
  #L158dd2.  if v0 != 0 then goto L158dd8;
  #L158dd6.  return v1;
  #L158dd8.  v0:= v4.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` @kind object;
  #L158ddc.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`) v0 @kind object;
  #L158de0.  if v0 == 0 then goto L158df2;
  #L158de4.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @kind virtual;
  #L158dea.  v0:= temp;
  #L158dec.  if v0 != 0 then goto L158df2;
  #L158df0.  return v1;
  #L158df2.  v0:= v4.`kotlinx.coroutines.EventLoopImplBase._queue` @type ^`java.lang.Object` @kind object;
  #L158df6.  v2:= 1I;
  #L158df8.  if v0 != 0 then goto L158e00;
  #L158dfc.  v1:= 1I;
  #L158dfe.  goto L158e24;
  #L158e00.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind boolean;
  #L158e04.  if v3 == 0 then goto L158e16;
  #L158e08.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L158e0c.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isEmpty:()Z` @kind virtual;
  #L158e12.  v1:= temp;
  #L158e14.  goto L158e24;
  #L158e16.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/EventLoop_commonKt;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L158e1c.  v3:= temp @kind object;
  #L158e1e.  if v0 != v3 then goto L158e24;
  #L158e22.  goto L158dfc;
  #L158e24.  return v1;
}
procedure `long` `processNextEvent`(`kotlinx.coroutines.EventLoopImplBase` v9 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.processNextEvent:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1590bc.  call temp:= `processUnconfinedEvent`(v9) @signature `Lkotlinx/coroutines/EventLoop;.processUnconfinedEvent:()Z` @kind virtual;
  #L1590c2.  v0:= temp;
  #L1590c4.  v1:= 0L;
  #L1590c8.  if v0 == 0 then goto L1590ce;
  #L1590cc.  return v1 @kind wide;
  #L1590ce.  v0:= v9.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` @kind object;
  #L1590d2.  v0:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue`) v0 @kind object;
  #L1590d6.  if v0 == 0 then goto L159156;
  #L1590da.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @kind virtual;
  #L1590e0.  v3:= temp;
  #L1590e2.  if v3 != 0 then goto L159156;
  #L1590e6.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1590ec.  v3:= temp @kind object;
  #L1590ee.  if v3 != 0 then goto L1590fc;
  #L1590f2.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1590f8.  v3:= temp @kind wide;
  #L1590fa.  goto L159104;
  #L1590fc.  call temp:= `nanoTime`(v3) @signature `Lkotlinx/coroutines/AbstractTimeSource;.nanoTime:()J` @kind virtual;
  #L159102.  v3:= temp @kind wide;
  #L159104.  @monitorenter v0
  #L159106.  call temp:= `firstImpl`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L15910c.  v5:= temp @kind object;
  #L15910e.  v6:= 0I;
  #L159110.  if v5 != 0 then goto L159118;
  #L159114.  @monitorexit v0
  #L159116.  goto L159146;
  #L159118.  v5:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTask`) v5 @kind object;
  #L15911c.  call temp:= `timeToExecute`(v5, v3) @signature `Lkotlinx/coroutines/EventLoopImplBase$DelayedTask;.timeToExecute:(J)Z` @kind virtual;
  #L159122.  v7:= temp;
  #L159124.  v8:= 0I;
  #L159126.  if v7 == 0 then goto L159134;
  #L15912a.  call temp:= `d`(v9, v5) @signature `Lkotlinx/coroutines/EventLoopImplBase;.d:(Ljava/lang/Runnable;)Z` @kind direct;
  #L159130.  v5:= temp;
  #L159132.  goto L159136;
  #L159134.  v5:= 0I;
  #L159136.  if v5 == 0 then goto L159144;
  #L15913a.  call temp:= `removeAtImpl`(v0, v8) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L159140.  v5:= temp @kind object;
  #L159142.  v6:= v5 @kind object;
  #L159144.  @monitorexit v0
  #L159146.  v6:= (`kotlinx.coroutines.EventLoopImplBase$DelayedTask`) v6 @kind object;
  #L15914a.  if v6 != 0 then goto L159104;
  #L15914e.  goto L159156;
  #L159150.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L159152.  @monitorexit v0
  #L159154.  throw v1;
  #L159156.  call temp:= `c`(v9) @signature `Lkotlinx/coroutines/EventLoopImplBase;.c:()Ljava/lang/Runnable;` @kind direct;
  #L15915c.  v0:= temp @kind object;
  #L15915e.  if v0 == 0 then goto L15916a;
  #L159162.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L159168.  return v1 @kind wide;
  #L15916a.  call temp:= `getNextTime`(v9) @signature `Lkotlinx/coroutines/EventLoopImplBase;.getNextTime:()J` @kind virtual;
  #L159170.  v0:= temp @kind wide;
  #L159172.  return v0 @kind wide;
  catch `java.lang.Throwable` @[L159106..L15910e] goto L159150;
  catch `java.lang.Throwable` @[L159118..L159142] goto L159150;
}
procedure `void` `resetAll`(`kotlinx.coroutines.EventLoopImplBase` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.resetAll:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L15935c.  v0:= 0I;
  #L15935e.  v1.`kotlinx.coroutines.EventLoopImplBase._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L159362.  v1.`kotlinx.coroutines.EventLoopImplBase._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L159366.  return @kind void;
}
procedure `void` `schedule`(`kotlinx.coroutines.EventLoopImplBase` v2 @kind this, `long` v3 , `kotlinx.coroutines.EventLoopImplBase$DelayedTask` v5 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.schedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L159378.  call temp:= `f`(v2, v3, v5) @signature `Lkotlinx/coroutines/EventLoopImplBase;.f:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)I` @kind direct;
  #L15937e.  v0:= temp;
  #L159380.  if v0 == 0 then goto L1593b2;
  #L159384.  v1:= 1I;
  #L159386.  if v0 == v1 then goto L1593aa;
  #L15938a.  v3:= 2I;
  #L15938c.  if v0 != v3 then goto L159392;
  #L159390.  goto L1593c4;
  #L159392.  v3:= new `java.lang.IllegalStateException`;
  #L159396.  v4:= "unexpected result" @kind object;
  #L15939a.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1593a0.  v4:= temp @kind object;
  #L1593a2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1593a8.  throw v3;
  #L1593aa.  call `reschedule`(v2, v3, v5) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.reschedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @kind virtual;
  #L1593b0.  goto L1593c4;
  #L1593b2.  call temp:= `h`(v2, v5) @signature `Lkotlinx/coroutines/EventLoopImplBase;.h:(Lkotlinx/coroutines/EventLoopImplBase$DelayedTask;)Z` @kind direct;
  #L1593b8.  v3:= temp;
  #L1593ba.  if v3 == 0 then goto L1593c4;
  #L1593be.  call `unpark`(v2) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.unpark:()V` @kind virtual;
  #L1593c4.  return @kind void;
}
procedure `kotlinx.coroutines.DisposableHandle` `scheduleInvokeOnTimeout`(`kotlinx.coroutines.EventLoopImplBase` v3 @kind this, `long` v4 , `java.lang.Runnable` v6 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.scheduleInvokeOnTimeout:(JLjava/lang/Runnable;)Lkotlinx/coroutines/DisposableHandle;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L158fa4.  call temp:= `delayToNanos`(v4) @signature `Lkotlinx/coroutines/EventLoop_commonKt;.delayToNanos:(J)J` @kind static;
  #L158faa.  v4:= temp @kind wide;
  #L158fac.  v0:= 1.9999999999999998D;
  #L158fb6.  v2:= lcmp(v4, v0);
  #L158fba.  if v2 >= 0 then goto L158ff0;
  #L158fbe.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L158fc4.  v0:= temp @kind object;
  #L158fc6.  if v0 != 0 then goto L158fd4;
  #L158fca.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L158fd0.  v0:= temp @kind wide;
  #L158fd2.  goto L158fdc;
  #L158fd4.  call temp:= `nanoTime`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.nanoTime:()J` @kind virtual;
  #L158fda.  v0:= temp @kind wide;
  #L158fdc.  v2:= new `kotlinx.coroutines.EventLoopImplBase$b`;
  #L158fe0.  v4:= v4 + v0 @kind long;
  #L158fe2.  call `<init>`(v2, v4, v6) @signature `Lkotlinx/coroutines/EventLoopImplBase$b;.<init>:(JLjava/lang/Runnable;)V` @kind direct;
  #L158fe8.  call `schedule`(v3, v0, v2) @signature `Lkotlinx/coroutines/EventLoopImplBase;.schedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @kind virtual;
  #L158fee.  goto L158ff4;
  #L158ff0.  v2:= `@@kotlinx.coroutines.NonDisposableHandle.INSTANCE` @type ^`kotlinx.coroutines.NonDisposableHandle` @kind object;
  #L158ff4.  return v2 @kind object;
}
procedure `void` `scheduleResumeAfterDelay`(`kotlinx.coroutines.EventLoopImplBase` v3 @kind this, `long` v4 , `kotlinx.coroutines.CancellableContinuation` v6 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplBase;.scheduleResumeAfterDelay:(JLkotlinx/coroutines/CancellableContinuation;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1593d8.  call temp:= `delayToNanos`(v4) @signature `Lkotlinx/coroutines/EventLoop_commonKt;.delayToNanos:(J)J` @kind static;
  #L1593de.  v4:= temp @kind wide;
  #L1593e0.  v0:= 1.9999999999999998D;
  #L1593ea.  v2:= lcmp(v4, v0);
  #L1593ee.  if v2 >= 0 then goto L159428;
  #L1593f2.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1593f8.  v0:= temp @kind object;
  #L1593fa.  if v0 != 0 then goto L159408;
  #L1593fe.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L159404.  v0:= temp @kind wide;
  #L159406.  goto L159410;
  #L159408.  call temp:= `nanoTime`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.nanoTime:()J` @kind virtual;
  #L15940e.  v0:= temp @kind wide;
  #L159410.  v2:= new `kotlinx.coroutines.EventLoopImplBase$a`;
  #L159414.  v4:= v4 + v0 @kind long;
  #L159416.  call `<init>`(v2, v3, v4, v6) @signature `Lkotlinx/coroutines/EventLoopImplBase$a;.<init>:(Lkotlinx/coroutines/EventLoopImplBase;JLkotlinx/coroutines/CancellableContinuation;)V` @kind direct;
  #L15941c.  call `disposeOnCancellation`(v6, v2) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.disposeOnCancellation:(Lkotlinx/coroutines/CancellableContinuation;Lkotlinx/coroutines/DisposableHandle;)V` @kind static;
  #L159422.  call `schedule`(v3, v0, v2) @signature `Lkotlinx/coroutines/EventLoopImplBase;.schedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @kind virtual;
  #L159428.  return @kind void;
}
procedure `void` `shutdown`(`kotlinx.coroutines.EventLoopImplBase` v5 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplBase;.shutdown:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L159454.  v0:= `@@kotlinx.coroutines.ThreadLocalEventLoop.INSTANCE` @type ^`kotlinx.coroutines.ThreadLocalEventLoop` @kind object;
  #L159458.  call `resetEventLoop$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/ThreadLocalEventLoop;.resetEventLoop$kotlinx_coroutines_core:()V` @kind virtual;
  #L15945e.  v0:= 1I;
  #L159460.  call `g`(v5, v0) @signature `Lkotlinx/coroutines/EventLoopImplBase;.g:(Z)V` @kind direct;
  #L159466.  call `b`(v5) @signature `Lkotlinx/coroutines/EventLoopImplBase;.b:()V` @kind direct;
  #L15946c.  call temp:= `processNextEvent`(v5) @signature `Lkotlinx/coroutines/EventLoopImplBase;.processNextEvent:()J` @kind virtual;
  #L159472.  v0:= temp @kind wide;
  #L159474.  v2:= 0L;
  #L159478.  v4:= lcmp(v0, v2);
  #L15947c.  if v4 > 0 then goto L159482;
  #L159480.  goto L15946c;
  #L159482.  call `e`(v5) @signature `Lkotlinx/coroutines/EventLoopImplBase;.e:()V` @kind direct;
  #L159488.  return @kind void;
}
