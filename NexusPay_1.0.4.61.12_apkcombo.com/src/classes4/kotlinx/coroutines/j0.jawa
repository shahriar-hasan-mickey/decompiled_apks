record `kotlinx.coroutines.j0` @kind class @AccessFlag FINAL extends `kotlin.jvm.functions.Function1` @kind interface {
  `int` `kotlinx.coroutines.j0._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.Job` `kotlinx.coroutines.j0.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Thread` `kotlinx.coroutines.j0.b` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.DisposableHandle` `kotlinx.coroutines.j0.c` @AccessFlag PRIVATE;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.j0.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/j0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15e7f0.  v0:= constclass @type ^`kotlinx.coroutines.j0` @kind object;
  #L15e7f4.  v1:= "_state" @kind object;
  #L15e7f8.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L15e7fe.  v0:= temp @kind object;
  #L15e800.  `@@kotlinx.coroutines.j0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L15e804.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.j0` v0 @kind this, `kotlinx.coroutines.Job` v1 @kind object) @signature `Lkotlinx/coroutines/j0;.<init>:(Lkotlinx/coroutines/Job;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15e818.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15e81e.  v0.`kotlinx.coroutines.j0.a` @type ^`kotlinx.coroutines.Job` := v1 @kind object;
  #L15e822.  v1:= 0I;
  #L15e824.  v0.`kotlinx.coroutines.j0._state` @type ^`int` := v1;
  #L15e828.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L15e82e.  v1:= temp @kind object;
  #L15e830.  v0.`kotlinx.coroutines.j0.b` @type ^`java.lang.Thread` := v1 @kind object;
  #L15e834.  return @kind void;
}
procedure `java.lang.Void` `b`(`kotlinx.coroutines.j0` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/j0;.b:(I)Ljava/lang/Void;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L15e7b8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15e7be.  v2:= temp @kind object;
  #L15e7c0.  v0:= "Illegal state " @kind object;
  #L15e7c4.  call temp:= `stringPlus`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L15e7ca.  v2:= temp @kind object;
  #L15e7cc.  v0:= new `java.lang.IllegalStateException`;
  #L15e7d0.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e7d6.  v2:= temp @kind object;
  #L15e7d8.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e7de.  throw v0;
}
procedure `void` `a`(`kotlinx.coroutines.j0` v3 @kind this) @signature `Lkotlinx/coroutines/j0;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L15e848.  v0:= v3.`kotlinx.coroutines.j0._state` @type ^`int`;
  #L15e84c.  if v0 == 0 then goto L15e86e;
  #L15e850.  v1:= 2I;
  #L15e852.  if v0 == v1 then goto L15e848;
  #L15e856.  v1:= 3I;
  #L15e858.  if v0 != v1 then goto L15e864;
  #L15e85c.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L15e862.  return @kind void;
  #L15e864.  call temp:= `b`(v3, v0) @signature `Lkotlinx/coroutines/j0;.b:(I)Ljava/lang/Void;` @kind direct;
  #L15e86a.  v0:= 0I;
  #L15e86c.  throw v0;
  #L15e86e.  v1:= `@@kotlinx.coroutines.j0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L15e872.  v2:= 1I;
  #L15e874.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L15e87a.  v0:= temp;
  #L15e87c.  if v0 == 0 then goto L15e848;
  #L15e880.  v0:= v3.`kotlinx.coroutines.j0.c` @type ^`kotlinx.coroutines.DisposableHandle` @kind object;
  #L15e884.  if v0 != 0 then goto L15e88a;
  #L15e888.  goto L15e890;
  #L15e88a.  call `dispose`(v0) @signature `Lkotlinx/coroutines/DisposableHandle;.dispose:()V` @kind interface;
  #L15e890.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.j0` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lkotlinx/coroutines/j0;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15e8a4.  v4:= v3.`kotlinx.coroutines.j0._state` @type ^`int`;
  #L15e8a8.  v0:= 3I;
  #L15e8aa.  v1:= 2I;
  #L15e8ac.  if v4 == 0 then goto L15e8cc;
  #L15e8b0.  v2:= 1I;
  #L15e8b2.  if v4 == v2 then goto L15e8ca;
  #L15e8b6.  if v4 == v1 then goto L15e8ca;
  #L15e8ba.  if v4 != v0 then goto L15e8c0;
  #L15e8be.  goto L15e8ca;
  #L15e8c0.  call temp:= `b`(v3, v4) @signature `Lkotlinx/coroutines/j0;.b:(I)Ljava/lang/Void;` @kind direct;
  #L15e8c6.  v4:= 0I;
  #L15e8c8.  throw v4;
  #L15e8ca.  return @kind void;
  #L15e8cc.  v2:= `@@kotlinx.coroutines.j0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L15e8d0.  call temp:= `compareAndSet`(v2, v3, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L15e8d6.  v4:= temp;
  #L15e8d8.  if v4 == 0 then goto L15e8a4;
  #L15e8dc.  v4:= v3.`kotlinx.coroutines.j0.b` @type ^`java.lang.Thread` @kind object;
  #L15e8e0.  call `interrupt`(v4) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L15e8e6.  v3.`kotlinx.coroutines.j0._state` @type ^`int` := v0;
  #L15e8ea.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.j0` v3 @kind this) @signature `Lkotlinx/coroutines/j0;.d:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L15e8fc.  v0:= v3.`kotlinx.coroutines.j0.a` @type ^`kotlinx.coroutines.Job` @kind object;
  #L15e900.  v1:= 1I;
  #L15e902.  call temp:= `invokeOnCompletion`(v0, v1, v1, v3) @signature `Lkotlinx/coroutines/Job;.invokeOnCompletion:(ZZLkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;` @kind interface;
  #L15e908.  v0:= temp @kind object;
  #L15e90a.  v3.`kotlinx.coroutines.j0.c` @type ^`kotlinx.coroutines.DisposableHandle` := v0 @kind object;
  #L15e90e.  v0:= v3.`kotlinx.coroutines.j0._state` @type ^`int`;
  #L15e912.  if v0 == 0 then goto L15e930;
  #L15e916.  v1:= 2I;
  #L15e918.  if v0 == v1 then goto L15e92e;
  #L15e91c.  v1:= 3I;
  #L15e91e.  if v0 != v1 then goto L15e924;
  #L15e922.  goto L15e92e;
  #L15e924.  call temp:= `b`(v3, v0) @signature `Lkotlinx/coroutines/j0;.b:(I)Ljava/lang/Void;` @kind direct;
  #L15e92a.  v0:= 0I;
  #L15e92c.  throw v0;
  #L15e92e.  return @kind void;
  #L15e930.  v1:= `@@kotlinx.coroutines.j0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L15e934.  v2:= 0I;
  #L15e936.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L15e93c.  v0:= temp;
  #L15e93e.  if v0 == 0 then goto L15e90e;
  #L15e942.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.j0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/j0;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15e798.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L15e79c.  call `c`(v0, v1) @signature `Lkotlinx/coroutines/j0;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L15e7a2.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L15e7a6.  return v1 @kind object;
}
