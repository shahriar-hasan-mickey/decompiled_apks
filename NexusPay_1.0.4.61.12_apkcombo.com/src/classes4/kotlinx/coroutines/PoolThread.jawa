record `kotlinx.coroutines.PoolThread` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Thread` @kind class {
  `kotlinx.coroutines.ThreadPoolDispatcher` `kotlinx.coroutines.PoolThread.dispatcher` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.PoolThread` v0 @kind this, `kotlinx.coroutines.ThreadPoolDispatcher` v1 @kind object, `java.lang.Runnable` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lkotlinx/coroutines/PoolThread;.<init>:(Lkotlinx/coroutines/ThreadPoolDispatcher;Ljava/lang/Runnable;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15de18.  call `<init>`(v0, v2, v3) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L15de1e.  v0.`kotlinx.coroutines.PoolThread.dispatcher` @type ^`kotlinx.coroutines.ThreadPoolDispatcher` := v1 @kind object;
  #L15de22.  v1:= 1I;
  #L15de24.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L15de2a.  return @kind void;
}
