record `kotlinx.coroutines.ExecutorsKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.util.concurrent.Executor` `asExecutor`(`kotlinx.coroutines.CoroutineDispatcher` v1 @kind object) @signature `Lkotlinx/coroutines/ExecutorsKt;.asExecutor:(Lkotlinx/coroutines/CoroutineDispatcher;)Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L159d50.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.ExecutorCoroutineDispatcher` @kind boolean;
  #L159d54.  if v0 == 0 then goto L159d60;
  #L159d58.  v0:= v1 @kind object;
  #L159d5a.  v0:= (`kotlinx.coroutines.ExecutorCoroutineDispatcher`) v0 @kind object;
  #L159d5e.  goto L159d62;
  #L159d60.  v0:= 0I;
  #L159d62.  if v0 != 0 then goto L159d72;
  #L159d66.  v0:= new `kotlinx.coroutines.o`;
  #L159d6a.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/o;.<init>:(Lkotlinx/coroutines/CoroutineDispatcher;)V` @kind direct;
  #L159d70.  goto L159d7a;
  #L159d72.  call temp:= `getExecutor`(v0) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcher;.getExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L159d78.  v0:= temp @kind object;
  #L159d7a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.CoroutineDispatcher` `from`(`java.util.concurrent.Executor` v2 @kind object) @signature `Lkotlinx/coroutines/ExecutorsKt;.from:(Ljava/util/concurrent/Executor;)Lkotlinx/coroutines/CoroutineDispatcher;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L159d8c.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.o` @kind boolean;
  #L159d90.  v1:= 0I;
  #L159d92.  if v0 == 0 then goto L159d9e;
  #L159d96.  v0:= v2 @kind object;
  #L159d98.  v0:= (`kotlinx.coroutines.o`) v0 @kind object;
  #L159d9c.  goto L159da0;
  #L159d9e.  v0:= v1 @kind object;
  #L159da0.  if v0 != 0 then goto L159da6;
  #L159da4.  goto L159daa;
  #L159da6.  v1:= v0.`kotlinx.coroutines.o.a` @type ^`kotlinx.coroutines.CoroutineDispatcher` @kind object;
  #L159daa.  if v1 != 0 then goto L159db8;
  #L159dae.  v1:= new `kotlinx.coroutines.s`;
  #L159db2.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/s;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L159db8.  return v1 @kind object;
}
procedure `kotlinx.coroutines.ExecutorCoroutineDispatcher` `from`(`java.util.concurrent.ExecutorService` v1 @kind object) @signature `Lkotlinx/coroutines/ExecutorsKt;.from:(Ljava/util/concurrent/ExecutorService;)Lkotlinx/coroutines/ExecutorCoroutineDispatcher;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L159dcc.  v0:= new `kotlinx.coroutines.s`;
  #L159dd0.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/s;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L159dd6.  return v0 @kind object;
}
