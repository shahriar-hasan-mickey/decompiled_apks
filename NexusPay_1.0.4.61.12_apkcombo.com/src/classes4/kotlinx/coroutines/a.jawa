record `kotlinx.coroutines.a` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `kotlinx.coroutines.a.a` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.a` v0 @kind this, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object) @signature `Lkotlinx/coroutines/a;.<init>:(Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L152c40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L152c46.  v0.`kotlinx.coroutines.a.a` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L152c4a.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`kotlinx.coroutines.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/a;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L152c20.  v0:= v1.`kotlinx.coroutines.a.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L152c24.  call temp:= `g`(v0, v2) @signature `Lkotlinx/coroutines/CommonPool;.g:(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind static;
  #L152c2a.  v2:= temp @kind object;
  #L152c2c.  return v2 @kind object;
}
