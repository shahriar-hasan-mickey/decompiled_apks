record `kotlinx.coroutines.android.AndroidExceptionPreHandler` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.AbstractCoroutineContextElement` @kind class, `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v1 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15f214.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L15f218.  call `<init>`(v1, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @kind direct;
  #L15f21e.  v1.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v1 @kind object;
  #L15f222.  return @kind void;
}
procedure `java.lang.reflect.Method` `preHandler`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v5 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15f19c.  v0:= v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` @kind object;
  #L15f1a0.  if v0 == v5 then goto L15f1aa;
  #L15f1a4.  v0:= (`java.lang.reflect.Method`) v0 @kind object;
  #L15f1a8.  return v0 @kind object;
  #L15f1aa.  v0:= 0I;
  #L15f1ac.  v1:= constclass @type ^`java.lang.Thread` @kind object;
  #L15f1b0.  v2:= "getUncaughtExceptionPreHandler" @kind object;
  #L15f1b4.  v3:= 0I;
  #L15f1b6.  v4:= new `java.lang.Class`[v3];
  #L15f1ba.  call temp:= `getDeclaredMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L15f1c0.  v1:= temp @kind object;
  #L15f1c2.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L15f1c8.  v2:= temp;
  #L15f1ca.  call temp:= `isPublic`(v2) @signature `Ljava/lang/reflect/Modifier;.isPublic:(I)Z` @kind static;
  #L15f1d0.  v2:= temp;
  #L15f1d2.  if v2 == 0 then goto L15f1ec;
  #L15f1d6.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L15f1dc.  v2:= temp;
  #L15f1de.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L15f1e4.  v2:= temp;
  #L15f1e6.  if v2 == 0 then goto L15f1ec;
  #L15f1ea.  v3:= 1I;
  #L15f1ec.  if v3 == 0 then goto L15f1f2;
  #L15f1f0.  v0:= v1 @kind object;
  #L15f1f2.  v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v0 @kind object;
  #L15f1f6.  return v0 @kind object;
  catch `java.lang.Throwable` @[L15f1ac..L15f1e6] goto L15f1f2;
}
procedure `void` `handleException`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v3 @kind this, `kotlin.coroutines.CoroutineContext` v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.handleException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15f234.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L15f23a.  v4:= temp @kind object;
  #L15f23c.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L15f240.  v1:= 28I;
  #L15f244.  if v0 < v1 then goto L15f258;
  #L15f248.  call temp:= `getUncaughtExceptionHandler`(v4) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L15f24e.  v0:= temp @kind object;
  #L15f250.  call `uncaughtException`(v0, v4, v5) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L15f256.  goto L15f292;
  #L15f258.  call temp:= `preHandler`(v3) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @kind direct;
  #L15f25e.  v0:= temp @kind object;
  #L15f260.  v1:= 0I;
  #L15f262.  if v0 != 0 then goto L15f26a;
  #L15f266.  v0:= v1 @kind object;
  #L15f268.  goto L15f278;
  #L15f26a.  v2:= 0I;
  #L15f26c.  v2:= new `java.lang.Object`[v2];
  #L15f270.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f276.  v0:= temp @kind object;
  #L15f278.  v2:= instanceof @variable v0 @type ^`java.lang.Thread$UncaughtExceptionHandler` @kind boolean;
  #L15f27c.  if v2 == 0 then goto L15f286;
  #L15f280.  v1:= v0 @kind object;
  #L15f282.  v1:= (`java.lang.Thread$UncaughtExceptionHandler`) v1 @kind object;
  #L15f286.  if v1 != 0 then goto L15f28c;
  #L15f28a.  goto L15f292;
  #L15f28c.  call `uncaughtException`(v1, v4, v5) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L15f292.  return @kind void;
}
