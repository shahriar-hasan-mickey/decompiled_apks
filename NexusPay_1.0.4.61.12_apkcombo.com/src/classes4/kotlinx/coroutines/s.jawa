record `kotlinx.coroutines.s` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.ExecutorCoroutineDispatcherBase` @kind class {
  `java.util.concurrent.Executor` `kotlinx.coroutines.s.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.s` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object) @signature `Lkotlinx/coroutines/s;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L159cf0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcherBase;.<init>:()V` @kind direct;
  #L159cf6.  v0.`kotlinx.coroutines.s.b` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L159cfa.  call `initFutureCancellation$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcherBase;.initFutureCancellation$kotlinx_coroutines_core:()V` @kind virtual;
  #L159d00.  return @kind void;
}
procedure `java.util.concurrent.Executor` `getExecutor`(`kotlinx.coroutines.s` v1 @kind this) @signature `Lkotlinx/coroutines/s;.getExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159cd8.  v0:= v1.`kotlinx.coroutines.s.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L159cdc.  return v0 @kind object;
}
