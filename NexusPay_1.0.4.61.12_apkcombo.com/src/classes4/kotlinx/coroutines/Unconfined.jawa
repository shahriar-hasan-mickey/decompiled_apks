record `kotlinx.coroutines.Unconfined` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.CoroutineDispatcher` @kind class {
}
global `kotlinx.coroutines.Unconfined` `@@kotlinx.coroutines.Unconfined.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/Unconfined;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15ed38.  v0:= new `kotlinx.coroutines.Unconfined`;
  #L15ed3c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/Unconfined;.<init>:()V` @kind direct;
  #L15ed42.  `@@kotlinx.coroutines.Unconfined.INSTANCE` @type ^`kotlinx.coroutines.Unconfined` := v0 @kind object;
  #L15ed46.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.Unconfined` v0 @kind this) @signature `Lkotlinx/coroutines/Unconfined;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L15ed58.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.<init>:()V` @kind direct;
  #L15ed5e.  return @kind void;
}
procedure `void` `dispatch`(`kotlinx.coroutines.Unconfined` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/Unconfined;.dispatch:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;

  #L15ed70.  v2:= `@@kotlinx.coroutines.YieldContext.Key` @type ^`kotlinx.coroutines.YieldContext$Key` @kind object;
  #L15ed74.  call temp:= `get`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L15ed7a.  v1:= temp @kind object;
  #L15ed7c.  v1:= (`kotlinx.coroutines.YieldContext`) v1 @kind object;
  #L15ed80.  if v1 == 0 then goto L15ed8c;
  #L15ed84.  v2:= 1I;
  #L15ed86.  v1.`kotlinx.coroutines.YieldContext.dispatcherWasUnconfined` @type ^`boolean` := v2 @kind boolean;
  #L15ed8a.  return @kind void;
  #L15ed8c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15ed90.  v2:= "Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls." @kind object;
  #L15ed94.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ed9a.  throw v1;
}
procedure `boolean` `isDispatchNeeded`(`kotlinx.coroutines.Unconfined` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/Unconfined;.isDispatchNeeded:(Lkotlin/coroutines/CoroutineContext;)Z` @AccessFlag PUBLIC {
    temp;

  #L15ed0c.  v1:= 0I;
  #L15ed0e.  return v1;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.Unconfined` v1 @kind this) @signature `Lkotlinx/coroutines/Unconfined;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ed20.  v0:= "Dispatchers.Unconfined" @kind object;
  #L15ed24.  return v0 @kind object;
}
