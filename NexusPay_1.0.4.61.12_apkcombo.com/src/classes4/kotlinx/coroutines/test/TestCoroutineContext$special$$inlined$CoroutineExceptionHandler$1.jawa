record `kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.AbstractCoroutineContextElement` @kind class, `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface {
  `kotlinx.coroutines.test.TestCoroutineContext` `kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1` v0 @kind this, `kotlinx.coroutines.CoroutineExceptionHandler$Key` v1 @kind object, `kotlinx.coroutines.test.TestCoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1;.<init>:(Lkotlinx/coroutines/CoroutineExceptionHandler$Key;Lkotlinx/coroutines/test/TestCoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L190f90.  v0.`kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1.a` @type ^`kotlinx.coroutines.test.TestCoroutineContext` := v2 @kind object;
  #L190f94.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @kind direct;
  #L190f9a.  return @kind void;
}
procedure `void` `handleException`(`kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1;.handleException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L190fac.  v1:= v0.`kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1.a` @type ^`kotlinx.coroutines.test.TestCoroutineContext` @kind object;
  #L190fb0.  call temp:= `access$getUncaughtExceptions$p`(v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$getUncaughtExceptions$p:(Lkotlinx/coroutines/test/TestCoroutineContext;)Ljava/util/List;` @kind static;
  #L190fb6.  v1:= temp @kind object;
  #L190fb8.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L190fbe.  return @kind void;
}
