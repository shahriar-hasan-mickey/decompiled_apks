record `kotlinx.coroutines.test.TestCoroutineContextKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `withTestContext`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContextKt;.withTestContext:(Lkotlinx/coroutines/test/TestCoroutineContext;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L190ffc.  call temp:= `invoke`(v3, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L191002.  call temp:= `getExceptions`(v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L191008.  v3:= temp @kind object;
  #L19100a.  v0:= instanceof @variable v3 @type ^`java.util.Collection` @kind boolean;
  #L19100e.  v1:= 1I;
  #L191010.  if v0 == 0 then goto L191022;
  #L191014.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L19101a.  v0:= temp;
  #L19101c.  if v0 == 0 then goto L191022;
  #L191020.  goto L19104c;
  #L191022.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L191028.  v3:= temp @kind object;
  #L19102a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L191030.  v0:= temp;
  #L191032.  if v0 == 0 then goto L19104c;
  #L191036.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19103c.  v0:= temp @kind object;
  #L19103e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L191042.  v0:= instanceof @variable v0 @type ^`java.util.concurrent.CancellationException` @kind boolean;
  #L191046.  if v0 != 0 then goto L19102a;
  #L19104a.  v1:= 0I;
  #L19104c.  if v1 == 0 then goto L191052;
  #L191050.  return @kind void;
  #L191052.  v3:= new `java.lang.AssertionError`;
  #L191056.  call temp:= `getExceptions`(v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L19105c.  v2:= temp @kind object;
  #L19105e.  v0:= "Coroutine encountered unhandled exceptions:\n" @kind object;
  #L191062.  call temp:= `stringPlus`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L191068.  v2:= temp @kind object;
  #L19106a.  call `<init>`(v3, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L191070.  throw v3;
}
procedure `void` `withTestContext$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `kotlin.jvm.functions.Function1` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContextKt;.withTestContext$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L190fd0.  v3:= 1I;
  #L190fd2.  v2:= v2 ^& v3 @kind int;
  #L190fd4.  if v2 == 0 then goto L190fe4;
  #L190fd8.  v0:= new `kotlinx.coroutines.test.TestCoroutineContext`;
  #L190fdc.  v2:= 0I;
  #L190fde.  call `<init>`(v0, v2, v3, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L190fe4.  call `withTestContext`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContextKt;.withTestContext:(Lkotlinx/coroutines/test/TestCoroutineContext;Lkotlin/jvm/functions/Function1;)V` @kind static;
  #L190fea.  return @kind void;
}
