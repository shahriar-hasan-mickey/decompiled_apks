record `kotlinx.coroutines.test.TestCoroutineContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext` @kind interface {
  `java.lang.String` `kotlinx.coroutines.test.TestCoroutineContext.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `kotlinx.coroutines.test.TestCoroutineContext.b` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` `kotlinx.coroutines.test.TestCoroutineContext.c` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.CoroutineExceptionHandler` `kotlinx.coroutines.test.TestCoroutineContext.d` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.internal.ThreadSafeHeap` `kotlinx.coroutines.test.TestCoroutineContext.e` @AccessFlag PRIVATE_FINAL;
  `long` `kotlinx.coroutines.test.TestCoroutineContext.f` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.test.TestCoroutineContext.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L191328.  v0:= 0I;
  #L19132a.  v1:= 1I;
  #L19132c.  call `<init>`(v2, v0, v1, v0) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L191332.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L191344.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19134a.  v1.`kotlinx.coroutines.test.TestCoroutineContext.a` @type ^`java.lang.String` := v2 @kind object;
  #L19134e.  v2:= new `java.util.ArrayList`;
  #L191352.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L191358.  v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` := v2 @kind object;
  #L19135c.  v2:= new `kotlinx.coroutines.test.TestCoroutineContext$Dispatcher`;
  #L191360.  call `<init>`(v2, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext$Dispatcher;.<init>:(Lkotlinx/coroutines/test/TestCoroutineContext;)V` @kind direct;
  #L191366.  v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` := v2 @kind object;
  #L19136a.  v2:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L19136e.  v0:= new `kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1`;
  #L191372.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1;.<init>:(Lkotlinx/coroutines/CoroutineExceptionHandler$Key;Lkotlinx/coroutines/test/TestCoroutineContext;)V` @kind direct;
  #L191378.  v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` := v0 @kind object;
  #L19137c.  v2:= new `kotlinx.coroutines.internal.ThreadSafeHeap`;
  #L191380.  call `<init>`(v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.<init>:()V` @kind direct;
  #L191386.  v1.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` := v2 @kind object;
  #L19138a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `kotlin.jvm.internal.DefaultConstructorMarker` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L19139c.  v2:= v2 ^& 1;
  #L1913a0.  if v2 == 0 then goto L1913a6;
  #L1913a4.  v1:= 0I;
  #L1913a6.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1913ac.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.test.TestCoroutineContext` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.a:(Ljava/lang/Runnable;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L19168c.  v0:= v10.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L191690.  v9:= new `kotlinx.coroutines.test.a`;
  #L191694.  v3:= v10.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` @kind wide;
  #L191698.  v1:= 1L;
  #L19169c.  v1:= v1 + v3 @kind long;
  #L19169e.  v10.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` := v1 @kind wide;
  #L1916a2.  v5:= 0L;
  #L1916a6.  v7:= 4I;
  #L1916a8.  v8:= 0I;
  #L1916aa.  v1:= v9 @kind object;
  #L1916ac.  v2:= v11 @kind object;
  #L1916ae.  call `<init>`(v1, v2, v3, v5, v7, v8) @signature `Lkotlinx/coroutines/test/a;.<init>:(Ljava/lang/Runnable;JJILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1916b4.  call `addLast`(v0, v9) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLast:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L1916ba.  return @kind void;
}
procedure `void` `access$enqueue`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.Runnable` v1 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$enqueue:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1913c0.  call `a`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.a:(Ljava/lang/Runnable;)V` @kind direct;
  #L1913c6.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeap` `access$getQueue$p`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$getQueue$p:(Lkotlinx/coroutines/test/TestCoroutineContext;)Lkotlinx/coroutines/internal/ThreadSafeHeap;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L19118c.  v0:= v0.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L191190.  return v0 @kind object;
}
procedure `java.util.List` `access$getUncaughtExceptions$p`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$getUncaughtExceptions$p:(Lkotlinx/coroutines/test/TestCoroutineContext;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1910e0.  v0:= v0.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L1910e4.  return v0 @kind object;
}
procedure `kotlinx.coroutines.test.a` `access$postDelayed`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.Runnable` v1 @kind object, `long` v2 ) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$postDelayed:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/Runnable;J)Lkotlinx/coroutines/test/a;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1911a4.  call temp:= `b`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.b:(Ljava/lang/Runnable;J)Lkotlinx/coroutines/test/a;` @kind direct;
  #L1911aa.  v0:= temp @kind object;
  #L1911ac.  return v0 @kind object;
}
procedure `long` `access$processNextEvent`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$processNextEvent:(Lkotlinx/coroutines/test/TestCoroutineContext;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L19120c.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.c:()J` @kind direct;
  #L191212.  v0:= temp @kind wide;
  #L191214.  return v0 @kind wide;
}
procedure `long` `advanceTimeBy$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeBy$default:(Lkotlinx/coroutines/test/TestCoroutineContext;JLjava/util/concurrent/TimeUnit;ILjava/lang/Object;)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L191228.  v4:= v4 ^& 2;
  #L19122c.  if v4 == 0 then goto L191234;
  #L191230.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L191234.  call temp:= `advanceTimeBy`(v0, v1, v3) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L19123a.  v0:= temp @kind wide;
  #L19123c.  return v0 @kind wide;
}
procedure `void` `advanceTimeTo$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo$default:(Lkotlinx/coroutines/test/TestCoroutineContext;JLjava/util/concurrent/TimeUnit;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1913d8.  v4:= v4 ^& 2;
  #L1913dc.  if v4 == 0 then goto L1913e4;
  #L1913e0.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1913e4.  call `advanceTimeTo`(v0, v1, v3) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L1913ea.  return @kind void;
}
procedure `void` `assertAllUnhandledExceptions$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAllUnhandledExceptions$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L19142c.  v3:= v3 ^& 1;
  #L191430.  if v3 == 0 then goto L191438;
  #L191434.  v1:= "" @kind object;
  #L191438.  call `assertAllUnhandledExceptions`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAllUnhandledExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L19143e.  return @kind void;
}
procedure `void` `assertAnyUnhandledException$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAnyUnhandledException$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1914d0.  v3:= v3 ^& 1;
  #L1914d4.  if v3 == 0 then goto L1914dc;
  #L1914d8.  v1:= "" @kind object;
  #L1914dc.  call `assertAnyUnhandledException`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAnyUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L1914e2.  return @kind void;
}
procedure `void` `assertExceptions$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertExceptions$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L191574.  v3:= v3 ^& 1;
  #L191578.  if v3 == 0 then goto L191580;
  #L19157c.  v1:= "" @kind object;
  #L191580.  call `assertExceptions`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L191586.  return @kind void;
}
procedure `void` `assertUnhandledException$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertUnhandledException$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1915dc.  v3:= v3 ^& 1;
  #L1915e0.  if v3 == 0 then goto L1915e8;
  #L1915e4.  v1:= "" @kind object;
  #L1915e8.  call `assertUnhandledException`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L1915ee.  return @kind void;
}
procedure `kotlinx.coroutines.test.a` `b`(`kotlinx.coroutines.test.TestCoroutineContext` v7 @kind this, `java.lang.Runnable` v8 @kind object, `long` v9 ) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.b:(Ljava/lang/Runnable;J)Lkotlinx/coroutines/test/a;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1911c0.  v6:= new `kotlinx.coroutines.test.a`;
  #L1911c4.  v2:= v7.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` @kind wide;
  #L1911c8.  v0:= 1L;
  #L1911cc.  v0:= v0 + v2 @kind long;
  #L1911ce.  v7.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` := v0 @kind wide;
  #L1911d2.  v0:= v7.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L1911d6.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1911da.  call temp:= `toNanos`(v4, v9) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L1911e0.  v9:= temp @kind wide;
  #L1911e2.  v4:= v0 + v9 @kind long;
  #L1911e6.  v0:= v6 @kind object;
  #L1911e8.  v1:= v8 @kind object;
  #L1911ea.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlinx/coroutines/test/a;.<init>:(Ljava/lang/Runnable;JJ)V` @kind direct;
  #L1911f0.  v8:= v7.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L1911f4.  call `addLast`(v8, v6) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLast:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L1911fa.  return v6 @kind object;
}
procedure `long` `c`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.c:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1912d8.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L1912dc.  call temp:= `peek`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.peek:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L1912e2.  v0:= temp @kind object;
  #L1912e4.  v0:= (`kotlinx.coroutines.test.a`) v0 @kind object;
  #L1912e8.  if v0 == 0 then goto L1912f6;
  #L1912ec.  v0:= v0.`kotlinx.coroutines.test.a.c` @type ^`long` @kind wide;
  #L1912f0.  call `d`(v2, v0) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @kind direct;
  #L1912f6.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L1912fa.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @kind virtual;
  #L191300.  v0:= temp;
  #L191302.  if v0 == 0 then goto L191312;
  #L191306.  v0:= 9223372036854775807L;
  #L191310.  goto L191316;
  #L191312.  v0:= 0L;
  #L191316.  return v0 @kind wide;
}
procedure `void` `d`(`kotlinx.coroutines.test.TestCoroutineContext` v6 @kind this, `long` v7 ) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1916e8.  v0:= v6.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L1916ec.  @monitorenter v0
  #L1916ee.  call temp:= `firstImpl`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L1916f4.  v1:= temp @kind object;
  #L1916f6.  v2:= 0I;
  #L1916f8.  if v1 != 0 then goto L191700;
  #L1916fc.  @monitorexit v0
  #L1916fe.  goto L191728;
  #L191700.  v1:= (`kotlinx.coroutines.test.a`) v1 @kind object;
  #L191704.  v3:= v1.`kotlinx.coroutines.test.a.c` @type ^`long` @kind wide;
  #L191708.  v1:= 0I;
  #L19170a.  v5:= lcmp(v3, v7);
  #L19170e.  if v5 > 0 then goto L191716;
  #L191712.  v3:= 1I;
  #L191714.  goto L191718;
  #L191716.  v3:= 0I;
  #L191718.  if v3 == 0 then goto L191726;
  #L19171c.  call temp:= `removeAtImpl`(v0, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L191722.  v1:= temp @kind object;
  #L191724.  v2:= v1 @kind object;
  #L191726.  @monitorexit v0
  #L191728.  v2:= (`kotlinx.coroutines.test.a`) v2 @kind object;
  #L19172c.  if v2 != 0 then goto L191732;
  #L191730.  return @kind void;
  #L191732.  v0:= v2.`kotlinx.coroutines.test.a.c` @type ^`long` @kind wide;
  #L191736.  v3:= 0L;
  #L19173a.  v5:= lcmp(v0, v3);
  #L19173e.  if v5 == 0 then goto L191746;
  #L191742.  v6.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` := v0 @kind wide;
  #L191746.  call `run`(v2) @signature `Lkotlinx/coroutines/test/a;.run:()V` @kind virtual;
  #L19174c.  goto L1916e8;
  #L19174e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L191750.  @monitorexit v0
  #L191752.  throw v7;
  catch `java.lang.Throwable` @[L1916ee..L1916f6] goto L19174e;
  catch `java.lang.Throwable` @[L191700..L191724] goto L19174e;
}
procedure `long` `now$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.util.concurrent.TimeUnit` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.now$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/util/concurrent/TimeUnit;ILjava/lang/Object;)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L19128c.  v2:= v2 ^& 1;
  #L191290.  if v2 == 0 then goto L191298;
  #L191294.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L191298.  call temp:= `now`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L19129e.  v0:= temp @kind wide;
  #L1912a0.  return v0 @kind wide;
}
procedure `long` `advanceTimeBy`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L191250.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L191254.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L19125a.  v4:= temp @kind wide;
  #L19125c.  v4:= v4 + v0 @kind long;
  #L19125e.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L191262.  call `advanceTimeTo`(v3, v4, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L191268.  v4:= v3.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L19126c.  v4:= v4 - v0 @kind long;
  #L19126e.  v0:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L191272.  call temp:= `convert`(v6, v4, v0) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L191278.  v4:= temp @kind wide;
  #L19127a.  return v4 @kind wide;
}
procedure `void` `advanceTimeTo`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1913fc.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L191402.  v3:= temp @kind wide;
  #L191404.  call `d`(v2, v3) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @kind direct;
  #L19140a.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L19140e.  v5:= lcmp(v3, v0);
  #L191412.  if v5 <= 0 then goto L19141a;
  #L191416.  v2.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` := v3 @kind wide;
  #L19141a.  return @kind void;
}
procedure `void` `assertAllUnhandledExceptions`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `java.lang.String` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAllUnhandledExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L191450.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L191454.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L191458.  v2:= 1I;
  #L19145a.  if v1 == 0 then goto L19146c;
  #L19145e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L191464.  v1:= temp;
  #L191466.  if v1 == 0 then goto L19146c;
  #L19146a.  goto L1914a2;
  #L19146c.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L191472.  v0:= temp @kind object;
  #L191474.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19147a.  v1:= temp;
  #L19147c.  if v1 == 0 then goto L1914a2;
  #L191480.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L191486.  v1:= temp @kind object;
  #L191488.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19148e.  v1:= temp @kind object;
  #L191490.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L191494.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L19149a.  v1:= temp;
  #L19149c.  if v1 != 0 then goto L191474;
  #L1914a0.  v2:= 0I;
  #L1914a2.  if v2 == 0 then goto L1914b2;
  #L1914a6.  v4:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L1914aa.  call `clear`(v4) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1914b0.  return @kind void;
  #L1914b2.  v5:= new `java.lang.AssertionError`;
  #L1914b6.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1914bc.  throw v5;
}
procedure `void` `assertAnyUnhandledException`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `java.lang.String` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAnyUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1914f4.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L1914f8.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L1914fc.  v2:= 0I;
  #L1914fe.  if v1 == 0 then goto L191510;
  #L191502.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L191508.  v1:= temp;
  #L19150a.  if v1 == 0 then goto L191510;
  #L19150e.  goto L191546;
  #L191510.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L191516.  v0:= temp @kind object;
  #L191518.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19151e.  v1:= temp;
  #L191520.  if v1 == 0 then goto L191546;
  #L191524.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19152a.  v1:= temp @kind object;
  #L19152c.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L191532.  v1:= temp @kind object;
  #L191534.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L191538.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L19153e.  v1:= temp;
  #L191540.  if v1 == 0 then goto L191518;
  #L191544.  v2:= 1I;
  #L191546.  if v2 == 0 then goto L191556;
  #L19154a.  v4:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L19154e.  call `clear`(v4) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L191554.  return @kind void;
  #L191556.  v5:= new `java.lang.AssertionError`;
  #L19155a.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L191560.  throw v5;
}
procedure `void` `assertExceptions`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `java.lang.String` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L191598.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L19159c.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1915a2.  v3:= temp @kind object;
  #L1915a4.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L1915a8.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1915ae.  v3:= temp;
  #L1915b0.  if v3 == 0 then goto L1915c0;
  #L1915b4.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L1915b8.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1915be.  return @kind void;
  #L1915c0.  v3:= new `java.lang.AssertionError`;
  #L1915c4.  call `<init>`(v3, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1915ca.  throw v3;
}
procedure `void` `assertUnhandledException`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this, `java.lang.String` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L191600.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L191604.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L19160a.  v0:= temp;
  #L19160c.  v1:= 1I;
  #L19160e.  if v0 != v1 then goto L191644;
  #L191612.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L191616.  v1:= 0I;
  #L191618.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L19161e.  v0:= temp @kind object;
  #L191620.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L191626.  v4:= temp @kind object;
  #L191628.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L19162c.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L191632.  v4:= temp;
  #L191634.  if v4 == 0 then goto L191644;
  #L191638.  v3:= v2.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L19163c.  call `clear`(v3) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L191642.  return @kind void;
  #L191644.  v4:= new `java.lang.AssertionError`;
  #L191648.  call `<init>`(v4, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L19164e.  throw v4;
}
procedure `void` `cancelAllActions`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.cancelAllActions:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L191660.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L191664.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @kind virtual;
  #L19166a.  v0:= temp;
  #L19166c.  if v0 != 0 then goto L19167a;
  #L191670.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L191674.  call `clear`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.clear:()V` @kind virtual;
  #L19167a.  return @kind void;
}
procedure `java.lang.Object` `fold`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L191084.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` @kind object;
  #L191088.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19108e.  v2:= temp @kind object;
  #L191090.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` @kind object;
  #L191094.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19109a.  v2:= temp @kind object;
  #L19109c.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19115c.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L191160.  if v2 != v0 then goto L19116a;
  #L191164.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` @kind object;
  #L191168.  goto L19117a;
  #L19116a.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L19116e.  if v2 != v0 then goto L191178;
  #L191172.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` @kind object;
  #L191176.  goto L19117a;
  #L191178.  v2:= 0I;
  #L19117a.  return v2 @kind object;
}
procedure `java.util.List` `getExceptions`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1910f8.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L1910fc.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L191110.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L191114.  if v2 != v0 then goto L19111e;
  #L191118.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` @kind object;
  #L19111c.  goto L19112e;
  #L19111e.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L191122.  if v2 != v0 then goto L19112c;
  #L191126.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` @kind object;
  #L19112a.  goto L19112e;
  #L19112c.  v2:= v1 @kind object;
  #L19112e.  return v2 @kind object;
}
procedure `long` `now`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1912b4.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L1912b8.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1912bc.  call temp:= `convert`(v4, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L1912c2.  v0:= temp @kind wide;
  #L1912c4.  return v0 @kind wide;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;

  #L191140.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L191146.  v1:= temp @kind object;
  #L191148.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1910b0.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.a` @type ^`java.lang.String` @kind object;
  #L1910b4.  if v0 != 0 then goto L1910cc;
  #L1910b8.  call temp:= `getHexAddress`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1910be.  v0:= temp @kind object;
  #L1910c0.  v1:= "TestCoroutineContext@" @kind object;
  #L1910c4.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1910ca.  v0:= temp @kind object;
  #L1910cc.  return v0 @kind object;
}
procedure `void` `triggerActions`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.triggerActions:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1916cc.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L1916d0.  call `d`(v2, v0) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @kind direct;
  #L1916d6.  return @kind void;
}
