record `kotlinx.coroutines.selects.SelectBuilderImpl$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.AtomicOp` @kind class {
  `kotlinx.coroutines.selects.SelectBuilderImpl` `kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.AtomicDesc` `kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.selects.SelectBuilderImpl$a.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v0 @kind this, `kotlinx.coroutines.selects.SelectBuilderImpl` v1 @kind object, `kotlinx.coroutines.internal.AtomicDesc` v2 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.<init>:(Lkotlinx/coroutines/selects/SelectBuilderImpl;Lkotlinx/coroutines/internal/AtomicDesc;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18dd20.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.<init>:()V` @kind direct;
  #L18dd26.  v0.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` := v1 @kind object;
  #L18dd2a.  v0.`kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @type ^`kotlinx.coroutines.internal.AtomicDesc` := v2 @kind object;
  #L18dd2e.  call temp:= `access$getSelectOpSequenceNumber$p`() @signature `Lkotlinx/coroutines/selects/SelectKt;.access$getSelectOpSequenceNumber$p:()Lkotlinx/coroutines/selects/SeqNumber;` @kind static;
  #L18dd34.  v1:= temp @kind object;
  #L18dd36.  call temp:= `next`(v1) @signature `Lkotlinx/coroutines/selects/SeqNumber;.next:()J` @kind virtual;
  #L18dd3c.  v1:= temp @kind wide;
  #L18dd3e.  v0.`kotlinx.coroutines.selects.SelectBuilderImpl$a.d` @type ^`long` := v1 @kind wide;
  #L18dd42.  v1:= v0.`kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @type ^`kotlinx.coroutines.internal.AtomicDesc` @kind object;
  #L18dd46.  call `setAtomicOp`(v1, v0) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.setAtomicOp:(Lkotlinx/coroutines/internal/AtomicOp;)V` @kind virtual;
  #L18dd4c.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18dd84.  if v4 != 0 then goto L18dd8c;
  #L18dd88.  v4:= 1I;
  #L18dd8a.  goto L18dd8e;
  #L18dd8c.  v4:= 0I;
  #L18dd8e.  if v4 == 0 then goto L18dd96;
  #L18dd92.  v0:= 0I;
  #L18dd94.  goto L18dd9e;
  #L18dd96.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L18dd9c.  v0:= temp @kind object;
  #L18dd9e.  v1:= v3.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L18dda2.  v2:= `@@kotlinx.coroutines.selects.SelectBuilderImpl.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18dda6.  call temp:= `compareAndSet`(v2, v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18ddac.  v0:= temp;
  #L18ddae.  if v0 == 0 then goto L18ddc0;
  #L18ddb2.  if v4 == 0 then goto L18ddc0;
  #L18ddb6.  v4:= v3.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L18ddba.  call `access$doAfterSelect`(v4) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl;.access$doAfterSelect:(Lkotlinx/coroutines/selects/SelectBuilderImpl;)V` @kind static;
  #L18ddc0.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v5 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.b:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L18dc54.  v0:= v5.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L18dc58.  v1:= v0.`kotlinx.coroutines.selects.SelectBuilderImpl._state` @type ^`java.lang.Object` @kind object;
  #L18dc5c.  v2:= 0I;
  #L18dc5e.  if v1 != v5 then goto L18dc64;
  #L18dc62.  return v2 @kind object;
  #L18dc64.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L18dc68.  if v3 == 0 then goto L18dc7c;
  #L18dc6c.  v1:= (`kotlinx.coroutines.internal.OpDescriptor`) v1 @kind object;
  #L18dc70.  v2:= v5.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L18dc74.  call temp:= `perform`(v1, v2) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18dc7a.  goto L18dc58;
  #L18dc7c.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L18dc82.  v3:= temp @kind object;
  #L18dc84.  if v1 != v3 then goto L18dca6;
  #L18dc88.  v1:= v5.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L18dc8c.  v3:= `@@kotlinx.coroutines.selects.SelectBuilderImpl.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18dc90.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L18dc96.  v4:= temp @kind object;
  #L18dc98.  call temp:= `compareAndSet`(v3, v1, v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18dc9e.  v1:= temp;
  #L18dca0.  if v1 == 0 then goto L18dc58;
  #L18dca4.  return v2 @kind object;
  #L18dca6.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L18dcac.  v0:= temp @kind object;
  #L18dcae.  return v0 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v3 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.c:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18ddd4.  v0:= v3.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L18ddd8.  v1:= `@@kotlinx.coroutines.selects.SelectBuilderImpl.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18dddc.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L18dde2.  v2:= temp @kind object;
  #L18dde4.  call temp:= `compareAndSet`(v1, v0, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18ddea.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L18dd60.  call `a`(v0, v2) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L18dd66.  v1:= v0.`kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @type ^`kotlinx.coroutines.internal.AtomicDesc` @kind object;
  #L18dd6a.  call `complete`(v1, v0, v2) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.complete:(Lkotlinx/coroutines/internal/AtomicOp;Ljava/lang/Object;)V` @kind virtual;
  #L18dd70.  return @kind void;
}
procedure `long` `getOpSequence`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v2 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.getOpSequence:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18dd08.  v0:= v2.`kotlinx.coroutines.selects.SelectBuilderImpl$a.d` @type ^`long` @kind wide;
  #L18dd0c.  return v0 @kind wide;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18dc08.  if v2 != 0 then goto L18dc1c;
  #L18dc0c.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.b:()Ljava/lang/Object;` @kind direct;
  #L18dc12.  v0:= temp @kind object;
  #L18dc14.  if v0 != 0 then goto L18dc1a;
  #L18dc18.  goto L18dc1c;
  #L18dc1a.  return v0 @kind object;
  #L18dc1c.  v0:= v1.`kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @type ^`kotlinx.coroutines.internal.AtomicDesc` @kind object;
  #L18dc20.  call temp:= `prepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.prepare:(Lkotlinx/coroutines/internal/AtomicOp;)Ljava/lang/Object;` @kind virtual;
  #L18dc26.  v2:= temp @kind object;
  #L18dc28.  return v2 @kind object;
  #L18dc2a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18dc2c.  if v2 != 0 then goto L18dc36;
  #L18dc30.  call `c`(v1) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.c:()V` @kind direct;
  #L18dc36.  throw v0;
  catch `java.lang.Throwable` @[L18dc1c..L18dc28] goto L18dc2a;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v3 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18dcc0.  v0:= new `java.lang.StringBuilder`;
  #L18dcc4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18dcca.  v1:= "AtomicSelectOp(sequence=" @kind object;
  #L18dcce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18dcd4.  call temp:= `getOpSequence`(v3) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.getOpSequence:()J` @kind virtual;
  #L18dcda.  v1:= temp @kind wide;
  #L18dcdc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L18dce2.  v1:= 41I;
  #L18dce6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18dcec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18dcf2.  v0:= temp @kind object;
  #L18dcf4.  return v0 @kind object;
}
