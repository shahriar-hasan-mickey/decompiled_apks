record `kotlinx.coroutines.selects.SelectInstance` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `void` `disposeOnSelect`(`kotlinx.coroutines.DisposableHandle` v0 @kind object) @signature `Lkotlinx/coroutines/selects/SelectInstance;.disposeOnSelect:(Lkotlinx/coroutines/DisposableHandle;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlin.coroutines.Continuation` `getCompletion`() @signature `Lkotlinx/coroutines/selects/SelectInstance;.getCompletion:()Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isSelected`() @signature `Lkotlinx/coroutines/selects/SelectInstance;.isSelected:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `performAtomicTrySelect`(`kotlinx.coroutines.internal.AtomicDesc` v0 @kind object) @signature `Lkotlinx/coroutines/selects/SelectInstance;.performAtomicTrySelect:(Lkotlinx/coroutines/internal/AtomicDesc;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `resumeSelectWithException`(`java.lang.Throwable` v0 @kind object) @signature `Lkotlinx/coroutines/selects/SelectInstance;.resumeSelectWithException:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `trySelect`() @signature `Lkotlinx/coroutines/selects/SelectInstance;.trySelect:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `trySelectOther`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v0 @kind object) @signature `Lkotlinx/coroutines/selects/SelectInstance;.trySelectOther:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
