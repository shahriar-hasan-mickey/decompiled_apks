record `kotlinx.coroutines.g` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.AbstractCoroutine` @kind class {
  `java.lang.Thread` `kotlinx.coroutines.g.c` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.EventLoop` `kotlinx.coroutines.g.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.g` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `java.lang.Thread` v3 @kind object, `kotlinx.coroutines.EventLoop` v4 @kind object) @signature `Lkotlinx/coroutines/g;.<init>:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Thread;Lkotlinx/coroutines/EventLoop;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L153780.  v0:= 1I;
  #L153782.  call `<init>`(v1, v2, v0, v0) @signature `Lkotlinx/coroutines/AbstractCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;ZZ)V` @kind direct;
  #L153788.  v1.`kotlinx.coroutines.g.c` @type ^`java.lang.Thread` := v3 @kind object;
  #L15378c.  v1.`kotlinx.coroutines.g.d` @type ^`kotlinx.coroutines.EventLoop` := v4 @kind object;
  #L153790.  return @kind void;
}
procedure `java.lang.Object` `D`(`kotlinx.coroutines.g` v6 @kind this) @signature `Lkotlinx/coroutines/g;.D:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L153638.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L15363e.  v0:= temp @kind object;
  #L153640.  if v0 != 0 then goto L153646;
  #L153644.  goto L15364c;
  #L153646.  call `registerTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.registerTimeLoopThread:()V` @kind virtual;
  #L15364c.  v0:= v6.`kotlinx.coroutines.g.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L153650.  v1:= 1I;
  #L153652.  v2:= 0I;
  #L153654.  v3:= 0I;
  #L153656.  if v0 != 0 then goto L15365c;
  #L15365a.  goto L153662;
  #L15365c.  call `incrementUseCount$default`(v0, v2, v1, v3) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @kind static;
  #L153662.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L153668.  v0:= temp;
  #L15366a.  if v0 != 0 then goto L153700;
  #L15366e.  v0:= v6.`kotlinx.coroutines.g.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L153672.  if v0 != 0 then goto L153682;
  #L153676.  v4:= 9223372036854775807L;
  #L153680.  goto L15368a;
  #L153682.  call temp:= `processNextEvent`(v0) @signature `Lkotlinx/coroutines/EventLoop;.processNextEvent:()J` @kind virtual;
  #L153688.  v4:= temp @kind wide;
  #L15368a.  call temp:= `isCompleted`(v6) @signature `Lkotlinx/coroutines/JobSupport;.isCompleted:()Z` @kind virtual;
  #L153690.  v0:= temp;
  #L153692.  if v0 == 0 then goto L1536e4;
  #L153696.  v0:= v6.`kotlinx.coroutines.g.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L15369a.  if v0 != 0 then goto L1536a0;
  #L15369e.  goto L1536a6;
  #L1536a0.  call `decrementUseCount$default`(v0, v2, v1, v3) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @kind static;
  #L1536a6.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1536ac.  v0:= temp @kind object;
  #L1536ae.  if v0 != 0 then goto L1536b4;
  #L1536b2.  goto L1536ba;
  #L1536b4.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L1536ba.  call temp:= `getState$kotlinx_coroutines_core`(v6) @signature `Lkotlinx/coroutines/JobSupport;.getState$kotlinx_coroutines_core:()Ljava/lang/Object;` @kind virtual;
  #L1536c0.  v0:= temp @kind object;
  #L1536c2.  call temp:= `unboxState`(v0) @signature `Lkotlinx/coroutines/JobSupportKt;.unboxState:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1536c8.  v0:= temp @kind object;
  #L1536ca.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.CompletedExceptionally` @kind boolean;
  #L1536ce.  if v1 == 0 then goto L1536d8;
  #L1536d2.  v3:= v0 @kind object;
  #L1536d4.  v3:= (`kotlinx.coroutines.CompletedExceptionally`) v3 @kind object;
  #L1536d8.  if v3 != 0 then goto L1536de;
  #L1536dc.  return v0 @kind object;
  #L1536de.  v0:= v3.`kotlinx.coroutines.CompletedExceptionally.cause` @type ^`java.lang.Throwable` @kind object;
  #L1536e2.  throw v0;
  #L1536e4.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1536ea.  v0:= temp @kind object;
  #L1536ec.  if v0 != 0 then goto L1536f8;
  #L1536f0.  call `parkNanos`(v6, v4) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(Ljava/lang/Object;J)V` @kind static;
  #L1536f6.  goto L153662;
  #L1536f8.  call `parkNanos`(v0, v6, v4) @signature `Lkotlinx/coroutines/AbstractTimeSource;.parkNanos:(Ljava/lang/Object;J)V` @kind virtual;
  #L1536fe.  goto L153662;
  #L153700.  v0:= new `java.lang.InterruptedException`;
  #L153704.  call `<init>`(v0) @signature `Ljava/lang/InterruptedException;.<init>:()V` @kind direct;
  #L15370a.  call temp:= `cancelCoroutine`(v6, v0) @signature `Lkotlinx/coroutines/JobSupport;.cancelCoroutine:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L153710.  throw v0;
  #L153712.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L153714.  v4:= v6.`kotlinx.coroutines.g.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L153718.  if v4 != 0 then goto L15371e;
  #L15371c.  goto L153724;
  #L15371e.  call `decrementUseCount$default`(v4, v2, v1, v3) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @kind static;
  #L153724.  throw v0;
  #L153726.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L153728.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L15372e.  v1:= temp @kind object;
  #L153730.  if v1 != 0 then goto L153736;
  #L153734.  goto L15373c;
  #L153736.  call `unregisterTimeLoopThread`(v1) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L15373c.  throw v0;
  catch `java.lang.Throwable` @[L15364c..L153662] goto L153726;
  catch `java.lang.Throwable` @[L153662..L153692] goto L153712;
  catch `java.lang.Throwable` @[L153696..L1536a6] goto L153726;
  catch `java.lang.Throwable` @[L1536e4..L153712] goto L153712;
  catch `java.lang.Throwable` @[L153714..L153726] goto L153726;
}
procedure `void` `afterCompletion`(`kotlinx.coroutines.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/g;.afterCompletion:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1537a4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1537aa.  v2:= temp @kind object;
  #L1537ac.  v0:= v1.`kotlinx.coroutines.g.c` @type ^`java.lang.Thread` @kind object;
  #L1537b0.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1537b6.  v2:= temp;
  #L1537b8.  if v2 != 0 then goto L1537da;
  #L1537bc.  v2:= v1.`kotlinx.coroutines.g.c` @type ^`java.lang.Thread` @kind object;
  #L1537c0.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1537c6.  v0:= temp @kind object;
  #L1537c8.  if v0 != 0 then goto L1537d4;
  #L1537cc.  call `unpark`(v2) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L1537d2.  goto L1537da;
  #L1537d4.  call `unpark`(v0, v2) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unpark:(Ljava/lang/Thread;)V` @kind virtual;
  #L1537da.  return @kind void;
}
procedure `boolean` `isScopedCoroutine`(`kotlinx.coroutines.g` v1 @kind this) @signature `Lkotlinx/coroutines/g;.isScopedCoroutine:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L153624.  v0:= 1I;
  #L153626.  return v0;
}
