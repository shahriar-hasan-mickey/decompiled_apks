record `kotlinx.coroutines.EventLoop` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.CoroutineDispatcher` @kind class {
  `long` `kotlinx.coroutines.EventLoop.a` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.EventLoop.b` @AccessFlag PRIVATE;
  `kotlinx.coroutines.internal.ArrayQueue` `kotlinx.coroutines.EventLoop.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.EventLoop` v0 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1597d8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.<init>:()V` @kind direct;
  #L1597de.  return @kind void;
}
procedure `long` `a`(`kotlinx.coroutines.EventLoop` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L159748.  if v3 == 0 then goto L159758;
  #L15974c.  v0:= 4294967296L;
  #L159756.  goto L15975c;
  #L159758.  v0:= 1L;
  #L15975c.  return v0 @kind wide;
}
procedure `void` `decrementUseCount$default`(`kotlinx.coroutines.EventLoop` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1597f0.  if v3 != 0 then goto L159806;
  #L1597f4.  v2:= v2 ^& 1;
  #L1597f8.  if v2 == 0 then goto L1597fe;
  #L1597fc.  v1:= 0I;
  #L1597fe.  call `decrementUseCount`(v0, v1) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount:(Z)V` @kind virtual;
  #L159804.  return @kind void;
  #L159806.  v0:= new `java.lang.UnsupportedOperationException`;
  #L15980a.  v1:= "Super calls with default arguments not supported in this target, function: decrementUseCount" @kind object;
  #L15980e.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159814.  throw v0;
}
procedure `void` `incrementUseCount$default`(`kotlinx.coroutines.EventLoop` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1598c8.  if v3 != 0 then goto L1598de;
  #L1598cc.  v2:= v2 ^& 1;
  #L1598d0.  if v2 == 0 then goto L1598d6;
  #L1598d4.  v1:= 0I;
  #L1598d6.  call `incrementUseCount`(v0, v1) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount:(Z)V` @kind virtual;
  #L1598dc.  return @kind void;
  #L1598de.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1598e2.  v1:= "Super calls with default arguments not supported in this target, function: incrementUseCount" @kind object;
  #L1598e6.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1598ec.  throw v0;
}
procedure `void` `decrementUseCount`(`kotlinx.coroutines.EventLoop` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L159828.  v0:= v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L15982c.  call temp:= `a`(v4, v5) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @kind direct;
  #L159832.  v2:= temp @kind wide;
  #L159834.  v0:= v0 - v2 @kind long;
  #L159836.  v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` := v0 @kind wide;
  #L15983a.  v2:= 0L;
  #L15983e.  v5:= lcmp(v0, v2);
  #L159842.  if v5 <= 0 then goto L159848;
  #L159846.  return @kind void;
  #L159848.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L15984e.  v5:= temp;
  #L159850.  if v5 == 0 then goto L159878;
  #L159854.  v0:= v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L159858.  v5:= lcmp(v0, v2);
  #L15985c.  if v5 != 0 then goto L159864;
  #L159860.  v5:= 1I;
  #L159862.  goto L159866;
  #L159864.  v5:= 0I;
  #L159866.  if v5 == 0 then goto L15986c;
  #L15986a.  goto L159878;
  #L15986c.  v5:= new `java.lang.AssertionError`;
  #L159870.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L159876.  throw v5;
  #L159878.  v5:= v4.`kotlinx.coroutines.EventLoop.b` @type ^`boolean` @kind boolean;
  #L15987c.  if v5 == 0 then goto L159886;
  #L159880.  call `shutdown`(v4) @signature `Lkotlinx/coroutines/EventLoop;.shutdown:()V` @kind virtual;
  #L159886.  return @kind void;
}
procedure `void` `dispatchUnconfined`(`kotlinx.coroutines.EventLoop` v1 @kind this, `kotlinx.coroutines.DispatchedTask` v2 @kind object) @signature `Lkotlinx/coroutines/EventLoop;.dispatchUnconfined:(Lkotlinx/coroutines/DispatchedTask;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L159898.  v0:= v1.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L15989c.  if v0 != 0 then goto L1598ae;
  #L1598a0.  v0:= new `kotlinx.coroutines.internal.ArrayQueue`;
  #L1598a4.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.<init>:()V` @kind direct;
  #L1598aa.  v1.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` := v0 @kind object;
  #L1598ae.  call `addLast`(v0, v2) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L1598b4.  return @kind void;
}
procedure `long` `getNextTime`(`kotlinx.coroutines.EventLoop` v3 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.getNextTime:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L159770.  v0:= v3.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L159774.  v1:= 9223372036854775807L;
  #L15977e.  if v0 != 0 then goto L159784;
  #L159782.  return v1 @kind wide;
  #L159784.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.isEmpty:()Z` @kind virtual;
  #L15978a.  v0:= temp;
  #L15978c.  if v0 == 0 then goto L159792;
  #L159790.  goto L159796;
  #L159792.  v1:= 0L;
  #L159796.  return v1 @kind wide;
}
procedure `void` `incrementUseCount`(`kotlinx.coroutines.EventLoop` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L159900.  v0:= v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L159904.  call temp:= `a`(v4, v5) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @kind direct;
  #L15990a.  v2:= temp @kind wide;
  #L15990c.  v0:= v0 + v2 @kind long;
  #L15990e.  v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` := v0 @kind wide;
  #L159912.  if v5 != 0 then goto L15991c;
  #L159916.  v5:= 1I;
  #L159918.  v4.`kotlinx.coroutines.EventLoop.b` @type ^`boolean` := v5 @kind boolean;
  #L15991c.  return @kind void;
}
procedure `boolean` `isActive`(`kotlinx.coroutines.EventLoop` v5 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isActive:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L159664.  v0:= v5.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L159668.  v2:= 0L;
  #L15966c.  v4:= lcmp(v0, v2);
  #L159670.  if v4 <= 0 then goto L159678;
  #L159674.  v0:= 1I;
  #L159676.  goto L15967a;
  #L159678.  v0:= 0I;
  #L15967a.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.EventLoop` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isEmpty:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15968c.  call temp:= `isUnconfinedQueueEmpty`(v1) @signature `Lkotlinx/coroutines/EventLoop;.isUnconfinedQueueEmpty:()Z` @kind virtual;
  #L159692.  v0:= temp;
  #L159694.  return v0;
}
procedure `boolean` `isUnconfinedLoopActive`(`kotlinx.coroutines.EventLoop` v6 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isUnconfinedLoopActive:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1596a8.  v0:= v6.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L1596ac.  v2:= 1I;
  #L1596ae.  call temp:= `a`(v6, v2) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @kind direct;
  #L1596b4.  v3:= temp @kind wide;
  #L1596b6.  v5:= lcmp(v0, v3);
  #L1596ba.  if v5 < 0 then goto L1596c0;
  #L1596be.  goto L1596c2;
  #L1596c0.  v2:= 0I;
  #L1596c2.  return v2;
}
procedure `boolean` `isUnconfinedQueueEmpty`(`kotlinx.coroutines.EventLoop` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isUnconfinedQueueEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1596d4.  v0:= v1.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L1596d8.  if v0 != 0 then goto L1596e0;
  #L1596dc.  v0:= 1I;
  #L1596de.  goto L1596e8;
  #L1596e0.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.isEmpty:()Z` @kind virtual;
  #L1596e6.  v0:= temp;
  #L1596e8.  return v0;
}
procedure `long` `processNextEvent`(`kotlinx.coroutines.EventLoop` v2 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.processNextEvent:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1597a8.  call temp:= `processUnconfinedEvent`(v2) @signature `Lkotlinx/coroutines/EventLoop;.processUnconfinedEvent:()Z` @kind virtual;
  #L1597ae.  v0:= temp;
  #L1597b0.  if v0 != 0 then goto L1597c0;
  #L1597b4.  v0:= 9223372036854775807L;
  #L1597be.  return v0 @kind wide;
  #L1597c0.  v0:= 0L;
  #L1597c4.  return v0 @kind wide;
}
procedure `boolean` `processUnconfinedEvent`(`kotlinx.coroutines.EventLoop` v2 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.processUnconfinedEvent:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1596fc.  v0:= v2.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L159700.  v1:= 0I;
  #L159702.  if v0 != 0 then goto L159708;
  #L159706.  return v1;
  #L159708.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L15970e.  v0:= temp @kind object;
  #L159710.  v0:= (`kotlinx.coroutines.DispatchedTask`) v0 @kind object;
  #L159714.  if v0 != 0 then goto L15971a;
  #L159718.  return v1;
  #L15971a.  call `run`(v0) @signature `Lkotlinx/coroutines/DispatchedTask;.run:()V` @kind virtual;
  #L159720.  v0:= 1I;
  #L159722.  return v0;
}
procedure `boolean` `shouldBeProcessedFromContext`(`kotlinx.coroutines.EventLoop` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.shouldBeProcessedFromContext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159734.  v0:= 0I;
  #L159736.  return v0;
}
procedure `void` `shutdown`(`kotlinx.coroutines.EventLoop` v0 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.shutdown:()V` @AccessFlag PROTECTED {
    temp;

  #L159930.  return @kind void;
}
