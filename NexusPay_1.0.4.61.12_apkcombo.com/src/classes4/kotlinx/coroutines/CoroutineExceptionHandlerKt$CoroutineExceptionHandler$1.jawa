record `kotlinx.coroutines.CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.AbstractCoroutineContextElement` @kind class, `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlinx.coroutines.CoroutineExceptionHandler$Key` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/CoroutineExceptionHandler$Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L156714.  v0.`kotlinx.coroutines.CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L156718.  call `<init>`(v0, v2) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @kind direct;
  #L15671e.  return @kind void;
}
procedure `void` `handleException`(`kotlinx.coroutines.CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1;.handleException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L156730.  v0:= v1.`kotlinx.coroutines.CoroutineExceptionHandlerKt$CoroutineExceptionHandler$1.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L156734.  call temp:= `invoke`(v0, v2, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15673a.  return @kind void;
}
