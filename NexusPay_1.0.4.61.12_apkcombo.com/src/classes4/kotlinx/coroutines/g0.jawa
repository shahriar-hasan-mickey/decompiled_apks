record `kotlinx.coroutines.g0` @kind class @AccessFlag  extends `kotlinx.coroutines.AbstractCoroutine` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.g0` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `boolean` v3 ) @signature `Lkotlinx/coroutines/g0;.<init>:(Lkotlin/coroutines/CoroutineContext;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15e204.  v0:= 1I;
  #L15e206.  call `<init>`(v1, v2, v0, v3) @signature `Lkotlinx/coroutines/AbstractCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;ZZ)V` @kind direct;
  #L15e20c.  return @kind void;
}
procedure `boolean` `handleJobException`(`kotlinx.coroutines.g0` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/g0;.handleJobException:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15e1e0.  call temp:= `getContext`(v1) @signature `Lkotlinx/coroutines/AbstractCoroutine;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L15e1e6.  v0:= temp @kind object;
  #L15e1e8.  call `handleCoroutineException`(v0, v2) @signature `Lkotlinx/coroutines/CoroutineExceptionHandlerKt;.handleCoroutineException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @kind static;
  #L15e1ee.  v2:= 1I;
  #L15e1f0.  return v2;
}
