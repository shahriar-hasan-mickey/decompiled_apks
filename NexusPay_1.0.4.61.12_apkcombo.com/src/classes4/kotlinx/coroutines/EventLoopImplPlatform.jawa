record `kotlinx.coroutines.EventLoopImplPlatform` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.EventLoop` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.EventLoopImplPlatform` v0 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15949c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/EventLoop;.<init>:()V` @kind direct;
  #L1594a2.  return @kind void;
}
procedure `java.lang.Thread` `getThread`() @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.getThread:()Ljava/lang/Thread;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `reschedule`(`kotlinx.coroutines.EventLoopImplPlatform` v1 @kind this, `long` v2 , `kotlinx.coroutines.EventLoopImplBase$DelayedTask` v4 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.reschedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1594b4.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1594ba.  v0:= temp;
  #L1594bc.  if v0 == 0 then goto L1594e0;
  #L1594c0.  v0:= `@@kotlinx.coroutines.DefaultExecutor.INSTANCE` @type ^`kotlinx.coroutines.DefaultExecutor` @kind object;
  #L1594c4.  if v1 == v0 then goto L1594cc;
  #L1594c8.  v0:= 1I;
  #L1594ca.  goto L1594ce;
  #L1594cc.  v0:= 0I;
  #L1594ce.  if v0 == 0 then goto L1594d4;
  #L1594d2.  goto L1594e0;
  #L1594d4.  v2:= new `java.lang.AssertionError`;
  #L1594d8.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1594de.  throw v2;
  #L1594e0.  v0:= `@@kotlinx.coroutines.DefaultExecutor.INSTANCE` @type ^`kotlinx.coroutines.DefaultExecutor` @kind object;
  #L1594e4.  call `schedule`(v0, v2, v4) @signature `Lkotlinx/coroutines/EventLoopImplBase;.schedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @kind virtual;
  #L1594ea.  return @kind void;
}
procedure `void` `unpark`(`kotlinx.coroutines.EventLoopImplPlatform` v2 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.unpark:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L1594fc.  call temp:= `getThread`(v2) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L159502.  v0:= temp @kind object;
  #L159504.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L15950a.  v1:= temp @kind object;
  #L15950c.  if v1 == v0 then goto L15952a;
  #L159510.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L159516.  v1:= temp @kind object;
  #L159518.  if v1 != 0 then goto L159524;
  #L15951c.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L159522.  goto L15952a;
  #L159524.  call `unpark`(v1, v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unpark:(Ljava/lang/Thread;)V` @kind virtual;
  #L15952a.  return @kind void;
}
