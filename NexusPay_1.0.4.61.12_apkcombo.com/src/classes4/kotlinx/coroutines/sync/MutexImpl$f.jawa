record `kotlinx.coroutines.sync.MutexImpl$f` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.AtomicOp` @kind class {
  `kotlinx.coroutines.sync.MutexImpl$d` `kotlinx.coroutines.sync.MutexImpl$f.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl$d` v1 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18f574.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.<init>:()V` @kind direct;
  #L18f57a.  v0.`kotlinx.coroutines.sync.MutexImpl$f.b` @type ^`kotlinx.coroutines.sync.MutexImpl$d` := v1 @kind object;
  #L18f57e.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.sync.MutexImpl$f` v1 @kind this, `kotlinx.coroutines.sync.MutexImpl` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.a:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18f5ac.  if v3 != 0 then goto L18f5ba;
  #L18f5b0.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18f5b6.  v3:= temp @kind object;
  #L18f5b8.  goto L18f5be;
  #L18f5ba.  v3:= v1.`kotlinx.coroutines.sync.MutexImpl$f.b` @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind object;
  #L18f5be.  v0:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18f5c2.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18f5c8.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.b:(Lkotlinx/coroutines/sync/MutexImpl;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L18f544.  v1:= v0.`kotlinx.coroutines.sync.MutexImpl$f.b` @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind object;
  #L18f548.  call temp:= `isEmpty`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isEmpty:()Z` @kind virtual;
  #L18f54e.  v1:= temp;
  #L18f550.  if v1 == 0 then goto L18f558;
  #L18f554.  v1:= 0I;
  #L18f556.  goto L18f560;
  #L18f558.  call temp:= `access$getUNLOCK_FAIL$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCK_FAIL$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18f55e.  v1:= temp @kind object;
  #L18f560.  return v1 @kind object;
}
procedure `void` `complete`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L18f590.  v1:= (`kotlinx.coroutines.sync.MutexImpl`) v1 @kind object;
  #L18f594.  call `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.a:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind virtual;
  #L18f59a.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L18f524.  v1:= (`kotlinx.coroutines.sync.MutexImpl`) v1 @kind object;
  #L18f528.  call temp:= `b`(v0, v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.b:(Lkotlinx/coroutines/sync/MutexImpl;)Ljava/lang/Object;` @kind virtual;
  #L18f52e.  v1:= temp @kind object;
  #L18f530.  return v1 @kind object;
}
