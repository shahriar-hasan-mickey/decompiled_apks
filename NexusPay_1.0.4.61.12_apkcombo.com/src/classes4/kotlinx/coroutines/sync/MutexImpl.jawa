record `kotlinx.coroutines.sync.MutexImpl` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.sync.Mutex` @kind interface, `kotlinx.coroutines.selects.SelectClause2` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl._state` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.sync.MutexImpl.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/MutexImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L18fba8.  v0:= constclass @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L18fbac.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L18fbb0.  v2:= "_state" @kind object;
  #L18fbb4.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L18fbba.  v0:= temp @kind object;
  #L18fbbc.  `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L18fbc0.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl` v0 @kind this, `boolean` v1 ) @signature `Lkotlinx/coroutines/sync/MutexImpl;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18fbd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18fbda.  if v1 == 0 then goto L18fbe8;
  #L18fbde.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18fbe4.  v1:= temp @kind object;
  #L18fbe6.  goto L18fbf0;
  #L18fbe8.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18fbee.  v1:= temp @kind object;
  #L18fbf0.  v0.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` := v1 @kind object;
  #L18fbf4.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.sync.MutexImpl` v8 @kind this, `java.lang.Object` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.a:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L18f954.  call temp:= `intercepted`(v10) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L18f95a.  v0:= temp @kind object;
  #L18f95c.  call temp:= `getOrCreateCancellableContinuation`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.getOrCreateCancellableContinuation:(Lkotlin/coroutines/Continuation;)Lkotlinx/coroutines/CancellableContinuationImpl;` @kind static;
  #L18f962.  v0:= temp @kind object;
  #L18f964.  v1:= new `kotlinx.coroutines.sync.MutexImpl$a`;
  #L18f968.  call `<init>`(v1, v8, v9, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/CancellableContinuation;)V` @kind direct;
  #L18f96e.  v2:= v8.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18f972.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L18f976.  if v3 == 0 then goto L18f9e8;
  #L18f97a.  v3:= v2 @kind object;
  #L18f97c.  v3:= (`kotlinx.coroutines.sync.b`) v3 @kind object;
  #L18f980.  v4:= v3.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18f984.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18f98a.  v5:= temp @kind object;
  #L18f98c.  if v4 == v5 then goto L18f9aa;
  #L18f990.  v4:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18f994.  v5:= new `kotlinx.coroutines.sync.MutexImpl$d`;
  #L18f998.  v3:= v3.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18f99c.  call `<init>`(v5, v3) @signature `Lkotlinx/coroutines/sync/MutexImpl$d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L18f9a2.  call temp:= `compareAndSet`(v4, v8, v2, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18f9a8.  goto L18f96e;
  #L18f9aa.  if v9 != 0 then goto L18f9b8;
  #L18f9ae.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18f9b4.  v3:= temp @kind object;
  #L18f9b6.  goto L18f9c2;
  #L18f9b8.  v3:= new `kotlinx.coroutines.sync.b`;
  #L18f9bc.  call `<init>`(v3, v9) @signature `Lkotlinx/coroutines/sync/b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L18f9c2.  v4:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18f9c6.  call temp:= `compareAndSet`(v4, v8, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18f9cc.  v2:= temp;
  #L18f9ce.  if v2 == 0 then goto L18f96e;
  #L18f9d2.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18f9d6.  v2:= new `kotlinx.coroutines.sync.MutexImpl$g`;
  #L18f9da.  call `<init>`(v2, v8, v9) @signature `Lkotlinx/coroutines/sync/MutexImpl$g;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L18f9e0.  call `resume`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuation;.resume:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L18f9e6.  goto L18fa44;
  #L18f9e8.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18f9ec.  if v3 == 0 then goto L18fa92;
  #L18f9f0.  v3:= v2 @kind object;
  #L18f9f2.  v3:= (`kotlinx.coroutines.sync.MutexImpl$d`) v3 @kind object;
  #L18f9f6.  v3:= v3.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L18f9fa.  v4:= 0I;
  #L18f9fc.  v5:= 1I;
  #L18f9fe.  if v3 == v9 then goto L18fa06;
  #L18fa02.  v3:= 1I;
  #L18fa04.  goto L18fa08;
  #L18fa06.  v3:= 0I;
  #L18fa08.  if v3 == 0 then goto L18fa72;
  #L18fa0c.  v3:= v2 @kind object;
  #L18fa0e.  v3:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v3 @kind object;
  #L18fa12.  v6:= new `kotlinx.coroutines.sync.MutexImpl$lockSuspend$lambda-6$lambda-5$$inlined$addLastIf$1`;
  #L18fa16.  call `<init>`(v6, v1, v8, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$lockSuspend$lambda-6$lambda-5$$inlined$addLastIf$1;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L18fa1c.  call temp:= `getPrevNode`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L18fa22.  v2:= temp @kind object;
  #L18fa24.  call temp:= `tryCondAddNext`(v2, v1, v3, v6) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @kind virtual;
  #L18fa2a.  v2:= temp;
  #L18fa2c.  if v2 == v5 then goto L18fa38;
  #L18fa30.  v7:= 2I;
  #L18fa32.  if v2 == v7 then goto L18fa3a;
  #L18fa36.  goto L18fa1c;
  #L18fa38.  v4:= 1I;
  #L18fa3a.  if v4 == 0 then goto L18f96e;
  #L18fa3e.  call `removeOnCancellation`(v0, v1) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.removeOnCancellation:(Lkotlinx/coroutines/CancellableContinuation;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind static;
  #L18fa44.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L18fa4a.  v9:= temp @kind object;
  #L18fa4c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L18fa52.  v0:= temp @kind object;
  #L18fa54.  if v9 != v0 then goto L18fa5e;
  #L18fa58.  call `probeCoroutineSuspended`(v10) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L18fa5e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L18fa64.  v10:= temp @kind object;
  #L18fa66.  if v9 != v10 then goto L18fa6c;
  #L18fa6a.  return v9 @kind object;
  #L18fa6c.  v9:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18fa70.  return v9 @kind object;
  #L18fa72.  v10:= "Already locked by " @kind object;
  #L18fa76.  call temp:= `stringPlus`(v10, v9) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18fa7c.  v9:= temp @kind object;
  #L18fa7e.  v10:= new `java.lang.IllegalStateException`;
  #L18fa82.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fa88.  v9:= temp @kind object;
  #L18fa8a.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fa90.  throw v10;
  #L18fa92.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L18fa96.  if v3 == 0 then goto L18faa8;
  #L18fa9a.  v2:= (`kotlinx.coroutines.internal.OpDescriptor`) v2 @kind object;
  #L18fa9e.  call temp:= `perform`(v2, v8) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18faa4.  goto L18f96e;
  #L18faa8.  v9:= "Illegal state " @kind object;
  #L18faac.  call temp:= `stringPlus`(v9, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18fab2.  v9:= temp @kind object;
  #L18fab4.  v10:= new `java.lang.IllegalStateException`;
  #L18fab8.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fabe.  v9:= temp @kind object;
  #L18fac0.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fac6.  throw v10;
}
procedure `java.lang.Object` `access$lockSuspend`(`kotlinx.coroutines.sync.MutexImpl` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.access$lockSuspend:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L18f8f8.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl;.a:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L18f8fe.  v0:= temp @kind object;
  #L18f900.  return v0 @kind object;
}
procedure `kotlinx.coroutines.selects.SelectClause2` `getOnLock`(`kotlinx.coroutines.sync.MutexImpl` v0 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.getOnLock:()Lkotlinx/coroutines/selects/SelectClause2;` @AccessFlag PUBLIC {
    temp;

  #L18fb94.  return v0 @kind object;
}
procedure `boolean` `holdsLock`(`kotlinx.coroutines.sync.MutexImpl` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.holdsLock:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18f730.  v0:= v4.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18f734.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L18f738.  v2:= 1I;
  #L18f73a.  v3:= 0I;
  #L18f73c.  if v1 == 0 then goto L18f74e;
  #L18f740.  v0:= (`kotlinx.coroutines.sync.b`) v0 @kind object;
  #L18f744.  v0:= v0.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18f748.  if v0 != v5 then goto L18f764;
  #L18f74c.  goto L18f766;
  #L18f74e.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18f752.  if v1 == 0 then goto L18f764;
  #L18f756.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L18f75a.  v0:= v0.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L18f75e.  if v0 != v5 then goto L18f764;
  #L18f762.  goto L18f766;
  #L18f764.  v2:= 0I;
  #L18f766.  return v2;
}
procedure `boolean` `isLocked`(`kotlinx.coroutines.sync.MutexImpl` v3 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.isLocked:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18f778.  v0:= v3.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18f77c.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L18f780.  v2:= 1I;
  #L18f782.  if v1 == 0 then goto L18f7a0;
  #L18f786.  v0:= (`kotlinx.coroutines.sync.b`) v0 @kind object;
  #L18f78a.  v0:= v0.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18f78e.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18f794.  v1:= temp @kind object;
  #L18f796.  if v0 == v1 then goto L18f79c;
  #L18f79a.  goto L18f79e;
  #L18f79c.  v2:= 0I;
  #L18f79e.  return v2;
  #L18f7a0.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18f7a4.  if v1 == 0 then goto L18f7aa;
  #L18f7a8.  return v2;
  #L18f7aa.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L18f7ae.  if v1 == 0 then goto L18f7be;
  #L18f7b2.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L18f7b6.  call temp:= `perform`(v0, v3) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18f7bc.  goto L18f778;
  #L18f7be.  v1:= "Illegal state " @kind object;
  #L18f7c2.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18f7c8.  v0:= temp @kind object;
  #L18f7ca.  v1:= new `java.lang.IllegalStateException`;
  #L18f7ce.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18f7d4.  v0:= temp @kind object;
  #L18f7d6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18f7dc.  throw v1;
}
procedure `boolean` `isLockedEmptyQueueState$kotlinx_coroutines_core`(`kotlinx.coroutines.sync.MutexImpl` v2 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.isLockedEmptyQueueState$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18f7f0.  v0:= v2.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18f7f4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18f7f8.  if v1 == 0 then goto L18f810;
  #L18f7fc.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L18f800.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isEmpty:()Z` @kind virtual;
  #L18f806.  v0:= temp;
  #L18f808.  if v0 == 0 then goto L18f810;
  #L18f80c.  v0:= 1I;
  #L18f80e.  goto L18f812;
  #L18f810.  v0:= 0I;
  #L18f812.  return v0;
}
procedure `java.lang.Object` `lock`(`kotlinx.coroutines.sync.MutexImpl` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.lock:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18f914.  call temp:= `tryLock`(v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl;.tryLock:(Ljava/lang/Object;)Z` @kind virtual;
  #L18f91a.  v0:= temp;
  #L18f91c.  if v0 == 0 then goto L18f926;
  #L18f920.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18f924.  return v2 @kind object;
  #L18f926.  call temp:= `a`(v1, v2, v3) @signature `Lkotlinx/coroutines/sync/MutexImpl;.a:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L18f92c.  v2:= temp @kind object;
  #L18f92e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L18f934.  v3:= temp @kind object;
  #L18f936.  if v2 != v3 then goto L18f93c;
  #L18f93a.  return v2 @kind object;
  #L18f93c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18f940.  return v2 @kind object;
}
procedure `void` `registerSelectClause2`(`kotlinx.coroutines.sync.MutexImpl` v7 @kind this, `kotlinx.coroutines.selects.SelectInstance` v8 @kind object, `java.lang.Object` v9 @kind object, `kotlin.jvm.functions.Function2` v10 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.registerSelectClause2:(Lkotlinx/coroutines/selects/SelectInstance;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L18fc08.  call temp:= `isSelected`(v8) @signature `Lkotlinx/coroutines/selects/SelectInstance;.isSelected:()Z` @kind interface;
  #L18fc0e.  v0:= temp;
  #L18fc10.  if v0 == 0 then goto L18fc16;
  #L18fc14.  return @kind void;
  #L18fc16.  v0:= v7.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18fc1a.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L18fc1e.  if v1 == 0 then goto L18fcbe;
  #L18fc22.  v1:= v0 @kind object;
  #L18fc24.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L18fc28.  v2:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18fc2c.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18fc32.  v3:= temp @kind object;
  #L18fc34.  if v2 == v3 then goto L18fc52;
  #L18fc38.  v2:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18fc3c.  v3:= new `kotlinx.coroutines.sync.MutexImpl$d`;
  #L18fc40.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18fc44.  call `<init>`(v3, v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L18fc4a.  call temp:= `compareAndSet`(v2, v7, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18fc50.  goto L18fc08;
  #L18fc52.  v0:= new `kotlinx.coroutines.sync.MutexImpl$e`;
  #L18fc56.  call `<init>`(v0, v7, v9) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L18fc5c.  call temp:= `performAtomicTrySelect`(v8, v0) @signature `Lkotlinx/coroutines/selects/SelectInstance;.performAtomicTrySelect:(Lkotlinx/coroutines/internal/AtomicDesc;)Ljava/lang/Object;` @kind interface;
  #L18fc62.  v0:= temp @kind object;
  #L18fc64.  if v0 != 0 then goto L18fc78;
  #L18fc68.  call temp:= `getCompletion`(v8) @signature `Lkotlinx/coroutines/selects/SelectInstance;.getCompletion:()Lkotlin/coroutines/Continuation;` @kind interface;
  #L18fc6e.  v8:= temp @kind object;
  #L18fc70.  call `startCoroutineUnintercepted`(v10, v7, v8) @signature `Lkotlinx/coroutines/intrinsics/UndispatchedKt;.startCoroutineUnintercepted:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L18fc76.  return @kind void;
  #L18fc78.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L18fc7e.  v1:= temp @kind object;
  #L18fc80.  if v0 != v1 then goto L18fc86;
  #L18fc84.  return @kind void;
  #L18fc86.  call temp:= `access$getLOCK_FAIL$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getLOCK_FAIL$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18fc8c.  v1:= temp @kind object;
  #L18fc8e.  if v0 != v1 then goto L18fc94;
  #L18fc92.  goto L18fc08;
  #L18fc94.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L18fc98.  if v0 != v1 then goto L18fc9e;
  #L18fc9c.  goto L18fc08;
  #L18fc9e.  v8:= "performAtomicTrySelect(TryLockDesc) returned " @kind object;
  #L18fca2.  call temp:= `stringPlus`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18fca8.  v8:= temp @kind object;
  #L18fcaa.  v9:= new `java.lang.IllegalStateException`;
  #L18fcae.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fcb4.  v8:= temp @kind object;
  #L18fcb6.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fcbc.  throw v9;
  #L18fcbe.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18fcc2.  if v1 == 0 then goto L18fd46;
  #L18fcc6.  v1:= v0 @kind object;
  #L18fcc8.  v1:= (`kotlinx.coroutines.sync.MutexImpl$d`) v1 @kind object;
  #L18fccc.  v1:= v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L18fcd0.  v2:= 0I;
  #L18fcd2.  v3:= 1I;
  #L18fcd4.  if v1 == v9 then goto L18fcdc;
  #L18fcd8.  v1:= 1I;
  #L18fcda.  goto L18fcde;
  #L18fcdc.  v1:= 0I;
  #L18fcde.  if v1 == 0 then goto L18fd26;
  #L18fce2.  v1:= new `kotlinx.coroutines.sync.MutexImpl$b`;
  #L18fce6.  call `<init>`(v1, v7, v9, v8, v10) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/selects/SelectInstance;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L18fcec.  v4:= v0 @kind object;
  #L18fcee.  v4:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v4 @kind object;
  #L18fcf2.  v5:= new `kotlinx.coroutines.sync.MutexImpl$registerSelectClause2$$inlined$addLastIf$1`;
  #L18fcf6.  call `<init>`(v5, v1, v7, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl$registerSelectClause2$$inlined$addLastIf$1;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L18fcfc.  call temp:= `getPrevNode`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L18fd02.  v0:= temp @kind object;
  #L18fd04.  call temp:= `tryCondAddNext`(v0, v1, v4, v5) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @kind virtual;
  #L18fd0a.  v0:= temp;
  #L18fd0c.  if v0 == v3 then goto L18fd18;
  #L18fd10.  v6:= 2I;
  #L18fd12.  if v0 == v6 then goto L18fd1a;
  #L18fd16.  goto L18fcfc;
  #L18fd18.  v2:= 1I;
  #L18fd1a.  if v2 == 0 then goto L18fc08;
  #L18fd1e.  call `disposeOnSelect`(v8, v1) @signature `Lkotlinx/coroutines/selects/SelectInstance;.disposeOnSelect:(Lkotlinx/coroutines/DisposableHandle;)V` @kind interface;
  #L18fd24.  return @kind void;
  #L18fd26.  v8:= "Already locked by " @kind object;
  #L18fd2a.  call temp:= `stringPlus`(v8, v9) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18fd30.  v8:= temp @kind object;
  #L18fd32.  v9:= new `java.lang.IllegalStateException`;
  #L18fd36.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fd3c.  v8:= temp @kind object;
  #L18fd3e.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fd44.  throw v9;
  #L18fd46.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L18fd4a.  if v1 == 0 then goto L18fd5c;
  #L18fd4e.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L18fd52.  call temp:= `perform`(v0, v7) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18fd58.  goto L18fc08;
  #L18fd5c.  v8:= "Illegal state " @kind object;
  #L18fd60.  call temp:= `stringPlus`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18fd66.  v8:= temp @kind object;
  #L18fd68.  v9:= new `java.lang.IllegalStateException`;
  #L18fd6c.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fd72.  v8:= temp @kind object;
  #L18fd74.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fd7a.  throw v9;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.sync.MutexImpl` v4 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18fad8.  v0:= v4.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18fadc.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L18fae0.  v2:= 93I;
  #L18fae4.  v3:= "Mutex[" @kind object;
  #L18fae8.  if v1 == 0 then goto L18fb1a;
  #L18faec.  v1:= new `java.lang.StringBuilder`;
  #L18faf0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18faf6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fafc.  v0:= (`kotlinx.coroutines.sync.b`) v0 @kind object;
  #L18fb00.  v0:= v0.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18fb04.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fb0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fb10.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fb16.  v0:= temp @kind object;
  #L18fb18.  return v0 @kind object;
  #L18fb1a.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L18fb1e.  if v1 == 0 then goto L18fb2e;
  #L18fb22.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L18fb26.  call temp:= `perform`(v0, v4) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18fb2c.  goto L18fad8;
  #L18fb2e.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18fb32.  if v1 == 0 then goto L18fb64;
  #L18fb36.  v1:= new `java.lang.StringBuilder`;
  #L18fb3a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18fb40.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fb46.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L18fb4a.  v0:= v0.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L18fb4e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fb54.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fb5a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fb60.  v0:= temp @kind object;
  #L18fb62.  return v0 @kind object;
  #L18fb64.  v1:= "Illegal state " @kind object;
  #L18fb68.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18fb6e.  v0:= temp @kind object;
  #L18fb70.  v1:= new `java.lang.IllegalStateException`;
  #L18fb74.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fb7a.  v0:= temp @kind object;
  #L18fb7c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fb82.  throw v1;
}
procedure `boolean` `tryLock`(`kotlinx.coroutines.sync.MutexImpl` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.tryLock:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L18f824.  v0:= v5.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18f828.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L18f82c.  v2:= 1I;
  #L18f82e.  v3:= 0I;
  #L18f830.  if v1 == 0 then goto L18f876;
  #L18f834.  v1:= v0 @kind object;
  #L18f836.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L18f83a.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18f83e.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18f844.  v4:= temp @kind object;
  #L18f846.  if v1 == v4 then goto L18f84c;
  #L18f84a.  return v3;
  #L18f84c.  if v6 != 0 then goto L18f85a;
  #L18f850.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18f856.  v1:= temp @kind object;
  #L18f858.  goto L18f864;
  #L18f85a.  v1:= new `kotlinx.coroutines.sync.b`;
  #L18f85e.  call `<init>`(v1, v6) @signature `Lkotlinx/coroutines/sync/b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L18f864.  v3:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18f868.  call temp:= `compareAndSet`(v3, v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18f86e.  v0:= temp;
  #L18f870.  if v0 == 0 then goto L18f824;
  #L18f874.  return v2;
  #L18f876.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18f87a.  if v1 == 0 then goto L18f8b4;
  #L18f87e.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L18f882.  v0:= v0.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L18f886.  if v0 == v6 then goto L18f88c;
  #L18f88a.  goto L18f88e;
  #L18f88c.  v2:= 0I;
  #L18f88e.  if v2 == 0 then goto L18f894;
  #L18f892.  return v3;
  #L18f894.  v0:= "Already locked by " @kind object;
  #L18f898.  call temp:= `stringPlus`(v0, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18f89e.  v6:= temp @kind object;
  #L18f8a0.  v0:= new `java.lang.IllegalStateException`;
  #L18f8a4.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18f8aa.  v6:= temp @kind object;
  #L18f8ac.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18f8b2.  throw v0;
  #L18f8b4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L18f8b8.  if v1 == 0 then goto L18f8c8;
  #L18f8bc.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L18f8c0.  call temp:= `perform`(v0, v5) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18f8c6.  goto L18f824;
  #L18f8c8.  v6:= "Illegal state " @kind object;
  #L18f8cc.  call temp:= `stringPlus`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18f8d2.  v6:= temp @kind object;
  #L18f8d4.  v0:= new `java.lang.IllegalStateException`;
  #L18f8d8.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18f8de.  v6:= temp @kind object;
  #L18f8e0.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18f8e6.  throw v0;
}
procedure `void` `unlock`(`kotlinx.coroutines.sync.MutexImpl` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.unlock:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L18fd8c.  v0:= v7.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L18fd90.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L18fd94.  v2:= " but expected " @kind object;
  #L18fd98.  v3:= "Mutex is locked by " @kind object;
  #L18fd9c.  v4:= 1I;
  #L18fd9e.  v5:= 0I;
  #L18fda0.  if v1 == 0 then goto L18fe52;
  #L18fda4.  if v8 != 0 then goto L18fde0;
  #L18fda8.  v1:= v0 @kind object;
  #L18fdaa.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L18fdae.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18fdb2.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18fdb8.  v2:= temp @kind object;
  #L18fdba.  if v1 == v2 then goto L18fdc0;
  #L18fdbe.  goto L18fdc2;
  #L18fdc0.  v4:= 0I;
  #L18fdc2.  if v4 == 0 then goto L18fdc8;
  #L18fdc6.  goto L18fdf6;
  #L18fdc8.  v8:= new `java.lang.IllegalStateException`;
  #L18fdcc.  v0:= "Mutex is not locked" @kind object;
  #L18fdd0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fdd6.  v0:= temp @kind object;
  #L18fdd8.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fdde.  throw v8;
  #L18fde0.  v1:= v0 @kind object;
  #L18fde2.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L18fde6.  v6:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18fdea.  if v6 != v8 then goto L18fdf0;
  #L18fdee.  goto L18fdf2;
  #L18fdf0.  v4:= 0I;
  #L18fdf2.  if v4 == 0 then goto L18fe10;
  #L18fdf6.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18fdfa.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18fe00.  v2:= temp @kind object;
  #L18fe02.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18fe08.  v0:= temp;
  #L18fe0a.  if v0 == 0 then goto L18fd8c;
  #L18fe0e.  return @kind void;
  #L18fe10.  v0:= new `java.lang.StringBuilder`;
  #L18fe14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18fe1a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fe20.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L18fe24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fe2a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fe30.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fe36.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fe3c.  v8:= temp @kind object;
  #L18fe3e.  v0:= new `java.lang.IllegalStateException`;
  #L18fe42.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fe48.  v8:= temp @kind object;
  #L18fe4a.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18fe50.  throw v0;
  #L18fe52.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L18fe56.  if v1 == 0 then goto L18fe66;
  #L18fe5a.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L18fe5e.  call temp:= `perform`(v0, v7) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18fe64.  goto L18fd8c;
  #L18fe66.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L18fe6a.  if v1 == 0 then goto L18ff32;
  #L18fe6e.  if v8 == 0 then goto L18fecc;
  #L18fe72.  v1:= v0 @kind object;
  #L18fe74.  v1:= (`kotlinx.coroutines.sync.MutexImpl$d`) v1 @kind object;
  #L18fe78.  v6:= v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L18fe7c.  if v6 != v8 then goto L18fe82;
  #L18fe80.  goto L18fe84;
  #L18fe82.  v4:= 0I;
  #L18fe84.  if v4 == 0 then goto L18fe8a;
  #L18fe88.  goto L18fecc;
  #L18fe8a.  v0:= new `java.lang.StringBuilder`;
  #L18fe8e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18fe94.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fe9a.  v1:= v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L18fe9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18fea4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18feaa.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18feb0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18feb6.  v8:= temp @kind object;
  #L18feb8.  v0:= new `java.lang.IllegalStateException`;
  #L18febc.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18fec2.  v8:= temp @kind object;
  #L18fec4.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18feca.  throw v0;
  #L18fecc.  v1:= v0 @kind object;
  #L18fece.  v1:= (`kotlinx.coroutines.sync.MutexImpl$d`) v1 @kind object;
  #L18fed2.  call temp:= `removeFirstOrNull`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeFirstOrNull:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L18fed8.  v2:= temp @kind object;
  #L18feda.  if v2 != 0 then goto L18ff06;
  #L18fede.  v2:= new `kotlinx.coroutines.sync.MutexImpl$f`;
  #L18fee2.  call `<init>`(v2, v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$d;)V` @kind direct;
  #L18fee8.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18feec.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18fef2.  v0:= temp;
  #L18fef4.  if v0 == 0 then goto L18fd8c;
  #L18fef8.  call temp:= `perform`(v2, v7) @signature `Lkotlinx/coroutines/internal/AtomicOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18fefe.  v0:= temp @kind object;
  #L18ff00.  if v0 != 0 then goto L18fd8c;
  #L18ff04.  return @kind void;
  #L18ff06.  v2:= (`kotlinx.coroutines.sync.MutexImpl$c`) v2 @kind object;
  #L18ff0a.  call temp:= `f`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.f:()Ljava/lang/Object;` @kind virtual;
  #L18ff10.  v0:= temp @kind object;
  #L18ff12.  if v0 == 0 then goto L18fd8c;
  #L18ff16.  v8:= v2.`kotlinx.coroutines.sync.MutexImpl$c.d` @type ^`java.lang.Object` @kind object;
  #L18ff1a.  if v8 != 0 then goto L18ff26;
  #L18ff1e.  call temp:= `access$getLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18ff24.  v8:= temp @kind object;
  #L18ff26.  v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` := v8 @kind object;
  #L18ff2a.  call `e`(v2, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L18ff30.  return @kind void;
  #L18ff32.  v8:= "Illegal state " @kind object;
  #L18ff36.  call temp:= `stringPlus`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18ff3c.  v8:= temp @kind object;
  #L18ff3e.  v0:= new `java.lang.IllegalStateException`;
  #L18ff42.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18ff48.  v8:= temp @kind object;
  #L18ff4a.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18ff50.  throw v0;
}
