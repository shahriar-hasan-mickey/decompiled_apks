record `kotlinx.coroutines.sync.MutexImpl$a$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `kotlinx.coroutines.sync.MutexImpl` `kotlinx.coroutines.sync.MutexImpl$a$a.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.sync.MutexImpl$a` `kotlinx.coroutines.sync.MutexImpl$a$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$a$a` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `kotlinx.coroutines.sync.MutexImpl$a` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$a$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Lkotlinx/coroutines/sync/MutexImpl$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L18f0a4.  v0.`kotlinx.coroutines.sync.MutexImpl$a$a.a` @type ^`kotlinx.coroutines.sync.MutexImpl` := v1 @kind object;
  #L18f0a8.  v0.`kotlinx.coroutines.sync.MutexImpl$a$a.b` @type ^`kotlinx.coroutines.sync.MutexImpl$a` := v2 @kind object;
  #L18f0ac.  v1:= 1I;
  #L18f0ae.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L18f0b4.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.sync.MutexImpl$a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$a$a;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L18f084.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L18f088.  call `invoke`(v0, v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$a$a;.invoke:(Ljava/lang/Throwable;)V` @kind virtual;
  #L18f08e.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L18f092.  return v1 @kind object;
}
procedure `void` `invoke`(`kotlinx.coroutines.sync.MutexImpl$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$a$a;.invoke:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18f0c8.  v2:= v1.`kotlinx.coroutines.sync.MutexImpl$a$a.a` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L18f0cc.  v0:= v1.`kotlinx.coroutines.sync.MutexImpl$a$a.b` @type ^`kotlinx.coroutines.sync.MutexImpl$a` @kind object;
  #L18f0d0.  v0:= v0.`kotlinx.coroutines.sync.MutexImpl$c.d` @type ^`java.lang.Object` @kind object;
  #L18f0d4.  call `unlock`(v2, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl;.unlock:(Ljava/lang/Object;)V` @kind virtual;
  #L18f0da.  return @kind void;
}
