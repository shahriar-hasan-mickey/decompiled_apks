record `kotlinx.coroutines.sync.SemaphoreKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@kotlinx.coroutines.sync.SemaphoreKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.sync.SemaphoreKt.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L190c68.  v0:= "kotlinx.coroutines.semaphore.maxSpinCycles" @kind object;
  #L190c6c.  v1:= 100I;
  #L190c70.  v2:= 0I;
  #L190c72.  v3:= 0I;
  #L190c74.  v4:= 12I;
  #L190c78.  v5:= 0I;
  #L190c7a.  call temp:= `systemProp$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L190c80.  v0:= temp;
  #L190c82.  `@@kotlinx.coroutines.sync.SemaphoreKt.a` @type ^`int` := v0;
  #L190c86.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L190c8a.  v1:= "PERMIT" @kind object;
  #L190c8e.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190c94.  `@@kotlinx.coroutines.sync.SemaphoreKt.b` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L190c98.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L190c9c.  v1:= "TAKEN" @kind object;
  #L190ca0.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190ca6.  `@@kotlinx.coroutines.sync.SemaphoreKt.c` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L190caa.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L190cae.  v1:= "BROKEN" @kind object;
  #L190cb2.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190cb8.  `@@kotlinx.coroutines.sync.SemaphoreKt.d` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L190cbc.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L190cc0.  v1:= "CANCELLED" @kind object;
  #L190cc4.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190cca.  `@@kotlinx.coroutines.sync.SemaphoreKt.e` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L190cce.  v2:= "kotlinx.coroutines.semaphore.segmentSize" @kind object;
  #L190cd2.  v3:= 16I;
  #L190cd6.  v4:= 0I;
  #L190cd8.  v5:= 0I;
  #L190cda.  v6:= 12I;
  #L190cde.  v7:= 0I;
  #L190ce0.  call temp:= `systemProp$default`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L190ce6.  v0:= temp;
  #L190ce8.  `@@kotlinx.coroutines.sync.SemaphoreKt.f` @type ^`int` := v0;
  #L190cec.  return @kind void;
}
procedure `kotlinx.coroutines.sync.Semaphore` `Semaphore`(`int` v1 , `int` v2 ) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore:(II)Lkotlinx/coroutines/sync/Semaphore;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L190c10.  v0:= new `kotlinx.coroutines.sync.c`;
  #L190c14.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/c;.<init>:(II)V` @kind direct;
  #L190c1a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.sync.Semaphore` `Semaphore$default`(`int` v0 , `int` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore$default:(IIILjava/lang/Object;)Lkotlinx/coroutines/sync/Semaphore;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L190bec.  v2:= v2 ^& 2;
  #L190bf0.  if v2 == 0 then goto L190bf6;
  #L190bf4.  v1:= 0I;
  #L190bf6.  call temp:= `Semaphore`(v0, v1) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore:(II)Lkotlinx/coroutines/sync/Semaphore;` @kind static;
  #L190bfc.  v0:= temp @kind object;
  #L190bfe.  return v0 @kind object;
}
procedure `kotlinx.coroutines.sync.d` `a`(`long` v2 , `kotlinx.coroutines.sync.d` v4 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.a:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L190c48.  v0:= new `kotlinx.coroutines.sync.d`;
  #L190c4c.  v1:= 0I;
  #L190c4e.  call `<init>`(v0, v2, v4, v1) @signature `Lkotlinx/coroutines/sync/d;.<init>:(JLkotlinx/coroutines/sync/d;I)V` @kind direct;
  #L190c54.  return v0 @kind object;
}
procedure `kotlinx.coroutines.sync.d` `access$createSegment`(`long` v0 , `kotlinx.coroutines.sync.d` v2 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$createSegment:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L190c2c.  call temp:= `a`(v0, v2) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.a:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @kind static;
  #L190c32.  v0:= temp @kind object;
  #L190c34.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getBROKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getBROKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L190b8c.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.d` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L190b90.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getCANCELLED$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getCANCELLED$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L190ba4.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.e` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L190ba8.  return v0 @kind object;
}
procedure `int` `access$getMAX_SPIN_CYCLES$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getMAX_SPIN_CYCLES$p:()I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L190a78.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.a` @type ^`int`;
  #L190a7c.  return v0;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L190bbc.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.b` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L190bc0.  return v0 @kind object;
}
procedure `int` `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L190a90.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.f` @type ^`int`;
  #L190a94.  return v0;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getTAKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getTAKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L190bd4.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.c` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L190bd8.  return v0 @kind object;
}
procedure `java.lang.Object` `withPermit`(`kotlinx.coroutines.sync.Semaphore` v4 @kind object, `kotlin.jvm.functions.Function0` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.withPermit:(Lkotlinx/coroutines/sync/Semaphore;Lkotlin/jvm/functions/Function0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L190aa8.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.sync.SemaphoreKt$a` @kind boolean;
  #L190aac.  if v0 == 0 then goto L190ace;
  #L190ab0.  v0:= v6 @kind object;
  #L190ab2.  v0:= (`kotlinx.coroutines.sync.SemaphoreKt$a`) v0 @kind object;
  #L190ab6.  v1:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int`;
  #L190aba.  v2:= -2147483648I;
  #L190abe.  v3:= v1 ^& v2 @kind int;
  #L190ac2.  if v3 == 0 then goto L190ace;
  #L190ac6.  v1:= v1 - v2 @kind int;
  #L190ac8.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int` := v1;
  #L190acc.  goto L190ad8;
  #L190ace.  v0:= new `kotlinx.coroutines.sync.SemaphoreKt$a`;
  #L190ad2.  call `<init>`(v0, v6) @signature `Lkotlinx/coroutines/sync/SemaphoreKt$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L190ad8.  v6:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.c` @type ^`java.lang.Object` @kind object;
  #L190adc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L190ae2.  v1:= temp @kind object;
  #L190ae4.  v2:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int`;
  #L190ae8.  v3:= 1I;
  #L190aea.  if v2 == 0 then goto L190b1c;
  #L190aee.  if v2 != v3 then goto L190b0c;
  #L190af2.  v4:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.b` @type ^`java.lang.Object` @kind object;
  #L190af6.  v5:= v4 @kind object;
  #L190af8.  v5:= (`kotlin.jvm.functions.Function0`) v5 @kind object;
  #L190afc.  v4:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.a` @type ^`java.lang.Object` @kind object;
  #L190b00.  v4:= (`kotlinx.coroutines.sync.Semaphore`) v4 @kind object;
  #L190b04.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L190b0a.  goto L190b3c;
  #L190b0c.  v4:= new `java.lang.IllegalStateException`;
  #L190b10.  v5:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L190b14.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190b1a.  throw v4;
  #L190b1c.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L190b22.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.a` @type ^`java.lang.Object` := v4 @kind object;
  #L190b26.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.b` @type ^`java.lang.Object` := v5 @kind object;
  #L190b2a.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int` := v3;
  #L190b2e.  call temp:= `acquire`(v4, v0) @signature `Lkotlinx/coroutines/sync/Semaphore;.acquire:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L190b34.  v6:= temp @kind object;
  #L190b36.  if v6 != v1 then goto L190b3c;
  #L190b3a.  return v1 @kind object;
  #L190b3c.  call temp:= `invoke`(v5) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L190b42.  v5:= temp @kind object;
  #L190b44.  call `finallyStart`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L190b4a.  call `release`(v4) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L190b50.  call `finallyEnd`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L190b56.  return v5 @kind object;
  #L190b58.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L190b5a.  call `finallyStart`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L190b60.  call `release`(v4) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L190b66.  call `finallyEnd`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L190b6c.  throw v5;
  catch `java.lang.Throwable` @[L190b3c..L190b44] goto L190b58;
}
