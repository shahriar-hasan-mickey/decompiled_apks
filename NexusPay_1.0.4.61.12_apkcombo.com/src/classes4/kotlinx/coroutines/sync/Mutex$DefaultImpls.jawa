record `kotlinx.coroutines.sync.Mutex$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `lock$default`(`kotlinx.coroutines.sync.Mutex` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex$DefaultImpls;.lock$default:(Lkotlinx/coroutines/sync/Mutex;Ljava/lang/Object;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L18f014.  if v4 != 0 then goto L18f02c;
  #L18f018.  v3:= v3 ^& 1;
  #L18f01c.  if v3 == 0 then goto L18f022;
  #L18f020.  v1:= 0I;
  #L18f022.  call temp:= `lock`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/Mutex;.lock:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L18f028.  v0:= temp @kind object;
  #L18f02a.  return v0 @kind object;
  #L18f02c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L18f030.  v1:= "Super calls with default arguments not supported in this target, function: lock" @kind object;
  #L18f034.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18f03a.  throw v0;
}
procedure `boolean` `tryLock$default`(`kotlinx.coroutines.sync.Mutex` v0 @kind object, `java.lang.Object` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex$DefaultImpls;.tryLock$default:(Lkotlinx/coroutines/sync/Mutex;Ljava/lang/Object;ILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L18efdc.  if v3 != 0 then goto L18eff4;
  #L18efe0.  v2:= v2 ^& 1;
  #L18efe4.  if v2 == 0 then goto L18efea;
  #L18efe8.  v1:= 0I;
  #L18efea.  call temp:= `tryLock`(v0, v1) @signature `Lkotlinx/coroutines/sync/Mutex;.tryLock:(Ljava/lang/Object;)Z` @kind interface;
  #L18eff0.  v0:= temp;
  #L18eff2.  return v0;
  #L18eff4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L18eff8.  v1:= "Super calls with default arguments not supported in this target, function: tryLock" @kind object;
  #L18effc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18f002.  throw v0;
}
procedure `void` `unlock$default`(`kotlinx.coroutines.sync.Mutex` v0 @kind object, `java.lang.Object` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex$DefaultImpls;.unlock$default:(Lkotlinx/coroutines/sync/Mutex;Ljava/lang/Object;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L18f04c.  if v3 != 0 then goto L18f062;
  #L18f050.  v2:= v2 ^& 1;
  #L18f054.  if v2 == 0 then goto L18f05a;
  #L18f058.  v1:= 0I;
  #L18f05a.  call `unlock`(v0, v1) @signature `Lkotlinx/coroutines/sync/Mutex;.unlock:(Ljava/lang/Object;)V` @kind interface;
  #L18f060.  return @kind void;
  #L18f062.  v0:= new `java.lang.UnsupportedOperationException`;
  #L18f066.  v1:= "Super calls with default arguments not supported in this target, function: unlock" @kind object;
  #L18f06a.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18f070.  throw v0;
}
