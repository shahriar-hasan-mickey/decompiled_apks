record `kotlinx.coroutines.sync.c` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.sync.Semaphore` @kind interface {
  `int` `kotlinx.coroutines.sync.c._availablePermits` @AccessFlag VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.sync.c.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlinx.coroutines.sync.c.b` @AccessFlag PRIVATE_FINAL;
  `long` `kotlinx.coroutines.sync.c.deqIdx` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.sync.c.enqIdx` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.sync.c.head` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.sync.c.tail` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.sync.c.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.sync.c.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.sync.c.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.sync.c.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.sync.c.g` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L190870.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L190874.  v1:= constclass @type ^`kotlinx.coroutines.sync.c` @kind object;
  #L190878.  v2:= "head" @kind object;
  #L19087c.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L190882.  v2:= temp @kind object;
  #L190884.  `@@kotlinx.coroutines.sync.c.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L190888.  v2:= "deqIdx" @kind object;
  #L19088c.  call temp:= `newUpdater`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L190892.  v2:= temp @kind object;
  #L190894.  `@@kotlinx.coroutines.sync.c.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v2 @kind object;
  #L190898.  v2:= "tail" @kind object;
  #L19089c.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1908a2.  v0:= temp @kind object;
  #L1908a4.  `@@kotlinx.coroutines.sync.c.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L1908a8.  v0:= "enqIdx" @kind object;
  #L1908ac.  call temp:= `newUpdater`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L1908b2.  v0:= temp @kind object;
  #L1908b4.  `@@kotlinx.coroutines.sync.c.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L1908b8.  v0:= "_availablePermits" @kind object;
  #L1908bc.  call temp:= `newUpdater`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1908c2.  v0:= temp @kind object;
  #L1908c4.  `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L1908c8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.c` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lkotlinx/coroutines/sync/c;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1908dc.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1908e2.  v4.`kotlinx.coroutines.sync.c.a` @type ^`int` := v5;
  #L1908e6.  v0:= 0L;
  #L1908ea.  v4.`kotlinx.coroutines.sync.c.deqIdx` @type ^`long` := v0 @kind wide;
  #L1908ee.  v4.`kotlinx.coroutines.sync.c.enqIdx` @type ^`long` := v0 @kind wide;
  #L1908f2.  v5:= v4.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L1908f6.  v2:= 1I;
  #L1908f8.  v3:= 0I;
  #L1908fa.  if v5 <= 0 then goto L190902;
  #L1908fe.  v5:= 1I;
  #L190900.  goto L190904;
  #L190902.  v5:= 0I;
  #L190904.  if v5 == 0 then goto L190978;
  #L190908.  if v6 < 0 then goto L190916;
  #L19090c.  v5:= v4.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L190910.  if v6 > v5 then goto L190916;
  #L190914.  goto L190918;
  #L190916.  v2:= 0I;
  #L190918.  if v2 == 0 then goto L19094c;
  #L19091c.  v5:= new `kotlinx.coroutines.sync.d`;
  #L190920.  v2:= 0I;
  #L190922.  v3:= 2I;
  #L190924.  call `<init>`(v5, v0, v2, v3) @signature `Lkotlinx/coroutines/sync/d;.<init>:(JLkotlinx/coroutines/sync/d;I)V` @kind direct;
  #L19092a.  v4.`kotlinx.coroutines.sync.c.head` @type ^`java.lang.Object` := v5 @kind object;
  #L19092e.  v4.`kotlinx.coroutines.sync.c.tail` @type ^`java.lang.Object` := v5 @kind object;
  #L190932.  v5:= v4.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L190936.  v5:= v5 - v6 @kind int;
  #L190938.  v4.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int` := v5;
  #L19093c.  v5:= new `kotlinx.coroutines.sync.c$a`;
  #L190940.  call `<init>`(v5, v4) @signature `Lkotlinx/coroutines/sync/c$a;.<init>:(Lkotlinx/coroutines/sync/c;)V` @kind direct;
  #L190946.  v4.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` := v5 @kind object;
  #L19094a.  return @kind void;
  #L19094c.  v5:= v4.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L190950.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L190956.  v5:= temp @kind object;
  #L190958.  v6:= "The number of acquired permits should be in 0.." @kind object;
  #L19095c.  call temp:= `stringPlus`(v6, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L190962.  v5:= temp @kind object;
  #L190964.  v6:= new `java.lang.IllegalArgumentException`;
  #L190968.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L19096e.  v5:= temp @kind object;
  #L190970.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190976.  throw v6;
  #L190978.  v5:= v4.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L19097c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L190982.  v5:= temp @kind object;
  #L190984.  v6:= "Semaphore should have at least 1 permit, but had " @kind object;
  #L190988.  call temp:= `stringPlus`(v6, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L19098e.  v5:= temp @kind object;
  #L190990.  v6:= new `java.lang.IllegalArgumentException`;
  #L190994.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L19099a.  v5:= temp @kind object;
  #L19099c.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1909a2.  throw v6;
}
procedure `boolean` `a`(`kotlinx.coroutines.sync.c` v0 @kind object, `kotlinx.coroutines.CancellableContinuation` v1 @kind object) @signature `Lkotlinx/coroutines/sync/c;.a:(Lkotlinx/coroutines/sync/c;Lkotlinx/coroutines/CancellableContinuation;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1902d8.  call temp:= `d`(v0, v1) @signature `Lkotlinx/coroutines/sync/c;.d:(Lkotlinx/coroutines/CancellableContinuation;)Z` @kind direct;
  #L1902de.  v0:= temp;
  #L1902e0.  return v0;
}
procedure `kotlin.jvm.functions.Function1` `b`(`kotlinx.coroutines.sync.c` v0 @kind object) @signature `Lkotlinx/coroutines/sync/c;.b:(Lkotlinx/coroutines/sync/c;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L190858.  v0:= v0.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L19085c.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.sync.c` v3 @kind this, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/sync/c;.c:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1907d8.  call temp:= `intercepted`(v4) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L1907de.  v0:= temp @kind object;
  #L1907e0.  call temp:= `getOrCreateCancellableContinuation`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.getOrCreateCancellableContinuation:(Lkotlin/coroutines/Continuation;)Lkotlinx/coroutines/CancellableContinuationImpl;` @kind static;
  #L1907e6.  v0:= temp @kind object;
  #L1907e8.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/sync/c;.a:(Lkotlinx/coroutines/sync/c;Lkotlinx/coroutines/CancellableContinuation;)Z` @kind static;
  #L1907ee.  v1:= temp;
  #L1907f0.  if v1 == 0 then goto L1907f6;
  #L1907f4.  goto L190818;
  #L1907f6.  v1:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1907fa.  call temp:= `getAndDecrement`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)I` @kind virtual;
  #L190800.  v1:= temp;
  #L190802.  if v1 <= 0 then goto L1907e8;
  #L190806.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L19080a.  call temp:= `b`(v3) @signature `Lkotlinx/coroutines/sync/c;.b:(Lkotlinx/coroutines/sync/c;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L190810.  v2:= temp @kind object;
  #L190812.  call `resume`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuation;.resume:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L190818.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L19081e.  v0:= temp @kind object;
  #L190820.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L190826.  v1:= temp @kind object;
  #L190828.  if v0 != v1 then goto L190832;
  #L19082c.  call `probeCoroutineSuspended`(v4) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L190832.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L190838.  v4:= temp @kind object;
  #L19083a.  if v0 != v4 then goto L190840;
  #L19083e.  return v0 @kind object;
  #L190840.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L190844.  return v4 @kind object;
}
procedure `boolean` `d`(`kotlinx.coroutines.sync.c` v17 @kind this, `kotlinx.coroutines.CancellableContinuation` v18 @kind object) @signature `Lkotlinx/coroutines/sync/c;.d:(Lkotlinx/coroutines/CancellableContinuation;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1902f4.  v0:= v17 @kind object;
  #L1902f8.  v1:= v18 @kind object;
  #L1902fc.  v2:= v0.`kotlinx.coroutines.sync.c.tail` @type ^`java.lang.Object` @kind object;
  #L190300.  v2:= (`kotlinx.coroutines.sync.d`) v2 @kind object;
  #L190304.  v3:= `@@kotlinx.coroutines.sync.c.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L190308.  call temp:= `getAndIncrement`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndIncrement:(Ljava/lang/Object;)J` @kind virtual;
  #L19030e.  v3:= temp @kind wide;
  #L190310.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L190316.  v5:= temp;
  #L190318.  v5:= (`long`) v5 @kind i2l;
  #L19031a.  v5:= v3 / v5 @kind long;
  #L19031e.  v7:= v2 @kind object;
  #L190320.  call temp:= `getId`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L190326.  v8:= temp @kind wide;
  #L190328.  v10:= lcmp(v8, v5);
  #L19032c.  if v10 < 0 then goto L190348;
  #L190330.  call temp:= `getRemoved`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L190336.  v8:= temp;
  #L190338.  if v8 == 0 then goto L19033e;
  #L19033c.  goto L190348;
  #L19033e.  call temp:= `constructor-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L190344.  v7:= temp @kind object;
  #L190346.  goto L19036c;
  #L190348.  call temp:= `access$getNextOrClosed`(v7) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L19034e.  v8:= temp @kind object;
  #L190350.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L190356.  v9:= temp @kind object;
  #L190358.  if v8 != v9 then goto L1904a0;
  #L19035c.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L190362.  v7:= temp @kind object;
  #L190364.  call temp:= `constructor-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L19036a.  v7:= temp @kind object;
  #L19036c.  call temp:= `isClosed-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.isClosed-impl:(Ljava/lang/Object;)Z` @kind static;
  #L190372.  v8:= temp;
  #L190374.  v9:= 0I;
  #L190376.  v10:= 1I;
  #L190378.  if v8 != 0 then goto L1903f6;
  #L19037c.  call temp:= `getSegment-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L190382.  v8:= temp @kind object;
  #L190384.  v11:= v0.`kotlinx.coroutines.sync.c.tail` @type ^`java.lang.Object` @kind object;
  #L190388.  v11:= (`kotlinx.coroutines.internal.Segment`) v11 @kind object;
  #L19038c.  call temp:= `getId`(v11) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L190392.  v12:= temp @kind wide;
  #L190394.  call temp:= `getId`(v8) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L19039a.  v14:= temp @kind wide;
  #L19039c.  v16:= lcmp(v12, v14);
  #L1903a0.  if v16 < 0 then goto L1903a8;
  #L1903a4.  v8:= 1I;
  #L1903a6.  goto L1903dc;
  #L1903a8.  call temp:= `tryIncPointers$kotlinx_coroutines_core`(v8) @signature `Lkotlinx/coroutines/internal/Segment;.tryIncPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L1903ae.  v12:= temp;
  #L1903b0.  if v12 != 0 then goto L1903b8;
  #L1903b4.  v8:= 0I;
  #L1903b6.  goto L1903dc;
  #L1903b8.  v12:= `@@kotlinx.coroutines.sync.c.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1903bc.  call temp:= `compareAndSet`(v12, v0, v11, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1903c2.  v12:= temp;
  #L1903c4.  if v12 == 0 then goto L1903e2;
  #L1903c8.  call temp:= `decPointers$kotlinx_coroutines_core`(v11) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L1903ce.  v8:= temp;
  #L1903d0.  if v8 == 0 then goto L1903a4;
  #L1903d4.  call `remove`(v11) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L1903da.  goto L1903a4;
  #L1903dc.  if v8 == 0 then goto L19031e;
  #L1903e0.  goto L1903f6;
  #L1903e2.  call temp:= `decPointers$kotlinx_coroutines_core`(v8) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L1903e8.  v11:= temp;
  #L1903ea.  if v11 == 0 then goto L190384;
  #L1903ee.  call `remove`(v8) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L1903f4.  goto L190384;
  #L1903f6.  call temp:= `getSegment-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L1903fc.  v2:= temp @kind object;
  #L1903fe.  v2:= (`kotlinx.coroutines.sync.d`) v2 @kind object;
  #L190402.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L190408.  v5:= temp;
  #L19040a.  v5:= (`long`) v5 @kind i2l;
  #L19040c.  v3:= v3 %% v5 @kind long;
  #L19040e.  v4:= (`int`) v3 @kind l2i;
  #L190410.  v3:= 0I;
  #L190412.  v5:= v2.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L190416.  call temp:= `compareAndSet`(v5, v4, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L19041c.  v3:= temp;
  #L19041e.  if v3 == 0 then goto L190434;
  #L190422.  v3:= new `kotlinx.coroutines.sync.a`;
  #L190426.  call `<init>`(v3, v2, v4) @signature `Lkotlinx/coroutines/sync/a;.<init>:(Lkotlinx/coroutines/sync/d;I)V` @kind direct;
  #L19042c.  call `invokeOnCancellation`(v1, v3) @signature `Lkotlinx/coroutines/CancellableContinuation;.invokeOnCancellation:(Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L190432.  return v10;
  #L190434.  call temp:= `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L19043a.  v3:= temp @kind object;
  #L19043c.  call temp:= `access$getTAKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getTAKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L190442.  v5:= temp @kind object;
  #L190444.  v6:= v2.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L190448.  call temp:= `compareAndSet`(v6, v4, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L19044e.  v3:= temp;
  #L190450.  if v3 == 0 then goto L190464;
  #L190454.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L190458.  v3:= v0.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L19045c.  call `resume`(v1, v2, v3) @signature `Lkotlinx/coroutines/CancellableContinuation;.resume:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L190462.  return v10;
  #L190464.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L19046a.  v1:= temp;
  #L19046c.  if v1 == 0 then goto L19049e;
  #L190470.  v1:= v2.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L190474.  call temp:= `get`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L19047a.  v1:= temp @kind object;
  #L19047c.  call temp:= `access$getBROKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getBROKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L190482.  v2:= temp @kind object;
  #L190484.  if v1 != v2 then goto L19048a;
  #L190488.  goto L19048c;
  #L19048a.  v10:= 0I;
  #L19048c.  if v10 == 0 then goto L190492;
  #L190490.  goto L19049e;
  #L190492.  v1:= new `java.lang.AssertionError`;
  #L190496.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L19049c.  throw v1;
  #L19049e.  return v9;
  #L1904a0.  v8:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v8 @kind object;
  #L1904a4.  v8:= (`kotlinx.coroutines.internal.Segment`) v8 @kind object;
  #L1904a8.  if v8 == 0 then goto L1904b2;
  #L1904ac.  v7:= v8 @kind object;
  #L1904ae.  goto L190320;
  #L1904b2.  call temp:= `getId`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L1904b8.  v8:= temp @kind wide;
  #L1904ba.  v10:= 1L;
  #L1904be.  v8:= v8 + v10 @kind long;
  #L1904c0.  v10:= v7 @kind object;
  #L1904c2.  v10:= (`kotlinx.coroutines.sync.d`) v10 @kind object;
  #L1904c6.  call temp:= `access$createSegment`(v8, v10) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$createSegment:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @kind static;
  #L1904cc.  v8:= temp @kind object;
  #L1904ce.  call temp:= `trySetNext`(v7, v8) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.trySetNext:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Z` @kind virtual;
  #L1904d4.  v9:= temp;
  #L1904d6.  if v9 == 0 then goto L190320;
  #L1904da.  call temp:= `getRemoved`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L1904e0.  v9:= temp;
  #L1904e2.  if v9 == 0 then goto L1904ac;
  #L1904e6.  call `remove`(v7) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L1904ec.  goto L1904ac;
}
procedure `boolean` `e`(`kotlinx.coroutines.sync.c` v3 @kind this, `kotlinx.coroutines.CancellableContinuation` v4 @kind object) @signature `Lkotlinx/coroutines/sync/c;.e:(Lkotlinx/coroutines/CancellableContinuation;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L190534.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L190538.  v1:= v3.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L19053c.  v2:= 0I;
  #L19053e.  call temp:= `tryResume`(v4, v0, v2, v1) @signature `Lkotlinx/coroutines/CancellableContinuation;.tryResume:(Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @kind interface;
  #L190544.  v0:= temp @kind object;
  #L190546.  if v0 != 0 then goto L19054e;
  #L19054a.  v4:= 0I;
  #L19054c.  return v4;
  #L19054e.  call `completeResume`(v4, v0) @signature `Lkotlinx/coroutines/CancellableContinuation;.completeResume:(Ljava/lang/Object;)V` @kind interface;
  #L190554.  v4:= 1I;
  #L190556.  return v4;
}
procedure `boolean` `f`(`kotlinx.coroutines.sync.c` v15 @kind this) @signature `Lkotlinx/coroutines/sync/c;.f:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L190568.  v0:= v15.`kotlinx.coroutines.sync.c.head` @type ^`java.lang.Object` @kind object;
  #L19056c.  v0:= (`kotlinx.coroutines.sync.d`) v0 @kind object;
  #L190570.  v1:= `@@kotlinx.coroutines.sync.c.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L190574.  call temp:= `getAndIncrement`(v1, v15) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndIncrement:(Ljava/lang/Object;)J` @kind virtual;
  #L19057a.  v1:= temp @kind wide;
  #L19057c.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L190582.  v3:= temp;
  #L190584.  v3:= (`long`) v3 @kind i2l;
  #L190586.  v3:= v1 / v3 @kind long;
  #L19058a.  v5:= v0 @kind object;
  #L19058c.  call temp:= `getId`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L190592.  v6:= temp @kind wide;
  #L190594.  v8:= lcmp(v6, v3);
  #L190598.  if v8 < 0 then goto L1905b4;
  #L19059c.  call temp:= `getRemoved`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L1905a2.  v6:= temp;
  #L1905a4.  if v6 == 0 then goto L1905aa;
  #L1905a8.  goto L1905b4;
  #L1905aa.  call temp:= `constructor-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1905b0.  v5:= temp @kind object;
  #L1905b2.  goto L1905d8;
  #L1905b4.  call temp:= `access$getNextOrClosed`(v5) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L1905ba.  v6:= temp @kind object;
  #L1905bc.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1905c2.  v7:= temp @kind object;
  #L1905c4.  if v6 != v7 then goto L190714;
  #L1905c8.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1905ce.  v5:= temp @kind object;
  #L1905d0.  call temp:= `constructor-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1905d6.  v5:= temp @kind object;
  #L1905d8.  call temp:= `isClosed-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.isClosed-impl:(Ljava/lang/Object;)Z` @kind static;
  #L1905de.  v6:= temp;
  #L1905e0.  v7:= 0I;
  #L1905e2.  v8:= 1I;
  #L1905e4.  if v6 != 0 then goto L190662;
  #L1905e8.  call temp:= `getSegment-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L1905ee.  v6:= temp @kind object;
  #L1905f0.  v9:= v15.`kotlinx.coroutines.sync.c.head` @type ^`java.lang.Object` @kind object;
  #L1905f4.  v9:= (`kotlinx.coroutines.internal.Segment`) v9 @kind object;
  #L1905f8.  call temp:= `getId`(v9) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L1905fe.  v10:= temp @kind wide;
  #L190600.  call temp:= `getId`(v6) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L190606.  v12:= temp @kind wide;
  #L190608.  v14:= lcmp(v10, v12);
  #L19060c.  if v14 < 0 then goto L190614;
  #L190610.  v6:= 1I;
  #L190612.  goto L190648;
  #L190614.  call temp:= `tryIncPointers$kotlinx_coroutines_core`(v6) @signature `Lkotlinx/coroutines/internal/Segment;.tryIncPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L19061a.  v10:= temp;
  #L19061c.  if v10 != 0 then goto L190624;
  #L190620.  v6:= 0I;
  #L190622.  goto L190648;
  #L190624.  v10:= `@@kotlinx.coroutines.sync.c.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L190628.  call temp:= `compareAndSet`(v10, v15, v9, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L19062e.  v10:= temp;
  #L190630.  if v10 == 0 then goto L19064e;
  #L190634.  call temp:= `decPointers$kotlinx_coroutines_core`(v9) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L19063a.  v6:= temp;
  #L19063c.  if v6 == 0 then goto L190610;
  #L190640.  call `remove`(v9) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L190646.  goto L190610;
  #L190648.  if v6 == 0 then goto L19058a;
  #L19064c.  goto L190662;
  #L19064e.  call temp:= `decPointers$kotlinx_coroutines_core`(v6) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L190654.  v9:= temp;
  #L190656.  if v9 == 0 then goto L1905f0;
  #L19065a.  call `remove`(v6) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L190660.  goto L1905f0;
  #L190662.  call temp:= `getSegment-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L190668.  v0:= temp @kind object;
  #L19066a.  v0:= (`kotlinx.coroutines.sync.d`) v0 @kind object;
  #L19066e.  call `cleanPrev`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.cleanPrev:()V` @kind virtual;
  #L190674.  call temp:= `getId`(v0) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L19067a.  v5:= temp @kind wide;
  #L19067c.  v9:= lcmp(v5, v3);
  #L190680.  if v9 <= 0 then goto L190686;
  #L190684.  return v7;
  #L190686.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L19068c.  v3:= temp;
  #L19068e.  v3:= (`long`) v3 @kind i2l;
  #L190690.  v1:= v1 %% v3 @kind long;
  #L190692.  v2:= (`int`) v1 @kind l2i;
  #L190694.  call temp:= `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L19069a.  v1:= temp @kind object;
  #L19069c.  v3:= v0.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1906a0.  call temp:= `getAndSet`(v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1906a6.  v1:= temp @kind object;
  #L1906a8.  if v1 != 0 then goto L1906f8;
  #L1906ac.  call temp:= `access$getMAX_SPIN_CYCLES$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getMAX_SPIN_CYCLES$p:()I` @kind static;
  #L1906b2.  v1:= temp;
  #L1906b4.  if v7 >= v1 then goto L1906d8;
  #L1906b8.  v3:= v0.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1906bc.  call temp:= `get`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1906c2.  v3:= temp @kind object;
  #L1906c4.  call temp:= `access$getTAKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getTAKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1906ca.  v4:= temp @kind object;
  #L1906cc.  if v3 != v4 then goto L1906d2;
  #L1906d0.  return v8;
  #L1906d2.  v7:= v7 + 1;
  #L1906d6.  goto L1906b4;
  #L1906d8.  call temp:= `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1906de.  v1:= temp @kind object;
  #L1906e0.  call temp:= `access$getBROKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getBROKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1906e6.  v3:= temp @kind object;
  #L1906e8.  v0:= v0.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1906ec.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1906f2.  v0:= temp;
  #L1906f4.  v0:= v0 ^~ v8 @kind int;
  #L1906f6.  return v0;
  #L1906f8.  call temp:= `access$getCANCELLED$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getCANCELLED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1906fe.  v0:= temp @kind object;
  #L190700.  if v1 != v0 then goto L190706;
  #L190704.  return v7;
  #L190706.  v1:= (`kotlinx.coroutines.CancellableContinuation`) v1 @kind object;
  #L19070a.  call temp:= `e`(v15, v1) @signature `Lkotlinx/coroutines/sync/c;.e:(Lkotlinx/coroutines/CancellableContinuation;)Z` @kind direct;
  #L190710.  v0:= temp;
  #L190712.  return v0;
  #L190714.  v6:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v6 @kind object;
  #L190718.  v6:= (`kotlinx.coroutines.internal.Segment`) v6 @kind object;
  #L19071c.  if v6 == 0 then goto L190726;
  #L190720.  v5:= v6 @kind object;
  #L190722.  goto L19058c;
  #L190726.  call temp:= `getId`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L19072c.  v6:= temp @kind wide;
  #L19072e.  v8:= 1L;
  #L190732.  v6:= v6 + v8 @kind long;
  #L190734.  v8:= v5 @kind object;
  #L190736.  v8:= (`kotlinx.coroutines.sync.d`) v8 @kind object;
  #L19073a.  call temp:= `access$createSegment`(v6, v8) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$createSegment:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @kind static;
  #L190740.  v6:= temp @kind object;
  #L190742.  call temp:= `trySetNext`(v5, v6) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.trySetNext:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Z` @kind virtual;
  #L190748.  v7:= temp;
  #L19074a.  if v7 == 0 then goto L19058c;
  #L19074e.  call temp:= `getRemoved`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L190754.  v7:= temp;
  #L190756.  if v7 == 0 then goto L190720;
  #L19075a.  call `remove`(v5) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L190760.  goto L190720;
}
procedure `java.lang.Object` `acquire`(`kotlinx.coroutines.sync.c` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/sync/c;.acquire:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L190794.  v0:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L190798.  call temp:= `getAndDecrement`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)I` @kind virtual;
  #L19079e.  v0:= temp;
  #L1907a0.  if v0 <= 0 then goto L1907aa;
  #L1907a4.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1907a8.  return v2 @kind object;
  #L1907aa.  call temp:= `c`(v1, v2) @signature `Lkotlinx/coroutines/sync/c;.c:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L1907b0.  v2:= temp @kind object;
  #L1907b2.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1907b8.  v0:= temp @kind object;
  #L1907ba.  if v2 != v0 then goto L1907c0;
  #L1907be.  return v2 @kind object;
  #L1907c0.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1907c4.  return v2 @kind object;
}
procedure `int` `getAvailablePermits`(`kotlinx.coroutines.sync.c` v2 @kind this) @signature `Lkotlinx/coroutines/sync/c;.getAvailablePermits:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L190774.  v0:= v2.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int`;
  #L190778.  v1:= 0I;
  #L19077a.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L190780.  v0:= temp;
  #L190782.  return v0;
}
procedure `void` `release`(`kotlinx.coroutines.sync.c` v3 @kind this) @signature `Lkotlinx/coroutines/sync/c;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1909b4.  v0:= v3.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int`;
  #L1909b8.  v1:= v3.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L1909bc.  if v0 >= v1 then goto L1909c4;
  #L1909c0.  v1:= 1I;
  #L1909c2.  goto L1909c6;
  #L1909c4.  v1:= 0I;
  #L1909c6.  if v1 == 0 then goto L1909f2;
  #L1909ca.  v1:= v0 + 1;
  #L1909ce.  v2:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1909d2.  call temp:= `compareAndSet`(v2, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1909d8.  v1:= temp;
  #L1909da.  if v1 == 0 then goto L1909b4;
  #L1909de.  if v0 < 0 then goto L1909e4;
  #L1909e2.  return @kind void;
  #L1909e4.  call temp:= `f`(v3) @signature `Lkotlinx/coroutines/sync/c;.f:()Z` @kind direct;
  #L1909ea.  v0:= temp;
  #L1909ec.  if v0 == 0 then goto L1909b4;
  #L1909f0.  return @kind void;
  #L1909f2.  v0:= v3.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L1909f6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1909fc.  v0:= temp @kind object;
  #L1909fe.  v1:= "The number of released permits cannot be greater than " @kind object;
  #L190a02.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L190a08.  v0:= temp @kind object;
  #L190a0a.  v1:= new `java.lang.IllegalStateException`;
  #L190a0e.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L190a14.  v0:= temp @kind object;
  #L190a16.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190a1c.  throw v1;
}
procedure `boolean` `tryAcquire`(`kotlinx.coroutines.sync.c` v3 @kind this) @signature `Lkotlinx/coroutines/sync/c;.tryAcquire:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L190500.  v0:= v3.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int`;
  #L190504.  if v0 > 0 then goto L19050c;
  #L190508.  v0:= 0I;
  #L19050a.  return v0;
  #L19050c.  v1:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L190510.  v2:= v0 + -1;
  #L190514.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L19051a.  v0:= temp;
  #L19051c.  if v0 == 0 then goto L190500;
  #L190520.  v0:= 1I;
  #L190522.  return v0;
}
