record `kotlinx.coroutines.sync.d` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.Segment` @kind class {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.sync.d.e` @AccessFlag SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.d` v0 @kind this, `long` v1 , `kotlinx.coroutines.sync.d` v3 @kind object, `int` v4 ) @signature `Lkotlinx/coroutines/sync/d;.<init>:(JLkotlinx/coroutines/sync/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L190d7c.  call `<init>`(v0, v1, v3, v4) @signature `Lkotlinx/coroutines/internal/Segment;.<init>:(JLkotlinx/coroutines/internal/Segment;I)V` @kind direct;
  #L190d82.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L190d86.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L190d8c.  v2:= temp;
  #L190d8e.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L190d94.  v0.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L190d98.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.sync.d` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/sync/d;.d:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L190dac.  call temp:= `access$getCANCELLED$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getCANCELLED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L190db2.  v0:= temp @kind object;
  #L190db4.  v1:= v2.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L190db8.  call `set`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L190dbe.  call `onSlotCleaned`(v2) @signature `Lkotlinx/coroutines/internal/Segment;.onSlotCleaned:()V` @kind virtual;
  #L190dc4.  return @kind void;
}
procedure `int` `getMaxSlots`(`kotlinx.coroutines.sync.d` v1 @kind this) @signature `Lkotlinx/coroutines/sync/d;.getMaxSlots:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L190d00.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L190d06.  v0:= temp;
  #L190d08.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.sync.d` v3 @kind this) @signature `Lkotlinx/coroutines/sync/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L190d1c.  v0:= new `java.lang.StringBuilder`;
  #L190d20.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L190d26.  v1:= "SemaphoreSegment[id=" @kind object;
  #L190d2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L190d30.  call temp:= `getId`(v3) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L190d36.  v1:= temp @kind wide;
  #L190d38.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L190d3e.  v1:= ", hashCode=" @kind object;
  #L190d42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L190d48.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L190d4e.  v1:= temp;
  #L190d50.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L190d56.  v1:= 93I;
  #L190d5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L190d60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L190d66.  v0:= temp @kind object;
  #L190d68.  return v0 @kind object;
}
