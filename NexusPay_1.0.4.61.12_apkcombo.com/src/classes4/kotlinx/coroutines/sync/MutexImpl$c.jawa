record `kotlinx.coroutines.sync.MutexImpl$c` @kind class @AccessFlag ABSTRACT extends `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class, `kotlinx.coroutines.DisposableHandle` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl$c.d` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$c` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18f344.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @kind direct;
  #L18f34a.  v0.`kotlinx.coroutines.sync.MutexImpl$c.d` @type ^`java.lang.Object` := v2 @kind object;
  #L18f34e.  return @kind void;
}
procedure `void` `dispose`(`kotlinx.coroutines.sync.MutexImpl$c` v0 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L18f360.  call temp:= `remove`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.remove:()Z` @kind virtual;
  #L18f366.  return @kind void;
}
procedure `void` `e`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `f`() @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.f:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
