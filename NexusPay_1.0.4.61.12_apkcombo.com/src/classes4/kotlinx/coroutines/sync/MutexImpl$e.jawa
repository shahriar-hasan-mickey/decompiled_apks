record `kotlinx.coroutines.sync.MutexImpl$e` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.AtomicDesc` @kind class {
  `kotlinx.coroutines.sync.MutexImpl` `kotlinx.coroutines.sync.MutexImpl$e.a` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl$e.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$e` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18f4b8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.<init>:()V` @kind direct;
  #L18f4be.  v0.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` := v1 @kind object;
  #L18f4c2.  v0.`kotlinx.coroutines.sync.MutexImpl$e.b` @type ^`java.lang.Object` := v2 @kind object;
  #L18f4c6.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.sync.MutexImpl$e` v2 @kind this, `kotlinx.coroutines.internal.AtomicOp` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.complete:(Lkotlinx/coroutines/internal/AtomicOp;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18f4d8.  if v4 == 0 then goto L18f4e6;
  #L18f4dc.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18f4e2.  v4:= temp @kind object;
  #L18f4e4.  goto L18f504;
  #L18f4e6.  v4:= v2.`kotlinx.coroutines.sync.MutexImpl$e.b` @type ^`java.lang.Object` @kind object;
  #L18f4ea.  if v4 != 0 then goto L18f4f8;
  #L18f4ee.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18f4f4.  v4:= temp @kind object;
  #L18f4f6.  goto L18f504;
  #L18f4f8.  v0:= new `kotlinx.coroutines.sync.b`;
  #L18f4fc.  call `<init>`(v0, v4) @signature `Lkotlinx/coroutines/sync/b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L18f502.  v4:= v0 @kind object;
  #L18f504.  v0:= v2.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L18f508.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18f50c.  call temp:= `compareAndSet`(v1, v0, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18f512.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.sync.MutexImpl$e` v3 @kind this, `kotlinx.coroutines.internal.AtomicOp` v4 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.prepare:(Lkotlinx/coroutines/internal/AtomicOp;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18f468.  v0:= new `kotlinx.coroutines.sync.MutexImpl$e$a`;
  #L18f46c.  call `<init>`(v0, v3, v4) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$e;Lkotlinx/coroutines/internal/AtomicOp;)V` @kind direct;
  #L18f472.  v4:= v3.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L18f476.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18f47a.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18f480.  v2:= temp @kind object;
  #L18f482.  call temp:= `compareAndSet`(v1, v4, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18f488.  v4:= temp;
  #L18f48a.  if v4 != 0 then goto L18f498;
  #L18f48e.  call temp:= `access$getLOCK_FAIL$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getLOCK_FAIL$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L18f494.  v4:= temp @kind object;
  #L18f496.  return v4 @kind object;
  #L18f498.  v4:= v3.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L18f49c.  call temp:= `perform`(v0, v4) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18f4a2.  v4:= temp @kind object;
  #L18f4a4.  return v4 @kind object;
}
