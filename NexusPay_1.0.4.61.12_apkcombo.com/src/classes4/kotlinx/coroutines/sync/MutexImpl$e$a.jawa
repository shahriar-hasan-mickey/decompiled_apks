record `kotlinx.coroutines.sync.MutexImpl$e$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.OpDescriptor` @kind class {
  `kotlinx.coroutines.internal.AtomicOp` `kotlinx.coroutines.sync.MutexImpl$e$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$e$a` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl$e` v1 @kind object, `kotlinx.coroutines.internal.AtomicOp` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$e;Lkotlinx/coroutines/internal/AtomicOp;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18f44c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @kind direct;
  #L18f452.  v0.`kotlinx.coroutines.sync.MutexImpl$e$a.a` @type ^`kotlinx.coroutines.internal.AtomicOp` := v2 @kind object;
  #L18f456.  return @kind void;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`(`kotlinx.coroutines.sync.MutexImpl$e$a` v1 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18f434.  v0:= v1.`kotlinx.coroutines.sync.MutexImpl$e$a.a` @type ^`kotlinx.coroutines.internal.AtomicOp` @kind object;
  #L18f438.  return v0 @kind object;
}
procedure `java.lang.Object` `perform`(`kotlinx.coroutines.sync.MutexImpl$e$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18f3d8.  call temp:= `getAtomicOp`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L18f3de.  v0:= temp @kind object;
  #L18f3e0.  call temp:= `isDecided`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.isDecided:()Z` @kind virtual;
  #L18f3e6.  v0:= temp;
  #L18f3e8.  if v0 == 0 then goto L18f3f6;
  #L18f3ec.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L18f3f2.  v0:= temp @kind object;
  #L18f3f4.  goto L18f3fe;
  #L18f3f6.  call temp:= `getAtomicOp`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L18f3fc.  v0:= temp @kind object;
  #L18f3fe.  if v3 == 0 then goto L18f414;
  #L18f402.  v3:= (`kotlinx.coroutines.sync.MutexImpl`) v3 @kind object;
  #L18f406.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18f40a.  call temp:= `compareAndSet`(v1, v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18f410.  v3:= 0I;
  #L18f412.  return v3 @kind object;
  #L18f414.  v3:= new `java.lang.NullPointerException`;
  #L18f418.  v0:= "null cannot be cast to non-null type kotlinx.coroutines.sync.MutexImpl" @kind object;
  #L18f41c.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18f422.  throw v3;
}
