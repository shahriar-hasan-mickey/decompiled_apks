record `kotlinx.coroutines.v` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.JobCancellingNode` @kind class {
  `int` `kotlinx.coroutines.v._invoked` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlin.jvm.functions.Function1` `kotlinx.coroutines.v.d` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.v.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/v;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15a14c.  v0:= constclass @type ^`kotlinx.coroutines.v` @kind object;
  #L15a150.  v1:= "_invoked" @kind object;
  #L15a154.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L15a15a.  v0:= temp @kind object;
  #L15a15c.  `@@kotlinx.coroutines.v.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L15a160.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.v` v0 @kind this, `kotlin.jvm.functions.Function1` v1 @kind object) @signature `Lkotlinx/coroutines/v;.<init>:(Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15a174.  call `<init>`(v0) @signature `Lkotlinx/coroutines/JobCancellingNode;.<init>:()V` @kind direct;
  #L15a17a.  v0.`kotlinx.coroutines.v.d` @type ^`kotlin.jvm.functions.Function1` := v1 @kind object;
  #L15a17e.  v1:= 0I;
  #L15a180.  v0.`kotlinx.coroutines.v._invoked` @type ^`int` := v1;
  #L15a184.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.v` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/v;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15a12c.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L15a130.  call `invoke`(v0, v1) @signature `Lkotlinx/coroutines/v;.invoke:(Ljava/lang/Throwable;)V` @kind virtual;
  #L15a136.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L15a13a.  return v1 @kind object;
}
procedure `void` `invoke`(`kotlinx.coroutines.v` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lkotlinx/coroutines/v;.invoke:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15a198.  v0:= `@@kotlinx.coroutines.v.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L15a19c.  v1:= 0I;
  #L15a19e.  v2:= 1I;
  #L15a1a0.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L15a1a6.  v0:= temp;
  #L15a1a8.  if v0 == 0 then goto L15a1b6;
  #L15a1ac.  v0:= v3.`kotlinx.coroutines.v.d` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L15a1b0.  call temp:= `invoke`(v0, v4) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15a1b6.  return @kind void;
}
