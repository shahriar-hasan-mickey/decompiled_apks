record `kotlinx.coroutines.scheduling.CoroutineSchedulerKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `isSchedulerWorker`(`java.lang.Thread` v0 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineSchedulerKt;.isSchedulerWorker:(Ljava/lang/Thread;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L18bdb4.  v0:= instanceof @variable v0 @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` @kind boolean;
  #L18bdb8.  return v0;
}
procedure `boolean` `mayNotBlock`(`java.lang.Thread` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineSchedulerKt;.mayNotBlock:(Ljava/lang/Thread;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L18bdcc.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` @kind boolean;
  #L18bdd0.  if v0 == 0 then goto L18bde8;
  #L18bdd4.  v1:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v1 @kind object;
  #L18bdd8.  v1:= v1.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18bddc.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18bde0.  if v1 != v0 then goto L18bde8;
  #L18bde4.  v1:= 1I;
  #L18bde6.  goto L18bdea;
  #L18bde8.  v1:= 0I;
  #L18bdea.  return v1;
}
