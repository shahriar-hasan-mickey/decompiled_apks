record `kotlinx.coroutines.scheduling.CoroutineScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.Executor` @kind interface, `java.io.Closeable` @kind interface {
  `int` `kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @AccessFlag VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.scheduling.GlobalQueue` `kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.scheduling.GlobalQueue` `kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.scheduling.CoroutineScheduler.idleWorkerKeepAliveNs` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.String` `kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @AccessFlag PUBLIC_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @AccessFlag PUBLIC_FINAL;
}
global `kotlinx.coroutines.scheduling.CoroutineScheduler$Companion` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.MAX_SUPPORTED_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.MIN_SUPPORTED_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L18c574.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$Companion`;
  #L18c578.  v1:= 0I;
  #L18c57a.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L18c580.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.Companion` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$Companion` := v0 @kind object;
  #L18c584.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L18c588.  v1:= "NOT_IN_STACK" @kind object;
  #L18c58c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c592.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L18c596.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L18c59a.  v1:= "parkedWorkersStack" @kind object;
  #L18c59e.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L18c5a4.  v0:= temp @kind object;
  #L18c5a6.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L18c5aa.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L18c5ae.  v1:= "controlState" @kind object;
  #L18c5b2.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L18c5b8.  v0:= temp @kind object;
  #L18c5ba.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L18c5be.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L18c5c2.  v1:= "_isTerminated" @kind object;
  #L18c5c6.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L18c5cc.  v0:= temp @kind object;
  #L18c5ce.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L18c5d2.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `int` v3 , `int` v4 , `long` v5 , `java.lang.String` v7 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<init>:(IIJLjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L18c5e4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18c5ea.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int` := v3;
  #L18c5ee.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int` := v4;
  #L18c5f2.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.idleWorkerKeepAliveNs` @type ^`long` := v5 @kind wide;
  #L18c5f6.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @type ^`java.lang.String` := v7 @kind object;
  #L18c5fa.  v4:= 0I;
  #L18c5fc.  v5:= 1I;
  #L18c5fe.  if v3 < v5 then goto L18c606;
  #L18c602.  v3:= 1I;
  #L18c604.  goto L18c608;
  #L18c606.  v3:= 0I;
  #L18c608.  if v3 == 0 then goto L18c770;
  #L18c60c.  v3:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L18c610.  v6:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18c614.  if v3 < v6 then goto L18c61c;
  #L18c618.  v3:= 1I;
  #L18c61a.  goto L18c61e;
  #L18c61c.  v3:= 0I;
  #L18c61e.  v6:= "Max pool size " @kind object;
  #L18c622.  if v3 == 0 then goto L18c726;
  #L18c626.  v3:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L18c62a.  v7:= 2097150I;
  #L18c630.  if v3 > v7 then goto L18c638;
  #L18c634.  v3:= 1I;
  #L18c636.  goto L18c63a;
  #L18c638.  v3:= 0I;
  #L18c63a.  if v3 == 0 then goto L18c6e6;
  #L18c63e.  v6:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.idleWorkerKeepAliveNs` @type ^`long` @kind wide;
  #L18c642.  v0:= 0L;
  #L18c646.  v3:= lcmp(v6, v0);
  #L18c64a.  if v3 <= 0 then goto L18c652;
  #L18c64e.  v3:= 1I;
  #L18c650.  goto L18c654;
  #L18c652.  v3:= 0I;
  #L18c654.  if v3 == 0 then goto L18c6a2;
  #L18c658.  v3:= new `kotlinx.coroutines.scheduling.GlobalQueue`;
  #L18c65c.  call `<init>`(v3) @signature `Lkotlinx/coroutines/scheduling/GlobalQueue;.<init>:()V` @kind direct;
  #L18c662.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` := v3 @kind object;
  #L18c666.  v3:= new `kotlinx.coroutines.scheduling.GlobalQueue`;
  #L18c66a.  call `<init>`(v3) @signature `Lkotlinx/coroutines/scheduling/GlobalQueue;.<init>:()V` @kind direct;
  #L18c670.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` := v3 @kind object;
  #L18c674.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` := v0 @kind wide;
  #L18c678.  v3:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L18c67c.  v6:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L18c680.  v6:= v6 + v5 @kind int;
  #L18c682.  call `<init>`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L18c688.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v3 @kind object;
  #L18c68c.  v3:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18c690.  v5:= (`long`) v3 @kind i2l;
  #L18c692.  v3:= 42I;
  #L18c696.  v5:= v5 ^< v3 @kind long;
  #L18c698.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` := v5 @kind wide;
  #L18c69c.  v2.`kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated` @type ^`int` := v4;
  #L18c6a0.  return @kind void;
  #L18c6a2.  v3:= new `java.lang.StringBuilder`;
  #L18c6a6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c6ac.  v4:= "Idle worker keep alive time " @kind object;
  #L18c6b0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c6b6.  v4:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.idleWorkerKeepAliveNs` @type ^`long` @kind wide;
  #L18c6ba.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c6c0.  v4:= " must be positive" @kind object;
  #L18c6c4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c6ca.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c6d0.  v3:= temp @kind object;
  #L18c6d2.  v4:= new `java.lang.IllegalArgumentException`;
  #L18c6d6.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c6dc.  v3:= temp @kind object;
  #L18c6de.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c6e4.  throw v4;
  #L18c6e6.  v3:= new `java.lang.StringBuilder`;
  #L18c6ea.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c6f0.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c6f6.  v4:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L18c6fa.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c700.  v4:= " should not exceed maximal supported number of threads 2097150" @kind object;
  #L18c704.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c70a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c710.  v3:= temp @kind object;
  #L18c712.  v4:= new `java.lang.IllegalArgumentException`;
  #L18c716.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c71c.  v3:= temp @kind object;
  #L18c71e.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c724.  throw v4;
  #L18c726.  v3:= new `java.lang.StringBuilder`;
  #L18c72a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c730.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c736.  v4:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L18c73a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c740.  v4:= " should be greater than or equals to core pool size " @kind object;
  #L18c744.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c74a.  v4:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18c74e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c754.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c75a.  v3:= temp @kind object;
  #L18c75c.  v4:= new `java.lang.IllegalArgumentException`;
  #L18c760.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c766.  v3:= temp @kind object;
  #L18c768.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c76e.  throw v4;
  #L18c770.  v3:= new `java.lang.StringBuilder`;
  #L18c774.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c77a.  v4:= "Core pool size " @kind object;
  #L18c77e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c784.  v4:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18c788.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c78e.  v4:= " should be at least 1" @kind object;
  #L18c792.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c798.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c79e.  v3:= temp @kind object;
  #L18c7a0.  v4:= new `java.lang.IllegalArgumentException`;
  #L18c7a4.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c7aa.  v3:= temp @kind object;
  #L18c7ac.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c7b2.  throw v4;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v6 @kind this, `int` v7 , `int` v8 , `long` v9 , `java.lang.String` v11 @kind object, `int` v12 , `kotlin.jvm.internal.DefaultConstructorMarker` v13 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<init>:(IIJLjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L18c7c4.  v13:= v12 ^& 4;
  #L18c7c8.  if v13 == 0 then goto L18c7d0;
  #L18c7cc.  v9:= `@@kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS` @type ^`long` @kind wide;
  #L18c7d0.  v3:= v9 @kind wide;
  #L18c7d2.  v9:= v12 ^& 8;
  #L18c7d6.  if v9 == 0 then goto L18c7de;
  #L18c7da.  v11:= "DefaultDispatcher" @kind object;
  #L18c7de.  v5:= v11 @kind object;
  #L18c7e0.  v0:= v6 @kind object;
  #L18c7e2.  v1:= v7;
  #L18c7e4.  v2:= v8;
  #L18c7e6.  call `<init>`(v0, v1, v2, v3, v5) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<init>:(IIJLjava/lang/String;)V` @kind direct;
  #L18c7ec.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `kotlinx.coroutines.scheduling.Task` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.a:(Lkotlinx/coroutines/scheduling/Task;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L18bdfc.  v0:= v3.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18be00.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18be06.  v0:= temp;
  #L18be08.  v1:= 1I;
  #L18be0a.  if v0 != v1 then goto L18be10;
  #L18be0e.  goto L18be12;
  #L18be10.  v1:= 0I;
  #L18be12.  if v1 == 0 then goto L18be24;
  #L18be16.  v0:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18be1a.  call temp:= `addLast`(v0, v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L18be20.  v3:= temp;
  #L18be22.  goto L18be30;
  #L18be24.  v0:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18be28.  call temp:= `addLast`(v0, v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L18be2e.  v3:= temp;
  #L18be30.  return v3;
}
procedure `int` `b`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v10 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.b:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L18bff0.  v0:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18bff4.  @monitorenter v0
  #L18bff6.  call temp:= `isTerminated`(v10) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.isTerminated:()Z` @kind virtual;
  #L18bffc.  v1:= temp;
  #L18bffe.  if v1 == 0 then goto L18c008;
  #L18c002.  v1:= -1I;
  #L18c004.  @monitorexit v0
  #L18c006.  return v1;
  #L18c008.  v1:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L18c00c.  v3:= 2097151L;
  #L18c012.  v5:= v1 ^& v3 @kind long;
  #L18c016.  v6:= (`int`) v5 @kind l2i;
  #L18c018.  v7:= 4398044413952L;
  #L18c022.  v1:= v1 ^& v7 @kind long;
  #L18c024.  v5:= 21I;
  #L18c028.  v1:= v1 ^> v5 @kind long;
  #L18c02a.  v2:= (`int`) v1 @kind l2i;
  #L18c02c.  v1:= v6 - v2 @kind int;
  #L18c030.  v2:= 0I;
  #L18c032.  call temp:= `coerceAtLeast`(v1, v2) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L18c038.  v1:= temp;
  #L18c03a.  v5:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18c03e.  if v1 < v5 then goto L18c046;
  #L18c042.  @monitorexit v0
  #L18c044.  return v2;
  #L18c046.  v5:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L18c04a.  if v6 < v5 then goto L18c052;
  #L18c04e.  @monitorexit v0
  #L18c050.  return v2;
  #L18c052.  v5:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L18c056.  v5:= v5 ^& v3 @kind long;
  #L18c058.  v6:= (`int`) v5 @kind l2i;
  #L18c05a.  v5:= 1I;
  #L18c05c.  v6:= v6 + v5 @kind int;
  #L18c05e.  if v6 <= 0 then goto L18c076;
  #L18c062.  v7:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18c066.  call temp:= `get`(v7, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L18c06c.  v7:= temp @kind object;
  #L18c06e.  if v7 != 0 then goto L18c076;
  #L18c072.  v7:= 1I;
  #L18c074.  goto L18c078;
  #L18c076.  v7:= 0I;
  #L18c078.  if v7 == 0 then goto L18c0ce;
  #L18c07c.  v7:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`;
  #L18c080.  call `<init>`(v7, v10, v6) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.<init>:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;I)V` @kind direct;
  #L18c086.  v8:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18c08a.  call `set`(v8, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L18c090.  v8:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L18c094.  call temp:= `incrementAndGet`(v8, v10) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)J` @kind virtual;
  #L18c09a.  v8:= temp @kind wide;
  #L18c09c.  v3:= v3 ^& v8 @kind long;
  #L18c09e.  v4:= (`int`) v3 @kind l2i;
  #L18c0a0.  if v6 != v4 then goto L18c0a6;
  #L18c0a4.  v2:= 1I;
  #L18c0a6.  if v2 == 0 then goto L18c0b6;
  #L18c0aa.  call `start`(v7) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L18c0b0.  v1:= v1 + v5 @kind int;
  #L18c0b2.  @monitorexit v0
  #L18c0b4.  return v1;
  #L18c0b6.  v1:= "Failed requirement." @kind object;
  #L18c0ba.  v2:= new `java.lang.IllegalArgumentException`;
  #L18c0be.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c0c4.  v1:= temp @kind object;
  #L18c0c6.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c0cc.  throw v2;
  #L18c0ce.  v1:= "Failed requirement." @kind object;
  #L18c0d2.  v2:= new `java.lang.IllegalArgumentException`;
  #L18c0d6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c0dc.  v1:= temp @kind object;
  #L18c0de.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c0e4.  throw v2;
  #L18c0e6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18c0e8.  @monitorexit v0
  #L18c0ea.  throw v1;
  catch `java.lang.Throwable` @[L18bff6..L18bffe] goto L18c0e6;
  catch `java.lang.Throwable` @[L18c008..L18c03e] goto L18c0e6;
  catch `java.lang.Throwable` @[L18c046..L18c04a] goto L18c0e6;
  catch `java.lang.Throwable` @[L18c052..L18c0b0] goto L18c0e6;
  catch `java.lang.Throwable` @[L18c0b6..L18c0e6] goto L18c0e6;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` `c`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v3 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.c:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18c41c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L18c422.  v0:= temp @kind object;
  #L18c424.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` @kind boolean;
  #L18c428.  v2:= 0I;
  #L18c42a.  if v1 == 0 then goto L18c434;
  #L18c42e.  v0:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v0 @kind object;
  #L18c432.  goto L18c436;
  #L18c434.  v0:= v2 @kind object;
  #L18c436.  if v0 != 0 then goto L18c43c;
  #L18c43a.  goto L18c44e;
  #L18c43c.  v1:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L18c440.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L18c446.  v1:= temp;
  #L18c448.  if v1 == 0 then goto L18c44e;
  #L18c44c.  v2:= v0 @kind object;
  #L18c44e.  return v2 @kind object;
}
procedure `int` `d`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.d:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L18c128.  call temp:= `getNextParkedWorker`(v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L18c12e.  v2:= temp @kind object;
  #L18c130.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L18c134.  if v2 != v0 then goto L18c13c;
  #L18c138.  v2:= -1I;
  #L18c13a.  return v2;
  #L18c13c.  if v2 != 0 then goto L18c144;
  #L18c140.  v2:= 0I;
  #L18c142.  return v2;
  #L18c144.  v2:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v2 @kind object;
  #L18c148.  call temp:= `getIndexInArray`(v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getIndexInArray:()I` @kind virtual;
  #L18c14e.  v0:= temp;
  #L18c150.  if v0 == 0 then goto L18c156;
  #L18c154.  return v0;
  #L18c156.  call temp:= `getNextParkedWorker`(v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L18c15c.  v2:= temp @kind object;
  #L18c15e.  goto L18c130;
}
procedure `void` `dispatch$default`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v0 @kind object, `java.lang.Runnable` v1 @kind object, `kotlinx.coroutines.scheduling.TaskContext` v2 @kind object, `boolean` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch$default:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L18c81c.  v5:= v4 ^& 2;
  #L18c820.  if v5 == 0 then goto L18c828;
  #L18c824.  v2:= `@@kotlinx.coroutines.scheduling.NonBlockingContext.INSTANCE` @type ^`kotlinx.coroutines.scheduling.NonBlockingContext` @kind object;
  #L18c828.  v4:= v4 ^& 4;
  #L18c82c.  if v4 == 0 then goto L18c832;
  #L18c830.  v3:= 0I;
  #L18c832.  call `dispatch`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;Z)V` @kind virtual;
  #L18c838.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` `e`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v9 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.e:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L18c460.  v2:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` @kind wide;
  #L18c464.  v0:= 2097151L;
  #L18c46a.  v0:= v0 ^& v2 @kind long;
  #L18c46c.  v1:= (`int`) v0 @kind l2i;
  #L18c46e.  v0:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18c472.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L18c478.  v0:= temp @kind object;
  #L18c47a.  v6:= v0 @kind object;
  #L18c47c.  v6:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v6 @kind object;
  #L18c480.  if v6 != 0 then goto L18c488;
  #L18c484.  v0:= 0I;
  #L18c486.  return v0 @kind object;
  #L18c488.  v0:= 2097152L;
  #L18c48e.  v0:= v0 + v2 @kind long;
  #L18c490.  v4:= -2097152L;
  #L18c496.  v0:= v0 ^& v4 @kind long;
  #L18c498.  call temp:= `d`(v9, v6) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.d:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)I` @kind direct;
  #L18c49e.  v4:= temp;
  #L18c4a0.  if v4 >= 0 then goto L18c4a6;
  #L18c4a4.  goto L18c460;
  #L18c4a6.  v5:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L18c4aa.  v7:= (`long`) v4 @kind i2l;
  #L18c4ac.  v7:= v7 ^| v0 @kind long;
  #L18c4ae.  v0:= v5 @kind object;
  #L18c4b0.  v1:= v9 @kind object;
  #L18c4b2.  v4:= v7 @kind wide;
  #L18c4b4.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L18c4ba.  v0:= temp;
  #L18c4bc.  if v0 == 0 then goto L18c460;
  #L18c4c0.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L18c4c4.  call `setNextParkedWorker`(v6, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.setNextParkedWorker:(Ljava/lang/Object;)V` @kind virtual;
  #L18c4ca.  return v6 @kind object;
}
procedure `void` `f`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v3 @kind this, `boolean` v4 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.f:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18cb88.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L18cb8c.  v1:= 2097152L;
  #L18cb92.  call temp:= `addAndGet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L18cb98.  v0:= temp @kind wide;
  #L18cb9a.  if v4 == 0 then goto L18cba0;
  #L18cb9e.  return @kind void;
  #L18cba0.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L18cba6.  v4:= temp;
  #L18cba8.  if v4 == 0 then goto L18cbae;
  #L18cbac.  return @kind void;
  #L18cbae.  call temp:= `h`(v3, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.h:(J)Z` @kind direct;
  #L18cbb4.  v4:= temp;
  #L18cbb6.  if v4 == 0 then goto L18cbbc;
  #L18cbba.  return @kind void;
  #L18cbbc.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L18cbc2.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `g`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v3 @kind object, `kotlinx.coroutines.scheduling.Task` v4 @kind object, `boolean` v5 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.g:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L18c51c.  if v3 != 0 then goto L18c522;
  #L18c520.  return v4 @kind object;
  #L18c522.  v0:= v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18c526.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18c52a.  if v0 != v1 then goto L18c530;
  #L18c52e.  return v4 @kind object;
  #L18c530.  v0:= v4.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18c534.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18c53a.  v0:= temp;
  #L18c53c.  if v0 != 0 then goto L18c54e;
  #L18c540.  v0:= v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18c544.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18c548.  if v0 != v1 then goto L18c54e;
  #L18c54c.  return v4 @kind object;
  #L18c54e.  v0:= 1I;
  #L18c550.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.mayHaveLocalTasks` @type ^`boolean` := v0 @kind boolean;
  #L18c554.  v3:= v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.localQueue` @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L18c558.  call temp:= `add`(v3, v4, v5) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add:(Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L18c55e.  v3:= temp @kind object;
  #L18c560.  return v3 @kind object;
}
procedure `boolean` `h`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v4 @kind this, `long` v5 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.h:(J)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18bf24.  v0:= 2097151L;
  #L18bf2a.  v0:= v0 ^& v5 @kind long;
  #L18bf2c.  v1:= (`int`) v0 @kind l2i;
  #L18bf2e.  v2:= 4398044413952L;
  #L18bf38.  v5:= v5 ^& v2 @kind long;
  #L18bf3a.  v0:= 21I;
  #L18bf3e.  v5:= v5 ^> v0 @kind long;
  #L18bf40.  v6:= (`int`) v5 @kind l2i;
  #L18bf42.  v1:= v1 - v6 @kind int;
  #L18bf44.  v5:= 0I;
  #L18bf46.  call temp:= `coerceAtLeast`(v1, v5) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L18bf4c.  v6:= temp;
  #L18bf4e.  v0:= v4.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18bf52.  if v6 >= v0 then goto L18bf78;
  #L18bf56.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.b:()I` @kind direct;
  #L18bf5c.  v6:= temp;
  #L18bf5e.  v0:= 1I;
  #L18bf60.  if v6 != v0 then goto L18bf72;
  #L18bf64.  v1:= v4.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18bf68.  if v1 <= v0 then goto L18bf72;
  #L18bf6c.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.b:()I` @kind direct;
  #L18bf72.  if v6 <= 0 then goto L18bf78;
  #L18bf76.  return v0;
  #L18bf78.  return v5;
}
procedure `boolean` `i`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v0 @kind object, `long` v1 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.i:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;JILjava/lang/Object;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L18befc.  v3:= v3 ^& 1;
  #L18bf00.  if v3 == 0 then goto L18bf08;
  #L18bf04.  v1:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L18bf08.  call temp:= `h`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.h:(J)Z` @kind direct;
  #L18bf0e.  v0:= temp;
  #L18bf10.  return v0;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v4 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18bf8c.  call temp:= `e`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.e:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @kind direct;
  #L18bf92.  v0:= temp @kind object;
  #L18bf94.  v1:= 0I;
  #L18bf96.  if v0 != 0 then goto L18bf9c;
  #L18bf9a.  return v1;
  #L18bf9c.  v2:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18bfa0.  v3:= -1I;
  #L18bfa2.  call temp:= `compareAndSet`(v2, v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L18bfa8.  v1:= temp;
  #L18bfaa.  if v1 == 0 then goto L18bf8c;
  #L18bfae.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L18bfb4.  v0:= 1I;
  #L18bfb6.  return v0;
}
procedure `int` `availableCpuPermits`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `long` v3 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.availableCpuPermits:(J)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18bfc8.  v0:= 9223367638808264704L;
  #L18bfd2.  v3:= v3 ^& v0 @kind long;
  #L18bfd4.  v0:= 42I;
  #L18bfd8.  v3:= v3 ^> v0 @kind long;
  #L18bfda.  v4:= (`int`) v3 @kind l2i;
  #L18bfdc.  return v4;
}
procedure `void` `close`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18c800.  v0:= 10000L;
  #L18c804.  call `shutdown`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.shutdown:(J)V` @kind virtual;
  #L18c80a.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `createTask`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object, `kotlinx.coroutines.scheduling.TaskContext` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.createTask:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18c4dc.  v0:= `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @type ^`kotlinx.coroutines.scheduling.SchedulerTimeSource` @kind object;
  #L18c4e0.  call temp:= `nanoTime`(v0) @signature `Lkotlinx/coroutines/scheduling/SchedulerTimeSource;.nanoTime:()J` @kind virtual;
  #L18c4e6.  v0:= temp @kind wide;
  #L18c4e8.  v2:= instanceof @variable v4 @type ^`kotlinx.coroutines.scheduling.Task` @kind boolean;
  #L18c4ec.  if v2 == 0 then goto L18c4fe;
  #L18c4f0.  v4:= (`kotlinx.coroutines.scheduling.Task`) v4 @kind object;
  #L18c4f4.  v4.`kotlinx.coroutines.scheduling.Task.submissionTime` @type ^`long` := v0 @kind wide;
  #L18c4f8.  v4.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` := v5 @kind object;
  #L18c4fc.  return v4 @kind object;
  #L18c4fe.  v2:= new `kotlinx.coroutines.scheduling.TaskImpl`;
  #L18c502.  call `<init>`(v2, v4, v0, v5) @signature `Lkotlinx/coroutines/scheduling/TaskImpl;.<init>:(Ljava/lang/Runnable;JLkotlinx/coroutines/scheduling/TaskContext;)V` @kind direct;
  #L18c508.  return v2 @kind object;
}
procedure `void` `dispatch`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind this, `java.lang.Runnable` v2 @kind object, `kotlinx.coroutines.scheduling.TaskContext` v3 @kind object, `boolean` v4 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18c84c.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L18c852.  v0:= temp @kind object;
  #L18c854.  if v0 != 0 then goto L18c85a;
  #L18c858.  goto L18c860;
  #L18c85a.  call `trackTask`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.trackTask:()V` @kind virtual;
  #L18c860.  call temp:= `createTask`(v1, v2, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.createTask:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L18c866.  v2:= temp @kind object;
  #L18c868.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.c:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @kind direct;
  #L18c86e.  v3:= temp @kind object;
  #L18c870.  call temp:= `g`(v1, v3, v2, v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.g:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L18c876.  v0:= temp @kind object;
  #L18c878.  if v0 == 0 then goto L18c8a6;
  #L18c87c.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.a:(Lkotlinx/coroutines/scheduling/Task;)Z` @kind direct;
  #L18c882.  v0:= temp;
  #L18c884.  if v0 == 0 then goto L18c88a;
  #L18c888.  goto L18c8a6;
  #L18c88a.  v2:= new `java.util.concurrent.RejectedExecutionException`;
  #L18c88e.  v3:= v1.`kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @type ^`java.lang.String` @kind object;
  #L18c892.  v4:= " was terminated" @kind object;
  #L18c896.  call temp:= `stringPlus`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18c89c.  v3:= temp @kind object;
  #L18c89e.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/RejectedExecutionException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18c8a4.  throw v2;
  #L18c8a6.  if v4 == 0 then goto L18c8b2;
  #L18c8aa.  if v3 == 0 then goto L18c8b2;
  #L18c8ae.  v3:= 1I;
  #L18c8b0.  goto L18c8b4;
  #L18c8b2.  v3:= 0I;
  #L18c8b4.  v2:= v2.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18c8b8.  call temp:= `getTaskMode`(v2) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18c8be.  v2:= temp;
  #L18c8c0.  if v2 != 0 then goto L18c8d2;
  #L18c8c4.  if v3 == 0 then goto L18c8ca;
  #L18c8c8.  return @kind void;
  #L18c8ca.  call `signalCpuWork`(v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.signalCpuWork:()V` @kind virtual;
  #L18c8d0.  goto L18c8d8;
  #L18c8d2.  call `f`(v1, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.f:(Z)V` @kind direct;
  #L18c8d8.  return @kind void;
}
procedure `void` `execute`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v6 @kind this, `java.lang.Runnable` v7 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L18c8ec.  v2:= 0I;
  #L18c8ee.  v3:= 0I;
  #L18c8f0.  v4:= 6I;
  #L18c8f2.  v5:= 0I;
  #L18c8f4.  v0:= v6 @kind object;
  #L18c8f6.  v1:= v7 @kind object;
  #L18c8f8.  call `dispatch$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch$default:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;ZILjava/lang/Object;)V` @kind static;
  #L18c8fe.  return @kind void;
}
procedure `boolean` `isTerminated`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.isTerminated:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18be44.  v0:= v1.`kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated` @type ^`int`;
  #L18be48.  return v0;
}
procedure `boolean` `parkedWorkersStackPush`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v10 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v11 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.parkedWorkersStackPush:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L18be5c.  call temp:= `getNextParkedWorker`(v11) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L18be62.  v0:= temp @kind object;
  #L18be64.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L18be68.  v2:= 0I;
  #L18be6a.  if v0 == v1 then goto L18be70;
  #L18be6e.  return v2;
  #L18be70.  v5:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` @kind wide;
  #L18be74.  v0:= 2097151L;
  #L18be7a.  v0:= v0 ^& v5 @kind long;
  #L18be7c.  v1:= (`int`) v0 @kind l2i;
  #L18be7e.  v3:= 2097152L;
  #L18be84.  v3:= v3 + v5 @kind long;
  #L18be86.  v7:= -2097152L;
  #L18be8c.  v3:= v3 ^& v7 @kind long;
  #L18be8e.  call temp:= `getIndexInArray`(v11) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getIndexInArray:()I` @kind virtual;
  #L18be94.  v0:= temp;
  #L18be96.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18be9c.  v7:= temp;
  #L18be9e.  v9:= 1I;
  #L18bea0.  if v7 == 0 then goto L18bec0;
  #L18bea4.  if v0 == 0 then goto L18beac;
  #L18bea8.  v7:= 1I;
  #L18beaa.  goto L18beae;
  #L18beac.  v7:= 0I;
  #L18beae.  if v7 == 0 then goto L18beb4;
  #L18beb2.  goto L18bec0;
  #L18beb4.  v11:= new `java.lang.AssertionError`;
  #L18beb8.  call `<init>`(v11) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18bebe.  throw v11;
  #L18bec0.  v7:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18bec4.  call temp:= `get`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L18beca.  v1:= temp @kind object;
  #L18becc.  call `setNextParkedWorker`(v11, v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.setNextParkedWorker:(Ljava/lang/Object;)V` @kind virtual;
  #L18bed2.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L18bed6.  v7:= (`long`) v0 @kind i2l;
  #L18bed8.  v7:= v7 ^| v3 @kind long;
  #L18beda.  v3:= v1 @kind object;
  #L18bedc.  v4:= v10 @kind object;
  #L18bede.  call temp:= `compareAndSet`(v3, v4, v5, v7) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L18bee4.  v0:= temp;
  #L18bee6.  if v0 == 0 then goto L18be70;
  #L18beea.  return v9;
}
procedure `void` `parkedWorkersStackTopUpdate`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v8 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.parkedWorkersStackTopUpdate:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L18c910.  v2:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` @kind wide;
  #L18c914.  v0:= 2097151L;
  #L18c91a.  v0:= v0 ^& v2 @kind long;
  #L18c91c.  v1:= (`int`) v0 @kind l2i;
  #L18c91e.  v4:= 2097152L;
  #L18c924.  v4:= v4 + v2 @kind long;
  #L18c926.  v6:= -2097152L;
  #L18c92c.  v4:= v4 ^& v6 @kind long;
  #L18c92e.  if v1 != v10 then goto L18c942;
  #L18c932.  if v11 != 0 then goto L18c940;
  #L18c936.  call temp:= `d`(v8, v9) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.d:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)I` @kind direct;
  #L18c93c.  v1:= temp;
  #L18c93e.  goto L18c942;
  #L18c940.  v1:= v11;
  #L18c942.  if v1 >= 0 then goto L18c948;
  #L18c946.  goto L18c910;
  #L18c948.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L18c94c.  v6:= (`long`) v1 @kind i2l;
  #L18c94e.  v4:= v4 ^| v6 @kind long;
  #L18c950.  v1:= v8 @kind object;
  #L18c952.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L18c958.  v0:= temp;
  #L18c95a.  if v0 == 0 then goto L18c910;
  #L18c95e.  return @kind void;
}
procedure `void` `runSafely`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `kotlinx.coroutines.scheduling.Task` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.runSafely:(Lkotlinx/coroutines/scheduling/Task;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18c970.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L18c976.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L18c97c.  v3:= temp @kind object;
  #L18c97e.  if v3 != 0 then goto L18c984;
  #L18c982.  goto L18c9b0;
  #L18c984.  call `unTrackTask`(v3) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unTrackTask:()V` @kind virtual;
  #L18c98a.  goto L18c9b0;
  #L18c98c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18c98e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L18c994.  v0:= temp @kind object;
  #L18c996.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L18c99c.  v1:= temp @kind object;
  #L18c99e.  call `uncaughtException`(v1, v0, v3) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L18c9a4.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L18c9aa.  v3:= temp @kind object;
  #L18c9ac.  if v3 != 0 then goto L18c984;
  #L18c9b0.  return @kind void;
  #L18c9b2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18c9b4.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L18c9ba.  v0:= temp @kind object;
  #L18c9bc.  if v0 != 0 then goto L18c9c2;
  #L18c9c0.  goto L18c9c8;
  #L18c9c2.  call `unTrackTask`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unTrackTask:()V` @kind virtual;
  #L18c9c8.  throw v3;
  catch `java.lang.Throwable` @[L18c970..L18c976] goto L18c98c;
  catch `java.lang.Throwable` @[L18c98e..L18c9a4] goto L18c9b2;
}
procedure `void` `shutdown`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v9 @kind this, `long` v10 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.shutdown:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L18c9f4.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18c9f8.  v1:= 0I;
  #L18c9fa.  v2:= 1I;
  #L18c9fc.  call temp:= `compareAndSet`(v0, v9, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L18ca02.  v0:= temp;
  #L18ca04.  if v0 != 0 then goto L18ca0a;
  #L18ca08.  return @kind void;
  #L18ca0a.  call temp:= `c`(v9) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.c:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @kind direct;
  #L18ca10.  v0:= temp @kind object;
  #L18ca12.  v3:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18ca16.  @monitorenter v3
  #L18ca18.  v4:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L18ca1c.  v6:= 2097151L;
  #L18ca22.  v4:= v4 ^& v6 @kind long;
  #L18ca24.  v5:= (`int`) v4 @kind l2i;
  #L18ca26.  @monitorexit v3
  #L18ca28.  if v2 > v5 then goto L18caae;
  #L18ca2c.  v3:= 1I;
  #L18ca2e.  v4:= v3 + 1;
  #L18ca32.  v6:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18ca36.  call temp:= `get`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L18ca3c.  v6:= temp @kind object;
  #L18ca3e.  v6:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v6 @kind object;
  #L18ca42.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L18ca48.  if v6 == v0 then goto L18caa4;
  #L18ca4c.  call temp:= `isAlive`(v6) @signature `Ljava/lang/Thread;.isAlive:()Z` @kind virtual;
  #L18ca52.  v7:= temp;
  #L18ca54.  if v7 == 0 then goto L18ca66;
  #L18ca58.  call `unpark`(v6) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L18ca5e.  call `join`(v6, v10) @signature `Ljava/lang/Thread;.join:(J)V` @kind virtual;
  #L18ca64.  goto L18ca4c;
  #L18ca66.  v7:= v6.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18ca6a.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18ca70.  v8:= temp;
  #L18ca72.  if v8 == 0 then goto L18ca96;
  #L18ca76.  v8:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18ca7a.  if v7 != v8 then goto L18ca82;
  #L18ca7e.  v7:= 1I;
  #L18ca80.  goto L18ca84;
  #L18ca82.  v7:= 0I;
  #L18ca84.  if v7 == 0 then goto L18ca8a;
  #L18ca88.  goto L18ca96;
  #L18ca8a.  v10:= new `java.lang.AssertionError`;
  #L18ca8e.  call `<init>`(v10) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18ca94.  throw v10;
  #L18ca96.  v6:= v6.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.localQueue` @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L18ca9a.  v7:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18ca9e.  call `offloadAllWorkTo`(v6, v7) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.offloadAllWorkTo:(Lkotlinx/coroutines/scheduling/GlobalQueue;)V` @kind virtual;
  #L18caa4.  if v3 != v5 then goto L18caaa;
  #L18caa8.  goto L18caae;
  #L18caaa.  v3:= v4;
  #L18caac.  goto L18ca2e;
  #L18caae.  v10:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18cab2.  call `close`(v10) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.close:()V` @kind virtual;
  #L18cab8.  v10:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18cabc.  call `close`(v10) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.close:()V` @kind virtual;
  #L18cac2.  if v0 != 0 then goto L18caca;
  #L18cac6.  v10:= 0I;
  #L18cac8.  goto L18cad2;
  #L18caca.  call temp:= `findTask`(v0, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.findTask:(Z)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L18cad0.  v10:= temp @kind object;
  #L18cad2.  if v10 != 0 then goto L18cae6;
  #L18cad6.  v10:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18cada.  call temp:= `removeFirstOrNull`(v10) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L18cae0.  v10:= temp @kind object;
  #L18cae2.  v10:= (`kotlinx.coroutines.scheduling.Task`) v10 @kind object;
  #L18cae6.  if v10 != 0 then goto L18cb5c;
  #L18caea.  v10:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18caee.  call temp:= `removeFirstOrNull`(v10) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L18caf4.  v10:= temp @kind object;
  #L18caf6.  v10:= (`kotlinx.coroutines.scheduling.Task`) v10 @kind object;
  #L18cafa.  if v10 != 0 then goto L18cb5c;
  #L18cafe.  if v0 != 0 then goto L18cb04;
  #L18cb02.  goto L18cb0e;
  #L18cb04.  v10:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18cb08.  call temp:= `tryReleaseCpu`(v0, v10) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.tryReleaseCpu:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;)Z` @kind virtual;
  #L18cb0e.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18cb14.  v10:= temp;
  #L18cb16.  if v10 == 0 then goto L18cb4e;
  #L18cb1a.  v10:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L18cb1e.  v3:= 9223367638808264704L;
  #L18cb28.  v10:= v10 ^& v3 @kind long;
  #L18cb2a.  v0:= 42I;
  #L18cb2e.  v10:= v10 ^> v0 @kind long;
  #L18cb30.  v11:= (`int`) v10 @kind l2i;
  #L18cb32.  v10:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18cb36.  if v11 != v10 then goto L18cb3c;
  #L18cb3a.  v1:= 1I;
  #L18cb3c.  if v1 == 0 then goto L18cb42;
  #L18cb40.  goto L18cb4e;
  #L18cb42.  v10:= new `java.lang.AssertionError`;
  #L18cb46.  call `<init>`(v10) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18cb4c.  throw v10;
  #L18cb4e.  v10:= 0L;
  #L18cb52.  v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` := v10 @kind wide;
  #L18cb56.  v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` := v10 @kind wide;
  #L18cb5a.  return @kind void;
  #L18cb5c.  call `runSafely`(v9, v10) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.runSafely:(Lkotlinx/coroutines/scheduling/Task;)V` @kind virtual;
  #L18cb62.  goto L18cac2;
  #L18cb64.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18cb66.  @monitorexit v3
  #L18cb68.  throw v10;
  catch `java.lang.Throwable` @[L18ca18..L18ca1c] goto L18cb64;
}
procedure `void` `signalCpuWork`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v4 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.signalCpuWork:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18cbd4.  call temp:= `j`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L18cbda.  v0:= temp;
  #L18cbdc.  if v0 == 0 then goto L18cbe2;
  #L18cbe0.  return @kind void;
  #L18cbe2.  v0:= 0L;
  #L18cbe6.  v2:= 1I;
  #L18cbe8.  v3:= 0I;
  #L18cbea.  call temp:= `i`(v4, v0, v2, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.i:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;JILjava/lang/Object;)Z` @kind static;
  #L18cbf0.  v0:= temp;
  #L18cbf2.  if v0 == 0 then goto L18cbf8;
  #L18cbf6.  return @kind void;
  #L18cbf8.  call temp:= `j`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L18cbfe.  return @kind void;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v12 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L18c170.  v0:= new `java.util.ArrayList`;
  #L18c174.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L18c17a.  v1:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18c17e.  call temp:= `length`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L18c184.  v1:= temp;
  #L18c186.  v2:= 0I;
  #L18c188.  v3:= 1I;
  #L18c18a.  if v3 >= v1 then goto L18c296;
  #L18c18e.  v4:= 0I;
  #L18c190.  v5:= 0I;
  #L18c192.  v6:= 0I;
  #L18c194.  v7:= 0I;
  #L18c196.  v8:= 1I;
  #L18c198.  v9:= v8 + 1;
  #L18c19c.  v10:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18c1a0.  call temp:= `get`(v10, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L18c1a6.  v8:= temp @kind object;
  #L18c1a8.  v8:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v8 @kind object;
  #L18c1ac.  if v8 != 0 then goto L18c1b2;
  #L18c1b0.  goto L18c288;
  #L18c1b2.  v10:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.localQueue` @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L18c1b6.  call temp:= `getSize$kotlinx_coroutines_core`(v10) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L18c1bc.  v10:= temp;
  #L18c1be.  v8:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L18c1c2.  v11:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L18c1c6.  call temp:= `ordinal`(v8) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L18c1cc.  v8:= temp;
  #L18c1ce.  v8:= v11[v8];
  #L18c1d2.  if v8 == v3 then goto L18c284;
  #L18c1d6.  v11:= 2I;
  #L18c1d8.  if v8 == v11 then goto L18c256;
  #L18c1dc.  v11:= 3I;
  #L18c1de.  if v8 == v11 then goto L18c228;
  #L18c1e2.  v11:= 4I;
  #L18c1e4.  if v8 == v11 then goto L18c1f6;
  #L18c1e8.  v10:= 5I;
  #L18c1ea.  if v8 == v10 then goto L18c1f0;
  #L18c1ee.  goto L18c288;
  #L18c1f0.  v7:= v7 + 1;
  #L18c1f4.  goto L18c288;
  #L18c1f6.  v6:= v6 + 1;
  #L18c1fa.  if v10 <= 0 then goto L18c288;
  #L18c1fe.  v8:= new `java.lang.StringBuilder`;
  #L18c202.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c208.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c20e.  v10:= 100I;
  #L18c212.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c218.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c21e.  v8:= temp @kind object;
  #L18c220.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L18c226.  goto L18c288;
  #L18c228.  v5:= v5 + 1;
  #L18c22c.  v8:= new `java.lang.StringBuilder`;
  #L18c230.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c236.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c23c.  v10:= 99I;
  #L18c240.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c246.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c24c.  v8:= temp @kind object;
  #L18c24e.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L18c254.  goto L18c288;
  #L18c256.  v4:= v4 + 1;
  #L18c25a.  v8:= new `java.lang.StringBuilder`;
  #L18c25e.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c264.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c26a.  v10:= 98I;
  #L18c26e.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c274.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c27a.  v8:= temp @kind object;
  #L18c27c.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L18c282.  goto L18c288;
  #L18c284.  v2:= v2 + 1;
  #L18c288.  if v9 < v1 then goto L18c292;
  #L18c28c.  v1:= v2;
  #L18c28e.  v2:= v5;
  #L18c290.  goto L18c29e;
  #L18c292.  v8:= v9;
  #L18c294.  goto L18c198;
  #L18c296.  v1:= 0I;
  #L18c298.  v4:= 0I;
  #L18c29a.  v6:= 0I;
  #L18c29c.  v7:= 0I;
  #L18c29e.  v8:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L18c2a2.  v3:= new `java.lang.StringBuilder`;
  #L18c2a6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18c2ac.  v5:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @type ^`java.lang.String` @kind object;
  #L18c2b0.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c2b6.  v5:= 64I;
  #L18c2ba.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c2c0.  call temp:= `getHexAddress`(v12) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L18c2c6.  v5:= temp @kind object;
  #L18c2c8.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c2ce.  v5:= "[Pool Size {core = " @kind object;
  #L18c2d2.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c2d8.  v5:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18c2dc.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c2e2.  v5:= ", max = " @kind object;
  #L18c2e6.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c2ec.  v5:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L18c2f0.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c2f6.  v5:= "}, Worker States {CPU = " @kind object;
  #L18c2fa.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c300.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c306.  v2:= ", blocking = " @kind object;
  #L18c30a.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c310.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c316.  v2:= ", parked = " @kind object;
  #L18c31a.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c320.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c326.  v1:= ", dormant = " @kind object;
  #L18c32a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c330.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c336.  v1:= ", terminated = " @kind object;
  #L18c33a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c340.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c346.  v1:= "}, running workers queues = " @kind object;
  #L18c34a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c350.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c356.  v0:= ", global CPU queue size = " @kind object;
  #L18c35a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c360.  v0:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18c364.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.getSize:()I` @kind virtual;
  #L18c36a.  v0:= temp;
  #L18c36c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c372.  v0:= ", global blocking queue size = " @kind object;
  #L18c376.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c37c.  v0:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L18c380.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.getSize:()I` @kind virtual;
  #L18c386.  v0:= temp;
  #L18c388.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c38e.  v0:= ", Control State {created workers= " @kind object;
  #L18c392.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c398.  v0:= 2097151L;
  #L18c39e.  v0:= v0 ^& v8 @kind long;
  #L18c3a0.  v1:= (`int`) v0 @kind l2i;
  #L18c3a2.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c3a8.  v0:= ", blocking tasks = " @kind object;
  #L18c3ac.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c3b2.  v0:= 4398044413952L;
  #L18c3bc.  v0:= v0 ^& v8 @kind long;
  #L18c3be.  v2:= 21I;
  #L18c3c2.  v0:= v0 ^> v2 @kind long;
  #L18c3c4.  v1:= (`int`) v0 @kind l2i;
  #L18c3c6.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c3cc.  v0:= ", CPUs acquired = " @kind object;
  #L18c3d0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c3d6.  v0:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L18c3da.  v1:= 9223367638808264704L;
  #L18c3e4.  v1:= v1 ^& v8 @kind long;
  #L18c3e6.  v4:= 42I;
  #L18c3ea.  v1:= v1 ^> v4 @kind long;
  #L18c3ec.  v2:= (`int`) v1 @kind l2i;
  #L18c3ee.  v0:= v0 - v2 @kind int;
  #L18c3f0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c3f6.  v0:= "}]" @kind object;
  #L18c3fa.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18c400.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18c406.  v0:= temp @kind object;
  #L18c408.  return v0 @kind object;
}
