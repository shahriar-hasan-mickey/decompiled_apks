record `kotlinx.coroutines.scheduling.TasksKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.BLOCKING_DEFAULT_PARALLELISM` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.scheduling.TasksKt.DEFAULT_DISPATCHER_NAME` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.scheduling.TasksKt.DEFAULT_SCHEDULER_NAME` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.TASK_NON_BLOCKING` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.TASK_PROBABLY_BLOCKING` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.scheduling.SchedulerTimeSource` `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/TasksKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L18d5c0.  v0:= "kotlinx.coroutines.scheduler.resolution.ns" @kind object;
  #L18d5c4.  v1:= 100000L;
  #L18d5ca.  v3:= 0L;
  #L18d5ce.  v5:= 0L;
  #L18d5d2.  v7:= 12I;
  #L18d5d6.  v8:= 0I;
  #L18d5d8.  call temp:= `systemProp$default`(v0, v1, v3, v5, v7, v8) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;JJJILjava/lang/Object;)J` @kind static;
  #L18d5de.  v0:= temp @kind wide;
  #L18d5e0.  `@@kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS` @type ^`long` := v0 @kind wide;
  #L18d5e4.  v2:= "kotlinx.coroutines.scheduler.blocking.parallelism" @kind object;
  #L18d5e8.  v3:= 16I;
  #L18d5ec.  v4:= 0I;
  #L18d5ee.  v5:= 0I;
  #L18d5f0.  v6:= 12I;
  #L18d5f4.  v7:= 0I;
  #L18d5f6.  call temp:= `systemProp$default`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L18d5fc.  v0:= temp;
  #L18d5fe.  `@@kotlinx.coroutines.scheduling.TasksKt.BLOCKING_DEFAULT_PARALLELISM` @type ^`int` := v0;
  #L18d602.  call temp:= `getAVAILABLE_PROCESSORS`() @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.getAVAILABLE_PROCESSORS:()I` @kind static;
  #L18d608.  v0:= temp;
  #L18d60a.  v1:= 2I;
  #L18d60c.  call temp:= `coerceAtLeast`(v0, v1) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L18d612.  v3:= temp;
  #L18d614.  v2:= "kotlinx.coroutines.scheduler.core.pool.size" @kind object;
  #L18d618.  v4:= 1I;
  #L18d61a.  v6:= 8I;
  #L18d61e.  call temp:= `systemProp$default`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L18d624.  v0:= temp;
  #L18d626.  `@@kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE` @type ^`int` := v0;
  #L18d62a.  call temp:= `getAVAILABLE_PROCESSORS`() @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.getAVAILABLE_PROCESSORS:()I` @kind static;
  #L18d630.  v0:= temp;
  #L18d632.  v0:= v0 * 128;
  #L18d636.  v1:= `@@kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE` @type ^`int`;
  #L18d63a.  v2:= 2097150I;
  #L18d640.  call temp:= `coerceIn`(v0, v1, v2) @signature `Lkotlin/ranges/RangesKt;.coerceIn:(III)I` @kind static;
  #L18d646.  v4:= temp;
  #L18d648.  v3:= "kotlinx.coroutines.scheduler.max.pool.size" @kind object;
  #L18d64c.  v6:= 2097150I;
  #L18d652.  v7:= 4I;
  #L18d654.  call temp:= `systemProp$default`(v3, v4, v5, v6, v7, v8) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L18d65a.  v0:= temp;
  #L18d65c.  `@@kotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE` @type ^`int` := v0;
  #L18d660.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L18d664.  v1:= "kotlinx.coroutines.scheduler.keep.alive.sec" @kind object;
  #L18d668.  v2:= 60L;
  #L18d66c.  v4:= 0L;
  #L18d670.  v6:= 0L;
  #L18d674.  v8:= 12I;
  #L18d678.  v9:= 0I;
  #L18d67a.  call temp:= `systemProp$default`(v1, v2, v4, v6, v8, v9) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;JJJILjava/lang/Object;)J` @kind static;
  #L18d680.  v1:= temp @kind wide;
  #L18d682.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L18d688.  v0:= temp @kind wide;
  #L18d68a.  `@@kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS` @type ^`long` := v0 @kind wide;
  #L18d68e.  v0:= `@@kotlinx.coroutines.scheduling.NanoTimeSource.INSTANCE` @type ^`kotlinx.coroutines.scheduling.NanoTimeSource` @kind object;
  #L18d692.  `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @type ^`kotlinx.coroutines.scheduling.SchedulerTimeSource` := v0 @kind object;
  #L18d696.  return @kind void;
}
procedure `boolean` `isBlocking`(`kotlinx.coroutines.scheduling.Task` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/TasksKt;.isBlocking:(Lkotlinx/coroutines/scheduling/Task;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L18d598.  v1:= v1.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18d59c.  call temp:= `getTaskMode`(v1) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18d5a2.  v1:= temp;
  #L18d5a4.  v0:= 1I;
  #L18d5a6.  if v1 != v0 then goto L18d5ac;
  #L18d5aa.  goto L18d5ae;
  #L18d5ac.  v0:= 0I;
  #L18d5ae.  return v0;
}
