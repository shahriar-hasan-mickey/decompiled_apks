record `kotlinx.coroutines.scheduling.WorkQueue` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.scheduling.WorkQueue.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L18daac.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L18dab0.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L18dab4.  v2:= "lastScheduledTask" @kind object;
  #L18dab8.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L18dabe.  v1:= temp @kind object;
  #L18dac0.  `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L18dac4.  v1:= "producerIndex" @kind object;
  #L18dac8.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L18dace.  v1:= temp @kind object;
  #L18dad0.  `@@kotlinx.coroutines.scheduling.WorkQueue.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L18dad4.  v1:= "consumerIndex" @kind object;
  #L18dad8.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L18dade.  v1:= temp @kind object;
  #L18dae0.  `@@kotlinx.coroutines.scheduling.WorkQueue.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L18dae4.  v1:= "blockingTasksInBuffer" @kind object;
  #L18dae8.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L18daee.  v0:= temp @kind object;
  #L18daf0.  `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L18daf4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L18db08.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18db0e.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L18db12.  v1:= 128I;
  #L18db16.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L18db1c.  v2.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L18db20.  v0:= 0I;
  #L18db22.  v2.`kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @type ^`java.lang.Object` := v0 @kind object;
  #L18db26.  v0:= 0I;
  #L18db28.  v2.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int` := v0;
  #L18db2c.  v2.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int` := v0;
  #L18db30.  v2.`kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer` @type ^`int` := v0;
  #L18db34.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `a`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this, `kotlinx.coroutines.scheduling.Task` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.a:(Lkotlinx/coroutines/scheduling/Task;)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L18d7c4.  v0:= v3.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18d7c8.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18d7ce.  v0:= temp;
  #L18d7d0.  v1:= 1I;
  #L18d7d2.  if v0 != v1 then goto L18d7d8;
  #L18d7d6.  goto L18d7da;
  #L18d7d8.  v1:= 0I;
  #L18d7da.  if v1 == 0 then goto L18d7e8;
  #L18d7de.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18d7e2.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L18d7e8.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L18d7ee.  v0:= temp;
  #L18d7f0.  v1:= 127I;
  #L18d7f4.  if v0 != v1 then goto L18d7fa;
  #L18d7f8.  return v3 @kind object;
  #L18d7fa.  v0:= v2.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L18d7fe.  v0:= v0 ^& v1 @kind int;
  #L18d800.  v1:= v2.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18d804.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L18d80a.  v1:= temp @kind object;
  #L18d80c.  if v1 == 0 then goto L18d818;
  #L18d810.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L18d816.  goto L18d800;
  #L18d818.  v1:= v2.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18d81c.  call `lazySet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L18d822.  v3:= `@@kotlinx.coroutines.scheduling.WorkQueue.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18d826.  call temp:= `incrementAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L18d82c.  v3:= 0I;
  #L18d82e.  return v3 @kind object;
}
procedure `kotlinx.coroutines.scheduling.Task` `add$default`(`kotlinx.coroutines.scheduling.WorkQueue` v0 @kind object, `kotlinx.coroutines.scheduling.Task` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L18d760.  v3:= v3 ^& 2;
  #L18d764.  if v3 == 0 then goto L18d76a;
  #L18d768.  v2:= 0I;
  #L18d76a.  call temp:= `add`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add:(Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L18d770.  v0:= temp @kind object;
  #L18d772.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.scheduling.WorkQueue` v3 @kind this, `kotlinx.coroutines.scheduling.Task` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.b:(Lkotlinx/coroutines/scheduling/Task;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L18db48.  if v4 == 0 then goto L18db9a;
  #L18db4c.  v4:= v4.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18db50.  call temp:= `getTaskMode`(v4) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18db56.  v4:= temp;
  #L18db58.  v0:= 0I;
  #L18db5a.  v1:= 1I;
  #L18db5c.  if v4 != v1 then goto L18db64;
  #L18db60.  v4:= 1I;
  #L18db62.  goto L18db66;
  #L18db64.  v4:= 0I;
  #L18db66.  if v4 == 0 then goto L18db9a;
  #L18db6a.  v4:= `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18db6e.  call temp:= `decrementAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L18db74.  v4:= temp;
  #L18db76.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18db7c.  v2:= temp;
  #L18db7e.  if v2 == 0 then goto L18db9a;
  #L18db82.  if v4 < 0 then goto L18db88;
  #L18db86.  v0:= 1I;
  #L18db88.  if v0 == 0 then goto L18db8e;
  #L18db8c.  goto L18db9a;
  #L18db8e.  v4:= new `java.lang.AssertionError`;
  #L18db92.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18db98.  throw v4;
  #L18db9a.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `c`(`kotlinx.coroutines.scheduling.WorkQueue` v5 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L18d870.  v0:= v5.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int`;
  #L18d874.  v1:= v5.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L18d878.  v1:= v0 - v1 @kind int;
  #L18d87c.  v2:= 0I;
  #L18d87e.  if v1 != 0 then goto L18d884;
  #L18d882.  return v2 @kind object;
  #L18d884.  v1:= v0 ^& 127;
  #L18d888.  v3:= `@@kotlinx.coroutines.scheduling.WorkQueue.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18d88c.  v4:= v0 + 1;
  #L18d890.  call temp:= `compareAndSet`(v3, v5, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L18d896.  v0:= temp;
  #L18d898.  if v0 == 0 then goto L18d870;
  #L18d89c.  v0:= v5.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18d8a0.  call temp:= `getAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18d8a6.  v0:= temp @kind object;
  #L18d8a8.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L18d8ac.  if v0 != 0 then goto L18d8b2;
  #L18d8b0.  goto L18d870;
  #L18d8b2.  call `b`(v5, v0) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.b:(Lkotlinx/coroutines/scheduling/Task;)V` @kind direct;
  #L18d8b8.  return v0 @kind object;
}
procedure `boolean` `d`(`kotlinx.coroutines.scheduling.WorkQueue` v1 @kind this, `kotlinx.coroutines.scheduling.GlobalQueue` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.d:(Lkotlinx/coroutines/scheduling/GlobalQueue;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L18d6e8.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L18d6ee.  v0:= temp @kind object;
  #L18d6f0.  if v0 != 0 then goto L18d6f8;
  #L18d6f4.  v2:= 0I;
  #L18d6f6.  return v2;
  #L18d6f8.  call temp:= `addLast`(v2, v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L18d6fe.  v2:= 1I;
  #L18d700.  return v2;
}
procedure `long` `e`(`kotlinx.coroutines.scheduling.WorkQueue` v7 @kind this, `kotlinx.coroutines.scheduling.WorkQueue` v8 @kind object, `boolean` v9 ) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.e:(Lkotlinx/coroutines/scheduling/WorkQueue;Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L18da24.  v0:= v8.`kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L18da28.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L18da2c.  v1:= -2L;
  #L18da30.  if v0 != 0 then goto L18da36;
  #L18da34.  return v1 @kind wide;
  #L18da36.  v3:= 0I;
  #L18da38.  if v9 == 0 then goto L18da58;
  #L18da3c.  v4:= v0.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18da40.  call temp:= `getTaskMode`(v4) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18da46.  v4:= temp;
  #L18da48.  v5:= 1I;
  #L18da4a.  if v4 != v5 then goto L18da50;
  #L18da4e.  goto L18da52;
  #L18da50.  v5:= 0I;
  #L18da52.  if v5 != 0 then goto L18da58;
  #L18da56.  return v1 @kind wide;
  #L18da58.  v1:= `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @type ^`kotlinx.coroutines.scheduling.SchedulerTimeSource` @kind object;
  #L18da5c.  call temp:= `nanoTime`(v1) @signature `Lkotlinx/coroutines/scheduling/SchedulerTimeSource;.nanoTime:()J` @kind virtual;
  #L18da62.  v1:= temp @kind wide;
  #L18da64.  v4:= v0.`kotlinx.coroutines.scheduling.Task.submissionTime` @type ^`long` @kind wide;
  #L18da68.  v1:= v1 - v4 @kind long;
  #L18da6a.  v4:= `@@kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS` @type ^`long` @kind wide;
  #L18da6e.  v6:= lcmp(v1, v4);
  #L18da72.  if v6 >= 0 then goto L18da7a;
  #L18da76.  v4:= v4 - v1 @kind long;
  #L18da78.  return v4 @kind wide;
  #L18da7a.  v1:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18da7e.  v2:= 0I;
  #L18da80.  call temp:= `compareAndSet`(v1, v8, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18da86.  v1:= temp;
  #L18da88.  if v1 == 0 then goto L18da24;
  #L18da8c.  v8:= 2I;
  #L18da8e.  call temp:= `add$default`(v7, v0, v3, v8, v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @kind static;
  #L18da94.  v8:= -1L;
  #L18da98.  return v8 @kind wide;
}
procedure `kotlinx.coroutines.scheduling.Task` `add`(`kotlinx.coroutines.scheduling.WorkQueue` v0 @kind this, `kotlinx.coroutines.scheduling.Task` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add:(Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L18d784.  if v2 == 0 then goto L18d792;
  #L18d788.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.a:(Lkotlinx/coroutines/scheduling/Task;)Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L18d78e.  v1:= temp @kind object;
  #L18d790.  return v1 @kind object;
  #L18d792.  v2:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18d796.  call temp:= `getAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18d79c.  v1:= temp @kind object;
  #L18d79e.  v1:= (`kotlinx.coroutines.scheduling.Task`) v1 @kind object;
  #L18d7a2.  if v1 != 0 then goto L18d7aa;
  #L18d7a6.  v1:= 0I;
  #L18d7a8.  return v1 @kind object;
  #L18d7aa.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.a:(Lkotlinx/coroutines/scheduling/Task;)Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L18d7b0.  v1:= temp @kind object;
  #L18d7b2.  return v1 @kind object;
}
procedure `int` `getBufferSize$kotlinx_coroutines_core`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18d714.  v0:= v2.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L18d718.  v1:= v2.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int`;
  #L18d71c.  v0:= v0 - v1 @kind int;
  #L18d71e.  return v0;
}
procedure `int` `getSize$kotlinx_coroutines_core`(`kotlinx.coroutines.scheduling.WorkQueue` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getSize$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L18d730.  v0:= v1.`kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L18d734.  if v0 == 0 then goto L18d746;
  #L18d738.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L18d73e.  v0:= temp;
  #L18d740.  v0:= v0 + 1;
  #L18d744.  goto L18d74e;
  #L18d746.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L18d74c.  v0:= temp;
  #L18d74e.  return v0;
}
procedure `void` `offloadAllWorkTo`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this, `kotlinx.coroutines.scheduling.GlobalQueue` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.offloadAllWorkTo:(Lkotlinx/coroutines/scheduling/GlobalQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18dbac.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18dbb0.  v1:= 0I;
  #L18dbb2.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18dbb8.  v0:= temp @kind object;
  #L18dbba.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L18dbbe.  if v0 != 0 then goto L18dbc4;
  #L18dbc2.  goto L18dbca;
  #L18dbc4.  call temp:= `addLast`(v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L18dbca.  call temp:= `d`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.d:(Lkotlinx/coroutines/scheduling/GlobalQueue;)Z` @kind direct;
  #L18dbd0.  v0:= temp;
  #L18dbd2.  if v0 == 0 then goto L18dbd8;
  #L18dbd6.  goto L18dbca;
  #L18dbd8.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `poll`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.poll:()Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L18d840.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L18d844.  v1:= 0I;
  #L18d846.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L18d84c.  v0:= temp @kind object;
  #L18d84e.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L18d852.  if v0 != 0 then goto L18d85e;
  #L18d856.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L18d85c.  v0:= temp @kind object;
  #L18d85e.  return v0 @kind object;
}
procedure `long` `tryStealBlockingFrom`(`kotlinx.coroutines.scheduling.WorkQueue` v8 @kind this, `kotlinx.coroutines.scheduling.WorkQueue` v9 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.tryStealBlockingFrom:(Lkotlinx/coroutines/scheduling/WorkQueue;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L18d8cc.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18d8d2.  v0:= temp;
  #L18d8d4.  v1:= 0I;
  #L18d8d6.  v2:= 1I;
  #L18d8d8.  if v0 == 0 then goto L18d900;
  #L18d8dc.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v8) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L18d8e2.  v0:= temp;
  #L18d8e4.  if v0 != 0 then goto L18d8ec;
  #L18d8e8.  v0:= 1I;
  #L18d8ea.  goto L18d8ee;
  #L18d8ec.  v0:= 0I;
  #L18d8ee.  if v0 == 0 then goto L18d8f4;
  #L18d8f2.  goto L18d900;
  #L18d8f4.  v9:= new `java.lang.AssertionError`;
  #L18d8f8.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18d8fe.  throw v9;
  #L18d900.  v0:= v9.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int`;
  #L18d904.  v3:= v9.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L18d908.  v4:= v9.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L18d90c.  if v0 == v3 then goto L18d974;
  #L18d910.  v5:= v0 ^& 127;
  #L18d914.  v6:= v9.`kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer` @type ^`int`;
  #L18d918.  if v6 != 0 then goto L18d91e;
  #L18d91c.  goto L18d974;
  #L18d91e.  call temp:= `get`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L18d924.  v6:= temp @kind object;
  #L18d926.  v6:= (`kotlinx.coroutines.scheduling.Task`) v6 @kind object;
  #L18d92a.  if v6 == 0 then goto L18d96e;
  #L18d92e.  v7:= v6.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L18d932.  call temp:= `getTaskMode`(v7) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L18d938.  v7:= temp;
  #L18d93a.  if v7 != v2 then goto L18d942;
  #L18d93e.  v7:= 1I;
  #L18d940.  goto L18d944;
  #L18d942.  v7:= 0I;
  #L18d944.  if v7 == 0 then goto L18d96e;
  #L18d948.  v7:= 0I;
  #L18d94a.  call temp:= `compareAndSet`(v4, v5, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L18d950.  v5:= temp;
  #L18d952.  if v5 == 0 then goto L18d96e;
  #L18d956.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L18d95a.  call temp:= `decrementAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L18d960.  v9:= 2I;
  #L18d962.  call temp:= `add$default`(v8, v6, v1, v9, v7) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @kind static;
  #L18d968.  v0:= -1L;
  #L18d96c.  return v0 @kind wide;
  #L18d96e.  v0:= v0 + 1;
  #L18d972.  goto L18d90c;
  #L18d974.  call temp:= `e`(v8, v9, v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.e:(Lkotlinx/coroutines/scheduling/WorkQueue;Z)J` @kind direct;
  #L18d97a.  v0:= temp @kind wide;
  #L18d97c.  return v0 @kind wide;
}
procedure `long` `tryStealFrom`(`kotlinx.coroutines.scheduling.WorkQueue` v4 @kind this, `kotlinx.coroutines.scheduling.WorkQueue` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.tryStealFrom:(Lkotlinx/coroutines/scheduling/WorkQueue;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18d990.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18d996.  v0:= temp;
  #L18d998.  v1:= 1I;
  #L18d99a.  v2:= 0I;
  #L18d99c.  if v0 == 0 then goto L18d9c4;
  #L18d9a0.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v4) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L18d9a6.  v0:= temp;
  #L18d9a8.  if v0 != 0 then goto L18d9b0;
  #L18d9ac.  v0:= 1I;
  #L18d9ae.  goto L18d9b2;
  #L18d9b0.  v0:= 0I;
  #L18d9b2.  if v0 == 0 then goto L18d9b8;
  #L18d9b6.  goto L18d9c4;
  #L18d9b8.  v5:= new `java.lang.AssertionError`;
  #L18d9bc.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18d9c2.  throw v5;
  #L18d9c4.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L18d9ca.  v0:= temp @kind object;
  #L18d9cc.  if v0 == 0 then goto L18da08;
  #L18d9d0.  v5:= 2I;
  #L18d9d2.  v3:= 0I;
  #L18d9d4.  call temp:= `add$default`(v4, v0, v2, v5, v3) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @kind static;
  #L18d9da.  v5:= temp @kind object;
  #L18d9dc.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L18d9e2.  v0:= temp;
  #L18d9e4.  if v0 == 0 then goto L18da02;
  #L18d9e8.  if v5 != 0 then goto L18d9ee;
  #L18d9ec.  goto L18d9f0;
  #L18d9ee.  v1:= 0I;
  #L18d9f0.  if v1 == 0 then goto L18d9f6;
  #L18d9f4.  goto L18da02;
  #L18d9f6.  v5:= new `java.lang.AssertionError`;
  #L18d9fa.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L18da00.  throw v5;
  #L18da02.  v0:= -1L;
  #L18da06.  return v0 @kind wide;
  #L18da08.  call temp:= `e`(v4, v5, v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.e:(Lkotlinx/coroutines/scheduling/WorkQueue;Z)J` @kind direct;
  #L18da0e.  v0:= temp @kind wide;
  #L18da10.  return v0 @kind wide;
}
