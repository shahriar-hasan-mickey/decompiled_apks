record `kotlinx.coroutines.scheduling.NonBlockingContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.scheduling.TaskContext` @kind interface {
}
global `kotlinx.coroutines.scheduling.NonBlockingContext` `@@kotlinx.coroutines.scheduling.NonBlockingContext.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.NonBlockingContext.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/NonBlockingContext;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L18d42c.  v0:= new `kotlinx.coroutines.scheduling.NonBlockingContext`;
  #L18d430.  call `<init>`(v0) @signature `Lkotlinx/coroutines/scheduling/NonBlockingContext;.<init>:()V` @kind direct;
  #L18d436.  `@@kotlinx.coroutines.scheduling.NonBlockingContext.INSTANCE` @type ^`kotlinx.coroutines.scheduling.NonBlockingContext` := v0 @kind object;
  #L18d43a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.NonBlockingContext` v0 @kind this) @signature `Lkotlinx/coroutines/scheduling/NonBlockingContext;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L18d44c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L18d452.  return @kind void;
}
procedure `void` `afterTask`(`kotlinx.coroutines.scheduling.NonBlockingContext` v0 @kind this) @signature `Lkotlinx/coroutines/scheduling/NonBlockingContext;.afterTask:()V` @AccessFlag PUBLIC {
    temp;

  #L18d464.  return @kind void;
}
procedure `int` `getTaskMode`(`kotlinx.coroutines.scheduling.NonBlockingContext` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/NonBlockingContext;.getTaskMode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18d414.  v0:= `@@kotlinx.coroutines.scheduling.NonBlockingContext.a` @type ^`int`;
  #L18d418.  return v0;
}
