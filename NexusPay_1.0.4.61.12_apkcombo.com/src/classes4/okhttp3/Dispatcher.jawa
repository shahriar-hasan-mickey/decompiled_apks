record `okhttp3.Dispatcher` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.Dispatcher.a` @AccessFlag PRIVATE;
  `int` `okhttp3.Dispatcher.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `okhttp3.Dispatcher.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `okhttp3.Dispatcher.d` @AccessFlag PRIVATE;
  `java.util.ArrayDeque` `okhttp3.Dispatcher.e` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `okhttp3.Dispatcher.f` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `okhttp3.Dispatcher.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19a210.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19a216.  v0:= 64I;
  #L19a21a.  v1.`okhttp3.Dispatcher.a` @type ^`int` := v0;
  #L19a21e.  v0:= 5I;
  #L19a220.  v1.`okhttp3.Dispatcher.b` @type ^`int` := v0;
  #L19a224.  v0:= new `java.util.ArrayDeque`;
  #L19a228.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L19a22e.  v1.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L19a232.  v0:= new `java.util.ArrayDeque`;
  #L19a236.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L19a23c.  v1.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L19a240.  v0:= new `java.util.ArrayDeque`;
  #L19a244.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L19a24a.  v1.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L19a24e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Dispatcher` v1 @kind this, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lokhttp3/Dispatcher;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19a260.  v0:= "executorService" @kind object;
  #L19a264.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19a26a.  call `<init>`(v1) @signature `Lokhttp3/Dispatcher;.<init>:()V` @kind direct;
  #L19a270.  v1.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L19a274.  return @kind void;
}
procedure `okhttp3.internal.connection.RealCall$AsyncCall` `a`(`okhttp3.Dispatcher` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/Dispatcher;.a:(Ljava/lang/String;)Lokhttp3/internal/connection/RealCall$AsyncCall;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L19a188.  v0:= v3.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L19a18c.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L19a192.  v0:= temp @kind object;
  #L19a194.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a19a.  v1:= temp;
  #L19a19c.  if v1 == 0 then goto L19a1c2;
  #L19a1a0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a1a6.  v1:= temp @kind object;
  #L19a1a8.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L19a1ac.  call temp:= `getHost`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getHost:()Ljava/lang/String;` @kind virtual;
  #L19a1b2.  v2:= temp @kind object;
  #L19a1b4.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L19a1ba.  v2:= temp;
  #L19a1bc.  if v2 == 0 then goto L19a194;
  #L19a1c0.  return v1 @kind object;
  #L19a1c2.  v0:= v3.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L19a1c6.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L19a1cc.  v0:= temp @kind object;
  #L19a1ce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a1d4.  v1:= temp;
  #L19a1d6.  if v1 == 0 then goto L19a1fc;
  #L19a1da.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a1e0.  v1:= temp @kind object;
  #L19a1e2.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L19a1e6.  call temp:= `getHost`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getHost:()Ljava/lang/String;` @kind virtual;
  #L19a1ec.  v2:= temp @kind object;
  #L19a1ee.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L19a1f4.  v2:= temp;
  #L19a1f6.  if v2 == 0 then goto L19a1ce;
  #L19a1fa.  return v1 @kind object;
  #L19a1fc.  v4:= 0I;
  #L19a1fe.  return v4 @kind object;
}
procedure `void` `b`(`okhttp3.Dispatcher` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/Dispatcher;.b:(Ljava/util/Deque;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L19a450.  @monitorenter v0
  #L19a452.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L19a458.  v1:= temp;
  #L19a45a.  if v1 == 0 then goto L19a480;
  #L19a45e.  v1:= v0.`okhttp3.Dispatcher.c` @type ^`java.lang.Runnable` @kind object;
  #L19a462.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L19a466.  @monitorexit v0
  #L19a468.  call temp:= `c`(v0) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L19a46e.  v2:= temp;
  #L19a470.  if v2 != 0 then goto L19a47e;
  #L19a474.  if v1 == 0 then goto L19a47e;
  #L19a478.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L19a47e.  return @kind void;
  #L19a480.  v1:= new `java.lang.AssertionError`;
  #L19a484.  v2:= "Call wasn't in-flight!" @kind object;
  #L19a488.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L19a48e.  throw v1;
  #L19a490.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a492.  @monitorexit v0
  #L19a494.  throw v1;
  catch `java.lang.Throwable` @[L19a452..L19a466] goto L19a490;
  catch `java.lang.Throwable` @[L19a480..L19a490] goto L19a490;
}
procedure `boolean` `c`(`okhttp3.Dispatcher` v6 @kind this) @signature `Lokhttp3/Dispatcher;.c:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L199d54.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L199d58.  if v0 == 0 then goto L199dc2;
  #L199d5c.  call temp:= `holdsLock`(v6) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L199d62.  v0:= temp;
  #L199d64.  if v0 != 0 then goto L199d6a;
  #L199d68.  goto L199dc2;
  #L199d6a.  v0:= new `java.lang.AssertionError`;
  #L199d6e.  v1:= new `java.lang.StringBuilder`;
  #L199d72.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L199d78.  v2:= "Thread " @kind object;
  #L199d7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199d82.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L199d88.  v2:= temp @kind object;
  #L199d8a.  v3:= "Thread.currentThread()" @kind object;
  #L199d8e.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L199d94.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L199d9a.  v2:= temp @kind object;
  #L199d9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199da2.  v2:= " MUST NOT hold lock on " @kind object;
  #L199da6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199dac.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199db2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L199db8.  v1:= temp @kind object;
  #L199dba.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L199dc0.  throw v0;
  #L199dc2.  v0:= new `java.util.ArrayList`;
  #L199dc6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L199dcc.  @monitorenter v6
  #L199dce.  v1:= v6.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L199dd2.  call temp:= `iterator`(v1) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L199dd8.  v1:= temp @kind object;
  #L199dda.  v2:= "readyAsyncCalls.iterator()" @kind object;
  #L199dde.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L199de4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L199dea.  v2:= temp;
  #L199dec.  if v2 == 0 then goto L199e5c;
  #L199df0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L199df6.  v2:= temp @kind object;
  #L199df8.  v2:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v2 @kind object;
  #L199dfc.  v3:= v6.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L199e00.  call temp:= `size`(v3) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L199e06.  v3:= temp;
  #L199e08.  v4:= v6.`okhttp3.Dispatcher.a` @type ^`int`;
  #L199e0c.  if v3 < v4 then goto L199e12;
  #L199e10.  goto L199e5c;
  #L199e12.  call temp:= `getCallsPerHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCallsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L199e18.  v3:= temp @kind object;
  #L199e1a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L199e20.  v3:= temp;
  #L199e22.  v4:= v6.`okhttp3.Dispatcher.b` @type ^`int`;
  #L199e26.  if v3 < v4 then goto L199e2c;
  #L199e2a.  goto L199de4;
  #L199e2c.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L199e32.  call temp:= `getCallsPerHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCallsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L199e38.  v3:= temp @kind object;
  #L199e3a.  call temp:= `incrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L199e40.  v3:= "asyncCall" @kind object;
  #L199e44.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L199e4a.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L199e50.  v3:= v6.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L199e54.  call temp:= `add`(v3, v2) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L199e5a.  goto L199de4;
  #L199e5c.  call temp:= `runningCallsCount`(v6) @signature `Lokhttp3/Dispatcher;.runningCallsCount:()I` @kind virtual;
  #L199e62.  v1:= temp;
  #L199e64.  v2:= 0I;
  #L199e66.  if v1 <= 0 then goto L199e6e;
  #L199e6a.  v1:= 1I;
  #L199e6c.  goto L199e70;
  #L199e6e.  v1:= 0I;
  #L199e70.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L199e74.  @monitorexit v6
  #L199e76.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L199e7c.  v3:= temp;
  #L199e7e.  if v2 >= v3 then goto L199ea2;
  #L199e82.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L199e88.  v4:= temp @kind object;
  #L199e8a.  v4:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v4 @kind object;
  #L199e8e.  call temp:= `executorService`(v6) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L199e94.  v5:= temp @kind object;
  #L199e96.  call `executeOn`(v4, v5) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.executeOn:(Ljava/util/concurrent/ExecutorService;)V` @kind virtual;
  #L199e9c.  v2:= v2 + 1;
  #L199ea0.  goto L199e7e;
  #L199ea2.  return v1;
  #L199ea4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L199ea6.  @monitorexit v6
  #L199ea8.  throw v0;
  catch `java.lang.Throwable` @[L199dce..L199e74] goto L199ea4;
}
procedure `java.util.concurrent.ExecutorService` `-deprecated_executorService`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.-deprecated_executorService:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L19a0d8.  call temp:= `executorService`(v1) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L19a0de.  v0:= temp @kind object;
  #L19a0e0.  return v0 @kind object;
}
procedure `void` `cancelAll`(`okhttp3.Dispatcher` v2 @kind this) @signature `Lokhttp3/Dispatcher;.cancelAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L19a288.  @monitorenter v2
  #L19a28a.  v0:= v2.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L19a28e.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L19a294.  v0:= temp @kind object;
  #L19a296.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a29c.  v1:= temp;
  #L19a29e.  if v1 == 0 then goto L19a2be;
  #L19a2a2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a2a8.  v1:= temp @kind object;
  #L19a2aa.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L19a2ae.  call temp:= `getCall`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L19a2b4.  v1:= temp @kind object;
  #L19a2b6.  call `cancel`(v1) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @kind virtual;
  #L19a2bc.  goto L19a296;
  #L19a2be.  v0:= v2.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L19a2c2.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L19a2c8.  v0:= temp @kind object;
  #L19a2ca.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a2d0.  v1:= temp;
  #L19a2d2.  if v1 == 0 then goto L19a2f2;
  #L19a2d6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a2dc.  v1:= temp @kind object;
  #L19a2de.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L19a2e2.  call temp:= `getCall`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L19a2e8.  v1:= temp @kind object;
  #L19a2ea.  call `cancel`(v1) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @kind virtual;
  #L19a2f0.  goto L19a2ca;
  #L19a2f2.  v0:= v2.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L19a2f6.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L19a2fc.  v0:= temp @kind object;
  #L19a2fe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a304.  v1:= temp;
  #L19a306.  if v1 == 0 then goto L19a31e;
  #L19a30a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a310.  v1:= temp @kind object;
  #L19a312.  v1:= (`okhttp3.internal.connection.RealCall`) v1 @kind object;
  #L19a316.  call `cancel`(v1) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @kind virtual;
  #L19a31c.  goto L19a2fe;
  #L19a31e.  @monitorexit v2
  #L19a320.  return @kind void;
  #L19a322.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a324.  @monitorexit v2
  #L19a326.  throw v0;
  catch `java.lang.Throwable` @[L19a28a..L19a31c] goto L19a322;
}
procedure `void` `enqueue$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall$AsyncCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.enqueue$okhttp:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L19a344.  v0:= "call" @kind object;
  #L19a348.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19a34e.  @monitorenter v1
  #L19a350.  v0:= v1.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L19a354.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L19a35a.  call temp:= `getCall`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L19a360.  v0:= temp @kind object;
  #L19a362.  call temp:= `getForWebSocket`(v0) @signature `Lokhttp3/internal/connection/RealCall;.getForWebSocket:()Z` @kind virtual;
  #L19a368.  v0:= temp;
  #L19a36a.  if v0 != 0 then goto L19a388;
  #L19a36e.  call temp:= `getHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getHost:()Ljava/lang/String;` @kind virtual;
  #L19a374.  v0:= temp @kind object;
  #L19a376.  call temp:= `a`(v1, v0) @signature `Lokhttp3/Dispatcher;.a:(Ljava/lang/String;)Lokhttp3/internal/connection/RealCall$AsyncCall;` @kind direct;
  #L19a37c.  v0:= temp @kind object;
  #L19a37e.  if v0 == 0 then goto L19a388;
  #L19a382.  call `reuseCallsPerHostFrom`(v2, v0) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.reuseCallsPerHostFrom:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @kind virtual;
  #L19a388.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L19a38c.  @monitorexit v1
  #L19a38e.  call temp:= `c`(v1) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L19a394.  return @kind void;
  #L19a396.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a398.  @monitorexit v1
  #L19a39a.  throw v2;
  catch `java.lang.Throwable` @[L19a350..L19a38c] goto L19a396;
}
procedure `void` `executed$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.executed$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L19a3b8.  @monitorenter v1
  #L19a3ba.  v0:= "call" @kind object;
  #L19a3be.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19a3c4.  v0:= v1.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L19a3c8.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L19a3ce.  @monitorexit v1
  #L19a3d0.  return @kind void;
  #L19a3d2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a3d4.  @monitorexit v1
  #L19a3d6.  throw v2;
  catch `java.lang.Throwable` @[L19a3ba..L19a3ce] goto L19a3d2;
}
procedure `java.util.concurrent.ExecutorService` `executorService`(`okhttp3.Dispatcher` v9 @kind this) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L19a0f4.  @monitorenter v9
  #L19a0f6.  v0:= v9.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L19a0fa.  if v0 != 0 then goto L19a158;
  #L19a0fe.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L19a102.  v2:= 0I;
  #L19a104.  v3:= 2147483647I;
  #L19a10a.  v4:= 60L;
  #L19a10e.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L19a112.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L19a116.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L19a11c.  v1:= new `java.lang.StringBuilder`;
  #L19a120.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19a126.  v8:= `@@okhttp3.internal.Util.okHttpName` @type ^`java.lang.String` @kind object;
  #L19a12a.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a130.  v8:= " Dispatcher" @kind object;
  #L19a134.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a13a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a140.  v1:= temp @kind object;
  #L19a142.  v8:= 0I;
  #L19a144.  call temp:= `threadFactory`(v1, v8) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L19a14a.  v8:= temp @kind object;
  #L19a14c.  v1:= v0 @kind object;
  #L19a14e.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L19a154.  v9.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L19a158.  v0:= v9.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L19a15c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L19a162.  @monitorexit v9
  #L19a164.  return v0 @kind object;
  #L19a166.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a168.  @monitorexit v9
  #L19a16a.  throw v0;
  catch `java.lang.Throwable` @[L19a0f6..L19a162] goto L19a166;
}
procedure `void` `finished$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall$AsyncCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L19a3f4.  v0:= "call" @kind object;
  #L19a3f8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19a3fe.  call temp:= `getCallsPerHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCallsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L19a404.  v0:= temp @kind object;
  #L19a406.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L19a40c.  v0:= v1.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L19a410.  call `b`(v1, v0, v2) @signature `Lokhttp3/Dispatcher;.b:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L19a416.  return @kind void;
}
procedure `void` `finished$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L19a428.  v0:= "call" @kind object;
  #L19a42c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19a432.  v0:= v1.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L19a436.  call `b`(v1, v0, v2) @signature `Lokhttp3/Dispatcher;.b:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L19a43c.  return @kind void;
}
procedure `java.lang.Runnable` `getIdleCallback`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getIdleCallback:()Ljava/lang/Runnable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L199f98.  @monitorenter v1
  #L199f9a.  v0:= v1.`okhttp3.Dispatcher.c` @type ^`java.lang.Runnable` @kind object;
  #L199f9e.  @monitorexit v1
  #L199fa0.  return v0 @kind object;
  #L199fa2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L199fa4.  @monitorexit v1
  #L199fa6.  throw v0;
  catch `java.lang.Throwable` @[L199f9a..L199f9e] goto L199fa2;
}
procedure `int` `getMaxRequests`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getMaxRequests:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L199ec8.  @monitorenter v1
  #L199eca.  v0:= v1.`okhttp3.Dispatcher.a` @type ^`int`;
  #L199ece.  @monitorexit v1
  #L199ed0.  return v0;
  #L199ed2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L199ed4.  @monitorexit v1
  #L199ed6.  throw v0;
  catch `java.lang.Throwable` @[L199eca..L199ece] goto L199ed2;
}
procedure `int` `getMaxRequestsPerHost`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getMaxRequestsPerHost:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L199ef4.  @monitorenter v1
  #L199ef6.  v0:= v1.`okhttp3.Dispatcher.b` @type ^`int`;
  #L199efa.  @monitorexit v1
  #L199efc.  return v0;
  #L199efe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L199f00.  @monitorexit v1
  #L199f02.  throw v0;
  catch `java.lang.Throwable` @[L199ef6..L199efa] goto L199efe;
}
procedure `java.util.List` `queuedCalls`(`okhttp3.Dispatcher` v3 @kind this) @signature `Lokhttp3/Dispatcher;.queuedCalls:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L199fc4.  @monitorenter v3
  #L199fc6.  v0:= v3.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L199fca.  v1:= new `java.util.ArrayList`;
  #L199fce.  v2:= 10I;
  #L199fd2.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L199fd8.  v2:= temp;
  #L199fda.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L199fe0.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L199fe6.  v0:= temp @kind object;
  #L199fe8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L199fee.  v2:= temp;
  #L199ff0.  if v2 == 0 then goto L19a010;
  #L199ff4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L199ffa.  v2:= temp @kind object;
  #L199ffc.  v2:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v2 @kind object;
  #L19a000.  call temp:= `getCall`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L19a006.  v2:= temp @kind object;
  #L19a008.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19a00e.  goto L199fe8;
  #L19a010.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L19a016.  v0:= temp @kind object;
  #L19a018.  v1:= "Collections.unmodifiable…yncCalls.map { it.call })" @kind object;
  #L19a01c.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19a022.  @monitorexit v3
  #L19a024.  return v0 @kind object;
  #L19a026.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a028.  @monitorexit v3
  #L19a02a.  throw v0;
  catch `java.lang.Throwable` @[L199fc6..L19a022] goto L19a026;
}
procedure `int` `queuedCallsCount`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.queuedCallsCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L199f20.  @monitorenter v1
  #L199f22.  v0:= v1.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L199f26.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L199f2c.  v0:= temp;
  #L199f2e.  @monitorexit v1
  #L199f30.  return v0;
  #L199f32.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L199f34.  @monitorexit v1
  #L199f36.  throw v0;
  catch `java.lang.Throwable` @[L199f22..L199f2e] goto L199f32;
}
procedure `java.util.List` `runningCalls`(`okhttp3.Dispatcher` v4 @kind this) @signature `Lokhttp3/Dispatcher;.runningCalls:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19a048.  @monitorenter v4
  #L19a04a.  v0:= v4.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L19a04e.  v1:= v4.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L19a052.  v2:= new `java.util.ArrayList`;
  #L19a056.  v3:= 10I;
  #L19a05a.  call temp:= `collectionSizeOrDefault`(v1, v3) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L19a060.  v3:= temp;
  #L19a062.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L19a068.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19a06e.  v1:= temp @kind object;
  #L19a070.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a076.  v3:= temp;
  #L19a078.  if v3 == 0 then goto L19a098;
  #L19a07c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a082.  v3:= temp @kind object;
  #L19a084.  v3:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v3 @kind object;
  #L19a088.  call temp:= `getCall`(v3) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L19a08e.  v3:= temp @kind object;
  #L19a090.  call temp:= `add`(v2, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19a096.  goto L19a070;
  #L19a098.  call temp:= `plus`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.plus:(Ljava/util/Collection;Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L19a09e.  v0:= temp @kind object;
  #L19a0a0.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L19a0a6.  v0:= temp @kind object;
  #L19a0a8.  v1:= "Collections.unmodifiable…yncCalls.map { it.call })" @kind object;
  #L19a0ac.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19a0b2.  @monitorexit v4
  #L19a0b4.  return v0 @kind object;
  #L19a0b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a0b8.  @monitorexit v4
  #L19a0ba.  throw v0;
  catch `java.lang.Throwable` @[L19a04a..L19a0b2] goto L19a0b6;
}
procedure `int` `runningCallsCount`(`okhttp3.Dispatcher` v2 @kind this) @signature `Lokhttp3/Dispatcher;.runningCallsCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L199f54.  @monitorenter v2
  #L199f56.  v0:= v2.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L199f5a.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L199f60.  v0:= temp;
  #L199f62.  v1:= v2.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L199f66.  call temp:= `size`(v1) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L199f6c.  v1:= temp;
  #L199f6e.  v0:= v0 + v1 @kind int;
  #L199f70.  @monitorexit v2
  #L199f72.  return v0;
  #L199f74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L199f76.  @monitorexit v2
  #L199f78.  throw v0;
  catch `java.lang.Throwable` @[L199f56..L199f6e] goto L199f74;
}
procedure `void` `setIdleCallback`(`okhttp3.Dispatcher` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lokhttp3/Dispatcher;.setIdleCallback:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L19a4bc.  @monitorenter v0
  #L19a4be.  v0.`okhttp3.Dispatcher.c` @type ^`java.lang.Runnable` := v1 @kind object;
  #L19a4c2.  @monitorexit v0
  #L19a4c4.  return @kind void;
  #L19a4c6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a4c8.  @monitorexit v0
  #L19a4ca.  throw v1;
  catch `java.lang.Throwable` @[L19a4be..L19a4c2] goto L19a4c6;
}
procedure `void` `setMaxRequests`(`okhttp3.Dispatcher` v2 @kind this, `int` v3 ) @signature `Lokhttp3/Dispatcher;.setMaxRequests:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L19a4e8.  v0:= 1I;
  #L19a4ea.  if v3 < v0 then goto L19a4f0;
  #L19a4ee.  goto L19a4f2;
  #L19a4f0.  v0:= 0I;
  #L19a4f2.  if v0 == 0 then goto L19a510;
  #L19a4f6.  @monitorenter v2
  #L19a4f8.  v2.`okhttp3.Dispatcher.a` @type ^`int` := v3;
  #L19a4fc.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L19a500.  @monitorexit v2
  #L19a502.  call temp:= `c`(v2) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L19a508.  return @kind void;
  #L19a50a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a50c.  @monitorexit v2
  #L19a50e.  throw v3;
  #L19a510.  v0:= new `java.lang.StringBuilder`;
  #L19a514.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19a51a.  v1:= "max < 1: " @kind object;
  #L19a51e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a524.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a52a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a530.  v3:= temp @kind object;
  #L19a532.  v0:= new `java.lang.IllegalArgumentException`;
  #L19a536.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a53c.  v3:= temp @kind object;
  #L19a53e.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19a544.  throw v0;
  catch `java.lang.Throwable` @[L19a4f8..L19a500] goto L19a50a;
}
procedure `void` `setMaxRequestsPerHost`(`okhttp3.Dispatcher` v2 @kind this, `int` v3 ) @signature `Lokhttp3/Dispatcher;.setMaxRequestsPerHost:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L19a564.  v0:= 1I;
  #L19a566.  if v3 < v0 then goto L19a56c;
  #L19a56a.  goto L19a56e;
  #L19a56c.  v0:= 0I;
  #L19a56e.  if v0 == 0 then goto L19a58c;
  #L19a572.  @monitorenter v2
  #L19a574.  v2.`okhttp3.Dispatcher.b` @type ^`int` := v3;
  #L19a578.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L19a57c.  @monitorexit v2
  #L19a57e.  call temp:= `c`(v2) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L19a584.  return @kind void;
  #L19a586.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a588.  @monitorexit v2
  #L19a58a.  throw v3;
  #L19a58c.  v0:= new `java.lang.StringBuilder`;
  #L19a590.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19a596.  v1:= "max < 1: " @kind object;
  #L19a59a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a5a0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a5a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a5ac.  v3:= temp @kind object;
  #L19a5ae.  v0:= new `java.lang.IllegalArgumentException`;
  #L19a5b2.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a5b8.  v3:= temp @kind object;
  #L19a5ba.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19a5c0.  throw v0;
  catch `java.lang.Throwable` @[L19a574..L19a57c] goto L19a586;
}
