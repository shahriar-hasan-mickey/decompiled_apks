record `okhttp3.RequestBody$Companion$toRequestBody$2` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.RequestBody` @kind class {
  `byte`[] `okhttp3.RequestBody$Companion$toRequestBody$2.a` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.MediaType` `okhttp3.RequestBody$Companion$toRequestBody$2.b` @AccessFlag FINAL_SYNTHETIC;
  `int` `okhttp3.RequestBody$Companion$toRequestBody$2.c` @AccessFlag FINAL_SYNTHETIC;
  `int` `okhttp3.RequestBody$Companion$toRequestBody$2.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.RequestBody$Companion$toRequestBody$2` v0 @kind this, `byte`[] v1 @kind object, `okhttp3.MediaType` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokhttp3/RequestBody$Companion$toRequestBody$2;.<init>:([BLokhttp3/MediaType;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1a3ae8.  v0.`okhttp3.RequestBody$Companion$toRequestBody$2.a` @type ^`byte`[] := v1 @kind object;
  #L1a3aec.  v0.`okhttp3.RequestBody$Companion$toRequestBody$2.b` @type ^`okhttp3.MediaType` := v2 @kind object;
  #L1a3af0.  v0.`okhttp3.RequestBody$Companion$toRequestBody$2.c` @type ^`int` := v3;
  #L1a3af4.  v0.`okhttp3.RequestBody$Companion$toRequestBody$2.d` @type ^`int` := v4;
  #L1a3af8.  call `<init>`(v0) @signature `Lokhttp3/RequestBody;.<init>:()V` @kind direct;
  #L1a3afe.  return @kind void;
}
procedure `long` `contentLength`(`okhttp3.RequestBody$Companion$toRequestBody$2` v2 @kind this) @signature `Lokhttp3/RequestBody$Companion$toRequestBody$2;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a3ab8.  v0:= v2.`okhttp3.RequestBody$Companion$toRequestBody$2.c` @type ^`int`;
  #L1a3abc.  v0:= (`long`) v0 @kind i2l;
  #L1a3abe.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`(`okhttp3.RequestBody$Companion$toRequestBody$2` v1 @kind this) @signature `Lokhttp3/RequestBody$Companion$toRequestBody$2;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a3ad0.  v0:= v1.`okhttp3.RequestBody$Companion$toRequestBody$2.b` @type ^`okhttp3.MediaType` @kind object;
  #L1a3ad4.  return v0 @kind object;
}
procedure `void` `writeTo`(`okhttp3.RequestBody$Companion$toRequestBody$2` v3 @kind this, `okio.BufferedSink` v4 @kind object) @signature `Lokhttp3/RequestBody$Companion$toRequestBody$2;.writeTo:(Lokio/BufferedSink;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a3b10.  v0:= "sink" @kind object;
  #L1a3b14.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1a3b1a.  v0:= v3.`okhttp3.RequestBody$Companion$toRequestBody$2.a` @type ^`byte`[] @kind object;
  #L1a3b1e.  v1:= v3.`okhttp3.RequestBody$Companion$toRequestBody$2.d` @type ^`int`;
  #L1a3b22.  v2:= v3.`okhttp3.RequestBody$Companion$toRequestBody$2.c` @type ^`int`;
  #L1a3b26.  call temp:= `write`(v4, v0, v1, v2) @signature `Lokio/BufferedSink;.write:([BII)Lokio/BufferedSink;` @kind interface;
  #L1a3b2c.  return @kind void;
}
