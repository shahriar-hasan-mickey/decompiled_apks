record `okhttp3.logging.LoggingEventListener$Factory` @kind class @AccessFlag PUBLIC extends `okhttp3.EventListener$Factory` @kind interface {
  `okhttp3.logging.HttpLoggingInterceptor$Logger` `okhttp3.logging.LoggingEventListener$Factory.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.logging.LoggingEventListener$Factory` v2 @kind this) @signature `Lokhttp3/logging/LoggingEventListener$Factory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c8054.  v0:= 0I;
  #L1c8056.  v1:= 1I;
  #L1c8058.  call `<init>`(v2, v0, v1, v0) @signature `Lokhttp3/logging/LoggingEventListener$Factory;.<init>:(Lokhttp3/logging/HttpLoggingInterceptor$Logger;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1c805e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.logging.LoggingEventListener$Factory` v1 @kind this, `okhttp3.logging.HttpLoggingInterceptor$Logger` v2 @kind object) @signature `Lokhttp3/logging/LoggingEventListener$Factory;.<init>:(Lokhttp3/logging/HttpLoggingInterceptor$Logger;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c8070.  v0:= "logger" @kind object;
  #L1c8074.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1c807a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c8080.  v1.`okhttp3.logging.LoggingEventListener$Factory.a` @type ^`okhttp3.logging.HttpLoggingInterceptor$Logger` := v2 @kind object;
  #L1c8084.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.logging.LoggingEventListener$Factory` v0 @kind this, `okhttp3.logging.HttpLoggingInterceptor$Logger` v1 @kind object, `int` v2 , `kotlin.jvm.internal.DefaultConstructorMarker` v3 @kind object) @signature `Lokhttp3/logging/LoggingEventListener$Factory;.<init>:(Lokhttp3/logging/HttpLoggingInterceptor$Logger;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1c8098.  v2:= v2 ^& 1;
  #L1c809c.  if v2 == 0 then goto L1c80a4;
  #L1c80a0.  v1:= `@@okhttp3.logging.HttpLoggingInterceptor$Logger.DEFAULT` @type ^`okhttp3.logging.HttpLoggingInterceptor$Logger` @kind object;
  #L1c80a4.  call `<init>`(v0, v1) @signature `Lokhttp3/logging/LoggingEventListener$Factory;.<init>:(Lokhttp3/logging/HttpLoggingInterceptor$Logger;)V` @kind direct;
  #L1c80aa.  return @kind void;
}
procedure `okhttp3.EventListener` `create`(`okhttp3.logging.LoggingEventListener$Factory` v2 @kind this, `okhttp3.Call` v3 @kind object) @signature `Lokhttp3/logging/LoggingEventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c8028.  v0:= "call" @kind object;
  #L1c802c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1c8032.  v3:= new `okhttp3.logging.LoggingEventListener`;
  #L1c8036.  v0:= v2.`okhttp3.logging.LoggingEventListener$Factory.a` @type ^`okhttp3.logging.HttpLoggingInterceptor$Logger` @kind object;
  #L1c803a.  v1:= 0I;
  #L1c803c.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/logging/LoggingEventListener;.<init>:(Lokhttp3/logging/HttpLoggingInterceptor$Logger;Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1c8042.  return v3 @kind object;
}
