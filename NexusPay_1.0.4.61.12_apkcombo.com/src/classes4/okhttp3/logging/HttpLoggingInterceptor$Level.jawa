record `okhttp3.logging.HttpLoggingInterceptor$Level` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `okhttp3.logging.HttpLoggingInterceptor$Level`[] `@@okhttp3.logging.HttpLoggingInterceptor$Level.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.logging.HttpLoggingInterceptor$Level` `@@okhttp3.logging.HttpLoggingInterceptor$Level.BASIC` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.logging.HttpLoggingInterceptor$Level` `@@okhttp3.logging.HttpLoggingInterceptor$Level.BODY` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.logging.HttpLoggingInterceptor$Level` `@@okhttp3.logging.HttpLoggingInterceptor$Level.HEADERS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.logging.HttpLoggingInterceptor$Level` `@@okhttp3.logging.HttpLoggingInterceptor$Level.NONE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c74a4.  v0:= 4I;
  #L1c74a6.  v0:= new `okhttp3.logging.HttpLoggingInterceptor$Level`[v0];
  #L1c74aa.  v1:= new `okhttp3.logging.HttpLoggingInterceptor$Level`;
  #L1c74ae.  v2:= "NONE" @kind object;
  #L1c74b2.  v3:= 0I;
  #L1c74b4.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1c74ba.  `@@okhttp3.logging.HttpLoggingInterceptor$Level.NONE` @type ^`okhttp3.logging.HttpLoggingInterceptor$Level` := v1 @kind object;
  #L1c74be.  v0[v3]:= v1 @kind object;
  #L1c74c2.  v1:= new `okhttp3.logging.HttpLoggingInterceptor$Level`;
  #L1c74c6.  v2:= "BASIC" @kind object;
  #L1c74ca.  v3:= 1I;
  #L1c74cc.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1c74d2.  `@@okhttp3.logging.HttpLoggingInterceptor$Level.BASIC` @type ^`okhttp3.logging.HttpLoggingInterceptor$Level` := v1 @kind object;
  #L1c74d6.  v0[v3]:= v1 @kind object;
  #L1c74da.  v1:= new `okhttp3.logging.HttpLoggingInterceptor$Level`;
  #L1c74de.  v2:= "HEADERS" @kind object;
  #L1c74e2.  v3:= 2I;
  #L1c74e4.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1c74ea.  `@@okhttp3.logging.HttpLoggingInterceptor$Level.HEADERS` @type ^`okhttp3.logging.HttpLoggingInterceptor$Level` := v1 @kind object;
  #L1c74ee.  v0[v3]:= v1 @kind object;
  #L1c74f2.  v1:= new `okhttp3.logging.HttpLoggingInterceptor$Level`;
  #L1c74f6.  v2:= "BODY" @kind object;
  #L1c74fa.  v3:= 3I;
  #L1c74fc.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1c7502.  `@@okhttp3.logging.HttpLoggingInterceptor$Level.BODY` @type ^`okhttp3.logging.HttpLoggingInterceptor$Level` := v1 @kind object;
  #L1c7506.  v0[v3]:= v1 @kind object;
  #L1c750a.  `@@okhttp3.logging.HttpLoggingInterceptor$Level.$VALUES` @type ^`okhttp3.logging.HttpLoggingInterceptor$Level`[] := v0 @kind object;
  #L1c750e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.logging.HttpLoggingInterceptor$Level` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1c7520.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1c7526.  return @kind void;
}
procedure `okhttp3.logging.HttpLoggingInterceptor$Level` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.valueOf:(Ljava/lang/String;)Lokhttp3/logging/HttpLoggingInterceptor$Level;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c745c.  v0:= constclass @type ^`okhttp3.logging.HttpLoggingInterceptor$Level` @kind object;
  #L1c7460.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L1c7466.  v1:= temp @kind object;
  #L1c7468.  v1:= (`okhttp3.logging.HttpLoggingInterceptor$Level`) v1 @kind object;
  #L1c746c.  return v1 @kind object;
}
procedure `okhttp3.logging.HttpLoggingInterceptor$Level`[] `values`() @signature `Lokhttp3/logging/HttpLoggingInterceptor$Level;.values:()[Lokhttp3/logging/HttpLoggingInterceptor$Level;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c7480.  v0:= `@@okhttp3.logging.HttpLoggingInterceptor$Level.$VALUES` @type ^`okhttp3.logging.HttpLoggingInterceptor$Level`[] @kind object;
  #L1c7484.  call temp:= `clone`(v0) @signature `[Lokhttp3/logging/HttpLoggingInterceptor$Level;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c748a.  v0:= temp @kind object;
  #L1c748c.  v0:= (`okhttp3.logging.HttpLoggingInterceptor$Level`[]) v0 @kind object;
  #L1c7490.  return v0 @kind object;
}
