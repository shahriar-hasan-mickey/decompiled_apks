record `okhttp3.logging.HttpLoggingInterceptor$Logger` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `okhttp3.logging.HttpLoggingInterceptor$Logger$Companion` `@@okhttp3.logging.HttpLoggingInterceptor$Logger.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.logging.HttpLoggingInterceptor$Logger` `@@okhttp3.logging.HttpLoggingInterceptor$Logger.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c75b8.  v0:= new `okhttp3.logging.HttpLoggingInterceptor$Logger$Companion`;
  #L1c75bc.  v1:= 0I;
  #L1c75be.  call `<init>`(v0, v1) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1c75c4.  `@@okhttp3.logging.HttpLoggingInterceptor$Logger.Companion` @type ^`okhttp3.logging.HttpLoggingInterceptor$Logger$Companion` := v0 @kind object;
  #L1c75c8.  v0:= new `okhttp3.logging.HttpLoggingInterceptor$Logger$Companion$a`;
  #L1c75cc.  call `<init>`(v0) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger$Companion$a;.<init>:()V` @kind direct;
  #L1c75d2.  `@@okhttp3.logging.HttpLoggingInterceptor$Logger.DEFAULT` @type ^`okhttp3.logging.HttpLoggingInterceptor$Logger` := v0 @kind object;
  #L1c75d6.  return @kind void;
}
procedure `void` `log`(`java.lang.String` v0 @kind object) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger;.log:(Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
