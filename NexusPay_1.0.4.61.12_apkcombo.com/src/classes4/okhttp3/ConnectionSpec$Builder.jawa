record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.ConnectionSpec$Builder.a` @AccessFlag PRIVATE;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.b` @AccessFlag PRIVATE;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.ConnectionSpec$Builder.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19806c.  v0:= "connectionSpec" @kind object;
  #L198070.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L198076.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19807c.  call temp:= `isTls`(v2) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @kind virtual;
  #L198082.  v0:= temp;
  #L198084.  v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L198088.  call temp:= `access$getCipherSuitesAsString$p`(v2) @signature `Lokhttp3/ConnectionSpec;.access$getCipherSuitesAsString$p:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @kind static;
  #L19808e.  v0:= temp @kind object;
  #L198090.  v1.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L198094.  call temp:= `access$getTlsVersionsAsString$p`(v2) @signature `Lokhttp3/ConnectionSpec;.access$getTlsVersionsAsString$p:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @kind static;
  #L19809a.  v0:= temp @kind object;
  #L19809c.  v1.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L1980a0.  call temp:= `supportsTlsExtensions`(v2) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @kind virtual;
  #L1980a6.  v2:= temp;
  #L1980a8.  v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v2 @kind boolean;
  #L1980ac.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L198050.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L198056.  v0.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v1 @kind boolean;
  #L19805a.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L197d48.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197d4c.  if v0 == 0 then goto L197d58;
  #L197d50.  v0:= 0I;
  #L197d52.  v2.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L197d56.  return v2 @kind object;
  #L197d58.  v0:= new `java.lang.IllegalArgumentException`;
  #L197d5c.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L197d60.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197d66.  v1:= temp @kind object;
  #L197d68.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197d6e.  throw v0;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L197d80.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197d84.  if v0 == 0 then goto L197d90;
  #L197d88.  v0:= 0I;
  #L197d8a.  v2.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L197d8e.  return v2 @kind object;
  #L197d90.  v0:= new `java.lang.IllegalArgumentException`;
  #L197d94.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L197d98.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197d9e.  v1:= temp @kind object;
  #L197da0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197da6.  throw v0;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v5 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L197d1c.  v0:= new `okhttp3.ConnectionSpec`;
  #L197d20.  v1:= v5.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197d24.  v2:= v5.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` @kind boolean;
  #L197d28.  v3:= v5.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] @kind object;
  #L197d2c.  v4:= v5.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] @kind object;
  #L197d30.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/ConnectionSpec;.<init>:(ZZ[Ljava/lang/String;[Ljava/lang/String;)V` @kind direct;
  #L197d36.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L197db8.  v0:= "cipherSuites" @kind object;
  #L197dbc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L197dc2.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197dc6.  if v0 == 0 then goto L197e1c;
  #L197dca.  v0:= length @variable v3;
  #L197dcc.  v1:= 1I;
  #L197dce.  if v0 != 0 then goto L197dd6;
  #L197dd2.  v0:= 1I;
  #L197dd4.  goto L197dd8;
  #L197dd6.  v0:= 0I;
  #L197dd8.  v0:= v0 ^~ v1 @kind int;
  #L197dda.  if v0 == 0 then goto L197e04;
  #L197dde.  call temp:= `clone`(v3) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L197de4.  v3:= temp @kind object;
  #L197de6.  if v3 == 0 then goto L197df4;
  #L197dea.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L197dee.  v2.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v3 @kind object;
  #L197df2.  return v2 @kind object;
  #L197df4.  v3:= new `java.lang.NullPointerException`;
  #L197df8.  v0:= "null cannot be cast to non-null type kotlin.Array<kotlin.String>" @kind object;
  #L197dfc.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197e02.  throw v3;
  #L197e04.  v3:= new `java.lang.IllegalArgumentException`;
  #L197e08.  v0:= "At least one cipher suite is required" @kind object;
  #L197e0c.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197e12.  v0:= temp @kind object;
  #L197e14.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197e1a.  throw v3;
  #L197e1c.  v3:= new `java.lang.IllegalArgumentException`;
  #L197e20.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L197e24.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197e2a.  v0:= temp @kind object;
  #L197e2c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197e32.  throw v3;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v5 @kind this, `okhttp3.CipherSuite`[] v6 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L197e44.  v0:= "cipherSuites" @kind object;
  #L197e48.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L197e4e.  v0:= v5.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197e52.  if v0 == 0 then goto L197ec0;
  #L197e56.  v0:= new `java.util.ArrayList`;
  #L197e5a.  v1:= length @variable v6;
  #L197e5c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L197e62.  v1:= length @variable v6;
  #L197e64.  v2:= 0I;
  #L197e66.  v3:= 0I;
  #L197e68.  if v3 >= v1 then goto L197e84;
  #L197e6c.  v4:= v6[v3] @kind object;
  #L197e70.  call temp:= `javaName`(v4) @signature `Lokhttp3/CipherSuite;.javaName:()Ljava/lang/String;` @kind virtual;
  #L197e76.  v4:= temp @kind object;
  #L197e78.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L197e7e.  v3:= v3 + 1;
  #L197e82.  goto L197e68;
  #L197e84.  v6:= new `java.lang.String`[v2];
  #L197e88.  call temp:= `toArray`(v0, v6) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L197e8e.  v6:= temp @kind object;
  #L197e90.  if v6 == 0 then goto L197eb0;
  #L197e94.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L197e98.  v0:= length @variable v6;
  #L197e9a.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L197ea0.  v6:= temp @kind object;
  #L197ea2.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L197ea6.  call temp:= `cipherSuites`(v5, v6) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197eac.  v6:= temp @kind object;
  #L197eae.  return v6 @kind object;
  #L197eb0.  v6:= new `java.lang.NullPointerException`;
  #L197eb4.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L197eb8.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197ebe.  throw v6;
  #L197ec0.  v6:= new `java.lang.IllegalArgumentException`;
  #L197ec4.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L197ec8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197ece.  v0:= temp @kind object;
  #L197ed0.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197ed6.  throw v6;
}
procedure `java.lang.String`[] `getCipherSuites$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getCipherSuites$okhttp:()[Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L197cec.  v0:= v1.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] @kind object;
  #L197cf0.  return v0 @kind object;
}
procedure `boolean` `getSupportsTlsExtensions$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getSupportsTlsExtensions$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L197cbc.  v0:= v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` @kind boolean;
  #L197cc0.  return v0;
}
procedure `boolean` `getTls$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getTls$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L197cd4.  v0:= v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197cd8.  return v0;
}
procedure `java.lang.String`[] `getTlsVersions$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getTlsVersions$okhttp:()[Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L197d04.  v0:= v1.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] @kind object;
  #L197d08.  return v0 @kind object;
}
procedure `void` `setCipherSuites$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.setCipherSuites$okhttp:([Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1980c0.  v0.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v1 @kind object;
  #L1980c4.  return @kind void;
}
procedure `void` `setSupportsTlsExtensions$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.setSupportsTlsExtensions$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1980d8.  v0.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v1 @kind boolean;
  #L1980dc.  return @kind void;
}
procedure `void` `setTls$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.setTls$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1980f0.  v0.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v1 @kind boolean;
  #L1980f4.  return @kind void;
}
procedure `void` `setTlsVersions$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.setTlsVersions$okhttp:([Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L198108.  v0.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v1 @kind object;
  #L19810c.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L197ee8.  v0:= v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197eec.  if v0 == 0 then goto L197ef6;
  #L197ef0.  v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v2 @kind boolean;
  #L197ef4.  return v1 @kind object;
  #L197ef6.  v2:= new `java.lang.IllegalArgumentException`;
  #L197efa.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L197efe.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197f04.  v0:= temp @kind object;
  #L197f06.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197f0c.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L197f20.  v0:= "tlsVersions" @kind object;
  #L197f24.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L197f2a.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197f2e.  if v0 == 0 then goto L197f84;
  #L197f32.  v0:= length @variable v3;
  #L197f34.  v1:= 1I;
  #L197f36.  if v0 != 0 then goto L197f3e;
  #L197f3a.  v0:= 1I;
  #L197f3c.  goto L197f40;
  #L197f3e.  v0:= 0I;
  #L197f40.  v0:= v0 ^~ v1 @kind int;
  #L197f42.  if v0 == 0 then goto L197f6c;
  #L197f46.  call temp:= `clone`(v3) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L197f4c.  v3:= temp @kind object;
  #L197f4e.  if v3 == 0 then goto L197f5c;
  #L197f52.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L197f56.  v2.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v3 @kind object;
  #L197f5a.  return v2 @kind object;
  #L197f5c.  v3:= new `java.lang.NullPointerException`;
  #L197f60.  v0:= "null cannot be cast to non-null type kotlin.Array<kotlin.String>" @kind object;
  #L197f64.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197f6a.  throw v3;
  #L197f6c.  v3:= new `java.lang.IllegalArgumentException`;
  #L197f70.  v0:= "At least one TLS version is required" @kind object;
  #L197f74.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197f7a.  v0:= temp @kind object;
  #L197f7c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197f82.  throw v3;
  #L197f84.  v3:= new `java.lang.IllegalArgumentException`;
  #L197f88.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L197f8c.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197f92.  v0:= temp @kind object;
  #L197f94.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197f9a.  throw v3;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v5 @kind this, `okhttp3.TlsVersion`[] v6 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L197fac.  v0:= "tlsVersions" @kind object;
  #L197fb0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L197fb6.  v0:= v5.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L197fba.  if v0 == 0 then goto L198028;
  #L197fbe.  v0:= new `java.util.ArrayList`;
  #L197fc2.  v1:= length @variable v6;
  #L197fc4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L197fca.  v1:= length @variable v6;
  #L197fcc.  v2:= 0I;
  #L197fce.  v3:= 0I;
  #L197fd0.  if v3 >= v1 then goto L197fec;
  #L197fd4.  v4:= v6[v3] @kind object;
  #L197fd8.  call temp:= `javaName`(v4) @signature `Lokhttp3/TlsVersion;.javaName:()Ljava/lang/String;` @kind virtual;
  #L197fde.  v4:= temp @kind object;
  #L197fe0.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L197fe6.  v3:= v3 + 1;
  #L197fea.  goto L197fd0;
  #L197fec.  v6:= new `java.lang.String`[v2];
  #L197ff0.  call temp:= `toArray`(v0, v6) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L197ff6.  v6:= temp @kind object;
  #L197ff8.  if v6 == 0 then goto L198018;
  #L197ffc.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L198000.  v0:= length @variable v6;
  #L198002.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L198008.  v6:= temp @kind object;
  #L19800a.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L19800e.  call temp:= `tlsVersions`(v5, v6) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L198014.  v6:= temp @kind object;
  #L198016.  return v6 @kind object;
  #L198018.  v6:= new `java.lang.NullPointerException`;
  #L19801c.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L198020.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198026.  throw v6;
  #L198028.  v6:= new `java.lang.IllegalArgumentException`;
  #L19802c.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L198030.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L198036.  v0:= temp @kind object;
  #L198038.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19803e.  throw v6;
}
