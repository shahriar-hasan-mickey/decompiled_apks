record `okhttp3.MultipartReader` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okio.ByteString` `okhttp3.MultipartReader.a` @AccessFlag PRIVATE_FINAL;
  `okio.ByteString` `okhttp3.MultipartReader.b` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.MultipartReader.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.MultipartReader.d` @AccessFlag PRIVATE;
  `boolean` `okhttp3.MultipartReader.e` @AccessFlag PRIVATE;
  `okhttp3.MultipartReader$a` `okhttp3.MultipartReader.f` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okhttp3.MultipartReader.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.MultipartReader.h` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.MultipartReader$Companion` `@@okhttp3.MultipartReader.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `okio.Options` `@@okhttp3.MultipartReader.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/MultipartReader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a0f6c.  v0:= new `okhttp3.MultipartReader$Companion`;
  #L1a0f70.  v1:= 0I;
  #L1a0f72.  call `<init>`(v0, v1) @signature `Lokhttp3/MultipartReader$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1a0f78.  `@@okhttp3.MultipartReader.Companion` @type ^`okhttp3.MultipartReader$Companion` := v0 @kind object;
  #L1a0f7c.  v0:= `@@okio.Options.Companion` @type ^`okio.Options$Companion` @kind object;
  #L1a0f80.  v1:= 4I;
  #L1a0f82.  v1:= new `okio.ByteString`[v1];
  #L1a0f86.  v2:= `@@okio.ByteString.Companion` @type ^`okio.ByteString$Companion` @kind object;
  #L1a0f8a.  v3:= "\r\n" @kind object;
  #L1a0f8e.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L1a0f94.  v2:= temp @kind object;
  #L1a0f96.  v3:= 0I;
  #L1a0f98.  v1[v3]:= v2 @kind object;
  #L1a0f9c.  v2:= `@@okio.ByteString.Companion` @type ^`okio.ByteString$Companion` @kind object;
  #L1a0fa0.  v3:= "--" @kind object;
  #L1a0fa4.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L1a0faa.  v2:= temp @kind object;
  #L1a0fac.  v3:= 1I;
  #L1a0fae.  v1[v3]:= v2 @kind object;
  #L1a0fb2.  v2:= `@@okio.ByteString.Companion` @type ^`okio.ByteString$Companion` @kind object;
  #L1a0fb6.  v3:= " " @kind object;
  #L1a0fba.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L1a0fc0.  v2:= temp @kind object;
  #L1a0fc2.  v3:= 2I;
  #L1a0fc4.  v1[v3]:= v2 @kind object;
  #L1a0fc8.  v2:= `@@okio.ByteString.Companion` @type ^`okio.ByteString$Companion` @kind object;
  #L1a0fcc.  v3:= "\t" @kind object;
  #L1a0fd0.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L1a0fd6.  v2:= temp @kind object;
  #L1a0fd8.  v3:= 3I;
  #L1a0fda.  v1[v3]:= v2 @kind object;
  #L1a0fde.  call temp:= `of`(v0, v1) @signature `Lokio/Options$Companion;.of:([Lokio/ByteString;)Lokio/Options;` @kind virtual;
  #L1a0fe4.  v0:= temp @kind object;
  #L1a0fe6.  `@@okhttp3.MultipartReader.i` @type ^`okio.Options` := v0 @kind object;
  #L1a0fea.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.MultipartReader` v2 @kind this, `okhttp3.ResponseBody` v3 @kind object) @signature `Lokhttp3/MultipartReader;.<init>:(Lokhttp3/ResponseBody;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a0ffc.  v0:= "response" @kind object;
  #L1a1000.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1a1006.  call temp:= `source`(v3) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L1a100c.  v0:= temp @kind object;
  #L1a100e.  call temp:= `contentType`(v3) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L1a1014.  v3:= temp @kind object;
  #L1a1016.  if v3 == 0 then goto L1a1032;
  #L1a101a.  v1:= "boundary" @kind object;
  #L1a101e.  call temp:= `parameter`(v3, v1) @signature `Lokhttp3/MediaType;.parameter:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1a1024.  v3:= temp @kind object;
  #L1a1026.  if v3 == 0 then goto L1a1032;
  #L1a102a.  call `<init>`(v2, v0, v3) @signature `Lokhttp3/MultipartReader;.<init>:(Lokio/BufferedSource;Ljava/lang/String;)V` @kind direct;
  #L1a1030.  return @kind void;
  #L1a1032.  v3:= new `java.net.ProtocolException`;
  #L1a1036.  v0:= "expected the Content-Type to have a boundary parameter" @kind object;
  #L1a103a.  call `<init>`(v3, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a1040.  throw v3;
}
procedure `void` `<init>`(`okhttp3.MultipartReader` v1 @kind this, `okio.BufferedSource` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/MultipartReader;.<init>:(Lokio/BufferedSource;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a1054.  v0:= "source" @kind object;
  #L1a1058.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1a105e.  v0:= "boundary" @kind object;
  #L1a1062.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1a1068.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a106e.  v1.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` := v2 @kind object;
  #L1a1072.  v1.`okhttp3.MultipartReader.h` @type ^`java.lang.String` := v3 @kind object;
  #L1a1076.  v2:= new `okio.Buffer`;
  #L1a107a.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a1080.  v3:= "--" @kind object;
  #L1a1084.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1a108a.  v2:= temp @kind object;
  #L1a108c.  v3:= v1.`okhttp3.MultipartReader.h` @type ^`java.lang.String` @kind object;
  #L1a1090.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1a1096.  v2:= temp @kind object;
  #L1a1098.  call temp:= `readByteString`(v2) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a109e.  v2:= temp @kind object;
  #L1a10a0.  v1.`okhttp3.MultipartReader.a` @type ^`okio.ByteString` := v2 @kind object;
  #L1a10a4.  v2:= new `okio.Buffer`;
  #L1a10a8.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a10ae.  v3:= "\r\n--" @kind object;
  #L1a10b2.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1a10b8.  v2:= temp @kind object;
  #L1a10ba.  v3:= v1.`okhttp3.MultipartReader.h` @type ^`java.lang.String` @kind object;
  #L1a10be.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1a10c4.  v2:= temp @kind object;
  #L1a10c6.  call temp:= `readByteString`(v2) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a10cc.  v2:= temp @kind object;
  #L1a10ce.  v1.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` := v2 @kind object;
  #L1a10d2.  return @kind void;
}
procedure `long` `a`(`okhttp3.MultipartReader` v5 @kind this, `long` v6 ) @signature `Lokhttp3/MultipartReader;.a:(J)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a0d34.  v0:= v5.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0d38.  v1:= v5.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L1a0d3c.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a0d42.  v1:= temp;
  #L1a0d44.  v1:= (`long`) v1 @kind i2l;
  #L1a0d46.  call `require`(v0, v1) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L1a0d4c.  v0:= v5.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0d50.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L1a0d56.  v0:= temp @kind object;
  #L1a0d58.  v1:= v5.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L1a0d5c.  call temp:= `indexOf`(v0, v1) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @kind virtual;
  #L1a0d62.  v0:= temp @kind wide;
  #L1a0d64.  v2:= -1L;
  #L1a0d68.  v4:= lcmp(v0, v2);
  #L1a0d6c.  if v4 != 0 then goto L1a0da4;
  #L1a0d70.  v0:= v5.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0d74.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L1a0d7a.  v0:= temp @kind object;
  #L1a0d7c.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a0d82.  v0:= temp @kind wide;
  #L1a0d84.  v2:= v5.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L1a0d88.  call temp:= `size`(v2) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a0d8e.  v2:= temp;
  #L1a0d90.  v2:= (`long`) v2 @kind i2l;
  #L1a0d92.  v0:= v0 - v2 @kind long;
  #L1a0d94.  v2:= 1L;
  #L1a0d98.  v0:= v0 + v2 @kind long;
  #L1a0d9a.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1a0da0.  v6:= temp @kind wide;
  #L1a0da2.  goto L1a0dac;
  #L1a0da4.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1a0daa.  v6:= temp @kind wide;
  #L1a0dac.  return v6 @kind wide;
}
procedure `long` `access$currentPartBytesRemaining`(`okhttp3.MultipartReader` v0 @kind object, `long` v1 ) @signature `Lokhttp3/MultipartReader;.access$currentPartBytesRemaining:(Lokhttp3/MultipartReader;J)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1a0d18.  call temp:= `a`(v0, v1) @signature `Lokhttp3/MultipartReader;.a:(J)J` @kind direct;
  #L1a0d1e.  v0:= temp @kind wide;
  #L1a0d20.  return v0 @kind wide;
}
procedure `okio.Options` `access$getAfterBoundaryOptions$cp`() @signature `Lokhttp3/MultipartReader;.access$getAfterBoundaryOptions$cp:()Lokio/Options;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1a0f54.  v0:= `@@okhttp3.MultipartReader.i` @type ^`okio.Options` @kind object;
  #L1a0f58.  return v0 @kind object;
}
procedure `okhttp3.MultipartReader$a` `access$getCurrentPart$p`(`okhttp3.MultipartReader` v0 @kind object) @signature `Lokhttp3/MultipartReader;.access$getCurrentPart$p:(Lokhttp3/MultipartReader;)Lokhttp3/MultipartReader$a;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1a0f24.  v0:= v0.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` @kind object;
  #L1a0f28.  return v0 @kind object;
}
procedure `okio.BufferedSource` `access$getSource$p`(`okhttp3.MultipartReader` v0 @kind object) @signature `Lokhttp3/MultipartReader;.access$getSource$p:(Lokhttp3/MultipartReader;)Lokio/BufferedSource;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1a0f3c.  v0:= v0.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0f40.  return v0 @kind object;
}
procedure `void` `access$setCurrentPart$p`(`okhttp3.MultipartReader` v0 @kind object, `okhttp3.MultipartReader$a` v1 @kind object) @signature `Lokhttp3/MultipartReader;.access$setCurrentPart$p:(Lokhttp3/MultipartReader;Lokhttp3/MultipartReader$a;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1a10e4.  v0.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` := v1 @kind object;
  #L1a10e8.  return @kind void;
}
procedure `java.lang.String` `boundary`(`okhttp3.MultipartReader` v1 @kind this) @signature `Lokhttp3/MultipartReader;.boundary:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1a0d00.  v0:= v1.`okhttp3.MultipartReader.h` @type ^`java.lang.String` @kind object;
  #L1a0d04.  return v0 @kind object;
}
procedure `void` `close`(`okhttp3.MultipartReader` v1 @kind this) @signature `Lokhttp3/MultipartReader;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a10fc.  v0:= v1.`okhttp3.MultipartReader.d` @type ^`boolean` @kind boolean;
  #L1a1100.  if v0 == 0 then goto L1a1106;
  #L1a1104.  return @kind void;
  #L1a1106.  v0:= 1I;
  #L1a1108.  v1.`okhttp3.MultipartReader.d` @type ^`boolean` := v0 @kind boolean;
  #L1a110c.  v0:= 0I;
  #L1a110e.  v1.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` := v0 @kind object;
  #L1a1112.  v0:= v1.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a1116.  call `close`(v0) @signature `Lokio/Source;.close:()V` @kind interface;
  #L1a111c.  return @kind void;
}
procedure `okhttp3.MultipartReader$Part` `nextPart`(`okhttp3.MultipartReader` v7 @kind this) @signature `Lokhttp3/MultipartReader;.nextPart:()Lokhttp3/MultipartReader$Part;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a0dc0.  v0:= v7.`okhttp3.MultipartReader.d` @type ^`boolean` @kind boolean;
  #L1a0dc4.  v1:= 1I;
  #L1a0dc6.  v0:= v0 ^~ v1 @kind int;
  #L1a0dc8.  if v0 == 0 then goto L1a0efc;
  #L1a0dcc.  v0:= v7.`okhttp3.MultipartReader.e` @type ^`boolean` @kind boolean;
  #L1a0dd0.  v2:= 0I;
  #L1a0dd2.  if v0 == 0 then goto L1a0dd8;
  #L1a0dd6.  return v2 @kind object;
  #L1a0dd8.  v0:= v7.`okhttp3.MultipartReader.c` @type ^`int`;
  #L1a0ddc.  v3:= 0L;
  #L1a0de0.  if v0 != 0 then goto L1a0e12;
  #L1a0de4.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0de8.  v5:= v7.`okhttp3.MultipartReader.a` @type ^`okio.ByteString` @kind object;
  #L1a0dec.  call temp:= `rangeEquals`(v0, v3, v5) @signature `Lokio/BufferedSource;.rangeEquals:(JLokio/ByteString;)Z` @kind interface;
  #L1a0df2.  v0:= temp;
  #L1a0df4.  if v0 == 0 then goto L1a0e12;
  #L1a0df8.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0dfc.  v3:= v7.`okhttp3.MultipartReader.a` @type ^`okio.ByteString` @kind object;
  #L1a0e00.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a0e06.  v3:= temp;
  #L1a0e08.  v3:= (`long`) v3 @kind i2l;
  #L1a0e0a.  call `skip`(v0, v3) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1a0e10.  goto L1a0e3e;
  #L1a0e12.  v5:= 8192L;
  #L1a0e16.  call temp:= `a`(v7, v5) @signature `Lokhttp3/MultipartReader;.a:(J)J` @kind direct;
  #L1a0e1c.  v5:= temp @kind wide;
  #L1a0e1e.  v0:= lcmp(v5, v3);
  #L1a0e22.  if v0 != 0 then goto L1a0ef0;
  #L1a0e26.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0e2a.  v3:= v7.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L1a0e2e.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a0e34.  v3:= temp;
  #L1a0e36.  v3:= (`long`) v3 @kind i2l;
  #L1a0e38.  call `skip`(v0, v3) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1a0e3e.  v0:= 0I;
  #L1a0e40.  v3:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0e44.  v4:= `@@okhttp3.MultipartReader.i` @type ^`okio.Options` @kind object;
  #L1a0e48.  call temp:= `select`(v3, v4) @signature `Lokio/BufferedSource;.select:(Lokio/Options;)I` @kind interface;
  #L1a0e4e.  v3:= temp;
  #L1a0e50.  v4:= -1I;
  #L1a0e52.  v5:= "unexpected characters after boundary" @kind object;
  #L1a0e56.  if v3 == v4 then goto L1a0ee4;
  #L1a0e5a.  if v3 == 0 then goto L1a0ea2;
  #L1a0e5e.  if v3 == v1 then goto L1a0e74;
  #L1a0e62.  v4:= 2I;
  #L1a0e64.  if v3 == v4 then goto L1a0e70;
  #L1a0e68.  v4:= 3I;
  #L1a0e6a.  if v3 == v4 then goto L1a0e70;
  #L1a0e6e.  goto L1a0e40;
  #L1a0e70.  v0:= 1I;
  #L1a0e72.  goto L1a0e40;
  #L1a0e74.  if v0 != 0 then goto L1a0e96;
  #L1a0e78.  v0:= v7.`okhttp3.MultipartReader.c` @type ^`int`;
  #L1a0e7c.  if v0 == 0 then goto L1a0e86;
  #L1a0e80.  v7.`okhttp3.MultipartReader.e` @type ^`boolean` := v1 @kind boolean;
  #L1a0e84.  return v2 @kind object;
  #L1a0e86.  v0:= new `java.net.ProtocolException`;
  #L1a0e8a.  v1:= "expected at least 1 part" @kind object;
  #L1a0e8e.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a0e94.  throw v0;
  #L1a0e96.  v0:= new `java.net.ProtocolException`;
  #L1a0e9a.  call `<init>`(v0, v5) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a0ea0.  throw v0;
  #L1a0ea2.  v0:= v7.`okhttp3.MultipartReader.c` @type ^`int`;
  #L1a0ea6.  v0:= v0 + v1 @kind int;
  #L1a0ea8.  v7.`okhttp3.MultipartReader.c` @type ^`int` := v0;
  #L1a0eac.  v0:= new `okhttp3.internal.http1.HeadersReader`;
  #L1a0eb0.  v1:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0eb4.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/HeadersReader;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L1a0eba.  call temp:= `readHeaders`(v0) @signature `Lokhttp3/internal/http1/HeadersReader;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L1a0ec0.  v0:= temp @kind object;
  #L1a0ec2.  v1:= new `okhttp3.MultipartReader$a`;
  #L1a0ec6.  call `<init>`(v1, v7) @signature `Lokhttp3/MultipartReader$a;.<init>:(Lokhttp3/MultipartReader;)V` @kind direct;
  #L1a0ecc.  v7.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` := v1 @kind object;
  #L1a0ed0.  v2:= new `okhttp3.MultipartReader$Part`;
  #L1a0ed4.  call temp:= `buffer`(v1) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1a0eda.  v1:= temp @kind object;
  #L1a0edc.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/MultipartReader$Part;.<init>:(Lokhttp3/Headers;Lokio/BufferedSource;)V` @kind direct;
  #L1a0ee2.  return v2 @kind object;
  #L1a0ee4.  v0:= new `java.net.ProtocolException`;
  #L1a0ee8.  call `<init>`(v0, v5) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a0eee.  throw v0;
  #L1a0ef0.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L1a0ef4.  call `skip`(v0, v5) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1a0efa.  goto L1a0e12;
  #L1a0efc.  v0:= new `java.lang.IllegalStateException`;
  #L1a0f00.  v1:= "closed" @kind object;
  #L1a0f04.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a0f0a.  v1:= temp @kind object;
  #L1a0f0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a0f12.  throw v0;
}
