record `okhttp3.MultipartReader$Part` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okhttp3.Headers` `okhttp3.MultipartReader$Part.a` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSource` `okhttp3.MultipartReader$Part.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.MultipartReader$Part` v1 @kind this, `okhttp3.Headers` v2 @kind object, `okio.BufferedSource` v3 @kind object) @signature `Lokhttp3/MultipartReader$Part;.<init>:(Lokhttp3/Headers;Lokio/BufferedSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a0cb0.  v0:= "headers" @kind object;
  #L1a0cb4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1a0cba.  v0:= "body" @kind object;
  #L1a0cbe.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1a0cc4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a0cca.  v1.`okhttp3.MultipartReader$Part.a` @type ^`okhttp3.Headers` := v2 @kind object;
  #L1a0cce.  v1.`okhttp3.MultipartReader$Part.b` @type ^`okio.BufferedSource` := v3 @kind object;
  #L1a0cd2.  return @kind void;
}
procedure `okio.BufferedSource` `body`(`okhttp3.MultipartReader$Part` v1 @kind this) @signature `Lokhttp3/MultipartReader$Part;.body:()Lokio/BufferedSource;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1a0c98.  v0:= v1.`okhttp3.MultipartReader$Part.b` @type ^`okio.BufferedSource` @kind object;
  #L1a0c9c.  return v0 @kind object;
}
procedure `void` `close`(`okhttp3.MultipartReader$Part` v1 @kind this) @signature `Lokhttp3/MultipartReader$Part;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a0ce4.  v0:= v1.`okhttp3.MultipartReader$Part.b` @type ^`okio.BufferedSource` @kind object;
  #L1a0ce8.  call `close`(v0) @signature `Lokio/Source;.close:()V` @kind interface;
  #L1a0cee.  return @kind void;
}
procedure `okhttp3.Headers` `headers`(`okhttp3.MultipartReader$Part` v1 @kind this) @signature `Lokhttp3/MultipartReader$Part;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1a0c80.  v0:= v1.`okhttp3.MultipartReader$Part.a` @type ^`okhttp3.Headers` @kind object;
  #L1a0c84.  return v0 @kind object;
}
