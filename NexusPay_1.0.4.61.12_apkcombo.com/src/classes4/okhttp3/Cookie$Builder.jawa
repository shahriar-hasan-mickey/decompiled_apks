record `okhttp3.Cookie$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `okhttp3.Cookie$Builder.a` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.Cookie$Builder.b` @AccessFlag PRIVATE;
  `long` `okhttp3.Cookie$Builder.c` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.Cookie$Builder.d` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.Cookie$Builder.e` @AccessFlag PRIVATE;
  `boolean` `okhttp3.Cookie$Builder.f` @AccessFlag PRIVATE;
  `boolean` `okhttp3.Cookie$Builder.g` @AccessFlag PRIVATE;
  `boolean` `okhttp3.Cookie$Builder.h` @AccessFlag PRIVATE;
  `boolean` `okhttp3.Cookie$Builder.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.Cookie$Builder` v2 @kind this) @signature `Lokhttp3/Cookie$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L198b28.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L198b2e.  v0:= 253402300799999L;
  #L198b38.  v2.`okhttp3.Cookie$Builder.c` @type ^`long` := v0 @kind wide;
  #L198b3c.  v0:= "/" @kind object;
  #L198b40.  v2.`okhttp3.Cookie$Builder.e` @type ^`java.lang.String` := v0 @kind object;
  #L198b44.  return @kind void;
}
procedure `okhttp3.Cookie$Builder` `a`(`okhttp3.Cookie$Builder` v2 @kind this, `java.lang.String` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/Cookie$Builder;.a:(Ljava/lang/String;Z)Lokhttp3/Cookie$Builder;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L198948.  call temp:= `toCanonicalHost`(v3) @signature `Lokhttp3/internal/HostnamesKt;.toCanonicalHost:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19894e.  v0:= temp @kind object;
  #L198950.  if v0 == 0 then goto L19895e;
  #L198954.  v2.`okhttp3.Cookie$Builder.d` @type ^`java.lang.String` := v0 @kind object;
  #L198958.  v2.`okhttp3.Cookie$Builder.i` @type ^`boolean` := v4 @kind boolean;
  #L19895c.  return v2 @kind object;
  #L19895e.  v4:= new `java.lang.IllegalArgumentException`;
  #L198962.  v0:= new `java.lang.StringBuilder`;
  #L198966.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19896c.  v1:= "unexpected domain: " @kind object;
  #L198970.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198976.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19897c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198982.  v3:= temp @kind object;
  #L198984.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19898a.  throw v4;
}
procedure `okhttp3.Cookie` `build`(`okhttp3.Cookie$Builder` v13 @kind this) @signature `Lokhttp3/Cookie$Builder;.build:()Lokhttp3/Cookie;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1988a4.  v12:= new `okhttp3.Cookie`;
  #L1988a8.  v1:= v13.`okhttp3.Cookie$Builder.a` @type ^`java.lang.String` @kind object;
  #L1988ac.  if v1 == 0 then goto L198904;
  #L1988b0.  v2:= v13.`okhttp3.Cookie$Builder.b` @type ^`java.lang.String` @kind object;
  #L1988b4.  if v2 == 0 then goto L1988f4;
  #L1988b8.  v3:= v13.`okhttp3.Cookie$Builder.c` @type ^`long` @kind wide;
  #L1988bc.  v5:= v13.`okhttp3.Cookie$Builder.d` @type ^`java.lang.String` @kind object;
  #L1988c0.  if v5 == 0 then goto L1988e4;
  #L1988c4.  v6:= v13.`okhttp3.Cookie$Builder.e` @type ^`java.lang.String` @kind object;
  #L1988c8.  v7:= v13.`okhttp3.Cookie$Builder.f` @type ^`boolean` @kind boolean;
  #L1988cc.  v8:= v13.`okhttp3.Cookie$Builder.g` @type ^`boolean` @kind boolean;
  #L1988d0.  v9:= v13.`okhttp3.Cookie$Builder.h` @type ^`boolean` @kind boolean;
  #L1988d4.  v10:= v13.`okhttp3.Cookie$Builder.i` @type ^`boolean` @kind boolean;
  #L1988d8.  v11:= 0I;
  #L1988da.  v0:= v12 @kind object;
  #L1988dc.  call `<init>`(v0, v1, v2, v3, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/Cookie;.<init>:(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;ZZZZLkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1988e2.  return v12 @kind object;
  #L1988e4.  v0:= new `java.lang.NullPointerException`;
  #L1988e8.  v1:= "builder.domain == null" @kind object;
  #L1988ec.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1988f2.  throw v0;
  #L1988f4.  v0:= new `java.lang.NullPointerException`;
  #L1988f8.  v1:= "builder.value == null" @kind object;
  #L1988fc.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198902.  throw v0;
  #L198904.  v0:= new `java.lang.NullPointerException`;
  #L198908.  v1:= "builder.name == null" @kind object;
  #L19890c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198912.  throw v0;
}
procedure `okhttp3.Cookie$Builder` `domain`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.domain:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L198924.  v0:= "domain" @kind object;
  #L198928.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L19892e.  v0:= 0I;
  #L198930.  call temp:= `a`(v1, v2, v0) @signature `Lokhttp3/Cookie$Builder;.a:(Ljava/lang/String;Z)Lokhttp3/Cookie$Builder;` @kind direct;
  #L198936.  return v1 @kind object;
}
procedure `okhttp3.Cookie$Builder` `expiresAt`(`okhttp3.Cookie$Builder` v3 @kind this, `long` v4 ) @signature `Lokhttp3/Cookie$Builder;.expiresAt:(J)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L19899c.  v0:= 0L;
  #L1989a0.  v2:= lcmp(v4, v0);
  #L1989a4.  if v2 > 0 then goto L1989ac;
  #L1989a8.  v4:= -9223372036854775808L;
  #L1989ac.  v0:= 253402300799999L;
  #L1989b6.  v2:= lcmp(v4, v0);
  #L1989ba.  if v2 <= 0 then goto L1989c0;
  #L1989be.  v4:= v0 @kind wide;
  #L1989c0.  v3.`okhttp3.Cookie$Builder.c` @type ^`long` := v4 @kind wide;
  #L1989c4.  v4:= 1I;
  #L1989c6.  v3.`okhttp3.Cookie$Builder.h` @type ^`boolean` := v4 @kind boolean;
  #L1989ca.  return v3 @kind object;
}
procedure `okhttp3.Cookie$Builder` `hostOnlyDomain`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.hostOnlyDomain:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1989dc.  v0:= "domain" @kind object;
  #L1989e0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1989e6.  v0:= 1I;
  #L1989e8.  call temp:= `a`(v1, v2, v0) @signature `Lokhttp3/Cookie$Builder;.a:(Ljava/lang/String;Z)Lokhttp3/Cookie$Builder;` @kind direct;
  #L1989ee.  return v1 @kind object;
}
procedure `okhttp3.Cookie$Builder` `httpOnly`(`okhttp3.Cookie$Builder` v1 @kind this) @signature `Lokhttp3/Cookie$Builder;.httpOnly:()Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L198a00.  v0:= 1I;
  #L198a02.  v1.`okhttp3.Cookie$Builder.g` @type ^`boolean` := v0 @kind boolean;
  #L198a06.  return v1 @kind object;
}
procedure `okhttp3.Cookie$Builder` `name`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.name:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L198a18.  v0:= "name" @kind object;
  #L198a1c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L198a22.  call temp:= `trim`(v2) @signature `Lkotlin/text/StringsKt;.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L198a28.  v0:= temp @kind object;
  #L198a2a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L198a30.  v0:= temp @kind object;
  #L198a32.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L198a38.  v0:= temp;
  #L198a3a.  if v0 == 0 then goto L198a44;
  #L198a3e.  v1.`okhttp3.Cookie$Builder.a` @type ^`java.lang.String` := v2 @kind object;
  #L198a42.  return v1 @kind object;
  #L198a44.  v2:= new `java.lang.IllegalArgumentException`;
  #L198a48.  v0:= "name is not trimmed" @kind object;
  #L198a4c.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L198a52.  v0:= temp @kind object;
  #L198a54.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198a5a.  throw v2;
}
procedure `okhttp3.Cookie$Builder` `path`(`okhttp3.Cookie$Builder` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/Cookie$Builder;.path:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L198a6c.  v0:= "path" @kind object;
  #L198a70.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L198a76.  v0:= "/" @kind object;
  #L198a7a.  v1:= 0I;
  #L198a7c.  v2:= 2I;
  #L198a7e.  v3:= 0I;
  #L198a80.  call temp:= `startsWith$default`(v5, v0, v1, v2, v3) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @kind static;
  #L198a86.  v0:= temp;
  #L198a88.  if v0 == 0 then goto L198a92;
  #L198a8c.  v4.`okhttp3.Cookie$Builder.e` @type ^`java.lang.String` := v5 @kind object;
  #L198a90.  return v4 @kind object;
  #L198a92.  v5:= new `java.lang.IllegalArgumentException`;
  #L198a96.  v0:= "path must start with '/'" @kind object;
  #L198a9a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L198aa0.  v0:= temp @kind object;
  #L198aa2.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198aa8.  throw v5;
}
procedure `okhttp3.Cookie$Builder` `secure`(`okhttp3.Cookie$Builder` v1 @kind this) @signature `Lokhttp3/Cookie$Builder;.secure:()Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L198abc.  v0:= 1I;
  #L198abe.  v1.`okhttp3.Cookie$Builder.f` @type ^`boolean` := v0 @kind boolean;
  #L198ac2.  return v1 @kind object;
}
procedure `okhttp3.Cookie$Builder` `value`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.value:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L198ad4.  v0:= "value" @kind object;
  #L198ad8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L198ade.  call temp:= `trim`(v2) @signature `Lkotlin/text/StringsKt;.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L198ae4.  v0:= temp @kind object;
  #L198ae6.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L198aec.  v0:= temp @kind object;
  #L198aee.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L198af4.  v0:= temp;
  #L198af6.  if v0 == 0 then goto L198b00;
  #L198afa.  v1.`okhttp3.Cookie$Builder.b` @type ^`java.lang.String` := v2 @kind object;
  #L198afe.  return v1 @kind object;
  #L198b00.  v2:= new `java.lang.IllegalArgumentException`;
  #L198b04.  v0:= "value is not trimmed" @kind object;
  #L198b08.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L198b0e.  v0:= temp @kind object;
  #L198b10.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198b16.  throw v2;
}
