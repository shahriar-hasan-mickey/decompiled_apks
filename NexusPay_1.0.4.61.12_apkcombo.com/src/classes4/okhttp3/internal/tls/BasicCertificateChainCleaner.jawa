record `okhttp3.internal.tls.BasicCertificateChainCleaner` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.tls.CertificateChainCleaner` @kind class {
  `okhttp3.internal.tls.TrustRootIndex` `okhttp3.internal.tls.BasicCertificateChainCleaner.a` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.tls.BasicCertificateChainCleaner$Companion` `@@okhttp3.internal.tls.BasicCertificateChainCleaner.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c3e84.  v0:= new `okhttp3.internal.tls.BasicCertificateChainCleaner$Companion`;
  #L1c3e88.  v1:= 0I;
  #L1c3e8a.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1c3e90.  `@@okhttp3.internal.tls.BasicCertificateChainCleaner.Companion` @type ^`okhttp3.internal.tls.BasicCertificateChainCleaner$Companion` := v0 @kind object;
  #L1c3e94.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.tls.BasicCertificateChainCleaner` v1 @kind this, `okhttp3.internal.tls.TrustRootIndex` v2 @kind object) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.<init>:(Lokhttp3/internal/tls/TrustRootIndex;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c3ea8.  v0:= "trustRootIndex" @kind object;
  #L1c3eac.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1c3eb2.  call `<init>`(v1) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.<init>:()V` @kind direct;
  #L1c3eb8.  v1.`okhttp3.internal.tls.BasicCertificateChainCleaner.a` @type ^`okhttp3.internal.tls.TrustRootIndex` := v2 @kind object;
  #L1c3ebc.  return @kind void;
}
procedure `boolean` `a`(`okhttp3.internal.tls.BasicCertificateChainCleaner` v3 @kind this, `java.security.cert.X509Certificate` v4 @kind object, `java.security.cert.X509Certificate` v5 @kind object) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1c3c88.  call temp:= `getIssuerDN`(v4) @signature `Ljava/security/cert/X509Certificate;.getIssuerDN:()Ljava/security/Principal;` @kind virtual;
  #L1c3c8e.  v0:= temp @kind object;
  #L1c3c90.  call temp:= `getSubjectDN`(v5) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L1c3c96.  v1:= temp @kind object;
  #L1c3c98.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1c3c9e.  v0:= temp;
  #L1c3ca0.  v1:= 1I;
  #L1c3ca2.  v0:= v0 ^~ v1 @kind int;
  #L1c3ca4.  v2:= 0I;
  #L1c3ca6.  if v0 == 0 then goto L1c3cac;
  #L1c3caa.  return v2;
  #L1c3cac.  call temp:= `getPublicKey`(v5) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L1c3cb2.  v5:= temp @kind object;
  #L1c3cb4.  call `verify`(v4, v5) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L1c3cba.  goto L1c3cbe;
  #L1c3cbc.  v1:= 0I;
  #L1c3cbe.  return v1;
  catch `java.security.GeneralSecurityException` @[L1c3cac..L1c3cba] goto L1c3cbc;
}
procedure `java.util.List` `clean`(`okhttp3.internal.tls.BasicCertificateChainCleaner` v7 @kind this, `java.util.List` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.clean:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1c3d00.  v0:= "chain" @kind object;
  #L1c3d04.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1c3d0a.  v0:= "hostname" @kind object;
  #L1c3d0e.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1c3d14.  v9:= new `java.util.ArrayDeque`;
  #L1c3d18.  call `<init>`(v9, v8) @signature `Ljava/util/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1c3d1e.  v8:= new `java.util.ArrayList`;
  #L1c3d22.  call `<init>`(v8) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c3d28.  call temp:= `removeFirst`(v9) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L1c3d2e.  v0:= temp @kind object;
  #L1c3d30.  v1:= "queue.removeFirst()" @kind object;
  #L1c3d34.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1c3d3a.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c3d40.  v0:= 0I;
  #L1c3d42.  v1:= 0I;
  #L1c3d44.  v2:= 9I;
  #L1c3d48.  if v0 >= v2 then goto L1c3e46;
  #L1c3d4c.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3d52.  v2:= temp;
  #L1c3d54.  v3:= 1I;
  #L1c3d56.  v2:= v2 - v3 @kind int;
  #L1c3d58.  call temp:= `get`(v8, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3d5e.  v2:= temp @kind object;
  #L1c3d60.  v4:= "null cannot be cast to non-null type java.security.cert.X509Certificate" @kind object;
  #L1c3d64.  if v2 == 0 then goto L1c3e3a;
  #L1c3d68.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L1c3d6c.  v5:= v7.`okhttp3.internal.tls.BasicCertificateChainCleaner.a` @type ^`okhttp3.internal.tls.TrustRootIndex` @kind object;
  #L1c3d70.  call temp:= `findByIssuerAndSignature`(v5, v2) @signature `Lokhttp3/internal/tls/TrustRootIndex;.findByIssuerAndSignature:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @kind interface;
  #L1c3d76.  v5:= temp @kind object;
  #L1c3d78.  if v5 == 0 then goto L1c3dae;
  #L1c3d7c.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3d82.  v1:= temp;
  #L1c3d84.  if v1 > v3 then goto L1c3d96;
  #L1c3d88.  call temp:= `areEqual`(v2, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1c3d8e.  v1:= temp;
  #L1c3d90.  v1:= v1 ^~ v3 @kind int;
  #L1c3d92.  if v1 == 0 then goto L1c3d9c;
  #L1c3d96.  call temp:= `add`(v8, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c3d9c.  call temp:= `a`(v7, v5, v5) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L1c3da2.  v1:= temp;
  #L1c3da4.  if v1 == 0 then goto L1c3daa;
  #L1c3da8.  return v8 @kind object;
  #L1c3daa.  v1:= 1I;
  #L1c3dac.  goto L1c3df4;
  #L1c3dae.  call temp:= `iterator`(v9) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c3db4.  v3:= temp @kind object;
  #L1c3db6.  v5:= "queue.iterator()" @kind object;
  #L1c3dba.  call `checkNotNullExpressionValue`(v3, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1c3dc0.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c3dc6.  v5:= temp;
  #L1c3dc8.  if v5 == 0 then goto L1c3e06;
  #L1c3dcc.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c3dd2.  v5:= temp @kind object;
  #L1c3dd4.  if v5 == 0 then goto L1c3dfa;
  #L1c3dd8.  v5:= (`java.security.cert.X509Certificate`) v5 @kind object;
  #L1c3ddc.  call temp:= `a`(v7, v2, v5) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L1c3de2.  v6:= temp;
  #L1c3de4.  if v6 == 0 then goto L1c3dc0;
  #L1c3de8.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L1c3dee.  call temp:= `add`(v8, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c3df4.  v0:= v0 + 1;
  #L1c3df8.  goto L1c3d44;
  #L1c3dfa.  v8:= new `java.lang.NullPointerException`;
  #L1c3dfe.  call `<init>`(v8, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3e04.  throw v8;
  #L1c3e06.  if v1 == 0 then goto L1c3e0c;
  #L1c3e0a.  return v8 @kind object;
  #L1c3e0c.  v8:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L1c3e10.  v9:= new `java.lang.StringBuilder`;
  #L1c3e14.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c3e1a.  v0:= "Failed to find a trusted cert that signed " @kind object;
  #L1c3e1e.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e24.  call temp:= `append`(v9, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e2a.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c3e30.  v9:= temp @kind object;
  #L1c3e32.  call `<init>`(v8, v9) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3e38.  throw v8;
  #L1c3e3a.  v8:= new `java.lang.NullPointerException`;
  #L1c3e3e.  call `<init>`(v8, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3e44.  throw v8;
  #L1c3e46.  v9:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L1c3e4a.  v0:= new `java.lang.StringBuilder`;
  #L1c3e4e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c3e54.  v1:= "Certificate chain too long: " @kind object;
  #L1c3e58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e5e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e64.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c3e6a.  v8:= temp @kind object;
  #L1c3e6c.  call `<init>`(v9, v8) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3e72.  throw v9;
}
procedure `boolean` `equals`(`okhttp3.internal.tls.BasicCertificateChainCleaner` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c3c48.  v0:= 1I;
  #L1c3c4a.  if v3 != v2 then goto L1c3c50;
  #L1c3c4e.  goto L1c3c74;
  #L1c3c50.  v1:= instanceof @variable v3 @type ^`okhttp3.internal.tls.BasicCertificateChainCleaner` @kind boolean;
  #L1c3c54.  if v1 == 0 then goto L1c3c72;
  #L1c3c58.  v3:= (`okhttp3.internal.tls.BasicCertificateChainCleaner`) v3 @kind object;
  #L1c3c5c.  v3:= v3.`okhttp3.internal.tls.BasicCertificateChainCleaner.a` @type ^`okhttp3.internal.tls.TrustRootIndex` @kind object;
  #L1c3c60.  v1:= v2.`okhttp3.internal.tls.BasicCertificateChainCleaner.a` @type ^`okhttp3.internal.tls.TrustRootIndex` @kind object;
  #L1c3c64.  call temp:= `areEqual`(v3, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1c3c6a.  v3:= temp;
  #L1c3c6c.  if v3 == 0 then goto L1c3c72;
  #L1c3c70.  goto L1c3c74;
  #L1c3c72.  v0:= 0I;
  #L1c3c74.  return v0;
}
procedure `int` `hashCode`(`okhttp3.internal.tls.BasicCertificateChainCleaner` v1 @kind this) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3ce0.  v0:= v1.`okhttp3.internal.tls.BasicCertificateChainCleaner.a` @type ^`okhttp3.internal.tls.TrustRootIndex` @kind object;
  #L1c3ce4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c3cea.  v0:= temp;
  #L1c3cec.  return v0;
}
