record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Hpack$Writer.a` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.b` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag PUBLIC;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag PUBLIC;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.e` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag PUBLIC;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag PUBLIC;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this, `int` v7 , `okio.Buffer` v8 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(ILokio/Buffer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b74d8.  v2:= 0I;
  #L1b74da.  v4:= 2I;
  #L1b74dc.  v5:= 0I;
  #L1b74de.  v0:= v6 @kind object;
  #L1b74e0.  v1:= v7;
  #L1b74e2.  v3:= v8 @kind object;
  #L1b74e4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1b74ea.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `boolean` v3 , `okio.Buffer` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b7454.  v0:= "out" @kind object;
  #L1b7458.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b745e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b7464.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L1b7468.  v1.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`boolean` := v3 @kind boolean;
  #L1b746c.  v1.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` := v4 @kind object;
  #L1b7470.  v3:= 2147483647I;
  #L1b7476.  v1.`okhttp3.internal.http2.Hpack$Writer.a` @type ^`int` := v3;
  #L1b747a.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L1b747e.  v2:= 8I;
  #L1b7482.  v2:= new `okhttp3.internal.http2.Header`[v2];
  #L1b7486.  v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v2 @kind object;
  #L1b748a.  v2:= length @variable v2;
  #L1b748c.  v2:= v2 + -1;
  #L1b7490.  v1.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int` := v2;
  #L1b7494.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v0 @kind this, `int` v1 , `boolean` v2 , `okio.Buffer` v3 @kind object, `int` v4 , `kotlin.jvm.internal.DefaultConstructorMarker` v5 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1b74a8.  v5:= v4 ^& 1;
  #L1b74ac.  if v5 == 0 then goto L1b74b4;
  #L1b74b0.  v1:= 4096I;
  #L1b74b4.  v4:= v4 ^& 2;
  #L1b74b8.  if v4 == 0 then goto L1b74be;
  #L1b74bc.  v2:= 1I;
  #L1b74be.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L1b74c4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this, `okio.Buffer` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b74fc.  v1:= 0I;
  #L1b74fe.  v2:= 0I;
  #L1b7500.  v4:= 3I;
  #L1b7502.  v5:= 0I;
  #L1b7504.  v0:= v6 @kind object;
  #L1b7506.  v3:= v7 @kind object;
  #L1b7508.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1b750e.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1b7520.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1b7524.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1b7528.  if v0 >= v1 then goto L1b7540;
  #L1b752c.  if v0 != 0 then goto L1b7538;
  #L1b7530.  call `b`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.b:()V` @kind direct;
  #L1b7536.  goto L1b7540;
  #L1b7538.  v1:= v1 - v0 @kind int;
  #L1b753a.  call temp:= `c`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.c:(I)I` @kind direct;
  #L1b7540.  return @kind void;
}
procedure `void` `b`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b7554.  v0:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7558.  v1:= 0I;
  #L1b755a.  v2:= 0I;
  #L1b755c.  v3:= 0I;
  #L1b755e.  v4:= 6I;
  #L1b7560.  v5:= 0I;
  #L1b7562.  call `fill$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill$default:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L1b7568.  v0:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b756c.  v0:= length @variable v0;
  #L1b756e.  v0:= v0 + -1;
  #L1b7572.  v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int` := v0;
  #L1b7576.  v0:= 0I;
  #L1b7578.  v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v0;
  #L1b757c.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v0;
  #L1b7580.  return @kind void;
}
procedure `int` `c`(`okhttp3.internal.http2.Hpack$Writer` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.c:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b73a0.  v0:= 0I;
  #L1b73a2.  if v5 <= 0 then goto L1b7442;
  #L1b73a6.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b73aa.  v1:= length @variable v1;
  #L1b73ac.  v1:= v1 + -1;
  #L1b73b0.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b73b4.  if v1 < v2 then goto L1b7402;
  #L1b73b8.  if v5 <= 0 then goto L1b7402;
  #L1b73bc.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b73c0.  v2:= v2[v1] @kind object;
  #L1b73c4.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b73ca.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1b73ce.  v5:= v5 - v2 @kind int;
  #L1b73d0.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1b73d4.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b73d8.  v3:= v3[v1] @kind object;
  #L1b73dc.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b73e2.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1b73e6.  v2:= v2 - v3 @kind int;
  #L1b73e8.  v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1b73ec.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1b73f0.  v2:= v2 + -1;
  #L1b73f4.  v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1b73f8.  v0:= v0 + 1;
  #L1b73fc.  v1:= v1 + -1;
  #L1b7400.  goto L1b73b0;
  #L1b7402.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7406.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b740a.  v2:= v1 + 1;
  #L1b740e.  v1:= v1 + 1;
  #L1b7412.  v1:= v1 + v0 @kind int;
  #L1b7414.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1b7418.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b741e.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7422.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b7426.  v2:= v1 + 1;
  #L1b742a.  v1:= v1 + 1;
  #L1b742e.  v1:= v1 + v0 @kind int;
  #L1b7430.  v3:= 0I;
  #L1b7432.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L1b7438.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b743c.  v5:= v5 + v0 @kind int;
  #L1b743e.  v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int` := v5;
  #L1b7442.  return v0;
}
procedure `void` `d`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this, `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b7594.  v0:= v7.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1b7598.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1b759c.  if v0 <= v1 then goto L1b75a8;
  #L1b75a0.  call `b`(v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.b:()V` @kind direct;
  #L1b75a6.  return @kind void;
  #L1b75a8.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1b75ac.  v2:= v2 + v0 @kind int;
  #L1b75ae.  v2:= v2 - v1 @kind int;
  #L1b75b0.  call temp:= `c`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.c:(I)I` @kind direct;
  #L1b75b6.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1b75ba.  v1:= v1 + 1;
  #L1b75be.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b75c2.  v3:= length @variable v2;
  #L1b75c4.  if v1 <= v3 then goto L1b75f0;
  #L1b75c8.  v1:= length @variable v2;
  #L1b75ca.  v1:= v1 * 2;
  #L1b75ce.  v1:= new `okhttp3.internal.http2.Header`[v1];
  #L1b75d2.  v3:= 0I;
  #L1b75d4.  v4:= length @variable v2;
  #L1b75d6.  v5:= length @variable v2;
  #L1b75d8.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b75de.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b75e2.  v2:= length @variable v2;
  #L1b75e4.  v2:= v2 + -1;
  #L1b75e8.  v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int` := v2;
  #L1b75ec.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v1 @kind object;
  #L1b75f0.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b75f4.  v2:= v1 + -1;
  #L1b75f8.  v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int` := v2;
  #L1b75fc.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7600.  v2[v1]:= v7 @kind object;
  #L1b7604.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1b7608.  v7:= v7 + 1;
  #L1b760c.  v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v7;
  #L1b7610.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1b7614.  v7:= v7 + v0 @kind int;
  #L1b7616.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v7;
  #L1b761a.  return @kind void;
}
procedure `void` `resizeHeaderTable`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.resizeHeaderTable:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1b762c.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L1b7630.  v0:= 16384I;
  #L1b7634.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1b763a.  v2:= temp;
  #L1b763c.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1b7640.  if v0 != v2 then goto L1b7646;
  #L1b7644.  return @kind void;
  #L1b7646.  if v2 >= v0 then goto L1b765a;
  #L1b764a.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.a` @type ^`int`;
  #L1b764e.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1b7654.  v0:= temp;
  #L1b7656.  v1.`okhttp3.internal.http2.Hpack$Writer.a` @type ^`int` := v0;
  #L1b765a.  v0:= 1I;
  #L1b765c.  v1.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`boolean` := v0 @kind boolean;
  #L1b7660.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L1b7664.  call `a`(v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.a:()V` @kind direct;
  #L1b766a.  return @kind void;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `okio.ByteString` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b767c.  v0:= "data" @kind object;
  #L1b7680.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b7686.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`boolean` @kind boolean;
  #L1b768a.  v1:= 127I;
  #L1b768e.  if v0 == 0 then goto L1b76e4;
  #L1b7692.  v0:= `@@okhttp3.internal.http2.Huffman.INSTANCE` @type ^`okhttp3.internal.http2.Huffman` @kind object;
  #L1b7696.  call temp:= `encodedLength`(v0, v4) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L1b769c.  v0:= temp;
  #L1b769e.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1b76a4.  v2:= temp;
  #L1b76a6.  if v0 >= v2 then goto L1b76e4;
  #L1b76aa.  v0:= new `okio.Buffer`;
  #L1b76ae.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1b76b4.  v2:= `@@okhttp3.internal.http2.Huffman.INSTANCE` @type ^`okhttp3.internal.http2.Huffman` @kind object;
  #L1b76b8.  call `encode`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L1b76be.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b76c4.  v4:= temp @kind object;
  #L1b76c6.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1b76cc.  v0:= temp;
  #L1b76ce.  v2:= 128I;
  #L1b76d2.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1b76d8.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` @kind object;
  #L1b76dc.  call temp:= `write`(v0, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1b76e2.  goto L1b76fe;
  #L1b76e4.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1b76ea.  v0:= temp;
  #L1b76ec.  v2:= 0I;
  #L1b76ee.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1b76f4.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` @kind object;
  #L1b76f8.  call temp:= `write`(v0, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1b76fe.  return @kind void;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1b7710.  v0:= "headerBlock" @kind object;
  #L1b7714.  call `checkNotNullParameter`(v14, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b771a.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`boolean` @kind boolean;
  #L1b771e.  v1:= 0I;
  #L1b7720.  if v0 == 0 then goto L1b7756;
  #L1b7724.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.a` @type ^`int`;
  #L1b7728.  v2:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1b772c.  v3:= 32I;
  #L1b7730.  v4:= 31I;
  #L1b7734.  if v0 >= v2 then goto L1b773e;
  #L1b7738.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1b773e.  v13.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`boolean` := v1 @kind boolean;
  #L1b7742.  v0:= 2147483647I;
  #L1b7748.  v13.`okhttp3.internal.http2.Hpack$Writer.a` @type ^`int` := v0;
  #L1b774c.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1b7750.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1b7756.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b775c.  v0:= temp;
  #L1b775e.  v2:= 0I;
  #L1b7760.  if v2 >= v0 then goto L1b7930;
  #L1b7764.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1b776a.  v3:= temp @kind object;
  #L1b776c.  v3:= (`okhttp3.internal.http2.Header`) v3 @kind object;
  #L1b7770.  v4:= v3.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1b7774.  call temp:= `toAsciiLowercase`(v4) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L1b777a.  v4:= temp @kind object;
  #L1b777c.  v5:= v3.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1b7780.  v6:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b7784.  call temp:= `getNAME_TO_FIRST_INDEX`(v6) @signature `Lokhttp3/internal/http2/Hpack;.getNAME_TO_FIRST_INDEX:()Ljava/util/Map;` @kind virtual;
  #L1b778a.  v6:= temp @kind object;
  #L1b778c.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1b7792.  v6:= temp @kind object;
  #L1b7794.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L1b7798.  v7:= -1I;
  #L1b779a.  if v6 == 0 then goto L1b7812;
  #L1b779e.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1b77a4.  v6:= temp;
  #L1b77a6.  v6:= v6 + 1;
  #L1b77aa.  v8:= 7I;
  #L1b77ac.  v9:= 2I;
  #L1b77ae.  if v9 <= v6 then goto L1b77b4;
  #L1b77b2.  goto L1b780c;
  #L1b77b4.  if v8 < v6 then goto L1b780c;
  #L1b77b8.  v8:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b77bc.  call temp:= `getSTATIC_HEADER_TABLE`(v8) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b77c2.  v8:= temp @kind object;
  #L1b77c4.  v9:= v6 + -1;
  #L1b77c8.  v8:= v8[v9] @kind object;
  #L1b77cc.  v8:= v8.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1b77d0.  call temp:= `areEqual`(v8, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1b77d6.  v8:= temp;
  #L1b77d8.  if v8 == 0 then goto L1b77e0;
  #L1b77dc.  v8:= v6;
  #L1b77de.  goto L1b7816;
  #L1b77e0.  v8:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b77e4.  call temp:= `getSTATIC_HEADER_TABLE`(v8) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b77ea.  v8:= temp @kind object;
  #L1b77ec.  v8:= v8[v6] @kind object;
  #L1b77f0.  v8:= v8.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1b77f4.  call temp:= `areEqual`(v8, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1b77fa.  v8:= temp;
  #L1b77fc.  if v8 == 0 then goto L1b780c;
  #L1b7800.  v8:= v6 + 1;
  #L1b7804.  v12:= v8;
  #L1b7806.  v8:= v6;
  #L1b7808.  v6:= v12;
  #L1b780a.  goto L1b7816;
  #L1b780c.  v8:= v6;
  #L1b780e.  v6:= -1I;
  #L1b7810.  goto L1b7816;
  #L1b7812.  v6:= -1I;
  #L1b7814.  v8:= -1I;
  #L1b7816.  if v6 != v7 then goto L1b78a2;
  #L1b781a.  v9:= v13.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b781e.  v9:= v9 + 1;
  #L1b7822.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7826.  v10:= length @variable v10;
  #L1b7828.  if v9 >= v10 then goto L1b78a2;
  #L1b782c.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7830.  v11:= v11[v9] @kind object;
  #L1b7834.  call `checkNotNull`(v11) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b783a.  v11:= v11.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1b783e.  call temp:= `areEqual`(v11, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1b7844.  v11:= temp;
  #L1b7846.  if v11 == 0 then goto L1b789c;
  #L1b784a.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b784e.  v11:= v11[v9] @kind object;
  #L1b7852.  call `checkNotNull`(v11) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b7858.  v11:= v11.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1b785c.  call temp:= `areEqual`(v11, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1b7862.  v11:= temp;
  #L1b7864.  if v11 == 0 then goto L1b7880;
  #L1b7868.  v6:= v13.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b786c.  v9:= v9 - v6 @kind int;
  #L1b786e.  v6:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b7872.  call temp:= `getSTATIC_HEADER_TABLE`(v6) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b7878.  v6:= temp @kind object;
  #L1b787a.  v6:= length @variable v6;
  #L1b787c.  v6:= v6 + v9 @kind int;
  #L1b787e.  goto L1b78a2;
  #L1b7880.  if v8 != v7 then goto L1b789c;
  #L1b7884.  v8:= v13.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`int`;
  #L1b7888.  v8:= v9 - v8 @kind int;
  #L1b788c.  v11:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b7890.  call temp:= `getSTATIC_HEADER_TABLE`(v11) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b7896.  v11:= temp @kind object;
  #L1b7898.  v11:= length @variable v11;
  #L1b789a.  v8:= v8 + v11 @kind int;
  #L1b789c.  v9:= v9 + 1;
  #L1b78a0.  goto L1b7828;
  #L1b78a2.  if v6 == v7 then goto L1b78b6;
  #L1b78a6.  v3:= 127I;
  #L1b78aa.  v4:= 128I;
  #L1b78ae.  call `writeInt`(v13, v6, v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1b78b4.  goto L1b7928;
  #L1b78b6.  v6:= 64I;
  #L1b78ba.  if v8 != v7 then goto L1b78dc;
  #L1b78be.  v7:= v13.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` @kind object;
  #L1b78c2.  call temp:= `writeByte`(v7, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1b78c8.  call `writeByteString`(v13, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1b78ce.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1b78d4.  call `d`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1b78da.  goto L1b7928;
  #L1b78dc.  v7:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L1b78e0.  call temp:= `startsWith`(v4, v7) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L1b78e6.  v7:= temp;
  #L1b78e8.  if v7 == 0 then goto L1b7912;
  #L1b78ec.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L1b78f0.  call temp:= `areEqual`(v7, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1b78f6.  v4:= temp;
  #L1b78f8.  v4:= v4 ^~ 1;
  #L1b78fc.  if v4 == 0 then goto L1b7912;
  #L1b7900.  v3:= 15I;
  #L1b7904.  call `writeInt`(v13, v8, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1b790a.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1b7910.  goto L1b7928;
  #L1b7912.  v4:= 63I;
  #L1b7916.  call `writeInt`(v13, v8, v4, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1b791c.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1b7922.  call `d`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1b7928.  v2:= v2 + 1;
  #L1b792c.  goto L1b7760;
  #L1b7930.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1b7944.  if v2 >= v3 then goto L1b7956;
  #L1b7948.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` @kind object;
  #L1b794c.  v2:= v2 ^| v4 @kind int;
  #L1b794e.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1b7954.  return @kind void;
  #L1b7956.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` @kind object;
  #L1b795a.  v4:= v4 ^| v3 @kind int;
  #L1b795c.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1b7962.  v2:= v2 - v3 @kind int;
  #L1b7964.  v3:= 128I;
  #L1b7968.  if v2 < v3 then goto L1b7982;
  #L1b796c.  v4:= v2 ^& 127;
  #L1b7970.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` @kind object;
  #L1b7974.  v3:= v3 ^| v4 @kind int;
  #L1b7976.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1b797c.  v2:= v2 ^>> 7;
  #L1b7980.  goto L1b7964;
  #L1b7982.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`okio.Buffer` @kind object;
  #L1b7986.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1b798c.  return @kind void;
}
