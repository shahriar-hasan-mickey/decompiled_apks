record `okhttp3.internal.http2.Hpack$Reader` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.internal.http2.Hpack$Reader.a` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSource` `okhttp3.internal.http2.Hpack$Reader.b` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Reader.c` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Reader.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Reader.dynamicTable` @AccessFlag PUBLIC;
  `int` `okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @AccessFlag PUBLIC;
  `int` `okhttp3.internal.http2.Hpack$Reader.e` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Reader.headerCount` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v6 @kind this, `okio.Source` v7 @kind object, `int` v8 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(Lokio/Source;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b6ed8.  v3:= 0I;
  #L1b6eda.  v4:= 4I;
  #L1b6edc.  v5:= 0I;
  #L1b6ede.  v0:= v6 @kind object;
  #L1b6ee0.  v1:= v7 @kind object;
  #L1b6ee2.  v2:= v8;
  #L1b6ee4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(Lokio/Source;IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1b6eea.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `okio.Source` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(Lokio/Source;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b6efc.  v0:= "source" @kind object;
  #L1b6f00.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b6f06.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b6f0c.  v1.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int` := v3;
  #L1b6f10.  v1.`okhttp3.internal.http2.Hpack$Reader.e` @type ^`int` := v4;
  #L1b6f14.  v3:= new `java.util.ArrayList`;
  #L1b6f18.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b6f1e.  v1.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` := v3 @kind object;
  #L1b6f22.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1b6f28.  v2:= temp @kind object;
  #L1b6f2a.  v1.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`okio.BufferedSource` := v2 @kind object;
  #L1b6f2e.  v2:= 8I;
  #L1b6f32.  v2:= new `okhttp3.internal.http2.Header`[v2];
  #L1b6f36.  v1.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v2 @kind object;
  #L1b6f3a.  v2:= length @variable v2;
  #L1b6f3c.  v2:= v2 + -1;
  #L1b6f40.  v1.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v2;
  #L1b6f44.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v0 @kind this, `okio.Source` v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `kotlin.jvm.internal.DefaultConstructorMarker` v5 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(Lokio/Source;IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1b6f58.  v4:= v4 ^& 4;
  #L1b6f5c.  if v4 == 0 then goto L1b6f62;
  #L1b6f60.  v3:= v2;
  #L1b6f62.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(Lokio/Source;II)V` @kind direct;
  #L1b6f68.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1b6f7c.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.e` @type ^`int`;
  #L1b6f80.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1b6f84.  if v0 >= v1 then goto L1b6f9c;
  #L1b6f88.  if v0 != 0 then goto L1b6f94;
  #L1b6f8c.  call `b`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.b:()V` @kind direct;
  #L1b6f92.  goto L1b6f9c;
  #L1b6f94.  v1:= v1 - v0 @kind int;
  #L1b6f96.  call temp:= `d`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.d:(I)I` @kind direct;
  #L1b6f9c.  return @kind void;
}
procedure `void` `b`(`okhttp3.internal.http2.Hpack$Reader` v6 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b6fb0.  v0:= v6.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b6fb4.  v1:= 0I;
  #L1b6fb6.  v2:= 0I;
  #L1b6fb8.  v3:= 0I;
  #L1b6fba.  v4:= 6I;
  #L1b6fbc.  v5:= 0I;
  #L1b6fbe.  call `fill$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill$default:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L1b6fc4.  v0:= v6.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b6fc8.  v0:= length @variable v0;
  #L1b6fca.  v0:= v0 + -1;
  #L1b6fce.  v6.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v0;
  #L1b6fd2.  v0:= 0I;
  #L1b6fd4.  v6.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v0;
  #L1b6fd8.  v6.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v0;
  #L1b6fdc.  return @kind void;
}
procedure `int` `c`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1b6c80.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L1b6c84.  v0:= v0 + 1;
  #L1b6c88.  v0:= v0 + v2 @kind int;
  #L1b6c8a.  return v0;
}
procedure `int` `d`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.d:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b6c9c.  v0:= 0I;
  #L1b6c9e.  if v5 <= 0 then goto L1b6d12;
  #L1b6ca2.  v1:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b6ca6.  v1:= length @variable v1;
  #L1b6ca8.  v1:= v1 + -1;
  #L1b6cac.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L1b6cb0.  if v1 < v2 then goto L1b6cec;
  #L1b6cb4.  if v5 <= 0 then goto L1b6cec;
  #L1b6cb8.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b6cbc.  v2:= v2[v1] @kind object;
  #L1b6cc0.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b6cc6.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1b6cca.  v5:= v5 - v2 @kind int;
  #L1b6ccc.  v3:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1b6cd0.  v3:= v3 - v2 @kind int;
  #L1b6cd2.  v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v3;
  #L1b6cd6.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1b6cda.  v2:= v2 + -1;
  #L1b6cde.  v4.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v2;
  #L1b6ce2.  v0:= v0 + 1;
  #L1b6ce6.  v1:= v1 + -1;
  #L1b6cea.  goto L1b6cac;
  #L1b6cec.  v5:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b6cf0.  v1:= v4.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L1b6cf4.  v2:= v1 + 1;
  #L1b6cf8.  v1:= v1 + 1;
  #L1b6cfc.  v1:= v1 + v0 @kind int;
  #L1b6cfe.  v3:= v4.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1b6d02.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b6d08.  v5:= v4.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L1b6d0c.  v5:= v5 + v0 @kind int;
  #L1b6d0e.  v4.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v5;
  #L1b6d12.  return v0;
}
procedure `okio.ByteString` `e`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.e:(I)Lokio/ByteString;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b6dd0.  call temp:= `g`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.g:(I)Z` @kind direct;
  #L1b6dd6.  v0:= temp;
  #L1b6dd8.  if v0 == 0 then goto L1b6df2;
  #L1b6ddc.  v0:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b6de0.  call temp:= `getSTATIC_HEADER_TABLE`(v0) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b6de6.  v0:= temp @kind object;
  #L1b6de8.  v4:= v0[v4] @kind object;
  #L1b6dec.  v4:= v4.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1b6df0.  goto L1b6e28;
  #L1b6df2.  v0:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b6df6.  call temp:= `getSTATIC_HEADER_TABLE`(v0) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b6dfc.  v0:= temp @kind object;
  #L1b6dfe.  v0:= length @variable v0;
  #L1b6e00.  v0:= v4 - v0 @kind int;
  #L1b6e04.  call temp:= `c`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(I)I` @kind direct;
  #L1b6e0a.  v0:= temp;
  #L1b6e0c.  if v0 < 0 then goto L1b6e2a;
  #L1b6e10.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b6e14.  v2:= length @variable v1;
  #L1b6e16.  if v0 >= v2 then goto L1b6e2a;
  #L1b6e1a.  v4:= v1[v0] @kind object;
  #L1b6e1e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b6e24.  v4:= v4.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1b6e28.  return v4 @kind object;
  #L1b6e2a.  v0:= new `java.io.IOException`;
  #L1b6e2e.  v1:= new `java.lang.StringBuilder`;
  #L1b6e32.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b6e38.  v2:= "Header index too large " @kind object;
  #L1b6e3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b6e42.  v4:= v4 + 1;
  #L1b6e46.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b6e4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b6e52.  v4:= temp @kind object;
  #L1b6e54.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b6e5a.  throw v0;
}
procedure `void` `f`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this, `int` v6 , `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.f:(ILokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b6ff0.  v0:= v5.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` @kind object;
  #L1b6ff4.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b6ffa.  v0:= v7.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1b6ffe.  v1:= -1I;
  #L1b7000.  if v6 == v1 then goto L1b7020;
  #L1b7004.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7008.  call temp:= `c`(v5, v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(I)I` @kind direct;
  #L1b700e.  v3:= temp;
  #L1b7010.  v2:= v2[v3] @kind object;
  #L1b7014.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b701a.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1b701e.  v0:= v0 - v2 @kind int;
  #L1b7020.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.e` @type ^`int`;
  #L1b7024.  if v0 <= v2 then goto L1b7030;
  #L1b7028.  call `b`(v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.b:()V` @kind direct;
  #L1b702e.  return @kind void;
  #L1b7030.  v3:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1b7034.  v3:= v3 + v0 @kind int;
  #L1b7036.  v3:= v3 - v2 @kind int;
  #L1b7038.  call temp:= `d`(v5, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.d:(I)I` @kind direct;
  #L1b703e.  v2:= temp;
  #L1b7040.  if v6 != v1 then goto L1b70a0;
  #L1b7044.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1b7048.  v6:= v6 + 1;
  #L1b704c.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7050.  v2:= length @variable v1;
  #L1b7052.  if v6 <= v2 then goto L1b707e;
  #L1b7056.  v6:= length @variable v1;
  #L1b7058.  v6:= v6 * 2;
  #L1b705c.  v6:= new `okhttp3.internal.http2.Header`[v6];
  #L1b7060.  v2:= 0I;
  #L1b7062.  v3:= length @variable v1;
  #L1b7064.  v4:= length @variable v1;
  #L1b7066.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b706c.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7070.  v1:= length @variable v1;
  #L1b7072.  v1:= v1 + -1;
  #L1b7076.  v5.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v1;
  #L1b707a.  v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v6 @kind object;
  #L1b707e.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L1b7082.  v1:= v6 + -1;
  #L1b7086.  v5.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v1;
  #L1b708a.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b708e.  v1[v6]:= v7 @kind object;
  #L1b7092.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1b7096.  v6:= v6 + 1;
  #L1b709a.  v5.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v6;
  #L1b709e.  goto L1b70b4;
  #L1b70a0.  call temp:= `c`(v5, v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(I)I` @kind direct;
  #L1b70a6.  v1:= temp;
  #L1b70a8.  v1:= v1 + v2 @kind int;
  #L1b70aa.  v6:= v6 + v1 @kind int;
  #L1b70ac.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b70b0.  v1[v6]:= v7 @kind object;
  #L1b70b4.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1b70b8.  v6:= v6 + v0 @kind int;
  #L1b70ba.  v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v6;
  #L1b70be.  return @kind void;
}
procedure `boolean` `g`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.g:(I)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1b6c50.  v0:= 1I;
  #L1b6c52.  if v3 < 0 then goto L1b6c6c;
  #L1b6c56.  v1:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b6c5a.  call temp:= `getSTATIC_HEADER_TABLE`(v1) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b6c60.  v1:= temp @kind object;
  #L1b6c62.  v1:= length @variable v1;
  #L1b6c64.  v1:= v1 - v0 @kind int;
  #L1b6c66.  if v3 > v1 then goto L1b6c6c;
  #L1b6c6a.  goto L1b6c6e;
  #L1b6c6c.  v0:= 0I;
  #L1b6c6e.  return v0;
}
procedure `int` `h`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.h:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1b6d3c.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`okio.BufferedSource` @kind object;
  #L1b6d40.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1b6d46.  v0:= temp;
  #L1b6d48.  v1:= 255I;
  #L1b6d4c.  call temp:= `and`(v0, v1) @signature `Lokhttp3/internal/Util;.and:(BI)I` @kind static;
  #L1b6d52.  v0:= temp;
  #L1b6d54.  return v0;
}
procedure `void` `i`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b7208.  call temp:= `g`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.g:(I)Z` @kind direct;
  #L1b720e.  v0:= temp;
  #L1b7210.  if v0 == 0 then goto L1b7230;
  #L1b7214.  v0:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b7218.  call temp:= `getSTATIC_HEADER_TABLE`(v0) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b721e.  v0:= temp @kind object;
  #L1b7220.  v4:= v0[v4] @kind object;
  #L1b7224.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` @kind object;
  #L1b7228.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b722e.  goto L1b726c;
  #L1b7230.  v0:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b7234.  call temp:= `getSTATIC_HEADER_TABLE`(v0) @signature `Lokhttp3/internal/http2/Hpack;.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;` @kind virtual;
  #L1b723a.  v0:= temp @kind object;
  #L1b723c.  v0:= length @variable v0;
  #L1b723e.  v0:= v4 - v0 @kind int;
  #L1b7242.  call temp:= `c`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(I)I` @kind direct;
  #L1b7248.  v0:= temp;
  #L1b724a.  if v0 < 0 then goto L1b726e;
  #L1b724e.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1b7252.  v2:= length @variable v1;
  #L1b7254.  if v0 >= v2 then goto L1b726e;
  #L1b7258.  v4:= v3.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` @kind object;
  #L1b725c.  v0:= v1[v0] @kind object;
  #L1b7260.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b7266.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b726c.  return @kind void;
  #L1b726e.  v0:= new `java.io.IOException`;
  #L1b7272.  v1:= new `java.lang.StringBuilder`;
  #L1b7276.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b727c.  v2:= "Header index too large " @kind object;
  #L1b7280.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b7286.  v4:= v4 + 1;
  #L1b728a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b7290.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b7296.  v4:= temp @kind object;
  #L1b7298.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b729e.  throw v0;
}
procedure `void` `j`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.j:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1b72b0.  call temp:= `e`(v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.e:(I)Lokio/ByteString;` @kind direct;
  #L1b72b6.  v3:= temp @kind object;
  #L1b72b8.  call temp:= `readByteString`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b72be.  v0:= temp @kind object;
  #L1b72c0.  v1:= new `okhttp3.internal.http2.Header`;
  #L1b72c4.  call `<init>`(v1, v3, v0) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1b72ca.  v3:= -1I;
  #L1b72cc.  call `f`(v2, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.f:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L1b72d2.  return @kind void;
}
procedure `void` `k`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.k:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b72e4.  v0:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b72e8.  call temp:= `readByteString`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b72ee.  v1:= temp @kind object;
  #L1b72f0.  call temp:= `checkLowercase`(v0, v1) @signature `Lokhttp3/internal/http2/Hpack;.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L1b72f6.  v0:= temp @kind object;
  #L1b72f8.  call temp:= `readByteString`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b72fe.  v1:= temp @kind object;
  #L1b7300.  v2:= new `okhttp3.internal.http2.Header`;
  #L1b7304.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1b730a.  v0:= -1I;
  #L1b730c.  call `f`(v3, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.f:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L1b7312.  return @kind void;
}
procedure `void` `l`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.l:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b7324.  call temp:= `e`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.e:(I)Lokio/ByteString;` @kind direct;
  #L1b732a.  v4:= temp @kind object;
  #L1b732c.  call temp:= `readByteString`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b7332.  v0:= temp @kind object;
  #L1b7334.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` @kind object;
  #L1b7338.  v2:= new `okhttp3.internal.http2.Header`;
  #L1b733c.  call `<init>`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1b7342.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b7348.  return @kind void;
}
procedure `void` `m`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.m:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b735c.  v0:= `@@okhttp3.internal.http2.Hpack.INSTANCE` @type ^`okhttp3.internal.http2.Hpack` @kind object;
  #L1b7360.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b7366.  v1:= temp @kind object;
  #L1b7368.  call temp:= `checkLowercase`(v0, v1) @signature `Lokhttp3/internal/http2/Hpack;.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L1b736e.  v0:= temp @kind object;
  #L1b7370.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b7376.  v1:= temp @kind object;
  #L1b7378.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` @kind object;
  #L1b737c.  v3:= new `okhttp3.internal.http2.Header`;
  #L1b7380.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1b7386.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b738c.  return @kind void;
}
procedure `java.util.List` `getAndResetHeaderList`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1b6da8.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` @kind object;
  #L1b6dac.  call temp:= `toList`(v0) @signature `Lkotlin/collections/CollectionsKt;.toList:(Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L1b6db2.  v0:= temp @kind object;
  #L1b6db4.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`java.util.List` @kind object;
  #L1b6db8.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1b6dbe.  return v0 @kind object;
}
procedure `int` `maxDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.maxDynamicTableByteCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1b6d24.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.e` @type ^`int`;
  #L1b6d28.  return v0;
}
procedure `okio.ByteString` `readByteString`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b6e6c.  call temp:= `h`(v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.h:()I` @kind direct;
  #L1b6e72.  v0:= temp;
  #L1b6e74.  v1:= v0 ^& 128;
  #L1b6e78.  v2:= 128I;
  #L1b6e7c.  if v1 != v2 then goto L1b6e84;
  #L1b6e80.  v1:= 1I;
  #L1b6e82.  goto L1b6e86;
  #L1b6e84.  v1:= 0I;
  #L1b6e86.  v2:= 127I;
  #L1b6e8a.  call temp:= `readInt`(v5, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1b6e90.  v0:= temp;
  #L1b6e92.  v2:= (`long`) v0 @kind i2l;
  #L1b6e94.  if v1 == 0 then goto L1b6eba;
  #L1b6e98.  v0:= new `okio.Buffer`;
  #L1b6e9c.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1b6ea2.  v1:= `@@okhttp3.internal.http2.Huffman.INSTANCE` @type ^`okhttp3.internal.http2.Huffman` @kind object;
  #L1b6ea6.  v4:= v5.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`okio.BufferedSource` @kind object;
  #L1b6eaa.  call `decode`(v1, v4, v2, v0) @signature `Lokhttp3/internal/http2/Huffman;.decode:(Lokio/BufferedSource;JLokio/BufferedSink;)V` @kind virtual;
  #L1b6eb0.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1b6eb6.  v0:= temp @kind object;
  #L1b6eb8.  goto L1b6ec6;
  #L1b6eba.  v0:= v5.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`okio.BufferedSource` @kind object;
  #L1b6ebe.  call temp:= `readByteString`(v0, v2) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L1b6ec4.  v0:= temp @kind object;
  #L1b6ec6.  return v0 @kind object;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readHeaders:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b70d0.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`okio.BufferedSource` @kind object;
  #L1b70d4.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L1b70da.  v0:= temp;
  #L1b70dc.  if v0 != 0 then goto L1b71f4;
  #L1b70e0.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`okio.BufferedSource` @kind object;
  #L1b70e4.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1b70ea.  v0:= temp;
  #L1b70ec.  v1:= 255I;
  #L1b70f0.  call temp:= `and`(v0, v1) @signature `Lokhttp3/internal/Util;.and:(BI)I` @kind static;
  #L1b70f6.  v0:= temp;
  #L1b70f8.  v1:= 128I;
  #L1b70fc.  if v0 == v1 then goto L1b71e4;
  #L1b7100.  v2:= v0 ^& 128;
  #L1b7104.  if v2 != v1 then goto L1b7120;
  #L1b7108.  v1:= 127I;
  #L1b710c.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1b7112.  v0:= temp;
  #L1b7114.  v0:= v0 + -1;
  #L1b7118.  call `i`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.i:(I)V` @kind direct;
  #L1b711e.  goto L1b70d0;
  #L1b7120.  v1:= 64I;
  #L1b7124.  if v0 != v1 then goto L1b7130;
  #L1b7128.  call `k`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.k:()V` @kind direct;
  #L1b712e.  goto L1b70d0;
  #L1b7130.  v2:= v0 ^& 64;
  #L1b7134.  if v2 != v1 then goto L1b7150;
  #L1b7138.  v1:= 63I;
  #L1b713c.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1b7142.  v0:= temp;
  #L1b7144.  v0:= v0 + -1;
  #L1b7148.  call `j`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.j:(I)V` @kind direct;
  #L1b714e.  goto L1b70d0;
  #L1b7150.  v1:= v0 ^& 32;
  #L1b7154.  v2:= 32I;
  #L1b7158.  if v1 != v2 then goto L1b71b2;
  #L1b715c.  v1:= 31I;
  #L1b7160.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1b7166.  v0:= temp;
  #L1b7168.  v3.`okhttp3.internal.http2.Hpack$Reader.e` @type ^`int` := v0;
  #L1b716c.  if v0 < 0 then goto L1b7180;
  #L1b7170.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int`;
  #L1b7174.  if v0 > v1 then goto L1b7180;
  #L1b7178.  call `a`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()V` @kind direct;
  #L1b717e.  goto L1b70d0;
  #L1b7180.  v0:= new `java.io.IOException`;
  #L1b7184.  v1:= new `java.lang.StringBuilder`;
  #L1b7188.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b718e.  v2:= "Invalid dynamic table size update " @kind object;
  #L1b7192.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b7198.  v2:= v3.`okhttp3.internal.http2.Hpack$Reader.e` @type ^`int`;
  #L1b719c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b71a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b71a8.  v1:= temp @kind object;
  #L1b71aa.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b71b0.  throw v0;
  #L1b71b2.  v1:= 16I;
  #L1b71b6.  if v0 == v1 then goto L1b71da;
  #L1b71ba.  if v0 != 0 then goto L1b71c0;
  #L1b71be.  goto L1b71da;
  #L1b71c0.  v1:= 15I;
  #L1b71c4.  call temp:= `readInt`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1b71ca.  v0:= temp;
  #L1b71cc.  v0:= v0 + -1;
  #L1b71d0.  call `l`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.l:(I)V` @kind direct;
  #L1b71d6.  goto L1b70d0;
  #L1b71da.  call `m`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.m:()V` @kind direct;
  #L1b71e0.  goto L1b70d0;
  #L1b71e4.  v0:= new `java.io.IOException`;
  #L1b71e8.  v1:= "index == 0" @kind object;
  #L1b71ec.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b71f2.  throw v0;
  #L1b71f4.  return @kind void;
}
procedure `int` `readInt`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1b6d68.  v3:= v3 ^& v4 @kind int;
  #L1b6d6a.  if v3 >= v4 then goto L1b6d70;
  #L1b6d6e.  return v3;
  #L1b6d70.  v3:= 0I;
  #L1b6d72.  call temp:= `h`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.h:()I` @kind direct;
  #L1b6d78.  v0:= temp;
  #L1b6d7a.  v1:= v0 ^& 128;
  #L1b6d7e.  if v1 == 0 then goto L1b6d90;
  #L1b6d82.  v0:= v0 ^& 127;
  #L1b6d86.  v0:= v0 ^< v3 @kind int;
  #L1b6d88.  v4:= v4 + v0 @kind int;
  #L1b6d8a.  v3:= v3 + 7;
  #L1b6d8e.  goto L1b6d72;
  #L1b6d90.  v3:= v0 ^< v3 @kind int;
  #L1b6d94.  v4:= v4 + v3 @kind int;
  #L1b6d96.  return v4;
}
