record `okhttp3.internal.http2.Http2Stream$FramingSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `okio.Buffer` `okhttp3.internal.http2.Http2Stream$FramingSink.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers` `okhttp3.internal.http2.Http2Stream$FramingSink.b` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Http2Stream$FramingSink.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Http2Stream$FramingSink.d` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Stream$FramingSink.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream$FramingSink` v0 @kind this, `okhttp3.internal.http2.Http2Stream` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bbe2c.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` := v1 @kind object;
  #L1bbe30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bbe36.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.d` @type ^`boolean` := v2 @kind boolean;
  #L1bbe3a.  v1:= new `okio.Buffer`;
  #L1bbe3e.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1bbe44.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` := v1 @kind object;
  #L1bbe48.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream$FramingSink` v0 @kind this, `okhttp3.internal.http2.Http2Stream` v1 @kind object, `boolean` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1bbe5c.  v3:= v3 ^& 1;
  #L1bbe60.  if v3 == 0 then goto L1bbe66;
  #L1bbe64.  v2:= 0I;
  #L1bbe66.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;Z)V` @kind direct;
  #L1bbe6c.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http2.Http2Stream$FramingSink` v11 @kind this, `boolean` v12 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.a:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1bc06c.  v0:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc070.  @monitorenter v0
  #L1bc072.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc076.  call temp:= `getWriteTimeout$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc07c.  v1:= temp @kind object;
  #L1bc07e.  call `enter`(v1) @signature `Lokio/AsyncTimeout;.enter:()V` @kind virtual;
  #L1bc084.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc088.  call temp:= `getWriteBytesTotal`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteBytesTotal:()J` @kind virtual;
  #L1bc08e.  v1:= temp @kind wide;
  #L1bc090.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc094.  call temp:= `getWriteBytesMaximum`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteBytesMaximum:()J` @kind virtual;
  #L1bc09a.  v3:= temp @kind wide;
  #L1bc09c.  v5:= lcmp(v1, v3);
  #L1bc0a0.  if v5 < 0 then goto L1bc0d0;
  #L1bc0a4.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.d` @type ^`boolean` @kind boolean;
  #L1bc0a8.  if v1 != 0 then goto L1bc0d0;
  #L1bc0ac.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.c` @type ^`boolean` @kind boolean;
  #L1bc0b0.  if v1 != 0 then goto L1bc0d0;
  #L1bc0b4.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc0b8.  call temp:= `getErrorCode$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode$okhttp:()Lokhttp3/internal/http2/ErrorCode;` @kind virtual;
  #L1bc0be.  v1:= temp @kind object;
  #L1bc0c0.  if v1 != 0 then goto L1bc0d0;
  #L1bc0c4.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc0c8.  call `waitForIo$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo$okhttp:()V` @kind virtual;
  #L1bc0ce.  goto L1bc084;
  #L1bc0d0.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc0d4.  call temp:= `getWriteTimeout$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc0da.  v1:= temp @kind object;
  #L1bc0dc.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1bc0e2.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc0e6.  call `checkOutNotClosed$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed$okhttp:()V` @kind virtual;
  #L1bc0ec.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc0f0.  call temp:= `getWriteBytesMaximum`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteBytesMaximum:()J` @kind virtual;
  #L1bc0f6.  v1:= temp @kind wide;
  #L1bc0f8.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc0fc.  call temp:= `getWriteBytesTotal`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteBytesTotal:()J` @kind virtual;
  #L1bc102.  v3:= temp @kind wide;
  #L1bc104.  v1:= v1 - v3 @kind long;
  #L1bc106.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bc10a.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc110.  v3:= temp @kind wide;
  #L1bc112.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1bc118.  v9:= temp @kind wide;
  #L1bc11a.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc11e.  call temp:= `getWriteBytesTotal`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteBytesTotal:()J` @kind virtual;
  #L1bc124.  v2:= temp @kind wide;
  #L1bc126.  v2:= v2 + v9 @kind long;
  #L1bc128.  call `setWriteBytesTotal$okhttp`(v1, v2) @signature `Lokhttp3/internal/http2/Http2Stream;.setWriteBytesTotal$okhttp:(J)V` @kind virtual;
  #L1bc12e.  if v12 == 0 then goto L1bc14c;
  #L1bc132.  v12:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bc136.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc13c.  v1:= temp @kind wide;
  #L1bc13e.  v12:= lcmp(v9, v1);
  #L1bc142.  if v12 != 0 then goto L1bc14c;
  #L1bc146.  v12:= 1I;
  #L1bc148.  v7:= 1I;
  #L1bc14a.  goto L1bc150;
  #L1bc14c.  v12:= 0I;
  #L1bc14e.  v7:= 0I;
  #L1bc150.  v12:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bc154.  @monitorexit v0
  #L1bc156.  v12:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc15a.  call temp:= `getWriteTimeout$okhttp`(v12) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc160.  v12:= temp @kind object;
  #L1bc162.  call `enter`(v12) @signature `Lokio/AsyncTimeout;.enter:()V` @kind virtual;
  #L1bc168.  v12:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc16c.  call temp:= `getConnection`(v12) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bc172.  v5:= temp @kind object;
  #L1bc174.  v12:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc178.  call temp:= `getId`(v12) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @kind virtual;
  #L1bc17e.  v6:= temp;
  #L1bc180.  v8:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bc184.  call `writeData`(v5, v6, v7, v8, v9) @signature `Lokhttp3/internal/http2/Http2Connection;.writeData:(IZLokio/Buffer;J)V` @kind virtual;
  #L1bc18a.  v12:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc18e.  call temp:= `getWriteTimeout$okhttp`(v12) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc194.  v12:= temp @kind object;
  #L1bc196.  call `exitAndThrowIfTimedOut`(v12) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1bc19c.  return @kind void;
  #L1bc19e.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc1a0.  v0:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc1a4.  call temp:= `getWriteTimeout$okhttp`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc1aa.  v0:= temp @kind object;
  #L1bc1ac.  call `exitAndThrowIfTimedOut`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1bc1b2.  throw v12;
  #L1bc1b4.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc1b6.  v1:= v11.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc1ba.  call temp:= `getWriteTimeout$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc1c0.  v1:= temp @kind object;
  #L1bc1c2.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1bc1c8.  throw v12;
  #L1bc1ca.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc1cc.  @monitorexit v0
  #L1bc1ce.  throw v12;
  catch `java.lang.Throwable` @[L1bc072..L1bc084] goto L1bc1ca;
  catch `java.lang.Throwable` @[L1bc084..L1bc0ce] goto L1bc1b4;
  catch `java.lang.Throwable` @[L1bc0d0..L1bc154] goto L1bc1ca;
  catch `java.lang.Throwable` @[L1bc168..L1bc18a] goto L1bc19e;
  catch `java.lang.Throwable` @[L1bc1b6..L1bc1ca] goto L1bc1ca;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream$FramingSink` v10 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1bbe80.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbe84.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1bbe88.  if v1 == 0 then goto L1bbef2;
  #L1bbe8c.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1bbe92.  v1:= temp;
  #L1bbe94.  if v1 != 0 then goto L1bbe9a;
  #L1bbe98.  goto L1bbef2;
  #L1bbe9a.  v1:= new `java.lang.AssertionError`;
  #L1bbe9e.  v2:= new `java.lang.StringBuilder`;
  #L1bbea2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bbea8.  v3:= "Thread " @kind object;
  #L1bbeac.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbeb2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1bbeb8.  v3:= temp @kind object;
  #L1bbeba.  v4:= "Thread.currentThread()" @kind object;
  #L1bbebe.  call `checkNotNullExpressionValue`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bbec4.  call temp:= `getName`(v3) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bbeca.  v3:= temp @kind object;
  #L1bbecc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbed2.  v3:= " MUST NOT hold lock on " @kind object;
  #L1bbed6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbedc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbee2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bbee8.  v0:= temp @kind object;
  #L1bbeea.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1bbef0.  throw v1;
  #L1bbef2.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbef6.  @monitorenter v0
  #L1bbef8.  v1:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.c` @type ^`boolean` @kind boolean;
  #L1bbefc.  if v1 == 0 then goto L1bbf04;
  #L1bbf00.  @monitorexit v0
  #L1bbf02.  return @kind void;
  #L1bbf04.  v1:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbf08.  call temp:= `getErrorCode$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode$okhttp:()Lokhttp3/internal/http2/ErrorCode;` @kind virtual;
  #L1bbf0e.  v1:= temp @kind object;
  #L1bbf10.  v2:= 0I;
  #L1bbf12.  v3:= 1I;
  #L1bbf14.  if v1 != 0 then goto L1bbf1c;
  #L1bbf18.  v1:= 1I;
  #L1bbf1a.  goto L1bbf1e;
  #L1bbf1c.  v1:= 0I;
  #L1bbf1e.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bbf22.  @monitorexit v0
  #L1bbf24.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbf28.  call temp:= `getSink$okhttp`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink$okhttp:()Lokhttp3/internal/http2/Http2Stream$FramingSink;` @kind virtual;
  #L1bbf2e.  v0:= temp @kind object;
  #L1bbf30.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.d` @type ^`boolean` @kind boolean;
  #L1bbf34.  if v0 != 0 then goto L1bc000;
  #L1bbf38.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bbf3c.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bbf42.  v4:= temp @kind wide;
  #L1bbf44.  v6:= 0L;
  #L1bbf48.  v0:= lcmp(v4, v6);
  #L1bbf4c.  if v0 <= 0 then goto L1bbf54;
  #L1bbf50.  v0:= 1I;
  #L1bbf52.  goto L1bbf56;
  #L1bbf54.  v0:= 0I;
  #L1bbf56.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`okhttp3.Headers` @kind object;
  #L1bbf5a.  if v4 == 0 then goto L1bbf62;
  #L1bbf5e.  v4:= 1I;
  #L1bbf60.  goto L1bbf64;
  #L1bbf62.  v4:= 0I;
  #L1bbf64.  if v4 == 0 then goto L1bbfb6;
  #L1bbf68.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bbf6c.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bbf72.  v4:= temp @kind wide;
  #L1bbf74.  v0:= lcmp(v4, v6);
  #L1bbf78.  if v0 <= 0 then goto L1bbf84;
  #L1bbf7c.  call `a`(v10, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.a:(Z)V` @kind direct;
  #L1bbf82.  goto L1bbf68;
  #L1bbf84.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbf88.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bbf8e.  v0:= temp @kind object;
  #L1bbf90.  v2:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbf94.  call temp:= `getId`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @kind virtual;
  #L1bbf9a.  v2:= temp;
  #L1bbf9c.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`okhttp3.Headers` @kind object;
  #L1bbfa0.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bbfa6.  call temp:= `toHeaderList`(v4) @signature `Lokhttp3/internal/Util;.toHeaderList:(Lokhttp3/Headers;)Ljava/util/List;` @kind static;
  #L1bbfac.  v4:= temp @kind object;
  #L1bbfae.  call `writeHeaders$okhttp`(v0, v2, v1, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.writeHeaders$okhttp:(IZLjava/util/List;)V` @kind virtual;
  #L1bbfb4.  goto L1bc000;
  #L1bbfb6.  if v0 == 0 then goto L1bbfd6;
  #L1bbfba.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bbfbe.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bbfc4.  v0:= temp @kind wide;
  #L1bbfc6.  v2:= lcmp(v0, v6);
  #L1bbfca.  if v2 <= 0 then goto L1bc000;
  #L1bbfce.  call `a`(v10, v3) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.a:(Z)V` @kind direct;
  #L1bbfd4.  goto L1bbfba;
  #L1bbfd6.  if v1 == 0 then goto L1bc000;
  #L1bbfda.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbfde.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bbfe4.  v4:= temp @kind object;
  #L1bbfe6.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbfea.  call temp:= `getId`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @kind virtual;
  #L1bbff0.  v5:= temp;
  #L1bbff2.  v6:= 1I;
  #L1bbff4.  v7:= 0I;
  #L1bbff6.  v8:= 0L;
  #L1bbffa.  call `writeData`(v4, v5, v6, v7, v8) @signature `Lokhttp3/internal/http2/Http2Connection;.writeData:(IZLokio/Buffer;J)V` @kind virtual;
  #L1bc000.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc004.  @monitorenter v0
  #L1bc006.  v10.`okhttp3.internal.http2.Http2Stream$FramingSink.c` @type ^`boolean` := v3 @kind boolean;
  #L1bc00a.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bc00e.  @monitorexit v0
  #L1bc010.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc014.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bc01a.  v0:= temp @kind object;
  #L1bc01c.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L1bc022.  v0:= v10.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc026.  call `cancelStreamIfNecessary$okhttp`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary$okhttp:()V` @kind virtual;
  #L1bc02c.  return @kind void;
  #L1bc02e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc030.  @monitorexit v0
  #L1bc032.  throw v1;
  #L1bc034.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc036.  @monitorexit v0
  #L1bc038.  throw v1;
  catch `java.lang.Throwable` @[L1bbef8..L1bbefc] goto L1bc034;
  catch `java.lang.Throwable` @[L1bbf04..L1bbf22] goto L1bc034;
  catch `java.lang.Throwable` @[L1bc006..L1bc00e] goto L1bc02e;
}
procedure `void` `flush`(`okhttp3.internal.http2.Http2Stream$FramingSink` v5 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bc214.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc218.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1bc21c.  if v1 == 0 then goto L1bc286;
  #L1bc220.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1bc226.  v1:= temp;
  #L1bc228.  if v1 != 0 then goto L1bc22e;
  #L1bc22c.  goto L1bc286;
  #L1bc22e.  v1:= new `java.lang.AssertionError`;
  #L1bc232.  v2:= new `java.lang.StringBuilder`;
  #L1bc236.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bc23c.  v3:= "Thread " @kind object;
  #L1bc240.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc246.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1bc24c.  v3:= temp @kind object;
  #L1bc24e.  v4:= "Thread.currentThread()" @kind object;
  #L1bc252.  call `checkNotNullExpressionValue`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bc258.  call temp:= `getName`(v3) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bc25e.  v3:= temp @kind object;
  #L1bc260.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc266.  v3:= " MUST NOT hold lock on " @kind object;
  #L1bc26a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc270.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc276.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bc27c.  v0:= temp @kind object;
  #L1bc27e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1bc284.  throw v1;
  #L1bc286.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc28a.  @monitorenter v0
  #L1bc28c.  v1:= v5.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc290.  call `checkOutNotClosed$okhttp`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed$okhttp:()V` @kind virtual;
  #L1bc296.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bc29a.  @monitorexit v0
  #L1bc29c.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bc2a0.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc2a6.  v0:= temp @kind wide;
  #L1bc2a8.  v2:= 0L;
  #L1bc2ac.  v4:= lcmp(v0, v2);
  #L1bc2b0.  if v4 <= 0 then goto L1bc2d0;
  #L1bc2b4.  v0:= 0I;
  #L1bc2b6.  call `a`(v5, v0) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.a:(Z)V` @kind direct;
  #L1bc2bc.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc2c0.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bc2c6.  v0:= temp @kind object;
  #L1bc2c8.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L1bc2ce.  goto L1bc29c;
  #L1bc2d0.  return @kind void;
  #L1bc2d2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc2d4.  @monitorexit v0
  #L1bc2d6.  throw v1;
  catch `java.lang.Throwable` @[L1bc28c..L1bc29a] goto L1bc2d2;
}
procedure `boolean` `getClosed`(`okhttp3.internal.http2.Http2Stream$FramingSink` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.getClosed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bbdc4.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.c` @type ^`boolean` @kind boolean;
  #L1bbdc8.  return v0;
}
procedure `boolean` `getFinished`(`okhttp3.internal.http2.Http2Stream$FramingSink` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.getFinished:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bbddc.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.d` @type ^`boolean` @kind boolean;
  #L1bbde0.  return v0;
}
procedure `okhttp3.Headers` `getTrailers`(`okhttp3.internal.http2.Http2Stream$FramingSink` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.getTrailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bbdf4.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`okhttp3.Headers` @kind object;
  #L1bbdf8.  return v0 @kind object;
}
procedure `void` `setClosed`(`okhttp3.internal.http2.Http2Stream$FramingSink` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.setClosed:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1bc2f4.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.c` @type ^`boolean` := v1 @kind boolean;
  #L1bc2f8.  return @kind void;
}
procedure `void` `setFinished`(`okhttp3.internal.http2.Http2Stream$FramingSink` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.setFinished:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1bc30c.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.d` @type ^`boolean` := v1 @kind boolean;
  #L1bc310.  return @kind void;
}
procedure `void` `setTrailers`(`okhttp3.internal.http2.Http2Stream$FramingSink` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.setTrailers:(Lokhttp3/Headers;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1bc324.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`okhttp3.Headers` := v1 @kind object;
  #L1bc328.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http2.Http2Stream$FramingSink` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bbe0c.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bbe10.  call temp:= `getWriteTimeout$okhttp`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getWriteTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bbe16.  v0:= temp @kind object;
  #L1bbe18.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http2.Http2Stream$FramingSink` v2 @kind this, `okio.Buffer` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bc33c.  v0:= "source" @kind object;
  #L1bc340.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bc346.  v0:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.e` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc34a.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1bc34e.  if v1 == 0 then goto L1bc3b8;
  #L1bc352.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1bc358.  v1:= temp;
  #L1bc35a.  if v1 != 0 then goto L1bc360;
  #L1bc35e.  goto L1bc3b8;
  #L1bc360.  v3:= new `java.lang.AssertionError`;
  #L1bc364.  v4:= new `java.lang.StringBuilder`;
  #L1bc368.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bc36e.  v5:= "Thread " @kind object;
  #L1bc372.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc378.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1bc37e.  v5:= temp @kind object;
  #L1bc380.  v1:= "Thread.currentThread()" @kind object;
  #L1bc384.  call `checkNotNullExpressionValue`(v5, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bc38a.  call temp:= `getName`(v5) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bc390.  v5:= temp @kind object;
  #L1bc392.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc398.  v5:= " MUST NOT hold lock on " @kind object;
  #L1bc39c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc3a2.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc3a8.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bc3ae.  v4:= temp @kind object;
  #L1bc3b0.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1bc3b6.  throw v3;
  #L1bc3b8.  v0:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bc3bc.  call `write`(v0, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1bc3c2.  v3:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`okio.Buffer` @kind object;
  #L1bc3c6.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc3cc.  v3:= temp @kind wide;
  #L1bc3ce.  v0:= 16384L;
  #L1bc3d2.  v5:= lcmp(v3, v0);
  #L1bc3d6.  if v5 < 0 then goto L1bc3e4;
  #L1bc3da.  v3:= 0I;
  #L1bc3dc.  call `a`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.a:(Z)V` @kind direct;
  #L1bc3e2.  goto L1bc3c2;
  #L1bc3e4.  return @kind void;
}
