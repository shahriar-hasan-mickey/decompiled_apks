record `okhttp3.internal.http2.Http2Stream$FramingSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `okio.Buffer` `okhttp3.internal.http2.Http2Stream$FramingSource.a` @AccessFlag PRIVATE_FINAL;
  `okio.Buffer` `okhttp3.internal.http2.Http2Stream$FramingSource.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers` `okhttp3.internal.http2.Http2Stream$FramingSource.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Http2Stream$FramingSource.d` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.http2.Http2Stream$FramingSource.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http2.Http2Stream$FramingSource.f` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Stream$FramingSource.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind this, `okhttp3.internal.http2.Http2Stream` v1 @kind object, `long` v2 , `boolean` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;JZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bc6e8.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` := v1 @kind object;
  #L1bc6ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bc6f2.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.e` @type ^`long` := v2 @kind wide;
  #L1bc6f6.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.f` @type ^`boolean` := v4 @kind boolean;
  #L1bc6fa.  v1:= new `okio.Buffer`;
  #L1bc6fe.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1bc704.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`okio.Buffer` := v1 @kind object;
  #L1bc708.  v1:= new `okio.Buffer`;
  #L1bc70c.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1bc712.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` := v1 @kind object;
  #L1bc716.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http2.Http2Stream$FramingSource` v3 @kind this, `long` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.a:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1bc9c8.  v0:= v3.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc9cc.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1bc9d0.  if v1 == 0 then goto L1bca3a;
  #L1bc9d4.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1bc9da.  v1:= temp;
  #L1bc9dc.  if v1 != 0 then goto L1bc9e2;
  #L1bc9e0.  goto L1bca3a;
  #L1bc9e2.  v4:= new `java.lang.AssertionError`;
  #L1bc9e6.  v5:= new `java.lang.StringBuilder`;
  #L1bc9ea.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bc9f0.  v1:= "Thread " @kind object;
  #L1bc9f4.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc9fa.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1bca00.  v1:= temp @kind object;
  #L1bca02.  v2:= "Thread.currentThread()" @kind object;
  #L1bca06.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bca0c.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bca12.  v1:= temp @kind object;
  #L1bca14.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bca1a.  v1:= " MUST NOT hold lock on " @kind object;
  #L1bca1e.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bca24.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bca2a.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bca30.  v5:= temp @kind object;
  #L1bca32.  call `<init>`(v4, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1bca38.  throw v4;
  #L1bca3a.  v0:= v3.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bca3e.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bca44.  v0:= temp @kind object;
  #L1bca46.  call `updateConnectionFlowControl$okhttp`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.updateConnectionFlowControl$okhttp:(J)V` @kind virtual;
  #L1bca4c.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream$FramingSource` v5 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bc728.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc72c.  @monitorenter v0
  #L1bc72e.  v1:= 1I;
  #L1bc730.  v5.`okhttp3.internal.http2.Http2Stream$FramingSource.d` @type ^`boolean` := v1 @kind boolean;
  #L1bc734.  v1:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc738.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc73e.  v1:= temp @kind wide;
  #L1bc740.  v3:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc744.  call `clear`(v3) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L1bc74a.  v3:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc74e.  if v3 == 0 then goto L1bc77c;
  #L1bc752.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1bc758.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bc75c.  @monitorexit v0
  #L1bc75e.  v3:= 0L;
  #L1bc762.  v0:= lcmp(v1, v3);
  #L1bc766.  if v0 <= 0 then goto L1bc770;
  #L1bc76a.  call `a`(v5, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.a:(J)V` @kind direct;
  #L1bc770.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc774.  call `cancelStreamIfNecessary$okhttp`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary$okhttp:()V` @kind virtual;
  #L1bc77a.  return @kind void;
  #L1bc77c.  v1:= new `java.lang.NullPointerException`;
  #L1bc780.  v2:= "null cannot be cast to non-null type java.lang.Object" @kind object;
  #L1bc784.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bc78a.  throw v1;
  #L1bc78c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc78e.  @monitorexit v0
  #L1bc790.  throw v1;
  catch `java.lang.Throwable` @[L1bc730..L1bc75c] goto L1bc78c;
  catch `java.lang.Throwable` @[L1bc77c..L1bc78c] goto L1bc78c;
}
procedure `boolean` `getClosed$okhttp`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.getClosed$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bc3f8.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.d` @type ^`boolean` @kind boolean;
  #L1bc3fc.  return v0;
}
procedure `boolean` `getFinished$okhttp`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.getFinished$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bc410.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.f` @type ^`boolean` @kind boolean;
  #L1bc414.  return v0;
}
procedure `okio.Buffer` `getReadBuffer`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.getReadBuffer:()Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bc698.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc69c.  return v0 @kind object;
}
procedure `okio.Buffer` `getReceiveBuffer`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.getReceiveBuffer:()Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bc6b0.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`okio.Buffer` @kind object;
  #L1bc6b4.  return v0 @kind object;
}
procedure `okhttp3.Headers` `getTrailers`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.getTrailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bc680.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.c` @type ^`okhttp3.Headers` @kind object;
  #L1bc684.  return v0 @kind object;
}
procedure `long` `read`(`okhttp3.internal.http2.Http2Stream$FramingSource` v17 @kind this, `okio.Buffer` v18 @kind object, `long` v19 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1bc428.  v1:= v17 @kind object;
  #L1bc42c.  v0:= v18 @kind object;
  #L1bc430.  v2:= v19 @kind wide;
  #L1bc434.  v4:= "sink" @kind object;
  #L1bc438.  call `checkNotNullParameter`(v0, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bc43e.  v6:= 0L;
  #L1bc442.  v8:= lcmp(v2, v6);
  #L1bc446.  if v8 < 0 then goto L1bc44e;
  #L1bc44a.  v8:= 1I;
  #L1bc44c.  goto L1bc450;
  #L1bc44e.  v8:= 0I;
  #L1bc450.  if v8 == 0 then goto L1bc60a;
  #L1bc454.  v8:= 0I;
  #L1bc456.  v9:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc45a.  @monitorenter v9
  #L1bc45c.  v10:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc460.  call temp:= `getReadTimeout$okhttp`(v10) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc466.  v10:= temp @kind object;
  #L1bc468.  call `enter`(v10) @signature `Lokio/AsyncTimeout;.enter:()V` @kind virtual;
  #L1bc46e.  v10:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc472.  call temp:= `getErrorCode$okhttp`(v10) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode$okhttp:()Lokhttp3/internal/http2/ErrorCode;` @kind virtual;
  #L1bc478.  v10:= temp @kind object;
  #L1bc47a.  if v10 == 0 then goto L1bc4ac;
  #L1bc47e.  v8:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc482.  call temp:= `getErrorException$okhttp`(v8) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorException$okhttp:()Ljava/io/IOException;` @kind virtual;
  #L1bc488.  v8:= temp @kind object;
  #L1bc48a.  if v8 == 0 then goto L1bc490;
  #L1bc48e.  goto L1bc4ac;
  #L1bc490.  v8:= new `okhttp3.internal.http2.StreamResetException`;
  #L1bc494.  v10:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc498.  call temp:= `getErrorCode$okhttp`(v10) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode$okhttp:()Lokhttp3/internal/http2/ErrorCode;` @kind virtual;
  #L1bc49e.  v10:= temp @kind object;
  #L1bc4a0.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bc4a6.  call `<init>`(v8, v10) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1bc4ac.  v10:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.d` @type ^`boolean` @kind boolean;
  #L1bc4b0.  if v10 != 0 then goto L1bc5de;
  #L1bc4b4.  v10:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc4b8.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc4be.  v10:= temp @kind wide;
  #L1bc4c0.  v12:= -1L;
  #L1bc4c4.  v14:= lcmp(v10, v6);
  #L1bc4c8.  if v14 <= 0 then goto L1bc580;
  #L1bc4cc.  v10:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc4d0.  v11:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc4d4.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc4da.  v14:= temp @kind wide;
  #L1bc4dc.  call temp:= `min`(v2, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1bc4e2.  v14:= temp @kind wide;
  #L1bc4e4.  call temp:= `read`(v10, v0, v14) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L1bc4ea.  v10:= temp @kind wide;
  #L1bc4ec.  v14:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc4f0.  call temp:= `getReadBytesTotal`(v14) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadBytesTotal:()J` @kind virtual;
  #L1bc4f6.  v15:= temp @kind wide;
  #L1bc4f8.  v4:= v15 + v10 @kind long;
  #L1bc4fc.  call `setReadBytesTotal$okhttp`(v14, v4) @signature `Lokhttp3/internal/http2/Http2Stream;.setReadBytesTotal$okhttp:(J)V` @kind virtual;
  #L1bc502.  v4:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc506.  call temp:= `getReadBytesTotal`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadBytesTotal:()J` @kind virtual;
  #L1bc50c.  v4:= temp @kind wide;
  #L1bc50e.  v14:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc512.  call temp:= `getReadBytesAcknowledged`(v14) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadBytesAcknowledged:()J` @kind virtual;
  #L1bc518.  v14:= temp @kind wide;
  #L1bc51a.  v4:= v4 - v14 @kind long;
  #L1bc51c.  if v8 != 0 then goto L1bc59e;
  #L1bc520.  v14:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc524.  call temp:= `getConnection`(v14) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bc52a.  v14:= temp @kind object;
  #L1bc52c.  call temp:= `getOkHttpSettings`(v14) @signature `Lokhttp3/internal/http2/Http2Connection;.getOkHttpSettings:()Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1bc532.  v14:= temp @kind object;
  #L1bc534.  call temp:= `getInitialWindowSize`(v14) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1bc53a.  v14:= temp;
  #L1bc53c.  v14:= v14 / 2;
  #L1bc540.  v14:= (`long`) v14 @kind i2l;
  #L1bc542.  v16:= lcmp(v4, v14);
  #L1bc546.  if v16 < 0 then goto L1bc59e;
  #L1bc54a.  v14:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc54e.  call temp:= `getConnection`(v14) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @kind virtual;
  #L1bc554.  v14:= temp @kind object;
  #L1bc556.  v15:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc55a.  call temp:= `getId`(v15) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @kind virtual;
  #L1bc560.  v15:= temp;
  #L1bc562.  call `writeWindowUpdateLater$okhttp`(v14, v15, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.writeWindowUpdateLater$okhttp:(IJ)V` @kind virtual;
  #L1bc568.  v4:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc56c.  v5:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc570.  call temp:= `getReadBytesTotal`(v5) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadBytesTotal:()J` @kind virtual;
  #L1bc576.  v14:= temp @kind wide;
  #L1bc578.  call `setReadBytesAcknowledged$okhttp`(v4, v14) @signature `Lokhttp3/internal/http2/Http2Stream;.setReadBytesAcknowledged$okhttp:(J)V` @kind virtual;
  #L1bc57e.  goto L1bc59e;
  #L1bc580.  v4:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.f` @type ^`boolean` @kind boolean;
  #L1bc584.  if v4 != 0 then goto L1bc59c;
  #L1bc588.  if v8 != 0 then goto L1bc59c;
  #L1bc58c.  v4:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc590.  call `waitForIo$okhttp`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo$okhttp:()V` @kind virtual;
  #L1bc596.  v10:= v12 @kind wide;
  #L1bc598.  v4:= 1I;
  #L1bc59a.  goto L1bc5a0;
  #L1bc59c.  v10:= v12 @kind wide;
  #L1bc59e.  v4:= 0I;
  #L1bc5a0.  v5:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc5a4.  call temp:= `getReadTimeout$okhttp`(v5) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc5aa.  v5:= temp @kind object;
  #L1bc5ac.  call `exitAndThrowIfTimedOut`(v5) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1bc5b2.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bc5b6.  @monitorexit v9
  #L1bc5b8.  if v4 == 0 then goto L1bc5c0;
  #L1bc5bc.  goto L1bc454;
  #L1bc5c0.  v0:= lcmp(v10, v12);
  #L1bc5c4.  if v0 == 0 then goto L1bc5d0;
  #L1bc5c8.  call `a`(v1, v10) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.a:(J)V` @kind direct;
  #L1bc5ce.  return v10 @kind wide;
  #L1bc5d0.  if v8 != 0 then goto L1bc5d6;
  #L1bc5d4.  return v12 @kind wide;
  #L1bc5d6.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bc5dc.  throw v8;
  #L1bc5de.  v0:= new `java.io.IOException`;
  #L1bc5e2.  v2:= "stream closed" @kind object;
  #L1bc5e6.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bc5ec.  throw v0;
  #L1bc5ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc5f0.  v2:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc5f4.  call temp:= `getReadTimeout$okhttp`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc5fa.  v2:= temp @kind object;
  #L1bc5fc.  call `exitAndThrowIfTimedOut`(v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1bc602.  throw v0;
  #L1bc604.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc606.  @monitorexit v9
  #L1bc608.  throw v0;
  #L1bc60a.  v0:= new `java.lang.StringBuilder`;
  #L1bc60e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bc614.  v4:= "byteCount < 0: " @kind object;
  #L1bc618.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc61e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc624.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bc62a.  v0:= temp @kind object;
  #L1bc62c.  v2:= new `java.lang.IllegalArgumentException`;
  #L1bc630.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bc636.  v0:= temp @kind object;
  #L1bc638.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bc63e.  throw v2;
  catch `java.lang.Throwable` @[L1bc45c..L1bc46e] goto L1bc604;
  catch `java.lang.Throwable` @[L1bc46e..L1bc596] goto L1bc5ee;
  catch `java.lang.Throwable` @[L1bc5a0..L1bc5b6] goto L1bc604;
  catch `java.lang.Throwable` @[L1bc5de..L1bc5ee] goto L1bc5ee;
  catch `java.lang.Throwable` @[L1bc5f0..L1bc604] goto L1bc604;
}
procedure `void` `receive$okhttp`(`okhttp3.internal.http2.Http2Stream$FramingSource` v11 @kind this, `okio.BufferedSource` v12 @kind object, `long` v13 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive$okhttp:(Lokio/BufferedSource;J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1bc7b8.  v0:= "source" @kind object;
  #L1bc7bc.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bc7c2.  v0:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc7c6.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1bc7ca.  if v1 == 0 then goto L1bc834;
  #L1bc7ce.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1bc7d4.  v1:= temp;
  #L1bc7d6.  if v1 != 0 then goto L1bc7dc;
  #L1bc7da.  goto L1bc834;
  #L1bc7dc.  v12:= new `java.lang.AssertionError`;
  #L1bc7e0.  v13:= new `java.lang.StringBuilder`;
  #L1bc7e4.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bc7ea.  v14:= "Thread " @kind object;
  #L1bc7ee.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc7f4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1bc7fa.  v14:= temp @kind object;
  #L1bc7fc.  v1:= "Thread.currentThread()" @kind object;
  #L1bc800.  call `checkNotNullExpressionValue`(v14, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bc806.  call temp:= `getName`(v14) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bc80c.  v14:= temp @kind object;
  #L1bc80e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc814.  v14:= " MUST NOT hold lock on " @kind object;
  #L1bc818.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc81e.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bc824.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bc82a.  v13:= temp @kind object;
  #L1bc82c.  call `<init>`(v12, v13) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1bc832.  throw v12;
  #L1bc834.  v0:= 0L;
  #L1bc838.  v2:= lcmp(v13, v0);
  #L1bc83c.  if v2 <= 0 then goto L1bc956;
  #L1bc840.  v2:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc844.  @monitorenter v2
  #L1bc846.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.f` @type ^`boolean` @kind boolean;
  #L1bc84a.  v4:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc84e.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc854.  v4:= temp @kind wide;
  #L1bc856.  v4:= v4 + v13 @kind long;
  #L1bc858.  v6:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.e` @type ^`long` @kind wide;
  #L1bc85c.  v8:= 1I;
  #L1bc85e.  v9:= 0I;
  #L1bc860.  v10:= lcmp(v4, v6);
  #L1bc864.  if v10 <= 0 then goto L1bc86c;
  #L1bc868.  v4:= 1I;
  #L1bc86a.  goto L1bc86e;
  #L1bc86c.  v4:= 0I;
  #L1bc86e.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bc872.  @monitorexit v2
  #L1bc874.  if v4 == 0 then goto L1bc88e;
  #L1bc878.  call `skip`(v12, v13) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1bc87e.  v12:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc882.  v13:= `@@okhttp3.internal.http2.ErrorCode.FLOW_CONTROL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1bc886.  call `closeLater`(v12, v13) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1bc88c.  return @kind void;
  #L1bc88e.  if v3 == 0 then goto L1bc89a;
  #L1bc892.  call `skip`(v12, v13) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1bc898.  return @kind void;
  #L1bc89a.  v2:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`okio.Buffer` @kind object;
  #L1bc89e.  call temp:= `read`(v12, v2, v13) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1bc8a4.  v2:= temp @kind wide;
  #L1bc8a6.  v4:= -1L;
  #L1bc8aa.  v6:= lcmp(v2, v4);
  #L1bc8ae.  if v6 == 0 then goto L1bc944;
  #L1bc8b2.  v13:= v13 - v2 @kind long;
  #L1bc8b4.  v2:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc8b8.  @monitorenter v2
  #L1bc8ba.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.d` @type ^`boolean` @kind boolean;
  #L1bc8be.  if v3 == 0 then goto L1bc8da;
  #L1bc8c2.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`okio.Buffer` @kind object;
  #L1bc8c6.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc8cc.  v3:= temp @kind wide;
  #L1bc8ce.  v5:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`okio.Buffer` @kind object;
  #L1bc8d2.  call `clear`(v5) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L1bc8d8.  goto L1bc926;
  #L1bc8da.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc8de.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1bc8e4.  v3:= temp @kind wide;
  #L1bc8e6.  v5:= lcmp(v3, v0);
  #L1bc8ea.  if v5 != 0 then goto L1bc8f0;
  #L1bc8ee.  goto L1bc8f2;
  #L1bc8f0.  v8:= 0I;
  #L1bc8f2.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`okio.Buffer` @kind object;
  #L1bc8f6.  v4:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`okio.Buffer` @kind object;
  #L1bc8fa.  call temp:= `writeAll`(v3, v4) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @kind virtual;
  #L1bc900.  if v8 == 0 then goto L1bc924;
  #L1bc904.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc908.  if v3 == 0 then goto L1bc914;
  #L1bc90c.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1bc912.  goto L1bc924;
  #L1bc914.  v12:= new `java.lang.NullPointerException`;
  #L1bc918.  v13:= "null cannot be cast to non-null type java.lang.Object" @kind object;
  #L1bc91c.  call `<init>`(v12, v13) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bc922.  throw v12;
  #L1bc924.  v3:= v0 @kind wide;
  #L1bc926.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1bc92a.  @monitorexit v2
  #L1bc92c.  v2:= lcmp(v3, v0);
  #L1bc930.  if v2 <= 0 then goto L1bc834;
  #L1bc934.  call `a`(v11, v3) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.a:(J)V` @kind direct;
  #L1bc93a.  goto L1bc834;
  #L1bc93e.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc940.  @monitorexit v2
  #L1bc942.  throw v12;
  #L1bc944.  v12:= new `java.io.EOFException`;
  #L1bc948.  call `<init>`(v12) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1bc94e.  throw v12;
  #L1bc950.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bc952.  @monitorexit v2
  #L1bc954.  throw v12;
  #L1bc956.  return @kind void;
  catch `java.lang.Throwable` @[L1bc846..L1bc872] goto L1bc950;
  catch `java.lang.Throwable` @[L1bc8ba..L1bc92a] goto L1bc93e;
}
procedure `void` `setClosed$okhttp`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.setClosed$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1bc980.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.d` @type ^`boolean` := v1 @kind boolean;
  #L1bc984.  return @kind void;
}
procedure `void` `setFinished$okhttp`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.setFinished$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1bc998.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.f` @type ^`boolean` := v1 @kind boolean;
  #L1bc99c.  return @kind void;
}
procedure `void` `setTrailers`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.setTrailers:(Lokhttp3/Headers;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1bc9b0.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.c` @type ^`okhttp3.Headers` := v1 @kind object;
  #L1bc9b4.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc6c8.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.g` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bc6cc.  call temp:= `getReadTimeout$okhttp`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getReadTimeout$okhttp:()Lokhttp3/internal/http2/Http2Stream$StreamTimeout;` @kind virtual;
  #L1bc6d2.  v0:= temp @kind object;
  #L1bc6d4.  return v0 @kind object;
}
