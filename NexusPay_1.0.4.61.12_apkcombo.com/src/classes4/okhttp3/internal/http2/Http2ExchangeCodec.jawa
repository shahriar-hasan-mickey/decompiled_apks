record `okhttp3.internal.http2.Http2ExchangeCodec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.ExchangeCodec` @kind interface {
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2ExchangeCodec.a` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.Protocol` `okhttp3.internal.http2.Http2ExchangeCodec.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http2.Http2ExchangeCodec.c` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.http2.Http2ExchangeCodec.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http.RealInterceptorChain` `okhttp3.internal.http2.Http2ExchangeCodec.e` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2ExchangeCodec.f` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.http2.Http2ExchangeCodec$Companion` `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2ExchangeCodec.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2ExchangeCodec.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1bad3c.  v0:= new `okhttp3.internal.http2.Http2ExchangeCodec$Companion`;
  #L1bad40.  v1:= 0I;
  #L1bad42.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1bad48.  `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @type ^`okhttp3.internal.http2.Http2ExchangeCodec$Companion` := v0 @kind object;
  #L1bad4c.  v2:= "connection" @kind object;
  #L1bad50.  v3:= "host" @kind object;
  #L1bad54.  v4:= "keep-alive" @kind object;
  #L1bad58.  v5:= "proxy-connection" @kind object;
  #L1bad5c.  v6:= "te" @kind object;
  #L1bad60.  v7:= "transfer-encoding" @kind object;
  #L1bad64.  v8:= "encoding" @kind object;
  #L1bad68.  v9:= "upgrade" @kind object;
  #L1bad6c.  v10:= ":method" @kind object;
  #L1bad70.  v11:= ":path" @kind object;
  #L1bad74.  v12:= ":scheme" @kind object;
  #L1bad78.  v13:= ":authority" @kind object;
  #L1bad7c.  temp:= new `java.lang.String`[v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13];
  #L1bad82.  v0:= temp @kind object;
  #L1bad84.  call temp:= `immutableListOf`(v0) @signature `Lokhttp3/internal/Util;.immutableListOf:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1bad8a.  v0:= temp @kind object;
  #L1bad8c.  `@@okhttp3.internal.http2.Http2ExchangeCodec.g` @type ^`java.util.List` := v0 @kind object;
  #L1bad90.  v1:= "connection" @kind object;
  #L1bad94.  v2:= "host" @kind object;
  #L1bad98.  v3:= "keep-alive" @kind object;
  #L1bad9c.  v4:= "proxy-connection" @kind object;
  #L1bada0.  v5:= "te" @kind object;
  #L1bada4.  v6:= "transfer-encoding" @kind object;
  #L1bada8.  v7:= "encoding" @kind object;
  #L1badac.  v8:= "upgrade" @kind object;
  #L1badb0.  temp:= new `java.lang.String`[v1, v2, v3, v4, v5, v6, v7, v8];
  #L1badb6.  v0:= temp @kind object;
  #L1badb8.  call temp:= `immutableListOf`(v0) @signature `Lokhttp3/internal/Util;.immutableListOf:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1badbe.  v0:= temp @kind object;
  #L1badc0.  `@@okhttp3.internal.http2.Http2ExchangeCodec.h` @type ^`java.util.List` := v0 @kind object;
  #L1badc4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object, `okhttp3.internal.connection.RealConnection` v3 @kind object, `okhttp3.internal.http.RealInterceptorChain` v4 @kind object, `okhttp3.internal.http2.Http2Connection` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/RealConnection;Lokhttp3/internal/http/RealInterceptorChain;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1badd8.  v0:= "client" @kind object;
  #L1baddc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bade2.  v0:= "connection" @kind object;
  #L1bade6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1badec.  v0:= "chain" @kind object;
  #L1badf0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1badf6.  v0:= "http2Connection" @kind object;
  #L1badfa.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bae00.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bae06.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.d` @type ^`okhttp3.internal.connection.RealConnection` := v3 @kind object;
  #L1bae0a.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.e` @type ^`okhttp3.internal.http.RealInterceptorChain` := v4 @kind object;
  #L1bae0e.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.f` @type ^`okhttp3.internal.http2.Http2Connection` := v5 @kind object;
  #L1bae12.  call temp:= `protocols`(v2) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L1bae18.  v2:= temp @kind object;
  #L1bae1a.  v3:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L1bae1e.  call temp:= `contains`(v2, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1bae24.  v2:= temp;
  #L1bae26.  if v2 == 0 then goto L1bae30;
  #L1bae2a.  v2:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L1bae2e.  goto L1bae34;
  #L1bae30.  v2:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L1bae34.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.b` @type ^`okhttp3.Protocol` := v2 @kind object;
  #L1bae38.  return @kind void;
}
procedure `java.util.List` `access$getHTTP_2_SKIPPED_REQUEST_HEADERS$cp`() @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.access$getHTTP_2_SKIPPED_REQUEST_HEADERS$cp:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1babec.  v0:= `@@okhttp3.internal.http2.Http2ExchangeCodec.g` @type ^`java.util.List` @kind object;
  #L1babf0.  return v0 @kind object;
}
procedure `java.util.List` `access$getHTTP_2_SKIPPED_RESPONSE_HEADERS$cp`() @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.access$getHTTP_2_SKIPPED_RESPONSE_HEADERS$cp:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1bac04.  v0:= `@@okhttp3.internal.http2.Http2ExchangeCodec.h` @type ^`java.util.List` @kind object;
  #L1bac08.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bae4c.  v0:= 1I;
  #L1bae4e.  v2.`okhttp3.internal.http2.Http2ExchangeCodec.c` @type ^`boolean` := v0 @kind boolean;
  #L1bae52.  v0:= v2.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bae56.  if v0 == 0 then goto L1bae64;
  #L1bae5a.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1bae5e.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1bae64.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2ExchangeCodec` v0 @kind this, `okhttp3.Request` v1 @kind object, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;

  #L1bacdc.  v2:= "request" @kind object;
  #L1bace0.  call `checkNotNullParameter`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bace6.  v1:= v0.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bacea.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bacf0.  call temp:= `getSink`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L1bacf6.  v1:= temp @kind object;
  #L1bacf8.  return v1 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bae78.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bae7c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bae82.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L1bae88.  v0:= temp @kind object;
  #L1bae8a.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L1bae90.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1baea4.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.f` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1baea8.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L1baeae.  return @kind void;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnection`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bacc4.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.d` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1bacc8.  return v0 @kind object;
}
procedure `okio.Source` `openResponseBodySource`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.openResponseBodySource:(Lokhttp3/Response;)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bad0c.  v0:= "response" @kind object;
  #L1bad10.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bad16.  v2:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bad1a.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bad20.  call temp:= `getSource$okhttp`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource$okhttp:()Lokhttp3/internal/http2/Http2Stream$FramingSource;` @kind virtual;
  #L1bad26.  v2:= temp @kind object;
  #L1bad28.  return v2 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2ExchangeCodec` v3 @kind this, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1bac78.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bac7c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bac82.  call temp:= `takeHeaders`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.takeHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L1bac88.  v0:= temp @kind object;
  #L1bac8a.  v1:= `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @type ^`okhttp3.internal.http2.Http2ExchangeCodec$Companion` @kind object;
  #L1bac8e.  v2:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.b` @type ^`okhttp3.Protocol` @kind object;
  #L1bac92.  call temp:= `readHttp2HeadersList`(v1, v0, v2) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec$Companion;.readHttp2HeadersList:(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1bac98.  v0:= temp @kind object;
  #L1bac9a.  if v4 == 0 then goto L1bacb0;
  #L1bac9e.  call temp:= `getCode$okhttp`(v0) @signature `Lokhttp3/Response$Builder;.getCode$okhttp:()I` @kind virtual;
  #L1baca4.  v4:= temp;
  #L1baca6.  v1:= 100I;
  #L1bacaa.  if v4 != v1 then goto L1bacb0;
  #L1bacae.  v0:= 0I;
  #L1bacb0.  return v0 @kind object;
}
procedure `long` `reportedContentLength`(`okhttp3.internal.http2.Http2ExchangeCodec` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.reportedContentLength:(Lokhttp3/Response;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bac1c.  v0:= "response" @kind object;
  #L1bac20.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bac26.  call temp:= `promisesBody`(v3) @signature `Lokhttp3/internal/http/HttpHeaders;.promisesBody:(Lokhttp3/Response;)Z` @kind static;
  #L1bac2c.  v0:= temp;
  #L1bac2e.  if v0 != 0 then goto L1bac38;
  #L1bac32.  v0:= 0L;
  #L1bac36.  goto L1bac40;
  #L1bac38.  call temp:= `headersContentLength`(v3) @signature `Lokhttp3/internal/Util;.headersContentLength:(Lokhttp3/Response;)J` @kind static;
  #L1bac3e.  v0:= temp @kind wide;
  #L1bac40.  return v0 @kind wide;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bac54.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1bac58.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1bac5e.  call temp:= `trailers`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.trailers:()Lokhttp3/Headers;` @kind virtual;
  #L1bac64.  v0:= temp @kind object;
  #L1bac66.  return v0 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2ExchangeCodec` v3 @kind this, `okhttp3.Request` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1baec0.  v0:= "request" @kind object;
  #L1baec4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1baeca.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1baece.  if v0 == 0 then goto L1baed4;
  #L1baed2.  return @kind void;
  #L1baed4.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L1baeda.  v0:= temp @kind object;
  #L1baedc.  if v0 == 0 then goto L1baee4;
  #L1baee0.  v0:= 1I;
  #L1baee2.  goto L1baee6;
  #L1baee4.  v0:= 0I;
  #L1baee6.  v1:= `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @type ^`okhttp3.internal.http2.Http2ExchangeCodec$Companion` @kind object;
  #L1baeea.  call temp:= `http2HeadersList`(v1, v4) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec$Companion;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind virtual;
  #L1baef0.  v4:= temp @kind object;
  #L1baef2.  v1:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.f` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1baef6.  call temp:= `newStream`(v1, v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1baefc.  v4:= temp @kind object;
  #L1baefe.  v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` := v4 @kind object;
  #L1baf02.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.c` @type ^`boolean` @kind boolean;
  #L1baf06.  if v4 != 0 then goto L1baf60;
  #L1baf0a.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1baf0e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1baf14.  call temp:= `readTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L1baf1a.  v4:= temp @kind object;
  #L1baf1c.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.e` @type ^`okhttp3.internal.http.RealInterceptorChain` @kind object;
  #L1baf20.  call temp:= `getReadTimeoutMillis$okhttp`(v0) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getReadTimeoutMillis$okhttp:()I` @kind virtual;
  #L1baf26.  v0:= temp;
  #L1baf28.  v0:= (`long`) v0 @kind i2l;
  #L1baf2a.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1baf2e.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L1baf34.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1baf38.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1baf3e.  call temp:= `writeTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L1baf44.  v4:= temp @kind object;
  #L1baf46.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.e` @type ^`okhttp3.internal.http.RealInterceptorChain` @kind object;
  #L1baf4a.  call temp:= `getWriteTimeoutMillis$okhttp`(v0) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getWriteTimeoutMillis$okhttp:()I` @kind virtual;
  #L1baf50.  v0:= temp;
  #L1baf52.  v0:= (`long`) v0 @kind i2l;
  #L1baf54.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1baf58.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L1baf5e.  return @kind void;
  #L1baf60.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1baf64.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1baf6a.  v0:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1baf6e.  call `closeLater`(v4, v0) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1baf74.  v4:= new `java.io.IOException`;
  #L1baf78.  v0:= "Canceled" @kind object;
  #L1baf7c.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1baf82.  throw v4;
}
