record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.a` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.b` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.internal.http2.Settings$Companion` `@@okhttp3.internal.http2.Settings.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Settings;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1bf19c.  v0:= new `okhttp3.internal.http2.Settings$Companion`;
  #L1bf1a0.  v1:= 0I;
  #L1bf1a2.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/Settings$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1bf1a8.  `@@okhttp3.internal.http2.Settings.Companion` @type ^`okhttp3.internal.http2.Settings$Companion` := v0 @kind object;
  #L1bf1ac.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1bf1c0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bf1c6.  v0:= 10I;
  #L1bf1ca.  v0:= new `int`[v0];
  #L1bf1ce.  v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] := v0 @kind object;
  #L1bf1d2.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v7 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1bf1e4.  v0:= 0I;
  #L1bf1e6.  v7.`okhttp3.internal.http2.Settings.a` @type ^`int` := v0;
  #L1bf1ea.  v1:= v7.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf1ee.  v2:= 0I;
  #L1bf1f0.  v3:= 0I;
  #L1bf1f2.  v4:= 0I;
  #L1bf1f4.  v5:= 6I;
  #L1bf1f6.  v6:= 0I;
  #L1bf1f8.  call `fill$default`(v1, v2, v3, v4, v5, v6) @signature `Lkotlin/collections/ArraysKt;.fill$default:([IIIIILjava/lang/Object;)V` @kind static;
  #L1bf1fe.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bf050.  v0:= v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf054.  v2:= v0[v2];
  #L1bf058.  return v2;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1beff4.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1beff8.  v0:= v0 ^& 4;
  #L1beffc.  v1:= 1I;
  #L1beffe.  if v0 == 0 then goto L1bf016;
  #L1bf002.  v3:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf006.  v0:= 2I;
  #L1bf008.  v3:= v3[v0];
  #L1bf00c.  if v3 != v1 then goto L1bf014;
  #L1bf010.  v3:= 1I;
  #L1bf012.  goto L1bf016;
  #L1bf014.  v3:= 0I;
  #L1bf016.  return v3;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1bf06c.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf070.  v0:= v0 ^& 2;
  #L1bf074.  if v0 == 0 then goto L1bf084;
  #L1bf078.  v0:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf07c.  v1:= 1I;
  #L1bf07e.  v0:= v0[v1];
  #L1bf082.  goto L1bf086;
  #L1bf084.  v0:= -1I;
  #L1bf086.  return v0;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1bf098.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf09c.  v0:= v0 ^& 128;
  #L1bf0a0.  if v0 == 0 then goto L1bf0b0;
  #L1bf0a4.  v0:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf0a8.  v1:= 7I;
  #L1bf0aa.  v0:= v0[v1];
  #L1bf0ae.  goto L1bf0b6;
  #L1bf0b0.  v0:= 65535I;
  #L1bf0b6.  return v0;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1bf0c8.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf0cc.  v0:= v0 ^& 16;
  #L1bf0d0.  if v0 == 0 then goto L1bf0e0;
  #L1bf0d4.  v0:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf0d8.  v1:= 4I;
  #L1bf0da.  v0:= v0[v1];
  #L1bf0de.  goto L1bf0e6;
  #L1bf0e0.  v0:= 2147483647I;
  #L1bf0e6.  return v0;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bf0f8.  v0:= v1.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf0fc.  v0:= v0 ^& 32;
  #L1bf100.  if v0 == 0 then goto L1bf10e;
  #L1bf104.  v2:= v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf108.  v0:= 5I;
  #L1bf10a.  v2:= v2[v0];
  #L1bf10e.  return v2;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bf120.  v0:= v1.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf124.  v0:= v0 ^& 64;
  #L1bf128.  if v0 == 0 then goto L1bf136;
  #L1bf12c.  v2:= v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf130.  v0:= 6I;
  #L1bf132.  v2:= v2[v0];
  #L1bf136.  return v2;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1bf028.  v0:= 1I;
  #L1bf02a.  v3:= v0 ^< v3 @kind int;
  #L1bf02e.  v1:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf032.  v3:= v3 ^& v1 @kind int;
  #L1bf034.  if v3 == 0 then goto L1bf03a;
  #L1bf038.  goto L1bf03c;
  #L1bf03a.  v0:= 0I;
  #L1bf03c.  return v0;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1bf210.  v0:= "other" @kind object;
  #L1bf214.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1bf21a.  v0:= 0I;
  #L1bf21c.  v1:= 10I;
  #L1bf220.  if v0 >= v1 then goto L1bf246;
  #L1bf224.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L1bf22a.  v1:= temp;
  #L1bf22c.  if v1 != 0 then goto L1bf232;
  #L1bf230.  goto L1bf240;
  #L1bf232.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L1bf238.  v1:= temp;
  #L1bf23a.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1bf240.  v0:= v0 + 1;
  #L1bf244.  goto L1bf21c;
  #L1bf246.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1bf168.  if v4 < 0 then goto L1bf18a;
  #L1bf16c.  v0:= v3.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L1bf170.  v1:= length @variable v0;
  #L1bf172.  if v4 < v1 then goto L1bf178;
  #L1bf176.  goto L1bf18a;
  #L1bf178.  v1:= 1I;
  #L1bf17a.  v1:= v1 ^< v4 @kind int;
  #L1bf17c.  v2:= v3.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf180.  v1:= v1 ^| v2 @kind int;
  #L1bf182.  v3.`okhttp3.internal.http2.Settings.a` @type ^`int` := v1;
  #L1bf186.  v0[v4]:= v5;
  #L1bf18a.  return v3 @kind object;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1bf148.  v0:= v1.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1bf14c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L1bf152.  v0:= temp;
  #L1bf154.  return v0;
}
