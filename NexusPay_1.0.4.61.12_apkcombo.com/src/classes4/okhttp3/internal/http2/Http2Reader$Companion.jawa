record `okhttp3.internal.http2.Http2Reader$Companion` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader$Companion` v0 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader$Companion;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1bb014.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bb01a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader$Companion` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1bb02c.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Http2Reader$Companion;.<init>:()V` @kind direct;
  #L1bb032.  return @kind void;
}
procedure `java.util.logging.Logger` `getLogger`(`okhttp3.internal.http2.Http2Reader$Companion` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader$Companion;.getLogger:()Ljava/util/logging/Logger;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1baff8.  call temp:= `access$getLogger$cp`() @signature `Lokhttp3/internal/http2/Http2Reader;.access$getLogger$cp:()Ljava/util/logging/Logger;` @kind static;
  #L1baffe.  v0:= temp @kind object;
  #L1bb000.  return v0 @kind object;
}
procedure `int` `lengthWithoutPadding`(`okhttp3.internal.http2.Http2Reader$Companion` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Reader$Companion;.lengthWithoutPadding:(III)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1baf94.  v4:= v4 ^& 8;
  #L1baf98.  if v4 == 0 then goto L1bafa0;
  #L1baf9c.  v3:= v3 + -1;
  #L1bafa0.  if v5 > v3 then goto L1bafa8;
  #L1bafa4.  v3:= v3 - v5 @kind int;
  #L1bafa6.  return v3;
  #L1bafa8.  v4:= new `java.io.IOException`;
  #L1bafac.  v0:= new `java.lang.StringBuilder`;
  #L1bafb0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bafb6.  v1:= "PROTOCOL_ERROR padding " @kind object;
  #L1bafba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bafc0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bafc6.  v5:= " > remaining length " @kind object;
  #L1bafca.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bafd0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bafd6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bafdc.  v3:= temp @kind object;
  #L1bafde.  call `<init>`(v4, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bafe4.  throw v4;
}
