record `okhttp3.internal.http2.ErrorCode$Companion` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`okhttp3.internal.http2.ErrorCode$Companion` v0 @kind this) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b6700.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b6706.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.ErrorCode$Companion` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1b6718.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.<init>:()V` @kind direct;
  #L1b671e.  return @kind void;
}
procedure `okhttp3.internal.http2.ErrorCode` `fromHttp2`(`okhttp3.internal.http2.ErrorCode$Companion` v6 @kind this, `int` v7 ) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b66b8.  call temp:= `values`() @signature `Lokhttp3/internal/http2/ErrorCode;.values:()[Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L1b66be.  v0:= temp @kind object;
  #L1b66c0.  v1:= length @variable v0;
  #L1b66c2.  v2:= 0I;
  #L1b66c4.  v3:= 0I;
  #L1b66c6.  if v3 >= v1 then goto L1b66ec;
  #L1b66ca.  v4:= v0[v3] @kind object;
  #L1b66ce.  call temp:= `getHttpCode`(v4) @signature `Lokhttp3/internal/http2/ErrorCode;.getHttpCode:()I` @kind virtual;
  #L1b66d4.  v5:= temp;
  #L1b66d6.  if v5 != v7 then goto L1b66de;
  #L1b66da.  v5:= 1I;
  #L1b66dc.  goto L1b66e0;
  #L1b66de.  v5:= 0I;
  #L1b66e0.  if v5 == 0 then goto L1b66e6;
  #L1b66e4.  goto L1b66ee;
  #L1b66e6.  v3:= v3 + 1;
  #L1b66ea.  goto L1b66c6;
  #L1b66ec.  v4:= 0I;
  #L1b66ee.  return v4 @kind object;
}
