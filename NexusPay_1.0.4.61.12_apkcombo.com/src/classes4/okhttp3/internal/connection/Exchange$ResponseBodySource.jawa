record `okhttp3.internal.connection.Exchange$ResponseBodySource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSource` @kind class {
  `long` `okhttp3.internal.connection.Exchange$ResponseBodySource.a` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.Exchange$ResponseBodySource.b` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.Exchange$ResponseBodySource.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.Exchange$ResponseBodySource.d` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.Exchange$ResponseBodySource.e` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.Exchange` `okhttp3.internal.connection.Exchange$ResponseBodySource.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.connection.Exchange$ResponseBodySource` v1 @kind this, `okhttp3.internal.connection.Exchange` v2 @kind object, `okio.Source` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.<init>:(Lokhttp3/internal/connection/Exchange;Lokio/Source;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ae560.  v0:= "delegate" @kind object;
  #L1ae564.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae56a.  v1.`okhttp3.internal.connection.Exchange$ResponseBodySource.f` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L1ae56e.  call `<init>`(v1, v3) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L1ae574.  v1.`okhttp3.internal.connection.Exchange$ResponseBodySource.e` @type ^`long` := v4 @kind wide;
  #L1ae578.  v2:= 1I;
  #L1ae57a.  v1.`okhttp3.internal.connection.Exchange$ResponseBodySource.b` @type ^`boolean` := v2 @kind boolean;
  #L1ae57e.  v2:= 0L;
  #L1ae582.  v0:= lcmp(v4, v2);
  #L1ae586.  if v0 != 0 then goto L1ae592;
  #L1ae58a.  v2:= 0I;
  #L1ae58c.  call temp:= `complete`(v1, v2) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae592.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.connection.Exchange$ResponseBodySource` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ae5a4.  v0:= v1.`okhttp3.internal.connection.Exchange$ResponseBodySource.d` @type ^`boolean` @kind boolean;
  #L1ae5a8.  if v0 == 0 then goto L1ae5ae;
  #L1ae5ac.  return @kind void;
  #L1ae5ae.  v0:= 1I;
  #L1ae5b0.  v1.`okhttp3.internal.connection.Exchange$ResponseBodySource.d` @type ^`boolean` := v0 @kind boolean;
  #L1ae5b4.  call `close`(v1) @signature `Lokio/ForwardingSource;.close:()V` @kind super;
  #L1ae5ba.  v0:= 0I;
  #L1ae5bc.  call temp:= `complete`(v1, v0) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae5c2.  return @kind void;
  #L1ae5c4.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1ae5c6.  call temp:= `complete`(v1, v0) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae5cc.  v0:= temp @kind object;
  #L1ae5ce.  throw v0;
  catch `java.io.IOException` @[L1ae5b4..L1ae5c2] goto L1ae5c4;
}
procedure `java.io.IOException` `complete`(`okhttp3.internal.connection.Exchange$ResponseBodySource` v8 @kind this, `java.io.IOException` v9 @kind object) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ae3d0.  v0:= v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.c` @type ^`boolean` @kind boolean;
  #L1ae3d4.  if v0 == 0 then goto L1ae3da;
  #L1ae3d8.  return v9 @kind object;
  #L1ae3da.  v0:= 1I;
  #L1ae3dc.  v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.c` @type ^`boolean` := v0 @kind boolean;
  #L1ae3e0.  if v9 != 0 then goto L1ae410;
  #L1ae3e4.  v0:= v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.b` @type ^`boolean` @kind boolean;
  #L1ae3e8.  if v0 == 0 then goto L1ae410;
  #L1ae3ec.  v0:= 0I;
  #L1ae3ee.  v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.b` @type ^`boolean` := v0 @kind boolean;
  #L1ae3f2.  v0:= v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.f` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1ae3f6.  call temp:= `getEventListener$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getEventListener$okhttp:()Lokhttp3/EventListener;` @kind virtual;
  #L1ae3fc.  v0:= temp @kind object;
  #L1ae3fe.  v1:= v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.f` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1ae402.  call temp:= `getCall$okhttp`(v1) @signature `Lokhttp3/internal/connection/Exchange;.getCall$okhttp:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L1ae408.  v1:= temp @kind object;
  #L1ae40a.  call `responseBodyStart`(v0, v1) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L1ae410.  v2:= v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.f` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1ae414.  v3:= v8.`okhttp3.internal.connection.Exchange$ResponseBodySource.a` @type ^`long` @kind wide;
  #L1ae418.  v5:= 1I;
  #L1ae41a.  v6:= 0I;
  #L1ae41c.  v7:= v9 @kind object;
  #L1ae41e.  call temp:= `bodyComplete`(v2, v3, v5, v6, v7) @signature `Lokhttp3/internal/connection/Exchange;.bodyComplete:(JZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae424.  v9:= temp @kind object;
  #L1ae426.  return v9 @kind object;
}
procedure `long` `read`(`okhttp3.internal.connection.Exchange$ResponseBodySource` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ae438.  v0:= "sink" @kind object;
  #L1ae43c.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae442.  v0:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.d` @type ^`boolean` @kind boolean;
  #L1ae446.  v0:= v0 ^~ 1;
  #L1ae44a.  if v0 == 0 then goto L1ae526;
  #L1ae44e.  call temp:= `delegate`(v7) @signature `Lokio/ForwardingSource;.delegate:()Lokio/Source;` @kind virtual;
  #L1ae454.  v0:= temp @kind object;
  #L1ae456.  call temp:= `read`(v0, v8, v9) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1ae45c.  v8:= temp @kind wide;
  #L1ae45e.  v10:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.b` @type ^`boolean` @kind boolean;
  #L1ae462.  if v10 == 0 then goto L1ae48a;
  #L1ae466.  v10:= 0I;
  #L1ae468.  v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.b` @type ^`boolean` := v10 @kind boolean;
  #L1ae46c.  v10:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.f` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1ae470.  call temp:= `getEventListener$okhttp`(v10) @signature `Lokhttp3/internal/connection/Exchange;.getEventListener$okhttp:()Lokhttp3/EventListener;` @kind virtual;
  #L1ae476.  v10:= temp @kind object;
  #L1ae478.  v0:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.f` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1ae47c.  call temp:= `getCall$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getCall$okhttp:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L1ae482.  v0:= temp @kind object;
  #L1ae484.  call `responseBodyStart`(v10, v0) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L1ae48a.  v10:= 0I;
  #L1ae48c.  v0:= -1L;
  #L1ae490.  v2:= lcmp(v8, v0);
  #L1ae494.  if v2 != 0 then goto L1ae4a0;
  #L1ae498.  call temp:= `complete`(v7, v10) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae49e.  return v0 @kind wide;
  #L1ae4a0.  v2:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.a` @type ^`long` @kind wide;
  #L1ae4a4.  v2:= v2 + v8 @kind long;
  #L1ae4a6.  v4:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.e` @type ^`long` @kind wide;
  #L1ae4aa.  v6:= lcmp(v4, v0);
  #L1ae4ae.  if v6 == 0 then goto L1ae502;
  #L1ae4b2.  v0:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.e` @type ^`long` @kind wide;
  #L1ae4b6.  v4:= lcmp(v2, v0);
  #L1ae4ba.  if v4 > 0 then goto L1ae4c0;
  #L1ae4be.  goto L1ae502;
  #L1ae4c0.  v8:= new `java.net.ProtocolException`;
  #L1ae4c4.  v9:= new `java.lang.StringBuilder`;
  #L1ae4c8.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ae4ce.  v10:= "expected " @kind object;
  #L1ae4d2.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae4d8.  v0:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.e` @type ^`long` @kind wide;
  #L1ae4dc.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae4e2.  v10:= " bytes but received " @kind object;
  #L1ae4e6.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae4ec.  call temp:= `append`(v9, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae4f2.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ae4f8.  v9:= temp @kind object;
  #L1ae4fa.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae500.  throw v8;
  #L1ae502.  v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.a` @type ^`long` := v2 @kind wide;
  #L1ae506.  v0:= v7.`okhttp3.internal.connection.Exchange$ResponseBodySource.e` @type ^`long` @kind wide;
  #L1ae50a.  v4:= lcmp(v2, v0);
  #L1ae50e.  if v4 != 0 then goto L1ae518;
  #L1ae512.  call temp:= `complete`(v7, v10) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae518.  return v8 @kind wide;
  #L1ae51a.  v8:= Exception @type ^`java.io.IOException` @kind object;
  #L1ae51c.  call temp:= `complete`(v7, v8) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae522.  v8:= temp @kind object;
  #L1ae524.  throw v8;
  #L1ae526.  v8:= new `java.lang.IllegalStateException`;
  #L1ae52a.  v9:= "closed" @kind object;
  #L1ae52e.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ae534.  v9:= temp @kind object;
  #L1ae536.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae53c.  throw v8;
  catch `java.io.IOException` @[L1ae44e..L1ae518] goto L1ae51a;
}
