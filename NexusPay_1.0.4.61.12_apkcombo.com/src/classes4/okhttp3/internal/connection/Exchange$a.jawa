record `okhttp3.internal.connection.Exchange$a` @kind class @AccessFlag FINAL extends `okio.ForwardingSink` @kind class {
  `boolean` `okhttp3.internal.connection.Exchange$a.a` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.Exchange$a.b` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.Exchange$a.c` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.Exchange$a.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.Exchange` `okhttp3.internal.connection.Exchange$a.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.connection.Exchange$a` v1 @kind this, `okhttp3.internal.connection.Exchange` v2 @kind object, `okio.Sink` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/connection/Exchange$a;.<init>:(Lokhttp3/internal/connection/Exchange;Lokio/Sink;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ae220.  v0:= "delegate" @kind object;
  #L1ae224.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae22a.  v1.`okhttp3.internal.connection.Exchange$a.e` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L1ae22e.  call `<init>`(v1, v3) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L1ae234.  v1.`okhttp3.internal.connection.Exchange$a.d` @type ^`long` := v4 @kind wide;
  #L1ae238.  return @kind void;
}
procedure `java.io.IOException` `a`(`okhttp3.internal.connection.Exchange$a` v7 @kind this, `java.io.IOException` v8 @kind object) @signature `Lokhttp3/internal/connection/Exchange$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ae1e8.  v0:= v7.`okhttp3.internal.connection.Exchange$a.a` @type ^`boolean` @kind boolean;
  #L1ae1ec.  if v0 == 0 then goto L1ae1f2;
  #L1ae1f0.  return v8 @kind object;
  #L1ae1f2.  v0:= 1I;
  #L1ae1f4.  v7.`okhttp3.internal.connection.Exchange$a.a` @type ^`boolean` := v0 @kind boolean;
  #L1ae1f8.  v1:= v7.`okhttp3.internal.connection.Exchange$a.e` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1ae1fc.  v2:= v7.`okhttp3.internal.connection.Exchange$a.b` @type ^`long` @kind wide;
  #L1ae200.  v4:= 0I;
  #L1ae202.  v5:= 1I;
  #L1ae204.  v6:= v8 @kind object;
  #L1ae206.  call temp:= `bodyComplete`(v1, v2, v4, v5, v6) @signature `Lokhttp3/internal/connection/Exchange;.bodyComplete:(JZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ae20c.  v8:= temp @kind object;
  #L1ae20e.  return v8 @kind object;
}
procedure `void` `close`(`okhttp3.internal.connection.Exchange$a` v5 @kind this) @signature `Lokhttp3/internal/connection/Exchange$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ae24c.  v0:= v5.`okhttp3.internal.connection.Exchange$a.c` @type ^`boolean` @kind boolean;
  #L1ae250.  if v0 == 0 then goto L1ae256;
  #L1ae254.  return @kind void;
  #L1ae256.  v0:= 1I;
  #L1ae258.  v5.`okhttp3.internal.connection.Exchange$a.c` @type ^`boolean` := v0 @kind boolean;
  #L1ae25c.  v0:= v5.`okhttp3.internal.connection.Exchange$a.d` @type ^`long` @kind wide;
  #L1ae260.  v2:= -1L;
  #L1ae264.  v4:= lcmp(v0, v2);
  #L1ae268.  if v4 == 0 then goto L1ae28a;
  #L1ae26c.  v2:= v5.`okhttp3.internal.connection.Exchange$a.b` @type ^`long` @kind wide;
  #L1ae270.  v4:= lcmp(v2, v0);
  #L1ae274.  if v4 != 0 then goto L1ae27a;
  #L1ae278.  goto L1ae28a;
  #L1ae27a.  v0:= new `java.net.ProtocolException`;
  #L1ae27e.  v1:= "unexpected end of stream" @kind object;
  #L1ae282.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae288.  throw v0;
  #L1ae28a.  call `close`(v5) @signature `Lokio/ForwardingSink;.close:()V` @kind super;
  #L1ae290.  v0:= 0I;
  #L1ae292.  call temp:= `a`(v5, v0) @signature `Lokhttp3/internal/connection/Exchange$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ae298.  return @kind void;
  #L1ae29a.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1ae29c.  call temp:= `a`(v5, v0) @signature `Lokhttp3/internal/connection/Exchange$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ae2a2.  v0:= temp @kind object;
  #L1ae2a4.  throw v0;
  catch `java.io.IOException` @[L1ae28a..L1ae298] goto L1ae29a;
}
procedure `void` `flush`(`okhttp3.internal.connection.Exchange$a` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ae2c8.  call `flush`(v1) @signature `Lokio/ForwardingSink;.flush:()V` @kind super;
  #L1ae2ce.  return @kind void;
  #L1ae2d0.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1ae2d2.  call temp:= `a`(v1, v0) @signature `Lokhttp3/internal/connection/Exchange$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ae2d8.  v0:= temp @kind object;
  #L1ae2da.  throw v0;
  catch `java.io.IOException` @[L1ae2c8..L1ae2ce] goto L1ae2d0;
}
procedure `void` `write`(`okhttp3.internal.connection.Exchange$a` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokhttp3/internal/connection/Exchange$a;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ae2fc.  v0:= "source" @kind object;
  #L1ae300.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae306.  v0:= v5.`okhttp3.internal.connection.Exchange$a.c` @type ^`boolean` @kind boolean;
  #L1ae30a.  v0:= v0 ^~ 1;
  #L1ae30e.  if v0 == 0 then goto L1ae398;
  #L1ae312.  v0:= v5.`okhttp3.internal.connection.Exchange$a.d` @type ^`long` @kind wide;
  #L1ae316.  v2:= -1L;
  #L1ae31a.  v4:= lcmp(v0, v2);
  #L1ae31e.  if v4 == 0 then goto L1ae37a;
  #L1ae322.  v2:= v5.`okhttp3.internal.connection.Exchange$a.b` @type ^`long` @kind wide;
  #L1ae326.  v2:= v2 + v7 @kind long;
  #L1ae328.  v4:= lcmp(v2, v0);
  #L1ae32c.  if v4 > 0 then goto L1ae332;
  #L1ae330.  goto L1ae37a;
  #L1ae332.  v6:= new `java.net.ProtocolException`;
  #L1ae336.  v0:= new `java.lang.StringBuilder`;
  #L1ae33a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ae340.  v1:= "expected " @kind object;
  #L1ae344.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae34a.  v1:= v5.`okhttp3.internal.connection.Exchange$a.d` @type ^`long` @kind wide;
  #L1ae34e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae354.  v1:= " bytes but received " @kind object;
  #L1ae358.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae35e.  v1:= v5.`okhttp3.internal.connection.Exchange$a.b` @type ^`long` @kind wide;
  #L1ae362.  v1:= v1 + v7 @kind long;
  #L1ae364.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae36a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ae370.  v7:= temp @kind object;
  #L1ae372.  call `<init>`(v6, v7) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae378.  throw v6;
  #L1ae37a.  call `write`(v5, v6, v7) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L1ae380.  v0:= v5.`okhttp3.internal.connection.Exchange$a.b` @type ^`long` @kind wide;
  #L1ae384.  v0:= v0 + v7 @kind long;
  #L1ae386.  v5.`okhttp3.internal.connection.Exchange$a.b` @type ^`long` := v0 @kind wide;
  #L1ae38a.  return @kind void;
  #L1ae38c.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #L1ae38e.  call temp:= `a`(v5, v6) @signature `Lokhttp3/internal/connection/Exchange$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ae394.  v6:= temp @kind object;
  #L1ae396.  throw v6;
  #L1ae398.  v6:= new `java.lang.IllegalStateException`;
  #L1ae39c.  v7:= "closed" @kind object;
  #L1ae3a0.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ae3a6.  v7:= temp @kind object;
  #L1ae3a8.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae3ae.  throw v6;
  catch `java.io.IOException` @[L1ae37a..L1ae38a] goto L1ae38c;
}
