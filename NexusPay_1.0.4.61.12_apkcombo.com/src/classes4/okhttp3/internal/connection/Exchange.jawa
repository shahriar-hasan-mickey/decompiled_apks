record `okhttp3.internal.connection.Exchange` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.internal.connection.Exchange.a` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.connection.Exchange.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RealCall` `okhttp3.internal.connection.Exchange.c` @AccessFlag PRIVATE_FINAL;
  `okhttp3.EventListener` `okhttp3.internal.connection.Exchange.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.ExchangeFinder` `okhttp3.internal.connection.Exchange.e` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http.ExchangeCodec` `okhttp3.internal.connection.Exchange.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.connection.Exchange` v1 @kind this, `okhttp3.internal.connection.RealCall` v2 @kind object, `okhttp3.EventListener` v3 @kind object, `okhttp3.internal.connection.ExchangeFinder` v4 @kind object, `okhttp3.internal.http.ExchangeCodec` v5 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.<init>:(Lokhttp3/internal/connection/RealCall;Lokhttp3/EventListener;Lokhttp3/internal/connection/ExchangeFinder;Lokhttp3/internal/http/ExchangeCodec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1aef80.  v0:= "call" @kind object;
  #L1aef84.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aef8a.  v0:= "eventListener" @kind object;
  #L1aef8e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aef94.  v0:= "finder" @kind object;
  #L1aef98.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aef9e.  v0:= "codec" @kind object;
  #L1aefa2.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aefa8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aefae.  v1.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` := v2 @kind object;
  #L1aefb2.  v1.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` := v3 @kind object;
  #L1aefb6.  v1.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` := v4 @kind object;
  #L1aefba.  v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` := v5 @kind object;
  #L1aefbe.  call temp:= `getConnection`(v5) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L1aefc4.  v2:= temp @kind object;
  #L1aefc6.  v1.`okhttp3.internal.connection.Exchange.b` @type ^`okhttp3.internal.connection.RealConnection` := v2 @kind object;
  #L1aefca.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.connection.Exchange` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1af140.  v0:= v2.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L1af144.  call `trackFailure`(v0, v3) @signature `Lokhttp3/internal/connection/ExchangeFinder;.trackFailure:(Ljava/io/IOException;)V` @kind virtual;
  #L1af14a.  v0:= v2.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1af14e.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L1af154.  v0:= temp @kind object;
  #L1af156.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af15a.  call `trackFailure$okhttp`(v0, v1, v3) @signature `Lokhttp3/internal/connection/RealConnection;.trackFailure$okhttp:(Lokhttp3/internal/connection/RealCall;Ljava/io/IOException;)V` @kind virtual;
  #L1af160.  return @kind void;
}
procedure `java.io.IOException` `bodyComplete`(`okhttp3.internal.connection.Exchange` v2 @kind this, `long` v3 , `boolean` v5 , `boolean` v6 , `java.io.IOException` v7 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.bodyComplete:(JZZLjava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1aed28.  if v7 == 0 then goto L1aed32;
  #L1aed2c.  call `a`(v2, v7) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L1aed32.  if v6 == 0 then goto L1aed58;
  #L1aed36.  if v7 == 0 then goto L1aed4a;
  #L1aed3a.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aed3e.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aed42.  call `requestFailed`(v0, v1, v7) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1aed48.  goto L1aed58;
  #L1aed4a.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aed4e.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aed52.  call `requestBodyEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.requestBodyEnd:(Lokhttp3/Call;J)V` @kind virtual;
  #L1aed58.  if v5 == 0 then goto L1aed7e;
  #L1aed5c.  if v7 == 0 then goto L1aed70;
  #L1aed60.  v3:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aed64.  v4:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aed68.  call `responseFailed`(v3, v4, v7) @signature `Lokhttp3/EventListener;.responseFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1aed6e.  goto L1aed7e;
  #L1aed70.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aed74.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aed78.  call `responseBodyEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.responseBodyEnd:(Lokhttp3/Call;J)V` @kind virtual;
  #L1aed7e.  v3:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aed82.  call temp:= `messageDone$okhttp`(v3, v2, v6, v5, v7) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1aed88.  v3:= temp @kind object;
  #L1aed8a.  return v3 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aefdc.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aefe0.  call `cancel`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.cancel:()V` @kind interface;
  #L1aefe6.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.connection.Exchange` v3 @kind this, `okhttp3.Request` v4 @kind object, `boolean` v5 ) @signature `Lokhttp3/internal/connection/Exchange;.createRequestBody:(Lokhttp3/Request;Z)Lokio/Sink;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1aef24.  v0:= "request" @kind object;
  #L1aef28.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aef2e.  v3.`okhttp3.internal.connection.Exchange.a` @type ^`boolean` := v5 @kind boolean;
  #L1aef32.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L1aef38.  v5:= temp @kind object;
  #L1aef3a.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1aef40.  call temp:= `contentLength`(v5) @signature `Lokhttp3/RequestBody;.contentLength:()J` @kind virtual;
  #L1aef46.  v0:= temp @kind wide;
  #L1aef48.  v5:= v3.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aef4c.  v2:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aef50.  call `requestBodyStart`(v5, v2) @signature `Lokhttp3/EventListener;.requestBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L1aef56.  v5:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aef5a.  call temp:= `createRequestBody`(v5, v4, v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @kind interface;
  #L1aef60.  v4:= temp @kind object;
  #L1aef62.  v5:= new `okhttp3.internal.connection.Exchange$a`;
  #L1aef66.  call `<init>`(v5, v3, v4, v0) @signature `Lokhttp3/internal/connection/Exchange$a;.<init>:(Lokhttp3/internal/connection/Exchange;Lokio/Sink;J)V` @kind direct;
  #L1aef6c.  return v5 @kind object;
}
procedure `void` `detachWithViolence`(`okhttp3.internal.connection.Exchange` v3 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.detachWithViolence:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1aeff8.  v0:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aeffc.  call `cancel`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.cancel:()V` @kind interface;
  #L1af002.  v0:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af006.  v1:= 1I;
  #L1af008.  v2:= 0I;
  #L1af00a.  call temp:= `messageDone$okhttp`(v0, v3, v1, v1, v2) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1af010.  return @kind void;
}
procedure `void` `finishRequest`(`okhttp3.internal.connection.Exchange` v3 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.finishRequest:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1af024.  v0:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1af028.  call `finishRequest`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.finishRequest:()V` @kind interface;
  #L1af02e.  return @kind void;
  #L1af030.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1af032.  v1:= v3.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1af036.  v2:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af03a.  call `requestFailed`(v1, v2, v0) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1af040.  call `a`(v3, v0) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L1af046.  throw v0;
  catch `java.io.IOException` @[L1af024..L1af02e] goto L1af030;
}
procedure `void` `flushRequest`(`okhttp3.internal.connection.Exchange` v3 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.flushRequest:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1af068.  v0:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1af06c.  call `flushRequest`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.flushRequest:()V` @kind interface;
  #L1af072.  return @kind void;
  #L1af074.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1af076.  v1:= v3.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1af07a.  v2:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af07e.  call `requestFailed`(v1, v2, v0) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1af084.  call `a`(v3, v0) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L1af08a.  throw v0;
  catch `java.io.IOException` @[L1af068..L1af072] goto L1af074;
}
procedure `okhttp3.internal.connection.RealCall` `getCall$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getCall$okhttp:()Lokhttp3/internal/connection/RealCall;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aeec4.  v0:= v1.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aeec8.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnection$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aeedc.  v0:= v1.`okhttp3.internal.connection.Exchange.b` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1aeee0.  return v0 @kind object;
}
procedure `okhttp3.EventListener` `getEventListener$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getEventListener$okhttp:()Lokhttp3/EventListener;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aed9c.  v0:= v1.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aeda0.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.ExchangeFinder` `getFinder$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getFinder$okhttp:()Lokhttp3/internal/connection/ExchangeFinder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aeeac.  v0:= v1.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L1aeeb0.  return v0 @kind object;
}
procedure `boolean` `isCoalescedConnection$okhttp`(`okhttp3.internal.connection.Exchange` v2 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.isCoalescedConnection$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1aecb0.  v0:= v2.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L1aecb4.  call temp:= `getAddress$okhttp`(v0) @signature `Lokhttp3/internal/connection/ExchangeFinder;.getAddress$okhttp:()Lokhttp3/Address;` @kind virtual;
  #L1aecba.  v0:= temp @kind object;
  #L1aecbc.  call temp:= `url`(v0) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1aecc2.  v0:= temp @kind object;
  #L1aecc4.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L1aecca.  v0:= temp @kind object;
  #L1aeccc.  v1:= v2.`okhttp3.internal.connection.Exchange.b` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1aecd0.  call temp:= `route`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L1aecd6.  v1:= temp @kind object;
  #L1aecd8.  call temp:= `address`(v1) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L1aecde.  v1:= temp @kind object;
  #L1aece0.  call temp:= `url`(v1) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1aece6.  v1:= temp @kind object;
  #L1aece8.  call temp:= `host`(v1) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L1aecee.  v1:= temp @kind object;
  #L1aecf0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1aecf6.  v0:= temp;
  #L1aecf8.  v0:= v0 ^~ 1;
  #L1aecfc.  return v0;
}
procedure `boolean` `isDuplex$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.isDuplex$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aed10.  v0:= v1.`okhttp3.internal.connection.Exchange.a` @type ^`boolean` @kind boolean;
  #L1aed14.  return v0;
}
procedure `okhttp3.internal.ws.RealWebSocket$Streams` `newWebSocketStreams`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.newWebSocketStreams:()Lokhttp3/internal/ws/RealWebSocket$Streams;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aeef4.  v0:= v1.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aeef8.  call `timeoutEarlyExit`(v0) @signature `Lokhttp3/internal/connection/RealCall;.timeoutEarlyExit:()V` @kind virtual;
  #L1aeefe.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aef02.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L1aef08.  v0:= temp @kind object;
  #L1aef0a.  call temp:= `newWebSocketStreams$okhttp`(v0, v1) @signature `Lokhttp3/internal/connection/RealConnection;.newWebSocketStreams$okhttp:(Lokhttp3/internal/connection/Exchange;)Lokhttp3/internal/ws/RealWebSocket$Streams;` @kind virtual;
  #L1aef10.  v0:= temp @kind object;
  #L1aef12.  return v0 @kind object;
}
procedure `void` `noNewExchangesOnConnection`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.noNewExchangesOnConnection:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1af0ac.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1af0b0.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L1af0b6.  v0:= temp @kind object;
  #L1af0b8.  call `noNewExchanges$okhttp`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L1af0be.  return @kind void;
}
procedure `void` `noRequestBody`(`okhttp3.internal.connection.Exchange` v4 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.noRequestBody:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1af0d0.  v0:= v4.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af0d4.  v1:= 1I;
  #L1af0d6.  v2:= 0I;
  #L1af0d8.  v3:= 0I;
  #L1af0da.  call temp:= `messageDone$okhttp`(v0, v4, v1, v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1af0e0.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.connection.Exchange` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aee24.  v0:= "response" @kind object;
  #L1aee28.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aee2e.  v0:= "Content-Type" @kind object;
  #L1aee32.  v1:= 2I;
  #L1aee34.  v2:= 0I;
  #L1aee36.  call temp:= `header$default`(v5, v0, v2, v1, v2) @signature `Lokhttp3/Response;.header$default:(Lokhttp3/Response;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1aee3c.  v0:= temp @kind object;
  #L1aee3e.  v1:= v4.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aee42.  call temp:= `reportedContentLength`(v1, v5) @signature `Lokhttp3/internal/http/ExchangeCodec;.reportedContentLength:(Lokhttp3/Response;)J` @kind interface;
  #L1aee48.  v1:= temp @kind wide;
  #L1aee4a.  v3:= v4.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aee4e.  call temp:= `openResponseBodySource`(v3, v5) @signature `Lokhttp3/internal/http/ExchangeCodec;.openResponseBodySource:(Lokhttp3/Response;)Lokio/Source;` @kind interface;
  #L1aee54.  v5:= temp @kind object;
  #L1aee56.  v3:= new `okhttp3.internal.connection.Exchange$ResponseBodySource`;
  #L1aee5a.  call `<init>`(v3, v4, v5, v1) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.<init>:(Lokhttp3/internal/connection/Exchange;Lokio/Source;J)V` @kind direct;
  #L1aee60.  v5:= new `okhttp3.internal.http.RealResponseBody`;
  #L1aee64.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1aee6a.  v3:= temp @kind object;
  #L1aee6c.  call `<init>`(v5, v0, v1, v3) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L1aee72.  return v5 @kind object;
  #L1aee74.  v5:= Exception @type ^`java.io.IOException` @kind object;
  #L1aee76.  v0:= v4.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aee7a.  v1:= v4.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aee7e.  call `responseFailed`(v0, v1, v5) @signature `Lokhttp3/EventListener;.responseFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1aee84.  call `a`(v4, v5) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L1aee8a.  throw v5;
  catch `java.io.IOException` @[L1aee2e..L1aee72] goto L1aee74;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.connection.Exchange` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1aedd4.  v0:= v2.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aedd8.  call temp:= `readResponseHeaders`(v0, v3) @signature `Lokhttp3/internal/http/ExchangeCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind interface;
  #L1aedde.  v3:= temp @kind object;
  #L1aede0.  if v3 == 0 then goto L1aedea;
  #L1aede4.  call `initExchange$okhttp`(v3, v2) @signature `Lokhttp3/Response$Builder;.initExchange$okhttp:(Lokhttp3/internal/connection/Exchange;)V` @kind virtual;
  #L1aedea.  return v3 @kind object;
  #L1aedec.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L1aedee.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1aedf2.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1aedf6.  call `responseFailed`(v0, v1, v3) @signature `Lokhttp3/EventListener;.responseFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1aedfc.  call `a`(v2, v3) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L1aee02.  throw v3;
  catch `java.io.IOException` @[L1aedd4..L1aedea] goto L1aedec;
}
procedure `void` `responseHeadersEnd`(`okhttp3.internal.connection.Exchange` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersEnd:(Lokhttp3/Response;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1af0f4.  v0:= "response" @kind object;
  #L1af0f8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1af0fe.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1af102.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af106.  call `responseHeadersEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.responseHeadersEnd:(Lokhttp3/Call;Lokhttp3/Response;)V` @kind virtual;
  #L1af10c.  return @kind void;
}
procedure `void` `responseHeadersStart`(`okhttp3.internal.connection.Exchange` v2 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1af120.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1af124.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af128.  call `responseHeadersStart`(v0, v1) @signature `Lokhttp3/EventListener;.responseHeadersStart:(Lokhttp3/Call;)V` @kind virtual;
  #L1af12e.  return @kind void;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aedb4.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1aedb8.  call temp:= `trailers`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.trailers:()Lokhttp3/Headers;` @kind interface;
  #L1aedbe.  v0:= temp @kind object;
  #L1aedc0.  return v0 @kind object;
}
procedure `void` `webSocketUpgradeFailed`(`okhttp3.internal.connection.Exchange` v6 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.webSocketUpgradeFailed:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1af174.  v1:= -1L;
  #L1af178.  v3:= 1I;
  #L1af17a.  v4:= 1I;
  #L1af17c.  v5:= 0I;
  #L1af17e.  v0:= v6 @kind object;
  #L1af180.  call temp:= `bodyComplete`(v0, v1, v3, v4, v5) @signature `Lokhttp3/internal/connection/Exchange;.bodyComplete:(JZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1af186.  return @kind void;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.connection.Exchange` v2 @kind this, `okhttp3.Request` v3 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1af198.  v0:= "request" @kind object;
  #L1af19c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1af1a2.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1af1a6.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af1aa.  call `requestHeadersStart`(v0, v1) @signature `Lokhttp3/EventListener;.requestHeadersStart:(Lokhttp3/Call;)V` @kind virtual;
  #L1af1b0.  v0:= v2.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1af1b4.  call `writeRequestHeaders`(v0, v3) @signature `Lokhttp3/internal/http/ExchangeCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind interface;
  #L1af1ba.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1af1be.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af1c2.  call `requestHeadersEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.requestHeadersEnd:(Lokhttp3/Call;Lokhttp3/Request;)V` @kind virtual;
  #L1af1c8.  return @kind void;
  #L1af1ca.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L1af1cc.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1af1d0.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af1d4.  call `requestFailed`(v0, v1, v3) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1af1da.  call `a`(v2, v3) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L1af1e0.  throw v3;
  catch `java.io.IOException` @[L1af1a2..L1af1c8] goto L1af1ca;
}
