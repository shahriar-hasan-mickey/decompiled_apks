record `okhttp3.internal.connection.RealConnectionPool` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.connection.RealConnectionPool.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.concurrent.TaskQueue` `okhttp3.internal.connection.RealConnectionPool.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RealConnectionPool$cleanupTask$1` `okhttp3.internal.connection.RealConnectionPool.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentLinkedQueue` `okhttp3.internal.connection.RealConnectionPool.d` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.connection.RealConnectionPool.e` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.connection.RealConnectionPool$Companion` `@@okhttp3.internal.connection.RealConnectionPool.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/connection/RealConnectionPool;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b0d28.  v0:= new `okhttp3.internal.connection.RealConnectionPool$Companion`;
  #L1b0d2c.  v1:= 0I;
  #L1b0d2e.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/connection/RealConnectionPool$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1b0d34.  `@@okhttp3.internal.connection.RealConnectionPool.Companion` @type ^`okhttp3.internal.connection.RealConnectionPool$Companion` := v0 @kind object;
  #L1b0d38.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RealConnectionPool` v2 @kind this, `okhttp3.internal.concurrent.TaskRunner` v3 @kind object, `int` v4 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object) @signature `Lokhttp3/internal/connection/RealConnectionPool;.<init>:(Lokhttp3/internal/concurrent/TaskRunner;IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b0d4c.  v0:= "taskRunner" @kind object;
  #L1b0d50.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0d56.  v0:= "timeUnit" @kind object;
  #L1b0d5a.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0d60.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b0d66.  v2.`okhttp3.internal.connection.RealConnectionPool.e` @type ^`int` := v4;
  #L1b0d6a.  call temp:= `toNanos`(v7, v5) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L1b0d70.  v0:= temp @kind wide;
  #L1b0d72.  v2.`okhttp3.internal.connection.RealConnectionPool.a` @type ^`long` := v0 @kind wide;
  #L1b0d76.  call temp:= `newQueue`(v3) @signature `Lokhttp3/internal/concurrent/TaskRunner;.newQueue:()Lokhttp3/internal/concurrent/TaskQueue;` @kind virtual;
  #L1b0d7c.  v3:= temp @kind object;
  #L1b0d7e.  v2.`okhttp3.internal.connection.RealConnectionPool.b` @type ^`okhttp3.internal.concurrent.TaskQueue` := v3 @kind object;
  #L1b0d82.  v3:= new `okhttp3.internal.connection.RealConnectionPool$cleanupTask$1`;
  #L1b0d86.  v4:= new `java.lang.StringBuilder`;
  #L1b0d8a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0d90.  v7:= `@@okhttp3.internal.Util.okHttpName` @type ^`java.lang.String` @kind object;
  #L1b0d94.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0d9a.  v7:= " ConnectionPool" @kind object;
  #L1b0d9e.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0da4.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0daa.  v4:= temp @kind object;
  #L1b0dac.  call `<init>`(v3, v2, v4) @signature `Lokhttp3/internal/connection/RealConnectionPool$cleanupTask$1;.<init>:(Lokhttp3/internal/connection/RealConnectionPool;Ljava/lang/String;)V` @kind direct;
  #L1b0db2.  v2.`okhttp3.internal.connection.RealConnectionPool.c` @type ^`okhttp3.internal.connection.RealConnectionPool$cleanupTask$1` := v3 @kind object;
  #L1b0db6.  v3:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L1b0dba.  call `<init>`(v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L1b0dc0.  v2.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v3 @kind object;
  #L1b0dc4.  v3:= 0L;
  #L1b0dc8.  v7:= lcmp(v5, v3);
  #L1b0dcc.  if v7 <= 0 then goto L1b0dd4;
  #L1b0dd0.  v3:= 1I;
  #L1b0dd2.  goto L1b0dd6;
  #L1b0dd4.  v3:= 0I;
  #L1b0dd6.  if v3 == 0 then goto L1b0ddc;
  #L1b0dda.  return @kind void;
  #L1b0ddc.  v3:= new `java.lang.StringBuilder`;
  #L1b0de0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0de6.  v4:= "keepAliveDuration <= 0: " @kind object;
  #L1b0dea.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0df0.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0df6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0dfc.  v3:= temp @kind object;
  #L1b0dfe.  v4:= new `java.lang.IllegalArgumentException`;
  #L1b0e02.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0e08.  v3:= temp @kind object;
  #L1b0e0a.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0e10.  throw v4;
}
procedure `int` `a`(`okhttp3.internal.connection.RealConnectionPool` v6 @kind this, `okhttp3.internal.connection.RealConnection` v7 @kind object, `long` v8 ) @signature `Lokhttp3/internal/connection/RealConnectionPool;.a:(Lokhttp3/internal/connection/RealConnection;J)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b0a5c.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1b0a60.  if v0 == 0 then goto L1b0aca;
  #L1b0a64.  call temp:= `holdsLock`(v7) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1b0a6a.  v0:= temp;
  #L1b0a6c.  if v0 == 0 then goto L1b0a72;
  #L1b0a70.  goto L1b0aca;
  #L1b0a72.  v8:= new `java.lang.AssertionError`;
  #L1b0a76.  v9:= new `java.lang.StringBuilder`;
  #L1b0a7a.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0a80.  v0:= "Thread " @kind object;
  #L1b0a84.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0a8a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1b0a90.  v0:= temp @kind object;
  #L1b0a92.  v1:= "Thread.currentThread()" @kind object;
  #L1b0a96.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0a9c.  call temp:= `getName`(v0) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b0aa2.  v0:= temp @kind object;
  #L1b0aa4.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0aaa.  v0:= " MUST hold lock on " @kind object;
  #L1b0aae.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0ab4.  call temp:= `append`(v9, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0aba.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0ac0.  v7:= temp @kind object;
  #L1b0ac2.  call `<init>`(v8, v7) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1b0ac8.  throw v8;
  #L1b0aca.  call temp:= `getCalls`(v7) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L1b0ad0.  v0:= temp @kind object;
  #L1b0ad2.  v1:= 0I;
  #L1b0ad4.  v2:= 0I;
  #L1b0ad6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0adc.  v3:= temp;
  #L1b0ade.  if v2 >= v3 then goto L1b0ba8;
  #L1b0ae2.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1b0ae8.  v3:= temp @kind object;
  #L1b0aea.  v3:= (`java.lang.ref.Reference`) v3 @kind object;
  #L1b0aee.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1b0af4.  v4:= temp @kind object;
  #L1b0af6.  if v4 == 0 then goto L1b0b00;
  #L1b0afa.  v2:= v2 + 1;
  #L1b0afe.  goto L1b0ad6;
  #L1b0b00.  if v3 == 0 then goto L1b0b98;
  #L1b0b04.  v3:= (`okhttp3.internal.connection.RealCall$CallReference`) v3 @kind object;
  #L1b0b08.  v4:= new `java.lang.StringBuilder`;
  #L1b0b0c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0b12.  v5:= "A connection to " @kind object;
  #L1b0b16.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0b1c.  call temp:= `route`(v7) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L1b0b22.  v5:= temp @kind object;
  #L1b0b24.  call temp:= `address`(v5) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L1b0b2a.  v5:= temp @kind object;
  #L1b0b2c.  call temp:= `url`(v5) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1b0b32.  v5:= temp @kind object;
  #L1b0b34.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0b3a.  v5:= " was leaked. " @kind object;
  #L1b0b3e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0b44.  v5:= "Did you forget to close a response body?" @kind object;
  #L1b0b48.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0b4e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0b54.  v4:= temp @kind object;
  #L1b0b56.  v5:= `@@okhttp3.internal.platform.Platform.Companion` @type ^`okhttp3.internal.platform.Platform$Companion` @kind object;
  #L1b0b5a.  call temp:= `get`(v5) @signature `Lokhttp3/internal/platform/Platform$Companion;.get:()Lokhttp3/internal/platform/Platform;` @kind virtual;
  #L1b0b60.  v5:= temp @kind object;
  #L1b0b62.  call temp:= `getCallStackTrace`(v3) @signature `Lokhttp3/internal/connection/RealCall$CallReference;.getCallStackTrace:()Ljava/lang/Object;` @kind virtual;
  #L1b0b68.  v3:= temp @kind object;
  #L1b0b6a.  call `logCloseableLeak`(v5, v4, v3) @signature `Lokhttp3/internal/platform/Platform;.logCloseableLeak:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L1b0b70.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1b0b76.  v3:= 1I;
  #L1b0b78.  call `setNoNewExchanges`(v7, v3) @signature `Lokhttp3/internal/connection/RealConnection;.setNoNewExchanges:(Z)V` @kind virtual;
  #L1b0b7e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1b0b84.  v3:= temp;
  #L1b0b86.  if v3 == 0 then goto L1b0ad6;
  #L1b0b8a.  v2:= v6.`okhttp3.internal.connection.RealConnectionPool.a` @type ^`long` @kind wide;
  #L1b0b8e.  v8:= v8 - v2 @kind long;
  #L1b0b90.  call `setIdleAtNs$okhttp`(v7, v8) @signature `Lokhttp3/internal/connection/RealConnection;.setIdleAtNs$okhttp:(J)V` @kind virtual;
  #L1b0b96.  return v1;
  #L1b0b98.  v7:= new `java.lang.NullPointerException`;
  #L1b0b9c.  v8:= "null cannot be cast to non-null type okhttp3.internal.connection.RealCall.CallReference" @kind object;
  #L1b0ba0.  call `<init>`(v7, v8) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0ba6.  throw v7;
  #L1b0ba8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0bae.  v7:= temp;
  #L1b0bb0.  return v7;
}
procedure `boolean` `callAcquirePooledConnection`(`okhttp3.internal.connection.RealConnectionPool` v3 @kind this, `okhttp3.Address` v4 @kind object, `okhttp3.internal.connection.RealCall` v5 @kind object, `java.util.List` v6 @kind object, `boolean` v7 ) @signature `Lokhttp3/internal/connection/RealConnectionPool;.callAcquirePooledConnection:(Lokhttp3/Address;Lokhttp3/internal/connection/RealCall;Ljava/util/List;Z)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b081c.  v0:= "address" @kind object;
  #L1b0820.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0826.  v0:= "call" @kind object;
  #L1b082a.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0830.  v0:= v3.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0834.  call temp:= `iterator`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1b083a.  v0:= temp @kind object;
  #L1b083c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b0842.  v1:= temp;
  #L1b0844.  if v1 == 0 then goto L1b0898;
  #L1b0848.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b084e.  v1:= temp @kind object;
  #L1b0850.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L1b0854.  v2:= "connection" @kind object;
  #L1b0858.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b085e.  @monitorenter v1
  #L1b0860.  if v7 == 0 then goto L1b0872;
  #L1b0864.  call temp:= `isMultiplexed$okhttp`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.isMultiplexed$okhttp:()Z` @kind virtual;
  #L1b086a.  v2:= temp;
  #L1b086c.  if v2 != 0 then goto L1b0872;
  #L1b0870.  goto L1b087e;
  #L1b0872.  call temp:= `isEligible$okhttp`(v1, v4, v6) @signature `Lokhttp3/internal/connection/RealConnection;.isEligible$okhttp:(Lokhttp3/Address;Ljava/util/List;)Z` @kind virtual;
  #L1b0878.  v2:= temp;
  #L1b087a.  if v2 != 0 then goto L1b0886;
  #L1b087e.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1b0882.  @monitorexit v1
  #L1b0884.  goto L1b083c;
  #L1b0886.  call `acquireConnectionNoEvents`(v5, v1) @signature `Lokhttp3/internal/connection/RealCall;.acquireConnectionNoEvents:(Lokhttp3/internal/connection/RealConnection;)V` @kind virtual;
  #L1b088c.  v4:= 1I;
  #L1b088e.  @monitorexit v1
  #L1b0890.  return v4;
  #L1b0892.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b0894.  @monitorexit v1
  #L1b0896.  throw v4;
  #L1b0898.  v4:= 0I;
  #L1b089a.  return v4;
  catch `java.lang.Throwable` @[L1b0864..L1b0882] goto L1b0892;
  catch `java.lang.Throwable` @[L1b0886..L1b088c] goto L1b0892;
}
procedure `long` `cleanup`(`okhttp3.internal.connection.RealConnectionPool` v10 @kind this, `long` v11 ) @signature `Lokhttp3/internal/connection/RealConnectionPool;.cleanup:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1b0bc4.  v0:= v10.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0bc8.  call temp:= `iterator`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1b0bce.  v0:= temp @kind object;
  #L1b0bd0.  v1:= 0I;
  #L1b0bd2.  v2:= 0I;
  #L1b0bd4.  v3:= -9223372036854775808L;
  #L1b0bd8.  v4:= v3 @kind wide;
  #L1b0bda.  v3:= v2 @kind object;
  #L1b0bdc.  v2:= 0I;
  #L1b0bde.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b0be4.  v6:= temp;
  #L1b0be6.  if v6 == 0 then goto L1b0c44;
  #L1b0bea.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b0bf0.  v6:= temp @kind object;
  #L1b0bf2.  v6:= (`okhttp3.internal.connection.RealConnection`) v6 @kind object;
  #L1b0bf6.  v7:= "connection" @kind object;
  #L1b0bfa.  call `checkNotNullExpressionValue`(v6, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0c00.  @monitorenter v6
  #L1b0c02.  call temp:= `a`(v10, v6, v11) @signature `Lokhttp3/internal/connection/RealConnectionPool;.a:(Lokhttp3/internal/connection/RealConnection;J)I` @kind direct;
  #L1b0c08.  v7:= temp;
  #L1b0c0a.  if v7 <= 0 then goto L1b0c14;
  #L1b0c0e.  v2:= v2 + 1;
  #L1b0c12.  goto L1b0c3a;
  #L1b0c14.  v1:= v1 + 1;
  #L1b0c18.  call temp:= `getIdleAtNs$okhttp`(v6) @signature `Lokhttp3/internal/connection/RealConnection;.getIdleAtNs$okhttp:()J` @kind virtual;
  #L1b0c1e.  v7:= temp @kind wide;
  #L1b0c20.  v7:= v11 - v7 @kind long;
  #L1b0c24.  v9:= lcmp(v7, v4);
  #L1b0c28.  if v9 <= 0 then goto L1b0c36;
  #L1b0c2c.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1b0c30.  v3:= v6 @kind object;
  #L1b0c32.  v4:= v7 @kind wide;
  #L1b0c34.  goto L1b0c3a;
  #L1b0c36.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1b0c3a.  @monitorexit v6
  #L1b0c3c.  goto L1b0bde;
  #L1b0c3e.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b0c40.  @monitorexit v6
  #L1b0c42.  throw v11;
  #L1b0c44.  v6:= v10.`okhttp3.internal.connection.RealConnectionPool.a` @type ^`long` @kind wide;
  #L1b0c48.  v0:= lcmp(v4, v6);
  #L1b0c4c.  if v0 >= 0 then goto L1b0c6e;
  #L1b0c50.  v0:= v10.`okhttp3.internal.connection.RealConnectionPool.e` @type ^`int`;
  #L1b0c54.  if v1 <= v0 then goto L1b0c5a;
  #L1b0c58.  goto L1b0c6e;
  #L1b0c5a.  if v1 <= 0 then goto L1b0c62;
  #L1b0c5e.  v6:= v6 - v4 @kind long;
  #L1b0c60.  return v6 @kind wide;
  #L1b0c62.  if v2 <= 0 then goto L1b0c68;
  #L1b0c66.  return v6 @kind wide;
  #L1b0c68.  v11:= -1L;
  #L1b0c6c.  return v11 @kind wide;
  #L1b0c6e.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b0c74.  @monitorenter v3
  #L1b0c76.  call temp:= `getCalls`(v3) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L1b0c7c.  v0:= temp @kind object;
  #L1b0c7e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1b0c84.  v0:= temp;
  #L1b0c86.  v1:= 1I;
  #L1b0c88.  v0:= v0 ^~ v1 @kind int;
  #L1b0c8a.  v6:= 0L;
  #L1b0c8e.  if v0 == 0 then goto L1b0c96;
  #L1b0c92.  @monitorexit v3
  #L1b0c94.  return v6 @kind wide;
  #L1b0c96.  call temp:= `getIdleAtNs$okhttp`(v3) @signature `Lokhttp3/internal/connection/RealConnection;.getIdleAtNs$okhttp:()J` @kind virtual;
  #L1b0c9c.  v8:= temp @kind wide;
  #L1b0c9e.  v8:= v8 + v4 @kind long;
  #L1b0ca0.  v0:= lcmp(v8, v11);
  #L1b0ca4.  if v0 == 0 then goto L1b0cac;
  #L1b0ca8.  @monitorexit v3
  #L1b0caa.  return v6 @kind wide;
  #L1b0cac.  call `setNoNewExchanges`(v3, v1) @signature `Lokhttp3/internal/connection/RealConnection;.setNoNewExchanges:(Z)V` @kind virtual;
  #L1b0cb2.  v11:= v10.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0cb6.  call temp:= `remove`(v11, v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b0cbc.  @monitorexit v3
  #L1b0cbe.  call temp:= `socket`(v3) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L1b0cc4.  v11:= temp @kind object;
  #L1b0cc6.  call `closeQuietly`(v11) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L1b0ccc.  v11:= v10.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0cd0.  call temp:= `isEmpty`(v11) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L1b0cd6.  v11:= temp;
  #L1b0cd8.  if v11 == 0 then goto L1b0ce6;
  #L1b0cdc.  v11:= v10.`okhttp3.internal.connection.RealConnectionPool.b` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1b0ce0.  call `cancelAll`(v11) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAll:()V` @kind virtual;
  #L1b0ce6.  return v6 @kind wide;
  #L1b0ce8.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b0cea.  @monitorexit v3
  #L1b0cec.  throw v11;
  catch `java.lang.Throwable` @[L1b0c02..L1b0c3a] goto L1b0c3e;
  catch `java.lang.Throwable` @[L1b0c76..L1b0c86] goto L1b0ce8;
  catch `java.lang.Throwable` @[L1b0c96..L1b0c9e] goto L1b0ce8;
  catch `java.lang.Throwable` @[L1b0cac..L1b0cbc] goto L1b0ce8;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.internal.connection.RealConnectionPool` v8 @kind this, `okhttp3.internal.connection.RealConnection` v9 @kind object) @signature `Lokhttp3/internal/connection/RealConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1b08c0.  v0:= "connection" @kind object;
  #L1b08c4.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b08ca.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1b08ce.  if v0 == 0 then goto L1b0938;
  #L1b08d2.  call temp:= `holdsLock`(v9) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1b08d8.  v0:= temp;
  #L1b08da.  if v0 == 0 then goto L1b08e0;
  #L1b08de.  goto L1b0938;
  #L1b08e0.  v0:= new `java.lang.AssertionError`;
  #L1b08e4.  v1:= new `java.lang.StringBuilder`;
  #L1b08e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b08ee.  v2:= "Thread " @kind object;
  #L1b08f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b08f8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1b08fe.  v2:= temp @kind object;
  #L1b0900.  v3:= "Thread.currentThread()" @kind object;
  #L1b0904.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b090a.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b0910.  v2:= temp @kind object;
  #L1b0912.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0918.  v2:= " MUST hold lock on " @kind object;
  #L1b091c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0922.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0928.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b092e.  v9:= temp @kind object;
  #L1b0930.  call `<init>`(v0, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1b0936.  throw v0;
  #L1b0938.  call temp:= `getNoNewExchanges`(v9) @signature `Lokhttp3/internal/connection/RealConnection;.getNoNewExchanges:()Z` @kind virtual;
  #L1b093e.  v0:= temp;
  #L1b0940.  v1:= 1I;
  #L1b0942.  if v0 != 0 then goto L1b096a;
  #L1b0946.  v0:= v8.`okhttp3.internal.connection.RealConnectionPool.e` @type ^`int`;
  #L1b094a.  if v0 != 0 then goto L1b0950;
  #L1b094e.  goto L1b096a;
  #L1b0950.  v2:= v8.`okhttp3.internal.connection.RealConnectionPool.b` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1b0954.  v3:= v8.`okhttp3.internal.connection.RealConnectionPool.c` @type ^`okhttp3.internal.connection.RealConnectionPool$cleanupTask$1` @kind object;
  #L1b0958.  v4:= 0L;
  #L1b095c.  v6:= 2I;
  #L1b095e.  v7:= 0I;
  #L1b0960.  call `schedule$default`(v2, v3, v4, v6, v7) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule$default:(Lokhttp3/internal/concurrent/TaskQueue;Lokhttp3/internal/concurrent/Task;JILjava/lang/Object;)V` @kind static;
  #L1b0966.  v1:= 0I;
  #L1b0968.  goto L1b0994;
  #L1b096a.  call `setNoNewExchanges`(v9, v1) @signature `Lokhttp3/internal/connection/RealConnection;.setNoNewExchanges:(Z)V` @kind virtual;
  #L1b0970.  v0:= v8.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0974.  call temp:= `remove`(v0, v9) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b097a.  v9:= v8.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b097e.  call temp:= `isEmpty`(v9) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L1b0984.  v9:= temp;
  #L1b0986.  if v9 == 0 then goto L1b0994;
  #L1b098a.  v9:= v8.`okhttp3.internal.connection.RealConnectionPool.b` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1b098e.  call `cancelAll`(v9) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAll:()V` @kind virtual;
  #L1b0994.  return v1;
}
procedure `int` `connectionCount`(`okhttp3.internal.connection.RealConnectionPool` v1 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.connectionCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1b09a8.  v0:= v1.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b09ac.  call temp:= `size`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.size:()I` @kind virtual;
  #L1b09b2.  v0:= temp;
  #L1b09b4.  return v0;
}
procedure `void` `evictAll`(`okhttp3.internal.connection.RealConnectionPool` v3 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.evictAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1b0e24.  v0:= v3.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0e28.  call temp:= `iterator`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1b0e2e.  v0:= temp @kind object;
  #L1b0e30.  v1:= "connections.iterator()" @kind object;
  #L1b0e34.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0e3a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b0e40.  v1:= temp;
  #L1b0e42.  if v1 == 0 then goto L1b0ea0;
  #L1b0e46.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b0e4c.  v1:= temp @kind object;
  #L1b0e4e.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L1b0e52.  v2:= "connection" @kind object;
  #L1b0e56.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0e5c.  @monitorenter v1
  #L1b0e5e.  call temp:= `getCalls`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L1b0e64.  v2:= temp @kind object;
  #L1b0e66.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1b0e6c.  v2:= temp;
  #L1b0e6e.  if v2 == 0 then goto L1b0e8a;
  #L1b0e72.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L1b0e78.  v2:= 1I;
  #L1b0e7a.  call `setNoNewExchanges`(v1, v2) @signature `Lokhttp3/internal/connection/RealConnection;.setNoNewExchanges:(Z)V` @kind virtual;
  #L1b0e80.  call temp:= `socket`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L1b0e86.  v2:= temp @kind object;
  #L1b0e88.  goto L1b0e8c;
  #L1b0e8a.  v2:= 0I;
  #L1b0e8c.  @monitorexit v1
  #L1b0e8e.  if v2 == 0 then goto L1b0e3a;
  #L1b0e92.  call `closeQuietly`(v2) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L1b0e98.  goto L1b0e3a;
  #L1b0e9a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b0e9c.  @monitorexit v1
  #L1b0e9e.  throw v0;
  #L1b0ea0.  v0:= v3.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0ea4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L1b0eaa.  v0:= temp;
  #L1b0eac.  if v0 == 0 then goto L1b0eba;
  #L1b0eb0.  v0:= v3.`okhttp3.internal.connection.RealConnectionPool.b` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1b0eb4.  call `cancelAll`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAll:()V` @kind virtual;
  #L1b0eba.  return @kind void;
  catch `java.lang.Throwable` @[L1b0e5e..L1b0e88] goto L1b0e9a;
}
procedure `int` `idleConnectionCount`(`okhttp3.internal.connection.RealConnectionPool` v4 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.idleConnectionCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b09c8.  v0:= v4.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b09cc.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L1b09d0.  v2:= 0I;
  #L1b09d2.  if v1 == 0 then goto L1b09e4;
  #L1b09d6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1b09dc.  v1:= temp;
  #L1b09de.  if v1 == 0 then goto L1b09e4;
  #L1b09e2.  goto L1b0a3c;
  #L1b09e4.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1b09ea.  v0:= temp @kind object;
  #L1b09ec.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b09f2.  v1:= temp;
  #L1b09f4.  if v1 == 0 then goto L1b0a3c;
  #L1b09f8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b09fe.  v1:= temp @kind object;
  #L1b0a00.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L1b0a04.  v3:= "it" @kind object;
  #L1b0a08.  call `checkNotNullExpressionValue`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0a0e.  @monitorenter v1
  #L1b0a10.  call temp:= `getCalls`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L1b0a16.  v3:= temp @kind object;
  #L1b0a18.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1b0a1e.  v3:= temp;
  #L1b0a20.  @monitorexit v1
  #L1b0a22.  if v3 == 0 then goto L1b09ec;
  #L1b0a26.  v2:= v2 + 1;
  #L1b0a2a.  if v2 >= 0 then goto L1b09ec;
  #L1b0a2e.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L1b0a34.  goto L1b09ec;
  #L1b0a36.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b0a38.  @monitorexit v1
  #L1b0a3a.  throw v0;
  #L1b0a3c.  return v2;
  catch `java.lang.Throwable` @[L1b0a10..L1b0a20] goto L1b0a36;
}
procedure `void` `put`(`okhttp3.internal.connection.RealConnectionPool` v7 @kind this, `okhttp3.internal.connection.RealConnection` v8 @kind object) @signature `Lokhttp3/internal/connection/RealConnectionPool;.put:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1b0ed8.  v0:= "connection" @kind object;
  #L1b0edc.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0ee2.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1b0ee6.  if v0 == 0 then goto L1b0f50;
  #L1b0eea.  call temp:= `holdsLock`(v8) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1b0ef0.  v0:= temp;
  #L1b0ef2.  if v0 == 0 then goto L1b0ef8;
  #L1b0ef6.  goto L1b0f50;
  #L1b0ef8.  v0:= new `java.lang.AssertionError`;
  #L1b0efc.  v1:= new `java.lang.StringBuilder`;
  #L1b0f00.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0f06.  v2:= "Thread " @kind object;
  #L1b0f0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0f10.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1b0f16.  v2:= temp @kind object;
  #L1b0f18.  v3:= "Thread.currentThread()" @kind object;
  #L1b0f1c.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0f22.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b0f28.  v2:= temp @kind object;
  #L1b0f2a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0f30.  v2:= " MUST hold lock on " @kind object;
  #L1b0f34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0f3a.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0f40.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0f46.  v8:= temp @kind object;
  #L1b0f48.  call `<init>`(v0, v8) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1b0f4e.  throw v0;
  #L1b0f50.  v0:= v7.`okhttp3.internal.connection.RealConnectionPool.d` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1b0f54.  call temp:= `add`(v0, v8) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b0f5a.  v1:= v7.`okhttp3.internal.connection.RealConnectionPool.b` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1b0f5e.  v2:= v7.`okhttp3.internal.connection.RealConnectionPool.c` @type ^`okhttp3.internal.connection.RealConnectionPool$cleanupTask$1` @kind object;
  #L1b0f62.  v3:= 0L;
  #L1b0f66.  v5:= 2I;
  #L1b0f68.  v6:= 0I;
  #L1b0f6a.  call `schedule$default`(v1, v2, v3, v5, v6) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule$default:(Lokhttp3/internal/concurrent/TaskQueue;Lokhttp3/internal/concurrent/Task;JILjava/lang/Object;)V` @kind static;
  #L1b0f70.  return @kind void;
}
