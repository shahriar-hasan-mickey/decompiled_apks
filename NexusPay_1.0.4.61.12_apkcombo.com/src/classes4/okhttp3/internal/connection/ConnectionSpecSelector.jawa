record `okhttp3.internal.connection.ConnectionSpecSelector` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.connection.ConnectionSpecSelector.a` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.b` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.c` @AccessFlag PRIVATE;
  `java.util.List` `okhttp3.internal.connection.ConnectionSpecSelector.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.connection.ConnectionSpecSelector` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ae1c0.  v0:= "connectionSpecs" @kind object;
  #L1ae1c4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae1ca.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ae1d0.  v1.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` := v2 @kind object;
  #L1ae1d4.  return @kind void;
}
procedure `boolean` `a`(`okhttp3.internal.connection.ConnectionSpecSelector` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.a:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ae070.  v0:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.a` @type ^`int`;
  #L1ae074.  v1:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L1ae078.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1ae07e.  v1:= temp;
  #L1ae080.  if v0 >= v1 then goto L1ae0aa;
  #L1ae084.  v2:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L1ae088.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1ae08e.  v2:= temp @kind object;
  #L1ae090.  v2:= (`okhttp3.ConnectionSpec`) v2 @kind object;
  #L1ae094.  call temp:= `isCompatible`(v2, v4) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L1ae09a.  v2:= temp;
  #L1ae09c.  if v2 == 0 then goto L1ae0a4;
  #L1ae0a0.  v4:= 1I;
  #L1ae0a2.  return v4;
  #L1ae0a4.  v0:= v0 + 1;
  #L1ae0a8.  goto L1ae080;
  #L1ae0aa.  v4:= 0I;
  #L1ae0ac.  return v4;
}
procedure `okhttp3.ConnectionSpec` `configureSecureSocket`(`okhttp3.internal.connection.ConnectionSpecSelector` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.configureSecureSocket:(Ljavax/net/ssl/SSLSocket;)Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae0c0.  v0:= "sslSocket" @kind object;
  #L1ae0c4.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae0ca.  v0:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.a` @type ^`int`;
  #L1ae0ce.  v1:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L1ae0d2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1ae0d8.  v1:= temp;
  #L1ae0da.  if v0 >= v1 then goto L1ae10a;
  #L1ae0de.  v2:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L1ae0e2.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1ae0e8.  v2:= temp @kind object;
  #L1ae0ea.  v2:= (`okhttp3.ConnectionSpec`) v2 @kind object;
  #L1ae0ee.  call temp:= `isCompatible`(v2, v5) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L1ae0f4.  v3:= temp;
  #L1ae0f6.  if v3 == 0 then goto L1ae104;
  #L1ae0fa.  v0:= v0 + 1;
  #L1ae0fe.  v4.`okhttp3.internal.connection.ConnectionSpecSelector.a` @type ^`int` := v0;
  #L1ae102.  goto L1ae10c;
  #L1ae104.  v0:= v0 + 1;
  #L1ae108.  goto L1ae0da;
  #L1ae10a.  v2:= 0I;
  #L1ae10c.  if v2 == 0 then goto L1ae128;
  #L1ae110.  call temp:= `a`(v4, v5) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.a:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L1ae116.  v0:= temp;
  #L1ae118.  v4.`okhttp3.internal.connection.ConnectionSpecSelector.b` @type ^`boolean` := v0 @kind boolean;
  #L1ae11c.  v0:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.c` @type ^`boolean` @kind boolean;
  #L1ae120.  call `apply$okhttp`(v2, v5, v0) @signature `Lokhttp3/ConnectionSpec;.apply$okhttp:(Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L1ae126.  return v2 @kind object;
  #L1ae128.  v0:= new `java.net.UnknownServiceException`;
  #L1ae12c.  v1:= new `java.lang.StringBuilder`;
  #L1ae130.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ae136.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L1ae13a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae140.  v2:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.c` @type ^`boolean` @kind boolean;
  #L1ae144.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae14a.  v2:= 44I;
  #L1ae14e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae154.  v3:= " modes=" @kind object;
  #L1ae158.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae15e.  v3:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L1ae162.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae168.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae16e.  v2:= " supported protocols=" @kind object;
  #L1ae172.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae178.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L1ae17e.  v5:= temp @kind object;
  #L1ae180.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ae186.  call temp:= `toString`(v5) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1ae18c.  v5:= temp @kind object;
  #L1ae18e.  v2:= "java.util.Arrays.toString(this)" @kind object;
  #L1ae192.  call `checkNotNullExpressionValue`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae198.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae19e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ae1a4.  v5:= temp @kind object;
  #L1ae1a6.  call `<init>`(v0, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae1ac.  throw v0;
}
procedure `boolean` `connectionFailed`(`okhttp3.internal.connection.ConnectionSpecSelector` v3 @kind this, `java.io.IOException` v4 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.connectionFailed:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ae000.  v0:= "e" @kind object;
  #L1ae004.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ae00a.  v0:= 1I;
  #L1ae00c.  v3.`okhttp3.internal.connection.ConnectionSpecSelector.c` @type ^`boolean` := v0 @kind boolean;
  #L1ae010.  v1:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.b` @type ^`boolean` @kind boolean;
  #L1ae014.  v2:= 0I;
  #L1ae016.  if v1 != 0 then goto L1ae01e;
  #L1ae01a.  v0:= 0I;
  #L1ae01c.  goto L1ae05e;
  #L1ae01e.  v1:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L1ae022.  if v1 == 0 then goto L1ae028;
  #L1ae026.  goto L1ae01a;
  #L1ae028.  v1:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L1ae02c.  if v1 == 0 then goto L1ae032;
  #L1ae030.  goto L1ae01a;
  #L1ae032.  v1:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L1ae036.  if v1 == 0 then goto L1ae04c;
  #L1ae03a.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1ae040.  v1:= temp @kind object;
  #L1ae042.  v1:= instanceof @variable v1 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L1ae046.  if v1 == 0 then goto L1ae04c;
  #L1ae04a.  goto L1ae01a;
  #L1ae04c.  v1:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L1ae050.  if v1 == 0 then goto L1ae056;
  #L1ae054.  goto L1ae01a;
  #L1ae056.  v4:= instanceof @variable v4 @type ^`javax.net.ssl.SSLException` @kind boolean;
  #L1ae05a.  if v4 == 0 then goto L1ae01a;
  #L1ae05e.  return v0;
}
