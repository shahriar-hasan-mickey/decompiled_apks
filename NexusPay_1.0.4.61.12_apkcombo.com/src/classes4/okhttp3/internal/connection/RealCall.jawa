record `okhttp3.internal.connection.RealCall` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.internal.connection.RealConnectionPool` `okhttp3.internal.connection.RealCall.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.EventListener` `okhttp3.internal.connection.RealCall.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RealCall$timeout$1` `okhttp3.internal.connection.RealCall.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `okhttp3.internal.connection.RealCall.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `okhttp3.internal.connection.RealCall.e` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.ExchangeFinder` `okhttp3.internal.connection.RealCall.f` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.connection.RealCall.g` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.h` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.Exchange` `okhttp3.internal.connection.RealCall.i` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.j` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.k` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.l` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.m` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.internal.connection.Exchange` `okhttp3.internal.connection.RealCall.n` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.connection.RealCall.o` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.connection.RealCall.p` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Request` `okhttp3.internal.connection.RealCall.q` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.connection.RealCall.r` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RealCall` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object, `okhttp3.Request` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/connection/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b0120.  v0:= "client" @kind object;
  #L1b0124.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b012a.  v0:= "originalRequest" @kind object;
  #L1b012e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0134.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b013a.  v1.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` := v2 @kind object;
  #L1b013e.  v1.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` := v3 @kind object;
  #L1b0142.  v1.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` := v4 @kind boolean;
  #L1b0146.  call temp:= `connectionPool`(v2) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L1b014c.  v2:= temp @kind object;
  #L1b014e.  call temp:= `getDelegate$okhttp`(v2) @signature `Lokhttp3/ConnectionPool;.getDelegate$okhttp:()Lokhttp3/internal/connection/RealConnectionPool;` @kind virtual;
  #L1b0154.  v2:= temp @kind object;
  #L1b0156.  v1.`okhttp3.internal.connection.RealCall.a` @type ^`okhttp3.internal.connection.RealConnectionPool` := v2 @kind object;
  #L1b015a.  v2:= v1.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1b015e.  call temp:= `eventListenerFactory`(v2) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L1b0164.  v2:= temp @kind object;
  #L1b0166.  call temp:= `create`(v2, v1) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L1b016c.  v2:= temp @kind object;
  #L1b016e.  v1.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` := v2 @kind object;
  #L1b0172.  v2:= new `okhttp3.internal.connection.RealCall$timeout$1`;
  #L1b0176.  call `<init>`(v2, v1) @signature `Lokhttp3/internal/connection/RealCall$timeout$1;.<init>:(Lokhttp3/internal/connection/RealCall;)V` @kind direct;
  #L1b017c.  v3:= v1.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1b0180.  call temp:= `callTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.callTimeoutMillis:()I` @kind virtual;
  #L1b0186.  v3:= temp;
  #L1b0188.  v3:= (`long`) v3 @kind i2l;
  #L1b018a.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1b018e.  call temp:= `timeout`(v2, v3, v0) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L1b0194.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1b0198.  v1.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` := v2 @kind object;
  #L1b019c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L1b01a0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L1b01a6.  v1.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L1b01aa.  v2:= 1I;
  #L1b01ac.  v1.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` := v2 @kind boolean;
  #L1b01b0.  return @kind void;
}
procedure `java.io.IOException` `a`(`okhttp3.internal.connection.RealCall` v4 @kind this, `java.io.IOException` v5 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1af6ec.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1af6f0.  if v0 == 0 then goto L1af75a;
  #L1af6f4.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1af6fa.  v0:= temp;
  #L1af6fc.  if v0 != 0 then goto L1af702;
  #L1af700.  goto L1af75a;
  #L1af702.  v5:= new `java.lang.AssertionError`;
  #L1af706.  v0:= new `java.lang.StringBuilder`;
  #L1af70a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1af710.  v1:= "Thread " @kind object;
  #L1af714.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af71a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1af720.  v1:= temp @kind object;
  #L1af722.  v2:= "Thread.currentThread()" @kind object;
  #L1af726.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1af72c.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1af732.  v1:= temp @kind object;
  #L1af734.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af73a.  v1:= " MUST NOT hold lock on " @kind object;
  #L1af73e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af744.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af74a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1af750.  v0:= temp @kind object;
  #L1af752.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1af758.  throw v5;
  #L1af75a.  v0:= v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1af75e.  if v0 == 0 then goto L1af828;
  #L1af762.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1af766.  if v1 == 0 then goto L1af7d0;
  #L1af76a.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1af770.  v1:= temp;
  #L1af772.  if v1 != 0 then goto L1af778;
  #L1af776.  goto L1af7d0;
  #L1af778.  v5:= new `java.lang.AssertionError`;
  #L1af77c.  v1:= new `java.lang.StringBuilder`;
  #L1af780.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1af786.  v2:= "Thread " @kind object;
  #L1af78a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af790.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1af796.  v2:= temp @kind object;
  #L1af798.  v3:= "Thread.currentThread()" @kind object;
  #L1af79c.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1af7a2.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1af7a8.  v2:= temp @kind object;
  #L1af7aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af7b0.  v2:= " MUST NOT hold lock on " @kind object;
  #L1af7b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af7ba.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af7c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1af7c6.  v0:= temp @kind object;
  #L1af7c8.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1af7ce.  throw v5;
  #L1af7d0.  @monitorenter v0
  #L1af7d2.  call temp:= `releaseConnectionNoEvents$okhttp`(v4) @signature `Lokhttp3/internal/connection/RealCall;.releaseConnectionNoEvents$okhttp:()Ljava/net/Socket;` @kind virtual;
  #L1af7d8.  v1:= temp @kind object;
  #L1af7da.  @monitorexit v0
  #L1af7dc.  v2:= v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1af7e0.  if v2 != 0 then goto L1af7fa;
  #L1af7e4.  if v1 == 0 then goto L1af7ee;
  #L1af7e8.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L1af7ee.  v1:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1af7f2.  call `connectionReleased`(v1, v4, v0) @signature `Lokhttp3/EventListener;.connectionReleased:(Lokhttp3/Call;Lokhttp3/Connection;)V` @kind virtual;
  #L1af7f8.  goto L1af828;
  #L1af7fa.  if v1 != 0 then goto L1af802;
  #L1af7fe.  v0:= 1I;
  #L1af800.  goto L1af804;
  #L1af802.  v0:= 0I;
  #L1af804.  if v0 == 0 then goto L1af80a;
  #L1af808.  goto L1af828;
  #L1af80a.  v5:= "Check failed." @kind object;
  #L1af80e.  v0:= new `java.lang.IllegalStateException`;
  #L1af812.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1af818.  v5:= temp @kind object;
  #L1af81a.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af820.  throw v0;
  #L1af822.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1af824.  @monitorexit v0
  #L1af826.  throw v5;
  #L1af828.  call temp:= `d`(v4, v5) @signature `Lokhttp3/internal/connection/RealCall;.d:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1af82e.  v0:= temp @kind object;
  #L1af830.  if v5 == 0 then goto L1af846;
  #L1af834.  v5:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1af838.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1af83e.  call `callFailed`(v5, v4, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1af844.  goto L1af850;
  #L1af846.  v5:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1af84a.  call `callEnd`(v5, v4) @signature `Lokhttp3/EventListener;.callEnd:(Lokhttp3/Call;)V` @kind virtual;
  #L1af850.  return v0 @kind object;
  catch `java.lang.Throwable` @[L1af7d2..L1af7da] goto L1af822;
}
procedure `okhttp3.internal.connection.RealCall$timeout$1` `access$getTimeout$p`(`okhttp3.internal.connection.RealCall` v0 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.access$getTimeout$p:(Lokhttp3/internal/connection/RealCall;)Lokhttp3/internal/connection/RealCall$timeout$1;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1b00a4.  v0:= v0.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L1b00a8.  return v0 @kind object;
}
procedure `java.lang.String` `access$toLoggableString`(`okhttp3.internal.connection.RealCall` v0 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.access$toLoggableString:(Lokhttp3/internal/connection/RealCall;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1afa08.  call temp:= `e`(v0) @signature `Lokhttp3/internal/connection/RealCall;.e:()Ljava/lang/String;` @kind direct;
  #L1afa0e.  v0:= temp @kind object;
  #L1afa10.  return v0 @kind object;
}
procedure `void` `b`(`okhttp3.internal.connection.RealCall` v2 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1b0298.  v0:= `@@okhttp3.internal.platform.Platform.Companion` @type ^`okhttp3.internal.platform.Platform$Companion` @kind object;
  #L1b029c.  call temp:= `get`(v0) @signature `Lokhttp3/internal/platform/Platform$Companion;.get:()Lokhttp3/internal/platform/Platform;` @kind virtual;
  #L1b02a2.  v0:= temp @kind object;
  #L1b02a4.  v1:= "response.body().close()" @kind object;
  #L1b02a8.  call temp:= `getStackTraceForCloseable`(v0, v1) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1b02ae.  v0:= temp @kind object;
  #L1b02b0.  v2.`okhttp3.internal.connection.RealCall.e` @type ^`java.lang.Object` := v0 @kind object;
  #L1b02b4.  v0:= v2.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1b02b8.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L1b02be.  return @kind void;
}
procedure `okhttp3.Address` `c`(`okhttp3.internal.connection.RealCall` v17 @kind this, `okhttp3.HttpUrl` v18 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.c:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1afbf8.  v0:= v17 @kind object;
  #L1afbfc.  call temp:= `isHttps`(v18) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L1afc02.  v1:= temp;
  #L1afc04.  v2:= 0I;
  #L1afc06.  if v1 == 0 then goto L1afc36;
  #L1afc0a.  v1:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc0e.  call temp:= `sslSocketFactory`(v1) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L1afc14.  v2:= temp @kind object;
  #L1afc16.  v1:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc1a.  call temp:= `hostnameVerifier`(v1) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L1afc20.  v1:= temp @kind object;
  #L1afc22.  v3:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc26.  call temp:= `certificatePinner`(v3) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L1afc2c.  v3:= temp @kind object;
  #L1afc2e.  v10:= v1 @kind object;
  #L1afc30.  v9:= v2 @kind object;
  #L1afc32.  v11:= v3 @kind object;
  #L1afc34.  goto L1afc3c;
  #L1afc36.  v9:= v2 @kind object;
  #L1afc38.  v10:= v9 @kind object;
  #L1afc3a.  v11:= v10 @kind object;
  #L1afc3c.  v1:= new `okhttp3.Address`;
  #L1afc40.  call temp:= `host`(v18) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L1afc46.  v5:= temp @kind object;
  #L1afc48.  call temp:= `port`(v18) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L1afc4e.  v6:= temp;
  #L1afc50.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc54.  call temp:= `dns`(v2) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L1afc5a.  v7:= temp @kind object;
  #L1afc5c.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc60.  call temp:= `socketFactory`(v2) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L1afc66.  v8:= temp @kind object;
  #L1afc68.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc6c.  call temp:= `proxyAuthenticator`(v2) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L1afc72.  v12:= temp @kind object;
  #L1afc74.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc78.  call temp:= `proxy`(v2) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L1afc7e.  v13:= temp @kind object;
  #L1afc80.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc84.  call temp:= `protocols`(v2) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L1afc8a.  v14:= temp @kind object;
  #L1afc8c.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc90.  call temp:= `connectionSpecs`(v2) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L1afc96.  v15:= temp @kind object;
  #L1afc98.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afc9c.  call temp:= `proxySelector`(v2) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L1afca2.  v16:= temp @kind object;
  #L1afca4.  v4:= v1 @kind object;
  #L1afca6.  call `<init>`(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L1afcac.  return v1 @kind object;
}
procedure `java.io.IOException` `d`(`okhttp3.internal.connection.RealCall` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.d:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1af9a4.  v0:= v2.`okhttp3.internal.connection.RealCall.h` @type ^`boolean` @kind boolean;
  #L1af9a8.  if v0 == 0 then goto L1af9ae;
  #L1af9ac.  return v3 @kind object;
  #L1af9ae.  v0:= v2.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L1af9b2.  call temp:= `exit`(v0) @signature `Lokio/AsyncTimeout;.exit:()Z` @kind virtual;
  #L1af9b8.  v0:= temp;
  #L1af9ba.  if v0 != 0 then goto L1af9c0;
  #L1af9be.  return v3 @kind object;
  #L1af9c0.  v0:= new `java.io.InterruptedIOException`;
  #L1af9c4.  v1:= "timeout" @kind object;
  #L1af9c8.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af9ce.  if v3 == 0 then goto L1af9d8;
  #L1af9d2.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1af9d8.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`okhttp3.internal.connection.RealCall` v2 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.e:()Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1afa4c.  v0:= new `java.lang.StringBuilder`;
  #L1afa50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1afa56.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/internal/connection/RealCall;.isCanceled:()Z` @kind virtual;
  #L1afa5c.  v1:= temp;
  #L1afa5e.  if v1 == 0 then goto L1afa68;
  #L1afa62.  v1:= "canceled " @kind object;
  #L1afa66.  goto L1afa6c;
  #L1afa68.  v1:= "" @kind object;
  #L1afa6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afa72.  v1:= v2.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L1afa76.  if v1 == 0 then goto L1afa80;
  #L1afa7a.  v1:= "web socket" @kind object;
  #L1afa7e.  goto L1afa84;
  #L1afa80.  v1:= "call" @kind object;
  #L1afa84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afa8a.  v1:= " to " @kind object;
  #L1afa8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afa94.  call temp:= `redactedUrl$okhttp`(v2) @signature `Lokhttp3/internal/connection/RealCall;.redactedUrl$okhttp:()Ljava/lang/String;` @kind virtual;
  #L1afa9a.  v1:= temp @kind object;
  #L1afa9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afaa2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1afaa8.  v0:= temp @kind object;
  #L1afaaa.  return v0 @kind object;
}
procedure `void` `acquireConnectionNoEvents`(`okhttp3.internal.connection.RealCall` v4 @kind this, `okhttp3.internal.connection.RealConnection` v5 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.acquireConnectionNoEvents:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b01c4.  v0:= "connection" @kind object;
  #L1b01c8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b01ce.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1b01d2.  if v0 == 0 then goto L1b023c;
  #L1b01d6.  call temp:= `holdsLock`(v5) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1b01dc.  v0:= temp;
  #L1b01de.  if v0 == 0 then goto L1b01e4;
  #L1b01e2.  goto L1b023c;
  #L1b01e4.  v0:= new `java.lang.AssertionError`;
  #L1b01e8.  v1:= new `java.lang.StringBuilder`;
  #L1b01ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b01f2.  v2:= "Thread " @kind object;
  #L1b01f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b01fc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1b0202.  v2:= temp @kind object;
  #L1b0204.  v3:= "Thread.currentThread()" @kind object;
  #L1b0208.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b020e.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b0214.  v2:= temp @kind object;
  #L1b0216.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b021c.  v2:= " MUST hold lock on " @kind object;
  #L1b0220.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0226.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b022c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0232.  v5:= temp @kind object;
  #L1b0234.  call `<init>`(v0, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1b023a.  throw v0;
  #L1b023c.  v0:= v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1b0240.  if v0 != 0 then goto L1b0248;
  #L1b0244.  v0:= 1I;
  #L1b0246.  goto L1b024a;
  #L1b0248.  v0:= 0I;
  #L1b024a.  if v0 == 0 then goto L1b0270;
  #L1b024e.  v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` := v5 @kind object;
  #L1b0252.  call temp:= `getCalls`(v5) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L1b0258.  v5:= temp @kind object;
  #L1b025a.  v0:= new `okhttp3.internal.connection.RealCall$CallReference`;
  #L1b025e.  v1:= v4.`okhttp3.internal.connection.RealCall.e` @type ^`java.lang.Object` @kind object;
  #L1b0262.  call `<init>`(v0, v4, v1) @signature `Lokhttp3/internal/connection/RealCall$CallReference;.<init>:(Lokhttp3/internal/connection/RealCall;Ljava/lang/Object;)V` @kind direct;
  #L1b0268.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b026e.  return @kind void;
  #L1b0270.  v5:= new `java.lang.IllegalStateException`;
  #L1b0274.  v0:= "Check failed." @kind object;
  #L1b0278.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b027e.  v0:= temp @kind object;
  #L1b0280.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0286.  throw v5;
}
procedure `void` `cancel`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b02d0.  v0:= v1.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` @kind boolean;
  #L1b02d4.  if v0 == 0 then goto L1b02da;
  #L1b02d8.  return @kind void;
  #L1b02da.  v0:= 1I;
  #L1b02dc.  v1.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` := v0 @kind boolean;
  #L1b02e0.  v0:= v1.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1b02e4.  if v0 == 0 then goto L1b02ee;
  #L1b02e8.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/Exchange;.cancel:()V` @kind virtual;
  #L1b02ee.  v0:= v1.`okhttp3.internal.connection.RealCall.o` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1b02f2.  if v0 == 0 then goto L1b02fc;
  #L1b02f6.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.cancel:()V` @kind virtual;
  #L1b02fc.  v0:= v1.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1b0300.  call `canceled`(v0, v1) @signature `Lokhttp3/EventListener;.canceled:(Lokhttp3/Call;)V` @kind virtual;
  #L1b0306.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1af9ec.  call temp:= `clone`(v1) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L1af9f2.  v0:= temp @kind object;
  #L1af9f4.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1afcc0.  call temp:= `clone`(v1) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L1afcc6.  v0:= temp @kind object;
  #L1afcc8.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealCall` `clone`(`okhttp3.internal.connection.RealCall` v4 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/internal/connection/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b007c.  v0:= new `okhttp3.internal.connection.RealCall`;
  #L1b0080.  v1:= v4.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1b0084.  v2:= v4.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1b0088.  v3:= v4.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L1b008c.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L1b0092.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.internal.connection.RealCall` v3 @kind this, `okhttp3.Callback` v4 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b0318.  v0:= "responseCallback" @kind object;
  #L1b031c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b0322.  v0:= v3.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1b0326.  v1:= 0I;
  #L1b0328.  v2:= 1I;
  #L1b032a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L1b0330.  v0:= temp;
  #L1b0332.  if v0 == 0 then goto L1b035a;
  #L1b0336.  call `b`(v3) @signature `Lokhttp3/internal/connection/RealCall;.b:()V` @kind direct;
  #L1b033c.  v0:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1b0340.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L1b0346.  v0:= temp @kind object;
  #L1b0348.  v1:= new `okhttp3.internal.connection.RealCall$AsyncCall`;
  #L1b034c.  call `<init>`(v1, v3, v4) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.<init>:(Lokhttp3/internal/connection/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L1b0352.  call `enqueue$okhttp`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue$okhttp:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @kind virtual;
  #L1b0358.  return @kind void;
  #L1b035a.  v4:= new `java.lang.IllegalStateException`;
  #L1b035e.  v0:= "Already Executed" @kind object;
  #L1b0362.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0368.  v0:= temp @kind object;
  #L1b036a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0370.  throw v4;
}
procedure `void` `enterNetworkInterceptorExchange`(`okhttp3.internal.connection.RealCall` v2 @kind this, `okhttp3.Request` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/connection/RealCall;.enterNetworkInterceptorExchange:(Lokhttp3/Request;Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1b0384.  v0:= "request" @kind object;
  #L1b0388.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b038e.  v0:= v2.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1b0392.  v1:= 1I;
  #L1b0394.  if v0 != 0 then goto L1b039c;
  #L1b0398.  v0:= 1I;
  #L1b039a.  goto L1b039e;
  #L1b039c.  v0:= 0I;
  #L1b039e.  if v0 == 0 then goto L1b0420;
  #L1b03a2.  @monitorenter v2
  #L1b03a4.  v0:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1b03a8.  v0:= v0 ^~ v1 @kind int;
  #L1b03aa.  if v0 == 0 then goto L1b0402;
  #L1b03ae.  v0:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L1b03b2.  v0:= v0 ^~ v1 @kind int;
  #L1b03b4.  if v0 == 0 then goto L1b03ea;
  #L1b03b8.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1b03bc.  @monitorexit v2
  #L1b03be.  if v4 == 0 then goto L1b03e8;
  #L1b03c2.  v4:= new `okhttp3.internal.connection.ExchangeFinder`;
  #L1b03c6.  v0:= v2.`okhttp3.internal.connection.RealCall.a` @type ^`okhttp3.internal.connection.RealConnectionPool` @kind object;
  #L1b03ca.  call temp:= `url`(v3) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1b03d0.  v3:= temp @kind object;
  #L1b03d2.  call temp:= `c`(v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.c:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L1b03d8.  v3:= temp @kind object;
  #L1b03da.  v1:= v2.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1b03de.  call `<init>`(v4, v0, v3, v2, v1) @signature `Lokhttp3/internal/connection/ExchangeFinder;.<init>:(Lokhttp3/internal/connection/RealConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/RealCall;Lokhttp3/EventListener;)V` @kind direct;
  #L1b03e4.  v2.`okhttp3.internal.connection.RealCall.f` @type ^`okhttp3.internal.connection.ExchangeFinder` := v4 @kind object;
  #L1b03e8.  return @kind void;
  #L1b03ea.  v3:= "Check failed." @kind object;
  #L1b03ee.  v4:= new `java.lang.IllegalStateException`;
  #L1b03f2.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b03f8.  v3:= temp @kind object;
  #L1b03fa.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0400.  throw v4;
  #L1b0402.  v3:= "cannot make a new request because the previous response is still open: please call response.close()" @kind object;
  #L1b0406.  v4:= new `java.lang.IllegalStateException`;
  #L1b040a.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0410.  v3:= temp @kind object;
  #L1b0412.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0418.  throw v4;
  #L1b041a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b041c.  @monitorexit v2
  #L1b041e.  throw v3;
  #L1b0420.  v3:= "Check failed." @kind object;
  #L1b0424.  v4:= new `java.lang.IllegalStateException`;
  #L1b0428.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b042e.  v3:= temp @kind object;
  #L1b0430.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0436.  throw v4;
  catch `java.lang.Throwable` @[L1b03a4..L1b03bc] goto L1b041a;
  catch `java.lang.Throwable` @[L1b03ea..L1b041a] goto L1b041a;
}
procedure `okhttp3.Response` `execute`(`okhttp3.internal.connection.RealCall` v3 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1afd3c.  v0:= v3.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1afd40.  v1:= 0I;
  #L1afd42.  v2:= 1I;
  #L1afd44.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L1afd4a.  v0:= temp;
  #L1afd4c.  if v0 == 0 then goto L1afda4;
  #L1afd50.  v0:= v3.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L1afd54.  call `enter`(v0) @signature `Lokio/AsyncTimeout;.enter:()V` @kind virtual;
  #L1afd5a.  call `b`(v3) @signature `Lokhttp3/internal/connection/RealCall;.b:()V` @kind direct;
  #L1afd60.  v0:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afd64.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L1afd6a.  v0:= temp @kind object;
  #L1afd6c.  call `executed$okhttp`(v0, v3) @signature `Lokhttp3/Dispatcher;.executed$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @kind virtual;
  #L1afd72.  call temp:= `getResponseWithInterceptorChain$okhttp`(v3) @signature `Lokhttp3/internal/connection/RealCall;.getResponseWithInterceptorChain$okhttp:()Lokhttp3/Response;` @kind virtual;
  #L1afd78.  v0:= temp @kind object;
  #L1afd7a.  v1:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afd7e.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L1afd84.  v1:= temp @kind object;
  #L1afd86.  call `finished$okhttp`(v1, v3) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @kind virtual;
  #L1afd8c.  return v0 @kind object;
  #L1afd8e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1afd90.  v1:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afd94.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L1afd9a.  v1:= temp @kind object;
  #L1afd9c.  call `finished$okhttp`(v1, v3) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @kind virtual;
  #L1afda2.  throw v0;
  #L1afda4.  v0:= new `java.lang.IllegalStateException`;
  #L1afda8.  v1:= "Already Executed" @kind object;
  #L1afdac.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1afdb2.  v1:= temp @kind object;
  #L1afdb4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afdba.  throw v0;
  catch `java.lang.Throwable` @[L1afd60..L1afd7a] goto L1afd8e;
}
procedure `void` `exitNetworkInterceptorExchange$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/internal/connection/RealCall;.exitNetworkInterceptorExchange$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1b045c.  @monitorenter v1
  #L1b045e.  v0:= v1.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L1b0462.  if v0 == 0 then goto L1b0486;
  #L1b0466.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1b046a.  @monitorexit v1
  #L1b046c.  if v2 == 0 then goto L1b047e;
  #L1b0470.  v2:= v1.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1b0474.  if v2 == 0 then goto L1b047e;
  #L1b0478.  call `detachWithViolence`(v2) @signature `Lokhttp3/internal/connection/Exchange;.detachWithViolence:()V` @kind virtual;
  #L1b047e.  v2:= 0I;
  #L1b0480.  v1.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L1b0484.  return @kind void;
  #L1b0486.  v2:= "released" @kind object;
  #L1b048a.  v0:= new `java.lang.IllegalStateException`;
  #L1b048e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0494.  v2:= temp @kind object;
  #L1b0496.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b049c.  throw v0;
  #L1b049e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b04a0.  @monitorexit v1
  #L1b04a2.  throw v2;
  catch `java.lang.Throwable` @[L1b045e..L1b046a] goto L1b049e;
  catch `java.lang.Throwable` @[L1b0486..L1b049e] goto L1b049e;
}
procedure `okhttp3.OkHttpClient` `getClient`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getClient:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1afcf4.  v0:= v1.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afcf8.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnection`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1b00bc.  v0:= v1.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1b00c0.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnectionToCancel`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getConnectionToCancel:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1b00d4.  v0:= v1.`okhttp3.internal.connection.RealCall.o` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1b00d8.  return v0 @kind object;
}
procedure `okhttp3.EventListener` `getEventListener$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getEventListener$okhttp:()Lokhttp3/EventListener;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1afcdc.  v0:= v1.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1afce0.  return v0 @kind object;
}
procedure `boolean` `getForWebSocket`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getForWebSocket:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1af678.  v0:= v1.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L1af67c.  return v0;
}
procedure `okhttp3.internal.connection.Exchange` `getInterceptorScopedExchange$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getInterceptorScopedExchange$okhttp:()Lokhttp3/internal/connection/Exchange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1aff58.  v0:= v1.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1aff5c.  return v0 @kind object;
}
procedure `okhttp3.Request` `getOriginalRequest`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getOriginalRequest:()Lokhttp3/Request;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1afd0c.  v0:= v1.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1afd10.  return v0 @kind object;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain$okhttp`(`okhttp3.internal.connection.RealCall` v10 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getResponseWithInterceptorChain$okhttp:()Lokhttp3/Response;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1afdd8.  v2:= new `java.util.ArrayList`;
  #L1afddc.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1afde2.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afde6.  call temp:= `interceptors`(v0) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L1afdec.  v0:= temp @kind object;
  #L1afdee.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @kind static;
  #L1afdf4.  v0:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L1afdf8.  v1:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afdfc.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L1afe02.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afe08.  v0:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L1afe0c.  v1:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afe10.  call temp:= `cookieJar`(v1) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L1afe16.  v1:= temp @kind object;
  #L1afe18.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L1afe1e.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afe24.  v0:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L1afe28.  v1:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afe2c.  call temp:= `cache`(v1) @signature `Lokhttp3/OkHttpClient;.cache:()Lokhttp3/Cache;` @kind virtual;
  #L1afe32.  v1:= temp @kind object;
  #L1afe34.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/Cache;)V` @kind direct;
  #L1afe3a.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afe40.  v0:= `@@okhttp3.internal.connection.ConnectInterceptor.INSTANCE` @type ^`okhttp3.internal.connection.ConnectInterceptor` @kind object;
  #L1afe44.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afe4a.  v0:= v10.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L1afe4e.  if v0 != 0 then goto L1afe64;
  #L1afe52.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afe56.  call temp:= `networkInterceptors`(v0) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L1afe5c.  v0:= temp @kind object;
  #L1afe5e.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @kind static;
  #L1afe64.  v0:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L1afe68.  v1:= v10.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L1afe6c.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L1afe72.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afe78.  v9:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L1afe7c.  v3:= 0I;
  #L1afe7e.  v4:= 0I;
  #L1afe80.  v5:= v10.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1afe84.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afe88.  call temp:= `connectTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L1afe8e.  v6:= temp;
  #L1afe90.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afe94.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L1afe9a.  v7:= temp;
  #L1afe9c.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1afea0.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L1afea6.  v8:= temp;
  #L1afea8.  v0:= v9 @kind object;
  #L1afeaa.  v1:= v10 @kind object;
  #L1afeac.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Lokhttp3/internal/connection/RealCall;Ljava/util/List;ILokhttp3/internal/connection/Exchange;Lokhttp3/Request;III)V` @kind direct;
  #L1afeb2.  v0:= 0I;
  #L1afeb4.  v1:= 0I;
  #L1afeb6.  v2:= v10.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1afeba.  call temp:= `proceed`(v9, v2) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind virtual;
  #L1afec0.  v2:= temp @kind object;
  #L1afec2.  call temp:= `isCanceled`(v10) @signature `Lokhttp3/internal/connection/RealCall;.isCanceled:()Z` @kind virtual;
  #L1afec8.  v3:= temp;
  #L1afeca.  if v3 != 0 then goto L1afed6;
  #L1afece.  call temp:= `noMoreExchanges$okhttp`(v10, v1) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1afed4.  return v2 @kind object;
  #L1afed6.  call `closeQuietly`(v2) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L1afedc.  v2:= new `java.io.IOException`;
  #L1afee0.  v3:= "Canceled" @kind object;
  #L1afee4.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afeea.  throw v2;
  #L1afeec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1afeee.  goto L1aff18;
  #L1afef0.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1afef2.  v2:= 1I;
  #L1afef4.  call temp:= `noMoreExchanges$okhttp`(v10, v0) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1afefa.  v0:= temp @kind object;
  #L1afefc.  if v0 != 0 then goto L1aff10;
  #L1aff00.  v0:= new `java.lang.NullPointerException`;
  #L1aff04.  v3:= "null cannot be cast to non-null type kotlin.Throwable" @kind object;
  #L1aff08.  call `<init>`(v0, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aff0e.  throw v0;
  #L1aff10.  throw v0;
  #L1aff12.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1aff14.  v2:= v0 @kind object;
  #L1aff16.  v0:= 1I;
  #L1aff18.  if v0 != 0 then goto L1aff22;
  #L1aff1c.  call temp:= `noMoreExchanges$okhttp`(v10, v1) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1aff22.  throw v2;
  catch `java.io.IOException` @[L1afeb6..L1afeca] goto L1afef0;
  catch `java.lang.Throwable` @[L1afeb6..L1afeca] goto L1afeec;
  catch `java.io.IOException` @[L1afed6..L1afeec] goto L1afef0;
  catch `java.lang.Throwable` @[L1afed6..L1afeec] goto L1afeec;
  catch `java.lang.Throwable` @[L1afef4..L1aff12] goto L1aff12;
}
procedure `okhttp3.internal.connection.Exchange` `initExchange$okhttp`(`okhttp3.internal.connection.RealCall` v4 @kind this, `okhttp3.internal.http.RealInterceptorChain` v5 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.initExchange$okhttp:(Lokhttp3/internal/http/RealInterceptorChain;)Lokhttp3/internal/connection/Exchange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aff70.  v0:= "chain" @kind object;
  #L1aff74.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aff7a.  @monitorenter v4
  #L1aff7c.  v0:= v4.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L1aff80.  if v0 == 0 then goto L1b002c;
  #L1aff84.  v0:= v4.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1aff88.  v1:= 1I;
  #L1aff8a.  v0:= v0 ^~ v1 @kind int;
  #L1aff8c.  if v0 == 0 then goto L1b0014;
  #L1aff90.  v0:= v4.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L1aff94.  v0:= v0 ^~ v1 @kind int;
  #L1aff96.  if v0 == 0 then goto L1afffc;
  #L1aff9a.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1aff9e.  @monitorexit v4
  #L1affa0.  v0:= v4.`okhttp3.internal.connection.RealCall.f` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L1affa4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1affaa.  v2:= v4.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1affae.  call temp:= `find`(v0, v2, v5) @signature `Lokhttp3/internal/connection/ExchangeFinder;.find:(Lokhttp3/OkHttpClient;Lokhttp3/internal/http/RealInterceptorChain;)Lokhttp3/internal/http/ExchangeCodec;` @kind virtual;
  #L1affb4.  v5:= temp @kind object;
  #L1affb6.  v2:= new `okhttp3.internal.connection.Exchange`;
  #L1affba.  v3:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1affbe.  call `<init>`(v2, v4, v3, v0, v5) @signature `Lokhttp3/internal/connection/Exchange;.<init>:(Lokhttp3/internal/connection/RealCall;Lokhttp3/EventListener;Lokhttp3/internal/connection/ExchangeFinder;Lokhttp3/internal/http/ExchangeCodec;)V` @kind direct;
  #L1affc4.  v4.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L1affc8.  v4.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L1affcc.  @monitorenter v4
  #L1affce.  v4.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` := v1 @kind boolean;
  #L1affd2.  v4.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` := v1 @kind boolean;
  #L1affd6.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1affda.  @monitorexit v4
  #L1affdc.  v5:= v4.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` @kind boolean;
  #L1affe0.  if v5 != 0 then goto L1affe6;
  #L1affe4.  return v2 @kind object;
  #L1affe6.  v5:= new `java.io.IOException`;
  #L1affea.  v0:= "Canceled" @kind object;
  #L1affee.  call `<init>`(v5, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afff4.  throw v5;
  #L1afff6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1afff8.  @monitorexit v4
  #L1afffa.  throw v5;
  #L1afffc.  v5:= "Check failed." @kind object;
  #L1b0000.  v0:= new `java.lang.IllegalStateException`;
  #L1b0004.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b000a.  v5:= temp @kind object;
  #L1b000c.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0012.  throw v0;
  #L1b0014.  v5:= "Check failed." @kind object;
  #L1b0018.  v0:= new `java.lang.IllegalStateException`;
  #L1b001c.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0022.  v5:= temp @kind object;
  #L1b0024.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b002a.  throw v0;
  #L1b002c.  v5:= "released" @kind object;
  #L1b0030.  v0:= new `java.lang.IllegalStateException`;
  #L1b0034.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b003a.  v5:= temp @kind object;
  #L1b003c.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0042.  throw v0;
  #L1b0044.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b0046.  @monitorexit v4
  #L1b0048.  throw v5;
  catch `java.lang.Throwable` @[L1aff7c..L1aff9e] goto L1b0044;
  catch `java.lang.Throwable` @[L1affce..L1affda] goto L1afff6;
  catch `java.lang.Throwable` @[L1afffc..L1b0044] goto L1b0044;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af690.  v0:= v1.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` @kind boolean;
  #L1af694.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af6a8.  v0:= v1.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1af6ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L1af6b2.  v0:= temp;
  #L1af6b4.  return v0;
}
procedure `java.io.IOException` `messageDone$okhttp`(`okhttp3.internal.connection.RealCall` v2 @kind this, `okhttp3.internal.connection.Exchange` v3 @kind object, `boolean` v4 , `boolean` v5 , `java.io.IOException` v6 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1af870.  v0:= "exchange" @kind object;
  #L1af874.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1af87a.  v0:= v2.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L1af87e.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1af884.  v3:= temp;
  #L1af886.  v0:= 1I;
  #L1af888.  v3:= v3 ^~ v0 @kind int;
  #L1af88a.  if v3 == 0 then goto L1af890;
  #L1af88e.  return v6 @kind object;
  #L1af890.  @monitorenter v2
  #L1af892.  v3:= 0I;
  #L1af894.  if v4 == 0 then goto L1af8a6;
  #L1af898.  v1:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L1af89c.  if v1 != 0 then goto L1af8b2;
  #L1af8a0.  goto L1af8a6;
  #L1af8a2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1af8a4.  goto L1af928;
  #L1af8a6.  if v5 == 0 then goto L1af8f8;
  #L1af8aa.  v1:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1af8ae.  if v1 == 0 then goto L1af8f8;
  #L1af8b2.  if v4 == 0 then goto L1af8ba;
  #L1af8b6.  v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` := v3 @kind boolean;
  #L1af8ba.  if v5 == 0 then goto L1af8c2;
  #L1af8be.  v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` := v3 @kind boolean;
  #L1af8c2.  v4:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L1af8c6.  if v4 != 0 then goto L1af8d6;
  #L1af8ca.  v4:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1af8ce.  if v4 != 0 then goto L1af8d6;
  #L1af8d2.  v4:= 1I;
  #L1af8d4.  goto L1af8d8;
  #L1af8d6.  v4:= 0I;
  #L1af8d8.  v5:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L1af8dc.  if v5 != 0 then goto L1af8f2;
  #L1af8e0.  v5:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1af8e4.  if v5 != 0 then goto L1af8f2;
  #L1af8e8.  v5:= v2.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L1af8ec.  if v5 != 0 then goto L1af8f2;
  #L1af8f0.  goto L1af8f4;
  #L1af8f2.  v0:= 0I;
  #L1af8f4.  v3:= v4;
  #L1af8f6.  goto L1af8fa;
  #L1af8f8.  v0:= 0I;
  #L1af8fa.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1af8fe.  @monitorexit v2
  #L1af900.  if v3 == 0 then goto L1af918;
  #L1af904.  v3:= 0I;
  #L1af906.  v2.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` := v3 @kind object;
  #L1af90a.  v3:= v2.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1af90e.  if v3 == 0 then goto L1af918;
  #L1af912.  call `incrementSuccessCount$okhttp`(v3) @signature `Lokhttp3/internal/connection/RealConnection;.incrementSuccessCount$okhttp:()V` @kind virtual;
  #L1af918.  if v0 == 0 then goto L1af926;
  #L1af91c.  call temp:= `a`(v2, v6) @signature `Lokhttp3/internal/connection/RealCall;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1af922.  v3:= temp @kind object;
  #L1af924.  return v3 @kind object;
  #L1af926.  return v6 @kind object;
  #L1af928.  @monitorexit v2
  #L1af92a.  throw v3;
  catch `java.lang.Throwable` @[L1af898..L1af8fe] goto L1af8a2;
}
procedure `java.io.IOException` `noMoreExchanges$okhttp`(`okhttp3.internal.connection.RealCall` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1af948.  @monitorenter v2
  #L1af94a.  v0:= v2.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L1af94e.  v1:= 0I;
  #L1af950.  if v0 == 0 then goto L1af96c;
  #L1af954.  v2.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` := v1 @kind boolean;
  #L1af958.  v0:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L1af95c.  if v0 != 0 then goto L1af96c;
  #L1af960.  v0:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1af964.  if v0 != 0 then goto L1af96c;
  #L1af968.  v0:= 1I;
  #L1af96a.  v1:= 1I;
  #L1af96c.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1af970.  @monitorexit v2
  #L1af972.  if v1 == 0 then goto L1af97e;
  #L1af976.  call temp:= `a`(v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1af97c.  v3:= temp @kind object;
  #L1af97e.  return v3 @kind object;
  #L1af980.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1af982.  @monitorexit v2
  #L1af984.  throw v3;
  catch `java.lang.Throwable` @[L1af94a..L1af970] goto L1af980;
}
procedure `java.lang.String` `redactedUrl$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.redactedUrl$okhttp:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1afa24.  v0:= v1.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1afa28.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1afa2e.  v0:= temp @kind object;
  #L1afa30.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L1afa36.  v0:= temp @kind object;
  #L1afa38.  return v0 @kind object;
}
procedure `java.net.Socket` `releaseConnectionNoEvents$okhttp`(`okhttp3.internal.connection.RealCall` v7 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.releaseConnectionNoEvents$okhttp:()Ljava/net/Socket;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1afabc.  v0:= v7.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1afac0.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1afac6.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1afaca.  if v1 == 0 then goto L1afb34;
  #L1aface.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1afad4.  v1:= temp;
  #L1afad6.  if v1 == 0 then goto L1afadc;
  #L1afada.  goto L1afb34;
  #L1afadc.  v1:= new `java.lang.AssertionError`;
  #L1afae0.  v2:= new `java.lang.StringBuilder`;
  #L1afae4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1afaea.  v3:= "Thread " @kind object;
  #L1afaee.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afaf4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1afafa.  v3:= temp @kind object;
  #L1afafc.  v4:= "Thread.currentThread()" @kind object;
  #L1afb00.  call `checkNotNullExpressionValue`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1afb06.  call temp:= `getName`(v3) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1afb0c.  v3:= temp @kind object;
  #L1afb0e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afb14.  v3:= " MUST hold lock on " @kind object;
  #L1afb18.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afb1e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afb24.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1afb2a.  v0:= temp @kind object;
  #L1afb2c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1afb32.  throw v1;
  #L1afb34.  call temp:= `getCalls`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L1afb3a.  v1:= temp @kind object;
  #L1afb3c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1afb42.  v2:= temp @kind object;
  #L1afb44.  v3:= 0I;
  #L1afb46.  v4:= 0I;
  #L1afb48.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1afb4e.  v5:= temp;
  #L1afb50.  v6:= -1I;
  #L1afb52.  if v5 == 0 then goto L1afb82;
  #L1afb56.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1afb5c.  v5:= temp @kind object;
  #L1afb5e.  v5:= (`java.lang.ref.Reference`) v5 @kind object;
  #L1afb62.  call temp:= `get`(v5) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1afb68.  v5:= temp @kind object;
  #L1afb6a.  v5:= (`okhttp3.internal.connection.RealCall`) v5 @kind object;
  #L1afb6e.  call temp:= `areEqual`(v5, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1afb74.  v5:= temp;
  #L1afb76.  if v5 == 0 then goto L1afb7c;
  #L1afb7a.  goto L1afb84;
  #L1afb7c.  v4:= v4 + 1;
  #L1afb80.  goto L1afb48;
  #L1afb82.  v4:= -1I;
  #L1afb84.  if v4 == v6 then goto L1afb8a;
  #L1afb88.  v3:= 1I;
  #L1afb8a.  if v3 == 0 then goto L1afbd0;
  #L1afb8e.  call temp:= `remove`(v1, v4) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1afb94.  v2:= 0I;
  #L1afb96.  v7.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` := v2 @kind object;
  #L1afb9a.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1afba0.  v1:= temp;
  #L1afba2.  if v1 == 0 then goto L1afbce;
  #L1afba6.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1afbac.  v3:= temp @kind wide;
  #L1afbae.  call `setIdleAtNs$okhttp`(v0, v3) @signature `Lokhttp3/internal/connection/RealConnection;.setIdleAtNs$okhttp:(J)V` @kind virtual;
  #L1afbb4.  v1:= v7.`okhttp3.internal.connection.RealCall.a` @type ^`okhttp3.internal.connection.RealConnectionPool` @kind object;
  #L1afbb8.  call temp:= `connectionBecameIdle`(v1, v0) @signature `Lokhttp3/internal/connection/RealConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z` @kind virtual;
  #L1afbbe.  v1:= temp;
  #L1afbc0.  if v1 == 0 then goto L1afbce;
  #L1afbc4.  call temp:= `socket`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L1afbca.  v0:= temp @kind object;
  #L1afbcc.  return v0 @kind object;
  #L1afbce.  return v2 @kind object;
  #L1afbd0.  v0:= new `java.lang.IllegalStateException`;
  #L1afbd4.  v1:= "Check failed." @kind object;
  #L1afbd8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1afbde.  v1:= temp @kind object;
  #L1afbe0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afbe6.  throw v0;
}
procedure `okhttp3.Request` `request`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afd24.  v0:= v1.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1afd28.  return v0 @kind object;
}
procedure `boolean` `retryAfterFailure`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.retryAfterFailure:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1af6c8.  v0:= v1.`okhttp3.internal.connection.RealCall.f` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L1af6cc.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1af6d2.  call temp:= `retryAfterFailure`(v0) @signature `Lokhttp3/internal/connection/ExchangeFinder;.retryAfterFailure:()Z` @kind virtual;
  #L1af6d8.  v0:= temp;
  #L1af6da.  return v0;
}
procedure `void` `setConnectionToCancel`(`okhttp3.internal.connection.RealCall` v0 @kind this, `okhttp3.internal.connection.RealConnection` v1 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.setConnectionToCancel:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1b04c8.  v0.`okhttp3.internal.connection.RealCall.o` @type ^`okhttp3.internal.connection.RealConnection` := v1 @kind object;
  #L1b04cc.  return @kind void;
}
procedure `okio.AsyncTimeout` `timeout`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.timeout:()Lokio/AsyncTimeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b00ec.  v0:= v1.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L1b00f0.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1b0104.  call temp:= `timeout`(v1) @signature `Lokhttp3/internal/connection/RealCall;.timeout:()Lokio/AsyncTimeout;` @kind virtual;
  #L1b010a.  v0:= temp @kind object;
  #L1b010c.  return v0 @kind object;
}
procedure `void` `timeoutEarlyExit`(`okhttp3.internal.connection.RealCall` v2 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.timeoutEarlyExit:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1b04e0.  v0:= v2.`okhttp3.internal.connection.RealCall.h` @type ^`boolean` @kind boolean;
  #L1b04e4.  v1:= 1I;
  #L1b04e6.  v0:= v0 ^~ v1 @kind int;
  #L1b04e8.  if v0 == 0 then goto L1b04fc;
  #L1b04ec.  v2.`okhttp3.internal.connection.RealCall.h` @type ^`boolean` := v1 @kind boolean;
  #L1b04f0.  v0:= v2.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L1b04f4.  call temp:= `exit`(v0) @signature `Lokio/AsyncTimeout;.exit:()Z` @kind virtual;
  #L1b04fa.  return @kind void;
  #L1b04fc.  v0:= new `java.lang.IllegalStateException`;
  #L1b0500.  v1:= "Check failed." @kind object;
  #L1b0504.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b050a.  v1:= temp @kind object;
  #L1b050c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0512.  throw v0;
}
