record `okhttp3.internal.connection.RealCall$timeout$1` @kind class @AccessFlag PUBLIC_FINAL extends `okio.AsyncTimeout` @kind class {
  `okhttp3.internal.connection.RealCall` `okhttp3.internal.connection.RealCall$timeout$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RealCall$timeout$1` v0 @kind this, `okhttp3.internal.connection.RealCall` v1 @kind object) @signature `Lokhttp3/internal/connection/RealCall$timeout$1;.<init>:(Lokhttp3/internal/connection/RealCall;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1af640.  v0.`okhttp3.internal.connection.RealCall$timeout$1.a` @type ^`okhttp3.internal.connection.RealCall` := v1 @kind object;
  #L1af644.  call `<init>`(v0) @signature `Lokio/AsyncTimeout;.<init>:()V` @kind direct;
  #L1af64a.  return @kind void;
}
procedure `void` `timedOut`(`okhttp3.internal.connection.RealCall$timeout$1` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall$timeout$1;.timedOut:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1af65c.  v0:= v1.`okhttp3.internal.connection.RealCall$timeout$1.a` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1af660.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @kind virtual;
  #L1af666.  return @kind void;
}
