record `okhttp3.internal.http.CallServerInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `boolean` `okhttp3.internal.http.CallServerInterceptor.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http.CallServerInterceptor` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b35e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b35ee.  v0.`okhttp3.internal.http.CallServerInterceptor.a` @type ^`boolean` := v1 @kind boolean;
  #L1b35f2.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.CallServerInterceptor` v11 @kind this, `okhttp3.Interceptor$Chain` v12 @kind object) @signature `Lokhttp3/internal/http/CallServerInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1b32c4.  v0:= "chain" @kind object;
  #L1b32c8.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b32ce.  v12:= (`okhttp3.internal.http.RealInterceptorChain`) v12 @kind object;
  #L1b32d2.  call temp:= `getExchange$okhttp`(v12) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getExchange$okhttp:()Lokhttp3/internal/connection/Exchange;` @kind virtual;
  #L1b32d8.  v0:= temp @kind object;
  #L1b32da.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b32e0.  call temp:= `getRequest$okhttp`(v12) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getRequest$okhttp:()Lokhttp3/Request;` @kind virtual;
  #L1b32e6.  v12:= temp @kind object;
  #L1b32e8.  call temp:= `body`(v12) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L1b32ee.  v1:= temp @kind object;
  #L1b32f0.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1b32f6.  v2:= temp @kind wide;
  #L1b32f8.  call `writeRequestHeaders`(v0, v12) @signature `Lokhttp3/internal/connection/Exchange;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind virtual;
  #L1b32fe.  call temp:= `method`(v12) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L1b3304.  v4:= temp @kind object;
  #L1b3306.  call temp:= `permitsRequestBody`(v4) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L1b330c.  v4:= temp;
  #L1b330e.  v5:= 0I;
  #L1b3310.  v6:= 0I;
  #L1b3312.  v7:= 1I;
  #L1b3314.  if v4 == 0 then goto L1b33c2;
  #L1b3318.  if v1 == 0 then goto L1b33c2;
  #L1b331c.  v4:= "Expect" @kind object;
  #L1b3320.  call temp:= `header`(v12, v4) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1b3326.  v4:= temp @kind object;
  #L1b3328.  v8:= "100-continue" @kind object;
  #L1b332c.  call temp:= `equals`(v8, v4, v7) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L1b3332.  v4:= temp;
  #L1b3334.  if v4 == 0 then goto L1b3350;
  #L1b3338.  call `flushRequest`(v0) @signature `Lokhttp3/internal/connection/Exchange;.flushRequest:()V` @kind virtual;
  #L1b333e.  call temp:= `readResponseHeaders`(v0, v7) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b3344.  v4:= temp @kind object;
  #L1b3346.  call `responseHeadersStart`(v0) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @kind virtual;
  #L1b334c.  v8:= 0I;
  #L1b334e.  goto L1b3354;
  #L1b3350.  v4:= v5 @kind object;
  #L1b3352.  v8:= 1I;
  #L1b3354.  if v4 != 0 then goto L1b33a0;
  #L1b3358.  call temp:= `isDuplex`(v1) @signature `Lokhttp3/RequestBody;.isDuplex:()Z` @kind virtual;
  #L1b335e.  v9:= temp;
  #L1b3360.  if v9 == 0 then goto L1b3382;
  #L1b3364.  call `flushRequest`(v0) @signature `Lokhttp3/internal/connection/Exchange;.flushRequest:()V` @kind virtual;
  #L1b336a.  call temp:= `createRequestBody`(v0, v12, v7) @signature `Lokhttp3/internal/connection/Exchange;.createRequestBody:(Lokhttp3/Request;Z)Lokio/Sink;` @kind virtual;
  #L1b3370.  v9:= temp @kind object;
  #L1b3372.  call temp:= `buffer`(v9) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L1b3378.  v9:= temp @kind object;
  #L1b337a.  call `writeTo`(v1, v9) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @kind virtual;
  #L1b3380.  goto L1b33cc;
  #L1b3382.  call temp:= `createRequestBody`(v0, v12, v6) @signature `Lokhttp3/internal/connection/Exchange;.createRequestBody:(Lokhttp3/Request;Z)Lokio/Sink;` @kind virtual;
  #L1b3388.  v9:= temp @kind object;
  #L1b338a.  call temp:= `buffer`(v9) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L1b3390.  v9:= temp @kind object;
  #L1b3392.  call `writeTo`(v1, v9) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @kind virtual;
  #L1b3398.  call `close`(v9) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L1b339e.  goto L1b33cc;
  #L1b33a0.  call `noRequestBody`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noRequestBody:()V` @kind virtual;
  #L1b33a6.  call temp:= `getConnection$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L1b33ac.  v9:= temp @kind object;
  #L1b33ae.  call temp:= `isMultiplexed$okhttp`(v9) @signature `Lokhttp3/internal/connection/RealConnection;.isMultiplexed$okhttp:()Z` @kind virtual;
  #L1b33b4.  v9:= temp;
  #L1b33b6.  if v9 != 0 then goto L1b33cc;
  #L1b33ba.  call `noNewExchangesOnConnection`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noNewExchangesOnConnection:()V` @kind virtual;
  #L1b33c0.  goto L1b33cc;
  #L1b33c2.  call `noRequestBody`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noRequestBody:()V` @kind virtual;
  #L1b33c8.  v4:= v5 @kind object;
  #L1b33ca.  v8:= 1I;
  #L1b33cc.  if v1 == 0 then goto L1b33dc;
  #L1b33d0.  call temp:= `isDuplex`(v1) @signature `Lokhttp3/RequestBody;.isDuplex:()Z` @kind virtual;
  #L1b33d6.  v1:= temp;
  #L1b33d8.  if v1 != 0 then goto L1b33e2;
  #L1b33dc.  call `finishRequest`(v0) @signature `Lokhttp3/internal/connection/Exchange;.finishRequest:()V` @kind virtual;
  #L1b33e2.  if v4 != 0 then goto L1b3400;
  #L1b33e6.  call temp:= `readResponseHeaders`(v0, v6) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b33ec.  v4:= temp @kind object;
  #L1b33ee.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b33f4.  if v8 == 0 then goto L1b3400;
  #L1b33f8.  call `responseHeadersStart`(v0) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @kind virtual;
  #L1b33fe.  v8:= 0I;
  #L1b3400.  call temp:= `request`(v4, v12) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b3406.  v1:= temp @kind object;
  #L1b3408.  call temp:= `getConnection$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L1b340e.  v4:= temp @kind object;
  #L1b3410.  call temp:= `handshake`(v4) @signature `Lokhttp3/internal/connection/RealConnection;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L1b3416.  v4:= temp @kind object;
  #L1b3418.  call temp:= `handshake`(v1, v4) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b341e.  v1:= temp @kind object;
  #L1b3420.  call temp:= `sentRequestAtMillis`(v1, v2) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b3426.  v1:= temp @kind object;
  #L1b3428.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1b342e.  v9:= temp @kind wide;
  #L1b3430.  call temp:= `receivedResponseAtMillis`(v1, v9) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b3436.  v1:= temp @kind object;
  #L1b3438.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1b343e.  v1:= temp @kind object;
  #L1b3440.  call temp:= `code`(v1) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L1b3446.  v4:= temp;
  #L1b3448.  v9:= 100I;
  #L1b344c.  if v4 != v9 then goto L1b34b0;
  #L1b3450.  call temp:= `readResponseHeaders`(v0, v6) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b3456.  v1:= temp @kind object;
  #L1b3458.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b345e.  if v8 == 0 then goto L1b3468;
  #L1b3462.  call `responseHeadersStart`(v0) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @kind virtual;
  #L1b3468.  call temp:= `request`(v1, v12) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b346e.  v12:= temp @kind object;
  #L1b3470.  call temp:= `getConnection$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L1b3476.  v1:= temp @kind object;
  #L1b3478.  call temp:= `handshake`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L1b347e.  v1:= temp @kind object;
  #L1b3480.  call temp:= `handshake`(v12, v1) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b3486.  v12:= temp @kind object;
  #L1b3488.  call temp:= `sentRequestAtMillis`(v12, v2) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b348e.  v12:= temp @kind object;
  #L1b3490.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1b3496.  v1:= temp @kind wide;
  #L1b3498.  call temp:= `receivedResponseAtMillis`(v12, v1) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b349e.  v12:= temp @kind object;
  #L1b34a0.  call temp:= `build`(v12) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1b34a6.  v1:= temp @kind object;
  #L1b34a8.  call temp:= `code`(v1) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L1b34ae.  v4:= temp;
  #L1b34b0.  call `responseHeadersEnd`(v0, v1) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersEnd:(Lokhttp3/Response;)V` @kind virtual;
  #L1b34b6.  v12:= v11.`okhttp3.internal.http.CallServerInterceptor.a` @type ^`boolean` @kind boolean;
  #L1b34ba.  if v12 == 0 then goto L1b34e4;
  #L1b34be.  v12:= 101I;
  #L1b34c2.  if v4 != v12 then goto L1b34e4;
  #L1b34c6.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L1b34cc.  v12:= temp @kind object;
  #L1b34ce.  v1:= `@@okhttp3.internal.Util.EMPTY_RESPONSE` @type ^`okhttp3.ResponseBody` @kind object;
  #L1b34d2.  call temp:= `body`(v12, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b34d8.  v12:= temp @kind object;
  #L1b34da.  call temp:= `build`(v12) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1b34e0.  v12:= temp @kind object;
  #L1b34e2.  goto L1b3504;
  #L1b34e4.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L1b34ea.  v12:= temp @kind object;
  #L1b34ec.  call temp:= `openResponseBody`(v0, v1) @signature `Lokhttp3/internal/connection/Exchange;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @kind virtual;
  #L1b34f2.  v1:= temp @kind object;
  #L1b34f4.  call temp:= `body`(v12, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b34fa.  v12:= temp @kind object;
  #L1b34fc.  call temp:= `build`(v12) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1b3502.  v12:= temp @kind object;
  #L1b3504.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L1b350a.  v1:= temp @kind object;
  #L1b350c.  v2:= "Connection" @kind object;
  #L1b3510.  call temp:= `header`(v1, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1b3516.  v1:= temp @kind object;
  #L1b3518.  v3:= "close" @kind object;
  #L1b351c.  call temp:= `equals`(v3, v1, v7) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L1b3522.  v1:= temp;
  #L1b3524.  if v1 != 0 then goto L1b353e;
  #L1b3528.  v1:= 2I;
  #L1b352a.  call temp:= `header$default`(v12, v2, v5, v1, v5) @signature `Lokhttp3/Response;.header$default:(Lokhttp3/Response;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1b3530.  v1:= temp @kind object;
  #L1b3532.  call temp:= `equals`(v3, v1, v7) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L1b3538.  v1:= temp;
  #L1b353a.  if v1 == 0 then goto L1b3544;
  #L1b353e.  call `noNewExchangesOnConnection`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noNewExchangesOnConnection:()V` @kind virtual;
  #L1b3544.  v0:= 204I;
  #L1b3548.  if v4 == v0 then goto L1b3554;
  #L1b354c.  v0:= 205I;
  #L1b3550.  if v4 != v0 then goto L1b35d4;
  #L1b3554.  call temp:= `body`(v12) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L1b355a.  v0:= temp @kind object;
  #L1b355c.  if v0 == 0 then goto L1b356a;
  #L1b3560.  call temp:= `contentLength`(v0) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1b3566.  v0:= temp @kind wide;
  #L1b3568.  goto L1b356e;
  #L1b356a.  v0:= -1L;
  #L1b356e.  v2:= 0L;
  #L1b3572.  v6:= lcmp(v0, v2);
  #L1b3576.  if v6 <= 0 then goto L1b35d4;
  #L1b357a.  v0:= new `java.net.ProtocolException`;
  #L1b357e.  v1:= new `java.lang.StringBuilder`;
  #L1b3582.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b3588.  v2:= "HTTP " @kind object;
  #L1b358c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3592.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3598.  v2:= " had non-zero Content-Length: " @kind object;
  #L1b359c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b35a2.  call temp:= `body`(v12) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L1b35a8.  v12:= temp @kind object;
  #L1b35aa.  if v12 == 0 then goto L1b35be;
  #L1b35ae.  call temp:= `contentLength`(v12) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1b35b4.  v2:= temp @kind wide;
  #L1b35b6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1b35bc.  v5:= temp @kind object;
  #L1b35be.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b35c4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b35ca.  v12:= temp @kind object;
  #L1b35cc.  call `<init>`(v0, v12) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b35d2.  throw v0;
  #L1b35d4.  return v12 @kind object;
}
