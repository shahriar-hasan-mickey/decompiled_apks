record `okhttp3.internal.concurrent.TaskRunner` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.concurrent.TaskRunner.a` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.concurrent.TaskRunner.b` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.concurrent.TaskRunner.c` @AccessFlag PRIVATE;
  `java.util.List` `okhttp3.internal.concurrent.TaskRunner.d` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.concurrent.TaskRunner.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `okhttp3.internal.concurrent.TaskRunner.f` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.concurrent.TaskRunner$Backend` `okhttp3.internal.concurrent.TaskRunner.g` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.concurrent.TaskRunner$Companion` `@@okhttp3.internal.concurrent.TaskRunner.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.internal.concurrent.TaskRunner` `@@okhttp3.internal.concurrent.TaskRunner.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.logging.Logger` `@@okhttp3.internal.concurrent.TaskRunner.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/concurrent/TaskRunner;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad8b8.  v0:= new `okhttp3.internal.concurrent.TaskRunner$Companion`;
  #L1ad8bc.  v1:= 0I;
  #L1ad8be.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1ad8c4.  `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` := v0 @kind object;
  #L1ad8c8.  v0:= new `okhttp3.internal.concurrent.TaskRunner`;
  #L1ad8cc.  v1:= new `okhttp3.internal.concurrent.TaskRunner$RealBackend`;
  #L1ad8d0.  v2:= new `java.lang.StringBuilder`;
  #L1ad8d4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad8da.  v3:= `@@okhttp3.internal.Util.okHttpName` @type ^`java.lang.String` @kind object;
  #L1ad8de.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad8e4.  v3:= " TaskRunner" @kind object;
  #L1ad8e8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad8ee.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad8f4.  v2:= temp @kind object;
  #L1ad8f6.  v3:= 1I;
  #L1ad8f8.  call temp:= `threadFactory`(v2, v3) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1ad8fe.  v2:= temp @kind object;
  #L1ad900.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner$RealBackend;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1ad906.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner;.<init>:(Lokhttp3/internal/concurrent/TaskRunner$Backend;)V` @kind direct;
  #L1ad90c.  `@@okhttp3.internal.concurrent.TaskRunner.INSTANCE` @type ^`okhttp3.internal.concurrent.TaskRunner` := v0 @kind object;
  #L1ad910.  v0:= constclass @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1ad914.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ad91a.  v0:= temp @kind object;
  #L1ad91c.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1ad922.  v0:= temp @kind object;
  #L1ad924.  v1:= "Logger.getLogger(TaskRunner::class.java.name)" @kind object;
  #L1ad928.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad92e.  `@@okhttp3.internal.concurrent.TaskRunner.h` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1ad932.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.TaskRunner` v1 @kind this, `okhttp3.internal.concurrent.TaskRunner$Backend` v2 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.<init>:(Lokhttp3/internal/concurrent/TaskRunner$Backend;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ad944.  v0:= "backend" @kind object;
  #L1ad948.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad94e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ad954.  v1.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` := v2 @kind object;
  #L1ad958.  v2:= 10000I;
  #L1ad95c.  v1.`okhttp3.internal.concurrent.TaskRunner.a` @type ^`int` := v2;
  #L1ad960.  v2:= new `java.util.ArrayList`;
  #L1ad964.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1ad96a.  v1.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` := v2 @kind object;
  #L1ad96e.  v2:= new `java.util.ArrayList`;
  #L1ad972.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1ad978.  v1.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` := v2 @kind object;
  #L1ad97c.  v2:= new `okhttp3.internal.concurrent.TaskRunner$runnable$1`;
  #L1ad980.  call `<init>`(v2, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner$runnable$1;.<init>:(Lokhttp3/internal/concurrent/TaskRunner;)V` @kind direct;
  #L1ad986.  v1.`okhttp3.internal.concurrent.TaskRunner.f` @type ^`java.lang.Runnable` := v2 @kind object;
  #L1ad98a.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.concurrent.TaskRunner` v6 @kind this, `okhttp3.internal.concurrent.Task` v7 @kind object, `long` v8 ) @signature `Lokhttp3/internal/concurrent/TaskRunner;.a:(Lokhttp3/internal/concurrent/Task;J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ad9b4.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1ad9b8.  if v0 == 0 then goto L1ada22;
  #L1ad9bc.  call temp:= `holdsLock`(v6) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1ad9c2.  v0:= temp;
  #L1ad9c4.  if v0 == 0 then goto L1ad9ca;
  #L1ad9c8.  goto L1ada22;
  #L1ad9ca.  v7:= new `java.lang.AssertionError`;
  #L1ad9ce.  v8:= new `java.lang.StringBuilder`;
  #L1ad9d2.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad9d8.  v9:= "Thread " @kind object;
  #L1ad9dc.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad9e2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1ad9e8.  v9:= temp @kind object;
  #L1ad9ea.  v0:= "Thread.currentThread()" @kind object;
  #L1ad9ee.  call `checkNotNullExpressionValue`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad9f4.  call temp:= `getName`(v9) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ad9fa.  v9:= temp @kind object;
  #L1ad9fc.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ada02.  v9:= " MUST hold lock on " @kind object;
  #L1ada06.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ada0c.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ada12.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ada18.  v8:= temp @kind object;
  #L1ada1a.  call `<init>`(v7, v8) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ada20.  throw v7;
  #L1ada22.  call temp:= `getQueue$okhttp`(v7) @signature `Lokhttp3/internal/concurrent/Task;.getQueue$okhttp:()Lokhttp3/internal/concurrent/TaskQueue;` @kind virtual;
  #L1ada28.  v0:= temp @kind object;
  #L1ada2a.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ada30.  call temp:= `getActiveTask$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getActiveTask$okhttp:()Lokhttp3/internal/concurrent/Task;` @kind virtual;
  #L1ada36.  v1:= temp @kind object;
  #L1ada38.  v2:= 0I;
  #L1ada3a.  v3:= 1I;
  #L1ada3c.  if v1 != v7 then goto L1ada44;
  #L1ada40.  v1:= 1I;
  #L1ada42.  goto L1ada46;
  #L1ada44.  v1:= 0I;
  #L1ada46.  if v1 == 0 then goto L1adaae;
  #L1ada4a.  call temp:= `getCancelActiveTask$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getCancelActiveTask$okhttp:()Z` @kind virtual;
  #L1ada50.  v1:= temp;
  #L1ada52.  call `setCancelActiveTask$okhttp`(v0, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setCancelActiveTask$okhttp:(Z)V` @kind virtual;
  #L1ada58.  v2:= 0I;
  #L1ada5a.  call `setActiveTask$okhttp`(v0, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setActiveTask$okhttp:(Lokhttp3/internal/concurrent/Task;)V` @kind virtual;
  #L1ada60.  v2:= v6.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L1ada64.  call temp:= `remove`(v2, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1ada6a.  v4:= -1L;
  #L1ada6e.  v2:= lcmp(v8, v4);
  #L1ada72.  if v2 == 0 then goto L1ada8c;
  #L1ada76.  if v1 != 0 then goto L1ada8c;
  #L1ada7a.  call temp:= `getShutdown$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getShutdown$okhttp:()Z` @kind virtual;
  #L1ada80.  v1:= temp;
  #L1ada82.  if v1 != 0 then goto L1ada8c;
  #L1ada86.  call temp:= `scheduleAndDecide$okhttp`(v0, v7, v8, v3) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @kind virtual;
  #L1ada8c.  call temp:= `getFutureTasks$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L1ada92.  v7:= temp @kind object;
  #L1ada94.  call temp:= `isEmpty`(v7) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1ada9a.  v7:= temp;
  #L1ada9c.  v7:= v7 ^~ v3 @kind int;
  #L1ada9e.  if v7 == 0 then goto L1adaac;
  #L1adaa2.  v7:= v6.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1adaa6.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1adaac.  return @kind void;
  #L1adaae.  v7:= new `java.lang.IllegalStateException`;
  #L1adab2.  v8:= "Check failed." @kind object;
  #L1adab6.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1adabc.  v8:= temp @kind object;
  #L1adabe.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adac4.  throw v7;
}
procedure `java.util.logging.Logger` `access$getLogger$cp`() @signature `Lokhttp3/internal/concurrent/TaskRunner;.access$getLogger$cp:()Ljava/util/logging/Logger;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1ad668.  v0:= `@@okhttp3.internal.concurrent.TaskRunner.h` @type ^`java.util.logging.Logger` @kind object;
  #L1ad66c.  return v0 @kind object;
}
procedure `void` `access$runTask`(`okhttp3.internal.concurrent.TaskRunner` v0 @kind object, `okhttp3.internal.concurrent.Task` v1 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.access$runTask:(Lokhttp3/internal/concurrent/TaskRunner;Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1ad99c.  call `c`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner;.c:(Lokhttp3/internal/concurrent/Task;)V` @kind direct;
  #L1ad9a2.  return @kind void;
}
procedure `void` `b`(`okhttp3.internal.concurrent.TaskRunner` v3 @kind this, `okhttp3.internal.concurrent.Task` v4 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.b:(Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1adad8.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1adadc.  if v0 == 0 then goto L1adb46;
  #L1adae0.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1adae6.  v0:= temp;
  #L1adae8.  if v0 == 0 then goto L1adaee;
  #L1adaec.  goto L1adb46;
  #L1adaee.  v4:= new `java.lang.AssertionError`;
  #L1adaf2.  v0:= new `java.lang.StringBuilder`;
  #L1adaf6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1adafc.  v1:= "Thread " @kind object;
  #L1adb00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adb06.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1adb0c.  v1:= temp @kind object;
  #L1adb0e.  v2:= "Thread.currentThread()" @kind object;
  #L1adb12.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1adb18.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1adb1e.  v1:= temp @kind object;
  #L1adb20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adb26.  v1:= " MUST hold lock on " @kind object;
  #L1adb2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adb30.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adb36.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1adb3c.  v0:= temp @kind object;
  #L1adb3e.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1adb44.  throw v4;
  #L1adb46.  v0:= -1L;
  #L1adb4a.  call `setNextExecuteNanoTime$okhttp`(v4, v0) @signature `Lokhttp3/internal/concurrent/Task;.setNextExecuteNanoTime$okhttp:(J)V` @kind virtual;
  #L1adb50.  call temp:= `getQueue$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/Task;.getQueue$okhttp:()Lokhttp3/internal/concurrent/TaskQueue;` @kind virtual;
  #L1adb56.  v0:= temp @kind object;
  #L1adb58.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1adb5e.  call temp:= `getFutureTasks$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L1adb64.  v1:= temp @kind object;
  #L1adb66.  call temp:= `remove`(v1, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1adb6c.  v1:= v3.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1adb70.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1adb76.  call `setActiveTask$okhttp`(v0, v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setActiveTask$okhttp:(Lokhttp3/internal/concurrent/Task;)V` @kind virtual;
  #L1adb7c.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L1adb80.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1adb86.  return @kind void;
}
procedure `void` `c`(`okhttp3.internal.concurrent.TaskRunner` v5 @kind this, `okhttp3.internal.concurrent.Task` v6 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.c:(Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1add10.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1add14.  if v0 == 0 then goto L1add7e;
  #L1add18.  call temp:= `holdsLock`(v5) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1add1e.  v0:= temp;
  #L1add20.  if v0 != 0 then goto L1add26;
  #L1add24.  goto L1add7e;
  #L1add26.  v6:= new `java.lang.AssertionError`;
  #L1add2a.  v0:= new `java.lang.StringBuilder`;
  #L1add2e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1add34.  v1:= "Thread " @kind object;
  #L1add38.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1add3e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1add44.  v1:= temp @kind object;
  #L1add46.  v2:= "Thread.currentThread()" @kind object;
  #L1add4a.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1add50.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1add56.  v1:= temp @kind object;
  #L1add58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1add5e.  v1:= " MUST NOT hold lock on " @kind object;
  #L1add62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1add68.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1add6e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1add74.  v0:= temp @kind object;
  #L1add76.  call `<init>`(v6, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1add7c.  throw v6;
  #L1add7e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1add84.  v0:= temp @kind object;
  #L1add86.  v1:= "currentThread" @kind object;
  #L1add8a.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1add90.  call temp:= `getName`(v0) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1add96.  v1:= temp @kind object;
  #L1add98.  call temp:= `getName`(v6) @signature `Lokhttp3/internal/concurrent/Task;.getName:()Ljava/lang/String;` @kind virtual;
  #L1add9e.  v2:= temp @kind object;
  #L1adda0.  call `setName`(v0, v2) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1adda6.  v2:= -1L;
  #L1addaa.  call temp:= `runOnce`(v6) @signature `Lokhttp3/internal/concurrent/Task;.runOnce:()J` @kind virtual;
  #L1addb0.  v2:= temp @kind wide;
  #L1addb2.  @monitorenter v5
  #L1addb4.  call `a`(v5, v6, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner;.a:(Lokhttp3/internal/concurrent/Task;J)V` @kind direct;
  #L1addba.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1addbe.  @monitorexit v5
  #L1addc0.  call `setName`(v0, v1) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1addc6.  return @kind void;
  #L1addc8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1addca.  @monitorexit v5
  #L1addcc.  throw v6;
  #L1addce.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1addd0.  @monitorenter v5
  #L1addd2.  call `a`(v5, v6, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner;.a:(Lokhttp3/internal/concurrent/Task;J)V` @kind direct;
  #L1addd8.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1adddc.  @monitorexit v5
  #L1addde.  call `setName`(v0, v1) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1adde4.  throw v4;
  #L1adde6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1adde8.  @monitorexit v5
  #L1addea.  throw v6;
  catch `java.lang.Throwable` @[L1addaa..L1addb2] goto L1addce;
  catch `java.lang.Throwable` @[L1addb4..L1addbe] goto L1addc8;
  catch `java.lang.Throwable` @[L1addd2..L1adddc] goto L1adde6;
}
procedure `java.util.List` `activeQueues`(`okhttp3.internal.concurrent.TaskRunner` v2 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.activeQueues:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ad630.  @monitorenter v2
  #L1ad632.  v0:= v2.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L1ad636.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1ad63a.  call temp:= `plus`(v0, v1) @signature `Lkotlin/collections/CollectionsKt;.plus:(Ljava/util/Collection;Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L1ad640.  v0:= temp @kind object;
  #L1ad642.  @monitorexit v2
  #L1ad644.  return v0 @kind object;
  #L1ad646.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ad648.  @monitorexit v2
  #L1ad64a.  throw v0;
  catch `java.lang.Throwable` @[L1ad632..L1ad642] goto L1ad646;
}
procedure `okhttp3.internal.concurrent.Task` `awaitTaskToRun`(`okhttp3.internal.concurrent.TaskRunner` v15 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.awaitTaskToRun:()Lokhttp3/internal/concurrent/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L1ad680.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1ad684.  if v0 == 0 then goto L1ad6ee;
  #L1ad688.  call temp:= `holdsLock`(v15) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1ad68e.  v0:= temp;
  #L1ad690.  if v0 == 0 then goto L1ad696;
  #L1ad694.  goto L1ad6ee;
  #L1ad696.  v0:= new `java.lang.AssertionError`;
  #L1ad69a.  v1:= new `java.lang.StringBuilder`;
  #L1ad69e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad6a4.  v2:= "Thread " @kind object;
  #L1ad6a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad6ae.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1ad6b4.  v2:= temp @kind object;
  #L1ad6b6.  v3:= "Thread.currentThread()" @kind object;
  #L1ad6ba.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad6c0.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ad6c6.  v2:= temp @kind object;
  #L1ad6c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad6ce.  v2:= " MUST hold lock on " @kind object;
  #L1ad6d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad6d8.  call temp:= `append`(v1, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad6de.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad6e4.  v1:= temp @kind object;
  #L1ad6e6.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ad6ec.  throw v0;
  #L1ad6ee.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1ad6f2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1ad6f8.  v0:= temp;
  #L1ad6fa.  v1:= 0I;
  #L1ad6fc.  if v0 == 0 then goto L1ad702;
  #L1ad700.  return v1 @kind object;
  #L1ad702.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1ad706.  call temp:= `nanoTime`(v0) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.nanoTime:()J` @kind interface;
  #L1ad70c.  v2:= temp @kind wide;
  #L1ad70e.  v4:= 9223372036854775807L;
  #L1ad718.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1ad71c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1ad722.  v0:= temp @kind object;
  #L1ad724.  v6:= v1 @kind object;
  #L1ad726.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1ad72c.  v7:= temp;
  #L1ad72e.  v8:= 1I;
  #L1ad730.  v9:= 0I;
  #L1ad732.  if v7 == 0 then goto L1ad78a;
  #L1ad736.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1ad73c.  v7:= temp @kind object;
  #L1ad73e.  v7:= (`okhttp3.internal.concurrent.TaskQueue`) v7 @kind object;
  #L1ad742.  call temp:= `getFutureTasks$okhttp`(v7) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L1ad748.  v7:= temp @kind object;
  #L1ad74a.  call temp:= `get`(v7, v9) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1ad750.  v7:= temp @kind object;
  #L1ad752.  v7:= (`okhttp3.internal.concurrent.Task`) v7 @kind object;
  #L1ad756.  call temp:= `getNextExecuteNanoTime$okhttp`(v7) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @kind virtual;
  #L1ad75c.  v10:= temp @kind wide;
  #L1ad75e.  v10:= v10 - v2 @kind long;
  #L1ad760.  v12:= 0L;
  #L1ad764.  call temp:= `max`(v12, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1ad76a.  v10:= temp @kind wide;
  #L1ad76c.  v14:= lcmp(v10, v12);
  #L1ad770.  if v14 <= 0 then goto L1ad77e;
  #L1ad774.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ad77a.  v4:= temp @kind wide;
  #L1ad77c.  goto L1ad726;
  #L1ad77e.  if v6 == 0 then goto L1ad786;
  #L1ad782.  v0:= 1I;
  #L1ad784.  goto L1ad78c;
  #L1ad786.  v6:= v7 @kind object;
  #L1ad788.  goto L1ad726;
  #L1ad78a.  v0:= 0I;
  #L1ad78c.  if v6 == 0 then goto L1ad7c4;
  #L1ad790.  call `b`(v15, v6) @signature `Lokhttp3/internal/concurrent/TaskRunner;.b:(Lokhttp3/internal/concurrent/Task;)V` @kind direct;
  #L1ad796.  if v0 != 0 then goto L1ad7b4;
  #L1ad79a.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` @kind boolean;
  #L1ad79e.  if v0 != 0 then goto L1ad7c2;
  #L1ad7a2.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1ad7a6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1ad7ac.  v0:= temp;
  #L1ad7ae.  v0:= v0 ^~ v8 @kind int;
  #L1ad7b0.  if v0 == 0 then goto L1ad7c2;
  #L1ad7b4.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1ad7b8.  v1:= v15.`okhttp3.internal.concurrent.TaskRunner.f` @type ^`java.lang.Runnable` @kind object;
  #L1ad7bc.  call `execute`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1ad7c2.  return v6 @kind object;
  #L1ad7c4.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` @kind boolean;
  #L1ad7c8.  if v0 == 0 then goto L1ad7e6;
  #L1ad7cc.  v6:= v15.`okhttp3.internal.concurrent.TaskRunner.c` @type ^`long` @kind wide;
  #L1ad7d0.  v6:= v6 - v2 @kind long;
  #L1ad7d2.  v0:= lcmp(v4, v6);
  #L1ad7d6.  if v0 >= 0 then goto L1ad7e4;
  #L1ad7da.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1ad7de.  call `coordinatorNotify`(v0, v15) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.coordinatorNotify:(Lokhttp3/internal/concurrent/TaskRunner;)V` @kind interface;
  #L1ad7e4.  return v1 @kind object;
  #L1ad7e6.  v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` := v8 @kind boolean;
  #L1ad7ea.  v2:= v2 + v4 @kind long;
  #L1ad7ec.  v15.`okhttp3.internal.concurrent.TaskRunner.c` @type ^`long` := v2 @kind wide;
  #L1ad7f0.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1ad7f4.  call `coordinatorWait`(v0, v15, v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.coordinatorWait:(Lokhttp3/internal/concurrent/TaskRunner;J)V` @kind interface;
  #L1ad7fa.  v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` := v9 @kind boolean;
  #L1ad7fe.  goto L1ad6ee;
  #L1ad802.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ad804.  goto L1ad80e;
  #L1ad806.  call `cancelAll`(v15) @signature `Lokhttp3/internal/concurrent/TaskRunner;.cancelAll:()V` @kind virtual;
  #L1ad80c.  goto L1ad7fa;
  #L1ad80e.  v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` := v9 @kind boolean;
  #L1ad812.  throw v0;
  catch `java.lang.InterruptedException` @[L1ad7f0..L1ad7fa] goto L1ad806;
  catch `java.lang.Throwable` @[L1ad7f0..L1ad7fa] goto L1ad802;
  catch `java.lang.Throwable` @[L1ad806..L1ad80c] goto L1ad802;
}
procedure `void` `cancelAll`(`okhttp3.internal.concurrent.TaskRunner` v2 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.cancelAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1adb98.  v0:= v2.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L1adb9c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1adba2.  v0:= temp;
  #L1adba4.  v0:= v0 + -1;
  #L1adba8.  if v0 < 0 then goto L1adbc8;
  #L1adbac.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L1adbb0.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adbb6.  v1:= temp @kind object;
  #L1adbb8.  v1:= (`okhttp3.internal.concurrent.TaskQueue`) v1 @kind object;
  #L1adbbc.  call temp:= `cancelAllAndDecide$okhttp`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L1adbc2.  v0:= v0 + -1;
  #L1adbc6.  goto L1adba8;
  #L1adbc8.  v0:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1adbcc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1adbd2.  v0:= temp;
  #L1adbd4.  v0:= v0 + -1;
  #L1adbd8.  if v0 < 0 then goto L1adc16;
  #L1adbdc.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1adbe0.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adbe6.  v1:= temp @kind object;
  #L1adbe8.  v1:= (`okhttp3.internal.concurrent.TaskQueue`) v1 @kind object;
  #L1adbec.  call temp:= `cancelAllAndDecide$okhttp`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L1adbf2.  call temp:= `getFutureTasks$okhttp`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L1adbf8.  v1:= temp @kind object;
  #L1adbfa.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1adc00.  v1:= temp;
  #L1adc02.  if v1 == 0 then goto L1adc10;
  #L1adc06.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1adc0a.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1adc10.  v0:= v0 + -1;
  #L1adc14.  goto L1adbd8;
  #L1adc16.  return @kind void;
}
procedure `okhttp3.internal.concurrent.TaskRunner$Backend` `getBackend`(`okhttp3.internal.concurrent.TaskRunner` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.getBackend:()Lokhttp3/internal/concurrent/TaskRunner$Backend;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ad8a0.  v0:= v1.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1ad8a4.  return v0 @kind object;
}
procedure `void` `kickCoordinator$okhttp`(`okhttp3.internal.concurrent.TaskRunner` v3 @kind this, `okhttp3.internal.concurrent.TaskQueue` v4 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1adc28.  v0:= "taskQueue" @kind object;
  #L1adc2c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1adc32.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1adc36.  if v0 == 0 then goto L1adca0;
  #L1adc3a.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1adc40.  v0:= temp;
  #L1adc42.  if v0 == 0 then goto L1adc48;
  #L1adc46.  goto L1adca0;
  #L1adc48.  v4:= new `java.lang.AssertionError`;
  #L1adc4c.  v0:= new `java.lang.StringBuilder`;
  #L1adc50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1adc56.  v1:= "Thread " @kind object;
  #L1adc5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adc60.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1adc66.  v1:= temp @kind object;
  #L1adc68.  v2:= "Thread.currentThread()" @kind object;
  #L1adc6c.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1adc72.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1adc78.  v1:= temp @kind object;
  #L1adc7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adc80.  v1:= " MUST hold lock on " @kind object;
  #L1adc84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adc8a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adc90.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1adc96.  v0:= temp @kind object;
  #L1adc98.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1adc9e.  throw v4;
  #L1adca0.  call temp:= `getActiveTask$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getActiveTask$okhttp:()Lokhttp3/internal/concurrent/Task;` @kind virtual;
  #L1adca6.  v0:= temp @kind object;
  #L1adca8.  if v0 != 0 then goto L1adcda;
  #L1adcac.  call temp:= `getFutureTasks$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L1adcb2.  v0:= temp @kind object;
  #L1adcb4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1adcba.  v0:= temp;
  #L1adcbc.  v0:= v0 ^~ 1;
  #L1adcc0.  if v0 == 0 then goto L1adcd0;
  #L1adcc4.  v0:= v3.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1adcc8.  call `addIfAbsent`(v0, v4) @signature `Lokhttp3/internal/Util;.addIfAbsent:(Ljava/util/List;Ljava/lang/Object;)V` @kind static;
  #L1adcce.  goto L1adcda;
  #L1adcd0.  v0:= v3.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1adcd4.  call temp:= `remove`(v0, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1adcda.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` @kind boolean;
  #L1adcde.  if v4 == 0 then goto L1adcee;
  #L1adce2.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1adce6.  call `coordinatorNotify`(v4, v3) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.coordinatorNotify:(Lokhttp3/internal/concurrent/TaskRunner;)V` @kind interface;
  #L1adcec.  goto L1adcfc;
  #L1adcee.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1adcf2.  v0:= v3.`okhttp3.internal.concurrent.TaskRunner.f` @type ^`java.lang.Runnable` @kind object;
  #L1adcf6.  call `execute`(v4, v0) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1adcfc.  return @kind void;
}
procedure `okhttp3.internal.concurrent.TaskQueue` `newQueue`(`okhttp3.internal.concurrent.TaskRunner` v4 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.newQueue:()Lokhttp3/internal/concurrent/TaskQueue;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad840.  @monitorenter v4
  #L1ad842.  v0:= v4.`okhttp3.internal.concurrent.TaskRunner.a` @type ^`int`;
  #L1ad846.  v1:= v0 + 1;
  #L1ad84a.  v4.`okhttp3.internal.concurrent.TaskRunner.a` @type ^`int` := v1;
  #L1ad84e.  @monitorexit v4
  #L1ad850.  v1:= new `okhttp3.internal.concurrent.TaskQueue`;
  #L1ad854.  v2:= new `java.lang.StringBuilder`;
  #L1ad858.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad85e.  v3:= 81I;
  #L1ad862.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad868.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad86e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad874.  v0:= temp @kind object;
  #L1ad876.  call `<init>`(v1, v4, v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.<init>:(Lokhttp3/internal/concurrent/TaskRunner;Ljava/lang/String;)V` @kind direct;
  #L1ad87c.  return v1 @kind object;
  #L1ad87e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ad880.  @monitorexit v4
  #L1ad882.  throw v0;
  catch `java.lang.Throwable` @[L1ad842..L1ad84e] goto L1ad87e;
}
