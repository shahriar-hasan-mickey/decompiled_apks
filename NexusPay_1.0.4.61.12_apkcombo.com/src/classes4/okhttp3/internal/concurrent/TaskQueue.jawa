record `okhttp3.internal.concurrent.TaskQueue` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.internal.concurrent.TaskQueue.a` @AccessFlag PRIVATE;
  `okhttp3.internal.concurrent.Task` `okhttp3.internal.concurrent.TaskQueue.b` @AccessFlag PRIVATE;
  `java.util.List` `okhttp3.internal.concurrent.TaskQueue.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.concurrent.TaskQueue.d` @AccessFlag PRIVATE;
  `okhttp3.internal.concurrent.TaskRunner` `okhttp3.internal.concurrent.TaskQueue.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.internal.concurrent.TaskQueue.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this, `okhttp3.internal.concurrent.TaskRunner` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.<init>:(Lokhttp3/internal/concurrent/TaskRunner;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1acf14.  v0:= "taskRunner" @kind object;
  #L1acf18.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1acf1e.  v0:= "name" @kind object;
  #L1acf22.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1acf28.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1acf2e.  v1.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` := v2 @kind object;
  #L1acf32.  v1.`okhttp3.internal.concurrent.TaskQueue.f` @type ^`java.lang.String` := v3 @kind object;
  #L1acf36.  v2:= new `java.util.ArrayList`;
  #L1acf3a.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1acf40.  v1.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` := v2 @kind object;
  #L1acf44.  return @kind void;
}
procedure `void` `execute$default`(`okhttp3.internal.concurrent.TaskQueue` v6 @kind object, `java.lang.String` v7 @kind object, `long` v8 , `boolean` v10 , `kotlin.jvm.functions.Function0` v11 @kind object, `int` v12 , `java.lang.Object` v13 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.execute$default:(Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;JZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ad00c.  v13:= v12 ^& 2;
  #L1ad010.  if v13 == 0 then goto L1ad018;
  #L1ad014.  v8:= 0L;
  #L1ad018.  v12:= v12 ^& 4;
  #L1ad01c.  if v12 == 0 then goto L1ad026;
  #L1ad020.  v10:= 1I;
  #L1ad022.  v5:= 1I;
  #L1ad024.  goto L1ad028;
  #L1ad026.  v5:= v10;
  #L1ad028.  v10:= "name" @kind object;
  #L1ad02c.  call `checkNotNullParameter`(v7, v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad032.  v10:= "block" @kind object;
  #L1ad036.  call `checkNotNullParameter`(v11, v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad03c.  v10:= new `okhttp3.internal.concurrent.TaskQueue$execute$1`;
  #L1ad040.  v0:= v10 @kind object;
  #L1ad042.  v1:= v11 @kind object;
  #L1ad044.  v2:= v7 @kind object;
  #L1ad046.  v3:= v5;
  #L1ad048.  v4:= v7 @kind object;
  #L1ad04a.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/concurrent/TaskQueue$execute$1;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;ZLjava/lang/String;Z)V` @kind direct;
  #L1ad050.  call `schedule`(v6, v10, v8) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L1ad056.  return @kind void;
}
procedure `void` `schedule$default`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind object, `java.lang.String` v1 @kind object, `long` v2 , `kotlin.jvm.functions.Function0` v4 @kind object, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule$default:(Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;JLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1ad0ac.  v5:= v5 ^& 2;
  #L1ad0b0.  if v5 == 0 then goto L1ad0b8;
  #L1ad0b4.  v2:= 0L;
  #L1ad0b8.  v5:= "name" @kind object;
  #L1ad0bc.  call `checkNotNullParameter`(v1, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad0c2.  v5:= "block" @kind object;
  #L1ad0c6.  call `checkNotNullParameter`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad0cc.  v5:= new `okhttp3.internal.concurrent.TaskQueue$schedule$2`;
  #L1ad0d0.  call `<init>`(v5, v4, v1, v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$schedule$2;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1ad0d6.  call `schedule`(v0, v5, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L1ad0dc.  return @kind void;
}
procedure `void` `schedule$default`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind object, `okhttp3.internal.concurrent.Task` v1 @kind object, `long` v2 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule$default:(Lokhttp3/internal/concurrent/TaskQueue;Lokhttp3/internal/concurrent/Task;JILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1ad0f0.  v4:= v4 ^& 2;
  #L1ad0f4.  if v4 == 0 then goto L1ad0fc;
  #L1ad0f8.  v2:= 0L;
  #L1ad0fc.  call `schedule`(v0, v1, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L1ad102.  return @kind void;
}
procedure `void` `cancelAll`(`okhttp3.internal.concurrent.TaskQueue` v4 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1acf58.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1acf5c.  if v0 == 0 then goto L1acfc6;
  #L1acf60.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1acf66.  v0:= temp;
  #L1acf68.  if v0 != 0 then goto L1acf6e;
  #L1acf6c.  goto L1acfc6;
  #L1acf6e.  v0:= new `java.lang.AssertionError`;
  #L1acf72.  v1:= new `java.lang.StringBuilder`;
  #L1acf76.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1acf7c.  v2:= "Thread " @kind object;
  #L1acf80.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1acf86.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1acf8c.  v2:= temp @kind object;
  #L1acf8e.  v3:= "Thread.currentThread()" @kind object;
  #L1acf92.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1acf98.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1acf9e.  v2:= temp @kind object;
  #L1acfa0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1acfa6.  v2:= " MUST NOT hold lock on " @kind object;
  #L1acfaa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1acfb0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1acfb6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1acfbc.  v1:= temp @kind object;
  #L1acfbe.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1acfc4.  throw v0;
  #L1acfc6.  v0:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1acfca.  @monitorenter v0
  #L1acfcc.  call temp:= `cancelAllAndDecide$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L1acfd2.  v1:= temp;
  #L1acfd4.  if v1 == 0 then goto L1acfe2;
  #L1acfd8.  v1:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1acfdc.  call `kickCoordinator$okhttp`(v1, v4) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L1acfe2.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1acfe6.  @monitorexit v0
  #L1acfe8.  return @kind void;
  #L1acfea.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1acfec.  @monitorexit v0
  #L1acfee.  throw v1;
  catch `java.lang.Throwable` @[L1acfcc..L1acfe6] goto L1acfea;
}
procedure `boolean` `cancelAllAndDecide$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v5 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1acb14.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L1acb18.  v1:= 1I;
  #L1acb1a.  if v0 == 0 then goto L1acb34;
  #L1acb1e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1acb24.  call temp:= `getCancelable`(v0) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @kind virtual;
  #L1acb2a.  v0:= temp;
  #L1acb2c.  if v0 == 0 then goto L1acb34;
  #L1acb30.  v5.`okhttp3.internal.concurrent.TaskQueue.d` @type ^`boolean` := v1 @kind boolean;
  #L1acb34.  v0:= 0I;
  #L1acb36.  v2:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acb3a.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1acb40.  v2:= temp;
  #L1acb42.  v2:= v2 - v1 @kind int;
  #L1acb44.  if v2 < 0 then goto L1acbac;
  #L1acb48.  v3:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acb4c.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1acb52.  v3:= temp @kind object;
  #L1acb54.  v3:= (`okhttp3.internal.concurrent.Task`) v3 @kind object;
  #L1acb58.  call temp:= `getCancelable`(v3) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @kind virtual;
  #L1acb5e.  v3:= temp;
  #L1acb60.  if v3 == 0 then goto L1acba6;
  #L1acb64.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acb68.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1acb6e.  v0:= temp @kind object;
  #L1acb70.  v0:= (`okhttp3.internal.concurrent.Task`) v0 @kind object;
  #L1acb74.  v3:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L1acb78.  call temp:= `getLogger`(v3) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L1acb7e.  v3:= temp @kind object;
  #L1acb80.  v4:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1acb84.  call temp:= `isLoggable`(v3, v4) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1acb8a.  v3:= temp;
  #L1acb8c.  if v3 == 0 then goto L1acb9a;
  #L1acb90.  v3:= "canceled" @kind object;
  #L1acb94.  call `access$log`(v0, v5, v3) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L1acb9a.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acb9e.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1acba4.  v0:= 1I;
  #L1acba6.  v2:= v2 + -1;
  #L1acbaa.  goto L1acb44;
  #L1acbac.  return v0;
}
procedure `void` `execute`(`okhttp3.internal.concurrent.TaskQueue` v7 @kind this, `java.lang.String` v8 @kind object, `long` v9 , `boolean` v11 , `kotlin.jvm.functions.Function0` v12 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.execute:(Ljava/lang/String;JZLkotlin/jvm/functions/Function0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ad068.  v0:= "name" @kind object;
  #L1ad06c.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad072.  v0:= "block" @kind object;
  #L1ad076.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad07c.  v0:= new `okhttp3.internal.concurrent.TaskQueue$execute$1`;
  #L1ad080.  v1:= v0 @kind object;
  #L1ad082.  v2:= v12 @kind object;
  #L1ad084.  v3:= v8 @kind object;
  #L1ad086.  v4:= v11;
  #L1ad088.  v5:= v8 @kind object;
  #L1ad08a.  v6:= v11;
  #L1ad08c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/concurrent/TaskQueue$execute$1;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;ZLjava/lang/String;Z)V` @kind direct;
  #L1ad092.  call `schedule`(v7, v0, v9) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L1ad098.  return @kind void;
}
procedure `okhttp3.internal.concurrent.Task` `getActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getActiveTask$okhttp:()Lokhttp3/internal/concurrent/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1acee4.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L1acee8.  return v0 @kind object;
}
procedure `boolean` `getCancelActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getCancelActiveTask$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1acbc0.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.d` @type ^`boolean` @kind boolean;
  #L1acbc4.  return v0;
}
procedure `java.util.List` `getFutureTasks$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1acda4.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acda8.  return v0 @kind object;
}
procedure `java.lang.String` `getName$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getName$okhttp:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1acd74.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.f` @type ^`java.lang.String` @kind object;
  #L1acd78.  return v0 @kind object;
}
procedure `java.util.List` `getScheduledTasks`(`okhttp3.internal.concurrent.TaskQueue` v2 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getScheduledTasks:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1acdbc.  v0:= v2.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1acdc0.  @monitorenter v0
  #L1acdc2.  v1:= v2.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acdc6.  call temp:= `toList`(v1) @signature `Lkotlin/collections/CollectionsKt;.toList:(Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L1acdcc.  v1:= temp @kind object;
  #L1acdce.  @monitorexit v0
  #L1acdd0.  return v1 @kind object;
  #L1acdd2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1acdd4.  @monitorexit v0
  #L1acdd6.  throw v1;
  catch `java.lang.Throwable` @[L1acdc2..L1acdce] goto L1acdd2;
}
procedure `boolean` `getShutdown$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getShutdown$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1acbd8.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` @kind boolean;
  #L1acbdc.  return v0;
}
procedure `okhttp3.internal.concurrent.TaskRunner` `getTaskRunner$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getTaskRunner$okhttp:()Lokhttp3/internal/concurrent/TaskRunner;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1acefc.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1acf00.  return v0 @kind object;
}
procedure `java.util.concurrent.CountDownLatch` `idleLatch`(`okhttp3.internal.concurrent.TaskQueue` v5 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.idleLatch:()Ljava/util/concurrent/CountDownLatch;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1acdf4.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1acdf8.  @monitorenter v0
  #L1acdfa.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L1acdfe.  v2:= 0I;
  #L1ace00.  if v1 != 0 then goto L1ace22;
  #L1ace04.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1ace08.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1ace0e.  v1:= temp;
  #L1ace10.  if v1 == 0 then goto L1ace22;
  #L1ace14.  v1:= new `java.util.concurrent.CountDownLatch`;
  #L1ace18.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L1ace1e.  @monitorexit v0
  #L1ace20.  return v1 @kind object;
  #L1ace22.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L1ace26.  v3:= instanceof @variable v1 @type ^`okhttp3.internal.concurrent.TaskQueue$a` @kind boolean;
  #L1ace2a.  if v3 == 0 then goto L1ace3e;
  #L1ace2e.  v1:= (`okhttp3.internal.concurrent.TaskQueue$a`) v1 @kind object;
  #L1ace32.  call temp:= `a`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.a:()Ljava/util/concurrent/CountDownLatch;` @kind virtual;
  #L1ace38.  v1:= temp @kind object;
  #L1ace3a.  @monitorexit v0
  #L1ace3c.  return v1 @kind object;
  #L1ace3e.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1ace42.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1ace48.  v1:= temp @kind object;
  #L1ace4a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1ace50.  v3:= temp;
  #L1ace52.  if v3 == 0 then goto L1ace7a;
  #L1ace56.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1ace5c.  v3:= temp @kind object;
  #L1ace5e.  v3:= (`okhttp3.internal.concurrent.Task`) v3 @kind object;
  #L1ace62.  v4:= instanceof @variable v3 @type ^`okhttp3.internal.concurrent.TaskQueue$a` @kind boolean;
  #L1ace66.  if v4 == 0 then goto L1ace4a;
  #L1ace6a.  v3:= (`okhttp3.internal.concurrent.TaskQueue$a`) v3 @kind object;
  #L1ace6e.  call temp:= `a`(v3) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.a:()Ljava/util/concurrent/CountDownLatch;` @kind virtual;
  #L1ace74.  v1:= temp @kind object;
  #L1ace76.  @monitorexit v0
  #L1ace78.  return v1 @kind object;
  #L1ace7a.  v1:= new `okhttp3.internal.concurrent.TaskQueue$a`;
  #L1ace7e.  call `<init>`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.<init>:()V` @kind direct;
  #L1ace84.  v3:= 0L;
  #L1ace88.  call temp:= `scheduleAndDecide$okhttp`(v5, v1, v3, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @kind virtual;
  #L1ace8e.  v2:= temp;
  #L1ace90.  if v2 == 0 then goto L1ace9e;
  #L1ace94.  v2:= v5.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1ace98.  call `kickCoordinator$okhttp`(v2, v5) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L1ace9e.  call temp:= `a`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.a:()Ljava/util/concurrent/CountDownLatch;` @kind virtual;
  #L1acea4.  v1:= temp @kind object;
  #L1acea6.  @monitorexit v0
  #L1acea8.  return v1 @kind object;
  #L1aceaa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1aceac.  @monitorexit v0
  #L1aceae.  throw v1;
  catch `java.lang.Throwable` @[L1acdfa..L1ace1e] goto L1aceaa;
  catch `java.lang.Throwable` @[L1ace22..L1ace3a] goto L1aceaa;
  catch `java.lang.Throwable` @[L1ace3e..L1ace76] goto L1aceaa;
  catch `java.lang.Throwable` @[L1ace7a..L1acea6] goto L1aceaa;
}
procedure `void` `schedule`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this, `java.lang.String` v2 @kind object, `long` v3 , `kotlin.jvm.functions.Function0` v5 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Ljava/lang/String;JLkotlin/jvm/functions/Function0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ad114.  v0:= "name" @kind object;
  #L1ad118.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad11e.  v0:= "block" @kind object;
  #L1ad122.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad128.  v0:= new `okhttp3.internal.concurrent.TaskQueue$schedule$2`;
  #L1ad12c.  call `<init>`(v0, v5, v2, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue$schedule$2;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1ad132.  call `schedule`(v1, v0, v3) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L1ad138.  return @kind void;
}
procedure `void` `schedule`(`okhttp3.internal.concurrent.TaskQueue` v2 @kind this, `okhttp3.internal.concurrent.Task` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ad14c.  v0:= "task" @kind object;
  #L1ad150.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad156.  v0:= v2.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1ad15a.  @monitorenter v0
  #L1ad15c.  v1:= v2.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` @kind boolean;
  #L1ad160.  if v1 == 0 then goto L1ad1cc;
  #L1ad164.  call temp:= `getCancelable`(v3) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @kind virtual;
  #L1ad16a.  v4:= temp;
  #L1ad16c.  if v4 == 0 then goto L1ad19a;
  #L1ad170.  v4:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L1ad174.  call temp:= `getLogger`(v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L1ad17a.  v4:= temp @kind object;
  #L1ad17c.  v5:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1ad180.  call temp:= `isLoggable`(v4, v5) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1ad186.  v4:= temp;
  #L1ad188.  if v4 == 0 then goto L1ad196;
  #L1ad18c.  v4:= "schedule canceled (queue is shutdown)" @kind object;
  #L1ad190.  call `access$log`(v3, v2, v4) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L1ad196.  @monitorexit v0
  #L1ad198.  return @kind void;
  #L1ad19a.  v4:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L1ad19e.  call temp:= `getLogger`(v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L1ad1a4.  v4:= temp @kind object;
  #L1ad1a6.  v5:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1ad1aa.  call temp:= `isLoggable`(v4, v5) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1ad1b0.  v4:= temp;
  #L1ad1b2.  if v4 == 0 then goto L1ad1c0;
  #L1ad1b6.  v4:= "schedule failed (queue is shutdown)" @kind object;
  #L1ad1ba.  call `access$log`(v3, v2, v4) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L1ad1c0.  v3:= new `java.util.concurrent.RejectedExecutionException`;
  #L1ad1c4.  call `<init>`(v3) @signature `Ljava/util/concurrent/RejectedExecutionException;.<init>:()V` @kind direct;
  #L1ad1ca.  throw v3;
  #L1ad1cc.  v1:= 0I;
  #L1ad1ce.  call temp:= `scheduleAndDecide$okhttp`(v2, v3, v4, v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @kind virtual;
  #L1ad1d4.  v3:= temp;
  #L1ad1d6.  if v3 == 0 then goto L1ad1e4;
  #L1ad1da.  v3:= v2.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1ad1de.  call `kickCoordinator$okhttp`(v3, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L1ad1e4.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1ad1e8.  @monitorexit v0
  #L1ad1ea.  return @kind void;
  #L1ad1ec.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ad1ee.  @monitorexit v0
  #L1ad1f0.  throw v3;
  catch `java.lang.Throwable` @[L1ad15c..L1ad196] goto L1ad1ec;
  catch `java.lang.Throwable` @[L1ad19a..L1ad1e8] goto L1ad1ec;
}
procedure `boolean` `scheduleAndDecide$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v10 @kind this, `okhttp3.internal.concurrent.Task` v11 @kind object, `long` v12 , `boolean` v14 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1acbf0.  v0:= "task" @kind object;
  #L1acbf4.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1acbfa.  call `initQueue$okhttp`(v11, v10) @signature `Lokhttp3/internal/concurrent/Task;.initQueue$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L1acc00.  v0:= v10.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1acc04.  call temp:= `getBackend`(v0) @signature `Lokhttp3/internal/concurrent/TaskRunner;.getBackend:()Lokhttp3/internal/concurrent/TaskRunner$Backend;` @kind virtual;
  #L1acc0a.  v0:= temp @kind object;
  #L1acc0c.  call temp:= `nanoTime`(v0) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.nanoTime:()J` @kind interface;
  #L1acc12.  v0:= temp @kind wide;
  #L1acc14.  v2:= v0 + v12 @kind long;
  #L1acc18.  v4:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acc1c.  call temp:= `indexOf`(v4, v11) @signature `Ljava/util/List;.indexOf:(Ljava/lang/Object;)I` @kind interface;
  #L1acc22.  v4:= temp;
  #L1acc24.  v5:= -1I;
  #L1acc26.  v6:= 0I;
  #L1acc28.  if v4 == v5 then goto L1acc6e;
  #L1acc2c.  call temp:= `getNextExecuteNanoTime$okhttp`(v11) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @kind virtual;
  #L1acc32.  v7:= temp @kind wide;
  #L1acc34.  v9:= lcmp(v7, v2);
  #L1acc38.  if v9 > 0 then goto L1acc64;
  #L1acc3c.  v12:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L1acc40.  call temp:= `getLogger`(v12) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L1acc46.  v12:= temp @kind object;
  #L1acc48.  v13:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1acc4c.  call temp:= `isLoggable`(v12, v13) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1acc52.  v12:= temp;
  #L1acc54.  if v12 == 0 then goto L1acc62;
  #L1acc58.  v12:= "already scheduled" @kind object;
  #L1acc5c.  call `access$log`(v11, v10, v12) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L1acc62.  return v6;
  #L1acc64.  v7:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acc68.  call temp:= `remove`(v7, v4) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1acc6e.  call `setNextExecuteNanoTime$okhttp`(v11, v2) @signature `Lokhttp3/internal/concurrent/Task;.setNextExecuteNanoTime$okhttp:(J)V` @kind virtual;
  #L1acc74.  v4:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L1acc78.  call temp:= `getLogger`(v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L1acc7e.  v4:= temp @kind object;
  #L1acc80.  v7:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1acc84.  call temp:= `isLoggable`(v4, v7) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1acc8a.  v4:= temp;
  #L1acc8c.  if v4 == 0 then goto L1accf4;
  #L1acc90.  if v14 == 0 then goto L1accc2;
  #L1acc94.  v14:= new `java.lang.StringBuilder`;
  #L1acc98.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1acc9e.  v4:= "run again after " @kind object;
  #L1acca2.  call temp:= `append`(v14, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1acca8.  v2:= v2 - v0 @kind long;
  #L1accaa.  call temp:= `formatDuration`(v2) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.formatDuration:(J)Ljava/lang/String;` @kind static;
  #L1accb0.  v2:= temp @kind object;
  #L1accb2.  call temp:= `append`(v14, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1accb8.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1accbe.  v14:= temp @kind object;
  #L1accc0.  goto L1accee;
  #L1accc2.  v14:= new `java.lang.StringBuilder`;
  #L1accc6.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1acccc.  v4:= "scheduled after " @kind object;
  #L1accd0.  call temp:= `append`(v14, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1accd6.  v2:= v2 - v0 @kind long;
  #L1accd8.  call temp:= `formatDuration`(v2) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.formatDuration:(J)Ljava/lang/String;` @kind static;
  #L1accde.  v2:= temp @kind object;
  #L1acce0.  call temp:= `append`(v14, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1acce6.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1accec.  v14:= temp @kind object;
  #L1accee.  call `access$log`(v11, v10, v14) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L1accf4.  v14:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1accf8.  call temp:= `iterator`(v14) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1accfe.  v14:= temp @kind object;
  #L1acd00.  v2:= 0I;
  #L1acd02.  call temp:= `hasNext`(v14) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1acd08.  v3:= temp;
  #L1acd0a.  v4:= 1I;
  #L1acd0c.  if v3 == 0 then goto L1acd40;
  #L1acd10.  call temp:= `next`(v14) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1acd16.  v3:= temp @kind object;
  #L1acd18.  v3:= (`okhttp3.internal.concurrent.Task`) v3 @kind object;
  #L1acd1c.  call temp:= `getNextExecuteNanoTime$okhttp`(v3) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @kind virtual;
  #L1acd22.  v7:= temp @kind wide;
  #L1acd24.  v7:= v7 - v0 @kind long;
  #L1acd26.  v3:= lcmp(v7, v12);
  #L1acd2a.  if v3 <= 0 then goto L1acd32;
  #L1acd2e.  v3:= 1I;
  #L1acd30.  goto L1acd34;
  #L1acd32.  v3:= 0I;
  #L1acd34.  if v3 == 0 then goto L1acd3a;
  #L1acd38.  goto L1acd42;
  #L1acd3a.  v2:= v2 + 1;
  #L1acd3e.  goto L1acd02;
  #L1acd40.  v2:= -1I;
  #L1acd42.  if v2 != v5 then goto L1acd52;
  #L1acd46.  v12:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acd4a.  call temp:= `size`(v12) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1acd50.  v2:= temp;
  #L1acd52.  v12:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1acd56.  call `add`(v12, v2, v11) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L1acd5c.  if v2 != 0 then goto L1acd62;
  #L1acd60.  v6:= 1I;
  #L1acd62.  return v6;
}
procedure `void` `setActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind this, `okhttp3.internal.concurrent.Task` v1 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setActiveTask$okhttp:(Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1ad218.  v0.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` := v1 @kind object;
  #L1ad21c.  return @kind void;
}
procedure `void` `setCancelActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setCancelActiveTask$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1ad230.  v0.`okhttp3.internal.concurrent.TaskQueue.d` @type ^`boolean` := v1 @kind boolean;
  #L1ad234.  return @kind void;
}
procedure `void` `setShutdown$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setShutdown$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1ad248.  v0.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` := v1 @kind boolean;
  #L1ad24c.  return @kind void;
}
procedure `void` `shutdown`(`okhttp3.internal.concurrent.TaskQueue` v4 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.shutdown:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad260.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1ad264.  if v0 == 0 then goto L1ad2ce;
  #L1ad268.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1ad26e.  v0:= temp;
  #L1ad270.  if v0 != 0 then goto L1ad276;
  #L1ad274.  goto L1ad2ce;
  #L1ad276.  v0:= new `java.lang.AssertionError`;
  #L1ad27a.  v1:= new `java.lang.StringBuilder`;
  #L1ad27e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad284.  v2:= "Thread " @kind object;
  #L1ad288.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad28e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1ad294.  v2:= temp @kind object;
  #L1ad296.  v3:= "Thread.currentThread()" @kind object;
  #L1ad29a.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ad2a0.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ad2a6.  v2:= temp @kind object;
  #L1ad2a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad2ae.  v2:= " MUST NOT hold lock on " @kind object;
  #L1ad2b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad2b8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad2be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad2c4.  v1:= temp @kind object;
  #L1ad2c6.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ad2cc.  throw v0;
  #L1ad2ce.  v0:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1ad2d2.  @monitorenter v0
  #L1ad2d4.  v1:= 1I;
  #L1ad2d6.  v4.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` := v1 @kind boolean;
  #L1ad2da.  call temp:= `cancelAllAndDecide$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L1ad2e0.  v1:= temp;
  #L1ad2e2.  if v1 == 0 then goto L1ad2f0;
  #L1ad2e6.  v1:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1ad2ea.  call `kickCoordinator$okhttp`(v1, v4) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L1ad2f0.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1ad2f4.  @monitorexit v0
  #L1ad2f6.  return @kind void;
  #L1ad2f8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ad2fa.  @monitorexit v0
  #L1ad2fc.  throw v1;
  catch `java.lang.Throwable` @[L1ad2d6..L1ad2f4] goto L1ad2f8;
}
procedure `java.lang.String` `toString`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1acd8c.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.f` @type ^`java.lang.String` @kind object;
  #L1acd90.  return v0 @kind object;
}
