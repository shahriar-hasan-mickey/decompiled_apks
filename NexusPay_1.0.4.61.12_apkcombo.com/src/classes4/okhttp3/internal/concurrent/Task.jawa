record `okhttp3.internal.concurrent.Task` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `okhttp3.internal.concurrent.TaskQueue` `okhttp3.internal.concurrent.Task.a` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.concurrent.Task.b` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.internal.concurrent.Task.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.concurrent.Task.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.Task` v1 @kind this, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ade94.  v0:= "name" @kind object;
  #L1ade98.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ade9e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1adea4.  v1.`okhttp3.internal.concurrent.Task.c` @type ^`java.lang.String` := v2 @kind object;
  #L1adea8.  v1.`okhttp3.internal.concurrent.Task.d` @type ^`boolean` := v3 @kind boolean;
  #L1adeac.  v2:= -1L;
  #L1adeb0.  v1.`okhttp3.internal.concurrent.Task.b` @type ^`long` := v2 @kind wide;
  #L1adeb4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.Task` v0 @kind this, `java.lang.String` v1 @kind object, `boolean` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1adec8.  v3:= v3 ^& 2;
  #L1adecc.  if v3 == 0 then goto L1aded2;
  #L1aded0.  v2:= 1I;
  #L1aded2.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L1aded8.  return @kind void;
}
procedure `boolean` `getCancelable`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ade1c.  v0:= v1.`okhttp3.internal.concurrent.Task.d` @type ^`boolean` @kind boolean;
  #L1ade20.  return v0;
}
procedure `java.lang.String` `getName`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ade34.  v0:= v1.`okhttp3.internal.concurrent.Task.c` @type ^`java.lang.String` @kind object;
  #L1ade38.  return v0 @kind object;
}
procedure `long` `getNextExecuteNanoTime$okhttp`(`okhttp3.internal.concurrent.Task` v2 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ade64.  v0:= v2.`okhttp3.internal.concurrent.Task.b` @type ^`long` @kind wide;
  #L1ade68.  return v0 @kind wide;
}
procedure `okhttp3.internal.concurrent.TaskQueue` `getQueue$okhttp`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getQueue$okhttp:()Lokhttp3/internal/concurrent/TaskQueue;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ade7c.  v0:= v1.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1ade80.  return v0 @kind object;
}
procedure `void` `initQueue$okhttp`(`okhttp3.internal.concurrent.Task` v1 @kind this, `okhttp3.internal.concurrent.TaskQueue` v2 @kind object) @signature `Lokhttp3/internal/concurrent/Task;.initQueue$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1adeec.  v0:= "queue" @kind object;
  #L1adef0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1adef6.  v0:= v1.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1adefa.  if v0 != v2 then goto L1adf00;
  #L1adefe.  return @kind void;
  #L1adf00.  if v0 != 0 then goto L1adf08;
  #L1adf04.  v0:= 1I;
  #L1adf06.  goto L1adf0a;
  #L1adf08.  v0:= 0I;
  #L1adf0a.  if v0 == 0 then goto L1adf14;
  #L1adf0e.  v1.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` := v2 @kind object;
  #L1adf12.  return @kind void;
  #L1adf14.  v2:= new `java.lang.IllegalStateException`;
  #L1adf18.  v0:= "task is in multiple queues" @kind object;
  #L1adf1c.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1adf22.  v0:= temp @kind object;
  #L1adf24.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adf2a.  throw v2;
}
procedure `long` `runOnce`() @signature `Lokhttp3/internal/concurrent/Task;.runOnce:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setNextExecuteNanoTime$okhttp`(`okhttp3.internal.concurrent.Task` v0 @kind this, `long` v1 ) @signature `Lokhttp3/internal/concurrent/Task;.setNextExecuteNanoTime$okhttp:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1adf3c.  v0.`okhttp3.internal.concurrent.Task.b` @type ^`long` := v1 @kind wide;
  #L1adf40.  return @kind void;
}
procedure `void` `setQueue$okhttp`(`okhttp3.internal.concurrent.Task` v0 @kind this, `okhttp3.internal.concurrent.TaskQueue` v1 @kind object) @signature `Lokhttp3/internal/concurrent/Task;.setQueue$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1adf54.  v0.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` := v1 @kind object;
  #L1adf58.  return @kind void;
}
procedure `java.lang.String` `toString`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ade4c.  v0:= v1.`okhttp3.internal.concurrent.Task.c` @type ^`java.lang.String` @kind object;
  #L1ade50.  return v0 @kind object;
}
