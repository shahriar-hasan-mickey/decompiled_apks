record `okhttp3.internal.http1.Http1ExchangeCodec$e` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1ExchangeCodec$e.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$e.b` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$e.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$e` v1 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$e;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b5b4c.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$e.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v2 @kind object;
  #L1b5b50.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b5b56.  v0:= new `okio.ForwardingTimeout`;
  #L1b5b5a.  call temp:= `access$getSink$p`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSink$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSink;` @kind static;
  #L1b5b60.  v2:= temp @kind object;
  #L1b5b62.  call temp:= `timeout`(v2) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L1b5b68.  v2:= temp @kind object;
  #L1b5b6a.  call `<init>`(v0, v2) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L1b5b70.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$e.a` @type ^`okio.ForwardingTimeout` := v0 @kind object;
  #L1b5b74.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$e` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b5b88.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$e.b` @type ^`boolean` @kind boolean;
  #L1b5b8c.  if v0 == 0 then goto L1b5b92;
  #L1b5b90.  return @kind void;
  #L1b5b92.  v0:= 1I;
  #L1b5b94.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$e.b` @type ^`boolean` := v0 @kind boolean;
  #L1b5b98.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$e.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b5b9c.  v1:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$e.a` @type ^`okio.ForwardingTimeout` @kind object;
  #L1b5ba0.  call `access$detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$detachTimeout:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokio/ForwardingTimeout;)V` @kind static;
  #L1b5ba6.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$e.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b5baa.  v1:= 3I;
  #L1b5bac.  call `access$setState$p`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$setState$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;I)V` @kind static;
  #L1b5bb2.  return @kind void;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1ExchangeCodec$e` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$e;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5bc4.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$e.b` @type ^`boolean` @kind boolean;
  #L1b5bc8.  if v0 == 0 then goto L1b5bce;
  #L1b5bcc.  return @kind void;
  #L1b5bce.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$e.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b5bd2.  call temp:= `access$getSink$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSink$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSink;` @kind static;
  #L1b5bd8.  v0:= temp @kind object;
  #L1b5bda.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L1b5be0.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1ExchangeCodec$e` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$e;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5b34.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$e.a` @type ^`okio.ForwardingTimeout` @kind object;
  #L1b5b38.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1ExchangeCodec$e` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$e;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1b5bf4.  v0:= "source" @kind object;
  #L1b5bf8.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b5bfe.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$e.b` @type ^`boolean` @kind boolean;
  #L1b5c02.  v0:= v0 ^~ 1;
  #L1b5c06.  if v0 == 0 then goto L1b5c32;
  #L1b5c0a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1b5c10.  v1:= temp @kind wide;
  #L1b5c12.  v3:= 0L;
  #L1b5c16.  v5:= v9 @kind wide;
  #L1b5c18.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1b5c1e.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$e.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b5c22.  call temp:= `access$getSink$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSink$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSink;` @kind static;
  #L1b5c28.  v0:= temp @kind object;
  #L1b5c2a.  call `write`(v0, v8, v9) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1b5c30.  return @kind void;
  #L1b5c32.  v8:= new `java.lang.IllegalStateException`;
  #L1b5c36.  v9:= "closed" @kind object;
  #L1b5c3a.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5c40.  v9:= temp @kind object;
  #L1b5c42.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5c48.  throw v8;
}
