record `okhttp3.internal.http1.Http1ExchangeCodec$f` @kind class @AccessFlag FINAL extends `okhttp3.internal.http1.Http1ExchangeCodec$a` @kind class {
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$f.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$f` v0 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$f;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b5d18.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L1b5d1e.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$f` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5d30.  call temp:= `a`(v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L1b5d36.  v0:= temp;
  #L1b5d38.  if v0 == 0 then goto L1b5d3e;
  #L1b5d3c.  return @kind void;
  #L1b5d3e.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$f.d` @type ^`boolean` @kind boolean;
  #L1b5d42.  if v0 != 0 then goto L1b5d4c;
  #L1b5d46.  call `b`(v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b5d4c.  v0:= 1I;
  #L1b5d4e.  call `c`(v1, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.c:(Z)V` @kind virtual;
  #L1b5d54.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$f` v4 @kind this, `okio.Buffer` v5 @kind object, `long` v6 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$f;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b5c5c.  v0:= "sink" @kind object;
  #L1b5c60.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b5c66.  v0:= 1I;
  #L1b5c68.  v1:= 0L;
  #L1b5c6c.  v3:= lcmp(v6, v1);
  #L1b5c70.  if v3 < 0 then goto L1b5c78;
  #L1b5c74.  v1:= 1I;
  #L1b5c76.  goto L1b5c7a;
  #L1b5c78.  v1:= 0I;
  #L1b5c7a.  if v1 == 0 then goto L1b5cd0;
  #L1b5c7e.  call temp:= `a`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L1b5c84.  v1:= temp;
  #L1b5c86.  v1:= v1 ^~ v0 @kind int;
  #L1b5c88.  if v1 == 0 then goto L1b5cb8;
  #L1b5c8c.  v1:= v4.`okhttp3.internal.http1.Http1ExchangeCodec$f.d` @type ^`boolean` @kind boolean;
  #L1b5c90.  v2:= -1L;
  #L1b5c94.  if v1 == 0 then goto L1b5c9a;
  #L1b5c98.  return v2 @kind wide;
  #L1b5c9a.  call temp:= `read`(v4, v5, v6) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.read:(Lokio/Buffer;J)J` @kind super;
  #L1b5ca0.  v5:= temp @kind wide;
  #L1b5ca2.  v7:= lcmp(v5, v2);
  #L1b5ca6.  if v7 != 0 then goto L1b5cb6;
  #L1b5caa.  v4.`okhttp3.internal.http1.Http1ExchangeCodec$f.d` @type ^`boolean` := v0 @kind boolean;
  #L1b5cae.  call `b`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b5cb4.  return v2 @kind wide;
  #L1b5cb6.  return v5 @kind wide;
  #L1b5cb8.  v5:= new `java.lang.IllegalStateException`;
  #L1b5cbc.  v6:= "closed" @kind object;
  #L1b5cc0.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5cc6.  v6:= temp @kind object;
  #L1b5cc8.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5cce.  throw v5;
  #L1b5cd0.  v5:= new `java.lang.StringBuilder`;
  #L1b5cd4.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b5cda.  v0:= "byteCount < 0: " @kind object;
  #L1b5cde.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5ce4.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5cea.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5cf0.  v5:= temp @kind object;
  #L1b5cf2.  v6:= new `java.lang.IllegalArgumentException`;
  #L1b5cf6.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5cfc.  v5:= temp @kind object;
  #L1b5cfe.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5d04.  throw v6;
}
