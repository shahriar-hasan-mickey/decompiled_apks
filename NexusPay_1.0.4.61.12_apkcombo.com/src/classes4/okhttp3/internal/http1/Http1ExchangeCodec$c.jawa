record `okhttp3.internal.http1.Http1ExchangeCodec$c` @kind class @AccessFlag FINAL extends `okhttp3.internal.http1.Http1ExchangeCodec$a` @kind class {
  `long` `okhttp3.internal.http1.Http1ExchangeCodec$c.d` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$c.e` @AccessFlag PRIVATE;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1ExchangeCodec$c.f` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$c.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v1 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind object, `okhttp3.HttpUrl` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/HttpUrl;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b573c.  v0:= "url" @kind object;
  #L1b5740.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b5746.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v2 @kind object;
  #L1b574a.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L1b5750.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.f` @type ^`okhttp3.HttpUrl` := v3 @kind object;
  #L1b5754.  v2:= -1L;
  #L1b5758.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` := v2 @kind wide;
  #L1b575c.  v2:= 1I;
  #L1b575e.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` := v2 @kind boolean;
  #L1b5762.  return @kind void;
}
procedure `void` `d`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v7 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1b57d0.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L1b57d4.  v2:= -1L;
  #L1b57d8.  v4:= lcmp(v0, v2);
  #L1b57dc.  if v4 == 0 then goto L1b57f2;
  #L1b57e0.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b57e4.  call temp:= `access$getSource$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L1b57ea.  v0:= temp @kind object;
  #L1b57ec.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L1b57f2.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b57f6.  call temp:= `access$getSource$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L1b57fc.  v0:= temp @kind object;
  #L1b57fe.  call temp:= `readHexadecimalUnsignedLong`(v0) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L1b5804.  v0:= temp @kind wide;
  #L1b5806.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` := v0 @kind wide;
  #L1b580a.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b580e.  call temp:= `access$getSource$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L1b5814.  v0:= temp @kind object;
  #L1b5816.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L1b581c.  v0:= temp @kind object;
  #L1b581e.  if v0 == 0 then goto L1b5922;
  #L1b5822.  call temp:= `trim`(v0) @signature `Lkotlin/text/StringsKt;.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L1b5828.  v0:= temp @kind object;
  #L1b582a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5830.  v0:= temp @kind object;
  #L1b5832.  v1:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L1b5836.  v3:= 0L;
  #L1b583a.  v5:= lcmp(v1, v3);
  #L1b583e.  if v5 < 0 then goto L1b58d6;
  #L1b5842.  call temp:= `length`(v0) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L1b5848.  v1:= temp;
  #L1b584a.  v2:= 0I;
  #L1b584c.  if v1 <= 0 then goto L1b5854;
  #L1b5850.  v1:= 1I;
  #L1b5852.  goto L1b5856;
  #L1b5854.  v1:= 0I;
  #L1b5856.  if v1 == 0 then goto L1b586e;
  #L1b585a.  v1:= ";" @kind object;
  #L1b585e.  v5:= 2I;
  #L1b5860.  v6:= 0I;
  #L1b5862.  call temp:= `startsWith$default`(v0, v1, v2, v5, v6) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @kind static;
  #L1b5868.  v1:= temp;
  #L1b586a.  if v1 == 0 then goto L1b58d6;
  #L1b586e.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L1b5872.  v5:= lcmp(v0, v3);
  #L1b5876.  if v5 != 0 then goto L1b58d4;
  #L1b587a.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` := v2 @kind boolean;
  #L1b587e.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b5882.  call temp:= `access$getHeadersReader$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getHeadersReader$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/internal/http1/HeadersReader;` @kind static;
  #L1b5888.  v1:= temp @kind object;
  #L1b588a.  call temp:= `readHeaders`(v1) @signature `Lokhttp3/internal/http1/HeadersReader;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L1b5890.  v1:= temp @kind object;
  #L1b5892.  call `access$setTrailers$p`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$setTrailers$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/Headers;)V` @kind static;
  #L1b5898.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b589c.  call temp:= `access$getClient$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getClient$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/OkHttpClient;` @kind static;
  #L1b58a2.  v0:= temp @kind object;
  #L1b58a4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b58aa.  call temp:= `cookieJar`(v0) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L1b58b0.  v0:= temp @kind object;
  #L1b58b2.  v1:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.f` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b58b6.  v2:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b58ba.  call temp:= `access$getTrailers$p`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getTrailers$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/Headers;` @kind static;
  #L1b58c0.  v2:= temp @kind object;
  #L1b58c2.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1b58c8.  call `receiveHeaders`(v0, v1, v2) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L1b58ce.  call `b`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b58d4.  return @kind void;
  #L1b58d6.  v1:= new `java.net.ProtocolException`;
  #L1b58da.  v2:= new `java.lang.StringBuilder`;
  #L1b58de.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b58e4.  v3:= "expected chunk size and optional extensions" @kind object;
  #L1b58e8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b58ee.  v3:= " but was \"" @kind object;
  #L1b58f2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b58f8.  v3:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L1b58fc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5902.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5908.  v0:= 34I;
  #L1b590c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5912.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5918.  v0:= temp @kind object;
  #L1b591a.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5920.  throw v1;
  #L1b5922.  v0:= new `java.lang.NullPointerException`;
  #L1b5926.  v1:= "null cannot be cast to non-null type kotlin.CharSequence" @kind object;
  #L1b592a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5930.  throw v0;
  #L1b5932.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L1b5934.  v1:= new `java.net.ProtocolException`;
  #L1b5938.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1b593e.  v0:= temp @kind object;
  #L1b5940.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5946.  throw v1;
  catch `java.lang.NumberFormatException` @[L1b57f2..L1b586a] goto L1b5932;
  catch `java.lang.NumberFormatException` @[L1b58d6..L1b5932] goto L1b5932;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b5774.  call temp:= `a`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L1b577a.  v0:= temp;
  #L1b577c.  if v0 == 0 then goto L1b5782;
  #L1b5780.  return @kind void;
  #L1b5782.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` @kind boolean;
  #L1b5786.  if v0 == 0 then goto L1b57b6;
  #L1b578a.  v0:= 100I;
  #L1b578e.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1b5792.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L1b5798.  v0:= temp;
  #L1b579a.  if v0 != 0 then goto L1b57b6;
  #L1b579e.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b57a2.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L1b57a8.  v0:= temp @kind object;
  #L1b57aa.  call `noNewExchanges$okhttp`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L1b57b0.  call `b`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b57b6.  v0:= 1I;
  #L1b57b8.  call `c`(v2, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.c:(Z)V` @kind virtual;
  #L1b57be.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1b562c.  v0:= "sink" @kind object;
  #L1b5630.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b5636.  v0:= 1I;
  #L1b5638.  v1:= 0L;
  #L1b563c.  v3:= lcmp(v9, v1);
  #L1b5640.  if v3 < 0 then goto L1b5648;
  #L1b5644.  v3:= 1I;
  #L1b5646.  goto L1b564a;
  #L1b5648.  v3:= 0I;
  #L1b564a.  if v3 == 0 then goto L1b56f6;
  #L1b564e.  call temp:= `a`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L1b5654.  v3:= temp;
  #L1b5656.  v0:= v0 ^~ v3 @kind int;
  #L1b5658.  if v0 == 0 then goto L1b56de;
  #L1b565c.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` @kind boolean;
  #L1b5660.  v3:= -1L;
  #L1b5664.  if v0 != 0 then goto L1b566a;
  #L1b5668.  return v3 @kind wide;
  #L1b566a.  v5:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L1b566e.  v0:= lcmp(v5, v1);
  #L1b5672.  if v0 == 0 then goto L1b567e;
  #L1b5676.  v0:= lcmp(v5, v3);
  #L1b567a.  if v0 != 0 then goto L1b568e;
  #L1b567e.  call `d`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.d:()V` @kind direct;
  #L1b5684.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` @kind boolean;
  #L1b5688.  if v0 != 0 then goto L1b568e;
  #L1b568c.  return v3 @kind wide;
  #L1b568e.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L1b5692.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1b5698.  v9:= temp @kind wide;
  #L1b569a.  call temp:= `read`(v7, v8, v9) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.read:(Lokio/Buffer;J)J` @kind super;
  #L1b56a0.  v8:= temp @kind wide;
  #L1b56a2.  v10:= lcmp(v8, v3);
  #L1b56a6.  if v10 == 0 then goto L1b56b6;
  #L1b56aa.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L1b56ae.  v0:= v0 - v8 @kind long;
  #L1b56b0.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` := v0 @kind wide;
  #L1b56b4.  return v8 @kind wide;
  #L1b56b6.  v8:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b56ba.  call temp:= `getConnection`(v8) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L1b56c0.  v8:= temp @kind object;
  #L1b56c2.  call `noNewExchanges$okhttp`(v8) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L1b56c8.  v8:= new `java.net.ProtocolException`;
  #L1b56cc.  v9:= "unexpected end of stream" @kind object;
  #L1b56d0.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b56d6.  call `b`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b56dc.  throw v8;
  #L1b56de.  v8:= new `java.lang.IllegalStateException`;
  #L1b56e2.  v9:= "closed" @kind object;
  #L1b56e6.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b56ec.  v9:= temp @kind object;
  #L1b56ee.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b56f4.  throw v8;
  #L1b56f6.  v8:= new `java.lang.StringBuilder`;
  #L1b56fa.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b5700.  v0:= "byteCount < 0: " @kind object;
  #L1b5704.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b570a.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5710.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5716.  v8:= temp @kind object;
  #L1b5718.  v9:= new `java.lang.IllegalArgumentException`;
  #L1b571c.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5722.  v8:= temp @kind object;
  #L1b5724.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b572a.  throw v9;
}
