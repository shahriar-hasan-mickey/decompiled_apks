record `okhttp3.internal.http1.Http1ExchangeCodec$d` @kind class @AccessFlag FINAL extends `okhttp3.internal.http1.Http1ExchangeCodec$a` @kind class {
  `long` `okhttp3.internal.http1.Http1ExchangeCodec$d.d` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$d.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$d` v2 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$d;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b5a9c.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$d.e` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v3 @kind object;
  #L1b5aa0.  call `<init>`(v2, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L1b5aa6.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$d.d` @type ^`long` := v4 @kind wide;
  #L1b5aaa.  v0:= 0L;
  #L1b5aae.  v3:= lcmp(v4, v0);
  #L1b5ab2.  if v3 != 0 then goto L1b5abc;
  #L1b5ab6.  call `b`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b5abc.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$d` v5 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b5ad0.  call temp:= `a`(v5) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L1b5ad6.  v0:= temp;
  #L1b5ad8.  if v0 == 0 then goto L1b5ade;
  #L1b5adc.  return @kind void;
  #L1b5ade.  v0:= v5.`okhttp3.internal.http1.Http1ExchangeCodec$d.d` @type ^`long` @kind wide;
  #L1b5ae2.  v2:= 0L;
  #L1b5ae6.  v4:= lcmp(v0, v2);
  #L1b5aea.  if v4 == 0 then goto L1b5b1a;
  #L1b5aee.  v0:= 100I;
  #L1b5af2.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1b5af6.  call temp:= `discard`(v5, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L1b5afc.  v0:= temp;
  #L1b5afe.  if v0 != 0 then goto L1b5b1a;
  #L1b5b02.  v0:= v5.`okhttp3.internal.http1.Http1ExchangeCodec$d.e` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b5b06.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L1b5b0c.  v0:= temp @kind object;
  #L1b5b0e.  call `noNewExchanges$okhttp`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L1b5b14.  call `b`(v5) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b5b1a.  v0:= 1I;
  #L1b5b1c.  call `c`(v5, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.c:(Z)V` @kind virtual;
  #L1b5b22.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$d` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$d;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1b59a0.  v0:= "sink" @kind object;
  #L1b59a4.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1b59aa.  v0:= 1I;
  #L1b59ac.  v1:= 0L;
  #L1b59b0.  v3:= lcmp(v9, v1);
  #L1b59b4.  if v3 < 0 then goto L1b59bc;
  #L1b59b8.  v3:= 1I;
  #L1b59ba.  goto L1b59be;
  #L1b59bc.  v3:= 0I;
  #L1b59be.  if v3 == 0 then goto L1b5a54;
  #L1b59c2.  call temp:= `a`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L1b59c8.  v3:= temp;
  #L1b59ca.  v0:= v0 ^~ v3 @kind int;
  #L1b59cc.  if v0 == 0 then goto L1b5a3c;
  #L1b59d0.  v3:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$d.d` @type ^`long` @kind wide;
  #L1b59d4.  v5:= -1L;
  #L1b59d8.  v0:= lcmp(v3, v1);
  #L1b59dc.  if v0 != 0 then goto L1b59e2;
  #L1b59e0.  return v5 @kind wide;
  #L1b59e2.  call temp:= `min`(v3, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1b59e8.  v9:= temp @kind wide;
  #L1b59ea.  call temp:= `read`(v7, v8, v9) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.read:(Lokio/Buffer;J)J` @kind super;
  #L1b59f0.  v8:= temp @kind wide;
  #L1b59f2.  v10:= lcmp(v8, v5);
  #L1b59f6.  if v10 == 0 then goto L1b5a14;
  #L1b59fa.  v3:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$d.d` @type ^`long` @kind wide;
  #L1b59fe.  v3:= v3 - v8 @kind long;
  #L1b5a00.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$d.d` @type ^`long` := v3 @kind wide;
  #L1b5a04.  v10:= lcmp(v3, v1);
  #L1b5a08.  if v10 != 0 then goto L1b5a12;
  #L1b5a0c.  call `b`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b5a12.  return v8 @kind wide;
  #L1b5a14.  v8:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$d.e` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L1b5a18.  call temp:= `getConnection`(v8) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L1b5a1e.  v8:= temp @kind object;
  #L1b5a20.  call `noNewExchanges$okhttp`(v8) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L1b5a26.  v8:= new `java.net.ProtocolException`;
  #L1b5a2a.  v9:= "unexpected end of stream" @kind object;
  #L1b5a2e.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5a34.  call `b`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L1b5a3a.  throw v8;
  #L1b5a3c.  v8:= new `java.lang.IllegalStateException`;
  #L1b5a40.  v9:= "closed" @kind object;
  #L1b5a44.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5a4a.  v9:= temp @kind object;
  #L1b5a4c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5a52.  throw v8;
  #L1b5a54.  v8:= new `java.lang.StringBuilder`;
  #L1b5a58.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b5a5e.  v0:= "byteCount < 0: " @kind object;
  #L1b5a62.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5a68.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b5a6e.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5a74.  v8:= temp @kind object;
  #L1b5a76.  v9:= new `java.lang.IllegalArgumentException`;
  #L1b5a7a.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b5a80.  v8:= temp @kind object;
  #L1b5a82.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b5a88.  throw v9;
}
