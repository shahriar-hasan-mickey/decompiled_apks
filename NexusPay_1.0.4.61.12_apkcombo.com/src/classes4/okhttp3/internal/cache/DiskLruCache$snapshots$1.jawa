record `okhttp3.internal.cache.DiskLruCache$snapshots$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMutableIterator` @kind interface {
  `java.util.Iterator` `okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.cache.DiskLruCache$Snapshot` `okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @AccessFlag PRIVATE;
  `okhttp3.internal.cache.DiskLruCache$Snapshot` `okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @AccessFlag PRIVATE;
  `okhttp3.internal.cache.DiskLruCache` `okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v1 @kind this, `okhttp3.internal.cache.DiskLruCache` v2 @kind object) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.<init>:(Lokhttp3/internal/cache/DiskLruCache;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1a9ff8.  v1.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` := v2 @kind object;
  #L1a9ffc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aa002.  v0:= new `java.util.ArrayList`;
  #L1aa006.  call temp:= `getLruEntries$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.getLruEntries$okhttp:()Ljava/util/LinkedHashMap;` @kind virtual;
  #L1aa00c.  v2:= temp @kind object;
  #L1aa00e.  call temp:= `values`(v2) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L1aa014.  v2:= temp @kind object;
  #L1aa016.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1aa01c.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1aa022.  v2:= temp @kind object;
  #L1aa024.  v0:= "ArrayList(lruEntries.values).iterator()" @kind object;
  #L1aa028.  call `checkNotNullExpressionValue`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1aa02e.  v1.`okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @type ^`java.util.Iterator` := v2 @kind object;
  #L1aa032.  return @kind void;
}
procedure `boolean` `hasNext`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v4 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a9f00.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` @kind object;
  #L1a9f04.  v1:= 1I;
  #L1a9f06.  if v0 == 0 then goto L1a9f0c;
  #L1a9f0a.  return v1;
  #L1a9f0c.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L1a9f10.  @monitorenter v0
  #L1a9f12.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L1a9f16.  call temp:= `getClosed$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.getClosed$okhttp:()Z` @kind virtual;
  #L1a9f1c.  v2:= temp;
  #L1a9f1e.  v3:= 0I;
  #L1a9f20.  if v2 == 0 then goto L1a9f28;
  #L1a9f24.  @monitorexit v0
  #L1a9f26.  return v3;
  #L1a9f28.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @type ^`java.util.Iterator` @kind object;
  #L1a9f2c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1a9f32.  v2:= temp;
  #L1a9f34.  if v2 == 0 then goto L1a9f60;
  #L1a9f38.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @type ^`java.util.Iterator` @kind object;
  #L1a9f3c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1a9f42.  v2:= temp @kind object;
  #L1a9f44.  v2:= (`okhttp3.internal.cache.DiskLruCache$Entry`) v2 @kind object;
  #L1a9f48.  if v2 == 0 then goto L1a9f28;
  #L1a9f4c.  call temp:= `snapshot$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.snapshot$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Snapshot;` @kind virtual;
  #L1a9f52.  v2:= temp @kind object;
  #L1a9f54.  if v2 == 0 then goto L1a9f28;
  #L1a9f58.  v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v2 @kind object;
  #L1a9f5c.  @monitorexit v0
  #L1a9f5e.  return v1;
  #L1a9f60.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1a9f64.  @monitorexit v0
  #L1a9f66.  return v3;
  #L1a9f68.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a9f6a.  @monitorexit v0
  #L1a9f6c.  throw v1;
  catch `java.lang.Throwable` @[L1a9f12..L1a9f1e] goto L1a9f68;
  catch `java.lang.Throwable` @[L1a9f28..L1a9f5c] goto L1a9f68;
  catch `java.lang.Throwable` @[L1a9f60..L1a9f64] goto L1a9f68;
}
procedure `java.lang.Object` `next`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v1 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1a9f9c.  call temp:= `next`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.next:()Lokhttp3/internal/cache/DiskLruCache$Snapshot;` @kind virtual;
  #L1a9fa2.  v0:= temp @kind object;
  #L1a9fa4.  return v0 @kind object;
}
procedure `okhttp3.internal.cache.DiskLruCache$Snapshot` `next`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v2 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.next:()Lokhttp3/internal/cache/DiskLruCache$Snapshot;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a9fb8.  call temp:= `hasNext`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.hasNext:()Z` @kind virtual;
  #L1a9fbe.  v0:= temp;
  #L1a9fc0.  if v0 == 0 then goto L1a9fda;
  #L1a9fc4.  v0:= v2.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` @kind object;
  #L1a9fc8.  v2.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v0 @kind object;
  #L1a9fcc.  v1:= 0I;
  #L1a9fce.  v2.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v1 @kind object;
  #L1a9fd2.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1a9fd8.  return v0 @kind object;
  #L1a9fda.  v0:= new `java.util.NoSuchElementException`;
  #L1a9fde.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1a9fe4.  throw v0;
}
procedure `void` `remove`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v3 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1aa044.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` @kind object;
  #L1aa048.  if v0 == 0 then goto L1aa070;
  #L1aa04c.  v1:= 0I;
  #L1aa04e.  v2:= v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L1aa052.  call temp:= `key`(v0) @signature `Lokhttp3/internal/cache/DiskLruCache$Snapshot;.key:()Ljava/lang/String;` @kind virtual;
  #L1aa058.  v0:= temp @kind object;
  #L1aa05a.  call temp:= `remove`(v2, v0) @signature `Lokhttp3/internal/cache/DiskLruCache;.remove:(Ljava/lang/String;)Z` @kind virtual;
  #L1aa060.  goto L1aa06a;
  #L1aa062.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1aa064.  v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v1 @kind object;
  #L1aa068.  throw v0;
  #L1aa06a.  v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v1 @kind object;
  #L1aa06e.  return @kind void;
  #L1aa070.  v0:= new `java.lang.IllegalStateException`;
  #L1aa074.  v1:= "remove() before next()" @kind object;
  #L1aa078.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1aa07e.  v1:= temp @kind object;
  #L1aa080.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aa086.  throw v0;
  catch `java.io.IOException` @[L1aa04e..L1aa060] goto L1aa06a;
  catch `java.lang.Throwable` @[L1aa04e..L1aa060] goto L1aa062;
}
