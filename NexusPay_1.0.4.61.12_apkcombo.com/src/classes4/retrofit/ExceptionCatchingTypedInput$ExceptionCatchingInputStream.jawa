record `retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @AccessFlag PRIVATE_FINAL;
  `java.io.IOException` `retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.<init>:(Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48ba70.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L48ba76.  v0.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` := v1 @kind object;
  #L48ba7a.  return @kind void;
}
procedure `java.io.IOException` `access$000`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v0 @kind object) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.access$000:(Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;)Ljava/io/IOException;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L48ba20.  v0:= v0.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` @kind object;
  #L48ba24.  return v0 @kind object;
}
procedure `int` `available`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b940.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48b944.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L48b94a.  v0:= temp;
  #L48b94c.  return v0;
  #L48b94e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L48b950.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L48b954.  throw v0;
  catch `java.io.IOException` @[L48b940..L48b94c] goto L48b94e;
}
procedure `void` `close`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ba8c.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48ba90.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L48ba96.  return @kind void;
  #L48ba98.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L48ba9a.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L48ba9e.  throw v0;
  catch `java.io.IOException` @[L48ba8c..L48ba96] goto L48ba98;
}
procedure `void` `mark`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `int` v2 ) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48bac0.  @monitorenter v1
  #L48bac2.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48bac6.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L48bacc.  @monitorexit v1
  #L48bace.  return @kind void;
  #L48bad0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48bad2.  @monitorexit v1
  #L48bad4.  throw v2;
  catch `java.lang.Throwable` @[L48bac2..L48bacc] goto L48bad0;
}
procedure `boolean` `markSupported`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b920.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48b924.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L48b92a.  v0:= temp;
  #L48b92c.  return v0;
}
procedure `int` `read`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b978.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48b97c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L48b982.  v0:= temp;
  #L48b984.  return v0;
  #L48b986.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L48b988.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L48b98c.  throw v0;
  catch `java.io.IOException` @[L48b978..L48b984] goto L48b986;
}
procedure `int` `read`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b9b0.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48b9b4.  call temp:= `read`(v0, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L48b9ba.  v2:= temp;
  #L48b9bc.  return v2;
  #L48b9be.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L48b9c0.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v2 @kind object;
  #L48b9c4.  throw v2;
  catch `java.io.IOException` @[L48b9b0..L48b9bc] goto L48b9be;
}
procedure `int` `read`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b9e8.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48b9ec.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L48b9f2.  v2:= temp;
  #L48b9f4.  return v2;
  #L48b9f6.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L48b9f8.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v2 @kind object;
  #L48b9fc.  throw v2;
  catch `java.io.IOException` @[L48b9e8..L48b9f4] goto L48b9f6;
}
procedure `void` `reset`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48baf4.  @monitorenter v1
  #L48baf6.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48bafa.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L48bb00.  @monitorexit v1
  #L48bb02.  return @kind void;
  #L48bb04.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48bb06.  goto L48bb10;
  #L48bb08.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L48bb0a.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L48bb0e.  throw v0;
  #L48bb10.  @monitorexit v1
  #L48bb12.  throw v0;
  catch `java.io.IOException` @[L48baf6..L48bb00] goto L48bb08;
  catch `java.lang.Throwable` @[L48baf6..L48bb00] goto L48bb04;
  catch `java.lang.Throwable` @[L48bb0a..L48bb10] goto L48bb04;
}
procedure `long` `skip`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `long` v2 ) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ba38.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L48ba3c.  call temp:= `skip`(v0, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L48ba42.  v2:= temp @kind wide;
  #L48ba44.  return v2 @kind wide;
  #L48ba46.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L48ba48.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v2 @kind object;
  #L48ba4c.  throw v2;
  catch `java.io.IOException` @[L48ba38..L48ba44] goto L48ba46;
}
