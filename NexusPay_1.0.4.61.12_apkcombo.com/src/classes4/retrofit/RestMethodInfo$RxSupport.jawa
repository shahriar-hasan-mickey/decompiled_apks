record `retrofit.RestMethodInfo$RxSupport` @kind class @AccessFlag FINAL {
}
procedure `void` `<init>`(`retrofit.RestMethodInfo$RxSupport` v0 @kind this) @signature `Lretrofit/RestMethodInfo$RxSupport;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L48e908.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48e90e.  return @kind void;
}
procedure `java.lang.reflect.Type` `getObservableType`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lretrofit/RestMethodInfo$RxSupport;.getObservableType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e8e8.  v0:= constclass @type ^`rx.Observable` @kind object;
  #L48e8ec.  call temp:= `getSupertype`(v1, v2, v0) @signature `Lretrofit/Types;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L48e8f2.  v1:= temp @kind object;
  #L48e8f4.  return v1 @kind object;
}
procedure `boolean` `isObservable`(`java.lang.Class` v1 @kind object) @signature `Lretrofit/RestMethodInfo$RxSupport;.isObservable:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e8c8.  v0:= constclass @type ^`rx.Observable` @kind object;
  #L48e8cc.  if v1 != v0 then goto L48e8d4;
  #L48e8d0.  v1:= 1I;
  #L48e8d2.  goto L48e8d6;
  #L48e8d4.  v1:= 0I;
  #L48e8d6.  return v1;
}
