record `retrofit.Types$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit.Types$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit.Types$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit.Types$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.Types$ParameterizedTypeImpl` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit/Types$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48fbdc.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48fbe2.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L48fbe6.  v1:= 0I;
  #L48fbe8.  if v0 == 0 then goto L48fc20;
  #L48fbec.  v0:= 1I;
  #L48fbee.  if v5 != 0 then goto L48fbf6;
  #L48fbf2.  v2:= 1I;
  #L48fbf4.  goto L48fbf8;
  #L48fbf6.  v2:= 0I;
  #L48fbf8.  v3:= v6 @kind object;
  #L48fbfa.  v3:= (`java.lang.Class`) v3 @kind object;
  #L48fbfe.  call temp:= `getEnclosingClass`(v3) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L48fc04.  v3:= temp @kind object;
  #L48fc06.  if v3 != 0 then goto L48fc0c;
  #L48fc0a.  goto L48fc0e;
  #L48fc0c.  v0:= 0I;
  #L48fc0e.  if v2 != v0 then goto L48fc14;
  #L48fc12.  goto L48fc20;
  #L48fc14.  v5:= new `java.lang.IllegalArgumentException`;
  #L48fc18.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L48fc1e.  throw v5;
  #L48fc20.  v4.`retrofit.Types$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L48fc24.  v4.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L48fc28.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L48fc2e.  v5:= temp @kind object;
  #L48fc30.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L48fc34.  v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v5 @kind object;
  #L48fc38.  v6:= length @variable v5;
  #L48fc3a.  if v1 >= v6 then goto L48fc56;
  #L48fc3e.  v7:= v5[v1] @kind object;
  #L48fc42.  if v7 == 0 then goto L48fc52;
  #L48fc46.  call `access$000`(v7) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @kind static;
  #L48fc4c.  v1:= v1 + 1;
  #L48fc50.  goto L48fc3a;
  #L48fc52.  v5:= 0I;
  #L48fc54.  throw v5;
  #L48fc56.  return @kind void;
}
procedure `boolean` `equals`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit/Types$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48fa68.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L48fa6c.  if v0 == 0 then goto L48fa84;
  #L48fa70.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L48fa74.  call temp:= `equals`(v1, v2) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L48fa7a.  v2:= temp;
  #L48fa7c.  if v2 == 0 then goto L48fa84;
  #L48fa80.  v2:= 1I;
  #L48fa82.  goto L48fa86;
  #L48fa84.  v2:= 0I;
  #L48fa86.  return v2;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48fbb8.  v0:= v1.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L48fbbc.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L48fbc2.  v0:= temp @kind object;
  #L48fbc4.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L48fbc8.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48fb88.  v0:= v1.`retrofit.Types$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L48fb8c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48fba0.  v0:= v1.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L48fba4.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit.Types$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48fa98.  v0:= v2.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L48fa9c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L48faa2.  v0:= temp;
  #L48faa4.  v1:= v2.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L48faa8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48faae.  v1:= temp;
  #L48fab0.  v0:= v0 ^~ v1 @kind int;
  #L48fab2.  v1:= v2.`retrofit.Types$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L48fab6.  call temp:= `access$100`(v1) @signature `Lretrofit/Types;.access$100:(Ljava/lang/Object;)I` @kind static;
  #L48fabc.  v1:= temp;
  #L48fabe.  v0:= v0 ^~ v1 @kind int;
  #L48fac0.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit.Types$ParameterizedTypeImpl` v4 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48fad4.  v0:= new `java.lang.StringBuilder`;
  #L48fad8.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L48fadc.  v1:= length @variable v1;
  #L48fade.  v2:= 1I;
  #L48fae0.  v1:= v1 + v2 @kind int;
  #L48fae2.  v1:= v1 * 30;
  #L48fae6.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L48faec.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L48faf0.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L48faf6.  v1:= temp @kind object;
  #L48faf8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fafe.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L48fb02.  v1:= length @variable v1;
  #L48fb04.  if v1 != 0 then goto L48fb12;
  #L48fb08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48fb0e.  v0:= temp @kind object;
  #L48fb10.  return v0 @kind object;
  #L48fb12.  v1:= "<" @kind object;
  #L48fb16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fb1c.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L48fb20.  v3:= 0I;
  #L48fb22.  v1:= v1[v3] @kind object;
  #L48fb26.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L48fb2c.  v1:= temp @kind object;
  #L48fb2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fb34.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L48fb38.  v1:= length @variable v1;
  #L48fb3a.  if v2 >= v1 then goto L48fb64;
  #L48fb3e.  v1:= ", " @kind object;
  #L48fb42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fb48.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L48fb4c.  v1:= v1[v2] @kind object;
  #L48fb50.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L48fb56.  v1:= temp @kind object;
  #L48fb58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fb5e.  v2:= v2 + 1;
  #L48fb62.  goto L48fb34;
  #L48fb64.  v1:= ">" @kind object;
  #L48fb68.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fb6e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48fb74.  v0:= temp @kind object;
  #L48fb76.  return v0 @kind object;
}
