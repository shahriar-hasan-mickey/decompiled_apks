record `retrofit.Types$GenericArrayTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.GenericArrayType` @kind interface {
  `java.lang.reflect.Type` `retrofit.Types$GenericArrayTypeImpl.componentType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.Types$GenericArrayTypeImpl` v0 @kind this, `java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit/Types$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48fa4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48fa52.  v0.`retrofit.Types$GenericArrayTypeImpl.componentType` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L48fa56.  return @kind void;
}
procedure `boolean` `equals`(`retrofit.Types$GenericArrayTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit/Types$GenericArrayTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f9a4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L48f9a8.  if v0 == 0 then goto L48f9c0;
  #L48f9ac.  v2:= (`java.lang.reflect.GenericArrayType`) v2 @kind object;
  #L48f9b0.  call temp:= `equals`(v1, v2) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L48f9b6.  v2:= temp;
  #L48f9b8.  if v2 == 0 then goto L48f9c0;
  #L48f9bc.  v2:= 1I;
  #L48f9be.  goto L48f9c2;
  #L48f9c0.  v2:= 0I;
  #L48f9c2.  return v2;
}
procedure `java.lang.reflect.Type` `getGenericComponentType`(`retrofit.Types$GenericArrayTypeImpl` v1 @kind this) @signature `Lretrofit/Types$GenericArrayTypeImpl;.getGenericComponentType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48fa34.  v0:= v1.`retrofit.Types$GenericArrayTypeImpl.componentType` @type ^`java.lang.reflect.Type` @kind object;
  #L48fa38.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit.Types$GenericArrayTypeImpl` v1 @kind this) @signature `Lretrofit/Types$GenericArrayTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f9d4.  v0:= v1.`retrofit.Types$GenericArrayTypeImpl.componentType` @type ^`java.lang.reflect.Type` @kind object;
  #L48f9d8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48f9de.  v0:= temp;
  #L48f9e0.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit.Types$GenericArrayTypeImpl` v2 @kind this) @signature `Lretrofit/Types$GenericArrayTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f9f4.  v0:= new `java.lang.StringBuilder`;
  #L48f9f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48f9fe.  v1:= v2.`retrofit.Types$GenericArrayTypeImpl.componentType` @type ^`java.lang.reflect.Type` @kind object;
  #L48fa02.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L48fa08.  v1:= temp @kind object;
  #L48fa0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fa10.  v1:= "[]" @kind object;
  #L48fa14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fa1a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48fa20.  v0:= temp @kind object;
  #L48fa22.  return v0 @kind object;
}
