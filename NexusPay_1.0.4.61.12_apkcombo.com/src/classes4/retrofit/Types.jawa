record `retrofit.Types` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit.Types.EMPTY_TYPE_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit/Types;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49050c.  v0:= 0I;
  #L49050e.  v0:= new `java.lang.reflect.Type`[v0];
  #L490512.  `@@retrofit.Types.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L490516.  return @kind void;
}
procedure `void` `<init>`(`retrofit.Types` v0 @kind this) @signature `Lretrofit/Types;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L490528.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49052e.  return @kind void;
}
procedure `void` `access$000`(`java.lang.reflect.Type` v0 @kind object) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L490540.  call `checkNotPrimitive`(v0) @signature `Lretrofit/Types;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L490546.  return @kind void;
}
procedure `int` `access$100`(`java.lang.Object` v0 @kind object) @signature `Lretrofit/Types;.access$100:(Ljava/lang/Object;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L490008.  call temp:= `hashCodeOrZero`(v0) @signature `Lretrofit/Types;.hashCodeOrZero:(Ljava/lang/Object;)I` @kind static;
  #L49000e.  v0:= temp;
  #L490010.  return v0;
}
procedure `java.lang.reflect.Type`[] `access$200`() @signature `Lretrofit/Types;.access$200:()[Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L4904f4.  v0:= `@@retrofit.Types.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L4904f8.  return v0 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit/Types;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L490558.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L49055c.  if v0 == 0 then goto L49057e;
  #L490560.  v1:= (`java.lang.Class`) v1 @kind object;
  #L490564.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L49056a.  v1:= temp;
  #L49056c.  if v1 != 0 then goto L490572;
  #L490570.  goto L49057e;
  #L490572.  v1:= new `java.lang.IllegalArgumentException`;
  #L490576.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L49057c.  throw v1;
  #L49057e.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lretrofit/Types;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L490084.  call temp:= `getGenericDeclaration`(v1) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L49008a.  v1:= temp @kind object;
  #L49008c.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L490090.  if v0 == 0 then goto L49009a;
  #L490094.  v1:= (`java.lang.Class`) v1 @kind object;
  #L490098.  goto L49009c;
  #L49009a.  v1:= 0I;
  #L49009c.  return v1 @kind object;
}
procedure `boolean` `equal`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lretrofit/Types;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE_STATIC {
    temp;

  #L48fe58.  if v0 == v1 then goto L48fe72;
  #L48fe5c.  if v0 == 0 then goto L48fe6e;
  #L48fe60.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48fe66.  v0:= temp;
  #L48fe68.  if v0 == 0 then goto L48fe6e;
  #L48fe6c.  goto L48fe72;
  #L48fe6e.  v0:= 0I;
  #L48fe70.  goto L48fe74;
  #L48fe72.  v0:= 1I;
  #L48fe74.  return v0;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48fe88.  v0:= 1I;
  #L48fe8a.  if v4 != v5 then goto L48fe90;
  #L48fe8e.  return v0;
  #L48fe90.  v1:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L48fe94.  if v1 == 0 then goto L48fea2;
  #L48fe98.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48fe9e.  v4:= temp;
  #L48fea0.  return v4;
  #L48fea2.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L48fea6.  v2:= 0I;
  #L48fea8.  if v1 == 0 then goto L48ff18;
  #L48feac.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L48feb0.  if v1 != 0 then goto L48feb6;
  #L48feb4.  return v2;
  #L48feb6.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L48feba.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L48febe.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L48fec4.  v1:= temp @kind object;
  #L48fec6.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L48fecc.  v3:= temp @kind object;
  #L48fece.  call temp:= `equal`(v1, v3) @signature `Lretrofit/Types;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L48fed4.  v1:= temp;
  #L48fed6.  if v1 == 0 then goto L48ff14;
  #L48feda.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L48fee0.  v1:= temp @kind object;
  #L48fee2.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L48fee8.  v3:= temp @kind object;
  #L48feea.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48fef0.  v1:= temp;
  #L48fef2.  if v1 == 0 then goto L48ff14;
  #L48fef6.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48fefc.  v4:= temp @kind object;
  #L48fefe.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48ff04.  v5:= temp @kind object;
  #L48ff06.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L48ff0c.  v4:= temp;
  #L48ff0e.  if v4 == 0 then goto L48ff14;
  #L48ff12.  goto L48ff16;
  #L48ff14.  v0:= 0I;
  #L48ff16.  return v0;
  #L48ff18.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L48ff1c.  if v1 == 0 then goto L48ff4c;
  #L48ff20.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L48ff24.  if v0 != 0 then goto L48ff2a;
  #L48ff28.  return v2;
  #L48ff2a.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L48ff2e.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L48ff32.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L48ff38.  v4:= temp @kind object;
  #L48ff3a.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L48ff40.  v5:= temp @kind object;
  #L48ff42.  call temp:= `equals`(v4, v5) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L48ff48.  v4:= temp;
  #L48ff4a.  return v4;
  #L48ff4c.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L48ff50.  if v1 == 0 then goto L48ffa4;
  #L48ff54.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L48ff58.  if v1 != 0 then goto L48ff5e;
  #L48ff5c.  return v2;
  #L48ff5e.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L48ff62.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L48ff66.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48ff6c.  v1:= temp @kind object;
  #L48ff6e.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48ff74.  v3:= temp @kind object;
  #L48ff76.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L48ff7c.  v1:= temp;
  #L48ff7e.  if v1 == 0 then goto L48ffa0;
  #L48ff82.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48ff88.  v4:= temp @kind object;
  #L48ff8a.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48ff90.  v5:= temp @kind object;
  #L48ff92.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L48ff98.  v4:= temp;
  #L48ff9a.  if v4 == 0 then goto L48ffa0;
  #L48ff9e.  goto L48ffa2;
  #L48ffa0.  v0:= 0I;
  #L48ffa2.  return v0;
  #L48ffa4.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L48ffa8.  if v1 == 0 then goto L48fff4;
  #L48ffac.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L48ffb0.  if v1 != 0 then goto L48ffb6;
  #L48ffb4.  return v2;
  #L48ffb6.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L48ffba.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L48ffbe.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L48ffc4.  v1:= temp @kind object;
  #L48ffc6.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L48ffcc.  v3:= temp @kind object;
  #L48ffce.  if v1 != v3 then goto L48fff0;
  #L48ffd2.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L48ffd8.  v4:= temp @kind object;
  #L48ffda.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L48ffe0.  v5:= temp @kind object;
  #L48ffe2.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48ffe8.  v4:= temp;
  #L48ffea.  if v4 == 0 then goto L48fff0;
  #L48ffee.  goto L48fff2;
  #L48fff0.  v0:= 0I;
  #L48fff2.  return v0;
  #L48fff4.  return v2;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4901e4.  if v5 != v4 then goto L4901ea;
  #L4901e8.  return v3 @kind object;
  #L4901ea.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L4901f0.  v3:= temp;
  #L4901f2.  if v3 == 0 then goto L49024c;
  #L4901f6.  call temp:= `getInterfaces`(v4) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L4901fc.  v3:= temp @kind object;
  #L4901fe.  v0:= 0I;
  #L490200.  v1:= length @variable v3;
  #L490202.  if v0 >= v1 then goto L49024c;
  #L490206.  v2:= v3[v0] @kind object;
  #L49020a.  if v2 != v5 then goto L49021c;
  #L49020e.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L490214.  v3:= temp @kind object;
  #L490216.  v3:= v3[v0] @kind object;
  #L49021a.  return v3 @kind object;
  #L49021c.  v2:= v3[v0] @kind object;
  #L490220.  call temp:= `isAssignableFrom`(v5, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L490226.  v2:= temp;
  #L490228.  if v2 == 0 then goto L490246;
  #L49022c.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L490232.  v4:= temp @kind object;
  #L490234.  v4:= v4[v0] @kind object;
  #L490238.  v3:= v3[v0] @kind object;
  #L49023c.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L490242.  v3:= temp @kind object;
  #L490244.  return v3 @kind object;
  #L490246.  v0:= v0 + 1;
  #L49024a.  goto L490202;
  #L49024c.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L490252.  v3:= temp;
  #L490254.  if v3 != 0 then goto L490298;
  #L490258.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L49025c.  if v4 == v3 then goto L490298;
  #L490260.  call temp:= `getSuperclass`(v4) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L490266.  v3:= temp @kind object;
  #L490268.  if v3 != v5 then goto L490276;
  #L49026c.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L490272.  v3:= temp @kind object;
  #L490274.  return v3 @kind object;
  #L490276.  call temp:= `isAssignableFrom`(v5, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L49027c.  v0:= temp;
  #L49027e.  if v0 == 0 then goto L490294;
  #L490282.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L490288.  v4:= temp @kind object;
  #L49028a.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L490290.  v3:= temp @kind object;
  #L490292.  return v3 @kind object;
  #L490294.  v4:= v3 @kind object;
  #L490296.  goto L490258;
  #L490298.  return v5 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v4 @kind object) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4900b0.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L4900b4.  if v0 == 0 then goto L4900be;
  #L4900b8.  v4:= (`java.lang.Class`) v4 @kind object;
  #L4900bc.  return v4 @kind object;
  #L4900be.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L4900c2.  if v0 == 0 then goto L4900ec;
  #L4900c6.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L4900ca.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L4900d0.  v4:= temp @kind object;
  #L4900d2.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L4900d6.  if v0 == 0 then goto L4900e0;
  #L4900da.  v4:= (`java.lang.Class`) v4 @kind object;
  #L4900de.  return v4 @kind object;
  #L4900e0.  v4:= new `java.lang.IllegalArgumentException`;
  #L4900e4.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4900ea.  throw v4;
  #L4900ec.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L4900f0.  v1:= 0I;
  #L4900f2.  if v0 == 0 then goto L49011c;
  #L4900f6.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L4900fa.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L490100.  v4:= temp @kind object;
  #L490102.  call temp:= `getRawType`(v4) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L490108.  v4:= temp @kind object;
  #L49010a.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L490110.  v4:= temp @kind object;
  #L490112.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L490118.  v4:= temp @kind object;
  #L49011a.  return v4 @kind object;
  #L49011c.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L490120.  if v0 == 0 then goto L49012a;
  #L490124.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L490128.  return v4 @kind object;
  #L49012a.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L49012e.  if v0 == 0 then goto L49014c;
  #L490132.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L490136.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L49013c.  v4:= temp @kind object;
  #L49013e.  v4:= v4[v1] @kind object;
  #L490142.  call temp:= `getRawType`(v4) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L490148.  v4:= temp @kind object;
  #L49014a.  return v4 @kind object;
  #L49014c.  if v4 != 0 then goto L490156;
  #L490150.  v0:= "null" @kind object;
  #L490154.  goto L490166;
  #L490156.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L49015c.  v0:= temp @kind object;
  #L49015e.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L490164.  v0:= temp @kind object;
  #L490166.  v1:= new `java.lang.IllegalArgumentException`;
  #L49016a.  v2:= new `java.lang.StringBuilder`;
  #L49016e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L490174.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L490178.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49017e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490184.  v4:= "> is of type " @kind object;
  #L490188.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49018e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490194.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49019a.  v4:= temp @kind object;
  #L49019c.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4901a2.  throw v1;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit/Types;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4902ac.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L4902b2.  v0:= temp;
  #L4902b4.  if v0 == 0 then goto L4902ca;
  #L4902b8.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L4902be.  v3:= temp @kind object;
  #L4902c0.  call temp:= `resolve`(v1, v2, v3) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L4902c6.  v1:= temp @kind object;
  #L4902c8.  return v1 @kind object;
  #L4902ca.  v1:= new `java.lang.IllegalArgumentException`;
  #L4902ce.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4902d4.  throw v1;
}
procedure `int` `hashCodeOrZero`(`java.lang.Object` v0 @kind object) @signature `Lretrofit/Types;.hashCodeOrZero:(Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L490024.  if v0 == 0 then goto L490032;
  #L490028.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L49002e.  v0:= temp;
  #L490030.  goto L490034;
  #L490032.  v0:= 0I;
  #L490034.  return v0;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit/Types;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L490048.  v0:= 0I;
  #L49004a.  v1:= length @variable v2;
  #L49004c.  if v0 >= v1 then goto L490068;
  #L490050.  v1:= v2[v0] @kind object;
  #L490054.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49005a.  v1:= temp;
  #L49005c.  if v1 == 0 then goto L490062;
  #L490060.  return v0;
  #L490062.  v0:= v0 + 1;
  #L490066.  goto L49004a;
  #L490068.  v2:= new `java.util.NoSuchElementException`;
  #L49006c.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L490072.  throw v2;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v8 @kind object, `java.lang.Class` v9 @kind object, `java.lang.reflect.Type` v10 @kind object) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4902e8.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L4902ec.  if v0 == 0 then goto L490306;
  #L4902f0.  v10:= (`java.lang.reflect.TypeVariable`) v10 @kind object;
  #L4902f4.  call temp:= `resolveTypeVariable`(v8, v9, v10) @signature `Lretrofit/Types;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L4902fa.  v0:= temp @kind object;
  #L4902fc.  if v0 != v10 then goto L490302;
  #L490300.  return v0 @kind object;
  #L490302.  v10:= v0 @kind object;
  #L490304.  goto L4902e8;
  #L490306.  v0:= instanceof @variable v10 @type ^`java.lang.Class` @kind boolean;
  #L49030a.  if v0 == 0 then goto L490342;
  #L49030e.  v0:= v10 @kind object;
  #L490310.  v0:= (`java.lang.Class`) v0 @kind object;
  #L490314.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L49031a.  v1:= temp;
  #L49031c.  if v1 == 0 then goto L490342;
  #L490320.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L490326.  v10:= temp @kind object;
  #L490328.  call temp:= `resolve`(v8, v9, v10) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L49032e.  v8:= temp @kind object;
  #L490330.  if v10 != v8 then goto L490336;
  #L490334.  goto L490340;
  #L490336.  v0:= new `retrofit.Types$GenericArrayTypeImpl`;
  #L49033a.  call `<init>`(v0, v8) @signature `Lretrofit/Types$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L490340.  return v0 @kind object;
  #L490342.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L490346.  if v0 == 0 then goto L490370;
  #L49034a.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L49034e.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L490354.  v0:= temp @kind object;
  #L490356.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L49035c.  v8:= temp @kind object;
  #L49035e.  if v0 != v8 then goto L490364;
  #L490362.  goto L49036e;
  #L490364.  v10:= new `retrofit.Types$GenericArrayTypeImpl`;
  #L490368.  call `<init>`(v10, v8) @signature `Lretrofit/Types$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L49036e.  return v10 @kind object;
  #L490370.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L490374.  v1:= 1I;
  #L490376.  v2:= 0I;
  #L490378.  if v0 == 0 then goto L4903f4;
  #L49037c.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L490380.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L490386.  v0:= temp @kind object;
  #L490388.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L49038e.  v3:= temp @kind object;
  #L490390.  if v3 == v0 then goto L490398;
  #L490394.  v0:= 1I;
  #L490396.  goto L49039a;
  #L490398.  v0:= 0I;
  #L49039a.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L4903a0.  v4:= temp @kind object;
  #L4903a2.  v5:= length @variable v4;
  #L4903a4.  if v2 >= v5 then goto L4903da;
  #L4903a8.  v6:= v4[v2] @kind object;
  #L4903ac.  call temp:= `resolve`(v8, v9, v6) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L4903b2.  v6:= temp @kind object;
  #L4903b4.  v7:= v4[v2] @kind object;
  #L4903b8.  if v6 == v7 then goto L4903d4;
  #L4903bc.  if v0 != 0 then goto L4903d0;
  #L4903c0.  call temp:= `clone`(v4) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4903c6.  v0:= temp @kind object;
  #L4903c8.  v4:= v0 @kind object;
  #L4903ca.  v4:= (`java.lang.reflect.Type`[]) v4 @kind object;
  #L4903ce.  v0:= 1I;
  #L4903d0.  v4[v2]:= v6 @kind object;
  #L4903d4.  v2:= v2 + 1;
  #L4903d8.  goto L4903a4;
  #L4903da.  if v0 == 0 then goto L4903f2;
  #L4903de.  v8:= new `retrofit.Types$ParameterizedTypeImpl`;
  #L4903e2.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L4903e8.  v9:= temp @kind object;
  #L4903ea.  call `<init>`(v8, v3, v9, v4) @signature `Lretrofit/Types$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L4903f0.  v10:= v8 @kind object;
  #L4903f2.  return v10 @kind object;
  #L4903f4.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L4903f8.  if v0 == 0 then goto L49047c;
  #L4903fc.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L490400.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L490406.  v0:= temp @kind object;
  #L490408.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L49040e.  v3:= temp @kind object;
  #L490410.  v4:= length @variable v0;
  #L490412.  if v4 != v1 then goto L49044a;
  #L490416.  v3:= v0[v2] @kind object;
  #L49041a.  call temp:= `resolve`(v8, v9, v3) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L490420.  v8:= temp @kind object;
  #L490422.  v9:= v0[v2] @kind object;
  #L490426.  if v8 == v9 then goto L49047c;
  #L49042a.  v9:= new `retrofit.Types$WildcardTypeImpl`;
  #L49042e.  v10:= new `java.lang.reflect.Type`[v1];
  #L490432.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L490436.  v10[v2]:= v0 @kind object;
  #L49043a.  v0:= new `java.lang.reflect.Type`[v1];
  #L49043e.  v0[v2]:= v8 @kind object;
  #L490442.  call `<init>`(v9, v10, v0) @signature `Lretrofit/Types$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L490448.  return v9 @kind object;
  #L49044a.  v0:= length @variable v3;
  #L49044c.  if v0 != v1 then goto L49047c;
  #L490450.  v0:= v3[v2] @kind object;
  #L490454.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L49045a.  v8:= temp @kind object;
  #L49045c.  v9:= v3[v2] @kind object;
  #L490460.  if v8 == v9 then goto L49047c;
  #L490464.  v9:= new `retrofit.Types$WildcardTypeImpl`;
  #L490468.  v10:= new `java.lang.reflect.Type`[v1];
  #L49046c.  v10[v2]:= v8 @kind object;
  #L490470.  v8:= `@@retrofit.Types.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L490474.  call `<init>`(v9, v10, v8) @signature `Lretrofit/Types$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L49047a.  return v9 @kind object;
  #L49047c.  return v10 @kind object;
  #L49047e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490480.  throw v8;
  catch `java.lang.Throwable` @[L490454..L49045c] goto L49047e;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lretrofit/Types;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4904a0.  call temp:= `declaringClassOf`(v3) @signature `Lretrofit/Types;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L4904a6.  v0:= temp @kind object;
  #L4904a8.  if v0 != 0 then goto L4904ae;
  #L4904ac.  return v3 @kind object;
  #L4904ae.  call temp:= `getGenericSupertype`(v1, v2, v0) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L4904b4.  v1:= temp @kind object;
  #L4904b6.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L4904ba.  if v2 == 0 then goto L4904e0;
  #L4904be.  call temp:= `getTypeParameters`(v0) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L4904c4.  v2:= temp @kind object;
  #L4904c6.  call temp:= `indexOf`(v2, v3) @signature `Lretrofit/Types;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L4904cc.  v2:= temp;
  #L4904ce.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L4904d2.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L4904d8.  v1:= temp @kind object;
  #L4904da.  v1:= v1[v2] @kind object;
  #L4904de.  return v1 @kind object;
  #L4904e0.  return v3 @kind object;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4901b4.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L4901b8.  if v0 == 0 then goto L4901ca;
  #L4901bc.  v1:= (`java.lang.Class`) v1 @kind object;
  #L4901c0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L4901c6.  v1:= temp @kind object;
  #L4901c8.  goto L4901d2;
  #L4901ca.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4901d0.  v1:= temp @kind object;
  #L4901d2.  return v1 @kind object;
}
