record `retrofit.Platform$Base$2` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `retrofit.Platform$Base` `retrofit.Platform$Base$2.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit.Platform$Base$2` v0 @kind this, `retrofit.Platform$Base` v1 @kind object) @signature `Lretrofit/Platform$Base$2;.<init>:(Lretrofit/Platform$Base;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48bf28.  v0.`retrofit.Platform$Base$2.this$0` @type ^`retrofit.Platform$Base` := v1 @kind object;
  #L48bf2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48bf32.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`retrofit.Platform$Base$2` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lretrofit/Platform$Base$2;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48befc.  v0:= new `java.lang.Thread`;
  #L48bf00.  v1:= new `retrofit.Platform$Base$2$1`;
  #L48bf04.  call `<init>`(v1, v2, v3) @signature `Lretrofit/Platform$Base$2$1;.<init>:(Lretrofit/Platform$Base$2;Ljava/lang/Runnable;)V` @kind direct;
  #L48bf0a.  v3:= "Retrofit-Idle" @kind object;
  #L48bf0e.  call `<init>`(v0, v1, v3) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L48bf14.  return v0 @kind object;
}
