record `retrofit.RestMethodInfo` @kind class @AccessFlag FINAL {
  `java.lang.String` `retrofit.RestMethodInfo.contentTypeHeader` @AccessFlag ;
  `java.util.List` `retrofit.RestMethodInfo.headers` @AccessFlag ;
  `boolean` `retrofit.RestMethodInfo.isObservable` @AccessFlag FINAL;
  `boolean` `retrofit.RestMethodInfo.isStreaming` @AccessFlag ;
  `boolean` `retrofit.RestMethodInfo.isSynchronous` @AccessFlag FINAL;
  `boolean` `retrofit.RestMethodInfo.loaded` @AccessFlag ;
  `java.lang.reflect.Method` `retrofit.RestMethodInfo.method` @AccessFlag FINAL;
  `boolean` `retrofit.RestMethodInfo.requestHasBody` @AccessFlag ;
  `java.lang.String` `retrofit.RestMethodInfo.requestMethod` @AccessFlag ;
  `java.lang.annotation.Annotation`[] `retrofit.RestMethodInfo.requestParamAnnotations` @AccessFlag ;
  `java.lang.String` `retrofit.RestMethodInfo.requestQuery` @AccessFlag ;
  `retrofit.RestMethodInfo$RequestType` `retrofit.RestMethodInfo.requestType` @AccessFlag ;
  `java.lang.String` `retrofit.RestMethodInfo.requestUrl` @AccessFlag ;
  `java.util.Set` `retrofit.RestMethodInfo.requestUrlParamNames` @AccessFlag ;
  `java.lang.reflect.Type` `retrofit.RestMethodInfo.responseObjectType` @AccessFlag ;
  `retrofit.RestMethodInfo$ResponseType` `retrofit.RestMethodInfo.responseType` @AccessFlag FINAL;
}
global `java.lang.String` `@@retrofit.RestMethodInfo.PARAM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit.RestMethodInfo.PARAM_NAME_REGEX` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit/RestMethodInfo;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L48ec8c.  v0:= "[a-zA-Z][a-zA-Z0-9_-]*" @kind object;
  #L48ec90.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L48ec96.  v0:= temp @kind object;
  #L48ec98.  `@@retrofit.RestMethodInfo.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L48ec9c.  v0:= "\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}" @kind object;
  #L48eca0.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L48eca6.  v0:= temp @kind object;
  #L48eca8.  `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L48ecac.  return @kind void;
}
procedure `void` `<init>`(`retrofit.RestMethodInfo` v3 @kind this, `java.lang.reflect.Method` v4 @kind object) @signature `Lretrofit/RestMethodInfo;.<init>:(Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L48ecc0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48ecc6.  v0:= 0I;
  #L48ecc8.  v3.`retrofit.RestMethodInfo.loaded` @type ^`boolean` := v0 @kind boolean;
  #L48eccc.  v1:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48ecd0.  v3.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` := v1 @kind object;
  #L48ecd4.  v3.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` := v4 @kind object;
  #L48ecd8.  call temp:= `parseResponseType`(v3) @signature `Lretrofit/RestMethodInfo;.parseResponseType:()Lretrofit/RestMethodInfo$ResponseType;` @kind direct;
  #L48ecde.  v4:= temp @kind object;
  #L48ece0.  v3.`retrofit.RestMethodInfo.responseType` @type ^`retrofit.RestMethodInfo$ResponseType` := v4 @kind object;
  #L48ece4.  v1:= `@@retrofit.RestMethodInfo$ResponseType.OBJECT` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L48ece8.  v2:= 1I;
  #L48ecea.  if v4 != v1 then goto L48ecf2;
  #L48ecee.  v4:= 1I;
  #L48ecf0.  goto L48ecf4;
  #L48ecf2.  v4:= 0I;
  #L48ecf4.  v3.`retrofit.RestMethodInfo.isSynchronous` @type ^`boolean` := v4 @kind boolean;
  #L48ecf8.  v4:= v3.`retrofit.RestMethodInfo.responseType` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L48ecfc.  v1:= `@@retrofit.RestMethodInfo$ResponseType.OBSERVABLE` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L48ed00.  if v4 != v1 then goto L48ed06;
  #L48ed04.  v0:= 1I;
  #L48ed06.  v3.`retrofit.RestMethodInfo.isObservable` @type ^`boolean` := v0 @kind boolean;
  #L48ed0a.  return @kind void;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`java.lang.reflect.ParameterizedType` v4 @kind object) @signature `Lretrofit/RestMethodInfo;.getParameterUpperBound:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48e9f4.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48e9fa.  v4:= temp @kind object;
  #L48e9fc.  v0:= 0I;
  #L48e9fe.  v1:= 0I;
  #L48ea00.  v2:= length @variable v4;
  #L48ea02.  if v1 >= v2 then goto L48ea2c;
  #L48ea06.  v2:= v4[v1] @kind object;
  #L48ea0a.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L48ea0e.  if v3 == 0 then goto L48ea26;
  #L48ea12.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L48ea16.  call temp:= `getUpperBounds`(v2) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L48ea1c.  v2:= temp @kind object;
  #L48ea1e.  v2:= v2[v0] @kind object;
  #L48ea22.  v4[v1]:= v2 @kind object;
  #L48ea26.  v1:= v1 + 1;
  #L48ea2a.  goto L48ea00;
  #L48ea2c.  v4:= v4[v0] @kind object;
  #L48ea30.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `methodError`(`retrofit.RestMethodInfo` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L48e920.  v0:= length @variable v4;
  #L48e922.  if v0 <= 0 then goto L48e92e;
  #L48e926.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48e92c.  v3:= temp @kind object;
  #L48e92e.  v4:= new `java.lang.IllegalArgumentException`;
  #L48e932.  v0:= new `java.lang.StringBuilder`;
  #L48e936.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e93c.  v1:= v2.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48e940.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L48e946.  v1:= temp @kind object;
  #L48e948.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48e94e.  v1:= temp @kind object;
  #L48e950.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e956.  v1:= "." @kind object;
  #L48e95a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e960.  v1:= v2.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48e964.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L48e96a.  v1:= temp @kind object;
  #L48e96c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e972.  v1:= ": " @kind object;
  #L48e976.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e97c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e982.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e988.  v3:= temp @kind object;
  #L48e98a.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e990.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`retrofit.RestMethodInfo` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L48e9a4.  v0:= new `java.lang.StringBuilder`;
  #L48e9a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e9ae.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e9b4.  v3:= " (parameter #" @kind object;
  #L48e9b8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e9be.  v2:= v2 + 1;
  #L48e9c2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e9c8.  v2:= ")" @kind object;
  #L48e9cc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e9d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e9d8.  v2:= temp @kind object;
  #L48e9da.  call temp:= `methodError`(v1, v2, v4) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48e9e0.  v2:= temp @kind object;
  #L48e9e2.  return v2 @kind object;
}
procedure `void` `parseMethodAnnotations`(`retrofit.RestMethodInfo` v14 @kind this) @signature `Lretrofit/RestMethodInfo;.parseMethodAnnotations:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L48ed6c.  v0:= constclass @type ^`retrofit.client.Response` @kind object;
  #L48ed70.  v1:= v14.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48ed74.  call temp:= `getAnnotations`(v1) @signature `Ljava/lang/reflect/Method;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L48ed7a.  v1:= temp @kind object;
  #L48ed7c.  v2:= length @variable v1;
  #L48ed7e.  v3:= 0I;
  #L48ed80.  v4:= 0I;
  #L48ed82.  if v4 >= v2 then goto L48ef3a;
  #L48ed86.  v5:= v1[v4] @kind object;
  #L48ed8a.  call temp:= `annotationType`(v5) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L48ed90.  v6:= temp @kind object;
  #L48ed92.  v7:= 0I;
  #L48ed94.  call temp:= `getAnnotations`(v6) @signature `Ljava/lang/Class;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L48ed9a.  v8:= temp @kind object;
  #L48ed9c.  v9:= length @variable v8;
  #L48ed9e.  v10:= 0I;
  #L48eda0.  if v10 >= v9 then goto L48edc6;
  #L48eda4.  v11:= v8[v10] @kind object;
  #L48eda8.  v12:= constclass @type ^`retrofit.http.RestMethod` @kind object;
  #L48edac.  call temp:= `annotationType`(v11) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L48edb2.  v13:= temp @kind object;
  #L48edb4.  if v12 != v13 then goto L48edc0;
  #L48edb8.  v7:= v11 @kind object;
  #L48edba.  v7:= (`retrofit.http.RestMethod`) v7 @kind object;
  #L48edbe.  goto L48edc6;
  #L48edc0.  v10:= v10 + 1;
  #L48edc4.  goto L48eda0;
  #L48edc6.  v8:= 2I;
  #L48edc8.  v9:= 1I;
  #L48edca.  if v7 == 0 then goto L48ee58;
  #L48edce.  v10:= v14.`retrofit.RestMethodInfo.requestMethod` @type ^`java.lang.String` @kind object;
  #L48edd2.  if v10 != 0 then goto L48ee36;
  #L48edd6.  v8:= "value" @kind object;
  #L48edda.  v10:= new `java.lang.Class`[v3];
  #L48edde.  call temp:= `getMethod`(v6, v8, v10) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L48ede4.  v8:= temp @kind object;
  #L48ede6.  v10:= new `java.lang.Object`[v3];
  #L48edea.  call temp:= `invoke`(v8, v5, v10) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L48edf0.  v5:= temp @kind object;
  #L48edf2.  v5:= (`java.lang.String`) v5 @kind object;
  #L48edf6.  call `parsePath`(v14, v5) @signature `Lretrofit/RestMethodInfo;.parsePath:(Ljava/lang/String;)V` @kind direct;
  #L48edfc.  call temp:= `value`(v7) @signature `Lretrofit/http/RestMethod;.value:()Ljava/lang/String;` @kind interface;
  #L48ee02.  v5:= temp @kind object;
  #L48ee04.  v14.`retrofit.RestMethodInfo.requestMethod` @type ^`java.lang.String` := v5 @kind object;
  #L48ee08.  call temp:= `hasBody`(v7) @signature `Lretrofit/http/RestMethod;.hasBody:()Z` @kind interface;
  #L48ee0e.  v5:= temp;
  #L48ee10.  v14.`retrofit.RestMethodInfo.requestHasBody` @type ^`boolean` := v5 @kind boolean;
  #L48ee14.  goto L48ef32;
  #L48ee18.  v0:= new `java.lang.Object`[v9];
  #L48ee1c.  call temp:= `getSimpleName`(v6) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48ee22.  v1:= temp @kind object;
  #L48ee24.  v0[v3]:= v1 @kind object;
  #L48ee28.  v1:= "Failed to extract String 'value' from @%s annotation." @kind object;
  #L48ee2c.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ee32.  v0:= temp @kind object;
  #L48ee34.  throw v0;
  #L48ee36.  v0:= new `java.lang.Object`[v8];
  #L48ee3a.  v0[v3]:= v10 @kind object;
  #L48ee3e.  call temp:= `value`(v7) @signature `Lretrofit/http/RestMethod;.value:()Ljava/lang/String;` @kind interface;
  #L48ee44.  v1:= temp @kind object;
  #L48ee46.  v0[v9]:= v1 @kind object;
  #L48ee4a.  v1:= "Only one HTTP method is allowed. Found: %s and %s." @kind object;
  #L48ee4e.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ee54.  v0:= temp @kind object;
  #L48ee56.  throw v0;
  #L48ee58.  v7:= constclass @type ^`retrofit.http.Headers` @kind object;
  #L48ee5c.  if v6 != v7 then goto L48ee92;
  #L48ee60.  v5:= (`retrofit.http.Headers`) v5 @kind object;
  #L48ee64.  call temp:= `value`(v5) @signature `Lretrofit/http/Headers;.value:()[Ljava/lang/String;` @kind interface;
  #L48ee6a.  v5:= temp @kind object;
  #L48ee6c.  v6:= length @variable v5;
  #L48ee6e.  if v6 == 0 then goto L48ee80;
  #L48ee72.  call temp:= `parseHeaders`(v14, v5) @signature `Lretrofit/RestMethodInfo;.parseHeaders:([Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L48ee78.  v5:= temp @kind object;
  #L48ee7a.  v14.`retrofit.RestMethodInfo.headers` @type ^`java.util.List` := v5 @kind object;
  #L48ee7e.  goto L48ef32;
  #L48ee80.  v0:= new `java.lang.Object`[v3];
  #L48ee84.  v1:= "@Headers annotation is empty." @kind object;
  #L48ee88.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ee8e.  v0:= temp @kind object;
  #L48ee90.  throw v0;
  #L48ee92.  v5:= constclass @type ^`retrofit.http.Multipart` @kind object;
  #L48ee96.  v7:= "Only one encoding annotation is allowed." @kind object;
  #L48ee9a.  if v6 != v5 then goto L48eec2;
  #L48ee9e.  v5:= v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48eea2.  v6:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48eea6.  if v5 != v6 then goto L48eeb4;
  #L48eeaa.  v5:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48eeae.  v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` := v5 @kind object;
  #L48eeb2.  goto L48ef32;
  #L48eeb4.  v0:= new `java.lang.Object`[v3];
  #L48eeb8.  call temp:= `methodError`(v14, v7, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48eebe.  v0:= temp @kind object;
  #L48eec0.  throw v0;
  #L48eec2.  v5:= constclass @type ^`retrofit.http.FormUrlEncoded` @kind object;
  #L48eec6.  if v6 != v5 then goto L48eeee;
  #L48eeca.  v5:= v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48eece.  v6:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48eed2.  if v5 != v6 then goto L48eee0;
  #L48eed6.  v5:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48eeda.  v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` := v5 @kind object;
  #L48eede.  goto L48ef32;
  #L48eee0.  v0:= new `java.lang.Object`[v3];
  #L48eee4.  call temp:= `methodError`(v14, v7, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48eeea.  v0:= temp @kind object;
  #L48eeec.  throw v0;
  #L48eeee.  v5:= constclass @type ^`retrofit.http.Streaming` @kind object;
  #L48eef2.  if v6 != v5 then goto L48ef32;
  #L48eef6.  v5:= v14.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` @kind object;
  #L48eefa.  if v5 != v0 then goto L48ef04;
  #L48eefe.  v14.`retrofit.RestMethodInfo.isStreaming` @type ^`boolean` := v9 @kind boolean;
  #L48ef02.  goto L48ef32;
  #L48ef04.  v1:= new `java.lang.Object`[v8];
  #L48ef08.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48ef0e.  v0:= temp @kind object;
  #L48ef10.  v1[v3]:= v0 @kind object;
  #L48ef14.  v0:= constclass @type ^`retrofit.http.Streaming` @kind object;
  #L48ef18.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48ef1e.  v0:= temp @kind object;
  #L48ef20.  v1[v9]:= v0 @kind object;
  #L48ef24.  v0:= "Only methods having %s as data type are allowed to have @%s annotation." @kind object;
  #L48ef28.  call temp:= `methodError`(v14, v0, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ef2e.  v0:= temp @kind object;
  #L48ef30.  throw v0;
  #L48ef32.  v4:= v4 + 1;
  #L48ef36.  goto L48ed82;
  #L48ef3a.  v0:= v14.`retrofit.RestMethodInfo.requestMethod` @type ^`java.lang.String` @kind object;
  #L48ef3e.  if v0 == 0 then goto L48ef86;
  #L48ef42.  v0:= v14.`retrofit.RestMethodInfo.requestHasBody` @type ^`boolean` @kind boolean;
  #L48ef46.  if v0 != 0 then goto L48ef84;
  #L48ef4a.  v0:= v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48ef4e.  v1:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48ef52.  if v0 == v1 then goto L48ef72;
  #L48ef56.  v1:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48ef5a.  if v0 == v1 then goto L48ef60;
  #L48ef5e.  goto L48ef84;
  #L48ef60.  v0:= new `java.lang.Object`[v3];
  #L48ef64.  v1:= "FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L48ef68.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ef6e.  v0:= temp @kind object;
  #L48ef70.  throw v0;
  #L48ef72.  v0:= new `java.lang.Object`[v3];
  #L48ef76.  v1:= "Multipart can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L48ef7a.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ef80.  v0:= temp @kind object;
  #L48ef82.  throw v0;
  #L48ef84.  return @kind void;
  #L48ef86.  v0:= new `java.lang.Object`[v3];
  #L48ef8a.  v1:= "HTTP method annotation is required (e.g., @GET, @POST, etc.)." @kind object;
  #L48ef8e.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ef94.  v0:= temp @kind object;
  #L48ef96.  throw v0;
  catch `java.lang.Exception` @[L48edd6..L48edf6] goto L48ee18;
}
procedure `void` `parseParameters`(`retrofit.RestMethodInfo` v18 @kind this) @signature `Lretrofit/RestMethodInfo;.parseParameters:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L48efb8.  v0:= v18 @kind object;
  #L48efbc.  v1:= v0.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48efc0.  call temp:= `getParameterTypes`(v1) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L48efc6.  v1:= temp @kind object;
  #L48efc8.  v2:= v0.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48efcc.  call temp:= `getParameterAnnotations`(v2) @signature `Ljava/lang/reflect/Method;.getParameterAnnotations:()[[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L48efd2.  v2:= temp @kind object;
  #L48efd4.  v3:= length @variable v2;
  #L48efd6.  v4:= v0.`retrofit.RestMethodInfo.isSynchronous` @type ^`boolean` @kind boolean;
  #L48efda.  if v4 != 0 then goto L48efea;
  #L48efde.  v4:= v0.`retrofit.RestMethodInfo.isObservable` @type ^`boolean` @kind boolean;
  #L48efe2.  if v4 != 0 then goto L48efea;
  #L48efe6.  v3:= v3 + -1;
  #L48efea.  v4:= new `java.lang.annotation.Annotation`[v3];
  #L48efee.  v6:= 0I;
  #L48eff0.  v7:= 0I;
  #L48eff2.  v8:= 0I;
  #L48eff4.  v9:= 0I;
  #L48eff6.  if v6 >= v3 then goto L48f2a2;
  #L48effa.  v10:= v1[v6] @kind object;
  #L48effe.  v11:= v2[v6] @kind object;
  #L48f002.  if v11 == 0 then goto L48f276;
  #L48f006.  v12:= length @variable v11;
  #L48f008.  v13:= 0I;
  #L48f00a.  if v13 >= v12 then goto L48f276;
  #L48f00e.  v14:= v11[v13] @kind object;
  #L48f012.  call temp:= `annotationType`(v14) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L48f018.  v15:= temp @kind object;
  #L48f01a.  v5:= constclass @type ^`retrofit.http.Path` @kind object;
  #L48f01e.  v16:= 1I;
  #L48f022.  if v15 != v5 then goto L48f03c;
  #L48f026.  v5:= v14 @kind object;
  #L48f028.  v5:= (`retrofit.http.Path`) v5 @kind object;
  #L48f02c.  call temp:= `value`(v5) @signature `Lretrofit/http/Path;.value:()Ljava/lang/String;` @kind interface;
  #L48f032.  v5:= temp @kind object;
  #L48f034.  call `validatePathName`(v0, v6, v5) @signature `Lretrofit/RestMethodInfo;.validatePathName:(ILjava/lang/String;)V` @kind direct;
  #L48f03a.  goto L48f0d2;
  #L48f03c.  v5:= constclass @type ^`retrofit.http.EncodedPath` @kind object;
  #L48f040.  if v15 != v5 then goto L48f05a;
  #L48f044.  v5:= v14 @kind object;
  #L48f046.  v5:= (`retrofit.http.EncodedPath`) v5 @kind object;
  #L48f04a.  call temp:= `value`(v5) @signature `Lretrofit/http/EncodedPath;.value:()Ljava/lang/String;` @kind interface;
  #L48f050.  v5:= temp @kind object;
  #L48f052.  call `validatePathName`(v0, v6, v5) @signature `Lretrofit/RestMethodInfo;.validatePathName:(ILjava/lang/String;)V` @kind direct;
  #L48f058.  goto L48f0d2;
  #L48f05a.  v5:= constclass @type ^`retrofit.http.Query` @kind object;
  #L48f05e.  if v15 != v5 then goto L48f064;
  #L48f062.  goto L48f0d2;
  #L48f064.  v5:= constclass @type ^`retrofit.http.EncodedQuery` @kind object;
  #L48f068.  if v15 != v5 then goto L48f06e;
  #L48f06c.  goto L48f0d2;
  #L48f06e.  v5:= constclass @type ^`retrofit.http.QueryMap` @kind object;
  #L48f072.  if v15 != v5 then goto L48f09c;
  #L48f076.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L48f07a.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L48f080.  v5:= temp;
  #L48f082.  if v5 == 0 then goto L48f088;
  #L48f086.  goto L48f0d2;
  #L48f088.  v5:= 0I;
  #L48f08a.  v1:= new `java.lang.Object`[v5];
  #L48f08e.  v2:= "@QueryMap parameter type must be Map." @kind object;
  #L48f092.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f098.  v1:= temp @kind object;
  #L48f09a.  throw v1;
  #L48f09c.  v5:= constclass @type ^`retrofit.http.EncodedQueryMap` @kind object;
  #L48f0a0.  if v15 != v5 then goto L48f0ca;
  #L48f0a4.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L48f0a8.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L48f0ae.  v5:= temp;
  #L48f0b0.  if v5 == 0 then goto L48f0b6;
  #L48f0b4.  goto L48f0d2;
  #L48f0b6.  v5:= 0I;
  #L48f0b8.  v1:= new `java.lang.Object`[v5];
  #L48f0bc.  v2:= "@EncodedQueryMap parameter type must be Map." @kind object;
  #L48f0c0.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f0c6.  v1:= temp @kind object;
  #L48f0c8.  throw v1;
  #L48f0ca.  v5:= constclass @type ^`retrofit.http.Header` @kind object;
  #L48f0ce.  if v15 != v5 then goto L48f0da;
  #L48f0d2.  v17:= v1 @kind object;
  #L48f0d6.  goto L48f1f6;
  #L48f0da.  v5:= constclass @type ^`retrofit.http.Field` @kind object;
  #L48f0de.  if v15 != v5 then goto L48f10c;
  #L48f0e2.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f0e6.  v8:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f0ea.  if v5 != v8 then goto L48f0f8;
  #L48f0ee.  v17:= v1 @kind object;
  #L48f0f2.  v8:= 1I;
  #L48f0f4.  goto L48f1f6;
  #L48f0f8.  v5:= 0I;
  #L48f0fa.  v1:= new `java.lang.Object`[v5];
  #L48f0fe.  v2:= "@Field parameters can only be used with form encoding." @kind object;
  #L48f102.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f108.  v1:= temp @kind object;
  #L48f10a.  throw v1;
  #L48f10c.  v5:= constclass @type ^`retrofit.http.FieldMap` @kind object;
  #L48f110.  if v15 != v5 then goto L48f15a;
  #L48f114.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f118.  v8:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f11c.  if v5 != v8 then goto L48f146;
  #L48f120.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L48f124.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L48f12a.  v5:= temp;
  #L48f12c.  if v5 == 0 then goto L48f132;
  #L48f130.  goto L48f0ee;
  #L48f132.  v5:= 0I;
  #L48f134.  v1:= new `java.lang.Object`[v5];
  #L48f138.  v2:= "@FieldMap parameter type must be Map." @kind object;
  #L48f13c.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f142.  v1:= temp @kind object;
  #L48f144.  throw v1;
  #L48f146.  v5:= 0I;
  #L48f148.  v1:= new `java.lang.Object`[v5];
  #L48f14c.  v2:= "@FieldMap parameters can only be used with form encoding." @kind object;
  #L48f150.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f156.  v1:= temp @kind object;
  #L48f158.  throw v1;
  #L48f15a.  v5:= constclass @type ^`retrofit.http.Part` @kind object;
  #L48f15e.  if v15 != v5 then goto L48f18a;
  #L48f162.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f166.  v9:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f16a.  if v5 != v9 then goto L48f176;
  #L48f16e.  v17:= v1 @kind object;
  #L48f172.  v9:= 1I;
  #L48f174.  goto L48f1f6;
  #L48f176.  v5:= 0I;
  #L48f178.  v1:= new `java.lang.Object`[v5];
  #L48f17c.  v2:= "@Part parameters can only be used with multipart encoding." @kind object;
  #L48f180.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f186.  v1:= temp @kind object;
  #L48f188.  throw v1;
  #L48f18a.  v5:= constclass @type ^`retrofit.http.PartMap` @kind object;
  #L48f18e.  if v15 != v5 then goto L48f1d8;
  #L48f192.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f196.  v9:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f19a.  if v5 != v9 then goto L48f1c4;
  #L48f19e.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L48f1a2.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L48f1a8.  v5:= temp;
  #L48f1aa.  if v5 == 0 then goto L48f1b0;
  #L48f1ae.  goto L48f16e;
  #L48f1b0.  v5:= 0I;
  #L48f1b2.  v1:= new `java.lang.Object`[v5];
  #L48f1b6.  v2:= "@PartMap parameter type must be Map." @kind object;
  #L48f1ba.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f1c0.  v1:= temp @kind object;
  #L48f1c2.  throw v1;
  #L48f1c4.  v5:= 0I;
  #L48f1c6.  v1:= new `java.lang.Object`[v5];
  #L48f1ca.  v2:= "@PartMap parameters can only be used with multipart encoding." @kind object;
  #L48f1ce.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f1d4.  v1:= temp @kind object;
  #L48f1d6.  throw v1;
  #L48f1d8.  v5:= constclass @type ^`retrofit.http.Body` @kind object;
  #L48f1dc.  if v15 != v5 then goto L48f266;
  #L48f1e0.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f1e4.  v17:= v1 @kind object;
  #L48f1e8.  v1:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f1ec.  if v5 != v1 then goto L48f252;
  #L48f1f0.  if v7 != 0 then goto L48f23e;
  #L48f1f4.  v7:= 1I;
  #L48f1f6.  v1:= v4[v6] @kind object;
  #L48f1fa.  if v1 != 0 then goto L48f204;
  #L48f1fe.  v4[v6]:= v14 @kind object;
  #L48f202.  goto L48f26a;
  #L48f204.  v1:= 2I;
  #L48f206.  v1:= new `java.lang.Object`[v1];
  #L48f20a.  v2:= v4[v6] @kind object;
  #L48f20e.  call temp:= `annotationType`(v2) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L48f214.  v2:= temp @kind object;
  #L48f216.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48f21c.  v2:= temp @kind object;
  #L48f21e.  v3:= 0I;
  #L48f220.  v1[v3]:= v2 @kind object;
  #L48f224.  call temp:= `getSimpleName`(v15) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48f22a.  v2:= temp @kind object;
  #L48f22c.  v1[v16]:= v2 @kind object;
  #L48f230.  v2:= "Multiple Retrofit annotations found, only one allowed: @%s, @%s." @kind object;
  #L48f234.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f23a.  v1:= temp @kind object;
  #L48f23c.  throw v1;
  #L48f23e.  v3:= 0I;
  #L48f240.  v1:= new `java.lang.Object`[v3];
  #L48f244.  v2:= "Multiple @Body method annotations found." @kind object;
  #L48f248.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f24e.  v1:= temp @kind object;
  #L48f250.  throw v1;
  #L48f252.  v3:= 0I;
  #L48f254.  v1:= new `java.lang.Object`[v3];
  #L48f258.  v2:= "@Body parameters cannot be used with form or multi-part encoding." @kind object;
  #L48f25c.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f262.  v1:= temp @kind object;
  #L48f264.  throw v1;
  #L48f266.  v17:= v1 @kind object;
  #L48f26a.  v13:= v13 + 1;
  #L48f26e.  v1:= v17 @kind object;
  #L48f272.  goto L48f00a;
  #L48f276.  v17:= v1 @kind object;
  #L48f27a.  v1:= v4[v6] @kind object;
  #L48f27e.  if v1 == 0 then goto L48f28e;
  #L48f282.  v6:= v6 + 1;
  #L48f286.  v1:= v17 @kind object;
  #L48f28a.  goto L48eff6;
  #L48f28e.  v1:= 0I;
  #L48f290.  v1:= new `java.lang.Object`[v1];
  #L48f294.  v2:= "No Retrofit annotation found." @kind object;
  #L48f298.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f29e.  v1:= temp @kind object;
  #L48f2a0.  throw v1;
  #L48f2a2.  v1:= 0I;
  #L48f2a4.  v2:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f2a8.  v3:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f2ac.  if v2 != v3 then goto L48f2d0;
  #L48f2b0.  v2:= v0.`retrofit.RestMethodInfo.requestHasBody` @type ^`boolean` @kind boolean;
  #L48f2b4.  if v2 != 0 then goto L48f2d0;
  #L48f2b8.  if v7 != 0 then goto L48f2be;
  #L48f2bc.  goto L48f2d0;
  #L48f2be.  v1:= new `java.lang.Object`[v1];
  #L48f2c2.  v2:= "Non-body HTTP method cannot contain @Body or @TypedOutput." @kind object;
  #L48f2c6.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f2cc.  v1:= temp @kind object;
  #L48f2ce.  throw v1;
  #L48f2d0.  v2:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f2d4.  v3:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f2d8.  if v2 != v3 then goto L48f2f4;
  #L48f2dc.  if v8 == 0 then goto L48f2e2;
  #L48f2e0.  goto L48f2f4;
  #L48f2e2.  v1:= new `java.lang.Object`[v1];
  #L48f2e6.  v2:= "Form-encoded method must contain at least one @Field." @kind object;
  #L48f2ea.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f2f0.  v1:= temp @kind object;
  #L48f2f2.  throw v1;
  #L48f2f4.  v2:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f2f8.  v3:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L48f2fc.  if v2 != v3 then goto L48f318;
  #L48f300.  if v9 == 0 then goto L48f306;
  #L48f304.  goto L48f318;
  #L48f306.  v1:= new `java.lang.Object`[v1];
  #L48f30a.  v2:= "Multipart method must contain at least one @Part." @kind object;
  #L48f30e.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f314.  v1:= temp @kind object;
  #L48f316.  throw v1;
  #L48f318.  v0.`retrofit.RestMethodInfo.requestParamAnnotations` @type ^`java.lang.annotation.Annotation`[] := v4 @kind object;
  #L48f31c.  return @kind void;
}
procedure `void` `parsePath`(`retrofit.RestMethodInfo` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lretrofit/RestMethodInfo;.parsePath:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48f330.  v0:= 0I;
  #L48f332.  v1:= 1I;
  #L48f334.  if v6 == 0 then goto L48f3d2;
  #L48f338.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L48f33e.  v2:= temp;
  #L48f340.  if v2 == 0 then goto L48f3d2;
  #L48f344.  call temp:= `charAt`(v6, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L48f34a.  v2:= temp;
  #L48f34c.  v3:= 47I;
  #L48f350.  if v2 != v3 then goto L48f3d2;
  #L48f354.  v2:= 0I;
  #L48f356.  v3:= 63I;
  #L48f35a.  call temp:= `indexOf`(v6, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L48f360.  v3:= temp;
  #L48f362.  v4:= -1I;
  #L48f364.  if v3 == v4 then goto L48f3b8;
  #L48f368.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L48f36e.  v4:= temp;
  #L48f370.  v4:= v4 - v1 @kind int;
  #L48f372.  if v3 >= v4 then goto L48f3b8;
  #L48f376.  call temp:= `substring`(v6, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L48f37c.  v2:= temp @kind object;
  #L48f37e.  v3:= v3 + v1 @kind int;
  #L48f380.  call temp:= `substring`(v6, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L48f386.  v3:= temp @kind object;
  #L48f388.  v4:= `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L48f38c.  call temp:= `matcher`(v4, v3) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L48f392.  v4:= temp @kind object;
  #L48f394.  call temp:= `find`(v4) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L48f39a.  v4:= temp;
  #L48f39c.  if v4 != 0 then goto L48f3a2;
  #L48f3a0.  goto L48f3bc;
  #L48f3a2.  v6:= new `java.lang.Object`[v1];
  #L48f3a6.  v6[v0]:= v3 @kind object;
  #L48f3aa.  v0:= "URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query." @kind object;
  #L48f3ae.  call temp:= `methodError`(v5, v0, v6) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f3b4.  v6:= temp @kind object;
  #L48f3b6.  throw v6;
  #L48f3b8.  v3:= v2 @kind object;
  #L48f3ba.  v2:= v6 @kind object;
  #L48f3bc.  call temp:= `parsePathParameters`(v6) @signature `Lretrofit/RestMethodInfo;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @kind static;
  #L48f3c2.  v6:= temp @kind object;
  #L48f3c4.  v5.`retrofit.RestMethodInfo.requestUrl` @type ^`java.lang.String` := v2 @kind object;
  #L48f3c8.  v5.`retrofit.RestMethodInfo.requestUrlParamNames` @type ^`java.util.Set` := v6 @kind object;
  #L48f3cc.  v5.`retrofit.RestMethodInfo.requestQuery` @type ^`java.lang.String` := v3 @kind object;
  #L48f3d0.  return @kind void;
  #L48f3d2.  v1:= new `java.lang.Object`[v1];
  #L48f3d6.  v1[v0]:= v6 @kind object;
  #L48f3da.  v6:= "URL path \"%s\" must start with '/'." @kind object;
  #L48f3de.  call temp:= `methodError`(v5, v6, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f3e4.  v6:= temp @kind object;
  #L48f3e6.  throw v6;
}
procedure `java.util.Set` `parsePathParameters`(`java.lang.String` v2 @kind object) @signature `Lretrofit/RestMethodInfo;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L48eaf4.  v0:= `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L48eaf8.  call temp:= `matcher`(v0, v2) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L48eafe.  v2:= temp @kind object;
  #L48eb00.  v0:= new `java.util.LinkedHashSet`;
  #L48eb04.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L48eb0a.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L48eb10.  v1:= temp;
  #L48eb12.  if v1 == 0 then goto L48eb28;
  #L48eb16.  v1:= 1I;
  #L48eb18.  call temp:= `group`(v2, v1) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L48eb1e.  v1:= temp @kind object;
  #L48eb20.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48eb26.  goto L48eb0a;
  #L48eb28.  return v0 @kind object;
}
procedure `retrofit.RestMethodInfo$ResponseType` `parseResponseType`(`retrofit.RestMethodInfo` v7 @kind this) @signature `Lretrofit/RestMethodInfo;.parseResponseType:()Lretrofit/RestMethodInfo$ResponseType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48eb3c.  v0:= constclass @type ^`retrofit.Callback` @kind object;
  #L48eb40.  v1:= v7.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48eb44.  call temp:= `getGenericReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getGenericReturnType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L48eb4a.  v1:= temp @kind object;
  #L48eb4c.  v2:= v7.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L48eb50.  call temp:= `getGenericParameterTypes`(v2) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L48eb56.  v2:= temp @kind object;
  #L48eb58.  v3:= length @variable v2;
  #L48eb5a.  v4:= 0I;
  #L48eb5c.  v5:= 1I;
  #L48eb5e.  if v3 <= 0 then goto L48eb94;
  #L48eb62.  v3:= length @variable v2;
  #L48eb64.  v3:= v3 - v5 @kind int;
  #L48eb66.  v2:= v2[v3] @kind object;
  #L48eb6a.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L48eb6e.  if v3 == 0 then goto L48eb82;
  #L48eb72.  v3:= v2 @kind object;
  #L48eb74.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L48eb78.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L48eb7e.  v3:= temp @kind object;
  #L48eb80.  goto L48eb84;
  #L48eb82.  v3:= v2 @kind object;
  #L48eb84.  v6:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L48eb88.  if v6 == 0 then goto L48eb96;
  #L48eb8c.  v4:= v3 @kind object;
  #L48eb8e.  v4:= (`java.lang.Class`) v4 @kind object;
  #L48eb92.  goto L48eb96;
  #L48eb94.  v2:= v4 @kind object;
  #L48eb96.  v3:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L48eb9a.  v6:= 0I;
  #L48eb9c.  if v1 == v3 then goto L48eba4;
  #L48eba0.  v3:= 1I;
  #L48eba2.  goto L48eba6;
  #L48eba4.  v3:= 0I;
  #L48eba6.  if v4 == 0 then goto L48ebb8;
  #L48ebaa.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L48ebb0.  v4:= temp;
  #L48ebb2.  if v4 == 0 then goto L48ebb8;
  #L48ebb6.  goto L48ebba;
  #L48ebb8.  v5:= 0I;
  #L48ebba.  if v3 == 0 then goto L48ebd6;
  #L48ebbe.  if v5 != 0 then goto L48ebc4;
  #L48ebc2.  goto L48ebd6;
  #L48ebc4.  v0:= new `java.lang.Object`[v6];
  #L48ebc8.  v1:= "Must have return type or Callback as last argument, not both." @kind object;
  #L48ebcc.  call temp:= `methodError`(v7, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ebd2.  v0:= temp @kind object;
  #L48ebd4.  throw v0;
  #L48ebd6.  if v3 != 0 then goto L48ebf2;
  #L48ebda.  if v5 == 0 then goto L48ebe0;
  #L48ebde.  goto L48ebf2;
  #L48ebe0.  v0:= new `java.lang.Object`[v6];
  #L48ebe4.  v1:= "Must have either a return type or Callback as last argument." @kind object;
  #L48ebe8.  call temp:= `methodError`(v7, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ebee.  v0:= temp @kind object;
  #L48ebf0.  throw v0;
  #L48ebf2.  if v3 == 0 then goto L48ec3a;
  #L48ebf6.  v0:= `@@retrofit.Platform.HAS_RX_JAVA` @type ^`boolean` @kind boolean;
  #L48ebfa.  if v0 == 0 then goto L48ec30;
  #L48ebfe.  call temp:= `getRawType`(v1) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L48ec04.  v0:= temp @kind object;
  #L48ec06.  call temp:= `isObservable`(v0) @signature `Lretrofit/RestMethodInfo$RxSupport;.isObservable:(Ljava/lang/Class;)Z` @kind static;
  #L48ec0c.  v2:= temp;
  #L48ec0e.  if v2 == 0 then goto L48ec30;
  #L48ec12.  call temp:= `getObservableType`(v1, v0) @signature `Lretrofit/RestMethodInfo$RxSupport;.getObservableType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L48ec18.  v0:= temp @kind object;
  #L48ec1a.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L48ec1e.  call temp:= `getParameterUpperBound`(v0) @signature `Lretrofit/RestMethodInfo;.getParameterUpperBound:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L48ec24.  v0:= temp @kind object;
  #L48ec26.  v7.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L48ec2a.  v0:= `@@retrofit.RestMethodInfo$ResponseType.OBSERVABLE` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L48ec2e.  return v0 @kind object;
  #L48ec30.  v7.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L48ec34.  v0:= `@@retrofit.RestMethodInfo$ResponseType.OBJECT` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L48ec38.  return v0 @kind object;
  #L48ec3a.  call temp:= `getRawType`(v2) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L48ec40.  v1:= temp @kind object;
  #L48ec42.  call temp:= `getSupertype`(v2, v1, v0) @signature `Lretrofit/Types;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L48ec48.  v0:= temp @kind object;
  #L48ec4a.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L48ec4e.  if v1 == 0 then goto L48ec68;
  #L48ec52.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L48ec56.  call temp:= `getParameterUpperBound`(v0) @signature `Lretrofit/RestMethodInfo;.getParameterUpperBound:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L48ec5c.  v0:= temp @kind object;
  #L48ec5e.  v7.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L48ec62.  v0:= `@@retrofit.RestMethodInfo$ResponseType.VOID` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L48ec66.  return v0 @kind object;
  #L48ec68.  v0:= new `java.lang.Object`[v6];
  #L48ec6c.  v1:= "Last parameter must be of type Callback<X> or Callback<? super X>." @kind object;
  #L48ec70.  call temp:= `methodError`(v7, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48ec76.  v0:= temp @kind object;
  #L48ec78.  throw v0;
}
procedure `void` `validatePathName`(`retrofit.RestMethodInfo` v4 @kind this, `int` v5 , `java.lang.String` v6 @kind object) @signature `Lretrofit/RestMethodInfo;.validatePathName:(ILjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48f3f8.  v0:= `@@retrofit.RestMethodInfo.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L48f3fc.  call temp:= `matcher`(v0, v6) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L48f402.  v0:= temp @kind object;
  #L48f404.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L48f40a.  v0:= temp;
  #L48f40c.  v1:= 1I;
  #L48f40e.  v2:= 0I;
  #L48f410.  v3:= 2I;
  #L48f412.  if v0 == 0 then goto L48f446;
  #L48f416.  v0:= v4.`retrofit.RestMethodInfo.requestUrlParamNames` @type ^`java.util.Set` @kind object;
  #L48f41a.  call temp:= `contains`(v0, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L48f420.  v0:= temp;
  #L48f422.  if v0 == 0 then goto L48f428;
  #L48f426.  return @kind void;
  #L48f428.  v0:= new `java.lang.Object`[v3];
  #L48f42c.  v3:= v4.`retrofit.RestMethodInfo.requestUrl` @type ^`java.lang.String` @kind object;
  #L48f430.  v0[v2]:= v3 @kind object;
  #L48f434.  v0[v1]:= v6 @kind object;
  #L48f438.  v6:= "URL \"%s\" does not contain \"{%s}\"." @kind object;
  #L48f43c.  call temp:= `parameterError`(v4, v5, v6, v0) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f442.  v5:= temp @kind object;
  #L48f444.  throw v5;
  #L48f446.  v0:= new `java.lang.Object`[v3];
  #L48f44a.  v3:= `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L48f44e.  call temp:= `pattern`(v3) @signature `Ljava/util/regex/Pattern;.pattern:()Ljava/lang/String;` @kind virtual;
  #L48f454.  v3:= temp @kind object;
  #L48f456.  v0[v2]:= v3 @kind object;
  #L48f45a.  v0[v1]:= v6 @kind object;
  #L48f45e.  v6:= "@Path parameter name must match %s. Found: %s" @kind object;
  #L48f462.  call temp:= `parameterError`(v4, v5, v6, v0) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48f468.  v5:= temp @kind object;
  #L48f46a.  throw v5;
}
procedure `void` `init`(`retrofit.RestMethodInfo` v1 @kind this) @signature `Lretrofit/RestMethodInfo;.init:()V` @AccessFlag  {
    temp;
    v0;

  #L48ed1c.  @monitorenter v1
  #L48ed1e.  v0:= v1.`retrofit.RestMethodInfo.loaded` @type ^`boolean` @kind boolean;
  #L48ed22.  if v0 == 0 then goto L48ed2a;
  #L48ed26.  @monitorexit v1
  #L48ed28.  return @kind void;
  #L48ed2a.  call `parseMethodAnnotations`(v1) @signature `Lretrofit/RestMethodInfo;.parseMethodAnnotations:()V` @kind direct;
  #L48ed30.  call `parseParameters`(v1) @signature `Lretrofit/RestMethodInfo;.parseParameters:()V` @kind direct;
  #L48ed36.  v0:= 1I;
  #L48ed38.  v1.`retrofit.RestMethodInfo.loaded` @type ^`boolean` := v0 @kind boolean;
  #L48ed3c.  @monitorexit v1
  #L48ed3e.  return @kind void;
  #L48ed40.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ed42.  @monitorexit v1
  #L48ed44.  throw v0;
  catch `java.lang.Throwable` @[L48ed1e..L48ed22] goto L48ed40;
  catch `java.lang.Throwable` @[L48ed2a..L48ed3c] goto L48ed40;
}
procedure `java.util.List` `parseHeaders`(`retrofit.RestMethodInfo` v8 @kind this, `java.lang.String`[] v9 @kind object) @signature `Lretrofit/RestMethodInfo;.parseHeaders:([Ljava/lang/String;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48ea44.  v0:= new `java.util.ArrayList`;
  #L48ea48.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L48ea4e.  v1:= length @variable v9;
  #L48ea50.  v2:= 0I;
  #L48ea52.  v3:= 0I;
  #L48ea54.  if v3 >= v1 then goto L48eae0;
  #L48ea58.  v4:= v9[v3] @kind object;
  #L48ea5c.  v5:= 58I;
  #L48ea60.  call temp:= `indexOf`(v4, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L48ea66.  v5:= temp;
  #L48ea68.  v6:= -1I;
  #L48ea6a.  v7:= 1I;
  #L48ea6c.  if v5 == v6 then goto L48eaca;
  #L48ea70.  if v5 == 0 then goto L48eaca;
  #L48ea74.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L48ea7a.  v6:= temp;
  #L48ea7c.  v6:= v6 - v7 @kind int;
  #L48ea7e.  if v5 == v6 then goto L48eaca;
  #L48ea82.  call temp:= `substring`(v4, v2, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L48ea88.  v6:= temp @kind object;
  #L48ea8a.  v5:= v5 + 1;
  #L48ea8e.  call temp:= `substring`(v4, v5) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L48ea94.  v4:= temp @kind object;
  #L48ea96.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L48ea9c.  v4:= temp @kind object;
  #L48ea9e.  v5:= "Content-Type" @kind object;
  #L48eaa2.  call temp:= `equalsIgnoreCase`(v5, v6) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L48eaa8.  v5:= temp;
  #L48eaaa.  if v5 == 0 then goto L48eab4;
  #L48eaae.  v8.`retrofit.RestMethodInfo.contentTypeHeader` @type ^`java.lang.String` := v4 @kind object;
  #L48eab2.  goto L48eac4;
  #L48eab4.  v5:= new `retrofit.client.Header`;
  #L48eab8.  call `<init>`(v5, v6, v4) @signature `Lretrofit/client/Header;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L48eabe.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48eac4.  v3:= v3 + 1;
  #L48eac8.  goto L48ea54;
  #L48eaca.  v9:= new `java.lang.Object`[v7];
  #L48eace.  v9[v2]:= v4 @kind object;
  #L48ead2.  v0:= "@Headers value must be in the form \"Name: Value\". Found: \"%s\"" @kind object;
  #L48ead6.  call temp:= `methodError`(v8, v0, v9) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L48eadc.  v9:= temp @kind object;
  #L48eade.  throw v9;
  #L48eae0.  return v0 @kind object;
}
