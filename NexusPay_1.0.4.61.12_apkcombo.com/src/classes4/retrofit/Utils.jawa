record `retrofit.Utils` @kind class @AccessFlag FINAL {
}
global `int` `@@retrofit.Utils.BUFFER_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`retrofit.Utils` v0 @kind this) @signature `Lretrofit/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L490750.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L490756.  return @kind void;
}
procedure `retrofit.client.Request` `readBodyToBytesIfNecessary`(`retrofit.client.Request` v4 @kind object) @signature `Lretrofit/Utils;.readBodyToBytesIfNecessary:(Lretrofit/client/Request;)Lretrofit/client/Request;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L490608.  call temp:= `getBody`(v4) @signature `Lretrofit/client/Request;.getBody:()Lretrofit/mime/TypedOutput;` @kind virtual;
  #L49060e.  v0:= temp @kind object;
  #L490610.  if v0 == 0 then goto L49066c;
  #L490614.  v1:= instanceof @variable v0 @type ^`retrofit.mime.TypedByteArray` @kind boolean;
  #L490618.  if v1 == 0 then goto L49061e;
  #L49061c.  goto L49066c;
  #L49061e.  call temp:= `mimeType`(v0) @signature `Lretrofit/mime/TypedOutput;.mimeType:()Ljava/lang/String;` @kind interface;
  #L490624.  v1:= temp @kind object;
  #L490626.  v2:= new `java.io.ByteArrayOutputStream`;
  #L49062a.  call `<init>`(v2) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L490630.  call `writeTo`(v0, v2) @signature `Lretrofit/mime/TypedOutput;.writeTo:(Ljava/io/OutputStream;)V` @kind interface;
  #L490636.  v0:= new `retrofit.mime.TypedByteArray`;
  #L49063a.  call temp:= `toByteArray`(v2) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L490640.  v2:= temp @kind object;
  #L490642.  call `<init>`(v0, v1, v2) @signature `Lretrofit/mime/TypedByteArray;.<init>:(Ljava/lang/String;[B)V` @kind direct;
  #L490648.  v1:= new `retrofit.client.Request`;
  #L49064c.  call temp:= `getMethod`(v4) @signature `Lretrofit/client/Request;.getMethod:()Ljava/lang/String;` @kind virtual;
  #L490652.  v2:= temp @kind object;
  #L490654.  call temp:= `getUrl`(v4) @signature `Lretrofit/client/Request;.getUrl:()Ljava/lang/String;` @kind virtual;
  #L49065a.  v3:= temp @kind object;
  #L49065c.  call temp:= `getHeaders`(v4) @signature `Lretrofit/client/Request;.getHeaders:()Ljava/util/List;` @kind virtual;
  #L490662.  v4:= temp @kind object;
  #L490664.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lretrofit/client/Request;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lretrofit/mime/TypedOutput;)V` @kind direct;
  #L49066a.  return v1 @kind object;
  #L49066c.  return v4 @kind object;
}
procedure `retrofit.client.Response` `readBodyToBytesIfNecessary`(`retrofit.client.Response` v4 @kind object) @signature `Lretrofit/Utils;.readBodyToBytesIfNecessary:(Lretrofit/client/Response;)Lretrofit/client/Response;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L490680.  call temp:= `getBody`(v4) @signature `Lretrofit/client/Response;.getBody:()Lretrofit/mime/TypedInput;` @kind virtual;
  #L490686.  v0:= temp @kind object;
  #L490688.  if v0 == 0 then goto L4906da;
  #L49068c.  v1:= instanceof @variable v0 @type ^`retrofit.mime.TypedByteArray` @kind boolean;
  #L490690.  if v1 == 0 then goto L490696;
  #L490694.  goto L4906da;
  #L490696.  call temp:= `mimeType`(v0) @signature `Lretrofit/mime/TypedInput;.mimeType:()Ljava/lang/String;` @kind interface;
  #L49069c.  v1:= temp @kind object;
  #L49069e.  call temp:= `in`(v0) @signature `Lretrofit/mime/TypedInput;.in:()Ljava/io/InputStream;` @kind interface;
  #L4906a4.  v0:= temp @kind object;
  #L4906a6.  call temp:= `streamToBytes`(v0) @signature `Lretrofit/Utils;.streamToBytes:(Ljava/io/InputStream;)[B` @kind static;
  #L4906ac.  v2:= temp @kind object;
  #L4906ae.  v3:= new `retrofit.mime.TypedByteArray`;
  #L4906b2.  call `<init>`(v3, v1, v2) @signature `Lretrofit/mime/TypedByteArray;.<init>:(Ljava/lang/String;[B)V` @kind direct;
  #L4906b8.  call temp:= `replaceResponseBody`(v4, v3) @signature `Lretrofit/Utils;.replaceResponseBody:(Lretrofit/client/Response;Lretrofit/mime/TypedInput;)Lretrofit/client/Response;` @kind static;
  #L4906be.  v4:= temp @kind object;
  #L4906c0.  if v0 == 0 then goto L4906ca;
  #L4906c4.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L4906ca.  return v4 @kind object;
  #L4906cc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4906ce.  if v0 == 0 then goto L4906d8;
  #L4906d2.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L4906d8.  throw v4;
  #L4906da.  return v4 @kind object;
  catch `java.lang.Throwable` @[L4906a6..L4906c0] goto L4906cc;
  catch `java.io.IOException` @[L4906c4..L4906ca] goto L4906ca;
  catch `java.io.IOException` @[L4906d2..L4906d8] goto L4906d8;
}
procedure `retrofit.client.Response` `replaceResponseBody`(`retrofit.client.Response` v7 @kind object, `retrofit.mime.TypedInput` v8 @kind object) @signature `Lretrofit/Utils;.replaceResponseBody:(Lretrofit/client/Response;Lretrofit/mime/TypedInput;)Lretrofit/client/Response;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L490710.  v6:= new `retrofit.client.Response`;
  #L490714.  call temp:= `getUrl`(v7) @signature `Lretrofit/client/Response;.getUrl:()Ljava/lang/String;` @kind virtual;
  #L49071a.  v1:= temp @kind object;
  #L49071c.  call temp:= `getStatus`(v7) @signature `Lretrofit/client/Response;.getStatus:()I` @kind virtual;
  #L490722.  v2:= temp;
  #L490724.  call temp:= `getReason`(v7) @signature `Lretrofit/client/Response;.getReason:()Ljava/lang/String;` @kind virtual;
  #L49072a.  v3:= temp @kind object;
  #L49072c.  call temp:= `getHeaders`(v7) @signature `Lretrofit/client/Response;.getHeaders:()Ljava/util/List;` @kind virtual;
  #L490732.  v4:= temp @kind object;
  #L490734.  v0:= v6 @kind object;
  #L490736.  v5:= v8 @kind object;
  #L490738.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lretrofit/client/Response;.<init>:(Ljava/lang/String;ILjava/lang/String;Ljava/util/List;Lretrofit/mime/TypedInput;)V` @kind direct;
  #L49073e.  return v6 @kind object;
}
procedure `byte`[] `streamToBytes`(`java.io.InputStream` v4 @kind object) @signature `Lretrofit/Utils;.streamToBytes:(Ljava/io/InputStream;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4905c0.  v0:= new `java.io.ByteArrayOutputStream`;
  #L4905c4.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L4905ca.  if v4 == 0 then goto L4905ee;
  #L4905ce.  v1:= 4096I;
  #L4905d2.  v1:= new `byte`[v1];
  #L4905d6.  call temp:= `read`(v4, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L4905dc.  v2:= temp;
  #L4905de.  v3:= -1I;
  #L4905e0.  if v2 == v3 then goto L4905ee;
  #L4905e4.  v3:= 0I;
  #L4905e6.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L4905ec.  goto L4905d6;
  #L4905ee.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L4905f4.  v4:= temp @kind object;
  #L4905f6.  return v4 @kind object;
}
procedure `void` `validateServiceClass`(`java.lang.Class` v1 @kind object) @signature `Lretrofit/Utils;.validateServiceClass:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L490768.  call temp:= `isInterface`(v1) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L49076e.  v0:= temp;
  #L490770.  if v0 == 0 then goto L490794;
  #L490774.  call temp:= `getInterfaces`(v1) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L49077a.  v1:= temp @kind object;
  #L49077c.  v1:= length @variable v1;
  #L49077e.  if v1 > 0 then goto L490784;
  #L490782.  return @kind void;
  #L490784.  v1:= new `java.lang.IllegalArgumentException`;
  #L490788.  v0:= "Interface definitions must not extend other interfaces." @kind object;
  #L49078c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490792.  throw v1;
  #L490794.  v1:= new `java.lang.IllegalArgumentException`;
  #L490798.  v0:= "Only interface endpoint definitions are supported." @kind object;
  #L49079c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4907a2.  throw v1;
}
