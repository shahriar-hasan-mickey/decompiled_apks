record `retrofit.client.ApacheClient$GenericHttpRequest` @kind class @AccessFlag  extends `org.apache.http.client.methods.HttpRequestBase` @kind class {
  `java.lang.String` `retrofit.client.ApacheClient$GenericHttpRequest.method` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.client.ApacheClient$GenericHttpRequest` v3 @kind this, `retrofit.client.Request` v4 @kind object) @signature `Lretrofit/client/ApacheClient$GenericHttpRequest;.<init>:(Lretrofit/client/Request;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L490c78.  call `<init>`(v3) @signature `Lorg/apache/http/client/methods/HttpRequestBase;.<init>:()V` @kind direct;
  #L490c7e.  call temp:= `getMethod`(v4) @signature `Lretrofit/client/Request;.getMethod:()Ljava/lang/String;` @kind virtual;
  #L490c84.  v0:= temp @kind object;
  #L490c86.  v3.`retrofit.client.ApacheClient$GenericHttpRequest.method` @type ^`java.lang.String` := v0 @kind object;
  #L490c8a.  call temp:= `getUrl`(v4) @signature `Lretrofit/client/Request;.getUrl:()Ljava/lang/String;` @kind virtual;
  #L490c90.  v0:= temp @kind object;
  #L490c92.  call temp:= `create`(v0) @signature `Ljava/net/URI;.create:(Ljava/lang/String;)Ljava/net/URI;` @kind static;
  #L490c98.  v0:= temp @kind object;
  #L490c9a.  call `setURI`(v3, v0) @signature `Lorg/apache/http/client/methods/HttpRequestBase;.setURI:(Ljava/net/URI;)V` @kind virtual;
  #L490ca0.  call temp:= `getHeaders`(v4) @signature `Lretrofit/client/Request;.getHeaders:()Ljava/util/List;` @kind virtual;
  #L490ca6.  v4:= temp @kind object;
  #L490ca8.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L490cae.  v4:= temp @kind object;
  #L490cb0.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L490cb6.  v0:= temp;
  #L490cb8.  if v0 == 0 then goto L490cea;
  #L490cbc.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L490cc2.  v0:= temp @kind object;
  #L490cc4.  v0:= (`retrofit.client.Header`) v0 @kind object;
  #L490cc8.  v1:= new `org.apache.http.message.BasicHeader`;
  #L490ccc.  call temp:= `getName`(v0) @signature `Lretrofit/client/Header;.getName:()Ljava/lang/String;` @kind virtual;
  #L490cd2.  v2:= temp @kind object;
  #L490cd4.  call temp:= `getValue`(v0) @signature `Lretrofit/client/Header;.getValue:()Ljava/lang/String;` @kind virtual;
  #L490cda.  v0:= temp @kind object;
  #L490cdc.  call `<init>`(v1, v2, v0) @signature `Lorg/apache/http/message/BasicHeader;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L490ce2.  call `addHeader`(v3, v1) @signature `Lorg/apache/http/client/methods/HttpRequestBase;.addHeader:(Lorg/apache/http/Header;)V` @kind virtual;
  #L490ce8.  goto L490cb0;
  #L490cea.  return @kind void;
}
procedure `java.lang.String` `getMethod`(`retrofit.client.ApacheClient$GenericHttpRequest` v1 @kind this) @signature `Lretrofit/client/ApacheClient$GenericHttpRequest;.getMethod:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490c60.  v0:= v1.`retrofit.client.ApacheClient$GenericHttpRequest.method` @type ^`java.lang.String` @kind object;
  #L490c64.  return v0 @kind object;
}
