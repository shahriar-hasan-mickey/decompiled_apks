record `retrofit.CallbackRunnable$2` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `retrofit.CallbackRunnable` `retrofit.CallbackRunnable$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `retrofit.RetrofitError` `retrofit.CallbackRunnable$2.val$handled` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit.CallbackRunnable$2` v0 @kind this, `retrofit.CallbackRunnable` v1 @kind object, `retrofit.RetrofitError` v2 @kind object) @signature `Lretrofit/CallbackRunnable$2;.<init>:(Lretrofit/CallbackRunnable;Lretrofit/RetrofitError;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48b734.  v0.`retrofit.CallbackRunnable$2.this$0` @type ^`retrofit.CallbackRunnable` := v1 @kind object;
  #L48b738.  v0.`retrofit.CallbackRunnable$2.val$handled` @type ^`retrofit.RetrofitError` := v2 @kind object;
  #L48b73c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48b742.  return @kind void;
}
procedure `void` `run`(`retrofit.CallbackRunnable$2` v2 @kind this) @signature `Lretrofit/CallbackRunnable$2;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48b754.  v0:= v2.`retrofit.CallbackRunnable$2.this$0` @type ^`retrofit.CallbackRunnable` @kind object;
  #L48b758.  call temp:= `access$000`(v0) @signature `Lretrofit/CallbackRunnable;.access$000:(Lretrofit/CallbackRunnable;)Lretrofit/Callback;` @kind static;
  #L48b75e.  v0:= temp @kind object;
  #L48b760.  v1:= v2.`retrofit.CallbackRunnable$2.val$handled` @type ^`retrofit.RetrofitError` @kind object;
  #L48b764.  call `failure`(v0, v1) @signature `Lretrofit/Callback;.failure:(Lretrofit/RetrofitError;)V` @kind interface;
  #L48b76a.  return @kind void;
}
