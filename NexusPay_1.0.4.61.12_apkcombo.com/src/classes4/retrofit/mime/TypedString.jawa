record `retrofit.mime.TypedString` @kind class @AccessFlag PUBLIC extends `retrofit.mime.TypedByteArray` @kind class {
}
procedure `void` `<init>`(`retrofit.mime.TypedString` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lretrofit/mime/TypedString;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L492794.  call temp:= `convertToBytes`(v2) @signature `Lretrofit/mime/TypedString;.convertToBytes:(Ljava/lang/String;)[B` @kind static;
  #L49279a.  v2:= temp @kind object;
  #L49279c.  v0:= "text/plain; charset=UTF-8" @kind object;
  #L4927a0.  call `<init>`(v1, v0, v2) @signature `Lretrofit/mime/TypedByteArray;.<init>:(Ljava/lang/String;[B)V` @kind direct;
  #L4927a6.  return @kind void;
}
procedure `byte`[] `convertToBytes`(`java.lang.String` v1 @kind object) @signature `Lretrofit/mime/TypedString;.convertToBytes:(Ljava/lang/String;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4926e4.  v0:= "UTF-8" @kind object;
  #L4926e8.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L4926ee.  v1:= temp @kind object;
  #L4926f0.  return v1 @kind object;
  #L4926f2.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L4926f4.  v0:= new `java.lang.RuntimeException`;
  #L4926f8.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4926fe.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L4926e4..L4926f0] goto L4926f2;
}
procedure `java.lang.String` `toString`(`retrofit.mime.TypedString` v4 @kind this) @signature `Lretrofit/mime/TypedString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L492720.  v0:= new `java.lang.StringBuilder`;
  #L492724.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49272a.  v1:= "TypedString[" @kind object;
  #L49272e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L492734.  v1:= new `java.lang.String`;
  #L492738.  call temp:= `getBytes`(v4) @signature `Lretrofit/mime/TypedByteArray;.getBytes:()[B` @kind virtual;
  #L49273e.  v2:= temp @kind object;
  #L492740.  v3:= "UTF-8" @kind object;
  #L492744.  call `<init>`(v1, v2, v3) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L49274a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L492750.  v1:= "]" @kind object;
  #L492754.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49275a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L492760.  v0:= temp @kind object;
  #L492762.  return v0 @kind object;
  #L492764.  v0:= new `java.lang.AssertionError`;
  #L492768.  v1:= "Must be able to decode UTF-8" @kind object;
  #L49276c.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L492772.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L492720..L492762] goto L492764;
}
