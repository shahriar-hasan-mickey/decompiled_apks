record `retrofit.Types$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit.Types$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit.Types$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.Types$WildcardTypeImpl` v5 @kind this, `java.lang.reflect.Type`[] v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit/Types$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48fdb4.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L48fdb8.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48fdbe.  v1:= length @variable v7;
  #L48fdc0.  v2:= 1I;
  #L48fdc2.  if v1 > v2 then goto L48fe3a;
  #L48fdc6.  v1:= length @variable v6;
  #L48fdc8.  if v1 != v2 then goto L48fe2e;
  #L48fdcc.  v1:= length @variable v7;
  #L48fdce.  v3:= 0I;
  #L48fdd0.  v4:= 0I;
  #L48fdd2.  if v1 != v2 then goto L48fe0c;
  #L48fdd6.  v1:= v7[v4] @kind object;
  #L48fdda.  if v1 == 0 then goto L48fe0a;
  #L48fdde.  v1:= v7[v4] @kind object;
  #L48fde2.  call `access$000`(v1) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @kind static;
  #L48fde8.  v6:= v6[v4] @kind object;
  #L48fdec.  if v6 != v0 then goto L48fdfe;
  #L48fdf0.  v6:= v7[v4] @kind object;
  #L48fdf4.  v5.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L48fdf8.  v5.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L48fdfc.  goto L48fe2a;
  #L48fdfe.  v6:= new `java.lang.IllegalArgumentException`;
  #L48fe02.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L48fe08.  throw v6;
  #L48fe0a.  throw v3;
  #L48fe0c.  v7:= v6[v4] @kind object;
  #L48fe10.  if v7 == 0 then goto L48fe2c;
  #L48fe14.  v7:= v6[v4] @kind object;
  #L48fe18.  call `access$000`(v7) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @kind static;
  #L48fe1e.  v5.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v3 @kind object;
  #L48fe22.  v6:= v6[v4] @kind object;
  #L48fe26.  v5.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L48fe2a.  return @kind void;
  #L48fe2c.  throw v3;
  #L48fe2e.  v6:= new `java.lang.IllegalArgumentException`;
  #L48fe32.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L48fe38.  throw v6;
  #L48fe3a.  v6:= new `java.lang.IllegalArgumentException`;
  #L48fe3e.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L48fe44.  throw v6;
}
procedure `boolean` `equals`(`retrofit.Types$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit/Types$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48fc68.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L48fc6c.  if v0 == 0 then goto L48fc84;
  #L48fc70.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L48fc74.  call temp:= `equals`(v1, v2) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L48fc7a.  v2:= temp;
  #L48fc7c.  if v2 == 0 then goto L48fc84;
  #L48fc80.  v2:= 1I;
  #L48fc82.  goto L48fc86;
  #L48fc84.  v2:= 0I;
  #L48fc86.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit.Types$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48fd60.  v0:= v3.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fd64.  if v0 == 0 then goto L48fd76;
  #L48fd68.  v1:= 1I;
  #L48fd6a.  v1:= new `java.lang.reflect.Type`[v1];
  #L48fd6e.  v2:= 0I;
  #L48fd70.  v1[v2]:= v0 @kind object;
  #L48fd74.  goto L48fd7e;
  #L48fd76.  call temp:= `access$200`() @signature `Lretrofit/Types;.access$200:()[Ljava/lang/reflect/Type;` @kind static;
  #L48fd7c.  v1:= temp @kind object;
  #L48fd7e.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit.Types$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48fd90.  v0:= 1I;
  #L48fd92.  v0:= new `java.lang.reflect.Type`[v0];
  #L48fd96.  v1:= v3.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fd9a.  v2:= 0I;
  #L48fd9c.  v0[v2]:= v1 @kind object;
  #L48fda0.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit.Types$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48fc98.  v0:= v2.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fc9c.  if v0 == 0 then goto L48fcae;
  #L48fca0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48fca6.  v0:= temp;
  #L48fca8.  v0:= v0 + 31;
  #L48fcac.  goto L48fcb0;
  #L48fcae.  v0:= 1I;
  #L48fcb0.  v1:= v2.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fcb4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48fcba.  v1:= temp;
  #L48fcbc.  v1:= v1 + 31;
  #L48fcc0.  v0:= v0 ^~ v1 @kind int;
  #L48fcc2.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit.Types$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48fcd4.  v0:= v2.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fcd8.  if v0 == 0 then goto L48fd0c;
  #L48fcdc.  v0:= new `java.lang.StringBuilder`;
  #L48fce0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48fce6.  v1:= "? super " @kind object;
  #L48fcea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fcf0.  v1:= v2.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fcf4.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L48fcfa.  v1:= temp @kind object;
  #L48fcfc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fd02.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48fd08.  v0:= temp @kind object;
  #L48fd0a.  return v0 @kind object;
  #L48fd0c.  v0:= v2.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fd10.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L48fd14.  if v0 != v1 then goto L48fd1e;
  #L48fd18.  v0:= "?" @kind object;
  #L48fd1c.  return v0 @kind object;
  #L48fd1e.  v0:= new `java.lang.StringBuilder`;
  #L48fd22.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48fd28.  v1:= "? extends " @kind object;
  #L48fd2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fd32.  v1:= v2.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L48fd36.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L48fd3c.  v1:= temp @kind object;
  #L48fd3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48fd44.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48fd4a.  v0:= temp @kind object;
  #L48fd4c.  return v0 @kind object;
}
