record `i` @kind class @AccessFlag PUBLIC_SYNTHETIC {
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Li;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L188ac0.  v0:= v7 - v9 @kind long;
  #L188ac4.  v9:= v9 ^~ v7 @kind long;
  #L188ac6.  v2:= 1I;
  #L188ac8.  v3:= 0I;
  #L188aca.  v4:= 0L;
  #L188ace.  v6:= lcmp(v9, v4);
  #L188ad2.  if v6 < 0 then goto L188ada;
  #L188ad6.  v9:= 1I;
  #L188ad8.  goto L188adc;
  #L188ada.  v9:= 0I;
  #L188adc.  v7:= v7 ^~ v0 @kind long;
  #L188ade.  v10:= lcmp(v7, v4);
  #L188ae2.  if v10 < 0 then goto L188ae8;
  #L188ae6.  goto L188aea;
  #L188ae8.  v2:= 0I;
  #L188aea.  v7:= v9 ^| v2 @kind int;
  #L188aee.  if v7 == 0 then goto L188af4;
  #L188af2.  return v0 @kind wide;
  #L188af4.  v7:= new `java.lang.ArithmeticException`;
  #L188af8.  call `<init>`(v7) @signature `Ljava/lang/ArithmeticException;.<init>:()V` @kind direct;
  #L188afe.  throw v7;
}
