record `g` @kind class @AccessFlag PUBLIC_SYNTHETIC {
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Lg;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1889d0.  v0:= v7 + v9 @kind long;
  #L1889d4.  v9:= v9 ^~ v7 @kind long;
  #L1889d6.  v2:= 1I;
  #L1889d8.  v3:= 0I;
  #L1889da.  v4:= 0L;
  #L1889de.  v6:= lcmp(v9, v4);
  #L1889e2.  if v6 >= 0 then goto L1889ea;
  #L1889e6.  v9:= 1I;
  #L1889e8.  goto L1889ec;
  #L1889ea.  v9:= 0I;
  #L1889ec.  v7:= v7 ^~ v0 @kind long;
  #L1889ee.  v10:= lcmp(v7, v4);
  #L1889f2.  if v10 < 0 then goto L1889f8;
  #L1889f6.  goto L1889fa;
  #L1889f8.  v2:= 0I;
  #L1889fa.  v7:= v9 ^| v2 @kind int;
  #L1889fe.  if v7 == 0 then goto L188a04;
  #L188a02.  return v0 @kind wide;
  #L188a04.  v7:= new `java.lang.ArithmeticException`;
  #L188a08.  call `<init>`(v7) @signature `Ljava/lang/ArithmeticException;.<init>:()V` @kind direct;
  #L188a0e.  throw v7;
}
