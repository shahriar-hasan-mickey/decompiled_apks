record `d` @kind class @AccessFlag PUBLIC_SYNTHETIC {
}
procedure `long` `a`(`long` v8 , `long` v10 ) @signature `Ld;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1887fc.  v0:= 0L;
  #L188800.  v2:= -9223372036854775808L;
  #L188804.  v4:= lcmp(v10, v0);
  #L188808.  if v4 >= 0 then goto L188820;
  #L18880c.  v8:= v8 ^~ v2 @kind long;
  #L18880e.  v10:= v10 ^~ v2 @kind long;
  #L188810.  v2:= lcmp(v8, v10);
  #L188814.  if v2 >= 0 then goto L18881a;
  #L188818.  return v0 @kind wide;
  #L18881a.  v8:= 1L;
  #L18881e.  return v8 @kind wide;
  #L188820.  v4:= lcmp(v8, v0);
  #L188824.  if v4 < 0 then goto L18882c;
  #L188828.  v8:= v8 / v10 @kind long;
  #L18882a.  return v8 @kind wide;
  #L18882c.  v0:= 1I;
  #L18882e.  v4:= v8 ^>> v0 @kind long;
  #L188832.  v4:= v4 / v10 @kind long;
  #L188834.  v4:= v4 ^< v0 @kind long;
  #L188836.  v6:= v4 * v10 @kind long;
  #L18883a.  v8:= v8 - v6 @kind long;
  #L18883c.  v8:= v8 ^~ v2 @kind long;
  #L18883e.  v10:= v10 ^~ v2 @kind long;
  #L188840.  v1:= lcmp(v8, v10);
  #L188844.  if v1 < 0 then goto L18884a;
  #L188848.  goto L18884c;
  #L18884a.  v0:= 0I;
  #L18884c.  v8:= (`long`) v0 @kind i2l;
  #L18884e.  v4:= v4 + v8 @kind long;
  #L188850.  return v4 @kind wide;
}
