record `com.bumptech.glide.signature.ObjectKey` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.Key` @kind interface {
  `java.lang.Object` `com.bumptech.glide.signature.ObjectKey.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.signature.ObjectKey` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/signature/ObjectKey;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ef6a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ef6a6.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3ef6ac.  v1:= temp @kind object;
  #L3ef6ae.  v0.`com.bumptech.glide.signature.ObjectKey.a` @type ^`java.lang.Object` := v1 @kind object;
  #L3ef6b2.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.signature.ObjectKey` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/signature/ObjectKey;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef608.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.signature.ObjectKey` @kind boolean;
  #L3ef60c.  if v0 == 0 then goto L3ef626;
  #L3ef610.  v2:= (`com.bumptech.glide.signature.ObjectKey`) v2 @kind object;
  #L3ef614.  v0:= v1.`com.bumptech.glide.signature.ObjectKey.a` @type ^`java.lang.Object` @kind object;
  #L3ef618.  v2:= v2.`com.bumptech.glide.signature.ObjectKey.a` @type ^`java.lang.Object` @kind object;
  #L3ef61c.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ef622.  v2:= temp;
  #L3ef624.  return v2;
  #L3ef626.  v2:= 0I;
  #L3ef628.  return v2;
}
procedure `int` `hashCode`(`com.bumptech.glide.signature.ObjectKey` v1 @kind this) @signature `Lcom/bumptech/glide/signature/ObjectKey;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef63c.  v0:= v1.`com.bumptech.glide.signature.ObjectKey.a` @type ^`java.lang.Object` @kind object;
  #L3ef640.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ef646.  v0:= temp;
  #L3ef648.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.signature.ObjectKey` v2 @kind this) @signature `Lcom/bumptech/glide/signature/ObjectKey;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef65c.  v0:= new `java.lang.StringBuilder`;
  #L3ef660.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ef666.  v1:= "ObjectKey{object=" @kind object;
  #L3ef66a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef670.  v1:= v2.`com.bumptech.glide.signature.ObjectKey.a` @type ^`java.lang.Object` @kind object;
  #L3ef674.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef67a.  v1:= 125I;
  #L3ef67e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef684.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ef68a.  v0:= temp @kind object;
  #L3ef68c.  return v0 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.signature.ObjectKey` v2 @kind this, `java.security.MessageDigest` v3 @kind object) @signature `Lcom/bumptech/glide/signature/ObjectKey;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef6c4.  v0:= v2.`com.bumptech.glide.signature.ObjectKey.a` @type ^`java.lang.Object` @kind object;
  #L3ef6c8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ef6ce.  v0:= temp @kind object;
  #L3ef6d0.  v1:= `@@com.bumptech.glide.load.Key.CHARSET` @type ^`java.nio.charset.Charset` @kind object;
  #L3ef6d4.  call temp:= `getBytes`(v0, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3ef6da.  v0:= temp @kind object;
  #L3ef6dc.  call `update`(v3, v0) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L3ef6e2.  return @kind void;
}
