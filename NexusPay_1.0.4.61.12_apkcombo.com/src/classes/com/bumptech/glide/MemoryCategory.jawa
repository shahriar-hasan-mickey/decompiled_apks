record `com.bumptech.glide.MemoryCategory` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `float` `com.bumptech.glide.MemoryCategory.multiplier` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.MemoryCategory`[] `@@com.bumptech.glide.MemoryCategory.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `com.bumptech.glide.MemoryCategory` `@@com.bumptech.glide.MemoryCategory.HIGH` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.bumptech.glide.MemoryCategory` `@@com.bumptech.glide.MemoryCategory.LOW` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.bumptech.glide.MemoryCategory` `@@com.bumptech.glide.MemoryCategory.NORMAL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/MemoryCategory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c6378.  v0:= new `com.bumptech.glide.MemoryCategory`;
  #L3c637c.  v1:= "LOW" @kind object;
  #L3c6380.  v2:= 0I;
  #L3c6382.  v3:= 0.5F;
  #L3c6386.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/MemoryCategory;.<init>:(Ljava/lang/String;IF)V` @kind direct;
  #L3c638c.  `@@com.bumptech.glide.MemoryCategory.LOW` @type ^`com.bumptech.glide.MemoryCategory` := v0 @kind object;
  #L3c6390.  v0:= new `com.bumptech.glide.MemoryCategory`;
  #L3c6394.  v1:= "NORMAL" @kind object;
  #L3c6398.  v3:= 1I;
  #L3c639a.  v4:= 1.0F;
  #L3c639e.  call `<init>`(v0, v1, v3, v4) @signature `Lcom/bumptech/glide/MemoryCategory;.<init>:(Ljava/lang/String;IF)V` @kind direct;
  #L3c63a4.  `@@com.bumptech.glide.MemoryCategory.NORMAL` @type ^`com.bumptech.glide.MemoryCategory` := v0 @kind object;
  #L3c63a8.  v0:= new `com.bumptech.glide.MemoryCategory`;
  #L3c63ac.  v1:= "HIGH" @kind object;
  #L3c63b0.  v4:= 2I;
  #L3c63b2.  v5:= 1.5F;
  #L3c63b6.  call `<init>`(v0, v1, v4, v5) @signature `Lcom/bumptech/glide/MemoryCategory;.<init>:(Ljava/lang/String;IF)V` @kind direct;
  #L3c63bc.  `@@com.bumptech.glide.MemoryCategory.HIGH` @type ^`com.bumptech.glide.MemoryCategory` := v0 @kind object;
  #L3c63c0.  v1:= 3I;
  #L3c63c2.  v1:= new `com.bumptech.glide.MemoryCategory`[v1];
  #L3c63c6.  v5:= `@@com.bumptech.glide.MemoryCategory.LOW` @type ^`com.bumptech.glide.MemoryCategory` @kind object;
  #L3c63ca.  v1[v2]:= v5 @kind object;
  #L3c63ce.  v2:= `@@com.bumptech.glide.MemoryCategory.NORMAL` @type ^`com.bumptech.glide.MemoryCategory` @kind object;
  #L3c63d2.  v1[v3]:= v2 @kind object;
  #L3c63d6.  v1[v4]:= v0 @kind object;
  #L3c63da.  `@@com.bumptech.glide.MemoryCategory.$VALUES` @type ^`com.bumptech.glide.MemoryCategory`[] := v1 @kind object;
  #L3c63de.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.MemoryCategory` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `float` v3 ) @signature `Lcom/bumptech/glide/MemoryCategory;.<init>:(Ljava/lang/String;IF)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3c63f0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3c63f6.  v0.`com.bumptech.glide.MemoryCategory.multiplier` @type ^`float` := v3;
  #L3c63fa.  return @kind void;
}
procedure `com.bumptech.glide.MemoryCategory` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/MemoryCategory;.valueOf:(Ljava/lang/String;)Lcom/bumptech/glide/MemoryCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c6318.  v0:= constclass @type ^`com.bumptech.glide.MemoryCategory` @kind object;
  #L3c631c.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L3c6322.  v1:= temp @kind object;
  #L3c6324.  v1:= (`com.bumptech.glide.MemoryCategory`) v1 @kind object;
  #L3c6328.  return v1 @kind object;
}
procedure `com.bumptech.glide.MemoryCategory`[] `values`() @signature `Lcom/bumptech/glide/MemoryCategory;.values:()[Lcom/bumptech/glide/MemoryCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c633c.  v0:= `@@com.bumptech.glide.MemoryCategory.$VALUES` @type ^`com.bumptech.glide.MemoryCategory`[] @kind object;
  #L3c6340.  call temp:= `clone`(v0) @signature `[Lcom/bumptech/glide/MemoryCategory;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3c6346.  v0:= temp @kind object;
  #L3c6348.  v0:= (`com.bumptech.glide.MemoryCategory`[]) v0 @kind object;
  #L3c634c.  return v0 @kind object;
}
procedure `float` `getMultiplier`(`com.bumptech.glide.MemoryCategory` v1 @kind this) @signature `Lcom/bumptech/glide/MemoryCategory;.getMultiplier:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c6360.  v0:= v1.`com.bumptech.glide.MemoryCategory.multiplier` @type ^`float`;
  #L3c6364.  return v0;
}
