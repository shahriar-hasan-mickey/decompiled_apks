record `com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.data.DataFetcher` @kind interface, `okhttp3.Callback` @kind interface {
  `okhttp3.Call$Factory` `com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.model.GlideUrl` `com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.b` @AccessFlag PRIVATE_FINAL;
  `java.io.InputStream` `com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.c` @AccessFlag PRIVATE;
  `okhttp3.ResponseBody` `com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.d` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.data.DataFetcher$DataCallback` `com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.e` @AccessFlag PRIVATE;
  `okhttp3.Call` `com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.f` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v0 @kind this, `okhttp3.Call$Factory` v1 @kind object, `com.bumptech.glide.load.model.GlideUrl` v2 @kind object) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.<init>:(Lokhttp3/Call$Factory;Lcom/bumptech/glide/load/model/GlideUrl;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3cc7d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cc7da.  v0.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.a` @type ^`okhttp3.Call$Factory` := v1 @kind object;
  #L3cc7de.  v0.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.b` @type ^`com.bumptech.glide.load.model.GlideUrl` := v2 @kind object;
  #L3cc7e2.  return @kind void;
}
procedure `void` `cancel`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v1 @kind this) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cc7f4.  v0:= v1.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.f` @type ^`okhttp3.Call` @kind object;
  #L3cc7f8.  if v0 == 0 then goto L3cc802;
  #L3cc7fc.  call `cancel`(v0) @signature `Lokhttp3/Call;.cancel:()V` @kind interface;
  #L3cc802.  return @kind void;
}
procedure `void` `cleanup`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v1 @kind this) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.cleanup:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cc814.  v0:= v1.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.c` @type ^`java.io.InputStream` @kind object;
  #L3cc818.  if v0 == 0 then goto L3cc82a;
  #L3cc81c.  v0:= v1.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.c` @type ^`java.io.InputStream` @kind object;
  #L3cc820.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3cc826.  goto L3cc82a;
  #L3cc828.  
  #L3cc82a.  v0:= v1.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.d` @type ^`okhttp3.ResponseBody` @kind object;
  #L3cc82e.  if v0 == 0 then goto L3cc838;
  #L3cc832.  call `close`(v0) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L3cc838.  v0:= 0I;
  #L3cc83a.  v1.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` := v0 @kind object;
  #L3cc83e.  return @kind void;
  catch `java.io.IOException` @[L3cc814..L3cc826] goto L3cc828;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v1 @kind this) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cc7bc.  v0:= constclass @type ^`java.io.InputStream` @kind object;
  #L3cc7c0.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.DataSource` `getDataSource`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v1 @kind this) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.getDataSource:()Lcom/bumptech/glide/load/DataSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cc7a4.  v0:= `@@com.bumptech.glide.load.DataSource.REMOTE` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3cc7a8.  return v0 @kind object;
}
procedure `void` `loadData`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v3 @kind this, `com.bumptech.glide.Priority` v4 @kind object, `com.bumptech.glide.load.data.DataFetcher$DataCallback` v5 @kind object) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.loadData:(Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cc860.  v4:= new `okhttp3.Request$Builder`;
  #L3cc864.  call `<init>`(v4) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L3cc86a.  v0:= v3.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.b` @type ^`com.bumptech.glide.load.model.GlideUrl` @kind object;
  #L3cc86e.  call temp:= `toStringUrl`(v0) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.toStringUrl:()Ljava/lang/String;` @kind virtual;
  #L3cc874.  v0:= temp @kind object;
  #L3cc876.  call temp:= `url`(v4, v0) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L3cc87c.  v4:= temp @kind object;
  #L3cc87e.  v0:= v3.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.b` @type ^`com.bumptech.glide.load.model.GlideUrl` @kind object;
  #L3cc882.  call temp:= `getHeaders`(v0) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getHeaders:()Ljava/util/Map;` @kind virtual;
  #L3cc888.  v0:= temp @kind object;
  #L3cc88a.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3cc890.  v0:= temp @kind object;
  #L3cc892.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3cc898.  v0:= temp @kind object;
  #L3cc89a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cc8a0.  v1:= temp;
  #L3cc8a2.  if v1 == 0 then goto L3cc8d2;
  #L3cc8a6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cc8ac.  v1:= temp @kind object;
  #L3cc8ae.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3cc8b2.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3cc8b8.  v2:= temp @kind object;
  #L3cc8ba.  v2:= (`java.lang.String`) v2 @kind object;
  #L3cc8be.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3cc8c4.  v1:= temp @kind object;
  #L3cc8c6.  v1:= (`java.lang.String`) v1 @kind object;
  #L3cc8ca.  call temp:= `addHeader`(v4, v2, v1) @signature `Lokhttp3/Request$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L3cc8d0.  goto L3cc89a;
  #L3cc8d2.  call temp:= `build`(v4) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L3cc8d8.  v4:= temp @kind object;
  #L3cc8da.  v3.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` := v5 @kind object;
  #L3cc8de.  v5:= v3.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.a` @type ^`okhttp3.Call$Factory` @kind object;
  #L3cc8e2.  call temp:= `newCall`(v5, v4) @signature `Lokhttp3/Call$Factory;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @kind interface;
  #L3cc8e8.  v4:= temp @kind object;
  #L3cc8ea.  v3.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.f` @type ^`okhttp3.Call` := v4 @kind object;
  #L3cc8ee.  v4:= v3.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.f` @type ^`okhttp3.Call` @kind object;
  #L3cc8f2.  call `enqueue`(v4, v3) @signature `Lokhttp3/Call;.enqueue:(Lokhttp3/Callback;)V` @kind interface;
  #L3cc8f8.  return @kind void;
}
procedure `void` `onFailure`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v1 @kind this, `okhttp3.Call` v2 @kind object, `java.io.IOException` v3 @kind object) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.onFailure:(Lokhttp3/Call;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cc90c.  v2:= "OkHttpFetcher" @kind object;
  #L3cc910.  v0:= 3I;
  #L3cc912.  call temp:= `isLoggable`(v2, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3cc918.  v0:= temp;
  #L3cc91a.  if v0 == 0 then goto L3cc928;
  #L3cc91e.  v0:= "OkHttp failed to obtain result" @kind object;
  #L3cc922.  call temp:= `d`(v2, v0, v3) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3cc928.  v2:= v1.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3cc92c.  call `onLoadFailed`(v2, v3) @signature `Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;.onLoadFailed:(Ljava/lang/Exception;)V` @kind interface;
  #L3cc932.  return @kind void;
}
procedure `void` `onResponse`(`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher` v2 @kind this, `okhttp3.Call` v3 @kind object, `okhttp3.Response` v4 @kind object) @signature `Lcom/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher;.onResponse:(Lokhttp3/Call;Lokhttp3/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cc944.  call temp:= `body`(v4) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L3cc94a.  v3:= temp @kind object;
  #L3cc94c.  v2.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.d` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L3cc950.  call temp:= `isSuccessful`(v4) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L3cc956.  v3:= temp;
  #L3cc958.  if v3 == 0 then goto L3cc998;
  #L3cc95c.  v3:= v2.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.d` @type ^`okhttp3.ResponseBody` @kind object;
  #L3cc960.  call temp:= `checkNotNull`(v3) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cc966.  v3:= temp @kind object;
  #L3cc968.  v3:= (`okhttp3.ResponseBody`) v3 @kind object;
  #L3cc96c.  call temp:= `contentLength`(v3) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L3cc972.  v3:= temp @kind wide;
  #L3cc974.  v0:= v2.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.d` @type ^`okhttp3.ResponseBody` @kind object;
  #L3cc978.  call temp:= `byteStream`(v0) @signature `Lokhttp3/ResponseBody;.byteStream:()Ljava/io/InputStream;` @kind virtual;
  #L3cc97e.  v0:= temp @kind object;
  #L3cc980.  call temp:= `obtain`(v0, v3) @signature `Lcom/bumptech/glide/util/ContentLengthInputStream;.obtain:(Ljava/io/InputStream;J)Ljava/io/InputStream;` @kind static;
  #L3cc986.  v3:= temp @kind object;
  #L3cc988.  v2.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.c` @type ^`java.io.InputStream` := v3 @kind object;
  #L3cc98c.  v4:= v2.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3cc990.  call `onDataReady`(v4, v3) @signature `Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;.onDataReady:(Ljava/lang/Object;)V` @kind interface;
  #L3cc996.  goto L3cc9bc;
  #L3cc998.  v3:= v2.`com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3cc99c.  v0:= new `com.bumptech.glide.load.HttpException`;
  #L3cc9a0.  call temp:= `message`(v4) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L3cc9a6.  v1:= temp @kind object;
  #L3cc9a8.  call temp:= `code`(v4) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L3cc9ae.  v4:= temp;
  #L3cc9b0.  call `<init>`(v0, v1, v4) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3cc9b6.  call `onLoadFailed`(v3, v0) @signature `Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;.onLoadFailed:(Ljava/lang/Exception;)V` @kind interface;
  #L3cc9bc.  return @kind void;
}
