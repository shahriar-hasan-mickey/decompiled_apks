record `com.bumptech.glide.gifdecoder.GifHeaderParser` @kind class @AccessFlag PUBLIC {
  `byte`[] `com.bumptech.glide.gifdecoder.GifHeaderParser.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.bumptech.glide.gifdecoder.GifHeaderParser.b` @AccessFlag PRIVATE;
  `com.bumptech.glide.gifdecoder.GifHeader` `com.bumptech.glide.gifdecoder.GifHeaderParser.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.gifdecoder.GifHeaderParser.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3caccc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cacd2.  v0:= 256I;
  #L3cacd6.  v0:= new `byte`[v0];
  #L3cacda.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] := v0 @kind object;
  #L3cacde.  v0:= 0I;
  #L3cace0.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int` := v0;
  #L3cace4.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3caa74.  v0:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caa78.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int`;
  #L3caa7c.  if v0 == 0 then goto L3caa84;
  #L3caa80.  v0:= 1I;
  #L3caa82.  goto L3caa86;
  #L3caa84.  v0:= 0I;
  #L3caa86.  return v0;
}
procedure `int` `b`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3cabb8.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cabbc.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L3cabc2.  v0:= temp;
  #L3cabc4.  v0:= v0 ^& 255;
  #L3cabc8.  goto L3cabd6;
  #L3cabca.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cabce.  v1:= 1I;
  #L3cabd0.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3cabd4.  v0:= 0I;
  #L3cabd6.  return v0;
  catch `java.lang.Exception` @[L3cabb8..L3cabc4] goto L3cabca;
}
procedure `void` `c`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v8 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3cad14.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cad18.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cad1c.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3cad22.  v1:= temp;
  #L3cad24.  v0.`com.bumptech.glide.gifdecoder.a.a` @type ^`int` := v1;
  #L3cad28.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cad2c.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cad30.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3cad36.  v1:= temp;
  #L3cad38.  v0.`com.bumptech.glide.gifdecoder.a.b` @type ^`int` := v1;
  #L3cad3c.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cad40.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cad44.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3cad4a.  v1:= temp;
  #L3cad4c.  v0.`com.bumptech.glide.gifdecoder.a.c` @type ^`int` := v1;
  #L3cad50.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cad54.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cad58.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3cad5e.  v1:= temp;
  #L3cad60.  v0.`com.bumptech.glide.gifdecoder.a.d` @type ^`int` := v1;
  #L3cad64.  call temp:= `b`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cad6a.  v0:= temp;
  #L3cad6c.  v1:= v0 ^& 128;
  #L3cad70.  v2:= 0I;
  #L3cad72.  v3:= 1I;
  #L3cad74.  if v1 == 0 then goto L3cad7c;
  #L3cad78.  v1:= 1I;
  #L3cad7a.  goto L3cad7e;
  #L3cad7c.  v1:= 0I;
  #L3cad7e.  v4:= 2.0D;
  #L3cad82.  v6:= v0 ^& 7;
  #L3cad86.  v6:= v6 + v3 @kind int;
  #L3cad88.  v6:= (`double`) v6 @kind i2d;
  #L3cad8a.  call temp:= `pow`(v4, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3cad90.  v4:= temp @kind wide;
  #L3cad92.  v4:= (`int`) v4 @kind d2i;
  #L3cad94.  v5:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cad98.  v5:= v5.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cad9c.  v0:= v0 ^& 64;
  #L3cada0.  if v0 == 0 then goto L3cada6;
  #L3cada4.  v2:= 1I;
  #L3cada6.  v5.`com.bumptech.glide.gifdecoder.a.e` @type ^`boolean` := v2 @kind boolean;
  #L3cadaa.  if v1 == 0 then goto L3cadc4;
  #L3cadae.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cadb2.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cadb6.  call temp:= `e`(v8, v4) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.e:(I)[I` @kind direct;
  #L3cadbc.  v1:= temp @kind object;
  #L3cadbe.  v0.`com.bumptech.glide.gifdecoder.a.k` @type ^`int`[] := v1 @kind object;
  #L3cadc2.  goto L3cadd2;
  #L3cadc4.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cadc8.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cadcc.  v1:= 0I;
  #L3cadce.  v0.`com.bumptech.glide.gifdecoder.a.k` @type ^`int`[] := v1 @kind object;
  #L3cadd2.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cadd6.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cadda.  v1:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cadde.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3cade4.  v1:= temp;
  #L3cade6.  v0.`com.bumptech.glide.gifdecoder.a.j` @type ^`int` := v1;
  #L3cadea.  call `o`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.o:()V` @kind direct;
  #L3cadf0.  call temp:= `a`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3cadf6.  v0:= temp;
  #L3cadf8.  if v0 == 0 then goto L3cadfe;
  #L3cadfc.  return @kind void;
  #L3cadfe.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cae02.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3cae06.  v1:= v1 + v3 @kind int;
  #L3cae08.  v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int` := v1;
  #L3cae0c.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.e` @type ^`java.util.List` @kind object;
  #L3cae10.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cae14.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cae1a.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v6 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3cae2c.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cae32.  v0:= temp;
  #L3cae34.  v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int` := v0;
  #L3cae38.  if v0 <= 0 then goto L3caeca;
  #L3cae3c.  v0:= 0I;
  #L3cae3e.  v1:= 0I;
  #L3cae40.  v2:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int`;
  #L3cae44.  if v0 >= v2 then goto L3caeca;
  #L3cae48.  v1:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int`;
  #L3cae4c.  v1:= v1 - v0 @kind int;
  #L3cae4e.  v2:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cae52.  v3:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3cae56.  call temp:= `get`(v2, v3, v0, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3cae5c.  v0:= v0 + v1 @kind int;
  #L3cae5e.  goto L3cae40;
  #L3cae60.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L3cae62.  v3:= 3I;
  #L3cae64.  v4:= "GifHeaderParser" @kind object;
  #L3cae68.  call temp:= `isLoggable`(v4, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3cae6e.  v3:= temp;
  #L3cae70.  if v3 == 0 then goto L3caec0;
  #L3cae74.  v3:= new `java.lang.StringBuilder`;
  #L3cae78.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cae7e.  v5:= "Error Reading Block n: " @kind object;
  #L3cae82.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cae88.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cae8e.  v0:= " count: " @kind object;
  #L3cae92.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cae98.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cae9e.  v0:= " blockSize: " @kind object;
  #L3caea2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3caea8.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int`;
  #L3caeac.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3caeb2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3caeb8.  v0:= temp @kind object;
  #L3caeba.  call temp:= `d`(v4, v0, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3caec0.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caec4.  v1:= 1I;
  #L3caec6.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3caeca.  return @kind void;
  catch `java.lang.Exception` @[L3cae40..L3cae5c] goto L3cae60;
}
procedure `int`[] `e`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v9 @kind this, `int` v10 ) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.e:(I)[I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3cac18.  v0:= v10 * 3;
  #L3cac1c.  v0:= new `byte`[v0];
  #L3cac20.  v1:= 0I;
  #L3cac22.  v2:= v9.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cac26.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3cac2c.  v2:= 256I;
  #L3cac30.  v1:= new `int`[v2];
  #L3cac34.  v2:= 0I;
  #L3cac36.  v3:= 0I;
  #L3cac38.  if v2 >= v10 then goto L3caca8;
  #L3cac3c.  v4:= v3 + 1;
  #L3cac40.  v3:= v0[v3] @kind byte;
  #L3cac44.  v3:= v3 ^& 255;
  #L3cac48.  v5:= v4 + 1;
  #L3cac4c.  v4:= v0[v4] @kind byte;
  #L3cac50.  v4:= v4 ^& 255;
  #L3cac54.  v6:= v5 + 1;
  #L3cac58.  v5:= v0[v5] @kind byte;
  #L3cac5c.  v5:= v5 ^& 255;
  #L3cac60.  v7:= v2 + 1;
  #L3cac64.  v8:= -16777216I;
  #L3cac68.  v3:= v3 ^< 16;
  #L3cac6c.  v3:= v3 ^| v8 @kind int;
  #L3cac6e.  v4:= v4 ^< 8;
  #L3cac72.  v3:= v3 ^| v4 @kind int;
  #L3cac74.  v3:= v3 ^| v5 @kind int;
  #L3cac76.  v1[v2]:= v3;
  #L3cac7a.  v3:= v6;
  #L3cac7c.  v2:= v7;
  #L3cac7e.  goto L3cac38;
  #L3cac80.  v10:= Exception @type ^`java.nio.BufferUnderflowException` @kind object;
  #L3cac82.  v0:= "GifHeaderParser" @kind object;
  #L3cac86.  v2:= 3I;
  #L3cac88.  call temp:= `isLoggable`(v0, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3cac8e.  v2:= temp;
  #L3cac90.  if v2 == 0 then goto L3cac9e;
  #L3cac94.  v2:= "Format Error Reading Color Table" @kind object;
  #L3cac98.  call temp:= `d`(v0, v2, v10) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3cac9e.  v10:= v9.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caca2.  v0:= 1I;
  #L3caca4.  v10.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v0;
  #L3caca8.  return v1 @kind object;
  catch `java.nio.BufferUnderflowException` @[L3cac22..L3cac7a] goto L3cac80;
}
procedure `void` `f`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3caeec.  v0:= 2147483647I;
  #L3caef2.  call `g`(v1, v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.g:(I)V` @kind direct;
  #L3caef8.  return @kind void;
}
procedure `void` `g`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v5 @kind this, `int` v6 ) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.g:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3caf0c.  v0:= 0I;
  #L3caf0e.  v1:= 0I;
  #L3caf10.  if v1 != 0 then goto L3cb030;
  #L3caf14.  call temp:= `a`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3caf1a.  v2:= temp;
  #L3caf1c.  if v2 != 0 then goto L3cb030;
  #L3caf20.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caf24.  v2:= v2.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3caf28.  if v2 > v6 then goto L3cb030;
  #L3caf2c.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3caf32.  v2:= temp;
  #L3caf34.  v3:= 33I;
  #L3caf38.  v4:= 1I;
  #L3caf3a.  if v2 == v3 then goto L3caf7e;
  #L3caf3e.  v3:= 44I;
  #L3caf42.  if v2 == v3 then goto L3caf5c;
  #L3caf46.  v3:= 59I;
  #L3caf4a.  if v2 == v3 then goto L3caf58;
  #L3caf4e.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caf52.  v2.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v4;
  #L3caf56.  goto L3caf10;
  #L3caf58.  v1:= 1I;
  #L3caf5a.  goto L3caf10;
  #L3caf5c.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caf60.  v3:= v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3caf64.  if v3 != 0 then goto L3caf76;
  #L3caf68.  v3:= new `com.bumptech.glide.gifdecoder.a`;
  #L3caf6c.  call `<init>`(v3) @signature `Lcom/bumptech/glide/gifdecoder/a;.<init>:()V` @kind direct;
  #L3caf72.  v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` := v3 @kind object;
  #L3caf76.  call `c`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.c:()V` @kind direct;
  #L3caf7c.  goto L3caf10;
  #L3caf7e.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3caf84.  v2:= temp;
  #L3caf86.  if v2 == v4 then goto L3cb026;
  #L3caf8a.  v3:= 249I;
  #L3caf8e.  if v2 == v3 then goto L3cb00a;
  #L3caf92.  v3:= 254I;
  #L3caf96.  if v2 == v3 then goto L3cb002;
  #L3caf9a.  v3:= 255I;
  #L3caf9e.  if v2 == v3 then goto L3cafaa;
  #L3cafa2.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3cafa8.  goto L3caf10;
  #L3cafaa.  call `d`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.d:()V` @kind direct;
  #L3cafb0.  v2:= new `java.lang.StringBuilder`;
  #L3cafb4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cafba.  v3:= 0I;
  #L3cafbc.  v4:= 11I;
  #L3cafc0.  if v3 >= v4 then goto L3cafda;
  #L3cafc4.  v4:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3cafc8.  v4:= v4[v3] @kind byte;
  #L3cafcc.  v4:= (`char`) v4 @kind i2c;
  #L3cafce.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cafd4.  v3:= v3 + 1;
  #L3cafd8.  goto L3cafbc;
  #L3cafda.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cafe0.  v2:= temp @kind object;
  #L3cafe2.  v3:= "NETSCAPE2.0" @kind object;
  #L3cafe6.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cafec.  v2:= temp;
  #L3cafee.  if v2 == 0 then goto L3caffa;
  #L3caff2.  call `k`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.k:()V` @kind direct;
  #L3caff8.  goto L3caf10;
  #L3caffa.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3cb000.  goto L3caf10;
  #L3cb002.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3cb008.  goto L3caf10;
  #L3cb00a.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb00e.  v3:= new `com.bumptech.glide.gifdecoder.a`;
  #L3cb012.  call `<init>`(v3) @signature `Lcom/bumptech/glide/gifdecoder/a;.<init>:()V` @kind direct;
  #L3cb018.  v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` := v3 @kind object;
  #L3cb01c.  call `h`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.h:()V` @kind direct;
  #L3cb022.  goto L3caf10;
  #L3cb026.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3cb02c.  goto L3caf10;
  #L3cb030.  return @kind void;
}
procedure `void` `h`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v5 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3cb044.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb04a.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb050.  v0:= temp;
  #L3cb052.  v1:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb056.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cb05a.  v2:= v0 ^& 28;
  #L3cb05e.  v3:= 2I;
  #L3cb060.  v2:= v2 ^> v3 @kind int;
  #L3cb062.  v1.`com.bumptech.glide.gifdecoder.a.g` @type ^`int` := v2;
  #L3cb066.  v4:= 1I;
  #L3cb068.  if v2 != 0 then goto L3cb070;
  #L3cb06c.  v1.`com.bumptech.glide.gifdecoder.a.g` @type ^`int` := v4;
  #L3cb070.  v1:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb074.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cb078.  v0:= v0 ^& v4 @kind int;
  #L3cb07a.  if v0 == 0 then goto L3cb080;
  #L3cb07e.  goto L3cb082;
  #L3cb080.  v4:= 0I;
  #L3cb082.  v1.`com.bumptech.glide.gifdecoder.a.f` @type ^`boolean` := v4 @kind boolean;
  #L3cb086.  call temp:= `l`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3cb08c.  v0:= temp;
  #L3cb08e.  v1:= 10I;
  #L3cb092.  if v0 >= v3 then goto L3cb09a;
  #L3cb096.  v0:= 10I;
  #L3cb09a.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb09e.  v2:= v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3cb0a2.  v0:= v0 * 10;
  #L3cb0a6.  v2.`com.bumptech.glide.gifdecoder.a.i` @type ^`int` := v0;
  #L3cb0aa.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb0b0.  v0:= temp;
  #L3cb0b2.  v2.`com.bumptech.glide.gifdecoder.a.h` @type ^`int` := v0;
  #L3cb0b6.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb0bc.  return @kind void;
}
procedure `void` `i`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3cb0d0.  v0:= new `java.lang.StringBuilder`;
  #L3cb0d4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cb0da.  v1:= 0I;
  #L3cb0dc.  v2:= 6I;
  #L3cb0de.  if v1 >= v2 then goto L3cb0f8;
  #L3cb0e2.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb0e8.  v2:= temp;
  #L3cb0ea.  v2:= (`char`) v2 @kind i2c;
  #L3cb0ec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cb0f2.  v1:= v1 + 1;
  #L3cb0f6.  goto L3cb0dc;
  #L3cb0f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cb0fe.  v0:= temp @kind object;
  #L3cb100.  v1:= "GIF" @kind object;
  #L3cb104.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3cb10a.  v0:= temp;
  #L3cb10c.  if v0 != 0 then goto L3cb11c;
  #L3cb110.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb114.  v1:= 1I;
  #L3cb116.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3cb11a.  return @kind void;
  #L3cb11c.  call `j`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.j:()V` @kind direct;
  #L3cb122.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb126.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.h` @type ^`boolean` @kind boolean;
  #L3cb12a.  if v0 == 0 then goto L3cb162;
  #L3cb12e.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3cb134.  v0:= temp;
  #L3cb136.  if v0 != 0 then goto L3cb162;
  #L3cb13a.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb13e.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.i` @type ^`int`;
  #L3cb142.  call temp:= `e`(v3, v1) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.e:(I)[I` @kind direct;
  #L3cb148.  v1:= temp @kind object;
  #L3cb14a.  v0.`com.bumptech.glide.gifdecoder.GifHeader.a` @type ^`int`[] := v1 @kind object;
  #L3cb14e.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb152.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.a` @type ^`int`[] @kind object;
  #L3cb156.  v2:= v0.`com.bumptech.glide.gifdecoder.GifHeader.j` @type ^`int`;
  #L3cb15a.  v1:= v1[v2];
  #L3cb15e.  v0.`com.bumptech.glide.gifdecoder.GifHeader.l` @type ^`int` := v1;
  #L3cb162.  return @kind void;
}
procedure `void` `j`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v6 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3cb174.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb178.  call temp:= `l`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3cb17e.  v1:= temp;
  #L3cb180.  v0.`com.bumptech.glide.gifdecoder.GifHeader.f` @type ^`int` := v1;
  #L3cb184.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb188.  call temp:= `l`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3cb18e.  v1:= temp;
  #L3cb190.  v0.`com.bumptech.glide.gifdecoder.GifHeader.g` @type ^`int` := v1;
  #L3cb194.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb19a.  v0:= temp;
  #L3cb19c.  v1:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb1a0.  v2:= v0 ^& 128;
  #L3cb1a4.  v3:= 1I;
  #L3cb1a6.  if v2 == 0 then goto L3cb1ae;
  #L3cb1aa.  v2:= 1I;
  #L3cb1ac.  goto L3cb1b0;
  #L3cb1ae.  v2:= 0I;
  #L3cb1b0.  v1.`com.bumptech.glide.gifdecoder.GifHeader.h` @type ^`boolean` := v2 @kind boolean;
  #L3cb1b4.  v1:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb1b8.  v4:= 2.0D;
  #L3cb1bc.  v0:= v0 ^& 7;
  #L3cb1c0.  v0:= v0 + v3 @kind int;
  #L3cb1c2.  v2:= (`double`) v0 @kind i2d;
  #L3cb1c4.  call temp:= `pow`(v4, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3cb1ca.  v2:= temp @kind wide;
  #L3cb1cc.  v0:= (`int`) v2 @kind d2i;
  #L3cb1ce.  v1.`com.bumptech.glide.gifdecoder.GifHeader.i` @type ^`int` := v0;
  #L3cb1d2.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb1d6.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb1dc.  v1:= temp;
  #L3cb1de.  v0.`com.bumptech.glide.gifdecoder.GifHeader.j` @type ^`int` := v1;
  #L3cb1e2.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb1e6.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb1ec.  v1:= temp;
  #L3cb1ee.  v0.`com.bumptech.glide.gifdecoder.GifHeader.k` @type ^`int` := v1;
  #L3cb1f2.  return @kind void;
}
procedure `void` `k`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3cb204.  call `d`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.d:()V` @kind direct;
  #L3cb20a.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3cb20e.  v1:= 0I;
  #L3cb210.  v1:= v0[v1] @kind byte;
  #L3cb214.  v2:= 1I;
  #L3cb216.  if v1 != v2 then goto L3cb23a;
  #L3cb21a.  v1:= v0[v2] @kind byte;
  #L3cb21e.  v1:= v1 ^& 255;
  #L3cb222.  v2:= 2I;
  #L3cb224.  v0:= v0[v2] @kind byte;
  #L3cb228.  v0:= v0 ^& 255;
  #L3cb22c.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cb230.  v0:= v0 ^< 8;
  #L3cb234.  v0:= v0 ^| v1 @kind int;
  #L3cb236.  v2.`com.bumptech.glide.gifdecoder.GifHeader.m` @type ^`int` := v0;
  #L3cb23a.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int`;
  #L3cb23e.  if v0 <= 0 then goto L3cb24e;
  #L3cb242.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3cb248.  v0:= temp;
  #L3cb24a.  if v0 == 0 then goto L3cb204;
  #L3cb24e.  return @kind void;
}
procedure `int` `l`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3cabf8.  v0:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cabfc.  call temp:= `getShort`(v0) @signature `Ljava/nio/ByteBuffer;.getShort:()S` @kind virtual;
  #L3cac02.  v0:= temp;
  #L3cac04.  return v0;
}
procedure `void` `m`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.m:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3cb260.  v0:= 0I;
  #L3cb262.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L3cb266.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3cb26a.  v1:= 0I;
  #L3cb26c.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L3cb272.  v0:= new `com.bumptech.glide.gifdecoder.GifHeader`;
  #L3cb276.  call `<init>`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeader;.<init>:()V` @kind direct;
  #L3cb27c.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` := v0 @kind object;
  #L3cb280.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int` := v1;
  #L3cb284.  return @kind void;
}
procedure `void` `n`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3cb298.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb29e.  v0:= temp;
  #L3cb2a0.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cb2a4.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3cb2aa.  v1:= temp;
  #L3cb2ac.  v1:= v1 + v0 @kind int;
  #L3cb2ae.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cb2b2.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L3cb2b8.  v2:= temp;
  #L3cb2ba.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3cb2c0.  v1:= temp;
  #L3cb2c2.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cb2c6.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3cb2cc.  if v0 > 0 then goto L3cb298;
  #L3cb2d0.  return @kind void;
}
procedure `void` `o`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v0 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.o:()V` @AccessFlag PRIVATE {
    temp;

  #L3cb2e4.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3cb2ea.  call `n`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3cb2f0.  return @kind void;
}
procedure `void` `clear`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cacf8.  v0:= 0I;
  #L3cacfa.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L3cacfe.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` := v0 @kind object;
  #L3cad02.  return @kind void;
}
procedure `boolean` `isAnimated`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.isAnimated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3caa98.  call `i`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.i:()V` @kind direct;
  #L3caa9e.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3caaa4.  v0:= temp;
  #L3caaa6.  if v0 != 0 then goto L3caab2;
  #L3caaaa.  v0:= 2I;
  #L3caaac.  call `g`(v2, v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.g:(I)V` @kind direct;
  #L3caab2.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caab6.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3caaba.  v1:= 1I;
  #L3caabc.  if v0 <= v1 then goto L3caac2;
  #L3caac0.  goto L3caac4;
  #L3caac2.  v1:= 0I;
  #L3caac4.  return v1;
}
procedure `com.bumptech.glide.gifdecoder.GifHeader` `parseHeader`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.parseHeader:()Lcom/bumptech/glide/gifdecoder/GifHeader;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3caad8.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3caadc.  if v0 == 0 then goto L3cab22;
  #L3caae0.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3caae6.  v0:= temp;
  #L3caae8.  if v0 == 0 then goto L3caaf2;
  #L3caaec.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3caaf0.  return v0 @kind object;
  #L3caaf2.  call `i`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.i:()V` @kind direct;
  #L3caaf8.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3caafe.  v0:= temp;
  #L3cab00.  if v0 != 0 then goto L3cab1c;
  #L3cab04.  call `f`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.f:()V` @kind direct;
  #L3cab0a.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cab0e.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3cab12.  if v1 >= 0 then goto L3cab1c;
  #L3cab16.  v1:= 1I;
  #L3cab18.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3cab1c.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cab20.  return v0 @kind object;
  #L3cab22.  v0:= new `java.lang.IllegalStateException`;
  #L3cab26.  v1:= "You must call setData() before parseHeader()" @kind object;
  #L3cab2a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cab30.  throw v0;
}
procedure `com.bumptech.glide.gifdecoder.GifHeaderParser` `setData`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cab7c.  call `m`(v1) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.m:()V` @kind direct;
  #L3cab82.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L3cab88.  v2:= temp @kind object;
  #L3cab8a.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3cab8e.  v0:= 0I;
  #L3cab90.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3cab96.  v2:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3cab9a.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L3cab9e.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3caba4.  return v1 @kind object;
}
procedure `com.bumptech.glide.gifdecoder.GifHeaderParser` `setData`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:([B)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cab44.  if v2 == 0 then goto L3cab58;
  #L3cab48.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L3cab4e.  v2:= temp @kind object;
  #L3cab50.  call temp:= `setData`(v1, v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @kind virtual;
  #L3cab56.  goto L3cab68;
  #L3cab58.  v2:= 0I;
  #L3cab5a.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3cab5e.  v2:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3cab62.  v0:= 2I;
  #L3cab64.  v2.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v0;
  #L3cab68.  return v1 @kind object;
}
