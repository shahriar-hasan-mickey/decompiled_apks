record `com.bumptech.glide.load.engine.executor.GlideExecutor` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.ExecutorService` @kind interface {
  `java.util.concurrent.ExecutorService` `com.bumptech.glide.load.engine.executor.GlideExecutor.a` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@com.bumptech.glide.load.engine.executor.GlideExecutor.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.engine.executor.GlideExecutor.c` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3d8d2c.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d8d30.  v1:= 10L;
  #L3d8d34.  call temp:= `toMillis`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L3d8d3a.  v0:= temp @kind wide;
  #L3d8d3c.  `@@com.bumptech.glide.load.engine.executor.GlideExecutor.b` @type ^`long` := v0 @kind wide;
  #L3d8d40.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v0 @kind this, `java.util.concurrent.ExecutorService` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d8d54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d8d5a.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L3d8d5e.  return @kind void;
}
procedure `int` `calculateBestThreadCount`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.calculateBestThreadCount:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8bd8.  v0:= `@@com.bumptech.glide.load.engine.executor.GlideExecutor.c` @type ^`int`;
  #L3d8bdc.  if v0 != 0 then goto L3d8bf6;
  #L3d8be0.  v0:= 4I;
  #L3d8be2.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/engine/executor/a;.a:()I` @kind static;
  #L3d8be8.  v1:= temp;
  #L3d8bea.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d8bf0.  v0:= temp;
  #L3d8bf2.  `@@com.bumptech.glide.load.engine.executor.GlideExecutor.c` @type ^`int` := v0;
  #L3d8bf6.  v0:= `@@com.bumptech.glide.load.engine.executor.GlideExecutor.c` @type ^`int`;
  #L3d8bfa.  return v0;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` `newAnimationBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newAnimationBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d8b20.  call temp:= `calculateBestThreadCount`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.calculateBestThreadCount:()I` @kind static;
  #L3d8b26.  v0:= temp;
  #L3d8b28.  v1:= 1I;
  #L3d8b2a.  v2:= 4I;
  #L3d8b2c.  if v0 < v2 then goto L3d8b34;
  #L3d8b30.  v0:= 2I;
  #L3d8b32.  goto L3d8b36;
  #L3d8b34.  v0:= 1I;
  #L3d8b36.  v2:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder`;
  #L3d8b3a.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.<init>:(Z)V` @kind direct;
  #L3d8b40.  call temp:= `setThreadCount`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8b46.  v0:= temp @kind object;
  #L3d8b48.  v1:= "animation" @kind object;
  #L3d8b4c.  call temp:= `setName`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setName:(Ljava/lang/String;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8b52.  v0:= temp @kind object;
  #L3d8b54.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newAnimationExecutor`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newAnimationExecutor:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8958.  call temp:= `newAnimationBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newAnimationBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d895e.  v0:= temp @kind object;
  #L3d8960.  call temp:= `build`(v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d8966.  v0:= temp @kind object;
  #L3d8968.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newAnimationExecutor`(`int` v1 , `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newAnimationExecutor:(ILcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d897c.  call temp:= `newAnimationBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newAnimationBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d8982.  v0:= temp @kind object;
  #L3d8984.  call temp:= `setThreadCount`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d898a.  v1:= temp @kind object;
  #L3d898c.  call temp:= `setUncaughtThrowableStrategy`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setUncaughtThrowableStrategy:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8992.  v1:= temp @kind object;
  #L3d8994.  call temp:= `build`(v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d899a.  v1:= temp @kind object;
  #L3d899c.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` `newDiskCacheBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newDiskCacheBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8b68.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder`;
  #L3d8b6c.  v1:= 1I;
  #L3d8b6e.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.<init>:(Z)V` @kind direct;
  #L3d8b74.  call temp:= `setThreadCount`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8b7a.  v0:= temp @kind object;
  #L3d8b7c.  v1:= "disk-cache" @kind object;
  #L3d8b80.  call temp:= `setName`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setName:(Ljava/lang/String;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8b86.  v0:= temp @kind object;
  #L3d8b88.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newDiskCacheExecutor`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newDiskCacheExecutor:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d89b0.  call temp:= `newDiskCacheBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newDiskCacheBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d89b6.  v0:= temp @kind object;
  #L3d89b8.  call temp:= `build`(v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d89be.  v0:= temp @kind object;
  #L3d89c0.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newDiskCacheExecutor`(`int` v1 , `java.lang.String` v2 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newDiskCacheExecutor:(ILjava/lang/String;Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8a00.  call temp:= `newDiskCacheBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newDiskCacheBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d8a06.  v0:= temp @kind object;
  #L3d8a08.  call temp:= `setThreadCount`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8a0e.  v1:= temp @kind object;
  #L3d8a10.  call temp:= `setName`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setName:(Ljava/lang/String;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8a16.  v1:= temp @kind object;
  #L3d8a18.  call temp:= `setUncaughtThrowableStrategy`(v1, v3) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setUncaughtThrowableStrategy:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8a1e.  v1:= temp @kind object;
  #L3d8a20.  call temp:= `build`(v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d8a26.  v1:= temp @kind object;
  #L3d8a28.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newDiskCacheExecutor`(`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newDiskCacheExecutor:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d89d4.  call temp:= `newDiskCacheBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newDiskCacheBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d89da.  v0:= temp @kind object;
  #L3d89dc.  call temp:= `setUncaughtThrowableStrategy`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setUncaughtThrowableStrategy:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d89e2.  v1:= temp @kind object;
  #L3d89e4.  call temp:= `build`(v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d89ea.  v1:= temp @kind object;
  #L3d89ec.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` `newSourceBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newSourceBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d8b9c.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder`;
  #L3d8ba0.  v1:= 0I;
  #L3d8ba2.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.<init>:(Z)V` @kind direct;
  #L3d8ba8.  call temp:= `calculateBestThreadCount`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.calculateBestThreadCount:()I` @kind static;
  #L3d8bae.  v1:= temp;
  #L3d8bb0.  call temp:= `setThreadCount`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8bb6.  v0:= temp @kind object;
  #L3d8bb8.  v1:= "source" @kind object;
  #L3d8bbc.  call temp:= `setName`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setName:(Ljava/lang/String;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8bc2.  v0:= temp @kind object;
  #L3d8bc4.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newSourceExecutor`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newSourceExecutor:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8a3c.  call temp:= `newSourceBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newSourceBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d8a42.  v0:= temp @kind object;
  #L3d8a44.  call temp:= `build`(v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d8a4a.  v0:= temp @kind object;
  #L3d8a4c.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newSourceExecutor`(`int` v1 , `java.lang.String` v2 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newSourceExecutor:(ILjava/lang/String;Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8a8c.  call temp:= `newSourceBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newSourceBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d8a92.  v0:= temp @kind object;
  #L3d8a94.  call temp:= `setThreadCount`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8a9a.  v1:= temp @kind object;
  #L3d8a9c.  call temp:= `setName`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setName:(Ljava/lang/String;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8aa2.  v1:= temp @kind object;
  #L3d8aa4.  call temp:= `setUncaughtThrowableStrategy`(v1, v3) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setUncaughtThrowableStrategy:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8aaa.  v1:= temp @kind object;
  #L3d8aac.  call temp:= `build`(v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d8ab2.  v1:= temp @kind object;
  #L3d8ab4.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newSourceExecutor`(`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newSourceExecutor:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d8a60.  call temp:= `newSourceBuilder`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newSourceBuilder:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind static;
  #L3d8a66.  v0:= temp @kind object;
  #L3d8a68.  call temp:= `setUncaughtThrowableStrategy`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setUncaughtThrowableStrategy:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @kind virtual;
  #L3d8a6e.  v1:= temp @kind object;
  #L3d8a70.  call temp:= `build`(v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind virtual;
  #L3d8a76.  v1:= temp @kind object;
  #L3d8a78.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `newUnlimitedSourceExecutor`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.newUnlimitedSourceExecutor:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3d8ac8.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor`;
  #L3d8acc.  v9:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L3d8ad0.  v4:= `@@com.bumptech.glide.load.engine.executor.GlideExecutor.b` @type ^`long` @kind wide;
  #L3d8ad4.  v6:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d8ad8.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L3d8adc.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L3d8ae2.  v8:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$a`;
  #L3d8ae6.  v1:= `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.DEFAULT` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` @kind object;
  #L3d8aea.  v2:= "source-unlimited" @kind object;
  #L3d8aee.  v3:= 0I;
  #L3d8af0.  call `<init>`(v8, v2, v1, v3) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$a;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;Z)V` @kind direct;
  #L3d8af6.  v2:= 0I;
  #L3d8af8.  v3:= 2147483647I;
  #L3d8afe.  v1:= v9 @kind object;
  #L3d8b00.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3d8b06.  call `<init>`(v0, v9) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @kind direct;
  #L3d8b0c.  return v0 @kind object;
}
procedure `boolean` `awaitTermination`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d88f8.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d88fc.  call temp:= `awaitTermination`(v0, v2, v4) @signature `Ljava/util/concurrent/ExecutorService;.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z` @kind interface;
  #L3d8902.  v2:= temp;
  #L3d8904.  return v2;
}
procedure `void` `execute`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8d70.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8d74.  call `execute`(v0, v2) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3d8d7a.  return @kind void;
}
procedure `java.util.List` `invokeAll`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.invokeAll:(Ljava/util/Collection;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8c6c.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8c70.  call temp:= `invokeAll`(v0, v2) @signature `Ljava/util/concurrent/ExecutorService;.invokeAll:(Ljava/util/Collection;)Ljava/util/List;` @kind interface;
  #L3d8c76.  v2:= temp @kind object;
  #L3d8c78.  return v2 @kind object;
}
procedure `java.util.List` `invokeAll`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.util.Collection` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.invokeAll:(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8c8c.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8c90.  call temp:= `invokeAll`(v0, v2, v3, v5) @signature `Ljava/util/concurrent/ExecutorService;.invokeAll:(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;` @kind interface;
  #L3d8c96.  v2:= temp @kind object;
  #L3d8c98.  return v2 @kind object;
}
procedure `java.lang.Object` `invokeAny`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.invokeAny:(Ljava/util/Collection;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8c0c.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8c10.  call temp:= `invokeAny`(v0, v2) @signature `Ljava/util/concurrent/ExecutorService;.invokeAny:(Ljava/util/Collection;)Ljava/lang/Object;` @kind interface;
  #L3d8c16.  v2:= temp @kind object;
  #L3d8c18.  return v2 @kind object;
}
procedure `java.lang.Object` `invokeAny`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.util.Collection` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.invokeAny:(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8c2c.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8c30.  call temp:= `invokeAny`(v0, v2, v3, v5) @signature `Ljava/util/concurrent/ExecutorService;.invokeAny:(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L3d8c36.  v2:= temp @kind object;
  #L3d8c38.  return v2 @kind object;
}
procedure `boolean` `isShutdown`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.isShutdown:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8918.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d891c.  call temp:= `isShutdown`(v0) @signature `Ljava/util/concurrent/ExecutorService;.isShutdown:()Z` @kind interface;
  #L3d8922.  v0:= temp;
  #L3d8924.  return v0;
}
procedure `boolean` `isTerminated`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.isTerminated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8938.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d893c.  call temp:= `isTerminated`(v0) @signature `Ljava/util/concurrent/ExecutorService;.isTerminated:()Z` @kind interface;
  #L3d8942.  v0:= temp;
  #L3d8944.  return v0;
}
procedure `void` `shutdown`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8d8c.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8d90.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ExecutorService;.shutdown:()V` @kind interface;
  #L3d8d96.  return @kind void;
}
procedure `java.util.List` `shutdownNow`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.shutdownNow:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8cac.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8cb0.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L3d8cb6.  v0:= temp @kind object;
  #L3d8cb8.  return v0 @kind object;
}
procedure `java.util.concurrent.Future` `submit`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8ccc.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8cd0.  call temp:= `submit`(v0, v2) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @kind interface;
  #L3d8cd6.  v2:= temp @kind object;
  #L3d8cd8.  return v2 @kind object;
}
procedure `java.util.concurrent.Future` `submit`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.lang.Runnable` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.submit:(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8cec.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8cf0.  call temp:= `submit`(v0, v2, v3) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;` @kind interface;
  #L3d8cf6.  v2:= temp @kind object;
  #L3d8cf8.  return v2 @kind object;
}
procedure `java.util.concurrent.Future` `submit`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8d0c.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8d10.  call temp:= `submit`(v0, v2) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L3d8d16.  v2:= temp @kind object;
  #L3d8d18.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.executor.GlideExecutor` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8c4c.  v0:= v1.`com.bumptech.glide.load.engine.executor.GlideExecutor.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3d8c50.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d8c56.  v0:= temp @kind object;
  #L3d8c58.  return v0 @kind object;
}
