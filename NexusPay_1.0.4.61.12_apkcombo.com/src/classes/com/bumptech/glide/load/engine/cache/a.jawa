record `com.bumptech.glide.load.engine.cache.a` @kind class @AccessFlag FINAL {
  `java.util.Map` `com.bumptech.glide.load.engine.cache.a.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.cache.a$b` `com.bumptech.glide.load.engine.cache.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.cache.a` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/cache/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d72f8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d72fe.  v0:= new `java.util.HashMap`;
  #L3d7302.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3d7308.  v1.`com.bumptech.glide.load.engine.cache.a.a` @type ^`java.util.Map` := v0 @kind object;
  #L3d730c.  v0:= new `com.bumptech.glide.load.engine.cache.a$b`;
  #L3d7310.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/cache/a$b;.<init>:()V` @kind direct;
  #L3d7316.  v1.`com.bumptech.glide.load.engine.cache.a.b` @type ^`com.bumptech.glide.load.engine.cache.a$b` := v0 @kind object;
  #L3d731a.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.cache.a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/cache/a;.a:(Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3d732c.  @monitorenter v2
  #L3d732e.  v0:= v2.`com.bumptech.glide.load.engine.cache.a.a` @type ^`java.util.Map` @kind object;
  #L3d7332.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d7338.  v0:= temp @kind object;
  #L3d733a.  v0:= (`com.bumptech.glide.load.engine.cache.a$a`) v0 @kind object;
  #L3d733e.  if v0 != 0 then goto L3d7358;
  #L3d7342.  v0:= v2.`com.bumptech.glide.load.engine.cache.a.b` @type ^`com.bumptech.glide.load.engine.cache.a$b` @kind object;
  #L3d7346.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/load/engine/cache/a$b;.a:()Lcom/bumptech/glide/load/engine/cache/a$a;` @kind virtual;
  #L3d734c.  v0:= temp @kind object;
  #L3d734e.  v1:= v2.`com.bumptech.glide.load.engine.cache.a.a` @type ^`java.util.Map` @kind object;
  #L3d7352.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d7358.  v3:= v0.`com.bumptech.glide.load.engine.cache.a$a.b` @type ^`int`;
  #L3d735c.  v3:= v3 + 1;
  #L3d7360.  v0.`com.bumptech.glide.load.engine.cache.a$a.b` @type ^`int` := v3;
  #L3d7364.  @monitorexit v2
  #L3d7366.  v3:= v0.`com.bumptech.glide.load.engine.cache.a$a.a` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3d736a.  call `lock`(v3) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L3d7370.  return @kind void;
  #L3d7372.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d7374.  @monitorexit v2
  #L3d7376.  throw v3;
  catch `java.lang.Throwable` @[L3d732e..L3d7366] goto L3d7372;
  catch `java.lang.Throwable` @[L3d7374..L3d7376] goto L3d7372;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.cache.a` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/cache/a;.b:(Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d739c.  @monitorenter v5
  #L3d739e.  v0:= v5.`com.bumptech.glide.load.engine.cache.a.a` @type ^`java.util.Map` @kind object;
  #L3d73a2.  call temp:= `get`(v0, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d73a8.  v0:= temp @kind object;
  #L3d73aa.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3d73b0.  v0:= temp @kind object;
  #L3d73b2.  v0:= (`com.bumptech.glide.load.engine.cache.a$a`) v0 @kind object;
  #L3d73b6.  v1:= v0.`com.bumptech.glide.load.engine.cache.a$a.b` @type ^`int`;
  #L3d73ba.  v2:= 1I;
  #L3d73bc.  if v1 < v2 then goto L3d7452;
  #L3d73c0.  v1:= v0.`com.bumptech.glide.load.engine.cache.a$a.b` @type ^`int`;
  #L3d73c4.  v1:= v1 - v2 @kind int;
  #L3d73c6.  v0.`com.bumptech.glide.load.engine.cache.a$a.b` @type ^`int` := v1;
  #L3d73ca.  if v1 != 0 then goto L3d7444;
  #L3d73ce.  v1:= v5.`com.bumptech.glide.load.engine.cache.a.a` @type ^`java.util.Map` @kind object;
  #L3d73d2.  call temp:= `remove`(v1, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d73d8.  v1:= temp @kind object;
  #L3d73da.  v1:= (`com.bumptech.glide.load.engine.cache.a$a`) v1 @kind object;
  #L3d73de.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d73e4.  v2:= temp;
  #L3d73e6.  if v2 == 0 then goto L3d73f6;
  #L3d73ea.  v6:= v5.`com.bumptech.glide.load.engine.cache.a.b` @type ^`com.bumptech.glide.load.engine.cache.a$b` @kind object;
  #L3d73ee.  call `b`(v6, v1) @signature `Lcom/bumptech/glide/load/engine/cache/a$b;.b:(Lcom/bumptech/glide/load/engine/cache/a$a;)V` @kind virtual;
  #L3d73f4.  goto L3d7444;
  #L3d73f6.  v2:= new `java.lang.IllegalStateException`;
  #L3d73fa.  v3:= new `java.lang.StringBuilder`;
  #L3d73fe.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d7404.  v4:= "Removed the wrong lock, expected to remove: " @kind object;
  #L3d7408.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d740e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7414.  v0:= ", but actually removed: " @kind object;
  #L3d7418.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d741e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7424.  v0:= ", safeKey: " @kind object;
  #L3d7428.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d742e.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7434.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d743a.  v6:= temp @kind object;
  #L3d743c.  call `<init>`(v2, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7442.  throw v2;
  #L3d7444.  @monitorexit v5
  #L3d7446.  v6:= v0.`com.bumptech.glide.load.engine.cache.a$a.a` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3d744a.  call `unlock`(v6) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L3d7450.  return @kind void;
  #L3d7452.  v1:= new `java.lang.IllegalStateException`;
  #L3d7456.  v2:= new `java.lang.StringBuilder`;
  #L3d745a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d7460.  v3:= "Cannot release a lock that is not held, safeKey: " @kind object;
  #L3d7464.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d746a.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7470.  v6:= ", interestedThreads: " @kind object;
  #L3d7474.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d747a.  v6:= v0.`com.bumptech.glide.load.engine.cache.a$a.b` @type ^`int`;
  #L3d747e.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7484.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d748a.  v6:= temp @kind object;
  #L3d748c.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7492.  throw v1;
  #L3d7494.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d7496.  @monitorexit v5
  #L3d7498.  throw v6;
  catch `java.lang.Throwable` @[L3d739e..L3d7446] goto L3d7494;
  catch `java.lang.Throwable` @[L3d7452..L3d7498] goto L3d7494;
}
