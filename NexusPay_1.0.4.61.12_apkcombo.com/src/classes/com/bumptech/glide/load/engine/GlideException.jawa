record `com.bumptech.glide.load.engine.GlideException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Exception` @kind class {
  `java.util.List` `com.bumptech.glide.load.engine.GlideException.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.GlideException.b` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.DataSource` `com.bumptech.glide.load.engine.GlideException.c` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.load.engine.GlideException.d` @AccessFlag PRIVATE;
  `java.lang.String` `com.bumptech.glide.load.engine.GlideException.e` @AccessFlag PRIVATE;
  `java.lang.Exception` `com.bumptech.glide.load.engine.GlideException.f` @AccessFlag PRIVATE;
}
global `java.lang.StackTraceElement`[] `@@com.bumptech.glide.load.engine.GlideException.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@com.bumptech.glide.load.engine.GlideException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/GlideException;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d3ab4.  v0:= 0I;
  #L3d3ab6.  v0:= new `java.lang.StackTraceElement`[v0];
  #L3d3aba.  `@@com.bumptech.glide.load.engine.GlideException.g` @type ^`java.lang.StackTraceElement`[] := v0 @kind object;
  #L3d3abe.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d3ad0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3d3ad6.  v0:= temp @kind object;
  #L3d3ad8.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L3d3ade.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3d3af0.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3d3af6.  v2:= temp @kind object;
  #L3d3af8.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L3d3afe.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3d3b10.  call `<init>`(v0) @signature `Ljava/lang/Exception;.<init>:()V` @kind direct;
  #L3d3b16.  v0.`com.bumptech.glide.load.engine.GlideException.e` @type ^`java.lang.String` := v1 @kind object;
  #L3d3b1a.  v1:= `@@com.bumptech.glide.load.engine.GlideException.g` @type ^`java.lang.StackTraceElement`[] @kind object;
  #L3d3b1e.  call `setStackTrace`(v0, v1) @signature `Ljava/lang/Exception;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L3d3b24.  v0.`com.bumptech.glide.load.engine.GlideException.a` @type ^`java.util.List` := v2 @kind object;
  #L3d3b28.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d3b3c.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.engine.GlideException` @kind boolean;
  #L3d3b40.  if v0 == 0 then goto L3d3b78;
  #L3d3b44.  v2:= (`com.bumptech.glide.load.engine.GlideException`) v2 @kind object;
  #L3d3b48.  call temp:= `getCauses`(v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @kind virtual;
  #L3d3b4e.  v2:= temp @kind object;
  #L3d3b50.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3d3b56.  v2:= temp @kind object;
  #L3d3b58.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3d3b5e.  v0:= temp;
  #L3d3b60.  if v0 == 0 then goto L3d3b7e;
  #L3d3b64.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3d3b6a.  v0:= temp @kind object;
  #L3d3b6c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3d3b70.  call `a`(v1, v0, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @kind direct;
  #L3d3b76.  goto L3d3b58;
  #L3d3b78.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3d3b7e.  return @kind void;
}
procedure `void` `b`(`java.util.List` v0 @kind object, `java.lang.Appendable` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.b:(Ljava/util/List;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3d3b90.  call `c`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.c:(Ljava/util/List;Ljava/lang/Appendable;)V` @kind static;
  #L3d3b96.  return @kind void;
  #L3d3b98.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L3d3b9a.  v1:= new `java.lang.RuntimeException`;
  #L3d3b9e.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d3ba4.  throw v1;
  catch `java.io.IOException` @[L3d3b90..L3d3b96] goto L3d3b98;
}
procedure `void` `c`(`java.util.List` v5 @kind object, `java.lang.Appendable` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.c:(Ljava/util/List;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d3bc8.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3d3bce.  v0:= temp;
  #L3d3bd0.  v1:= 0I;
  #L3d3bd2.  if v1 >= v0 then goto L3d3c46;
  #L3d3bd6.  v2:= "Cause (" @kind object;
  #L3d3bda.  call temp:= `append`(v6, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3be0.  v2:= temp @kind object;
  #L3d3be2.  v3:= v1 + 1;
  #L3d3be6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3d3bec.  v4:= temp @kind object;
  #L3d3bee.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3bf4.  v2:= temp @kind object;
  #L3d3bf6.  v4:= " of " @kind object;
  #L3d3bfa.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3c00.  v2:= temp @kind object;
  #L3d3c02.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3d3c08.  v4:= temp @kind object;
  #L3d3c0a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3c10.  v2:= temp @kind object;
  #L3d3c12.  v4:= "): " @kind object;
  #L3d3c16.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3c1c.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3d3c22.  v1:= temp @kind object;
  #L3d3c24.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L3d3c28.  v2:= instanceof @variable v1 @type ^`com.bumptech.glide.load.engine.GlideException` @kind boolean;
  #L3d3c2c.  if v2 == 0 then goto L3d3c3c;
  #L3d3c30.  v1:= (`com.bumptech.glide.load.engine.GlideException`) v1 @kind object;
  #L3d3c34.  call `e`(v1, v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @kind direct;
  #L3d3c3a.  goto L3d3c42;
  #L3d3c3c.  call `d`(v1, v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.d:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @kind static;
  #L3d3c42.  v1:= v3;
  #L3d3c44.  goto L3d3bd2;
  #L3d3c46.  return @kind void;
}
procedure `void` `d`(`java.lang.Throwable` v1 @kind object, `java.lang.Appendable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.d:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3d3c58.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3d3c5e.  v0:= temp @kind object;
  #L3d3c60.  call temp:= `toString`(v0) @signature `Ljava/lang/Class;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3c66.  v0:= temp @kind object;
  #L3d3c68.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3c6e.  v2:= temp @kind object;
  #L3d3c70.  v0:= ": " @kind object;
  #L3d3c74.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3c7a.  v2:= temp @kind object;
  #L3d3c7c.  call temp:= `getMessage`(v1) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3d3c82.  v0:= temp @kind object;
  #L3d3c84.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3d3c8a.  v2:= temp @kind object;
  #L3d3c8c.  v0:= 10I;
  #L3d3c90.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3d3c96.  return @kind void;
  #L3d3c98.  v2:= new `java.lang.RuntimeException`;
  #L3d3c9c.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d3ca2.  throw v2;
  catch `java.io.IOException` @[L3d3c58..L3d3c96] goto L3d3c98;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.GlideException` v2 @kind this, `java.lang.Appendable` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3d3d90.  call `d`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.d:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @kind static;
  #L3d3d96.  call temp:= `getCauses`(v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @kind virtual;
  #L3d3d9c.  v0:= temp @kind object;
  #L3d3d9e.  v1:= new `com.bumptech.glide.load.engine.GlideException$a`;
  #L3d3da2.  call `<init>`(v1, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.<init>:(Ljava/lang/Appendable;)V` @kind direct;
  #L3d3da8.  call `b`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.b:(Ljava/util/List;Ljava/lang/Appendable;)V` @kind static;
  #L3d3dae.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `com.bumptech.glide.load.Key` v2 @kind object, `com.bumptech.glide.load.DataSource` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.f:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/DataSource;)V` @AccessFlag  {
    temp;
    v0;

  #L3d3dc0.  v0:= 0I;
  #L3d3dc2.  call `g`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.g:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/DataSource;Ljava/lang/Class;)V` @kind virtual;
  #L3d3dc8.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;

  #L3d3a64.  return v0 @kind object;
}
procedure `void` `g`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `com.bumptech.glide.load.Key` v1 @kind object, `com.bumptech.glide.load.DataSource` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.g:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/DataSource;Ljava/lang/Class;)V` @AccessFlag  {
    temp;

  #L3d3ddc.  v0.`com.bumptech.glide.load.engine.GlideException.b` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3d3de0.  v0.`com.bumptech.glide.load.engine.GlideException.c` @type ^`com.bumptech.glide.load.DataSource` := v2 @kind object;
  #L3d3de4.  v0.`com.bumptech.glide.load.engine.GlideException.d` @type ^`java.lang.Class` := v3 @kind object;
  #L3d3de8.  return @kind void;
}
procedure `java.util.List` `getCauses`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d3a78.  v0:= v1.`com.bumptech.glide.load.engine.GlideException.a` @type ^`java.util.List` @kind object;
  #L3d3a7c.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`com.bumptech.glide.load.engine.GlideException` v5 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d38c8.  v0:= new `java.lang.StringBuilder`;
  #L3d38cc.  v1:= 71I;
  #L3d38d0.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3d38d6.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.e` @type ^`java.lang.String` @kind object;
  #L3d38da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d38e0.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.d` @type ^`java.lang.Class` @kind object;
  #L3d38e4.  v2:= ", " @kind object;
  #L3d38e8.  v3:= "" @kind object;
  #L3d38ec.  if v1 == 0 then goto L3d3914;
  #L3d38f0.  v1:= new `java.lang.StringBuilder`;
  #L3d38f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d38fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3900.  v4:= v5.`com.bumptech.glide.load.engine.GlideException.d` @type ^`java.lang.Class` @kind object;
  #L3d3904.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d390a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3910.  v1:= temp @kind object;
  #L3d3912.  goto L3d3916;
  #L3d3914.  v1:= v3 @kind object;
  #L3d3916.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d391c.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.c` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3d3920.  if v1 == 0 then goto L3d3948;
  #L3d3924.  v1:= new `java.lang.StringBuilder`;
  #L3d3928.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d392e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3934.  v4:= v5.`com.bumptech.glide.load.engine.GlideException.c` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3d3938.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d393e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3944.  v1:= temp @kind object;
  #L3d3946.  goto L3d394a;
  #L3d3948.  v1:= v3 @kind object;
  #L3d394a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3950.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.b` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d3954.  if v1 == 0 then goto L3d397a;
  #L3d3958.  v1:= new `java.lang.StringBuilder`;
  #L3d395c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d3962.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3968.  v2:= v5.`com.bumptech.glide.load.engine.GlideException.b` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d396c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3972.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3978.  v3:= temp @kind object;
  #L3d397a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3980.  call temp:= `getRootCauses`(v5) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @kind virtual;
  #L3d3986.  v1:= temp @kind object;
  #L3d3988.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3d398e.  v2:= temp;
  #L3d3990.  if v2 == 0 then goto L3d399e;
  #L3d3994.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d399a.  v0:= temp @kind object;
  #L3d399c.  return v0 @kind object;
  #L3d399e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3d39a4.  v2:= temp;
  #L3d39a6.  v3:= 1I;
  #L3d39a8.  if v2 != v3 then goto L3d39b8;
  #L3d39ac.  v2:= "\nThere was 1 cause:" @kind object;
  #L3d39b0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39b6.  goto L3d39da;
  #L3d39b8.  v2:= "\nThere were " @kind object;
  #L3d39bc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39c2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3d39c8.  v2:= temp;
  #L3d39ca.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39d0.  v2:= " causes:" @kind object;
  #L3d39d4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39da.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3d39e0.  v1:= temp @kind object;
  #L3d39e2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3d39e8.  v2:= temp;
  #L3d39ea.  if v2 == 0 then goto L3d3a3e;
  #L3d39ee.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3d39f4.  v2:= temp @kind object;
  #L3d39f6.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L3d39fa.  v3:= 10I;
  #L3d39fe.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a04.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3d3a0a.  v3:= temp @kind object;
  #L3d3a0c.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3d3a12.  v3:= temp @kind object;
  #L3d3a14.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a1a.  v3:= 40I;
  #L3d3a1e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a24.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3d3a2a.  v2:= temp @kind object;
  #L3d3a2c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a32.  v2:= 41I;
  #L3d3a36.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a3c.  goto L3d39e2;
  #L3d3a3e.  v1:= "\n call GlideException#logRootCauses(String) for more detail" @kind object;
  #L3d3a42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a48.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3a4e.  v0:= temp @kind object;
  #L3d3a50.  return v0 @kind object;
}
procedure `java.lang.Exception` `getOrigin`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getOrigin:()Ljava/lang/Exception;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d38b0.  v0:= v1.`com.bumptech.glide.load.engine.GlideException.f` @type ^`java.lang.Exception` @kind object;
  #L3d38b4.  return v0 @kind object;
}
procedure `java.util.List` `getRootCauses`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d3a90.  v0:= new `java.util.ArrayList`;
  #L3d3a94.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3d3a9a.  call `a`(v1, v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @kind direct;
  #L3d3aa0.  return v0 @kind object;
}
procedure `void` `logRootCauses`(`com.bumptech.glide.load.engine.GlideException` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.logRootCauses:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3cc4.  call temp:= `getRootCauses`(v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @kind virtual;
  #L3d3cca.  v0:= temp @kind object;
  #L3d3ccc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3d3cd2.  v1:= temp;
  #L3d3cd4.  v2:= 0I;
  #L3d3cd6.  if v2 >= v1 then goto L3d3d30;
  #L3d3cda.  v3:= new `java.lang.StringBuilder`;
  #L3d3cde.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d3ce4.  v4:= "Root cause (" @kind object;
  #L3d3ce8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3cee.  v4:= v2 + 1;
  #L3d3cf2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3cf8.  v5:= " of " @kind object;
  #L3d3cfc.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3d02.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3d08.  v5:= ")" @kind object;
  #L3d3d0c.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3d12.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3d18.  v3:= temp @kind object;
  #L3d3d1a.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3d3d20.  v2:= temp @kind object;
  #L3d3d22.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L3d3d26.  call temp:= `i`(v7, v3, v2) @signature `Landroid/util/Log;.i:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3d3d2c.  v2:= v4;
  #L3d3d2e.  goto L3d3cd6;
  #L3d3d30.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d3d44.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L3d3d48.  call `printStackTrace`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L3d3d4e.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.io.PrintStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;

  #L3d3d60.  call `e`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @kind direct;
  #L3d3d66.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.io.PrintWriter` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;

  #L3d3d78.  call `e`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.e:(Ljava/lang/Appendable;)V` @kind direct;
  #L3d3d7e.  return @kind void;
}
procedure `void` `setOrigin`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.Exception` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.setOrigin:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC {
    temp;

  #L3d3dfc.  v0.`com.bumptech.glide.load.engine.GlideException.f` @type ^`java.lang.Exception` := v1 @kind object;
  #L3d3e00.  return @kind void;
}
