record `com.bumptech.glide.load.engine.prefill.b` @kind class @AccessFlag FINAL {
  `java.util.Map` `com.bumptech.glide.load.engine.prefill.b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.prefill.b.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.prefill.b.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.prefill.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.prefill.b` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/prefill/b;.<init>:(Ljava/util/Map;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d94e0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d94e6.  v2.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` := v3 @kind object;
  #L3d94ea.  v0:= new `java.util.ArrayList`;
  #L3d94ee.  call temp:= `keySet`(v3) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3d94f4.  v1:= temp @kind object;
  #L3d94f6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3d94fc.  v2.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` := v0 @kind object;
  #L3d9500.  call temp:= `values`(v3) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3d9506.  v3:= temp @kind object;
  #L3d9508.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3d950e.  v3:= temp @kind object;
  #L3d9510.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3d9516.  v0:= temp;
  #L3d9518.  if v0 == 0 then goto L3d953c;
  #L3d951c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3d9522.  v0:= temp @kind object;
  #L3d9524.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L3d9528.  v1:= v2.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int`;
  #L3d952c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3d9532.  v0:= temp;
  #L3d9534.  v1:= v1 + v0 @kind int;
  #L3d9536.  v2.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int` := v1;
  #L3d953a.  goto L3d9510;
  #L3d953c.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.load.engine.prefill.b` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/prefill/b;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d9410.  v0:= v1.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int`;
  #L3d9414.  if v0 != 0 then goto L3d941c;
  #L3d9418.  v0:= 1I;
  #L3d941a.  goto L3d941e;
  #L3d941c.  v0:= 0I;
  #L3d941e.  return v0;
}
procedure `com.bumptech.glide.load.engine.prefill.PreFillType` `b`(`com.bumptech.glide.load.engine.prefill.b` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/prefill/b;.b:()Lcom/bumptech/glide/load/engine/prefill/PreFillType;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d9430.  v0:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3d9434.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int`;
  #L3d9438.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3d943e.  v0:= temp @kind object;
  #L3d9440.  v0:= (`com.bumptech.glide.load.engine.prefill.PreFillType`) v0 @kind object;
  #L3d9444.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` @kind object;
  #L3d9448.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d944e.  v1:= temp @kind object;
  #L3d9450.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L3d9454.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3d945a.  v2:= temp;
  #L3d945c.  v3:= 1I;
  #L3d945e.  if v2 != v3 then goto L3d947c;
  #L3d9462.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` @kind object;
  #L3d9466.  call temp:= `remove`(v1, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d946c.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3d9470.  v2:= v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int`;
  #L3d9474.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L3d947a.  goto L3d9498;
  #L3d947c.  v2:= v4.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` @kind object;
  #L3d9480.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3d9486.  v1:= temp;
  #L3d9488.  v1:= v1 - v3 @kind int;
  #L3d948a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d9490.  v1:= temp @kind object;
  #L3d9492.  call temp:= `put`(v2, v0, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d9498.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int`;
  #L3d949c.  v1:= v1 - v3 @kind int;
  #L3d949e.  v4.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int` := v1;
  #L3d94a2.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3d94a6.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3d94ac.  v1:= temp;
  #L3d94ae.  if v1 == 0 then goto L3d94b6;
  #L3d94b2.  v1:= 0I;
  #L3d94b4.  goto L3d94ca;
  #L3d94b6.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int`;
  #L3d94ba.  v1:= v1 + v3 @kind int;
  #L3d94bc.  v2:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3d94c0.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3d94c6.  v2:= temp;
  #L3d94c8.  v1:= v1 %% v2 @kind int;
  #L3d94ca.  v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int` := v1;
  #L3d94ce.  return v0 @kind object;
}
