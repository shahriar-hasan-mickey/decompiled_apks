record `com.bumptech.glide.load.engine.executor.a$a` @kind class @AccessFlag  extends `java.io.FilenameFilter` @kind interface {
  `java.util.regex.Pattern` `com.bumptech.glide.load.engine.executor.a$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.a$a` v0 @kind this, `java.util.regex.Pattern` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/a$a;.<init>:(Ljava/util/regex/Pattern;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d8dd0.  v0.`com.bumptech.glide.load.engine.executor.a$a.a` @type ^`java.util.regex.Pattern` := v1 @kind object;
  #L3d8dd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d8dda.  return @kind void;
}
procedure `boolean` `accept`(`com.bumptech.glide.load.engine.executor.a$a` v0 @kind this, `java.io.File` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/a$a;.accept:(Ljava/io/File;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;

  #L3d8da8.  v1:= v0.`com.bumptech.glide.load.engine.executor.a$a.a` @type ^`java.util.regex.Pattern` @kind object;
  #L3d8dac.  call temp:= `matcher`(v1, v2) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L3d8db2.  v1:= temp @kind object;
  #L3d8db4.  call temp:= `matches`(v1) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L3d8dba.  v1:= temp;
  #L3d8dbc.  return v1;
}
