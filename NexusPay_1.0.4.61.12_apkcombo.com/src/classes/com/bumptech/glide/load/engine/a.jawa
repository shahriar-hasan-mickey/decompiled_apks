record `com.bumptech.glide.load.engine.a` @kind class @AccessFlag FINAL {
  `boolean` `com.bumptech.glide.load.engine.a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `com.bumptech.glide.load.engine.a.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.a.c` @AccessFlag FINAL;
  `java.lang.ref.ReferenceQueue` `com.bumptech.glide.load.engine.a.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.l$a` `com.bumptech.glide.load.engine.a.e` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.a.f` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.load.engine.a$c` `com.bumptech.glide.load.engine.a.g` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3cf720.  v0:= new `com.bumptech.glide.load.engine.a$a`;
  #L3cf724.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/a$a;.<init>:()V` @kind direct;
  #L3cf72a.  call temp:= `newSingleThreadExecutor`(v0) @signature `Ljava/util/concurrent/Executors;.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;` @kind static;
  #L3cf730.  v0:= temp @kind object;
  #L3cf732.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @kind direct;
  #L3cf738.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 , `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3cf74c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cf752.  v0:= new `java.util.HashMap`;
  #L3cf756.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3cf75c.  v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` := v0 @kind object;
  #L3cf760.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L3cf764.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L3cf76a.  v1.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L3cf76e.  v1.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` := v2 @kind boolean;
  #L3cf772.  v1.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.concurrent.Executor` := v3 @kind object;
  #L3cf776.  v2:= new `com.bumptech.glide.load.engine.a$b`;
  #L3cf77a.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/a$b;.<init>:(Lcom/bumptech/glide/load/engine/a;)V` @kind direct;
  #L3cf780.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3cf786.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v3 @kind this, `com.bumptech.glide.load.Key` v4 @kind object, `com.bumptech.glide.load.engine.l` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3cf798.  @monitorenter v3
  #L3cf79a.  v0:= new `com.bumptech.glide.load.engine.a$d`;
  #L3cf79e.  v1:= v3.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L3cf7a2.  v2:= v3.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` @kind boolean;
  #L3cf7a6.  call `<init>`(v0, v4, v5, v1, v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.<init>:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;Ljava/lang/ref/ReferenceQueue;Z)V` @kind direct;
  #L3cf7ac.  v5:= v3.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3cf7b0.  call temp:= `put`(v5, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3cf7b6.  v4:= temp @kind object;
  #L3cf7b8.  v4:= (`com.bumptech.glide.load.engine.a$d`) v4 @kind object;
  #L3cf7bc.  if v4 == 0 then goto L3cf7c6;
  #L3cf7c0.  call `a`(v4) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L3cf7c6.  @monitorexit v3
  #L3cf7c8.  return @kind void;
  #L3cf7ca.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cf7cc.  @monitorexit v3
  #L3cf7ce.  throw v4;
  catch `java.lang.Throwable` @[L3cf79a..L3cf7c6] goto L3cf7ca;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.a` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L3cf7ec.  v0:= v1.`com.bumptech.glide.load.engine.a.f` @type ^`boolean` @kind boolean;
  #L3cf7f0.  if v0 != 0 then goto L3cf82a;
  #L3cf7f4.  v0:= v1.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L3cf7f8.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L3cf7fe.  v0:= temp @kind object;
  #L3cf800.  v0:= (`com.bumptech.glide.load.engine.a$d`) v0 @kind object;
  #L3cf804.  call `c`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L3cf80a.  v0:= v1.`com.bumptech.glide.load.engine.a.g` @type ^`com.bumptech.glide.load.engine.a$c` @kind object;
  #L3cf80e.  if v0 == 0 then goto L3cf7ec;
  #L3cf812.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/a$c;.a:()V` @kind interface;
  #L3cf818.  goto L3cf7ec;
  #L3cf81a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3cf820.  v0:= temp @kind object;
  #L3cf822.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L3cf828.  goto L3cf7ec;
  #L3cf82a.  return @kind void;
  catch `java.lang.InterruptedException` @[L3cf7f4..L3cf818] goto L3cf81a;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.a` v7 @kind this, `com.bumptech.glide.load.engine.a$d` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3cf84c.  @monitorenter v7
  #L3cf84e.  v0:= v7.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3cf852.  v1:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3cf856.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3cf85c.  v0:= v8.`com.bumptech.glide.load.engine.a$d.b` @type ^`boolean` @kind boolean;
  #L3cf860.  if v0 == 0 then goto L3cf89c;
  #L3cf864.  v0:= v8.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L3cf868.  if v0 != 0 then goto L3cf86e;
  #L3cf86c.  goto L3cf89c;
  #L3cf86e.  @monitorexit v7
  #L3cf870.  v0:= new `com.bumptech.glide.load.engine.l`;
  #L3cf874.  v2:= v8.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L3cf878.  v3:= 1I;
  #L3cf87a.  v4:= 0I;
  #L3cf87c.  v5:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3cf880.  v6:= v7.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.l$a` @kind object;
  #L3cf884.  v1:= v0 @kind object;
  #L3cf886.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lcom/bumptech/glide/load/engine/l;.<init>:(Lcom/bumptech/glide/load/engine/Resource;ZZLcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l$a;)V` @kind direct;
  #L3cf88c.  v1:= v7.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.l$a` @kind object;
  #L3cf890.  v8:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3cf894.  call `onResourceReleased`(v1, v8, v0) @signature `Lcom/bumptech/glide/load/engine/l$a;.onResourceReleased:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @kind interface;
  #L3cf89a.  return @kind void;
  #L3cf89c.  @monitorexit v7
  #L3cf89e.  return @kind void;
  #L3cf8a0.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cf8a2.  @monitorexit v7
  #L3cf8a4.  throw v8;
  catch `java.lang.Throwable` @[L3cf84e..L3cf870] goto L3cf8a0;
  catch `java.lang.Throwable` @[L3cf89c..L3cf8a4] goto L3cf8a0;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.Key` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.d:(Lcom/bumptech/glide/load/Key;)V` @AccessFlag  {
    temp;
    v0;

  #L3cf8cc.  @monitorenter v1
  #L3cf8ce.  v0:= v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3cf8d2.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3cf8d8.  v2:= temp @kind object;
  #L3cf8da.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L3cf8de.  if v2 == 0 then goto L3cf8e8;
  #L3cf8e2.  call `a`(v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L3cf8e8.  @monitorexit v1
  #L3cf8ea.  return @kind void;
  #L3cf8ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cf8ee.  @monitorexit v1
  #L3cf8f0.  throw v2;
  catch `java.lang.Throwable` @[L3cf8ce..L3cf8e8] goto L3cf8ec;
}
procedure `com.bumptech.glide.load.engine.l` `e`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.Key` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.e:(Lcom/bumptech/glide/load/Key;)Lcom/bumptech/glide/load/engine/l;` @AccessFlag  {
    temp;
    v0;

  #L3cf6c0.  @monitorenter v1
  #L3cf6c2.  v0:= v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3cf6c6.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3cf6cc.  v2:= temp @kind object;
  #L3cf6ce.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L3cf6d2.  if v2 != 0 then goto L3cf6dc;
  #L3cf6d6.  v2:= 0I;
  #L3cf6d8.  @monitorexit v1
  #L3cf6da.  return v2 @kind object;
  #L3cf6dc.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3cf6e2.  v0:= temp @kind object;
  #L3cf6e4.  v0:= (`com.bumptech.glide.load.engine.l`) v0 @kind object;
  #L3cf6e8.  if v0 != 0 then goto L3cf6f2;
  #L3cf6ec.  call `c`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L3cf6f2.  @monitorexit v1
  #L3cf6f4.  return v0 @kind object;
  #L3cf6f6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cf6f8.  @monitorexit v1
  #L3cf6fa.  throw v2;
  catch `java.lang.Throwable` @[L3cf6c2..L3cf6d2] goto L3cf6f6;
  catch `java.lang.Throwable` @[L3cf6dc..L3cf6f2] goto L3cf6f6;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.engine.l$a` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.f:(Lcom/bumptech/glide/load/engine/l$a;)V` @AccessFlag  {
    temp;
    v0;

  #L3cf910.  @monitorenter v2
  #L3cf912.  @monitorenter v1
  #L3cf914.  v1.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.l$a` := v2 @kind object;
  #L3cf918.  @monitorexit v1
  #L3cf91a.  @monitorexit v2
  #L3cf91c.  return @kind void;
  #L3cf91e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cf920.  @monitorexit v1
  #L3cf922.  throw v0;
  #L3cf924.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cf926.  @monitorexit v2
  #L3cf928.  throw v0;
  catch `java.lang.Throwable` @[L3cf912..L3cf914] goto L3cf924;
  catch `java.lang.Throwable` @[L3cf914..L3cf91a] goto L3cf91e;
  catch `java.lang.Throwable` @[L3cf91a..L3cf91c] goto L3cf924;
  catch `java.lang.Throwable` @[L3cf920..L3cf922] goto L3cf91e;
  catch `java.lang.Throwable` @[L3cf922..L3cf928] goto L3cf924;
}
procedure `void` `g`(`com.bumptech.glide.load.engine.a` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3cf96c.  v0:= 1I;
  #L3cf96e.  v2.`com.bumptech.glide.load.engine.a.f` @type ^`boolean` := v0 @kind boolean;
  #L3cf972.  v0:= v2.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3cf976.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.ExecutorService` @kind boolean;
  #L3cf97a.  if v1 == 0 then goto L3cf988;
  #L3cf97e.  v0:= (`java.util.concurrent.ExecutorService`) v0 @kind object;
  #L3cf982.  call `shutdownAndAwaitTermination`(v0) @signature `Lcom/bumptech/glide/util/Executors;.shutdownAndAwaitTermination:(Ljava/util/concurrent/ExecutorService;)V` @kind static;
  #L3cf988.  return @kind void;
}
