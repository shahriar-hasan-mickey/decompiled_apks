record `com.bumptech.glide.load.engine.a$d` @kind class @AccessFlag FINAL extends `java.lang.ref.WeakReference` @kind class {
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.a$d.a` @AccessFlag FINAL;
  `boolean` `com.bumptech.glide.load.engine.a$d.b` @AccessFlag FINAL;
  `com.bumptech.glide.load.engine.Resource` `com.bumptech.glide.load.engine.a$d.c` @AccessFlag ;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a$d` v0 @kind this, `com.bumptech.glide.load.Key` v1 @kind object, `com.bumptech.glide.load.engine.l` v2 @kind object, `java.lang.ref.ReferenceQueue` v3 @kind object, `boolean` v4 ) @signature `Lcom/bumptech/glide/load/engine/a$d;.<init>:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;Ljava/lang/ref/ReferenceQueue;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cf640.  call `<init>`(v0, v2, v3) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L3cf646.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cf64c.  v1:= temp @kind object;
  #L3cf64e.  v1:= (`com.bumptech.glide.load.Key`) v1 @kind object;
  #L3cf652.  v0.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3cf656.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/l;.c:()Z` @kind virtual;
  #L3cf65c.  v1:= temp;
  #L3cf65e.  if v1 == 0 then goto L3cf67c;
  #L3cf662.  if v4 == 0 then goto L3cf67c;
  #L3cf666.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/load/engine/l;.b:()Lcom/bumptech/glide/load/engine/Resource;` @kind virtual;
  #L3cf66c.  v1:= temp @kind object;
  #L3cf66e.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cf674.  v1:= temp @kind object;
  #L3cf676.  v1:= (`com.bumptech.glide.load.engine.Resource`) v1 @kind object;
  #L3cf67a.  goto L3cf67e;
  #L3cf67c.  v1:= 0I;
  #L3cf67e.  v0.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.Resource` := v1 @kind object;
  #L3cf682.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/l;.c:()Z` @kind virtual;
  #L3cf688.  v1:= temp;
  #L3cf68a.  v0.`com.bumptech.glide.load.engine.a$d.b` @type ^`boolean` := v1 @kind boolean;
  #L3cf68e.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a$d` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L3cf6a0.  v0:= 0I;
  #L3cf6a2.  v1.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.Resource` := v0 @kind object;
  #L3cf6a6.  call `clear`(v1) @signature `Ljava/lang/ref/WeakReference;.clear:()V` @kind virtual;
  #L3cf6ac.  return @kind void;
}
