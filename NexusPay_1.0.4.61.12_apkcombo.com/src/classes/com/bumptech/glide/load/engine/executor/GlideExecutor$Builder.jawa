record `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.b` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.d` @AccessFlag PRIVATE;
  `java.lang.String` `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.e` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.f` @AccessFlag PRIVATE;
}
global `long` `@@com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.NO_THREAD_TIMEOUT` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d86ac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d86b2.  v0:= `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.DEFAULT` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` @kind object;
  #L3d86b6.  v1.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.d` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v0 @kind object;
  #L3d86ba.  v1.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.a` @type ^`boolean` := v2 @kind boolean;
  #L3d86be.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `build`(`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` v11 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.build:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d8594.  v0:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.e` @type ^`java.lang.String` @kind object;
  #L3d8598.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3d859e.  v0:= temp;
  #L3d85a0.  if v0 != 0 then goto L3d8604;
  #L3d85a4.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L3d85a8.  v2:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.b` @type ^`int`;
  #L3d85ac.  v3:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.c` @type ^`int`;
  #L3d85b0.  v4:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.f` @type ^`long` @kind wide;
  #L3d85b4.  v6:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d85b8.  v7:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L3d85bc.  call `<init>`(v7) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L3d85c2.  v8:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$a`;
  #L3d85c6.  v1:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.e` @type ^`java.lang.String` @kind object;
  #L3d85ca.  v9:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.d` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` @kind object;
  #L3d85ce.  v10:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.a` @type ^`boolean` @kind boolean;
  #L3d85d2.  call `<init>`(v8, v1, v9, v10) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$a;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;Z)V` @kind direct;
  #L3d85d8.  v1:= v0 @kind object;
  #L3d85da.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3d85e0.  v1:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.f` @type ^`long` @kind wide;
  #L3d85e4.  v3:= 0L;
  #L3d85e8.  v5:= lcmp(v1, v3);
  #L3d85ec.  if v5 == 0 then goto L3d85f8;
  #L3d85f0.  v1:= 1I;
  #L3d85f2.  call `allowCoreThreadTimeOut`(v0, v1) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.allowCoreThreadTimeOut:(Z)V` @kind virtual;
  #L3d85f8.  v1:= new `com.bumptech.glide.load.engine.executor.GlideExecutor`;
  #L3d85fc.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @kind direct;
  #L3d8602.  return v1 @kind object;
  #L3d8604.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d8608.  v1:= new `java.lang.StringBuilder`;
  #L3d860c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d8612.  v2:= "Name must be non-null and non-empty, but given: " @kind object;
  #L3d8616.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d861c.  v2:= v11.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.e` @type ^`java.lang.String` @kind object;
  #L3d8620.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8626.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d862c.  v1:= temp @kind object;
  #L3d862e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d8634.  throw v0;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` `setName`(`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setName:(Ljava/lang/String;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @AccessFlag PUBLIC {
    temp;

  #L3d8648.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.e` @type ^`java.lang.String` := v1 @kind object;
  #L3d864c.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` `setThreadCount`(`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @AccessFlag PUBLIC {
    temp;

  #L3d8660.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.b` @type ^`int` := v1;
  #L3d8664.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.c` @type ^`int` := v1;
  #L3d8668.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` `setThreadTimeoutMillis`(`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` v0 @kind this, `long` v1 ) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setThreadTimeoutMillis:(J)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @AccessFlag PUBLIC {
    temp;

  #L3d867c.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.f` @type ^`long` := v1 @kind wide;
  #L3d8680.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` `setUncaughtThrowableStrategy`(`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder` v0 @kind this, `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;.setUncaughtThrowableStrategy:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;)Lcom/bumptech/glide/load/engine/executor/GlideExecutor$Builder;` @AccessFlag PUBLIC {
    temp;

  #L3d8694.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$Builder.d` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v1 @kind object;
  #L3d8698.  return v0 @kind object;
}
