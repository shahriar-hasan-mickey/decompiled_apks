record `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.IGNORE` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.LOG` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.THROW` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d88b4.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy$a`;
  #L3d88b8.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy$a;.<init>:()V` @kind direct;
  #L3d88be.  `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.IGNORE` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v0 @kind object;
  #L3d88c2.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy$b`;
  #L3d88c6.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy$b;.<init>:()V` @kind direct;
  #L3d88cc.  `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.LOG` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v0 @kind object;
  #L3d88d0.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy$c`;
  #L3d88d4.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy$c;.<init>:()V` @kind direct;
  #L3d88da.  `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.THROW` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v0 @kind object;
  #L3d88de.  v0:= `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.LOG` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` @kind object;
  #L3d88e2.  `@@com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy.DEFAULT` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v0 @kind object;
  #L3d88e6.  return @kind void;
}
procedure `void` `handle`(`java.lang.Throwable` v0 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;.handle:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
