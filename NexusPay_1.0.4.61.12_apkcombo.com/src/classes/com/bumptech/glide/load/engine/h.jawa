record `com.bumptech.glide.load.engine.h` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.g$b` @kind interface, `com.bumptech.glide.util.pool.FactoryPools$Poolable` @kind interface {
  `com.bumptech.glide.load.engine.h$e` `com.bumptech.glide.load.engine.h.a` @AccessFlag FINAL;
  `com.bumptech.glide.util.pool.StateVerifier` `com.bumptech.glide.load.engine.h.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.l$a` `com.bumptech.glide.load.engine.h.c` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.Pools$Pool` `com.bumptech.glide.load.engine.h.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.h$c` `com.bumptech.glide.load.engine.h.e` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.i` `com.bumptech.glide.load.engine.h.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.h` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.i` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.j` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `com.bumptech.glide.load.engine.h.k` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.h.l` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.m` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.n` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.o` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.p` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.Resource` `com.bumptech.glide.load.engine.h.q` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.DataSource` `com.bumptech.glide.load.engine.h.r` @AccessFlag ;
  `boolean` `com.bumptech.glide.load.engine.h.s` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.GlideException` `com.bumptech.glide.load.engine.h.t` @AccessFlag ;
  `boolean` `com.bumptech.glide.load.engine.h.u` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.l` `com.bumptech.glide.load.engine.h.v` @AccessFlag ;
  `com.bumptech.glide.load.engine.g` `com.bumptech.glide.load.engine.h.w` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.x` @AccessFlag PRIVATE_VOLATILE;
}
global `com.bumptech.glide.load.engine.h$c` `@@com.bumptech.glide.load.engine.h.y` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d2480.  v0:= new `com.bumptech.glide.load.engine.h$c`;
  #L3d2484.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/h$c;.<init>:()V` @kind direct;
  #L3d248a.  `@@com.bumptech.glide.load.engine.h.y` @type ^`com.bumptech.glide.load.engine.h$c` := v0 @kind object;
  #L3d248e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.h` v9 @kind this, `com.bumptech.glide.load.engine.executor.GlideExecutor` v10 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v11 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v12 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v13 @kind object, `com.bumptech.glide.load.engine.i` v14 @kind object, `com.bumptech.glide.load.engine.l$a` v15 @kind object, `androidx.core.util.Pools$Pool` v16 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/i;Lcom/bumptech/glide/load/engine/l$a;Landroidx/core/util/Pools$Pool;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d24a0.  v8:= `@@com.bumptech.glide.load.engine.h.y` @type ^`com.bumptech.glide.load.engine.h$c` @kind object;
  #L3d24a4.  v0:= v9 @kind object;
  #L3d24a6.  v1:= v10 @kind object;
  #L3d24a8.  v2:= v11 @kind object;
  #L3d24aa.  v3:= v12 @kind object;
  #L3d24ac.  v4:= v13 @kind object;
  #L3d24ae.  v5:= v14 @kind object;
  #L3d24b0.  v6:= v15 @kind object;
  #L3d24b2.  v7:= v16 @kind object;
  #L3d24b6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/h;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/i;Lcom/bumptech/glide/load/engine/l$a;Landroidx/core/util/Pools$Pool;Lcom/bumptech/glide/load/engine/h$c;)V` @kind direct;
  #L3d24bc.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.executor.GlideExecutor` v2 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v3 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v4 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v5 @kind object, `com.bumptech.glide.load.engine.i` v6 @kind object, `com.bumptech.glide.load.engine.l$a` v7 @kind object, `androidx.core.util.Pools$Pool` v8 @kind object, `com.bumptech.glide.load.engine.h$c` v9 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/i;Lcom/bumptech/glide/load/engine/l$a;Landroidx/core/util/Pools$Pool;Lcom/bumptech/glide/load/engine/h$c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d24d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d24d6.  v0:= new `com.bumptech.glide.load.engine.h$e`;
  #L3d24da.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.<init>:()V` @kind direct;
  #L3d24e0.  v1.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` := v0 @kind object;
  #L3d24e4.  call temp:= `newInstance`() @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.newInstance:()Lcom/bumptech/glide/util/pool/StateVerifier;` @kind static;
  #L3d24ea.  v0:= temp @kind object;
  #L3d24ec.  v1.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` := v0 @kind object;
  #L3d24f0.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3d24f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3d24fa.  v1.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3d24fe.  v1.`com.bumptech.glide.load.engine.h.g` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v2 @kind object;
  #L3d2502.  v1.`com.bumptech.glide.load.engine.h.h` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v3 @kind object;
  #L3d2506.  v1.`com.bumptech.glide.load.engine.h.i` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v4 @kind object;
  #L3d250a.  v1.`com.bumptech.glide.load.engine.h.j` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v5 @kind object;
  #L3d250e.  v1.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` := v6 @kind object;
  #L3d2512.  v1.`com.bumptech.glide.load.engine.h.c` @type ^`com.bumptech.glide.load.engine.l$a` := v7 @kind object;
  #L3d2516.  v1.`com.bumptech.glide.load.engine.h.d` @type ^`androidx.core.util.Pools$Pool` := v8 @kind object;
  #L3d251a.  v1.`com.bumptech.glide.load.engine.h.e` @type ^`com.bumptech.glide.load.engine.h$c` := v9 @kind object;
  #L3d251e.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `g`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.g:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d2434.  v0:= v1.`com.bumptech.glide.load.engine.h.n` @type ^`boolean` @kind boolean;
  #L3d2438.  if v0 == 0 then goto L3d2442;
  #L3d243c.  v0:= v1.`com.bumptech.glide.load.engine.h.i` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3d2440.  goto L3d2454;
  #L3d2442.  v0:= v1.`com.bumptech.glide.load.engine.h.o` @type ^`boolean` @kind boolean;
  #L3d2446.  if v0 == 0 then goto L3d2450;
  #L3d244a.  v0:= v1.`com.bumptech.glide.load.engine.h.j` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3d244e.  goto L3d2454;
  #L3d2450.  v0:= v1.`com.bumptech.glide.load.engine.h.h` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3d2454.  return v0 @kind object;
}
procedure `boolean` `j`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d23ac.  v0:= v1.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3d23b0.  if v0 != 0 then goto L3d23ca;
  #L3d23b4.  v0:= v1.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3d23b8.  if v0 != 0 then goto L3d23ca;
  #L3d23bc.  v0:= v1.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3d23c0.  if v0 == 0 then goto L3d23c6;
  #L3d23c4.  goto L3d23ca;
  #L3d23c6.  v0:= 0I;
  #L3d23c8.  goto L3d23cc;
  #L3d23ca.  v0:= 1I;
  #L3d23cc.  return v0;
}
procedure `void` `n`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3d29f4.  @monitorenter v3
  #L3d29f6.  v0:= v3.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d29fa.  if v0 == 0 then goto L3d2a48;
  #L3d29fe.  v0:= v3.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d2a02.  call `clear`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.clear:()V` @kind virtual;
  #L3d2a08.  v0:= 0I;
  #L3d2a0a.  v3.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` := v0 @kind object;
  #L3d2a0e.  v3.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` := v0 @kind object;
  #L3d2a12.  v3.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` := v0 @kind object;
  #L3d2a16.  v1:= 0I;
  #L3d2a18.  v3.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` := v1 @kind boolean;
  #L3d2a1c.  v3.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` := v1 @kind boolean;
  #L3d2a20.  v3.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` := v1 @kind boolean;
  #L3d2a24.  v2:= v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L3d2a28.  call `s`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/g;.s:(Z)V` @kind virtual;
  #L3d2a2e.  v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` := v0 @kind object;
  #L3d2a32.  v3.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.engine.GlideException` := v0 @kind object;
  #L3d2a36.  v3.`com.bumptech.glide.load.engine.h.r` @type ^`com.bumptech.glide.load.DataSource` := v0 @kind object;
  #L3d2a3a.  v0:= v3.`com.bumptech.glide.load.engine.h.d` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3d2a3e.  call temp:= `release`(v0, v3) @signature `Landroidx/core/util/Pools$Pool;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L3d2a44.  @monitorexit v3
  #L3d2a46.  return @kind void;
  #L3d2a48.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d2a4c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3d2a52.  throw v0;
  #L3d2a54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d2a56.  @monitorexit v3
  #L3d2a58.  throw v0;
  catch `java.lang.Throwable` @[L3d29f6..L3d2a44] goto L3d2a54;
  catch `java.lang.Throwable` @[L3d2a48..L3d2a54] goto L3d2a54;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.g` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d2b04.  call temp:= `g`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.g:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind direct;
  #L3d2b0a.  v0:= temp @kind object;
  #L3d2b0c.  call `execute`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.execute:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3d2b12.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.h` v2 @kind this, `com.bumptech.glide.request.ResourceCallback` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.b:(Lcom/bumptech/glide/request/ResourceCallback;Ljava/util/concurrent/Executor;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3d2530.  @monitorenter v2
  #L3d2532.  v0:= v2.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3d2536.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3d253c.  v0:= v2.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d2540.  call `a`(v0, v3, v4) @signature `Lcom/bumptech/glide/load/engine/h$e;.a:(Lcom/bumptech/glide/request/ResourceCallback;Ljava/util/concurrent/Executor;)V` @kind virtual;
  #L3d2546.  v0:= v2.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3d254a.  v1:= 1I;
  #L3d254c.  if v0 == 0 then goto L3d2568;
  #L3d2550.  call `h`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3d2556.  v0:= new `com.bumptech.glide.load.engine.h$b`;
  #L3d255a.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/engine/h$b;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3d2560.  call `execute`(v4, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3d2566.  goto L3d259e;
  #L3d2568.  v0:= v2.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3d256c.  if v0 == 0 then goto L3d2588;
  #L3d2570.  call `h`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3d2576.  v0:= new `com.bumptech.glide.load.engine.h$a`;
  #L3d257a.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/engine/h$a;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3d2580.  call `execute`(v4, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3d2586.  goto L3d259e;
  #L3d2588.  v3:= v2.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3d258c.  if v3 != 0 then goto L3d2592;
  #L3d2590.  goto L3d2594;
  #L3d2592.  v1:= 0I;
  #L3d2594.  v3:= "Cannot add callbacks to a cancelled EngineJob" @kind object;
  #L3d2598.  call `checkArgument`(v1, v3) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3d259e.  @monitorexit v2
  #L3d25a0.  return @kind void;
  #L3d25a2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d25a4.  @monitorexit v2
  #L3d25a6.  throw v3;
  catch `java.lang.Throwable` @[L3d2532..L3d259e] goto L3d25a2;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.request.ResourceCallback` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.c:(Lcom/bumptech/glide/request/ResourceCallback;)V` @AccessFlag  {
    temp;
    v0;

  #L3d25c4.  v0:= v1.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.engine.GlideException` @kind object;
  #L3d25c8.  call `onLoadFailed`(v2, v0) @signature `Lcom/bumptech/glide/request/ResourceCallback;.onLoadFailed:(Lcom/bumptech/glide/load/engine/GlideException;)V` @kind interface;
  #L3d25ce.  return @kind void;
  #L3d25d0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d25d2.  v0:= new `com.bumptech.glide.load.engine.b`;
  #L3d25d6.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/b;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d25dc.  throw v0;
  catch `java.lang.Throwable` @[L3d25c4..L3d25ce] goto L3d25d0;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.h` v2 @kind this, `com.bumptech.glide.request.ResourceCallback` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.d:(Lcom/bumptech/glide/request/ResourceCallback;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3d25fc.  v0:= v2.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3d2600.  v1:= v2.`com.bumptech.glide.load.engine.h.r` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3d2604.  call `onResourceReady`(v3, v0, v1) @signature `Lcom/bumptech/glide/request/ResourceCallback;.onResourceReady:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;)V` @kind interface;
  #L3d260a.  return @kind void;
  #L3d260c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d260e.  v0:= new `com.bumptech.glide.load.engine.b`;
  #L3d2612.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/engine/b;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d2618.  throw v0;
  catch `java.lang.Throwable` @[L3d25fc..L3d260a] goto L3d260c;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.h` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3d2638.  call temp:= `j`(v2) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @kind direct;
  #L3d263e.  v0:= temp;
  #L3d2640.  if v0 == 0 then goto L3d2646;
  #L3d2644.  return @kind void;
  #L3d2646.  v0:= 1I;
  #L3d2648.  v2.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` := v0 @kind boolean;
  #L3d264c.  v0:= v2.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L3d2650.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/g;.a:()V` @kind virtual;
  #L3d2656.  v0:= v2.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` @kind object;
  #L3d265a.  v1:= v2.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d265e.  call `onEngineJobCancelled`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/i;.onEngineJobCancelled:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/load/Key;)V` @kind interface;
  #L3d2664.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3d2678.  @monitorenter v3
  #L3d267a.  v0:= v3.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3d267e.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3d2684.  call temp:= `j`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @kind direct;
  #L3d268a.  v0:= temp;
  #L3d268c.  v1:= "Not yet complete!" @kind object;
  #L3d2690.  call `checkArgument`(v0, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3d2696.  v0:= v3.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3d269a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3d26a0.  v0:= temp;
  #L3d26a2.  if v0 < 0 then goto L3d26aa;
  #L3d26a6.  v1:= 1I;
  #L3d26a8.  goto L3d26ac;
  #L3d26aa.  v1:= 0I;
  #L3d26ac.  v2:= "Can't decrement below 0" @kind object;
  #L3d26b0.  call `checkArgument`(v1, v2) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3d26b6.  if v0 != 0 then goto L3d26c6;
  #L3d26ba.  v0:= v3.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3d26be.  call `n`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3d26c4.  goto L3d26c8;
  #L3d26c6.  v0:= 0I;
  #L3d26c8.  @monitorexit v3
  #L3d26ca.  if v0 == 0 then goto L3d26d4;
  #L3d26ce.  call `d`(v0) @signature `Lcom/bumptech/glide/load/engine/l;.d:()V` @kind virtual;
  #L3d26d4.  return @kind void;
  #L3d26d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d26d8.  @monitorexit v3
  #L3d26da.  throw v0;
  catch `java.lang.Throwable` @[L3d267a..L3d26ca] goto L3d26d6;
  catch `java.lang.Throwable` @[L3d26d8..L3d26da] goto L3d26d6;
}
procedure `com.bumptech.glide.util.pool.StateVerifier` `getVerifier`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.getVerifier:()Lcom/bumptech/glide/util/pool/StateVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d2468.  v0:= v1.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3d246c.  return v0 @kind object;
}
procedure `void` `h`(`com.bumptech.glide.load.engine.h` v2 @kind this, `int` v3 ) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3d2700.  @monitorenter v2
  #L3d2702.  call temp:= `j`(v2) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @kind direct;
  #L3d2708.  v0:= temp;
  #L3d270a.  v1:= "Not yet complete!" @kind object;
  #L3d270e.  call `checkArgument`(v0, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3d2714.  v0:= v2.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3d2718.  call temp:= `getAndAdd`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndAdd:(I)I` @kind virtual;
  #L3d271e.  v3:= temp;
  #L3d2720.  if v3 != 0 then goto L3d2736;
  #L3d2724.  v3:= v2.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3d2728.  if v3 == 0 then goto L3d2736;
  #L3d272c.  v3:= v2.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3d2730.  call `a`(v3) @signature `Lcom/bumptech/glide/load/engine/l;.a:()V` @kind virtual;
  #L3d2736.  @monitorexit v2
  #L3d2738.  return @kind void;
  #L3d273a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d273c.  @monitorexit v2
  #L3d273e.  throw v3;
  catch `java.lang.Throwable` @[L3d2702..L3d2736] goto L3d273a;
}
procedure `com.bumptech.glide.load.engine.h` `i`(`com.bumptech.glide.load.engine.h` v0 @kind this, `com.bumptech.glide.load.Key` v1 @kind object, `boolean` v2 , `boolean` v3 , `boolean` v4 , `boolean` v5 ) @signature `Lcom/bumptech/glide/load/engine/h;.i:(Lcom/bumptech/glide/load/Key;ZZZZ)Lcom/bumptech/glide/load/engine/h;` @AccessFlag  {
    temp;

  #L3d23f8.  @monitorenter v0
  #L3d23fa.  v0.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3d23fe.  v0.`com.bumptech.glide.load.engine.h.m` @type ^`boolean` := v2 @kind boolean;
  #L3d2402.  v0.`com.bumptech.glide.load.engine.h.n` @type ^`boolean` := v3 @kind boolean;
  #L3d2406.  v0.`com.bumptech.glide.load.engine.h.o` @type ^`boolean` := v4 @kind boolean;
  #L3d240a.  v0.`com.bumptech.glide.load.engine.h.p` @type ^`boolean` := v5 @kind boolean;
  #L3d240e.  @monitorexit v0
  #L3d2410.  return v0 @kind object;
  #L3d2412.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d2414.  @monitorexit v0
  #L3d2416.  throw v1;
  catch `java.lang.Throwable` @[L3d23fa..L3d240e] goto L3d2412;
}
procedure `void` `k`(`com.bumptech.glide.load.engine.h` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d275c.  @monitorenter v4
  #L3d275e.  v0:= v4.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3d2762.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3d2768.  v0:= v4.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3d276c.  if v0 == 0 then goto L3d277a;
  #L3d2770.  call `n`(v4) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3d2776.  @monitorexit v4
  #L3d2778.  return @kind void;
  #L3d277a.  v0:= v4.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d277e.  call temp:= `isEmpty`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.isEmpty:()Z` @kind virtual;
  #L3d2784.  v0:= temp;
  #L3d2786.  if v0 != 0 then goto L3d2818;
  #L3d278a.  v0:= v4.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3d278e.  if v0 != 0 then goto L3d2808;
  #L3d2792.  v0:= 1I;
  #L3d2794.  v4.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` := v0 @kind boolean;
  #L3d2798.  v1:= v4.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d279c.  v2:= v4.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d27a0.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.c:()Lcom/bumptech/glide/load/engine/h$e;` @kind virtual;
  #L3d27a6.  v2:= temp @kind object;
  #L3d27a8.  call temp:= `size`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.size:()I` @kind virtual;
  #L3d27ae.  v3:= temp;
  #L3d27b0.  v3:= v3 + v0 @kind int;
  #L3d27b2.  call `h`(v4, v3) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3d27b8.  @monitorexit v4
  #L3d27ba.  v0:= v4.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` @kind object;
  #L3d27be.  v3:= 0I;
  #L3d27c0.  call `onEngineJobComplete`(v0, v4, v1, v3) @signature `Lcom/bumptech/glide/load/engine/i;.onEngineJobComplete:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @kind interface;
  #L3d27c6.  call temp:= `iterator`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3d27cc.  v0:= temp @kind object;
  #L3d27ce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3d27d4.  v1:= temp;
  #L3d27d6.  if v1 == 0 then goto L3d2800;
  #L3d27da.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3d27e0.  v1:= temp @kind object;
  #L3d27e2.  v1:= (`com.bumptech.glide.load.engine.h$d`) v1 @kind object;
  #L3d27e6.  v2:= v1.`com.bumptech.glide.load.engine.h$d.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3d27ea.  v3:= new `com.bumptech.glide.load.engine.h$a`;
  #L3d27ee.  v1:= v1.`com.bumptech.glide.load.engine.h$d.a` @type ^`com.bumptech.glide.request.ResourceCallback` @kind object;
  #L3d27f2.  call `<init>`(v3, v4, v1) @signature `Lcom/bumptech/glide/load/engine/h$a;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3d27f8.  call `execute`(v2, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3d27fe.  goto L3d27ce;
  #L3d2800.  call `f`(v4) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @kind virtual;
  #L3d2806.  return @kind void;
  #L3d2808.  v0:= new `java.lang.IllegalStateException`;
  #L3d280c.  v1:= "Already failed once" @kind object;
  #L3d2810.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d2816.  throw v0;
  #L3d2818.  v0:= new `java.lang.IllegalStateException`;
  #L3d281c.  v1:= "Received an exception without any callbacks to notify" @kind object;
  #L3d2820.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d2826.  throw v0;
  #L3d2828.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d282a.  @monitorexit v4
  #L3d282c.  throw v0;
  catch `java.lang.Throwable` @[L3d275e..L3d27ba] goto L3d2828;
  catch `java.lang.Throwable` @[L3d2808..L3d282c] goto L3d2828;
}
procedure `void` `l`(`com.bumptech.glide.load.engine.h` v5 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d2854.  @monitorenter v5
  #L3d2856.  v0:= v5.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3d285a.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3d2860.  v0:= v5.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3d2864.  if v0 == 0 then goto L3d287c;
  #L3d2868.  v0:= v5.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L3d286c.  call `recycle`(v0) @signature `Lcom/bumptech/glide/load/engine/Resource;.recycle:()V` @kind interface;
  #L3d2872.  call `n`(v5) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3d2878.  @monitorexit v5
  #L3d287a.  return @kind void;
  #L3d287c.  v0:= v5.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d2880.  call temp:= `isEmpty`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.isEmpty:()Z` @kind virtual;
  #L3d2886.  v0:= temp;
  #L3d2888.  if v0 != 0 then goto L3d293c;
  #L3d288c.  v0:= v5.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3d2890.  if v0 != 0 then goto L3d292c;
  #L3d2894.  v0:= v5.`com.bumptech.glide.load.engine.h.e` @type ^`com.bumptech.glide.load.engine.h$c` @kind object;
  #L3d2898.  v1:= v5.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L3d289c.  v2:= v5.`com.bumptech.glide.load.engine.h.m` @type ^`boolean` @kind boolean;
  #L3d28a0.  v3:= v5.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d28a4.  v4:= v5.`com.bumptech.glide.load.engine.h.c` @type ^`com.bumptech.glide.load.engine.l$a` @kind object;
  #L3d28a8.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/h$c;.a:(Lcom/bumptech/glide/load/engine/Resource;ZLcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l$a;)Lcom/bumptech/glide/load/engine/l;` @kind virtual;
  #L3d28ae.  v0:= temp @kind object;
  #L3d28b0.  v5.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` := v0 @kind object;
  #L3d28b4.  v0:= 1I;
  #L3d28b6.  v5.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` := v0 @kind boolean;
  #L3d28ba.  v1:= v5.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d28be.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/load/engine/h$e;.c:()Lcom/bumptech/glide/load/engine/h$e;` @kind virtual;
  #L3d28c4.  v1:= temp @kind object;
  #L3d28c6.  call temp:= `size`(v1) @signature `Lcom/bumptech/glide/load/engine/h$e;.size:()I` @kind virtual;
  #L3d28cc.  v2:= temp;
  #L3d28ce.  v2:= v2 + v0 @kind int;
  #L3d28d0.  call `h`(v5, v2) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3d28d6.  v0:= v5.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d28da.  v2:= v5.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3d28de.  @monitorexit v5
  #L3d28e0.  v3:= v5.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` @kind object;
  #L3d28e4.  call `onEngineJobComplete`(v3, v5, v0, v2) @signature `Lcom/bumptech/glide/load/engine/i;.onEngineJobComplete:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @kind interface;
  #L3d28ea.  call temp:= `iterator`(v1) @signature `Lcom/bumptech/glide/load/engine/h$e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3d28f0.  v0:= temp @kind object;
  #L3d28f2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3d28f8.  v1:= temp;
  #L3d28fa.  if v1 == 0 then goto L3d2924;
  #L3d28fe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3d2904.  v1:= temp @kind object;
  #L3d2906.  v1:= (`com.bumptech.glide.load.engine.h$d`) v1 @kind object;
  #L3d290a.  v2:= v1.`com.bumptech.glide.load.engine.h$d.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3d290e.  v3:= new `com.bumptech.glide.load.engine.h$b`;
  #L3d2912.  v1:= v1.`com.bumptech.glide.load.engine.h$d.a` @type ^`com.bumptech.glide.request.ResourceCallback` @kind object;
  #L3d2916.  call `<init>`(v3, v5, v1) @signature `Lcom/bumptech/glide/load/engine/h$b;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3d291c.  call `execute`(v2, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3d2922.  goto L3d28f2;
  #L3d2924.  call `f`(v5) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @kind virtual;
  #L3d292a.  return @kind void;
  #L3d292c.  v0:= new `java.lang.IllegalStateException`;
  #L3d2930.  v1:= "Already have resource" @kind object;
  #L3d2934.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d293a.  throw v0;
  #L3d293c.  v0:= new `java.lang.IllegalStateException`;
  #L3d2940.  v1:= "Received a resource without any callbacks to notify" @kind object;
  #L3d2944.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d294a.  throw v0;
  #L3d294c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d294e.  @monitorexit v5
  #L3d2950.  throw v0;
  catch `java.lang.Throwable` @[L3d2856..L3d28e0] goto L3d294c;
  catch `java.lang.Throwable` @[L3d292c..L3d2950] goto L3d294c;
}
procedure `boolean` `m`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.m:()Z` @AccessFlag  {
    temp;
    v0;

  #L3d23e0.  v0:= v1.`com.bumptech.glide.load.engine.h.p` @type ^`boolean` @kind boolean;
  #L3d23e4.  return v0;
}
procedure `void` `o`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.request.ResourceCallback` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.o:(Lcom/bumptech/glide/request/ResourceCallback;)V` @AccessFlag  {
    temp;
    v0;

  #L3d2a80.  @monitorenter v1
  #L3d2a82.  v0:= v1.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3d2a86.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3d2a8c.  v0:= v1.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d2a90.  call `e`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.e:(Lcom/bumptech/glide/request/ResourceCallback;)V` @kind virtual;
  #L3d2a96.  v2:= v1.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3d2a9a.  call temp:= `isEmpty`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.isEmpty:()Z` @kind virtual;
  #L3d2aa0.  v2:= temp;
  #L3d2aa2.  if v2 == 0 then goto L3d2ade;
  #L3d2aa6.  call `e`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.e:()V` @kind virtual;
  #L3d2aac.  v2:= v1.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3d2ab0.  if v2 != 0 then goto L3d2ac2;
  #L3d2ab4.  v2:= v1.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3d2ab8.  if v2 == 0 then goto L3d2abe;
  #L3d2abc.  goto L3d2ac2;
  #L3d2abe.  v2:= 0I;
  #L3d2ac0.  goto L3d2ac4;
  #L3d2ac2.  v2:= 1I;
  #L3d2ac4.  if v2 == 0 then goto L3d2ade;
  #L3d2ac8.  v2:= v1.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3d2acc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3d2ad2.  v2:= temp;
  #L3d2ad4.  if v2 != 0 then goto L3d2ade;
  #L3d2ad8.  call `n`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3d2ade.  @monitorexit v1
  #L3d2ae0.  return @kind void;
  #L3d2ae2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d2ae4.  @monitorexit v1
  #L3d2ae6.  throw v2;
  catch `java.lang.Throwable` @[L3d2a82..L3d2ade] goto L3d2ae2;
}
procedure `void` `onLoadFailed`(`com.bumptech.glide.load.engine.h` v0 @kind this, `com.bumptech.glide.load.engine.GlideException` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.onLoadFailed:(Lcom/bumptech/glide/load/engine/GlideException;)V` @AccessFlag PUBLIC {
    temp;

  #L3d2978.  @monitorenter v0
  #L3d297a.  v0.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.engine.GlideException` := v1 @kind object;
  #L3d297e.  @monitorexit v0
  #L3d2980.  call `k`(v0) @signature `Lcom/bumptech/glide/load/engine/h;.k:()V` @kind virtual;
  #L3d2986.  return @kind void;
  #L3d2988.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d298a.  @monitorexit v0
  #L3d298c.  throw v1;
  catch `java.lang.Throwable` @[L3d297a..L3d2980] goto L3d2988;
  catch `java.lang.Throwable` @[L3d298a..L3d298c] goto L3d2988;
}
procedure `void` `onResourceReady`(`com.bumptech.glide.load.engine.h` v0 @kind this, `com.bumptech.glide.load.engine.Resource` v1 @kind object, `com.bumptech.glide.load.DataSource` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.onResourceReady:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;)V` @AccessFlag PUBLIC {
    temp;

  #L3d29b4.  @monitorenter v0
  #L3d29b6.  v0.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` := v1 @kind object;
  #L3d29ba.  v0.`com.bumptech.glide.load.engine.h.r` @type ^`com.bumptech.glide.load.DataSource` := v2 @kind object;
  #L3d29be.  @monitorexit v0
  #L3d29c0.  call `l`(v0) @signature `Lcom/bumptech/glide/load/engine/h;.l:()V` @kind virtual;
  #L3d29c6.  return @kind void;
  #L3d29c8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d29ca.  @monitorexit v0
  #L3d29cc.  throw v1;
  catch `java.lang.Throwable` @[L3d29b6..L3d29c0] goto L3d29c8;
  catch `java.lang.Throwable` @[L3d29ca..L3d29cc] goto L3d29c8;
}
procedure `void` `p`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.g` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.p:(Lcom/bumptech/glide/load/engine/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d2b24.  @monitorenter v1
  #L3d2b26.  v1.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` := v2 @kind object;
  #L3d2b2a.  call temp:= `y`(v2) @signature `Lcom/bumptech/glide/load/engine/g;.y:()Z` @kind virtual;
  #L3d2b30.  v0:= temp;
  #L3d2b32.  if v0 == 0 then goto L3d2b3c;
  #L3d2b36.  v0:= v1.`com.bumptech.glide.load.engine.h.g` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3d2b3a.  goto L3d2b44;
  #L3d2b3c.  call temp:= `g`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.g:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind direct;
  #L3d2b42.  v0:= temp @kind object;
  #L3d2b44.  call `execute`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.execute:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3d2b4a.  @monitorexit v1
  #L3d2b4c.  return @kind void;
  #L3d2b4e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d2b50.  @monitorexit v1
  #L3d2b52.  throw v2;
  catch `java.lang.Throwable` @[L3d2b26..L3d2b4a] goto L3d2b4e;
}
