record `com.bumptech.glide.load.engine.j` @kind class @AccessFlag  extends `com.bumptech.glide.load.Key` @kind interface {
  `java.lang.Object` `com.bumptech.glide.load.engine.j.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.j.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.j.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.j.e` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.j.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.j.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Options` `com.bumptech.glide.load.engine.j.h` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.j.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.j` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.Key` v2 @kind object, `int` v3 , `int` v4 , `java.util.Map` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object, `com.bumptech.glide.load.Options` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/j;.<init>:(Ljava/lang/Object;Lcom/bumptech/glide/load/Key;IILjava/util/Map;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/Options;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d2e0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d2e12.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3d2e18.  v1:= temp @kind object;
  #L3d2e1a.  v0.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` := v1 @kind object;
  #L3d2e1e.  v1:= "Signature must not be null" @kind object;
  #L3d2e22.  call temp:= `checkNotNull`(v2, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2e28.  v1:= temp @kind object;
  #L3d2e2a.  v1:= (`com.bumptech.glide.load.Key`) v1 @kind object;
  #L3d2e2e.  v0.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3d2e32.  v0.`com.bumptech.glide.load.engine.j.b` @type ^`int` := v3;
  #L3d2e36.  v0.`com.bumptech.glide.load.engine.j.c` @type ^`int` := v4;
  #L3d2e3a.  call temp:= `checkNotNull`(v5) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3d2e40.  v1:= temp @kind object;
  #L3d2e42.  v1:= (`java.util.Map`) v1 @kind object;
  #L3d2e46.  v0.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` := v1 @kind object;
  #L3d2e4a.  v1:= "Resource class must not be null" @kind object;
  #L3d2e4e.  call temp:= `checkNotNull`(v6, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2e54.  v1:= temp @kind object;
  #L3d2e56.  v1:= (`java.lang.Class`) v1 @kind object;
  #L3d2e5a.  v0.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` := v1 @kind object;
  #L3d2e5e.  v1:= "Transcode class must not be null" @kind object;
  #L3d2e62.  call temp:= `checkNotNull`(v7, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3d2e68.  v1:= temp @kind object;
  #L3d2e6a.  v1:= (`java.lang.Class`) v1 @kind object;
  #L3d2e6e.  v0.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` := v1 @kind object;
  #L3d2e72.  call temp:= `checkNotNull`(v8) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3d2e78.  v1:= temp @kind object;
  #L3d2e7a.  v1:= (`com.bumptech.glide.load.Options`) v1 @kind object;
  #L3d2e7e.  v0.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` := v1 @kind object;
  #L3d2e82.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.j` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/j;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d2bbc.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.j` @kind boolean;
  #L3d2bc0.  v1:= 0I;
  #L3d2bc2.  if v0 == 0 then goto L3d2c5c;
  #L3d2bc6.  v4:= (`com.bumptech.glide.load.engine.j`) v4 @kind object;
  #L3d2bca.  v0:= v3.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3d2bce.  v2:= v4.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3d2bd2.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d2bd8.  v0:= temp;
  #L3d2bda.  if v0 == 0 then goto L3d2c5c;
  #L3d2bde.  v0:= v3.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d2be2.  v2:= v4.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d2be6.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/Key;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3d2bec.  v0:= temp;
  #L3d2bee.  if v0 == 0 then goto L3d2c5c;
  #L3d2bf2.  v0:= v3.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3d2bf6.  v2:= v4.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3d2bfa.  if v0 != v2 then goto L3d2c5c;
  #L3d2bfe.  v0:= v3.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3d2c02.  v2:= v4.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3d2c06.  if v0 != v2 then goto L3d2c5c;
  #L3d2c0a.  v0:= v3.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3d2c0e.  v2:= v4.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3d2c12.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3d2c18.  v0:= temp;
  #L3d2c1a.  if v0 == 0 then goto L3d2c5c;
  #L3d2c1e.  v0:= v3.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3d2c22.  v2:= v4.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3d2c26.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d2c2c.  v0:= temp;
  #L3d2c2e.  if v0 == 0 then goto L3d2c5c;
  #L3d2c32.  v0:= v3.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3d2c36.  v2:= v4.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3d2c3a.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d2c40.  v0:= temp;
  #L3d2c42.  if v0 == 0 then goto L3d2c5c;
  #L3d2c46.  v0:= v3.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3d2c4a.  v4:= v4.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3d2c4e.  call temp:= `equals`(v0, v4) @signature `Lcom/bumptech/glide/load/Options;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d2c54.  v4:= temp;
  #L3d2c56.  if v4 == 0 then goto L3d2c5c;
  #L3d2c5a.  v1:= 1I;
  #L3d2c5c.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.j` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/j;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d2c70.  v0:= v2.`com.bumptech.glide.load.engine.j.i` @type ^`int`;
  #L3d2c74.  if v0 != 0 then goto L3d2d12;
  #L3d2c78.  v0:= v2.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3d2c7c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3d2c82.  v0:= temp;
  #L3d2c84.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2c88.  v0:= v0 * 31;
  #L3d2c8c.  v1:= v2.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d2c90.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/Key;.hashCode:()I` @kind interface;
  #L3d2c96.  v1:= temp;
  #L3d2c98.  v0:= v0 + v1 @kind int;
  #L3d2c9a.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2c9e.  v0:= v0 * 31;
  #L3d2ca2.  v1:= v2.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3d2ca6.  v0:= v0 + v1 @kind int;
  #L3d2ca8.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2cac.  v0:= v0 * 31;
  #L3d2cb0.  v1:= v2.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3d2cb4.  v0:= v0 + v1 @kind int;
  #L3d2cb6.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2cba.  v0:= v0 * 31;
  #L3d2cbe.  v1:= v2.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3d2cc2.  call temp:= `hashCode`(v1) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L3d2cc8.  v1:= temp;
  #L3d2cca.  v0:= v0 + v1 @kind int;
  #L3d2ccc.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2cd0.  v0:= v0 * 31;
  #L3d2cd4.  v1:= v2.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3d2cd8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3d2cde.  v1:= temp;
  #L3d2ce0.  v0:= v0 + v1 @kind int;
  #L3d2ce2.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2ce6.  v0:= v0 * 31;
  #L3d2cea.  v1:= v2.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3d2cee.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3d2cf4.  v1:= temp;
  #L3d2cf6.  v0:= v0 + v1 @kind int;
  #L3d2cf8.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2cfc.  v0:= v0 * 31;
  #L3d2d00.  v1:= v2.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3d2d04.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/Options;.hashCode:()I` @kind virtual;
  #L3d2d0a.  v1:= temp;
  #L3d2d0c.  v0:= v0 + v1 @kind int;
  #L3d2d0e.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3d2d12.  v0:= v2.`com.bumptech.glide.load.engine.j.i` @type ^`int`;
  #L3d2d16.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.j` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d2d28.  v0:= new `java.lang.StringBuilder`;
  #L3d2d2c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d2d32.  v1:= "EngineKey{model=" @kind object;
  #L3d2d36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d3c.  v1:= v2.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3d2d40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d46.  v1:= ", width=" @kind object;
  #L3d2d4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d50.  v1:= v2.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3d2d54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d5a.  v1:= ", height=" @kind object;
  #L3d2d5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d64.  v1:= v2.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3d2d68.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d6e.  v1:= ", resourceClass=" @kind object;
  #L3d2d72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d78.  v1:= v2.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3d2d7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d82.  v1:= ", transcodeClass=" @kind object;
  #L3d2d86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d8c.  v1:= v2.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3d2d90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2d96.  v1:= ", signature=" @kind object;
  #L3d2d9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2da0.  v1:= v2.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3d2da4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2daa.  v1:= ", hashCode=" @kind object;
  #L3d2dae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2db4.  v1:= v2.`com.bumptech.glide.load.engine.j.i` @type ^`int`;
  #L3d2db8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2dbe.  v1:= ", transformations=" @kind object;
  #L3d2dc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2dc8.  v1:= v2.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3d2dcc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2dd2.  v1:= ", options=" @kind object;
  #L3d2dd6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2ddc.  v1:= v2.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3d2de0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2de6.  v1:= 125I;
  #L3d2dea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d2df0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d2df6.  v0:= temp @kind object;
  #L3d2df8.  return v0 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.engine.j` v0 @kind this, `java.security.MessageDigest` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/j;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;

  #L3d2e94.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3d2e98.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3d2e9e.  throw v1;
}
