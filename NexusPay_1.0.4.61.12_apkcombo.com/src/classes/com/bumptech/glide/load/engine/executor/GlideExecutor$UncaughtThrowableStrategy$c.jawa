record `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy$c` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy$c` v0 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d8874.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d887a.  return @kind void;
}
procedure `void` `handle`(`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy$c;.handle:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d888c.  if v3 != 0 then goto L3d8892;
  #L3d8890.  return @kind void;
  #L3d8892.  v0:= new `java.lang.RuntimeException`;
  #L3d8896.  v1:= "Request threw uncaught throwable" @kind object;
  #L3d889a.  call `<init>`(v0, v1, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3d88a0.  throw v0;
}
