record `com.bumptech.glide.load.engine.prefill.BitmapPreFiller` @kind class @AccessFlag PUBLIC_FINAL {
  `com.bumptech.glide.load.engine.cache.MemoryCache` `com.bumptech.glide.load.engine.prefill.BitmapPreFiller.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` `com.bumptech.glide.load.engine.prefill.BitmapPreFiller.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.DecodeFormat` `com.bumptech.glide.load.engine.prefill.BitmapPreFiller.c` @AccessFlag PRIVATE_FINAL;
  `android.os.Handler` `com.bumptech.glide.load.engine.prefill.BitmapPreFiller.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.prefill.a` `com.bumptech.glide.load.engine.prefill.BitmapPreFiller.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.prefill.BitmapPreFiller` v2 @kind this, `com.bumptech.glide.load.engine.cache.MemoryCache` v3 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` v4 @kind object, `com.bumptech.glide.load.DecodeFormat` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/prefill/BitmapPreFiller;.<init>:(Lcom/bumptech/glide/load/engine/cache/MemoryCache;Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;Lcom/bumptech/glide/load/DecodeFormat;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d9340.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d9346.  v0:= new `android.os.Handler`;
  #L3d934a.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L3d9350.  v1:= temp @kind object;
  #L3d9352.  call `<init>`(v0, v1) @signature `Landroid/os/Handler;.<init>:(Landroid/os/Looper;)V` @kind direct;
  #L3d9358.  v2.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.d` @type ^`android.os.Handler` := v0 @kind object;
  #L3d935c.  v2.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.a` @type ^`com.bumptech.glide.load.engine.cache.MemoryCache` := v3 @kind object;
  #L3d9360.  v2.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.b` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` := v4 @kind object;
  #L3d9364.  v2.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.c` @type ^`com.bumptech.glide.load.DecodeFormat` := v5 @kind object;
  #L3d9368.  return @kind void;
}
procedure `int` `b`(`com.bumptech.glide.load.engine.prefill.PreFillType` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/prefill/BitmapPreFiller;.b:(Lcom/bumptech/glide/load/engine/prefill/PreFillType;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3d930c.  call temp:= `d`(v2) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType;.d:()I` @kind virtual;
  #L3d9312.  v0:= temp;
  #L3d9314.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType;.b:()I` @kind virtual;
  #L3d931a.  v1:= temp;
  #L3d931c.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType;.a:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L3d9322.  v2:= temp @kind object;
  #L3d9324.  call temp:= `getBitmapByteSize`(v0, v1, v2) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(IILandroid/graphics/Bitmap$Config;)I` @kind static;
  #L3d932a.  v2:= temp;
  #L3d932c.  return v2;
}
procedure `com.bumptech.glide.load.engine.prefill.b` `a`(`com.bumptech.glide.load.engine.prefill.BitmapPreFiller` v7 @kind this, `com.bumptech.glide.load.engine.prefill.PreFillType`[] v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/prefill/BitmapPreFiller;.a:([Lcom/bumptech/glide/load/engine/prefill/PreFillType;)Lcom/bumptech/glide/load/engine/prefill/b;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d9258.  v0:= v7.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.a` @type ^`com.bumptech.glide.load.engine.cache.MemoryCache` @kind object;
  #L3d925c.  call temp:= `getMaxSize`(v0) @signature `Lcom/bumptech/glide/load/engine/cache/MemoryCache;.getMaxSize:()J` @kind interface;
  #L3d9262.  v0:= temp @kind wide;
  #L3d9264.  v2:= v7.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.a` @type ^`com.bumptech.glide.load.engine.cache.MemoryCache` @kind object;
  #L3d9268.  call temp:= `getCurrentSize`(v2) @signature `Lcom/bumptech/glide/load/engine/cache/MemoryCache;.getCurrentSize:()J` @kind interface;
  #L3d926e.  v2:= temp @kind wide;
  #L3d9270.  v0:= v0 - v2 @kind long;
  #L3d9272.  v2:= v7.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.b` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` @kind object;
  #L3d9276.  call temp:= `getMaxSize`(v2) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;.getMaxSize:()J` @kind interface;
  #L3d927c.  v2:= temp @kind wide;
  #L3d927e.  v0:= v0 + v2 @kind long;
  #L3d9280.  v2:= length @variable v8;
  #L3d9282.  v3:= 0I;
  #L3d9284.  v4:= 0I;
  #L3d9286.  v5:= 0I;
  #L3d9288.  if v4 >= v2 then goto L3d92a0;
  #L3d928c.  v6:= v8[v4] @kind object;
  #L3d9290.  call temp:= `c`(v6) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType;.c:()I` @kind virtual;
  #L3d9296.  v6:= temp;
  #L3d9298.  v5:= v5 + v6 @kind int;
  #L3d929a.  v4:= v4 + 1;
  #L3d929e.  goto L3d9288;
  #L3d92a0.  v0:= (`float`) v0 @kind l2f;
  #L3d92a2.  v1:= (`float`) v5 @kind i2f;
  #L3d92a4.  v0:= v0 / v1 @kind float;
  #L3d92a6.  v1:= new `java.util.HashMap`;
  #L3d92aa.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3d92b0.  v2:= length @variable v8;
  #L3d92b2.  if v3 >= v2 then goto L3d92ee;
  #L3d92b6.  v4:= v8[v3] @kind object;
  #L3d92ba.  call temp:= `c`(v4) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType;.c:()I` @kind virtual;
  #L3d92c0.  v5:= temp;
  #L3d92c2.  v5:= (`float`) v5 @kind i2f;
  #L3d92c4.  v5:= v5 * v0 @kind float;
  #L3d92c8.  call temp:= `round`(v5) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3d92ce.  v5:= temp;
  #L3d92d0.  call temp:= `b`(v4) @signature `Lcom/bumptech/glide/load/engine/prefill/BitmapPreFiller;.b:(Lcom/bumptech/glide/load/engine/prefill/PreFillType;)I` @kind static;
  #L3d92d6.  v6:= temp;
  #L3d92d8.  v5:= v5 / v6 @kind int;
  #L3d92da.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d92e0.  v5:= temp @kind object;
  #L3d92e2.  call temp:= `put`(v1, v4, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d92e8.  v3:= v3 + 1;
  #L3d92ec.  goto L3d92b2;
  #L3d92ee.  v8:= new `com.bumptech.glide.load.engine.prefill.b`;
  #L3d92f2.  call `<init>`(v8, v1) @signature `Lcom/bumptech/glide/load/engine/prefill/b;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3d92f8.  return v8 @kind object;
}
procedure `void` `preFill`(`com.bumptech.glide.load.engine.prefill.BitmapPreFiller` v5 @kind this, `com.bumptech.glide.load.engine.prefill.PreFillType$Builder`[] v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/prefill/BitmapPreFiller;.preFill:([Lcom/bumptech/glide/load/engine/prefill/PreFillType$Builder;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d937c.  v0:= v5.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.e` @type ^`com.bumptech.glide.load.engine.prefill.a` @kind object;
  #L3d9380.  if v0 == 0 then goto L3d938a;
  #L3d9384.  call `b`(v0) @signature `Lcom/bumptech/glide/load/engine/prefill/a;.b:()V` @kind virtual;
  #L3d938a.  v0:= length @variable v6;
  #L3d938c.  v0:= new `com.bumptech.glide.load.engine.prefill.PreFillType`[v0];
  #L3d9390.  v1:= 0I;
  #L3d9392.  v2:= length @variable v6;
  #L3d9394.  if v1 >= v2 then goto L3d93d6;
  #L3d9398.  v2:= v6[v1] @kind object;
  #L3d939c.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType$Builder;.b:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L3d93a2.  v3:= temp @kind object;
  #L3d93a4.  if v3 != 0 then goto L3d93c4;
  #L3d93a8.  v3:= v5.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.c` @type ^`com.bumptech.glide.load.DecodeFormat` @kind object;
  #L3d93ac.  v4:= `@@com.bumptech.glide.load.DecodeFormat.PREFER_ARGB_8888` @type ^`com.bumptech.glide.load.DecodeFormat` @kind object;
  #L3d93b0.  if v3 != v4 then goto L3d93ba;
  #L3d93b4.  v3:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L3d93b8.  goto L3d93be;
  #L3d93ba.  v3:= `@@android.graphics.Bitmap$Config.RGB_565` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L3d93be.  call temp:= `setConfig`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType$Builder;.setConfig:(Landroid/graphics/Bitmap$Config;)Lcom/bumptech/glide/load/engine/prefill/PreFillType$Builder;` @kind virtual;
  #L3d93c4.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/load/engine/prefill/PreFillType$Builder;.a:()Lcom/bumptech/glide/load/engine/prefill/PreFillType;` @kind virtual;
  #L3d93ca.  v2:= temp @kind object;
  #L3d93cc.  v0[v1]:= v2 @kind object;
  #L3d93d0.  v1:= v1 + 1;
  #L3d93d4.  goto L3d9392;
  #L3d93d6.  call temp:= `a`(v5, v0) @signature `Lcom/bumptech/glide/load/engine/prefill/BitmapPreFiller;.a:([Lcom/bumptech/glide/load/engine/prefill/PreFillType;)Lcom/bumptech/glide/load/engine/prefill/b;` @kind virtual;
  #L3d93dc.  v6:= temp @kind object;
  #L3d93de.  v0:= new `com.bumptech.glide.load.engine.prefill.a`;
  #L3d93e2.  v1:= v5.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.b` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool` @kind object;
  #L3d93e6.  v2:= v5.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.a` @type ^`com.bumptech.glide.load.engine.cache.MemoryCache` @kind object;
  #L3d93ea.  call `<init>`(v0, v1, v2, v6) @signature `Lcom/bumptech/glide/load/engine/prefill/a;.<init>:(Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;Lcom/bumptech/glide/load/engine/cache/MemoryCache;Lcom/bumptech/glide/load/engine/prefill/b;)V` @kind direct;
  #L3d93f0.  v5.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.e` @type ^`com.bumptech.glide.load.engine.prefill.a` := v0 @kind object;
  #L3d93f4.  v6:= v5.`com.bumptech.glide.load.engine.prefill.BitmapPreFiller.d` @type ^`android.os.Handler` @kind object;
  #L3d93f8.  call temp:= `post`(v6, v0) @signature `Landroid/os/Handler;.post:(Ljava/lang/Runnable;)Z` @kind virtual;
  #L3d93fe.  return @kind void;
}
