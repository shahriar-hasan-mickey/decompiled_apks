record `com.bumptech.glide.load.engine.executor.GlideExecutor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.String` `com.bumptech.glide.load.engine.executor.GlideExecutor$a.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` `com.bumptech.glide.load.engine.executor.GlideExecutor$a.b` @AccessFlag FINAL;
  `boolean` `com.bumptech.glide.load.engine.executor.GlideExecutor$a.c` @AccessFlag FINAL;
  `int` `com.bumptech.glide.load.engine.executor.GlideExecutor$a.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.GlideExecutor$a` v0 @kind this, `java.lang.String` v1 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v2 @kind object, `boolean` v3 ) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$a;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d87d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d87de.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$a.a` @type ^`java.lang.String` := v1 @kind object;
  #L3d87e2.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$a.b` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v2 @kind object;
  #L3d87e6.  v0.`com.bumptech.glide.load.engine.executor.GlideExecutor$a.c` @type ^`boolean` := v3 @kind boolean;
  #L3d87ea.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.bumptech.glide.load.engine.executor.GlideExecutor$a` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$a;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d8760.  @monitorenter v3
  #L3d8762.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$a$a`;
  #L3d8766.  v1:= new `java.lang.StringBuilder`;
  #L3d876a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d8770.  v2:= "glide-" @kind object;
  #L3d8774.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d877a.  v2:= v3.`com.bumptech.glide.load.engine.executor.GlideExecutor$a.a` @type ^`java.lang.String` @kind object;
  #L3d877e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8784.  v2:= "-thread-" @kind object;
  #L3d8788.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d878e.  v2:= v3.`com.bumptech.glide.load.engine.executor.GlideExecutor$a.d` @type ^`int`;
  #L3d8792.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8798.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d879e.  v1:= temp @kind object;
  #L3d87a0.  call `<init>`(v0, v3, v4, v1) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$a$a;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$a;Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L3d87a6.  v4:= v3.`com.bumptech.glide.load.engine.executor.GlideExecutor$a.d` @type ^`int`;
  #L3d87aa.  v4:= v4 + 1;
  #L3d87ae.  v3.`com.bumptech.glide.load.engine.executor.GlideExecutor$a.d` @type ^`int` := v4;
  #L3d87b2.  @monitorexit v3
  #L3d87b4.  return v0 @kind object;
  #L3d87b6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d87b8.  @monitorexit v3
  #L3d87ba.  throw v4;
  catch `java.lang.Throwable` @[L3d8762..L3d87b2] goto L3d87b6;
}
