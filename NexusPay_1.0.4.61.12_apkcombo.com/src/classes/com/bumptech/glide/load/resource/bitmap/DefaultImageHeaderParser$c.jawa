record `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` @kind class @AccessFlag FINAL extends `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader` @kind interface {
  `java.io.InputStream` `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.<init>:(Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dee64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dee6a.  v0.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L3dee6e.  return @kind void;
}
procedure `int` `getUInt16`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.getUInt16:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ded5c.  call temp:= `getUInt8`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.getUInt8:()S` @kind virtual;
  #L3ded62.  v0:= temp;
  #L3ded64.  v0:= v0 ^< 8;
  #L3ded68.  call temp:= `getUInt8`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.getUInt8:()S` @kind virtual;
  #L3ded6e.  v1:= temp;
  #L3ded70.  v0:= v0 ^| v1 @kind int;
  #L3ded72.  return v0;
}
procedure `short` `getUInt8`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.getUInt8:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dee30.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3dee34.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3dee3a.  v0:= temp;
  #L3dee3c.  v1:= -1I;
  #L3dee3e.  if v0 == v1 then goto L3dee46;
  #L3dee42.  v0:= (`short`) v0 @kind i2s;
  #L3dee44.  return v0;
  #L3dee46.  v0:= new `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader$EndOfFileException`;
  #L3dee4a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$Reader$EndOfFileException;.<init>:()V` @kind direct;
  #L3dee50.  throw v0;
}
procedure `int` `read`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v4 @kind this, `byte`[] v5 @kind object, `int` v6 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.read:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ded84.  v0:= 0I;
  #L3ded86.  v1:= 0I;
  #L3ded88.  v2:= -1I;
  #L3ded8a.  if v0 >= v6 then goto L3deda6;
  #L3ded8e.  v1:= v4.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3ded92.  v3:= v6 - v0 @kind int;
  #L3ded96.  call temp:= `read`(v1, v5, v0, v3) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3ded9c.  v1:= temp;
  #L3ded9e.  if v1 == v2 then goto L3deda6;
  #L3deda2.  v0:= v0 + v1 @kind int;
  #L3deda4.  goto L3ded88;
  #L3deda6.  if v0 != 0 then goto L3dedbc;
  #L3dedaa.  if v1 == v2 then goto L3dedb0;
  #L3dedae.  goto L3dedbc;
  #L3dedb0.  v5:= new `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader$EndOfFileException`;
  #L3dedb4.  call `<init>`(v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$Reader$EndOfFileException;.<init>:()V` @kind direct;
  #L3dedba.  throw v5;
  #L3dedbc.  return v0;
}
procedure `long` `skip`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v7 @kind this, `long` v8 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3dedd0.  v0:= 0L;
  #L3dedd4.  v2:= lcmp(v8, v0);
  #L3dedd8.  if v2 >= 0 then goto L3dedde;
  #L3deddc.  return v0 @kind wide;
  #L3dedde.  v2:= v8 @kind wide;
  #L3dede0.  v4:= lcmp(v2, v0);
  #L3dede4.  if v4 <= 0 then goto L3dee1a;
  #L3dede8.  v4:= v7.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3dedec.  call temp:= `skip`(v4, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L3dedf2.  v4:= temp @kind wide;
  #L3dedf4.  v6:= lcmp(v4, v0);
  #L3dedf8.  if v6 <= 0 then goto L3dee00;
  #L3dedfc.  v2:= v2 - v4 @kind long;
  #L3dedfe.  goto L3dede0;
  #L3dee00.  v4:= v7.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3dee04.  call temp:= `read`(v4) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3dee0a.  v4:= temp;
  #L3dee0c.  v5:= -1I;
  #L3dee0e.  if v4 != v5 then goto L3dee14;
  #L3dee12.  goto L3dee1a;
  #L3dee14.  v4:= 1L;
  #L3dee18.  goto L3dedfc;
  #L3dee1a.  v8:= v8 - v2 @kind long;
  #L3dee1c.  return v8 @kind wide;
}
