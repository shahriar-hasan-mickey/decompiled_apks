record `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` @kind class @AccessFlag  extends `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy` @kind class {
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3df968.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy;.<init>:()V` @kind direct;
  #L3df96e.  return @kind void;
}
procedure `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` `getSampleSizeRounding`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$e;.getSampleSizeRounding:(IIII)Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$SampleSizeRounding;` @AccessFlag PUBLIC {
    temp;

  #L3df8f0.  v1:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.a` @type ^`boolean` @kind boolean;
  #L3df8f4.  if v1 == 0 then goto L3df8fe;
  #L3df8f8.  v1:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding.QUALITY` @type ^`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` @kind object;
  #L3df8fc.  return v1 @kind object;
  #L3df8fe.  v1:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding.MEMORY` @type ^`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` @kind object;
  #L3df902.  return v1 @kind object;
}
procedure `float` `getScaleFactor`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` v1 @kind this, `int` v2 , `int` v3 , `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$e;.getScaleFactor:(IIII)F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df914.  v0:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.a` @type ^`boolean` @kind boolean;
  #L3df918.  if v0 == 0 then goto L3df932;
  #L3df91c.  v4:= (`float`) v4 @kind i2f;
  #L3df91e.  v2:= (`float`) v2 @kind i2f;
  #L3df920.  v4:= v4 / v2 @kind float;
  #L3df922.  v2:= (`float`) v5 @kind i2f;
  #L3df924.  v3:= (`float`) v3 @kind i2f;
  #L3df926.  v2:= v2 / v3 @kind float;
  #L3df928.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L3df92e.  v2:= temp;
  #L3df930.  return v2;
  #L3df932.  v3:= v3 / v5 @kind int;
  #L3df934.  v2:= v2 / v4 @kind int;
  #L3df936.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3df93c.  v2:= temp;
  #L3df93e.  v3:= 1.0F;
  #L3df942.  if v2 != 0 then goto L3df948;
  #L3df946.  goto L3df954;
  #L3df948.  call temp:= `highestOneBit`(v2) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L3df94e.  v2:= temp;
  #L3df950.  v2:= (`float`) v2 @kind i2f;
  #L3df952.  v3:= v3 / v2 @kind float;
  #L3df954.  return v3;
}
