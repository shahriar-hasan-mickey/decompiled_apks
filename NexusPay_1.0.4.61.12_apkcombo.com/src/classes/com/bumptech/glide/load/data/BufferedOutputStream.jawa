record `com.bumptech.glide.load.data.BufferedOutputStream` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.OutputStream` @kind class {
  `java.io.OutputStream` `com.bumptech.glide.load.data.BufferedOutputStream.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.load.data.BufferedOutputStream.b` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` `com.bumptech.glide.load.data.BufferedOutputStream.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.data.BufferedOutputStream.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.data.BufferedOutputStream` v1 @kind this, `java.io.OutputStream` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cdbe8.  v0:= 65536I;
  #L3cdbec.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;I)V` @kind direct;
  #L3cdbf2.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.data.BufferedOutputStream` v0 @kind this, `java.io.OutputStream` v1 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v2 @kind object, `int` v3 ) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cdc04.  call `<init>`(v0) @signature `Ljava/io/OutputStream;.<init>:()V` @kind direct;
  #L3cdc0a.  v0.`com.bumptech.glide.load.data.BufferedOutputStream.a` @type ^`java.io.OutputStream` := v1 @kind object;
  #L3cdc0e.  v0.`com.bumptech.glide.load.data.BufferedOutputStream.c` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` := v2 @kind object;
  #L3cdc12.  v1:= constclass @type ^`byte`[] @kind object;
  #L3cdc16.  call temp:= `get`(v2, v3, v1) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;.get:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L3cdc1c.  v1:= temp @kind object;
  #L3cdc1e.  v1:= (`byte`[]) v1 @kind object;
  #L3cdc22.  v0.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] := v1 @kind object;
  #L3cdc26.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.data.BufferedOutputStream` v4 @kind this) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cdca0.  v0:= v4.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int`;
  #L3cdca4.  if v0 <= 0 then goto L3cdcbc;
  #L3cdca8.  v1:= v4.`com.bumptech.glide.load.data.BufferedOutputStream.a` @type ^`java.io.OutputStream` @kind object;
  #L3cdcac.  v2:= v4.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] @kind object;
  #L3cdcb0.  v3:= 0I;
  #L3cdcb2.  call `write`(v1, v2, v3, v0) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3cdcb8.  v4.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int` := v3;
  #L3cdcbc.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.data.BufferedOutputStream` v2 @kind this) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3cdcd0.  v0:= v2.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int`;
  #L3cdcd4.  v1:= v2.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] @kind object;
  #L3cdcd8.  v1:= length @variable v1;
  #L3cdcda.  if v0 != v1 then goto L3cdce4;
  #L3cdcde.  call `a`(v2) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.a:()V` @kind direct;
  #L3cdce4.  return @kind void;
}
procedure `void` `release`(`com.bumptech.glide.load.data.BufferedOutputStream` v2 @kind this) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.release:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3cdcf8.  v0:= v2.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] @kind object;
  #L3cdcfc.  if v0 == 0 then goto L3cdd10;
  #L3cdd00.  v1:= v2.`com.bumptech.glide.load.data.BufferedOutputStream.c` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` @kind object;
  #L3cdd04.  call `put`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;.put:(Ljava/lang/Object;)V` @kind interface;
  #L3cdd0a.  v0:= 0I;
  #L3cdd0c.  v2.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] := v0 @kind object;
  #L3cdd10.  return @kind void;
}
procedure `void` `close`(`com.bumptech.glide.load.data.BufferedOutputStream` v2 @kind this) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cdc38.  call `flush`(v2) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.flush:()V` @kind virtual;
  #L3cdc3e.  v0:= v2.`com.bumptech.glide.load.data.BufferedOutputStream.a` @type ^`java.io.OutputStream` @kind object;
  #L3cdc42.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L3cdc48.  call `release`(v2) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.release:()V` @kind direct;
  #L3cdc4e.  return @kind void;
  #L3cdc50.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cdc52.  v1:= v2.`com.bumptech.glide.load.data.BufferedOutputStream.a` @type ^`java.io.OutputStream` @kind object;
  #L3cdc56.  call `close`(v1) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L3cdc5c.  throw v0;
  catch `java.lang.Throwable` @[L3cdc38..L3cdc3e] goto L3cdc50;
}
procedure `void` `flush`(`com.bumptech.glide.load.data.BufferedOutputStream` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cdc7c.  call `a`(v1) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.a:()V` @kind direct;
  #L3cdc82.  v0:= v1.`com.bumptech.glide.load.data.BufferedOutputStream.a` @type ^`java.io.OutputStream` @kind object;
  #L3cdc86.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L3cdc8c.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.data.BufferedOutputStream` v3 @kind this, `int` v4 ) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.write:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cddb4.  v0:= v3.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] @kind object;
  #L3cddb8.  v1:= v3.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int`;
  #L3cddbc.  v2:= v1 + 1;
  #L3cddc0.  v3.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int` := v2;
  #L3cddc4.  v4:= (`byte`) v4 @kind i2b;
  #L3cddc6.  v0[v1]:= v4 @kind byte;
  #L3cddca.  call `b`(v3) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.b:()V` @kind direct;
  #L3cddd0.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.data.BufferedOutputStream` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.write:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cdd24.  v0:= length @variable v3;
  #L3cdd26.  v1:= 0I;
  #L3cdd28.  call `write`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.write:([BII)V` @kind virtual;
  #L3cdd2e.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.data.BufferedOutputStream` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3cdd40.  v0:= 0I;
  #L3cdd42.  v1:= v8 - v0 @kind int;
  #L3cdd46.  v2:= v7 + v0 @kind int;
  #L3cdd4a.  v3:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int`;
  #L3cdd4e.  if v3 != 0 then goto L3cdd68;
  #L3cdd52.  v3:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] @kind object;
  #L3cdd56.  v3:= length @variable v3;
  #L3cdd58.  if v1 < v3 then goto L3cdd68;
  #L3cdd5c.  v7:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.a` @type ^`java.io.OutputStream` @kind object;
  #L3cdd60.  call `write`(v7, v6, v2, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3cdd66.  return @kind void;
  #L3cdd68.  v3:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] @kind object;
  #L3cdd6c.  v3:= length @variable v3;
  #L3cdd6e.  v4:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int`;
  #L3cdd72.  v3:= v3 - v4 @kind int;
  #L3cdd74.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3cdd7a.  v1:= temp;
  #L3cdd7c.  v3:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.b` @type ^`byte`[] @kind object;
  #L3cdd80.  v4:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int`;
  #L3cdd84.  call `arraycopy`(v6, v2, v3, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3cdd8a.  v2:= v5.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int`;
  #L3cdd8e.  v2:= v2 + v1 @kind int;
  #L3cdd90.  v5.`com.bumptech.glide.load.data.BufferedOutputStream.d` @type ^`int` := v2;
  #L3cdd94.  v0:= v0 + v1 @kind int;
  #L3cdd96.  call `b`(v5) @signature `Lcom/bumptech/glide/load/data/BufferedOutputStream;.b:()V` @kind direct;
  #L3cdd9c.  if v0 < v8 then goto L3cdd42;
  #L3cdda0.  return @kind void;
}
