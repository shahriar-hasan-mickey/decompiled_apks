record `com.bumptech.glide.load.data.DataRewinderRegistry` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.load.data.DataRewinderRegistry.a` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.load.data.DataRewinder$Factory` `@@com.bumptech.glide.load.data.DataRewinderRegistry.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cdf24.  v0:= new `com.bumptech.glide.load.data.DataRewinderRegistry$a`;
  #L3cdf28.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry$a;.<init>:()V` @kind direct;
  #L3cdf2e.  `@@com.bumptech.glide.load.data.DataRewinderRegistry.b` @type ^`com.bumptech.glide.load.data.DataRewinder$Factory` := v0 @kind object;
  #L3cdf32.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.data.DataRewinderRegistry` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cdf44.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cdf4a.  v0:= new `java.util.HashMap`;
  #L3cdf4e.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3cdf54.  v1.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` := v0 @kind object;
  #L3cdf58.  return @kind void;
}
procedure `com.bumptech.glide.load.data.DataRewinder` `build`(`com.bumptech.glide.load.data.DataRewinderRegistry` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.build:(Ljava/lang/Object;)Lcom/bumptech/glide/load/data/DataRewinder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3cde80.  @monitorenter v5
  #L3cde82.  call temp:= `checkNotNull`(v6) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cde88.  v0:= v5.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` @kind object;
  #L3cde8c.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3cde92.  v1:= temp @kind object;
  #L3cde94.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3cde9a.  v0:= temp @kind object;
  #L3cde9c.  v0:= (`com.bumptech.glide.load.data.DataRewinder$Factory`) v0 @kind object;
  #L3cdea0.  if v0 != 0 then goto L3cdeee;
  #L3cdea4.  v1:= v5.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` @kind object;
  #L3cdea8.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3cdeae.  v1:= temp @kind object;
  #L3cdeb0.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3cdeb6.  v1:= temp @kind object;
  #L3cdeb8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cdebe.  v2:= temp;
  #L3cdec0.  if v2 == 0 then goto L3cdeee;
  #L3cdec4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cdeca.  v2:= temp @kind object;
  #L3cdecc.  v2:= (`com.bumptech.glide.load.data.DataRewinder$Factory`) v2 @kind object;
  #L3cded0.  call temp:= `getDataClass`(v2) @signature `Lcom/bumptech/glide/load/data/DataRewinder$Factory;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L3cded6.  v3:= temp @kind object;
  #L3cded8.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3cdede.  v4:= temp @kind object;
  #L3cdee0.  call temp:= `isAssignableFrom`(v3, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3cdee6.  v3:= temp;
  #L3cdee8.  if v3 == 0 then goto L3cdeb8;
  #L3cdeec.  v0:= v2 @kind object;
  #L3cdeee.  if v0 != 0 then goto L3cdef6;
  #L3cdef2.  v0:= `@@com.bumptech.glide.load.data.DataRewinderRegistry.b` @type ^`com.bumptech.glide.load.data.DataRewinder$Factory` @kind object;
  #L3cdef6.  call temp:= `build`(v0, v6) @signature `Lcom/bumptech/glide/load/data/DataRewinder$Factory;.build:(Ljava/lang/Object;)Lcom/bumptech/glide/load/data/DataRewinder;` @kind interface;
  #L3cdefc.  v6:= temp @kind object;
  #L3cdefe.  @monitorexit v5
  #L3cdf00.  return v6 @kind object;
  #L3cdf02.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cdf04.  @monitorexit v5
  #L3cdf06.  throw v6;
  catch `java.lang.Throwable` @[L3cde82..L3cdefe] goto L3cdf02;
}
procedure `void` `register`(`com.bumptech.glide.load.data.DataRewinderRegistry` v2 @kind this, `com.bumptech.glide.load.data.DataRewinder$Factory` v3 @kind object) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.register:(Lcom/bumptech/glide/load/data/DataRewinder$Factory;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cdf6c.  @monitorenter v2
  #L3cdf6e.  v0:= v2.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` @kind object;
  #L3cdf72.  call temp:= `getDataClass`(v3) @signature `Lcom/bumptech/glide/load/data/DataRewinder$Factory;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L3cdf78.  v1:= temp @kind object;
  #L3cdf7a.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3cdf80.  @monitorexit v2
  #L3cdf82.  return @kind void;
  #L3cdf84.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cdf86.  @monitorexit v2
  #L3cdf88.  throw v3;
  catch `java.lang.Throwable` @[L3cdf6e..L3cdf80] goto L3cdf84;
}
