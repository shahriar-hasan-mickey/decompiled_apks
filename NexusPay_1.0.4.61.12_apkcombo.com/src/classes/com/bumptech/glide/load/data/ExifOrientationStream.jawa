record `com.bumptech.glide.load.data.ExifOrientationStream` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `byte` `com.bumptech.glide.load.data.ExifOrientationStream.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.data.ExifOrientationStream.b` @AccessFlag PRIVATE;
}
global `byte`[] `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.data.ExifOrientationStream.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ce0c0.  v0:= 29I;
  #L3ce0c4.  v0:= new `byte`[v0];
  #L3ce0c8.  goto L3ce0e4;
  #L3ce0ce.  `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @type ^`byte`[] := v0 @kind object;
  #L3ce0d2.  v0:= length @variable v0;
  #L3ce0d4.  `@@com.bumptech.glide.load.data.ExifOrientationStream.d` @type ^`int` := v0;
  #L3ce0d8.  v0:= v0 + 2;
  #L3ce0dc.  `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @type ^`int` := v0;
  #L3ce0e0.  return @kind void;
  #L3ce0e2.  
  #L3ce0e4.  v0:= (-1I, -31I, 0I, 28I, 69I, 120I, 105I, 102I, 0I, 0I, 77I, 77I, 0I, 0I, 0I, 0I, 0I, 8I, 0I, 1I, 1I, 18I, 0I, 2I, 0I, 0I, 0I, 1I, 0I) @kind object;
  #L3ce109.  goto L3ce0ce;
}
procedure `void` `<init>`(`com.bumptech.glide.load.data.ExifOrientationStream` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ce11c.  call `<init>`(v2, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L3ce122.  v3:= -1I;
  #L3ce124.  if v4 < v3 then goto L3ce138;
  #L3ce128.  v3:= 8I;
  #L3ce12c.  if v4 > v3 then goto L3ce138;
  #L3ce130.  v3:= (`byte`) v4 @kind i2b;
  #L3ce132.  v2.`com.bumptech.glide.load.data.ExifOrientationStream.a` @type ^`byte` := v3 @kind byte;
  #L3ce136.  return @kind void;
  #L3ce138.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ce13c.  v0:= new `java.lang.StringBuilder`;
  #L3ce140.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ce146.  v1:= "Cannot add invalid orientation: " @kind object;
  #L3ce14a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce150.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ce156.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ce15c.  v4:= temp @kind object;
  #L3ce15e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce164.  throw v3;
}
procedure `void` `mark`(`com.bumptech.glide.load.data.ExifOrientationStream` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3ce178.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3ce17c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3ce182.  throw v1;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.load.data.ExifOrientationStream` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cdfa8.  v0:= 0I;
  #L3cdfaa.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cdfbc.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3cdfc0.  v1:= 2I;
  #L3cdfc2.  if v0 < v1 then goto L3cdfea;
  #L3cdfc6.  v2:= `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @type ^`int`;
  #L3cdfca.  if v0 <= v2 then goto L3cdfd0;
  #L3cdfce.  goto L3cdfea;
  #L3cdfd0.  if v0 != v2 then goto L3cdfda;
  #L3cdfd4.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.a` @type ^`byte` @kind byte;
  #L3cdfd8.  goto L3cdff2;
  #L3cdfda.  v2:= `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @type ^`byte`[] @kind object;
  #L3cdfde.  v0:= v0 - v1 @kind int;
  #L3cdfe0.  v0:= v2[v0] @kind byte;
  #L3cdfe4.  v0:= v0 ^& 255;
  #L3cdfe8.  goto L3cdff2;
  #L3cdfea.  call temp:= `read`(v3) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L3cdff0.  v0:= temp;
  #L3cdff2.  v1:= -1I;
  #L3cdff4.  if v0 == v1 then goto L3ce004;
  #L3cdff8.  v1:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3cdffc.  v1:= v1 + 1;
  #L3ce000.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int` := v1;
  #L3ce004.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ce018.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3ce01c.  v1:= `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @type ^`int`;
  #L3ce020.  if v0 <= v1 then goto L3ce02e;
  #L3ce024.  call temp:= `read`(v3, v4, v5, v6) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L3ce02a.  v4:= temp;
  #L3ce02c.  goto L3ce06c;
  #L3ce02e.  if v0 != v1 then goto L3ce03e;
  #L3ce032.  v6:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.a` @type ^`byte` @kind byte;
  #L3ce036.  v4[v5]:= v6 @kind byte;
  #L3ce03a.  v4:= 1I;
  #L3ce03c.  goto L3ce06c;
  #L3ce03e.  v2:= 2I;
  #L3ce040.  if v0 >= v2 then goto L3ce050;
  #L3ce044.  v2:= v2 - v0 @kind int;
  #L3ce046.  call temp:= `read`(v3, v4, v5, v2) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L3ce04c.  v4:= temp;
  #L3ce04e.  goto L3ce06c;
  #L3ce050.  v1:= v1 - v0 @kind int;
  #L3ce052.  call temp:= `min`(v1, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3ce058.  v6:= temp;
  #L3ce05a.  v0:= `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @type ^`byte`[] @kind object;
  #L3ce05e.  v1:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3ce062.  v1:= v1 - v2 @kind int;
  #L3ce064.  call `arraycopy`(v0, v1, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3ce06a.  v4:= v6;
  #L3ce06c.  if v4 <= 0 then goto L3ce07a;
  #L3ce070.  v5:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3ce074.  v5:= v5 + v4 @kind int;
  #L3ce076.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int` := v5;
  #L3ce07a.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.load.data.ExifOrientationStream` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce194.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3ce198.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3ce19e.  throw v0;
}
procedure `long` `skip`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ce08c.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L3ce092.  v4:= temp @kind wide;
  #L3ce094.  v0:= 0L;
  #L3ce098.  v2:= lcmp(v4, v0);
  #L3ce09c.  if v2 <= 0 then goto L3ce0ae;
  #L3ce0a0.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3ce0a4.  v0:= (`long`) v0 @kind i2l;
  #L3ce0a6.  v0:= v0 + v4 @kind long;
  #L3ce0a8.  v1:= (`int`) v0 @kind l2i;
  #L3ce0aa.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int` := v1;
  #L3ce0ae.  return v4 @kind wide;
}
