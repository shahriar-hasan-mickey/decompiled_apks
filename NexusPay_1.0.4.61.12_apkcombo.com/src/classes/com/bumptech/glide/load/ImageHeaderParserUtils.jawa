record `com.bumptech.glide.load.ImageHeaderParserUtils` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.bumptech.glide.load.ImageHeaderParserUtils` v0 @kind this) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3cd40c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd412.  return @kind void;
}
procedure `int` `a`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.ImageHeaderParserUtils$f` v5 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.a:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$f;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cd3c8.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cd3ce.  v0:= temp;
  #L3cd3d0.  v1:= 0I;
  #L3cd3d2.  v2:= -1I;
  #L3cd3d4.  if v1 >= v0 then goto L3cd3f8;
  #L3cd3d8.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cd3de.  v3:= temp @kind object;
  #L3cd3e0.  v3:= (`com.bumptech.glide.load.ImageHeaderParser`) v3 @kind object;
  #L3cd3e4.  call temp:= `a`(v5, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$f;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)I` @kind interface;
  #L3cd3ea.  v3:= temp;
  #L3cd3ec.  if v3 == v2 then goto L3cd3f2;
  #L3cd3f0.  return v3;
  #L3cd3f2.  v1:= v1 + 1;
  #L3cd3f6.  goto L3cd3d2;
  #L3cd3f8.  return v2;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `b`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.ImageHeaderParserUtils$g` v5 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cd30c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cd312.  v0:= temp;
  #L3cd314.  v1:= 0I;
  #L3cd316.  if v1 >= v0 then goto L3cd33e;
  #L3cd31a.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cd320.  v2:= temp @kind object;
  #L3cd322.  v2:= (`com.bumptech.glide.load.ImageHeaderParser`) v2 @kind object;
  #L3cd326.  call temp:= `a`(v5, v2) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind interface;
  #L3cd32c.  v2:= temp @kind object;
  #L3cd32e.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3cd332.  if v2 == v3 then goto L3cd338;
  #L3cd336.  return v2 @kind object;
  #L3cd338.  v1:= v1 + 1;
  #L3cd33c.  goto L3cd316;
  #L3cd33e.  v4:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3cd342.  return v4 @kind object;
}
procedure `int` `getOrientation`(`java.util.List` v1 @kind object, `com.bumptech.glide.load.data.ParcelFileDescriptorRewinder` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getOrientation:(Ljava/util/List;Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd354.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$e`;
  #L3cd358.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$e;.<init>:(Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3cd35e.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.a:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$f;)I` @kind static;
  #L3cd364.  v1:= temp;
  #L3cd366.  return v1;
}
procedure `int` `getOrientation`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getOrientation:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd378.  if v2 != 0 then goto L3cd380;
  #L3cd37c.  v1:= -1I;
  #L3cd37e.  return v1;
  #L3cd380.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L3cd386.  v0:= temp;
  #L3cd388.  if v0 != 0 then goto L3cd398;
  #L3cd38c.  v0:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L3cd390.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3cd396.  v2:= v0 @kind object;
  #L3cd398.  v0:= 5242880I;
  #L3cd39c.  call `mark`(v2, v0) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L3cd3a2.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$d`;
  #L3cd3a6.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$d;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3cd3ac.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.a:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$f;)I` @kind static;
  #L3cd3b2.  v1:= temp;
  #L3cd3b4.  return v1;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `com.bumptech.glide.load.data.ParcelFileDescriptorRewinder` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getType:(Ljava/util/List;Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd268.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$c`;
  #L3cd26c.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$c;.<init>:(Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3cd272.  call temp:= `b`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L3cd278.  v1:= temp @kind object;
  #L3cd27a.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getType:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd28c.  if v2 != 0 then goto L3cd296;
  #L3cd290.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3cd294.  return v1 @kind object;
  #L3cd296.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L3cd29c.  v0:= temp;
  #L3cd29e.  if v0 != 0 then goto L3cd2ae;
  #L3cd2a2.  v0:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L3cd2a6.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3cd2ac.  v2:= v0 @kind object;
  #L3cd2ae.  v3:= 5242880I;
  #L3cd2b2.  call `mark`(v2, v3) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L3cd2b8.  v3:= new `com.bumptech.glide.load.ImageHeaderParserUtils$a`;
  #L3cd2bc.  call `<init>`(v3, v2) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$a;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L3cd2c2.  call temp:= `b`(v1, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L3cd2c8.  v1:= temp @kind object;
  #L3cd2ca.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getType:(Ljava/util/List;Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd2dc.  if v2 != 0 then goto L3cd2e6;
  #L3cd2e0.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3cd2e4.  return v1 @kind object;
  #L3cd2e6.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$b`;
  #L3cd2ea.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$b;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L3cd2f0.  call temp:= `b`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L3cd2f6.  v1:= temp @kind object;
  #L3cd2f8.  return v1 @kind object;
}
