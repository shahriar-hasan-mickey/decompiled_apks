record `com.bumptech.glide.load.MultiTransformation` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.Transformation` @kind interface {
  `java.util.Collection` `com.bumptech.glide.load.MultiTransformation.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cd540.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd546.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3cd54c.  v0:= temp;
  #L3cd54e.  if v0 != 0 then goto L3cd558;
  #L3cd552.  v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` := v2 @kind object;
  #L3cd556.  return @kind void;
  #L3cd558.  v2:= new `java.lang.IllegalArgumentException`;
  #L3cd55c.  v0:= "MultiTransformation must contain at least one Transformation" @kind object;
  #L3cd560.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd566.  throw v2;
}
procedure `void` `<init>`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this, `com.bumptech.glide.load.Transformation`[] v2 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.<init>:([Lcom/bumptech/glide/load/Transformation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cd504.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd50a.  v0:= length @variable v2;
  #L3cd50c.  if v0 == 0 then goto L3cd51e;
  #L3cd510.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3cd516.  v2:= temp @kind object;
  #L3cd518.  v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` := v2 @kind object;
  #L3cd51c.  return @kind void;
  #L3cd51e.  v2:= new `java.lang.IllegalArgumentException`;
  #L3cd522.  v0:= "MultiTransformation must contain at least one Transformation" @kind object;
  #L3cd526.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd52c.  throw v2;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cd448.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.MultiTransformation` @kind boolean;
  #L3cd44c.  if v0 == 0 then goto L3cd466;
  #L3cd450.  v2:= (`com.bumptech.glide.load.MultiTransformation`) v2 @kind object;
  #L3cd454.  v0:= v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3cd458.  v2:= v2.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3cd45c.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Collection;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3cd462.  v2:= temp;
  #L3cd464.  return v2;
  #L3cd466.  v2:= 0I;
  #L3cd468.  return v2;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this) @signature `Lcom/bumptech/glide/load/MultiTransformation;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cd4e4.  v0:= v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3cd4e8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Collection;.hashCode:()I` @kind interface;
  #L3cd4ee.  v0:= temp;
  #L3cd4f0.  return v0;
}
procedure `com.bumptech.glide.load.engine.Resource` `transform`(`com.bumptech.glide.load.MultiTransformation` v4 @kind this, `android.content.Context` v5 @kind object, `com.bumptech.glide.load.engine.Resource` v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/bumptech/glide/load/MultiTransformation;.transform:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/Resource;II)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cd47c.  v0:= v4.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3cd480.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3cd486.  v0:= temp @kind object;
  #L3cd488.  v1:= v6 @kind object;
  #L3cd48a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cd490.  v2:= temp;
  #L3cd492.  if v2 == 0 then goto L3cd4d0;
  #L3cd496.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cd49c.  v2:= temp @kind object;
  #L3cd49e.  v2:= (`com.bumptech.glide.load.Transformation`) v2 @kind object;
  #L3cd4a2.  call temp:= `transform`(v2, v5, v1, v7, v8) @signature `Lcom/bumptech/glide/load/Transformation;.transform:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/Resource;II)Lcom/bumptech/glide/load/engine/Resource;` @kind interface;
  #L3cd4a8.  v2:= temp @kind object;
  #L3cd4aa.  if v1 == 0 then goto L3cd4cc;
  #L3cd4ae.  call temp:= `equals`(v1, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd4b4.  v3:= temp;
  #L3cd4b6.  if v3 != 0 then goto L3cd4cc;
  #L3cd4ba.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd4c0.  v3:= temp;
  #L3cd4c2.  if v3 != 0 then goto L3cd4cc;
  #L3cd4c6.  call `recycle`(v1) @signature `Lcom/bumptech/glide/load/engine/Resource;.recycle:()V` @kind interface;
  #L3cd4cc.  v1:= v2 @kind object;
  #L3cd4ce.  goto L3cd48a;
  #L3cd4d0.  return v1 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.MultiTransformation` v2 @kind this, `java.security.MessageDigest` v3 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cd578.  v0:= v2.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3cd57c.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3cd582.  v0:= temp @kind object;
  #L3cd584.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cd58a.  v1:= temp;
  #L3cd58c.  if v1 == 0 then goto L3cd5a4;
  #L3cd590.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cd596.  v1:= temp @kind object;
  #L3cd598.  v1:= (`com.bumptech.glide.load.Transformation`) v1 @kind object;
  #L3cd59c.  call `updateDiskCacheKey`(v1, v3) @signature `Lcom/bumptech/glide/load/Key;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind interface;
  #L3cd5a2.  goto L3cd584;
  #L3cd5a4.  return @kind void;
}
