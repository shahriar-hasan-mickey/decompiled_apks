record `com.bumptech.glide.load.model.LazyHeaders` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.model.Headers` @kind interface {
  `java.util.Map` `com.bumptech.glide.load.model.LazyHeaders.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.model.LazyHeaders.b` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.LazyHeaders` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dae74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dae7a.  call temp:= `unmodifiableMap`(v1) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L3dae80.  v1:= temp @kind object;
  #L3dae82.  v0.`com.bumptech.glide.load.model.LazyHeaders.a` @type ^`java.util.Map` := v1 @kind object;
  #L3dae86.  return @kind void;
}
procedure `java.lang.String` `a`(`com.bumptech.glide.load.model.LazyHeaders` v5 @kind this, `java.util.List` v6 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.a:(Ljava/util/List;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3dacec.  v0:= new `java.lang.StringBuilder`;
  #L3dacf0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dacf6.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dacfc.  v1:= temp;
  #L3dacfe.  v2:= 0I;
  #L3dad00.  if v2 >= v1 then goto L3dad4a;
  #L3dad04.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3dad0a.  v3:= temp @kind object;
  #L3dad0c.  v3:= (`com.bumptech.glide.load.model.LazyHeaderFactory`) v3 @kind object;
  #L3dad10.  call temp:= `buildHeader`(v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaderFactory;.buildHeader:()Ljava/lang/String;` @kind interface;
  #L3dad16.  v3:= temp @kind object;
  #L3dad18.  call temp:= `isEmpty`(v3) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3dad1e.  v4:= temp;
  #L3dad20.  if v4 != 0 then goto L3dad44;
  #L3dad24.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dad2a.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dad30.  v3:= temp;
  #L3dad32.  v3:= v3 + -1;
  #L3dad36.  if v2 == v3 then goto L3dad44;
  #L3dad3a.  v3:= 44I;
  #L3dad3e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dad44.  v2:= v2 + 1;
  #L3dad48.  goto L3dad00;
  #L3dad4a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dad50.  v6:= temp @kind object;
  #L3dad52.  return v6 @kind object;
}
procedure `java.util.Map` `b`(`com.bumptech.glide.load.model.LazyHeaders` v5 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.b:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3dada8.  v0:= new `java.util.HashMap`;
  #L3dadac.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3dadb2.  v1:= v5.`com.bumptech.glide.load.model.LazyHeaders.a` @type ^`java.util.Map` @kind object;
  #L3dadb6.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3dadbc.  v1:= temp @kind object;
  #L3dadbe.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dadc4.  v1:= temp @kind object;
  #L3dadc6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dadcc.  v2:= temp;
  #L3dadce.  if v2 == 0 then goto L3dae0e;
  #L3dadd2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dadd8.  v2:= temp @kind object;
  #L3dadda.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3dadde.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3dade4.  v3:= temp @kind object;
  #L3dade6.  v3:= (`java.util.List`) v3 @kind object;
  #L3dadea.  call temp:= `a`(v5, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.a:(Ljava/util/List;)Ljava/lang/String;` @kind direct;
  #L3dadf0.  v3:= temp @kind object;
  #L3dadf2.  call temp:= `isEmpty`(v3) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3dadf8.  v4:= temp;
  #L3dadfa.  if v4 != 0 then goto L3dadc6;
  #L3dadfe.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3dae04.  v2:= temp @kind object;
  #L3dae06.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dae0c.  goto L3dadc6;
  #L3dae0e.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.model.LazyHeaders` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dac98.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.model.LazyHeaders` @kind boolean;
  #L3dac9c.  if v0 == 0 then goto L3dacb6;
  #L3daca0.  v2:= (`com.bumptech.glide.load.model.LazyHeaders`) v2 @kind object;
  #L3daca4.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.a` @type ^`java.util.Map` @kind object;
  #L3daca8.  v2:= v2.`com.bumptech.glide.load.model.LazyHeaders.a` @type ^`java.util.Map` @kind object;
  #L3dacac.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3dacb2.  v2:= temp;
  #L3dacb4.  return v2;
  #L3dacb6.  v2:= 0I;
  #L3dacb8.  return v2;
}
procedure `java.util.Map` `getHeaders`(`com.bumptech.glide.load.model.LazyHeaders` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.getHeaders:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dae20.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.b` @type ^`java.util.Map` @kind object;
  #L3dae24.  if v0 != 0 then goto L3dae50;
  #L3dae28.  @monitorenter v1
  #L3dae2a.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.b` @type ^`java.util.Map` @kind object;
  #L3dae2e.  if v0 != 0 then goto L3dae46;
  #L3dae32.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.b:()Ljava/util/Map;` @kind direct;
  #L3dae38.  v0:= temp @kind object;
  #L3dae3a.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L3dae40.  v0:= temp @kind object;
  #L3dae42.  v1.`com.bumptech.glide.load.model.LazyHeaders.b` @type ^`java.util.Map` := v0 @kind object;
  #L3dae46.  @monitorexit v1
  #L3dae48.  goto L3dae50;
  #L3dae4a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dae4c.  @monitorexit v1
  #L3dae4e.  throw v0;
  #L3dae50.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.b` @type ^`java.util.Map` @kind object;
  #L3dae54.  return v0 @kind object;
  catch `java.lang.Throwable` @[L3dae2a..L3dae4e] goto L3dae4a;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.model.LazyHeaders` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3daccc.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders.a` @type ^`java.util.Map` @kind object;
  #L3dacd0.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L3dacd6.  v0:= temp;
  #L3dacd8.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.model.LazyHeaders` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dad64.  v0:= new `java.lang.StringBuilder`;
  #L3dad68.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dad6e.  v1:= "LazyHeaders{headers=" @kind object;
  #L3dad72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dad78.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders.a` @type ^`java.util.Map` @kind object;
  #L3dad7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dad82.  v1:= 125I;
  #L3dad86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dad8c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dad92.  v0:= temp @kind object;
  #L3dad94.  return v0 @kind object;
}
