record `com.bumptech.glide.load.model.GlideUrl` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.Key` @kind interface {
  `com.bumptech.glide.load.model.Headers` `com.bumptech.glide.load.model.GlideUrl.a` @AccessFlag PRIVATE_FINAL;
  `java.net.URL` `com.bumptech.glide.load.model.GlideUrl.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.model.GlideUrl.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.model.GlideUrl.d` @AccessFlag PRIVATE;
  `java.net.URL` `com.bumptech.glide.load.model.GlideUrl.e` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.load.model.GlideUrl.f` @AccessFlag PRIVATE_VOLATILE;
  `int` `com.bumptech.glide.load.model.GlideUrl.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da760.  v0:= `@@com.bumptech.glide.load.model.Headers.DEFAULT` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3da764.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/model/Headers;)V` @kind direct;
  #L3da76a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.Headers` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/model/Headers;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da77c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da782.  v0:= 0I;
  #L3da784.  v1.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` := v0 @kind object;
  #L3da788.  call temp:= `checkNotEmpty`(v2) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3da78e.  v2:= temp @kind object;
  #L3da790.  v1.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` := v2 @kind object;
  #L3da794.  call temp:= `checkNotNull`(v3) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3da79a.  v2:= temp @kind object;
  #L3da79c.  v2:= (`com.bumptech.glide.load.model.Headers`) v2 @kind object;
  #L3da7a0.  v1.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` := v2 @kind object;
  #L3da7a4.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/net/URL;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da7b8.  v0:= `@@com.bumptech.glide.load.model.Headers.DEFAULT` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3da7bc.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/net/URL;Lcom/bumptech/glide/load/model/Headers;)V` @kind direct;
  #L3da7c2.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v0 @kind this, `java.net.URL` v1 @kind object, `com.bumptech.glide.load.model.Headers` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/net/URL;Lcom/bumptech/glide/load/model/Headers;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3da7d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da7da.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3da7e0.  v1:= temp @kind object;
  #L3da7e2.  v1:= (`java.net.URL`) v1 @kind object;
  #L3da7e6.  v0.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` := v1 @kind object;
  #L3da7ea.  v1:= 0I;
  #L3da7ec.  v0.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` := v1 @kind object;
  #L3da7f0.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3da7f6.  v1:= temp @kind object;
  #L3da7f8.  v1:= (`com.bumptech.glide.load.model.Headers`) v1 @kind object;
  #L3da7fc.  v0.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` := v1 @kind object;
  #L3da800.  return @kind void;
}
procedure `byte`[] `a`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.a:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3da5a4.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.f` @type ^`byte`[] @kind object;
  #L3da5a8.  if v0 != 0 then goto L3da5c4;
  #L3da5ac.  call temp:= `getCacheKey`(v2) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3da5b2.  v0:= temp @kind object;
  #L3da5b4.  v1:= `@@com.bumptech.glide.load.Key.CHARSET` @type ^`java.nio.charset.Charset` @kind object;
  #L3da5b8.  call temp:= `getBytes`(v0, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3da5be.  v0:= temp @kind object;
  #L3da5c0.  v2.`com.bumptech.glide.load.model.GlideUrl.f` @type ^`byte`[] := v0 @kind object;
  #L3da5c4.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.f` @type ^`byte`[] @kind object;
  #L3da5c8.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.b:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3da658.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.d` @type ^`java.lang.String` @kind object;
  #L3da65c.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3da662.  v0:= temp;
  #L3da664.  if v0 == 0 then goto L3da6a0;
  #L3da668.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` @kind object;
  #L3da66c.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3da672.  v1:= temp;
  #L3da674.  if v1 == 0 then goto L3da690;
  #L3da678.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` @kind object;
  #L3da67c.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3da682.  v0:= temp @kind object;
  #L3da684.  v0:= (`java.net.URL`) v0 @kind object;
  #L3da688.  call temp:= `toString`(v0) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L3da68e.  v0:= temp @kind object;
  #L3da690.  v1:= "@#&=*+-_.,:!?()/~'%;$" @kind object;
  #L3da694.  call temp:= `encode`(v0, v1) @signature `Landroid/net/Uri;.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3da69a.  v0:= temp @kind object;
  #L3da69c.  v2.`com.bumptech.glide.load.model.GlideUrl.d` @type ^`java.lang.String` := v0 @kind object;
  #L3da6a0.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.d` @type ^`java.lang.String` @kind object;
  #L3da6a4.  return v0 @kind object;
}
procedure `java.net.URL` `c`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.c:()Ljava/net/URL;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3da6f0.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.e` @type ^`java.net.URL` @kind object;
  #L3da6f4.  if v0 != 0 then goto L3da70e;
  #L3da6f8.  v0:= new `java.net.URL`;
  #L3da6fc.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.b:()Ljava/lang/String;` @kind direct;
  #L3da702.  v1:= temp @kind object;
  #L3da704.  call `<init>`(v0, v1) @signature `Ljava/net/URL;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da70a.  v2.`com.bumptech.glide.load.model.GlideUrl.e` @type ^`java.net.URL` := v0 @kind object;
  #L3da70e.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.e` @type ^`java.net.URL` @kind object;
  #L3da712.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.model.GlideUrl` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3da550.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.model.GlideUrl` @kind boolean;
  #L3da554.  v1:= 0I;
  #L3da556.  if v0 == 0 then goto L3da590;
  #L3da55a.  v4:= (`com.bumptech.glide.load.model.GlideUrl`) v4 @kind object;
  #L3da55e.  call temp:= `getCacheKey`(v3) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3da564.  v0:= temp @kind object;
  #L3da566.  call temp:= `getCacheKey`(v4) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3da56c.  v2:= temp @kind object;
  #L3da56e.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da574.  v0:= temp;
  #L3da576.  if v0 == 0 then goto L3da590;
  #L3da57a.  v0:= v3.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3da57e.  v4:= v4.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3da582.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da588.  v4:= temp;
  #L3da58a.  if v4 == 0 then goto L3da590;
  #L3da58e.  v1:= 1I;
  #L3da590.  return v1;
}
procedure `java.lang.String` `getCacheKey`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da624.  v0:= v1.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` @kind object;
  #L3da628.  if v0 == 0 then goto L3da62e;
  #L3da62c.  goto L3da646;
  #L3da62e.  v0:= v1.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` @kind object;
  #L3da632.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3da638.  v0:= temp @kind object;
  #L3da63a.  v0:= (`java.net.URL`) v0 @kind object;
  #L3da63e.  call temp:= `toString`(v0) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L3da644.  v0:= temp @kind object;
  #L3da646.  return v0 @kind object;
}
procedure `java.util.Map` `getHeaders`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getHeaders:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da740.  v0:= v1.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3da744.  call temp:= `getHeaders`(v0) @signature `Lcom/bumptech/glide/load/model/Headers;.getHeaders:()Ljava/util/Map;` @kind interface;
  #L3da74a.  v0:= temp @kind object;
  #L3da74c.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3da5dc.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int`;
  #L3da5e0.  if v0 != 0 then goto L3da60e;
  #L3da5e4.  call temp:= `getCacheKey`(v2) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3da5ea.  v0:= temp @kind object;
  #L3da5ec.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3da5f2.  v0:= temp;
  #L3da5f4.  v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int` := v0;
  #L3da5f8.  v0:= v0 * 31;
  #L3da5fc.  v1:= v2.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3da600.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3da606.  v1:= temp;
  #L3da608.  v0:= v0 + v1 @kind int;
  #L3da60a.  v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int` := v0;
  #L3da60e.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int`;
  #L3da612.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da6b8.  call temp:= `getCacheKey`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3da6be.  v0:= temp @kind object;
  #L3da6c0.  return v0 @kind object;
}
procedure `java.lang.String` `toStringUrl`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.toStringUrl:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da6d4.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.b:()Ljava/lang/String;` @kind direct;
  #L3da6da.  v0:= temp @kind object;
  #L3da6dc.  return v0 @kind object;
}
procedure `java.net.URL` `toURL`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.toURL:()Ljava/net/URL;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da724.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.c:()Ljava/net/URL;` @kind direct;
  #L3da72a.  v0:= temp @kind object;
  #L3da72c.  return v0 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.security.MessageDigest` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da814.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.a:()[B` @kind direct;
  #L3da81a.  v0:= temp @kind object;
  #L3da81c.  call `update`(v2, v0) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L3da822.  return @kind void;
}
