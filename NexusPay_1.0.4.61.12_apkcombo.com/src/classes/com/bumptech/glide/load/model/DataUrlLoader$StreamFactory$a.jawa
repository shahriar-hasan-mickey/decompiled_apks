record `com.bumptech.glide.load.model.DataUrlLoader$StreamFactory$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.model.DataUrlLoader$DataDecoder` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.DataUrlLoader$StreamFactory$a` v0 @kind this, `com.bumptech.glide.load.model.DataUrlLoader$StreamFactory` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.<init>:(Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3da0ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da0b2.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.model.DataUrlLoader$StreamFactory$a` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.a:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC {
    temp;

  #L3da0c4.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3da0ca.  return @kind void;
}
procedure `java.io.InputStream` `b`(`com.bumptech.glide.load.model.DataUrlLoader$StreamFactory$a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.b:(Ljava/lang/String;)Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d9fdc.  v0:= "data:image" @kind object;
  #L3d9fe0.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3d9fe6.  v0:= temp;
  #L3d9fe8.  if v0 == 0 then goto L3da058;
  #L3d9fec.  v0:= 44I;
  #L3d9ff0.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3d9ff6.  v0:= temp;
  #L3d9ff8.  v1:= -1I;
  #L3d9ffa.  if v0 == v1 then goto L3da048;
  #L3d9ffe.  v1:= 0I;
  #L3da000.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3da006.  v2:= temp @kind object;
  #L3da008.  v3:= ";base64" @kind object;
  #L3da00c.  call temp:= `endsWith`(v2, v3) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3da012.  v2:= temp;
  #L3da014.  if v2 == 0 then goto L3da038;
  #L3da018.  v0:= v0 + 1;
  #L3da01c.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3da022.  v5:= temp @kind object;
  #L3da024.  call temp:= `decode`(v5, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L3da02a.  v5:= temp @kind object;
  #L3da02c.  v0:= new `java.io.ByteArrayInputStream`;
  #L3da030.  call `<init>`(v0, v5) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L3da036.  return v0 @kind object;
  #L3da038.  v5:= new `java.lang.IllegalArgumentException`;
  #L3da03c.  v0:= "Not a base64 image data URL." @kind object;
  #L3da040.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da046.  throw v5;
  #L3da048.  v5:= new `java.lang.IllegalArgumentException`;
  #L3da04c.  v0:= "Missing comma in data URL." @kind object;
  #L3da050.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da056.  throw v5;
  #L3da058.  v5:= new `java.lang.IllegalArgumentException`;
  #L3da05c.  v0:= "Not a valid image data URL." @kind object;
  #L3da060.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da066.  throw v5;
}
procedure `void` `close`(`com.bumptech.glide.load.model.DataUrlLoader$StreamFactory$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.close:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3da0dc.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L3da0e0.  call `a`(v0, v1) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.a:(Ljava/io/InputStream;)V` @kind virtual;
  #L3da0e6.  return @kind void;
}
procedure `java.lang.Object` `decode`(`com.bumptech.glide.load.model.DataUrlLoader$StreamFactory$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.decode:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3da090.  call temp:= `b`(v0, v1) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.b:(Ljava/lang/String;)Ljava/io/InputStream;` @kind virtual;
  #L3da096.  v1:= temp @kind object;
  #L3da098.  return v1 @kind object;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.load.model.DataUrlLoader$StreamFactory$a` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/DataUrlLoader$StreamFactory$a;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da078.  v0:= constclass @type ^`java.io.InputStream` @kind object;
  #L3da07c.  return v0 @kind object;
}
