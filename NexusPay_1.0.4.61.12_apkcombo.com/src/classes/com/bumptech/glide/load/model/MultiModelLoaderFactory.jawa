record `com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.load.model.MultiModelLoaderFactory.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.model.MultiModelLoaderFactory$c` `com.bumptech.glide.load.model.MultiModelLoaderFactory.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.Pools$Pool` `com.bumptech.glide.load.model.MultiModelLoaderFactory.d` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.load.model.MultiModelLoaderFactory$c` `@@com.bumptech.glide.load.model.MultiModelLoaderFactory.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.bumptech.glide.load.model.ModelLoader` `@@com.bumptech.glide.load.model.MultiModelLoaderFactory.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dbe6c.  v0:= new `com.bumptech.glide.load.model.MultiModelLoaderFactory$c`;
  #L3dbe70.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$c;.<init>:()V` @kind direct;
  #L3dbe76.  `@@com.bumptech.glide.load.model.MultiModelLoaderFactory.e` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory$c` := v0 @kind object;
  #L3dbe7a.  v0:= new `com.bumptech.glide.load.model.MultiModelLoaderFactory$a`;
  #L3dbe7e.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$a;.<init>:()V` @kind direct;
  #L3dbe84.  `@@com.bumptech.glide.load.model.MultiModelLoaderFactory.f` @type ^`com.bumptech.glide.load.model.ModelLoader` := v0 @kind object;
  #L3dbe88.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v1 @kind this, `androidx.core.util.Pools$Pool` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.<init>:(Landroidx/core/util/Pools$Pool;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dbe9c.  v0:= `@@com.bumptech.glide.load.model.MultiModelLoaderFactory.e` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory$c` @kind object;
  #L3dbea0.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.<init>:(Landroidx/core/util/Pools$Pool;Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$c;)V` @kind direct;
  #L3dbea6.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v1 @kind this, `androidx.core.util.Pools$Pool` v2 @kind object, `com.bumptech.glide.load.model.MultiModelLoaderFactory$c` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.<init>:(Landroidx/core/util/Pools$Pool;Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3dbeb8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dbebe.  v0:= new `java.util.ArrayList`;
  #L3dbec2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3dbec8.  v1.`com.bumptech.glide.load.model.MultiModelLoaderFactory.a` @type ^`java.util.List` := v0 @kind object;
  #L3dbecc.  v0:= new `java.util.HashSet`;
  #L3dbed0.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L3dbed6.  v1.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` := v0 @kind object;
  #L3dbeda.  v1.`com.bumptech.glide.load.model.MultiModelLoaderFactory.d` @type ^`androidx.core.util.Pools$Pool` := v2 @kind object;
  #L3dbede.  v1.`com.bumptech.glide.load.model.MultiModelLoaderFactory.b` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory$c` := v3 @kind object;
  #L3dbee2.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.model.ModelLoaderFactory` v4 @kind object, `boolean` v5 ) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3dbef4.  v0:= new `com.bumptech.glide.load.model.MultiModelLoaderFactory$b`;
  #L3dbef8.  call `<init>`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @kind direct;
  #L3dbefe.  v2:= v1.`com.bumptech.glide.load.model.MultiModelLoaderFactory.a` @type ^`java.util.List` @kind object;
  #L3dbf02.  if v5 == 0 then goto L3dbf10;
  #L3dbf06.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dbf0c.  v3:= temp;
  #L3dbf0e.  goto L3dbf12;
  #L3dbf10.  v3:= 0I;
  #L3dbf12.  call `add`(v2, v3, v0) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L3dbf18.  return @kind void;
}
procedure `com.bumptech.glide.load.model.ModelLoader` `c`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v0 @kind this, `com.bumptech.glide.load.model.MultiModelLoaderFactory$b` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.c:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;)Lcom/bumptech/glide/load/model/ModelLoader;` @AccessFlag PRIVATE {
    temp;

  #L3dbb04.  v1:= v1.`com.bumptech.glide.load.model.MultiModelLoaderFactory$b.c` @type ^`com.bumptech.glide.load.model.ModelLoaderFactory` @kind object;
  #L3dbb08.  call temp:= `build`(v1, v0) @signature `Lcom/bumptech/glide/load/model/ModelLoaderFactory;.build:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;)Lcom/bumptech/glide/load/model/ModelLoader;` @kind interface;
  #L3dbb0e.  v1:= temp @kind object;
  #L3dbb10.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dbb16.  v1:= temp @kind object;
  #L3dbb18.  v1:= (`com.bumptech.glide.load.model.ModelLoader`) v1 @kind object;
  #L3dbb1c.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.model.ModelLoader` `e`() @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.e:()Lcom/bumptech/glide/load/model/ModelLoader;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3dbc58.  v0:= `@@com.bumptech.glide.load.model.MultiModelLoaderFactory.f` @type ^`com.bumptech.glide.load.model.ModelLoader` @kind object;
  #L3dbc5c.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.model.ModelLoaderFactory` `g`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v0 @kind this, `com.bumptech.glide.load.model.MultiModelLoaderFactory$b` v1 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.g:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;)Lcom/bumptech/glide/load/model/ModelLoaderFactory;` @AccessFlag PRIVATE {
    temp;

  #L3dbc70.  v1:= v1.`com.bumptech.glide.load.model.MultiModelLoaderFactory$b.c` @type ^`com.bumptech.glide.load.model.ModelLoaderFactory` @kind object;
  #L3dbc74.  return v1 @kind object;
}
procedure `void` `b`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.model.ModelLoaderFactory` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.b:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @AccessFlag  {
    temp;
    v0;

  #L3dbf2c.  @monitorenter v1
  #L3dbf2e.  v0:= 1I;
  #L3dbf30.  call `a`(v1, v2, v3, v4, v0) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;Z)V` @kind direct;
  #L3dbf36.  @monitorexit v1
  #L3dbf38.  return @kind void;
  #L3dbf3a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbf3c.  @monitorexit v1
  #L3dbf3e.  throw v2;
  catch `java.lang.Throwable` @[L3dbf30..L3dbf36] goto L3dbf3a;
}
procedure `com.bumptech.glide.load.model.ModelLoader` `build`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v7 @kind this, `java.lang.Class` v8 @kind object, `java.lang.Class` v9 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.build:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/model/ModelLoader;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3dbb30.  @monitorenter v7
  #L3dbb32.  v0:= new `java.util.ArrayList`;
  #L3dbb36.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3dbb3c.  v1:= v7.`com.bumptech.glide.load.model.MultiModelLoaderFactory.a` @type ^`java.util.List` @kind object;
  #L3dbb40.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dbb46.  v1:= temp @kind object;
  #L3dbb48.  v2:= 0I;
  #L3dbb4a.  v3:= 1I;
  #L3dbb4c.  v4:= 0I;
  #L3dbb4e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbb54.  v5:= temp;
  #L3dbb56.  if v5 == 0 then goto L3dbbaa;
  #L3dbb5a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dbb60.  v5:= temp @kind object;
  #L3dbb62.  v5:= (`com.bumptech.glide.load.model.MultiModelLoaderFactory$b`) v5 @kind object;
  #L3dbb66.  v6:= v7.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbb6a.  call temp:= `contains`(v6, v5) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbb70.  v6:= temp;
  #L3dbb72.  if v6 == 0 then goto L3dbb7a;
  #L3dbb76.  v4:= 1I;
  #L3dbb78.  goto L3dbb4e;
  #L3dbb7a.  call temp:= `b`(v5, v8, v9) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;.b:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L3dbb80.  v6:= temp;
  #L3dbb82.  if v6 == 0 then goto L3dbb4e;
  #L3dbb86.  v6:= v7.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbb8a.  call temp:= `add`(v6, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbb90.  call temp:= `c`(v7, v5) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.c:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;)Lcom/bumptech/glide/load/model/ModelLoader;` @kind direct;
  #L3dbb96.  v6:= temp @kind object;
  #L3dbb98.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbb9e.  v6:= v7.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbba2.  call temp:= `remove`(v6, v5) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbba8.  goto L3dbb4e;
  #L3dbbaa.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dbbb0.  v1:= temp;
  #L3dbbb2.  if v1 <= v3 then goto L3dbbca;
  #L3dbbb6.  v8:= v7.`com.bumptech.glide.load.model.MultiModelLoaderFactory.b` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory$c` @kind object;
  #L3dbbba.  v9:= v7.`com.bumptech.glide.load.model.MultiModelLoaderFactory.d` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3dbbbe.  call temp:= `a`(v8, v0, v9) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$c;.a:(Ljava/util/List;Landroidx/core/util/Pools$Pool;)Lcom/bumptech/glide/load/model/a;` @kind virtual;
  #L3dbbc4.  v8:= temp @kind object;
  #L3dbbc6.  @monitorexit v7
  #L3dbbc8.  return v8 @kind object;
  #L3dbbca.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dbbd0.  v1:= temp;
  #L3dbbd2.  if v1 != v3 then goto L3dbbe6;
  #L3dbbd6.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3dbbdc.  v8:= temp @kind object;
  #L3dbbde.  v8:= (`com.bumptech.glide.load.model.ModelLoader`) v8 @kind object;
  #L3dbbe2.  @monitorexit v7
  #L3dbbe4.  return v8 @kind object;
  #L3dbbe6.  if v4 == 0 then goto L3dbbf6;
  #L3dbbea.  call temp:= `e`() @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.e:()Lcom/bumptech/glide/load/model/ModelLoader;` @kind static;
  #L3dbbf0.  v8:= temp @kind object;
  #L3dbbf2.  @monitorexit v7
  #L3dbbf4.  return v8 @kind object;
  #L3dbbf6.  v0:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L3dbbfa.  call `<init>`(v0, v8, v9) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #L3dbc00.  throw v0;
  #L3dbc02.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbc04.  v9:= v7.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbc08.  call `clear`(v9) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L3dbc0e.  throw v8;
  #L3dbc10.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbc12.  @monitorexit v7
  #L3dbc14.  throw v8;
  catch `java.lang.Throwable` @[L3dbb32..L3dbbc6] goto L3dbc02;
  catch `java.lang.Throwable` @[L3dbbca..L3dbbe2] goto L3dbc02;
  catch `java.lang.Throwable` @[L3dbbea..L3dbbf2] goto L3dbc02;
  catch `java.lang.Throwable` @[L3dbbf6..L3dbc02] goto L3dbc02;
  catch `java.lang.Throwable` @[L3dbc04..L3dbc10] goto L3dbc10;
}
procedure `java.util.List` `d`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.d:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dbc88.  @monitorenter v4
  #L3dbc8a.  v0:= new `java.util.ArrayList`;
  #L3dbc8e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3dbc94.  v1:= v4.`com.bumptech.glide.load.model.MultiModelLoaderFactory.a` @type ^`java.util.List` @kind object;
  #L3dbc98.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dbc9e.  v1:= temp @kind object;
  #L3dbca0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbca6.  v2:= temp;
  #L3dbca8.  if v2 == 0 then goto L3dbcfa;
  #L3dbcac.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dbcb2.  v2:= temp @kind object;
  #L3dbcb4.  v2:= (`com.bumptech.glide.load.model.MultiModelLoaderFactory$b`) v2 @kind object;
  #L3dbcb8.  v3:= v4.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbcbc.  call temp:= `contains`(v3, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbcc2.  v3:= temp;
  #L3dbcc4.  if v3 == 0 then goto L3dbcca;
  #L3dbcc8.  goto L3dbca0;
  #L3dbcca.  call temp:= `a`(v2, v5) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L3dbcd0.  v3:= temp;
  #L3dbcd2.  if v3 == 0 then goto L3dbca0;
  #L3dbcd6.  v3:= v4.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbcda.  call temp:= `add`(v3, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbce0.  call temp:= `c`(v4, v2) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.c:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;)Lcom/bumptech/glide/load/model/ModelLoader;` @kind direct;
  #L3dbce6.  v3:= temp @kind object;
  #L3dbce8.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbcee.  v3:= v4.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbcf2.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbcf8.  goto L3dbca0;
  #L3dbcfa.  @monitorexit v4
  #L3dbcfc.  return v0 @kind object;
  #L3dbcfe.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbd00.  v0:= v4.`com.bumptech.glide.load.model.MultiModelLoaderFactory.c` @type ^`java.util.Set` @kind object;
  #L3dbd04.  call `clear`(v0) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L3dbd0a.  throw v5;
  #L3dbd0c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbd0e.  @monitorexit v4
  #L3dbd10.  throw v5;
  catch `java.lang.Throwable` @[L3dbc8a..L3dbcf8] goto L3dbcfe;
  catch `java.lang.Throwable` @[L3dbd00..L3dbd0c] goto L3dbd0c;
}
procedure `java.util.List` `f`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.f:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dbd3c.  @monitorenter v4
  #L3dbd3e.  v0:= new `java.util.ArrayList`;
  #L3dbd42.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3dbd48.  v1:= v4.`com.bumptech.glide.load.model.MultiModelLoaderFactory.a` @type ^`java.util.List` @kind object;
  #L3dbd4c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dbd52.  v1:= temp @kind object;
  #L3dbd54.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbd5a.  v2:= temp;
  #L3dbd5c.  if v2 == 0 then goto L3dbd94;
  #L3dbd60.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dbd66.  v2:= temp @kind object;
  #L3dbd68.  v2:= (`com.bumptech.glide.load.model.MultiModelLoaderFactory$b`) v2 @kind object;
  #L3dbd6c.  v3:= v2.`com.bumptech.glide.load.model.MultiModelLoaderFactory$b.b` @type ^`java.lang.Class` @kind object;
  #L3dbd70.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbd76.  v3:= temp;
  #L3dbd78.  if v3 != 0 then goto L3dbd54;
  #L3dbd7c.  call temp:= `a`(v2, v5) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L3dbd82.  v3:= temp;
  #L3dbd84.  if v3 == 0 then goto L3dbd54;
  #L3dbd88.  v2:= v2.`com.bumptech.glide.load.model.MultiModelLoaderFactory$b.b` @type ^`java.lang.Class` @kind object;
  #L3dbd8c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbd92.  goto L3dbd54;
  #L3dbd94.  @monitorexit v4
  #L3dbd96.  return v0 @kind object;
  #L3dbd98.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbd9a.  @monitorexit v4
  #L3dbd9c.  throw v5;
  catch `java.lang.Throwable` @[L3dbd3e..L3dbd92] goto L3dbd98;
}
procedure `void` `h`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.model.ModelLoaderFactory` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.h:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @AccessFlag  {
    temp;
    v0;

  #L3dbf5c.  @monitorenter v1
  #L3dbf5e.  v0:= 0I;
  #L3dbf60.  call `a`(v1, v2, v3, v4, v0) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;Z)V` @kind direct;
  #L3dbf66.  @monitorexit v1
  #L3dbf68.  return @kind void;
  #L3dbf6a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbf6c.  @monitorexit v1
  #L3dbf6e.  throw v2;
  catch `java.lang.Throwable` @[L3dbf60..L3dbf66] goto L3dbf6a;
}
procedure `java.util.List` `i`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v4 @kind this, `java.lang.Class` v5 @kind object, `java.lang.Class` v6 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.i:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dbdbc.  @monitorenter v4
  #L3dbdbe.  v0:= new `java.util.ArrayList`;
  #L3dbdc2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3dbdc8.  v1:= v4.`com.bumptech.glide.load.model.MultiModelLoaderFactory.a` @type ^`java.util.List` @kind object;
  #L3dbdcc.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dbdd2.  v1:= temp @kind object;
  #L3dbdd4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dbdda.  v2:= temp;
  #L3dbddc.  if v2 == 0 then goto L3dbe0e;
  #L3dbde0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dbde6.  v2:= temp @kind object;
  #L3dbde8.  v2:= (`com.bumptech.glide.load.model.MultiModelLoaderFactory$b`) v2 @kind object;
  #L3dbdec.  call temp:= `b`(v2, v5, v6) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;.b:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L3dbdf2.  v3:= temp;
  #L3dbdf4.  if v3 == 0 then goto L3dbdd4;
  #L3dbdf8.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3dbdfe.  call temp:= `g`(v4, v2) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.g:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory$b;)Lcom/bumptech/glide/load/model/ModelLoaderFactory;` @kind direct;
  #L3dbe04.  v2:= temp @kind object;
  #L3dbe06.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dbe0c.  goto L3dbdd4;
  #L3dbe0e.  @monitorexit v4
  #L3dbe10.  return v0 @kind object;
  #L3dbe12.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbe14.  @monitorexit v4
  #L3dbe16.  throw v5;
  catch `java.lang.Throwable` @[L3dbdbe..L3dbe0c] goto L3dbe12;
}
procedure `java.util.List` `j`(`com.bumptech.glide.load.model.MultiModelLoaderFactory` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.model.ModelLoaderFactory` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.j:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;

  #L3dbe34.  @monitorenter v1
  #L3dbe36.  call temp:= `i`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.i:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L3dbe3c.  v0:= temp @kind object;
  #L3dbe3e.  call `b`(v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.b:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @kind virtual;
  #L3dbe44.  @monitorexit v1
  #L3dbe46.  return v0 @kind object;
  #L3dbe48.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dbe4a.  @monitorexit v1
  #L3dbe4c.  throw v2;
  catch `java.lang.Throwable` @[L3dbe36..L3dbe44] goto L3dbe48;
}
