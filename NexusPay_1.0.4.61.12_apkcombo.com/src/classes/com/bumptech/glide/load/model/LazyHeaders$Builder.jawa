record `com.bumptech.glide.load.model.LazyHeaders$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `com.bumptech.glide.load.model.LazyHeaders$Builder.a` @AccessFlag PRIVATE;
  `java.util.Map` `com.bumptech.glide.load.model.LazyHeaders$Builder.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.model.LazyHeaders$Builder.c` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Map` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3dab04.  call temp:= `d`() @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.d:()Ljava/lang/String;` @kind static;
  #L3dab0a.  v0:= temp @kind object;
  #L3dab0c.  `@@com.bumptech.glide.load.model.LazyHeaders$Builder.d` @type ^`java.lang.String` := v0 @kind object;
  #L3dab10.  v0:= new `java.util.HashMap`;
  #L3dab14.  v1:= 2I;
  #L3dab16.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L3dab1c.  v1:= `@@com.bumptech.glide.load.model.LazyHeaders$Builder.d` @type ^`java.lang.String` @kind object;
  #L3dab20.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3dab26.  v1:= temp;
  #L3dab28.  if v1 != 0 then goto L3dab4c;
  #L3dab2c.  v1:= new `com.bumptech.glide.load.model.LazyHeaders$a`;
  #L3dab30.  v2:= `@@com.bumptech.glide.load.model.LazyHeaders$Builder.d` @type ^`java.lang.String` @kind object;
  #L3dab34.  call `<init>`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dab3a.  call temp:= `singletonList`(v1) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3dab40.  v1:= temp @kind object;
  #L3dab42.  v2:= "User-Agent" @kind object;
  #L3dab46.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dab4c.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L3dab52.  v0:= temp @kind object;
  #L3dab54.  `@@com.bumptech.glide.load.model.LazyHeaders$Builder.e` @type ^`java.util.Map` := v0 @kind object;
  #L3dab58.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3dab6c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dab72.  v0:= 1I;
  #L3dab74.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L3dab78.  v1:= `@@com.bumptech.glide.load.model.LazyHeaders$Builder.e` @type ^`java.util.Map` @kind object;
  #L3dab7c.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` := v1 @kind object;
  #L3dab80.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` := v0 @kind boolean;
  #L3dab84.  return @kind void;
}
procedure `java.util.Map` `a`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v5 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.a:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3daa88.  v0:= new `java.util.HashMap`;
  #L3daa8c.  v1:= v5.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3daa90.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3daa96.  v1:= temp;
  #L3daa98.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L3daa9e.  v1:= v5.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3daaa2.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3daaa8.  v1:= temp @kind object;
  #L3daaaa.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3daab0.  v1:= temp @kind object;
  #L3daab2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3daab8.  v2:= temp;
  #L3daaba.  if v2 == 0 then goto L3daaf0;
  #L3daabe.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3daac4.  v2:= temp @kind object;
  #L3daac6.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3daaca.  v3:= new `java.util.ArrayList`;
  #L3daace.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3daad4.  v4:= temp @kind object;
  #L3daad6.  v4:= (`java.util.Collection`) v4 @kind object;
  #L3daada.  call `<init>`(v3, v4) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3daae0.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3daae6.  v2:= temp @kind object;
  #L3daae8.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3daaee.  goto L3daab2;
  #L3daaf0.  return v0 @kind object;
}
procedure `void` `b`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3dab98.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` @kind boolean;
  #L3dab9c.  if v0 == 0 then goto L3dabb2;
  #L3daba0.  v0:= 0I;
  #L3daba2.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L3daba6.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.a:()Ljava/util/Map;` @kind direct;
  #L3dabac.  v0:= temp @kind object;
  #L3dabae.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` := v0 @kind object;
  #L3dabb2.  return @kind void;
}
procedure `java.util.List` `c`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.c:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3daa4c.  v0:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3daa50.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3daa56.  v0:= temp @kind object;
  #L3daa58.  v0:= (`java.util.List`) v0 @kind object;
  #L3daa5c.  if v0 != 0 then goto L3daa74;
  #L3daa60.  v0:= new `java.util.ArrayList`;
  #L3daa64.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3daa6a.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3daa6e.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3daa74.  return v0 @kind object;
}
procedure `java.lang.String` `d`() @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.d:()Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3da9c0.  v0:= "http.agent" @kind object;
  #L3da9c4.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3da9ca.  v0:= temp @kind object;
  #L3da9cc.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3da9d2.  v1:= temp;
  #L3da9d4.  if v1 == 0 then goto L3da9da;
  #L3da9d8.  return v0 @kind object;
  #L3da9da.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da9e0.  v1:= temp;
  #L3da9e2.  v2:= new `java.lang.StringBuilder`;
  #L3da9e6.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da9ec.  v3:= temp;
  #L3da9ee.  call `<init>`(v2, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3da9f4.  v3:= 0I;
  #L3da9f6.  if v3 >= v1 then goto L3daa32;
  #L3da9fa.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3daa00.  v4:= temp;
  #L3daa02.  v5:= 31I;
  #L3daa06.  if v4 > v5 then goto L3daa12;
  #L3daa0a.  v5:= 9I;
  #L3daa0e.  if v4 != v5 then goto L3daa22;
  #L3daa12.  v5:= 127I;
  #L3daa16.  if v4 >= v5 then goto L3daa22;
  #L3daa1a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3daa20.  goto L3daa2c;
  #L3daa22.  v4:= 63I;
  #L3daa26.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3daa2c.  v3:= v3 + 1;
  #L3daa30.  goto L3da9f6;
  #L3daa32.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3daa38.  v0:= temp @kind object;
  #L3daa3a.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `addHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.LazyHeaderFactory` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da8c8.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` @kind boolean;
  #L3da8cc.  if v0 == 0 then goto L3da8ea;
  #L3da8d0.  v0:= "User-Agent" @kind object;
  #L3da8d4.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3da8da.  v0:= temp;
  #L3da8dc.  if v0 == 0 then goto L3da8ea;
  #L3da8e0.  call temp:= `setHeader`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L3da8e6.  v2:= temp @kind object;
  #L3da8e8.  return v2 @kind object;
  #L3da8ea.  call `b`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.b:()V` @kind direct;
  #L3da8f0.  call temp:= `c`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.c:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L3da8f6.  v2:= temp @kind object;
  #L3da8f8.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3da8fe.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `addHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da910.  v0:= new `com.bumptech.glide.load.model.LazyHeaders$a`;
  #L3da914.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da91a.  call temp:= `addHeader`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L3da920.  v2:= temp @kind object;
  #L3da922.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders` `build`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.build:()Lcom/bumptech/glide/load/model/LazyHeaders;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3da8a0.  v0:= 1I;
  #L3da8a2.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L3da8a6.  v0:= new `com.bumptech.glide.load.model.LazyHeaders`;
  #L3da8aa.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3da8ae.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3da8b4.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `setHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.LazyHeaderFactory` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da934.  call `b`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.b:()V` @kind direct;
  #L3da93a.  if v3 != 0 then goto L3da94a;
  #L3da93e.  v3:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3da942.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3da948.  goto L3da95e;
  #L3da94a.  call temp:= `c`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.c:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L3da950.  v0:= temp @kind object;
  #L3da952.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3da958.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3da95e.  v3:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` @kind boolean;
  #L3da962.  if v3 == 0 then goto L3da97c;
  #L3da966.  v3:= "User-Agent" @kind object;
  #L3da96a.  call temp:= `equalsIgnoreCase`(v3, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3da970.  v2:= temp;
  #L3da972.  if v2 == 0 then goto L3da97c;
  #L3da976.  v2:= 0I;
  #L3da978.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` := v2 @kind boolean;
  #L3da97c.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `setHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Ljava/lang/String;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da990.  if v3 != 0 then goto L3da998;
  #L3da994.  v3:= 0I;
  #L3da996.  goto L3da9a4;
  #L3da998.  v0:= new `com.bumptech.glide.load.model.LazyHeaders$a`;
  #L3da99c.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da9a2.  v3:= v0 @kind object;
  #L3da9a4.  call temp:= `setHeader`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L3da9aa.  v2:= temp @kind object;
  #L3da9ac.  return v2 @kind object;
}
