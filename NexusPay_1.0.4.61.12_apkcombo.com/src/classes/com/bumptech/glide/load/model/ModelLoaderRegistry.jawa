record `com.bumptech.glide.load.model.ModelLoaderRegistry` @kind class @AccessFlag PUBLIC {
  `com.bumptech.glide.load.model.MultiModelLoaderFactory` `com.bumptech.glide.load.model.ModelLoaderRegistry.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.model.ModelLoaderRegistry$a` `com.bumptech.glide.load.model.ModelLoaderRegistry.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `androidx.core.util.Pools$Pool` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.<init>:(Landroidx/core/util/Pools$Pool;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3db63c.  v0:= new `com.bumptech.glide.load.model.MultiModelLoaderFactory`;
  #L3db640.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.<init>:(Landroidx/core/util/Pools$Pool;)V` @kind direct;
  #L3db646.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.<init>:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;)V` @kind direct;
  #L3db64c.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `com.bumptech.glide.load.model.MultiModelLoaderFactory` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.<init>:(Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3db660.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db666.  v0:= new `com.bumptech.glide.load.model.ModelLoaderRegistry$a`;
  #L3db66a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry$a;.<init>:()V` @kind direct;
  #L3db670.  v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.b` @type ^`com.bumptech.glide.load.model.ModelLoaderRegistry$a` := v0 @kind object;
  #L3db674.  v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` := v2 @kind object;
  #L3db678.  return @kind void;
}
procedure `java.lang.Class` `a`(`java.lang.Object` v0 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.a:(Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3db4f0.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3db4f6.  v0:= temp @kind object;
  #L3db4f8.  return v0 @kind object;
}
procedure `java.util.List` `b`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.b:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3db5e4.  @monitorenter v2
  #L3db5e6.  v0:= v2.`com.bumptech.glide.load.model.ModelLoaderRegistry.b` @type ^`com.bumptech.glide.load.model.ModelLoaderRegistry$a` @kind object;
  #L3db5ea.  call temp:= `b`(v0, v3) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry$a;.b:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L3db5f0.  v0:= temp @kind object;
  #L3db5f2.  if v0 != 0 then goto L3db614;
  #L3db5f6.  v0:= v2.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind object;
  #L3db5fa.  call temp:= `d`(v0, v3) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.d:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L3db600.  v0:= temp @kind object;
  #L3db602.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3db608.  v0:= temp @kind object;
  #L3db60a.  v1:= v2.`com.bumptech.glide.load.model.ModelLoaderRegistry.b` @type ^`com.bumptech.glide.load.model.ModelLoaderRegistry$a` @kind object;
  #L3db60e.  call `c`(v1, v3, v0) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry$a;.c:(Ljava/lang/Class;Ljava/util/List;)V` @kind virtual;
  #L3db614.  @monitorexit v2
  #L3db616.  return v0 @kind object;
  #L3db618.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db61a.  @monitorexit v2
  #L3db61c.  throw v3;
  catch `java.lang.Throwable` @[L3db5e6..L3db614] goto L3db618;
}
procedure `void` `c`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.c:(Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3db78c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3db792.  v2:= temp @kind object;
  #L3db794.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3db79a.  v0:= temp;
  #L3db79c.  if v0 == 0 then goto L3db7b4;
  #L3db7a0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3db7a6.  v0:= temp @kind object;
  #L3db7a8.  v0:= (`com.bumptech.glide.load.model.ModelLoaderFactory`) v0 @kind object;
  #L3db7ac.  call `teardown`(v0) @signature `Lcom/bumptech/glide/load/model/ModelLoaderFactory;.teardown:()V` @kind interface;
  #L3db7b2.  goto L3db794;
  #L3db7b4.  return @kind void;
}
procedure `void` `append`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.model.ModelLoaderFactory` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.append:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db68c.  @monitorenter v1
  #L3db68e.  v0:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind object;
  #L3db692.  call `b`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.b:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @kind virtual;
  #L3db698.  v2:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.b` @type ^`com.bumptech.glide.load.model.ModelLoaderRegistry$a` @kind object;
  #L3db69c.  call `a`(v2) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry$a;.a:()V` @kind virtual;
  #L3db6a2.  @monitorexit v1
  #L3db6a4.  return @kind void;
  #L3db6a6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db6a8.  @monitorexit v1
  #L3db6aa.  throw v2;
  catch `java.lang.Throwable` @[L3db68e..L3db6a2] goto L3db6a6;
}
procedure `com.bumptech.glide.load.model.ModelLoader` `build`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.build:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/model/ModelLoader;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db4bc.  @monitorenter v1
  #L3db4be.  v0:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind object;
  #L3db4c2.  call temp:= `build`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.build:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/model/ModelLoader;` @kind virtual;
  #L3db4c8.  v2:= temp @kind object;
  #L3db4ca.  @monitorexit v1
  #L3db4cc.  return v2 @kind object;
  #L3db4ce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db4d0.  @monitorexit v1
  #L3db4d2.  throw v2;
  catch `java.lang.Throwable` @[L3db4be..L3db4ca] goto L3db4ce;
}
procedure `java.util.List` `getDataClasses`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.getDataClasses:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db50c.  @monitorenter v1
  #L3db50e.  v0:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind object;
  #L3db512.  call temp:= `f`(v0, v2) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.f:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L3db518.  v2:= temp @kind object;
  #L3db51a.  @monitorexit v1
  #L3db51c.  return v2 @kind object;
  #L3db51e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db520.  @monitorexit v1
  #L3db522.  throw v2;
  catch `java.lang.Throwable` @[L3db50e..L3db51a] goto L3db51e;
}
procedure `java.util.List` `getModelLoaders`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.getModelLoaders:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3db540.  call temp:= `a`(v9) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.a:(Ljava/lang/Object;)Ljava/lang/Class;` @kind static;
  #L3db546.  v0:= temp @kind object;
  #L3db548.  call temp:= `b`(v8, v0) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.b:(Ljava/lang/Class;)Ljava/util/List;` @kind direct;
  #L3db54e.  v0:= temp @kind object;
  #L3db550.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3db556.  v1:= temp;
  #L3db558.  if v1 != 0 then goto L3db5c8;
  #L3db55c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3db562.  v1:= temp;
  #L3db564.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3db56a.  v2:= temp @kind object;
  #L3db56c.  v3:= 0I;
  #L3db56e.  v4:= 1I;
  #L3db570.  v5:= 0I;
  #L3db572.  if v5 >= v1 then goto L3db5ae;
  #L3db576.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3db57c.  v6:= temp @kind object;
  #L3db57e.  v6:= (`com.bumptech.glide.load.model.ModelLoader`) v6 @kind object;
  #L3db582.  call temp:= `handles`(v6, v9) @signature `Lcom/bumptech/glide/load/model/ModelLoader;.handles:(Ljava/lang/Object;)Z` @kind interface;
  #L3db588.  v7:= temp;
  #L3db58a.  if v7 == 0 then goto L3db5a8;
  #L3db58e.  if v4 == 0 then goto L3db5a2;
  #L3db592.  v2:= new `java.util.ArrayList`;
  #L3db596.  v4:= v1 - v5 @kind int;
  #L3db59a.  call `<init>`(v2, v4) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3db5a0.  v4:= 0I;
  #L3db5a2.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3db5a8.  v5:= v5 + 1;
  #L3db5ac.  goto L3db572;
  #L3db5ae.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3db5b4.  v1:= temp;
  #L3db5b6.  if v1 != 0 then goto L3db5bc;
  #L3db5ba.  return v2 @kind object;
  #L3db5bc.  v1:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L3db5c0.  call `<init>`(v1, v9, v0) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Object;Ljava/util/List;)V` @kind direct;
  #L3db5c6.  throw v1;
  #L3db5c8.  v0:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L3db5cc.  call `<init>`(v0, v9) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3db5d2.  throw v0;
}
procedure `void` `prepend`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.model.ModelLoaderFactory` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.prepend:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db6c8.  @monitorenter v1
  #L3db6ca.  v0:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind object;
  #L3db6ce.  call `h`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.h:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @kind virtual;
  #L3db6d4.  v2:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.b` @type ^`com.bumptech.glide.load.model.ModelLoaderRegistry$a` @kind object;
  #L3db6d8.  call `a`(v2) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry$a;.a:()V` @kind virtual;
  #L3db6de.  @monitorexit v1
  #L3db6e0.  return @kind void;
  #L3db6e2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db6e4.  @monitorexit v1
  #L3db6e6.  throw v2;
  catch `java.lang.Throwable` @[L3db6ca..L3db6de] goto L3db6e2;
}
procedure `void` `remove`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.remove:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db704.  @monitorenter v1
  #L3db706.  v0:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind object;
  #L3db70a.  call temp:= `i`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.i:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L3db710.  v2:= temp @kind object;
  #L3db712.  call `c`(v1, v2) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.c:(Ljava/util/List;)V` @kind direct;
  #L3db718.  v2:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.b` @type ^`com.bumptech.glide.load.model.ModelLoaderRegistry$a` @kind object;
  #L3db71c.  call `a`(v2) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry$a;.a:()V` @kind virtual;
  #L3db722.  @monitorexit v1
  #L3db724.  return @kind void;
  #L3db726.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db728.  @monitorexit v1
  #L3db72a.  throw v2;
  catch `java.lang.Throwable` @[L3db706..L3db722] goto L3db726;
}
procedure `void` `replace`(`com.bumptech.glide.load.model.ModelLoaderRegistry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.model.ModelLoaderFactory` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.replace:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db748.  @monitorenter v1
  #L3db74a.  v0:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.a` @type ^`com.bumptech.glide.load.model.MultiModelLoaderFactory` @kind object;
  #L3db74e.  call temp:= `j`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/model/MultiModelLoaderFactory;.j:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/model/ModelLoaderFactory;)Ljava/util/List;` @kind virtual;
  #L3db754.  v2:= temp @kind object;
  #L3db756.  call `c`(v1, v2) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry;.c:(Ljava/util/List;)V` @kind direct;
  #L3db75c.  v2:= v1.`com.bumptech.glide.load.model.ModelLoaderRegistry.b` @type ^`com.bumptech.glide.load.model.ModelLoaderRegistry$a` @kind object;
  #L3db760.  call `a`(v2) @signature `Lcom/bumptech/glide/load/model/ModelLoaderRegistry$a;.a:()V` @kind virtual;
  #L3db766.  @monitorexit v1
  #L3db768.  return @kind void;
  #L3db76a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db76c.  @monitorexit v1
  #L3db76e.  throw v2;
  catch `java.lang.Throwable` @[L3db74a..L3db766] goto L3db76a;
}
