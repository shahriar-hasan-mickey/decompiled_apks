record `com.bumptech.glide.load.model.a$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.data.DataFetcher` @kind interface, `com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind interface {
  `java.util.List` `com.bumptech.glide.load.model.a$a.a` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.Pools$Pool` `com.bumptech.glide.load.model.a$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.model.a$a.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.Priority` `com.bumptech.glide.load.model.a$a.d` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.data.DataFetcher$DataCallback` `com.bumptech.glide.load.model.a$a.e` @AccessFlag PRIVATE;
  `java.util.List` `com.bumptech.glide.load.model.a$a.f` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.model.a$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.a$a` v0 @kind this, `java.util.List` v1 @kind object, `androidx.core.util.Pools$Pool` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.<init>:(Ljava/util/List;Landroidx/core/util/Pools$Pool;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3db820.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db826.  v0.`com.bumptech.glide.load.model.a$a.b` @type ^`androidx.core.util.Pools$Pool` := v2 @kind object;
  #L3db82a.  call temp:= `checkNotEmpty`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L3db830.  v0.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` := v1 @kind object;
  #L3db834.  v1:= 0I;
  #L3db836.  v0.`com.bumptech.glide.load.model.a$a.c` @type ^`int` := v1;
  #L3db83a.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.model.a$a` v4 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3db998.  v0:= v4.`com.bumptech.glide.load.model.a$a.g` @type ^`boolean` @kind boolean;
  #L3db99c.  if v0 == 0 then goto L3db9a2;
  #L3db9a0.  return @kind void;
  #L3db9a2.  v0:= v4.`com.bumptech.glide.load.model.a$a.c` @type ^`int`;
  #L3db9a6.  v1:= v4.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3db9aa.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3db9b0.  v1:= temp;
  #L3db9b2.  v1:= v1 + -1;
  #L3db9b6.  if v0 >= v1 then goto L3db9d6;
  #L3db9ba.  v0:= v4.`com.bumptech.glide.load.model.a$a.c` @type ^`int`;
  #L3db9be.  v0:= v0 + 1;
  #L3db9c2.  v4.`com.bumptech.glide.load.model.a$a.c` @type ^`int` := v0;
  #L3db9c6.  v0:= v4.`com.bumptech.glide.load.model.a$a.d` @type ^`com.bumptech.glide.Priority` @kind object;
  #L3db9ca.  v1:= v4.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3db9ce.  call `loadData`(v4, v0, v1) @signature `Lcom/bumptech/glide/load/model/a$a;.loadData:(Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;)V` @kind virtual;
  #L3db9d4.  goto L3dba06;
  #L3db9d6.  v0:= v4.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3db9da.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3db9e0.  v0:= v4.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3db9e4.  v1:= new `com.bumptech.glide.load.engine.GlideException`;
  #L3db9e8.  v2:= new `java.util.ArrayList`;
  #L3db9ec.  v3:= v4.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3db9f0.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3db9f6.  v3:= "Fetch failed" @kind object;
  #L3db9fa.  call `<init>`(v1, v3, v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L3dba00.  call `onLoadFailed`(v0, v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;.onLoadFailed:(Ljava/lang/Exception;)V` @kind interface;
  #L3dba06.  return @kind void;
}
procedure `void` `cancel`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db84c.  v0:= 1I;
  #L3db84e.  v2.`com.bumptech.glide.load.model.a$a.g` @type ^`boolean` := v0 @kind boolean;
  #L3db852.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3db856.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3db85c.  v0:= temp @kind object;
  #L3db85e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3db864.  v1:= temp;
  #L3db866.  if v1 == 0 then goto L3db87e;
  #L3db86a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3db870.  v1:= temp @kind object;
  #L3db872.  v1:= (`com.bumptech.glide.load.data.DataFetcher`) v1 @kind object;
  #L3db876.  call `cancel`(v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cancel:()V` @kind interface;
  #L3db87c.  goto L3db85e;
  #L3db87e.  return @kind void;
}
procedure `void` `cleanup`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.cleanup:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db890.  v0:= v2.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3db894.  if v0 == 0 then goto L3db8a2;
  #L3db898.  v1:= v2.`com.bumptech.glide.load.model.a$a.b` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3db89c.  call temp:= `release`(v1, v0) @signature `Landroidx/core/util/Pools$Pool;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L3db8a2.  v0:= 0I;
  #L3db8a4.  v2.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` := v0 @kind object;
  #L3db8a8.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3db8ac.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3db8b2.  v0:= temp @kind object;
  #L3db8b4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3db8ba.  v1:= temp;
  #L3db8bc.  if v1 == 0 then goto L3db8d4;
  #L3db8c0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3db8c6.  v1:= temp @kind object;
  #L3db8c8.  v1:= (`com.bumptech.glide.load.data.DataFetcher`) v1 @kind object;
  #L3db8cc.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3db8d2.  goto L3db8b4;
  #L3db8d4.  return @kind void;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db7f4.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3db7f8.  v1:= 0I;
  #L3db7fa.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3db800.  v0:= temp @kind object;
  #L3db802.  v0:= (`com.bumptech.glide.load.data.DataFetcher`) v0 @kind object;
  #L3db806.  call temp:= `getDataClass`(v0) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L3db80c.  v0:= temp @kind object;
  #L3db80e.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.DataSource` `getDataSource`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.getDataSource:()Lcom/bumptech/glide/load/DataSource;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db7c8.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3db7cc.  v1:= 0I;
  #L3db7ce.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3db7d4.  v0:= temp @kind object;
  #L3db7d6.  v0:= (`com.bumptech.glide.load.data.DataFetcher`) v0 @kind object;
  #L3db7da.  call temp:= `getDataSource`(v0) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.getDataSource:()Lcom/bumptech/glide/load/DataSource;` @kind interface;
  #L3db7e0.  v0:= temp @kind object;
  #L3db7e2.  return v0 @kind object;
}
procedure `void` `loadData`(`com.bumptech.glide.load.model.a$a` v1 @kind this, `com.bumptech.glide.Priority` v2 @kind object, `com.bumptech.glide.load.data.DataFetcher$DataCallback` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.loadData:(Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db8e8.  v1.`com.bumptech.glide.load.model.a$a.d` @type ^`com.bumptech.glide.Priority` := v2 @kind object;
  #L3db8ec.  v1.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` := v3 @kind object;
  #L3db8f0.  v3:= v1.`com.bumptech.glide.load.model.a$a.b` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3db8f4.  call temp:= `acquire`(v3) @signature `Landroidx/core/util/Pools$Pool;.acquire:()Ljava/lang/Object;` @kind interface;
  #L3db8fa.  v3:= temp @kind object;
  #L3db8fc.  v3:= (`java.util.List`) v3 @kind object;
  #L3db900.  v1.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` := v3 @kind object;
  #L3db904.  v3:= v1.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3db908.  v0:= v1.`com.bumptech.glide.load.model.a$a.c` @type ^`int`;
  #L3db90c.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3db912.  v3:= temp @kind object;
  #L3db914.  v3:= (`com.bumptech.glide.load.data.DataFetcher`) v3 @kind object;
  #L3db918.  call `loadData`(v3, v2, v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.loadData:(Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;)V` @kind interface;
  #L3db91e.  v2:= v1.`com.bumptech.glide.load.model.a$a.g` @type ^`boolean` @kind boolean;
  #L3db922.  if v2 == 0 then goto L3db92c;
  #L3db926.  call `cancel`(v1) @signature `Lcom/bumptech/glide/load/model/a$a;.cancel:()V` @kind virtual;
  #L3db92c.  return @kind void;
}
procedure `void` `onDataReady`(`com.bumptech.glide.load.model.a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.onDataReady:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db940.  if v2 == 0 then goto L3db950;
  #L3db944.  v0:= v1.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3db948.  call `onDataReady`(v0, v2) @signature `Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;.onDataReady:(Ljava/lang/Object;)V` @kind interface;
  #L3db94e.  goto L3db956;
  #L3db950.  call `a`(v1) @signature `Lcom/bumptech/glide/load/model/a$a;.a:()V` @kind direct;
  #L3db956.  return @kind void;
}
procedure `void` `onLoadFailed`(`com.bumptech.glide.load.model.a$a` v1 @kind this, `java.lang.Exception` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.onLoadFailed:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db968.  v0:= v1.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3db96c.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3db972.  v0:= temp @kind object;
  #L3db974.  v0:= (`java.util.List`) v0 @kind object;
  #L3db978.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3db97e.  call `a`(v1) @signature `Lcom/bumptech/glide/load/model/a$a;.a:()V` @kind direct;
  #L3db984.  return @kind void;
}
