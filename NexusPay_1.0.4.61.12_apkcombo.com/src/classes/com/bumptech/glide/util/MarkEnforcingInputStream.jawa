record `com.bumptech.glide.util.MarkEnforcingInputStream` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `int` `com.bumptech.glide.util.MarkEnforcingInputStream.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.MarkEnforcingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f0948.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L3f094e.  v1:= -2147483648I;
  #L3f0952.  v0.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v1;
  #L3f0956.  return @kind void;
}
procedure `long` `a`(`com.bumptech.glide.util.MarkEnforcingInputStream` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f08d8.  v0:= v4.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int`;
  #L3f08dc.  if v0 != 0 then goto L3f08e6;
  #L3f08e0.  v5:= -1L;
  #L3f08e4.  return v5 @kind wide;
  #L3f08e6.  v1:= -2147483648I;
  #L3f08ea.  if v0 == v1 then goto L3f08fa;
  #L3f08ee.  v1:= (`long`) v0 @kind i2l;
  #L3f08f0.  v3:= lcmp(v5, v1);
  #L3f08f4.  if v3 <= 0 then goto L3f08fa;
  #L3f08f8.  v5:= (`long`) v0 @kind i2l;
  #L3f08fa.  return v5 @kind wide;
}
procedure `void` `b`(`com.bumptech.glide.util.MarkEnforcingInputStream` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f09d4.  v0:= v4.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int`;
  #L3f09d8.  v1:= -2147483648I;
  #L3f09dc.  if v0 == v1 then goto L3f09f6;
  #L3f09e0.  v1:= -1L;
  #L3f09e4.  v3:= lcmp(v5, v1);
  #L3f09e8.  if v3 == 0 then goto L3f09f6;
  #L3f09ec.  v0:= (`long`) v0 @kind i2l;
  #L3f09ee.  v0:= v0 - v5 @kind long;
  #L3f09f0.  v5:= (`int`) v0 @kind l2i;
  #L3f09f2.  v4.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v5;
  #L3f09f6.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.util.MarkEnforcingInputStream` v2 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f082c.  v0:= v2.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int`;
  #L3f0830.  v1:= -2147483648I;
  #L3f0834.  if v0 != v1 then goto L3f0842;
  #L3f0838.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L3f083e.  v0:= temp;
  #L3f0840.  goto L3f0852;
  #L3f0842.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L3f0848.  v1:= temp;
  #L3f084a.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f0850.  v0:= temp;
  #L3f0852.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.util.MarkEnforcingInputStream` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3f0968.  @monitorenter v0
  #L3f096a.  call `mark`(v0, v1) @signature `Ljava/io/FilterInputStream;.mark:(I)V` @kind super;
  #L3f0970.  v0.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v1;
  #L3f0974.  @monitorexit v0
  #L3f0976.  return @kind void;
  #L3f0978.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f097a.  @monitorexit v0
  #L3f097c.  throw v1;
  catch `java.lang.Throwable` @[L3f096a..L3f0974] goto L3f0978;
}
procedure `int` `read`(`com.bumptech.glide.util.MarkEnforcingInputStream` v7 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0864.  v0:= 1L;
  #L3f0868.  call temp:= `a`(v7, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @kind direct;
  #L3f086e.  v2:= temp @kind wide;
  #L3f0870.  v4:= -1L;
  #L3f0874.  v6:= lcmp(v2, v4);
  #L3f0878.  if v6 != 0 then goto L3f0880;
  #L3f087c.  v0:= -1I;
  #L3f087e.  return v0;
  #L3f0880.  call temp:= `read`(v7) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L3f0886.  v2:= temp;
  #L3f0888.  call `b`(v7, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @kind direct;
  #L3f088e.  return v2;
}
procedure `int` `read`(`com.bumptech.glide.util.MarkEnforcingInputStream` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f08a0.  v0:= (`long`) v5 @kind i2l;
  #L3f08a2.  call temp:= `a`(v2, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @kind direct;
  #L3f08a8.  v0:= temp @kind wide;
  #L3f08aa.  v5:= (`int`) v0 @kind l2i;
  #L3f08ac.  v0:= -1I;
  #L3f08ae.  if v5 != v0 then goto L3f08b4;
  #L3f08b2.  return v0;
  #L3f08b4.  call temp:= `read`(v2, v3, v4, v5) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L3f08ba.  v3:= temp;
  #L3f08bc.  v4:= (`long`) v3 @kind i2l;
  #L3f08be.  call `b`(v2, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @kind direct;
  #L3f08c4.  return v3;
}
procedure `void` `reset`(`com.bumptech.glide.util.MarkEnforcingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f099c.  @monitorenter v1
  #L3f099e.  call `reset`(v1) @signature `Ljava/io/FilterInputStream;.reset:()V` @kind super;
  #L3f09a4.  v0:= -2147483648I;
  #L3f09a8.  v1.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v0;
  #L3f09ac.  @monitorexit v1
  #L3f09ae.  return @kind void;
  #L3f09b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f09b2.  @monitorexit v1
  #L3f09b4.  throw v0;
  catch `java.lang.Throwable` @[L3f099e..L3f09ac] goto L3f09b0;
}
procedure `long` `skip`(`com.bumptech.glide.util.MarkEnforcingInputStream` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f090c.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @kind direct;
  #L3f0912.  v4:= temp @kind wide;
  #L3f0914.  v0:= -1L;
  #L3f0918.  v2:= lcmp(v4, v0);
  #L3f091c.  if v2 != 0 then goto L3f0926;
  #L3f0920.  v4:= 0L;
  #L3f0924.  return v4 @kind wide;
  #L3f0926.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L3f092c.  v4:= temp @kind wide;
  #L3f092e.  call `b`(v3, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @kind direct;
  #L3f0934.  return v4 @kind wide;
}
