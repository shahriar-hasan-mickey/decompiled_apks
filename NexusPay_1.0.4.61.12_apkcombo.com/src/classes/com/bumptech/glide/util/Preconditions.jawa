record `com.bumptech.glide.util.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.bumptech.glide.util.Preconditions` v0 @kind this) @signature `Lcom/bumptech/glide/util/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f0c60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f0c66.  return @kind void;
}
procedure `void` `checkArgument`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f0c78.  if v0 == 0 then goto L3f0c7e;
  #L3f0c7c.  return @kind void;
  #L3f0c7e.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f0c82.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f0c88.  throw v0;
}
procedure `java.lang.String` `checkNotEmpty`(`java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0c00.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3f0c06.  v0:= temp;
  #L3f0c08.  if v0 != 0 then goto L3f0c0e;
  #L3f0c0c.  return v1 @kind object;
  #L3f0c0e.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f0c12.  v0:= "Must not be null or empty" @kind object;
  #L3f0c16.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f0c1c.  throw v1;
}
procedure `java.util.Collection` `checkNotEmpty`(`java.util.Collection` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0c30.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3f0c36.  v0:= temp;
  #L3f0c38.  if v0 != 0 then goto L3f0c3e;
  #L3f0c3c.  return v1 @kind object;
  #L3f0c3e.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f0c42.  v0:= "Must not be empty." @kind object;
  #L3f0c46.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f0c4c.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0bbc.  v0:= "Argument must not be null" @kind object;
  #L3f0bc0.  call temp:= `checkNotNull`(v1, v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3f0bc6.  v1:= temp @kind object;
  #L3f0bc8.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f0bdc.  if v0 == 0 then goto L3f0be2;
  #L3f0be0.  return v0 @kind object;
  #L3f0be2.  v0:= new `java.lang.NullPointerException`;
  #L3f0be6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f0bec.  throw v0;
}
