record `com.bumptech.glide.util.ByteBufferUtil$a` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `java.nio.ByteBuffer` `com.bumptech.glide.util.ByteBufferUtil$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.util.ByteBufferUtil$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.<init>:(Ljava/nio/ByteBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3ef7f4.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L3ef7fa.  v0:= -1I;
  #L3ef7fc.  v1.`com.bumptech.glide.util.ByteBufferUtil$a.b` @type ^`int` := v0;
  #L3ef800.  v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3ef804.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef708.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef70c.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3ef712.  v0:= temp;
  #L3ef714.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.util.ByteBufferUtil$a` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3ef818.  @monitorenter v0
  #L3ef81a.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef81e.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3ef824.  v1:= temp;
  #L3ef826.  v0.`com.bumptech.glide.util.ByteBufferUtil$a.b` @type ^`int` := v1;
  #L3ef82a.  @monitorexit v0
  #L3ef82c.  return @kind void;
  #L3ef82e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef830.  @monitorexit v0
  #L3ef832.  throw v1;
  catch `java.lang.Throwable` @[L3ef81a..L3ef82a] goto L3ef82e;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef6f4.  v0:= 1I;
  #L3ef6f6.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef728.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef72c.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L3ef732.  v0:= temp;
  #L3ef734.  if v0 != 0 then goto L3ef73c;
  #L3ef738.  v0:= -1I;
  #L3ef73a.  return v0;
  #L3ef73c.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef740.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L3ef746.  v0:= temp;
  #L3ef748.  v0:= v0 ^& 255;
  #L3ef74c.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef760.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef764.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L3ef76a.  v0:= temp;
  #L3ef76c.  if v0 != 0 then goto L3ef774;
  #L3ef770.  v2:= -1I;
  #L3ef772.  return v2;
  #L3ef774.  call temp:= `available`(v1) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.available:()I` @kind virtual;
  #L3ef77a.  v0:= temp;
  #L3ef77c.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3ef782.  v4:= temp;
  #L3ef784.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef788.  call temp:= `get`(v0, v2, v3, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3ef78e.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.util.ByteBufferUtil$a` v2 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ef850.  @monitorenter v2
  #L3ef852.  v0:= v2.`com.bumptech.glide.util.ByteBufferUtil$a.b` @type ^`int`;
  #L3ef856.  v1:= -1I;
  #L3ef858.  if v0 == v1 then goto L3ef86e;
  #L3ef85c.  v0:= v2.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef860.  v1:= v2.`com.bumptech.glide.util.ByteBufferUtil$a.b` @type ^`int`;
  #L3ef864.  call temp:= `position`(v0, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3ef86a.  @monitorexit v2
  #L3ef86c.  return @kind void;
  #L3ef86e.  v0:= new `java.io.IOException`;
  #L3ef872.  v1:= "Cannot reset to unset mark position" @kind object;
  #L3ef876.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ef87c.  throw v0;
  #L3ef87e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ef880.  @monitorexit v2
  #L3ef882.  throw v0;
  catch `java.lang.Throwable` @[L3ef852..L3ef86a] goto L3ef87e;
  catch `java.lang.Throwable` @[L3ef86e..L3ef87e] goto L3ef87e;
}
procedure `long` `skip`(`com.bumptech.glide.util.ByteBufferUtil$a` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef7a0.  v0:= v3.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef7a4.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L3ef7aa.  v0:= temp;
  #L3ef7ac.  if v0 != 0 then goto L3ef7b6;
  #L3ef7b0.  v4:= -1L;
  #L3ef7b4.  return v4 @kind wide;
  #L3ef7b6.  call temp:= `available`(v3) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.available:()I` @kind virtual;
  #L3ef7bc.  v0:= temp;
  #L3ef7be.  v0:= (`long`) v0 @kind i2l;
  #L3ef7c0.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3ef7c6.  v4:= temp @kind wide;
  #L3ef7c8.  v0:= v3.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3ef7cc.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3ef7d2.  v1:= temp;
  #L3ef7d4.  v1:= (`long`) v1 @kind i2l;
  #L3ef7d6.  v1:= v1 + v4 @kind long;
  #L3ef7d8.  v2:= (`int`) v1 @kind l2i;
  #L3ef7da.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3ef7e0.  return v4 @kind wide;
}
