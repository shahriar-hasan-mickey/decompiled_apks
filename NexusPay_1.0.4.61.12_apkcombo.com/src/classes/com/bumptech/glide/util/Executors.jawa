record `com.bumptech.glide.util.Executors` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.concurrent.Executor` `@@com.bumptech.glide.util.Executors.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@com.bumptech.glide.util.Executors.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/Executors;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f0304.  v0:= new `com.bumptech.glide.util.Executors$a`;
  #L3f0308.  call `<init>`(v0) @signature `Lcom/bumptech/glide/util/Executors$a;.<init>:()V` @kind direct;
  #L3f030e.  `@@com.bumptech.glide.util.Executors.a` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L3f0312.  v0:= new `com.bumptech.glide.util.Executors$b`;
  #L3f0316.  call `<init>`(v0) @signature `Lcom/bumptech/glide/util/Executors$b;.<init>:()V` @kind direct;
  #L3f031c.  `@@com.bumptech.glide.util.Executors.b` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L3f0320.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.Executors` v0 @kind this) @signature `Lcom/bumptech/glide/util/Executors;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f0334.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f033a.  return @kind void;
}
procedure `java.util.concurrent.Executor` `directExecutor`() @signature `Lcom/bumptech/glide/util/Executors;.directExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f02d4.  v0:= `@@com.bumptech.glide.util.Executors.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3f02d8.  return v0 @kind object;
}
procedure `java.util.concurrent.Executor` `mainThreadExecutor`() @signature `Lcom/bumptech/glide/util/Executors;.mainThreadExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f02ec.  v0:= `@@com.bumptech.glide.util.Executors.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L3f02f0.  return v0 @kind object;
}
procedure `void` `shutdownAndAwaitTermination`(`java.util.concurrent.ExecutorService` v3 @kind object) @signature `Lcom/bumptech/glide/util/Executors;.shutdownAndAwaitTermination:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f034c.  call temp:= `shutdownNow`(v3) @signature `Ljava/util/concurrent/ExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L3f0352.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0356.  v1:= 5L;
  #L3f035a.  call temp:= `awaitTermination`(v3, v1, v0) @signature `Ljava/util/concurrent/ExecutorService;.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z` @kind interface;
  #L3f0360.  v0:= temp;
  #L3f0362.  if v0 != 0 then goto L3f038e;
  #L3f0366.  call temp:= `shutdownNow`(v3) @signature `Ljava/util/concurrent/ExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L3f036c.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f0370.  call temp:= `awaitTermination`(v3, v1, v0) @signature `Ljava/util/concurrent/ExecutorService;.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z` @kind interface;
  #L3f0376.  v0:= temp;
  #L3f0378.  if v0 == 0 then goto L3f037e;
  #L3f037c.  goto L3f038e;
  #L3f037e.  v0:= new `java.lang.RuntimeException`;
  #L3f0382.  v1:= "Failed to shutdown" @kind object;
  #L3f0386.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f038c.  throw v0;
  #L3f038e.  return @kind void;
  #L3f0390.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3f0392.  call temp:= `shutdownNow`(v3) @signature `Ljava/util/concurrent/ExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L3f0398.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3f039e.  v3:= temp @kind object;
  #L3f03a0.  call `interrupt`(v3) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L3f03a6.  v3:= new `java.lang.RuntimeException`;
  #L3f03aa.  call `<init>`(v3, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f03b0.  throw v3;
  catch `java.lang.InterruptedException` @[L3f0352..L3f038e] goto L3f0390;
}
