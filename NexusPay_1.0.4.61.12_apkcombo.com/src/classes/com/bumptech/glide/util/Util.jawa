record `com.bumptech.glide.util.Util` @kind class @AccessFlag PUBLIC_FINAL {
}
global `char`[] `@@com.bumptech.glide.util.Util.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@com.bumptech.glide.util.Util.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f11b8.  v0:= "0123456789abcdef" @kind object;
  #L3f11bc.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L3f11c2.  v0:= temp @kind object;
  #L3f11c4.  `@@com.bumptech.glide.util.Util.a` @type ^`char`[] := v0 @kind object;
  #L3f11c8.  v0:= 64I;
  #L3f11cc.  v0:= new `char`[v0];
  #L3f11d0.  `@@com.bumptech.glide.util.Util.b` @type ^`char`[] := v0 @kind object;
  #L3f11d4.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.Util` v0 @kind this) @signature `Lcom/bumptech/glide/util/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f11e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f11ee.  return @kind void;
}
procedure `java.lang.String` `a`(`byte`[] v5 @kind object, `char`[] v6 @kind object) @signature `Lcom/bumptech/glide/util/Util;.a:([B[C)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f10c0.  v0:= 0I;
  #L3f10c2.  v1:= length @variable v5;
  #L3f10c4.  if v0 >= v1 then goto L3f10fa;
  #L3f10c8.  v1:= v5[v0] @kind byte;
  #L3f10cc.  v1:= v1 ^& 255;
  #L3f10d0.  v2:= v0 * 2;
  #L3f10d4.  v3:= `@@com.bumptech.glide.util.Util.a` @type ^`char`[] @kind object;
  #L3f10d8.  v4:= v1 ^>> 4;
  #L3f10dc.  v4:= v3[v4] @kind char;
  #L3f10e0.  v6[v2]:= v4 @kind char;
  #L3f10e4.  v2:= v2 + 1;
  #L3f10e8.  v1:= v1 ^& 15;
  #L3f10ec.  v1:= v3[v1] @kind char;
  #L3f10f0.  v6[v2]:= v1 @kind char;
  #L3f10f4.  v0:= v0 + 1;
  #L3f10f8.  goto L3f10c2;
  #L3f10fa.  v5:= new `java.lang.String`;
  #L3f10fe.  call `<init>`(v5, v6) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3f1104.  return v5 @kind object;
}
procedure `void` `assertBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.assertBackgroundThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1200.  call temp:= `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnBackgroundThread:()Z` @kind static;
  #L3f1206.  v0:= temp;
  #L3f1208.  if v0 == 0 then goto L3f120e;
  #L3f120c.  return @kind void;
  #L3f120e.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f1212.  v1:= "You must call this method on a background thread" @kind object;
  #L3f1216.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f121c.  throw v0;
}
procedure `void` `assertMainThread`() @signature `Lcom/bumptech/glide/util/Util;.assertMainThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1230.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @kind static;
  #L3f1236.  v0:= temp;
  #L3f1238.  if v0 == 0 then goto L3f123e;
  #L3f123c.  return @kind void;
  #L3f123e.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f1242.  v1:= "You must call this method on the main thread" @kind object;
  #L3f1246.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f124c.  throw v0;
}
procedure `int` `b`(`android.graphics.Bitmap$Config` v3 @kind object) @signature `Lcom/bumptech/glide/util/Util;.b:(Landroid/graphics/Bitmap$Config;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0f70.  if v3 != 0 then goto L3f0f78;
  #L3f0f74.  v3:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L3f0f78.  v0:= `@@com.bumptech.glide.util.Util$a.a` @type ^`int`[] @kind object;
  #L3f0f7c.  call temp:= `ordinal`(v3) @signature `Landroid/graphics/Bitmap$Config;.ordinal:()I` @kind virtual;
  #L3f0f82.  v3:= temp;
  #L3f0f84.  v3:= v0[v3];
  #L3f0f88.  v0:= 4I;
  #L3f0f8a.  v1:= 2I;
  #L3f0f8c.  v2:= 1I;
  #L3f0f8e.  if v3 == v2 then goto L3f0fac;
  #L3f0f92.  if v3 == v1 then goto L3f0fa8;
  #L3f0f96.  v2:= 3I;
  #L3f0f98.  if v3 == v2 then goto L3f0fa8;
  #L3f0f9c.  if v3 == v0 then goto L3f0fa2;
  #L3f0fa0.  goto L3f0fae;
  #L3f0fa2.  v0:= 8I;
  #L3f0fa6.  goto L3f0fae;
  #L3f0fa8.  v0:= 2I;
  #L3f0faa.  goto L3f0fae;
  #L3f0fac.  v0:= 1I;
  #L3f0fae.  return v0;
}
procedure `boolean` `bothModelsNullEquivalentOrEquals`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.bothModelsNullEquivalentOrEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0d6c.  if v1 != 0 then goto L3f0d7c;
  #L3f0d70.  if v2 != 0 then goto L3f0d78;
  #L3f0d74.  v1:= 1I;
  #L3f0d76.  goto L3f0d7a;
  #L3f0d78.  v1:= 0I;
  #L3f0d7a.  return v1;
  #L3f0d7c.  v0:= instanceof @variable v1 @type ^`com.bumptech.glide.load.model.Model` @kind boolean;
  #L3f0d80.  if v0 == 0 then goto L3f0d92;
  #L3f0d84.  v1:= (`com.bumptech.glide.load.model.Model`) v1 @kind object;
  #L3f0d88.  call temp:= `isEquivalentTo`(v1, v2) @signature `Lcom/bumptech/glide/load/model/Model;.isEquivalentTo:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0d8e.  v1:= temp;
  #L3f0d90.  return v1;
  #L3f0d92.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f0d98.  v1:= temp;
  #L3f0d9a.  return v1;
}
procedure `boolean` `bothNullOrEqual`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/util/Util;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f0dac.  if v0 != 0 then goto L3f0dbc;
  #L3f0db0.  if v1 != 0 then goto L3f0db8;
  #L3f0db4.  v0:= 1I;
  #L3f0db6.  goto L3f0dc4;
  #L3f0db8.  v0:= 0I;
  #L3f0dba.  goto L3f0dc4;
  #L3f0dbc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f0dc2.  v0:= temp;
  #L3f0dc4.  return v0;
}
procedure `boolean` `c`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.c:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f0e24.  if v1 > 0 then goto L3f0e36;
  #L3f0e28.  v0:= -2147483648I;
  #L3f0e2c.  if v1 != v0 then goto L3f0e32;
  #L3f0e30.  goto L3f0e36;
  #L3f0e32.  v1:= 0I;
  #L3f0e34.  goto L3f0e38;
  #L3f0e36.  v1:= 1I;
  #L3f0e38.  return v1;
}
procedure `java.util.Queue` `createQueue`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f119c.  v0:= new `java.util.ArrayDeque`;
  #L3f11a0.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L3f11a6.  return v0 @kind object;
}
procedure `int` `getBitmapByteSize`(`int` v0 , `int` v1 , `android.graphics.Bitmap$Config` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(IILandroid/graphics/Bitmap$Config;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f0f4c.  v0:= v0 * v1 @kind int;
  #L3f0f50.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/util/Util;.b:(Landroid/graphics/Bitmap$Config;)I` @kind static;
  #L3f0f56.  v1:= temp;
  #L3f0f58.  v0:= v0 * v1 @kind int;
  #L3f0f5c.  return v0;
}
procedure `int` `getBitmapByteSize`(`android.graphics.Bitmap` v3 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0e7c.  call temp:= `isRecycled`(v3) @signature `Landroid/graphics/Bitmap;.isRecycled:()Z` @kind virtual;
  #L3f0e82.  v0:= temp;
  #L3f0e84.  if v0 != 0 then goto L3f0eb4;
  #L3f0e88.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3f0e8c.  v1:= 19I;
  #L3f0e90.  if v0 < v1 then goto L3f0e9e;
  #L3f0e94.  call temp:= `getAllocationByteCount`(v3) @signature `Landroid/graphics/Bitmap;.getAllocationByteCount:()I` @kind virtual;
  #L3f0e9a.  v3:= temp;
  #L3f0e9c.  return v3;
  #L3f0e9e.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L3f0ea4.  v0:= temp;
  #L3f0ea6.  call temp:= `getRowBytes`(v3) @signature `Landroid/graphics/Bitmap;.getRowBytes:()I` @kind virtual;
  #L3f0eac.  v3:= temp;
  #L3f0eae.  v0:= v0 * v3 @kind int;
  #L3f0eb2.  return v0;
  #L3f0eb4.  v0:= new `java.lang.IllegalStateException`;
  #L3f0eb8.  v1:= new `java.lang.StringBuilder`;
  #L3f0ebc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f0ec2.  v2:= "Cannot obtain size for recycled Bitmap: " @kind object;
  #L3f0ec6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0ecc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0ed2.  v2:= "[" @kind object;
  #L3f0ed6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0edc.  call temp:= `getWidth`(v3) @signature `Landroid/graphics/Bitmap;.getWidth:()I` @kind virtual;
  #L3f0ee2.  v2:= temp;
  #L3f0ee4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0eea.  v2:= "x" @kind object;
  #L3f0eee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0ef4.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L3f0efa.  v2:= temp;
  #L3f0efc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0f02.  v2:= "] " @kind object;
  #L3f0f06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0f0c.  call temp:= `getConfig`(v3) @signature `Landroid/graphics/Bitmap;.getConfig:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L3f0f12.  v3:= temp @kind object;
  #L3f0f14.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0f1a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f0f20.  v3:= temp @kind object;
  #L3f0f22.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f0f28.  throw v0;
  catch `java.lang.NullPointerException` @[L3f0e94..L3f0e9c] goto L3f0e9e;
}
procedure `int` `getSize`(`android.graphics.Bitmap` v0 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getSize:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f0fc0.  call temp:= `getBitmapByteSize`(v0) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(Landroid/graphics/Bitmap;)I` @kind static;
  #L3f0fc6.  v0:= temp;
  #L3f0fc8.  return v0;
}
procedure `java.util.List` `getSnapshot`(`java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1150.  v0:= new `java.util.ArrayList`;
  #L3f1154.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3f115a.  v1:= temp;
  #L3f115c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3f1162.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f1168.  v2:= temp @kind object;
  #L3f116a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f1170.  v1:= temp;
  #L3f1172.  if v1 == 0 then goto L3f118a;
  #L3f1176.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f117c.  v1:= temp @kind object;
  #L3f117e.  if v1 == 0 then goto L3f116a;
  #L3f1182.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f1188.  goto L3f116a;
  #L3f118a.  return v0 @kind object;
}
procedure `int` `hashCode`(`float` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(F)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1018.  v0:= 17I;
  #L3f101c.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(FI)I` @kind static;
  #L3f1022.  v1:= temp;
  #L3f1024.  return v1;
}
procedure `int` `hashCode`(`float` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(FI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f1038.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3f103e.  v0:= temp;
  #L3f1040.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3f1046.  v0:= temp;
  #L3f1048.  return v0;
}
procedure `int` `hashCode`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f105c.  v0:= 17I;
  #L3f1060.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3f1066.  v1:= temp;
  #L3f1068.  return v1;
}
procedure `int` `hashCode`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f107c.  v1:= v1 * 31;
  #L3f1080.  v1:= v1 + v0 @kind int;
  #L3f1082.  return v1;
}
procedure `int` `hashCode`(`java.lang.Object` v0 @kind object, `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f1094.  if v0 != 0 then goto L3f109c;
  #L3f1098.  v0:= 0I;
  #L3f109a.  goto L3f10a4;
  #L3f109c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f10a2.  v0:= temp;
  #L3f10a4.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3f10aa.  v0:= temp;
  #L3f10ac.  return v0;
}
procedure `int` `hashCode`(`boolean` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(Z)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0fdc.  v0:= 17I;
  #L3f0fe0.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(ZI)I` @kind static;
  #L3f0fe6.  v1:= temp;
  #L3f0fe8.  return v1;
}
procedure `int` `hashCode`(`boolean` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(ZI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f0ffc.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3f1002.  v0:= temp;
  #L3f1004.  return v0;
}
procedure `boolean` `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnBackgroundThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f0dd8.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @kind static;
  #L3f0dde.  v0:= temp;
  #L3f0de0.  v0:= v0 ^~ 1;
  #L3f0de4.  return v0;
}
procedure `boolean` `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f0df8.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L3f0dfe.  v0:= temp @kind object;
  #L3f0e00.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L3f0e06.  v1:= temp @kind object;
  #L3f0e08.  if v0 != v1 then goto L3f0e10;
  #L3f0e0c.  v0:= 1I;
  #L3f0e0e.  goto L3f0e12;
  #L3f0e10.  v0:= 0I;
  #L3f0e12.  return v0;
}
procedure `boolean` `isValidDimensions`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.isValidDimensions:(II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f0e4c.  call temp:= `c`(v0) @signature `Lcom/bumptech/glide/util/Util;.c:(I)Z` @kind static;
  #L3f0e52.  v0:= temp;
  #L3f0e54.  if v0 == 0 then goto L3f0e68;
  #L3f0e58.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/util/Util;.c:(I)Z` @kind static;
  #L3f0e5e.  v0:= temp;
  #L3f0e60.  if v0 == 0 then goto L3f0e68;
  #L3f0e64.  v0:= 1I;
  #L3f0e66.  goto L3f0e6a;
  #L3f0e68.  v0:= 0I;
  #L3f0e6a.  return v0;
}
procedure `java.lang.String` `sha256BytesToHex`(`byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.sha256BytesToHex:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1118.  v0:= `@@com.bumptech.glide.util.Util.b` @type ^`char`[] @kind object;
  #L3f111c.  @monitorenter v0
  #L3f111e.  v1:= `@@com.bumptech.glide.util.Util.b` @type ^`char`[] @kind object;
  #L3f1122.  call temp:= `a`(v2, v1) @signature `Lcom/bumptech/glide/util/Util;.a:([B[C)Ljava/lang/String;` @kind static;
  #L3f1128.  v2:= temp @kind object;
  #L3f112a.  @monitorexit v0
  #L3f112c.  return v2 @kind object;
  #L3f112e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1130.  @monitorexit v0
  #L3f1132.  throw v2;
  catch `java.lang.Throwable` @[L3f111e..L3f1132] goto L3f112e;
}
