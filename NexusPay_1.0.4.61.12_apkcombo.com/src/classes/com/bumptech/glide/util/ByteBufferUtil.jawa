record `com.bumptech.glide.util.ByteBufferUtil` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.concurrent.atomic.AtomicReference` `@@com.bumptech.glide.util.ByteBufferUtil.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3efb24.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3efb28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3efb2e.  `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3efb32.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.ByteBufferUtil` v0 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3efb44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3efb4a.  return @kind void;
}
procedure `com.bumptech.glide.util.ByteBufferUtil$b` `a`(`java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/util/ByteBufferUtil$b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef930.  call temp:= `isReadOnly`(v3) @signature `Ljava/nio/ByteBuffer;.isReadOnly:()Z` @kind virtual;
  #L3ef936.  v0:= temp;
  #L3ef938.  if v0 != 0 then goto L3ef96c;
  #L3ef93c.  call temp:= `hasArray`(v3) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L3ef942.  v0:= temp;
  #L3ef944.  if v0 == 0 then goto L3ef96c;
  #L3ef948.  v0:= new `com.bumptech.glide.util.ByteBufferUtil$b`;
  #L3ef94c.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3ef952.  v1:= temp @kind object;
  #L3ef954.  call temp:= `arrayOffset`(v3) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L3ef95a.  v2:= temp;
  #L3ef95c.  call temp:= `limit`(v3) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L3ef962.  v3:= temp;
  #L3ef964.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$b;.<init>:([BII)V` @kind direct;
  #L3ef96a.  return v0 @kind object;
  #L3ef96c.  v3:= 0I;
  #L3ef96e.  return v3 @kind object;
}
procedure `java.nio.ByteBuffer` `fromFile`(`java.io.File` v8 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.fromFile:(Ljava/io/File;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ef99c.  v0:= 0I;
  #L3ef99e.  call temp:= `length`(v8) @signature `Ljava/io/File;.length:()J` @kind virtual;
  #L3ef9a4.  v5:= temp @kind wide;
  #L3ef9a6.  v1:= 2147483647L;
  #L3ef9ac.  v3:= lcmp(v5, v1);
  #L3ef9b0.  if v3 > 0 then goto L3efa16;
  #L3ef9b4.  v1:= 0L;
  #L3ef9b8.  v3:= lcmp(v5, v1);
  #L3ef9bc.  if v3 == 0 then goto L3efa06;
  #L3ef9c0.  v7:= new `java.io.RandomAccessFile`;
  #L3ef9c4.  v1:= "r" @kind object;
  #L3ef9c8.  call `<init>`(v7, v8, v1) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L3ef9ce.  call temp:= `getChannel`(v7) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L3ef9d4.  v0:= temp @kind object;
  #L3ef9d6.  v2:= `@@java.nio.channels.FileChannel$MapMode.READ_ONLY` @type ^`java.nio.channels.FileChannel$MapMode` @kind object;
  #L3ef9da.  v3:= 0L;
  #L3ef9de.  v1:= v0 @kind object;
  #L3ef9e0.  call temp:= `map`(v1, v2, v3, v5) @signature `Ljava/nio/channels/FileChannel;.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L3ef9e6.  v8:= temp @kind object;
  #L3ef9e8.  call temp:= `load`(v8) @signature `Ljava/nio/MappedByteBuffer;.load:()Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L3ef9ee.  v8:= temp @kind object;
  #L3ef9f0.  if v0 == 0 then goto L3ef9fa;
  #L3ef9f4.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3ef9fa.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3efa00.  return v8 @kind object;
  #L3efa02.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efa04.  goto L3efa2a;
  #L3efa06.  v8:= new `java.io.IOException`;
  #L3efa0a.  v1:= "File unsuitable for memory mapping" @kind object;
  #L3efa0e.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3efa14.  throw v8;
  #L3efa16.  v8:= new `java.io.IOException`;
  #L3efa1a.  v1:= "File too large to map into memory" @kind object;
  #L3efa1e.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3efa24.  throw v8;
  #L3efa26.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efa28.  v7:= v0 @kind object;
  #L3efa2a.  if v0 == 0 then goto L3efa38;
  #L3efa2e.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3efa34.  goto L3efa38;
  #L3efa36.  
  #L3efa38.  if v7 == 0 then goto L3efa42;
  #L3efa3c.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3efa42.  throw v8;
  catch `java.lang.Throwable` @[L3ef99e..L3ef9ce] goto L3efa26;
  catch `java.lang.Throwable` @[L3ef9ce..L3ef9f0] goto L3efa02;
  catch `java.io.IOException` @[L3ef9f4..L3ef9fa] goto L3ef9fa;
  catch `java.io.IOException` @[L3ef9fa..L3efa00] goto L3efa00;
  catch `java.lang.Throwable` @[L3efa06..L3efa26] goto L3efa26;
  catch `java.io.IOException` @[L3efa2e..L3efa34] goto L3efa36;
  catch `java.io.IOException` @[L3efa3c..L3efa42] goto L3efa42;
}
procedure `java.nio.ByteBuffer` `fromStream`(`java.io.InputStream` v4 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.fromStream:(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3efaa4.  v0:= new `java.io.ByteArrayOutputStream`;
  #L3efaa8.  v1:= 16384I;
  #L3efaac.  call `<init>`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L3efab2.  v2:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3efab6.  v3:= 0I;
  #L3efab8.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3efabe.  v2:= temp @kind object;
  #L3efac0.  v2:= (`byte`[]) v2 @kind object;
  #L3efac4.  if v2 != 0 then goto L3efacc;
  #L3efac8.  v2:= new `byte`[v1];
  #L3efacc.  call temp:= `read`(v4, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L3efad2.  v1:= temp;
  #L3efad4.  v3:= 0I;
  #L3efad6.  if v1 < 0 then goto L3efae2;
  #L3efada.  call `write`(v0, v2, v3, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L3efae0.  goto L3efacc;
  #L3efae2.  v4:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3efae6.  call `set`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3efaec.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L3efaf2.  v4:= temp @kind object;
  #L3efaf4.  v0:= length @variable v4;
  #L3efaf6.  call temp:= `allocateDirect`(v0) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L3efafc.  v0:= temp @kind object;
  #L3efafe.  call temp:= `put`(v0, v4) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3efb04.  v4:= temp @kind object;
  #L3efb06.  call temp:= `position`(v4, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3efb0c.  v4:= temp @kind object;
  #L3efb0e.  v4:= (`java.nio.ByteBuffer`) v4 @kind object;
  #L3efb12.  return v4 @kind object;
}
procedure `byte`[] `toBytes`(`java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toBytes:(Ljava/nio/ByteBuffer;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ef8cc.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/util/ByteBufferUtil$b;` @kind static;
  #L3ef8d2.  v0:= temp @kind object;
  #L3ef8d4.  if v0 == 0 then goto L3ef8f8;
  #L3ef8d8.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.a` @type ^`int`;
  #L3ef8dc.  if v1 != 0 then goto L3ef8f8;
  #L3ef8e0.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.b` @type ^`int`;
  #L3ef8e4.  v0:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.c` @type ^`byte`[] @kind object;
  #L3ef8e8.  v0:= length @variable v0;
  #L3ef8ea.  if v1 != v0 then goto L3ef8f8;
  #L3ef8ee.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3ef8f4.  v2:= temp @kind object;
  #L3ef8f6.  goto L3ef91c;
  #L3ef8f8.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L3ef8fe.  v2:= temp @kind object;
  #L3ef900.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L3ef906.  v0:= temp;
  #L3ef908.  v0:= new `byte`[v0];
  #L3ef90c.  v1:= 0I;
  #L3ef90e.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3ef914.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3ef91a.  v2:= v0 @kind object;
  #L3ef91c.  return v2 @kind object;
}
procedure `void` `toFile`(`java.nio.ByteBuffer` v4 @kind object, `java.io.File` v5 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toFile:(Ljava/nio/ByteBuffer;Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3efb5c.  v0:= 0I;
  #L3efb5e.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3efb64.  v1:= 0I;
  #L3efb66.  v2:= new `java.io.RandomAccessFile`;
  #L3efb6a.  v3:= "rw" @kind object;
  #L3efb6e.  call `<init>`(v2, v5, v3) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L3efb74.  call temp:= `getChannel`(v2) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L3efb7a.  v1:= temp @kind object;
  #L3efb7c.  call temp:= `write`(v1, v4) @signature `Ljava/nio/channels/FileChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L3efb82.  call `force`(v1, v0) @signature `Ljava/nio/channels/FileChannel;.force:(Z)V` @kind virtual;
  #L3efb88.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3efb8e.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3efb94.  if v1 == 0 then goto L3efb9e;
  #L3efb98.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3efb9e.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3efba4.  return @kind void;
  #L3efba6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efba8.  goto L3efbae;
  #L3efbaa.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efbac.  v2:= v1 @kind object;
  #L3efbae.  if v1 == 0 then goto L3efbbc;
  #L3efbb2.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3efbb8.  goto L3efbbc;
  #L3efbba.  
  #L3efbbc.  if v2 == 0 then goto L3efbc6;
  #L3efbc0.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3efbc6.  throw v4;
  catch `java.lang.Throwable` @[L3efb66..L3efb74] goto L3efbaa;
  catch `java.lang.Throwable` @[L3efb74..L3efb94] goto L3efba6;
  catch `java.io.IOException` @[L3efb98..L3efb9e] goto L3efb9e;
  catch `java.io.IOException` @[L3efb9e..L3efba4] goto L3efba4;
  catch `java.io.IOException` @[L3efbb2..L3efbb8] goto L3efbba;
  catch `java.io.IOException` @[L3efbc0..L3efbc6] goto L3efbc6;
}
procedure `java.io.InputStream` `toStream`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toStream:(Ljava/nio/ByteBuffer;)Ljava/io/InputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ef980.  v0:= new `com.bumptech.glide.util.ByteBufferUtil$a`;
  #L3ef984.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L3ef98a.  return v0 @kind object;
}
procedure `void` `toStream`(`java.nio.ByteBuffer` v3 @kind object, `java.io.OutputStream` v4 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toStream:(Ljava/nio/ByteBuffer;Ljava/io/OutputStream;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3efc20.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/util/ByteBufferUtil$b;` @kind static;
  #L3efc26.  v0:= temp @kind object;
  #L3efc28.  if v0 == 0 then goto L3efc42;
  #L3efc2c.  v3:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.c` @type ^`byte`[] @kind object;
  #L3efc30.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.a` @type ^`int`;
  #L3efc34.  v0:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.b` @type ^`int`;
  #L3efc38.  v0:= v0 + v1 @kind int;
  #L3efc3a.  call `write`(v4, v3, v1, v0) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3efc40.  goto L3efc98;
  #L3efc42.  v0:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3efc46.  v1:= 0I;
  #L3efc48.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3efc4e.  v0:= temp @kind object;
  #L3efc50.  v0:= (`byte`[]) v0 @kind object;
  #L3efc54.  if v0 != 0 then goto L3efc60;
  #L3efc58.  v0:= 16384I;
  #L3efc5c.  v0:= new `byte`[v0];
  #L3efc60.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3efc66.  v1:= temp;
  #L3efc68.  if v1 <= 0 then goto L3efc8e;
  #L3efc6c.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3efc72.  v1:= temp;
  #L3efc74.  v2:= length @variable v0;
  #L3efc76.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3efc7c.  v1:= temp;
  #L3efc7e.  v2:= 0I;
  #L3efc80.  call temp:= `get`(v3, v0, v2, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3efc86.  call `write`(v4, v0, v2, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3efc8c.  goto L3efc60;
  #L3efc8e.  v3:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3efc92.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3efc98.  return @kind void;
}
