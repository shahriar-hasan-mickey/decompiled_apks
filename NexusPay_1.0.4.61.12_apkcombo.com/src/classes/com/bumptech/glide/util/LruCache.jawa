record `com.bumptech.glide.util.LruCache` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.util.LruCache.a` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.util.LruCache.b` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.util.LruCache.c` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.util.LruCache.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.LruCache` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/LruCache;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f06b4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f06ba.  v0:= new `java.util.LinkedHashMap`;
  #L3f06be.  v1:= 100I;
  #L3f06c2.  v2:= 0.75F;
  #L3f06c6.  v3:= 1I;
  #L3f06c8.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L3f06ce.  v4.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` := v0 @kind object;
  #L3f06d2.  v4.`com.bumptech.glide.util.LruCache.b` @type ^`long` := v5 @kind wide;
  #L3f06d6.  v4.`com.bumptech.glide.util.LruCache.c` @type ^`long` := v5 @kind wide;
  #L3f06da.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f0708.  v0:= v2.`com.bumptech.glide.util.LruCache.c` @type ^`long` @kind wide;
  #L3f070c.  call `trimToSize`(v2, v0) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(J)V` @kind virtual;
  #L3f0712.  return @kind void;
}
procedure `void` `clearMemory`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.clearMemory:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f06ec.  v0:= 0L;
  #L3f06f0.  call `trimToSize`(v2, v0) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(J)V` @kind virtual;
  #L3f06f6.  return @kind void;
}
procedure `boolean` `contains`(`com.bumptech.glide.util.LruCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f04c4.  @monitorenter v1
  #L3f04c6.  v0:= v1.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3f04ca.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3f04d0.  v2:= temp;
  #L3f04d2.  @monitorexit v1
  #L3f04d4.  return v2;
  #L3f04d6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f04d8.  @monitorexit v1
  #L3f04da.  throw v2;
  catch `java.lang.Throwable` @[L3f04c6..L3f04d2] goto L3f04d6;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.util.LruCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0540.  @monitorenter v1
  #L3f0542.  v0:= v1.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3f0546.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f054c.  v2:= temp @kind object;
  #L3f054e.  @monitorexit v1
  #L3f0550.  return v2 @kind object;
  #L3f0552.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0554.  @monitorexit v1
  #L3f0556.  throw v2;
  catch `java.lang.Throwable` @[L3f0542..L3f054e] goto L3f0552;
}
procedure `int` `getCount`(`com.bumptech.glide.util.LruCache` v1 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getCount:()I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3f04f8.  @monitorenter v1
  #L3f04fa.  v0:= v1.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3f04fe.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3f0504.  v0:= temp;
  #L3f0506.  @monitorexit v1
  #L3f0508.  return v0;
  #L3f050a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f050c.  @monitorexit v1
  #L3f050e.  throw v0;
  catch `java.lang.Throwable` @[L3f04fa..L3f0506] goto L3f050a;
}
procedure `long` `getCurrentSize`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getCurrentSize:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f065c.  @monitorenter v2
  #L3f065e.  v0:= v2.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3f0662.  @monitorexit v2
  #L3f0664.  return v0 @kind wide;
  #L3f0666.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0668.  @monitorexit v2
  #L3f066a.  throw v0;
  catch `java.lang.Throwable` @[L3f065e..L3f0662] goto L3f0666;
}
procedure `long` `getMaxSize`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getMaxSize:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0688.  @monitorenter v2
  #L3f068a.  v0:= v2.`com.bumptech.glide.util.LruCache.c` @type ^`long` @kind wide;
  #L3f068e.  @monitorexit v2
  #L3f0690.  return v0 @kind wide;
  #L3f0692.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0694.  @monitorexit v2
  #L3f0696.  throw v0;
  catch `java.lang.Throwable` @[L3f068a..L3f068e] goto L3f0692;
}
procedure `int` `getSize`(`com.bumptech.glide.util.LruCache` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L3f052c.  v1:= 1I;
  #L3f052e.  return v1;
}
procedure `void` `onItemEvicted`(`com.bumptech.glide.util.LruCache` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L3f0724.  return @kind void;
}
procedure `java.lang.Object` `put`(`com.bumptech.glide.util.LruCache` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f0574.  @monitorenter v5
  #L3f0576.  call temp:= `getSize`(v5, v7) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L3f057c.  v0:= temp;
  #L3f057e.  v0:= (`long`) v0 @kind i2l;
  #L3f0580.  v2:= v5.`com.bumptech.glide.util.LruCache.c` @type ^`long` @kind wide;
  #L3f0584.  v4:= lcmp(v0, v2);
  #L3f0588.  if v4 < 0 then goto L3f0598;
  #L3f058c.  call `onItemEvicted`(v5, v6, v7) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f0592.  v6:= 0I;
  #L3f0594.  @monitorexit v5
  #L3f0596.  return v6 @kind object;
  #L3f0598.  if v7 == 0 then goto L3f05a6;
  #L3f059c.  v2:= v5.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3f05a0.  v2:= v2 + v0 @kind long;
  #L3f05a2.  v5.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v2 @kind wide;
  #L3f05a6.  v0:= v5.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3f05aa.  call temp:= `put`(v0, v6, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f05b0.  v0:= temp @kind object;
  #L3f05b2.  if v0 == 0 then goto L3f05dc;
  #L3f05b6.  v1:= v5.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3f05ba.  call temp:= `getSize`(v5, v0) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L3f05c0.  v3:= temp;
  #L3f05c2.  v3:= (`long`) v3 @kind i2l;
  #L3f05c4.  v1:= v1 - v3 @kind long;
  #L3f05c6.  v5.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v1 @kind wide;
  #L3f05ca.  call temp:= `equals`(v0, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f05d0.  v7:= temp;
  #L3f05d2.  if v7 != 0 then goto L3f05dc;
  #L3f05d6.  call `onItemEvicted`(v5, v6, v0) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f05dc.  call `a`(v5) @signature `Lcom/bumptech/glide/util/LruCache;.a:()V` @kind direct;
  #L3f05e2.  @monitorexit v5
  #L3f05e4.  return v0 @kind object;
  #L3f05e6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f05e8.  @monitorexit v5
  #L3f05ea.  throw v6;
  catch `java.lang.Throwable` @[L3f0576..L3f0592] goto L3f05e6;
  catch `java.lang.Throwable` @[L3f059c..L3f05e2] goto L3f05e6;
}
procedure `java.lang.Object` `remove`(`com.bumptech.glide.util.LruCache` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0610.  @monitorenter v4
  #L3f0612.  v0:= v4.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3f0616.  call temp:= `remove`(v0, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f061c.  v5:= temp @kind object;
  #L3f061e.  if v5 == 0 then goto L3f0636;
  #L3f0622.  v0:= v4.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3f0626.  call temp:= `getSize`(v4, v5) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L3f062c.  v2:= temp;
  #L3f062e.  v2:= (`long`) v2 @kind i2l;
  #L3f0630.  v0:= v0 - v2 @kind long;
  #L3f0632.  v4.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v0 @kind wide;
  #L3f0636.  @monitorexit v4
  #L3f0638.  return v5 @kind object;
  #L3f063a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f063c.  @monitorexit v4
  #L3f063e.  throw v5;
  catch `java.lang.Throwable` @[L3f0612..L3f0636] goto L3f063a;
}
procedure `void` `setSizeMultiplier`(`com.bumptech.glide.util.LruCache` v2 @kind this, `float` v3 ) @signature `Lcom/bumptech/glide/util/LruCache;.setSizeMultiplier:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0738.  @monitorenter v2
  #L3f073a.  v0:= 0I;
  #L3f073c.  v0:= fcmpg(v3, v0);
  #L3f0740.  if v0 < 0 then goto L3f076a;
  #L3f0744.  v0:= v2.`com.bumptech.glide.util.LruCache.b` @type ^`long` @kind wide;
  #L3f0748.  v0:= (`float`) v0 @kind l2f;
  #L3f074a.  v0:= v0 * v3 @kind float;
  #L3f074e.  call temp:= `round`(v0) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3f0754.  v3:= temp;
  #L3f0756.  v0:= (`long`) v3 @kind i2l;
  #L3f0758.  v2.`com.bumptech.glide.util.LruCache.c` @type ^`long` := v0 @kind wide;
  #L3f075c.  call `a`(v2) @signature `Lcom/bumptech/glide/util/LruCache;.a:()V` @kind direct;
  #L3f0762.  @monitorexit v2
  #L3f0764.  return @kind void;
  #L3f0766.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0768.  goto L3f077a;
  #L3f076a.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f076e.  v0:= "Multiplier must be >= 0" @kind object;
  #L3f0772.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f0778.  throw v3;
  #L3f077a.  @monitorexit v2
  #L3f077c.  throw v3;
  catch `java.lang.Throwable` @[L3f0744..L3f0762] goto L3f0766;
  catch `java.lang.Throwable` @[L3f076a..L3f077a] goto L3f0766;
}
procedure `void` `trimToSize`(`com.bumptech.glide.util.LruCache` v7 @kind this, `long` v8 ) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(J)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f07a4.  @monitorenter v7
  #L3f07a6.  v0:= v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3f07aa.  v2:= lcmp(v0, v8);
  #L3f07ae.  if v2 <= 0 then goto L3f0804;
  #L3f07b2.  v0:= v7.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3f07b6.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3f07bc.  v0:= temp @kind object;
  #L3f07be.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f07c4.  v0:= temp @kind object;
  #L3f07c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f07cc.  v1:= temp @kind object;
  #L3f07ce.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3f07d2.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3f07d8.  v2:= temp @kind object;
  #L3f07da.  v3:= v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3f07de.  call temp:= `getSize`(v7, v2) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L3f07e4.  v5:= temp;
  #L3f07e6.  v5:= (`long`) v5 @kind i2l;
  #L3f07e8.  v3:= v3 - v5 @kind long;
  #L3f07ea.  v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v3 @kind wide;
  #L3f07ee.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3f07f4.  v1:= temp @kind object;
  #L3f07f6.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3f07fc.  call `onItemEvicted`(v7, v1, v2) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f0802.  goto L3f07a6;
  #L3f0804.  @monitorexit v7
  #L3f0806.  return @kind void;
  #L3f0808.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f080a.  @monitorexit v7
  #L3f080c.  throw v8;
  catch `java.lang.Throwable` @[L3f07a6..L3f0802] goto L3f0808;
}
