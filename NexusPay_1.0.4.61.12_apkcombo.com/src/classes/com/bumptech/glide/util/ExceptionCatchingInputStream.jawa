record `com.bumptech.glide.util.ExceptionCatchingInputStream` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `com.bumptech.glide.util.ExceptionCatchingInputStream.a` @AccessFlag PRIVATE;
  `java.io.IOException` `com.bumptech.glide.util.ExceptionCatchingInputStream.b` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f015c.  v0:= 0I;
  #L3f015e.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L3f0164.  v0:= temp @kind object;
  #L3f0166.  `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` := v0 @kind object;
  #L3f016a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v0 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f017c.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L3f0182.  return @kind void;
}
procedure `com.bumptech.glide.util.ExceptionCatchingInputStream` `obtain`(`java.io.InputStream` v2 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.obtain:(Ljava/io/InputStream;)Lcom/bumptech/glide/util/ExceptionCatchingInputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3effe8.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` @kind object;
  #L3effec.  @monitorenter v0
  #L3effee.  v1:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` @kind object;
  #L3efff2.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3efff8.  v1:= temp @kind object;
  #L3efffa.  v1:= (`com.bumptech.glide.util.ExceptionCatchingInputStream`) v1 @kind object;
  #L3efffe.  @monitorexit v0
  #L3f0000.  if v1 != 0 then goto L3f000e;
  #L3f0004.  v1:= new `com.bumptech.glide.util.ExceptionCatchingInputStream`;
  #L3f0008.  call `<init>`(v1) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<init>:()V` @kind direct;
  #L3f000e.  call `a`(v1, v2) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.a:(Ljava/io/InputStream;)V` @kind virtual;
  #L3f0014.  return v1 @kind object;
  #L3f0016.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0018.  @monitorexit v0
  #L3f001a.  throw v2;
  catch `java.lang.Throwable` @[L3effee..L3f0000] goto L3f0016;
  catch `java.lang.Throwable` @[L3f0018..L3f001a] goto L3f0016;
}
procedure `void` `a`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.a:(Ljava/io/InputStream;)V` @AccessFlag  {
    temp;

  #L3f0240.  v0.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L3f0244.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0040.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f0044.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L3f004a.  v0:= temp;
  #L3f004c.  return v0;
}
procedure `void` `close`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0194.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f0198.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3f019e.  return @kind void;
}
procedure `java.io.IOException` `getException`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.getException:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0108.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` @kind object;
  #L3f010c.  return v0 @kind object;
}
procedure `void` `mark`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f01b0.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f01b4.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L3f01ba.  return @kind void;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3effc8.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3effcc.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L3effd2.  v0:= temp;
  #L3effd4.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0060.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f0064.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3f006a.  v0:= temp;
  #L3f006c.  goto L3f0076;
  #L3f006e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L3f0070.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v0 @kind object;
  #L3f0074.  v0:= -1I;
  #L3f0076.  return v0;
  catch `java.io.IOException` @[L3f0060..L3f006c] goto L3f006e;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0098.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f009c.  call temp:= `read`(v0, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L3f00a2.  v2:= temp;
  #L3f00a4.  goto L3f00ae;
  #L3f00a6.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L3f00a8.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v2 @kind object;
  #L3f00ac.  v2:= -1I;
  #L3f00ae.  return v2;
  catch `java.io.IOException` @[L3f0098..L3f00a4] goto L3f00a6;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f00d0.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f00d4.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3f00da.  v2:= temp;
  #L3f00dc.  goto L3f00e6;
  #L3f00de.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L3f00e0.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v2 @kind object;
  #L3f00e4.  v2:= -1I;
  #L3f00e6.  return v2;
  catch `java.io.IOException` @[L3f00d0..L3f00dc] goto L3f00de;
}
procedure `void` `release`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v2 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f01cc.  v0:= 0I;
  #L3f01ce.  v2.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v0 @kind object;
  #L3f01d2.  v2.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` := v0 @kind object;
  #L3f01d6.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` @kind object;
  #L3f01da.  @monitorenter v0
  #L3f01dc.  v1:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` @kind object;
  #L3f01e0.  call temp:= `offer`(v1, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3f01e6.  @monitorexit v0
  #L3f01e8.  return @kind void;
  #L3f01ea.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f01ec.  @monitorexit v0
  #L3f01ee.  throw v1;
  catch `java.lang.Throwable` @[L3f01dc..L3f01ee] goto L3f01ea;
}
procedure `void` `reset`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f020c.  @monitorenter v1
  #L3f020e.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f0212.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L3f0218.  @monitorexit v1
  #L3f021a.  return @kind void;
  #L3f021c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f021e.  @monitorexit v1
  #L3f0220.  throw v0;
  catch `java.lang.Throwable` @[L3f020e..L3f0218] goto L3f021c;
}
procedure `long` `skip`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `long` v2 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0120.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3f0124.  call temp:= `skip`(v0, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L3f012a.  v2:= temp @kind wide;
  #L3f012c.  goto L3f0138;
  #L3f012e.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L3f0130.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v2 @kind object;
  #L3f0134.  v2:= 0L;
  #L3f0138.  return v2 @kind wide;
  catch `java.io.IOException` @[L3f0120..L3f012c] goto L3f012e;
}
