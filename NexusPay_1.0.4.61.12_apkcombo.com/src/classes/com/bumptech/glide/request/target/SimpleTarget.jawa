record `com.bumptech.glide.request.target.SimpleTarget` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.bumptech.glide.request.target.BaseTarget` @kind class {
  `int` `com.bumptech.glide.request.target.SimpleTarget.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.request.target.SimpleTarget.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.request.target.SimpleTarget` v1 @kind this) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ee35c.  v0:= -2147483648I;
  #L3ee360.  call `<init>`(v1, v0, v0) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.<init>:(II)V` @kind direct;
  #L3ee366.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.request.target.SimpleTarget` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ee378.  call `<init>`(v0) @signature `Lcom/bumptech/glide/request/target/BaseTarget;.<init>:()V` @kind direct;
  #L3ee37e.  v0.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int` := v1;
  #L3ee382.  v0.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int` := v2;
  #L3ee386.  return @kind void;
}
procedure `void` `getSize`(`com.bumptech.glide.request.target.SimpleTarget` v2 @kind this, `com.bumptech.glide.request.target.SizeReadyCallback` v3 @kind object) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.getSize:(Lcom/bumptech/glide/request/target/SizeReadyCallback;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3ee398.  v0:= v2.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int`;
  #L3ee39c.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int`;
  #L3ee3a0.  call temp:= `isValidDimensions`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.isValidDimensions:(II)Z` @kind static;
  #L3ee3a6.  v0:= temp;
  #L3ee3a8.  if v0 == 0 then goto L3ee3bc;
  #L3ee3ac.  v0:= v2.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int`;
  #L3ee3b0.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int`;
  #L3ee3b4.  call `onSizeReady`(v3, v0, v1) @signature `Lcom/bumptech/glide/request/target/SizeReadyCallback;.onSizeReady:(II)V` @kind interface;
  #L3ee3ba.  return @kind void;
  #L3ee3bc.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ee3c0.  v0:= new `java.lang.StringBuilder`;
  #L3ee3c4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ee3ca.  v1:= "Width and height must both be > 0 or Target#SIZE_ORIGINAL, but given width: " @kind object;
  #L3ee3ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ee3d4.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int`;
  #L3ee3d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ee3de.  v1:= " and height: " @kind object;
  #L3ee3e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ee3e8.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int`;
  #L3ee3ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ee3f2.  v1:= ", either provide dimensions in the constructor or call override()" @kind object;
  #L3ee3f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ee3fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ee402.  v0:= temp @kind object;
  #L3ee404.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ee40a.  throw v3;
}
procedure `void` `removeCallback`(`com.bumptech.glide.request.target.SimpleTarget` v0 @kind this, `com.bumptech.glide.request.target.SizeReadyCallback` v1 @kind object) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.removeCallback:(Lcom/bumptech/glide/request/target/SizeReadyCallback;)V` @AccessFlag PUBLIC {
    temp;

  #L3ee41c.  return @kind void;
}
