record `com.bumptech.glide.disklrucache.a` @kind class @AccessFlag  extends `java.io.Closeable` @kind interface {
  `java.io.InputStream` `com.bumptech.glide.disklrucache.a.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.charset.Charset` `com.bumptech.glide.disklrucache.a.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.disklrucache.a.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.disklrucache.a.d` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.disklrucache.a.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.disklrucache.a` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lcom/bumptech/glide/disklrucache/a;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ca7e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ca7e6.  if v2 == 0 then goto L3ca834;
  #L3ca7ea.  if v4 == 0 then goto L3ca834;
  #L3ca7ee.  if v3 < 0 then goto L3ca824;
  #L3ca7f2.  v0:= `@@com.bumptech.glide.disklrucache.b.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3ca7f6.  call temp:= `equals`(v4, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ca7fc.  v0:= temp;
  #L3ca7fe.  if v0 == 0 then goto L3ca814;
  #L3ca802.  v1.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` := v2 @kind object;
  #L3ca806.  v1.`com.bumptech.glide.disklrucache.a.b` @type ^`java.nio.charset.Charset` := v4 @kind object;
  #L3ca80a.  v2:= new `byte`[v3];
  #L3ca80e.  v1.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] := v2 @kind object;
  #L3ca812.  return @kind void;
  #L3ca814.  v2:= new `java.lang.IllegalArgumentException`;
  #L3ca818.  v3:= "Unsupported encoding" @kind object;
  #L3ca81c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ca822.  throw v2;
  #L3ca824.  v2:= new `java.lang.IllegalArgumentException`;
  #L3ca828.  v3:= "capacity <= 0" @kind object;
  #L3ca82c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ca832.  throw v2;
  #L3ca834.  v2:= 0I;
  #L3ca836.  throw v2;
}
procedure `void` `<init>`(`com.bumptech.glide.disklrucache.a` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lcom/bumptech/glide/disklrucache/a;.<init>:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ca848.  v0:= 8192I;
  #L3ca84c.  call `<init>`(v1, v2, v0, v3) @signature `Lcom/bumptech/glide/disklrucache/a;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @kind direct;
  #L3ca852.  return @kind void;
}
procedure `java.nio.charset.Charset` `a`(`com.bumptech.glide.disklrucache.a` v0 @kind object) @signature `Lcom/bumptech/glide/disklrucache/a;.a:(Lcom/bumptech/glide/disklrucache/a;)Ljava/nio/charset/Charset;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3ca7c8.  v0:= v0.`com.bumptech.glide.disklrucache.a.b` @type ^`java.nio.charset.Charset` @kind object;
  #L3ca7cc.  return v0 @kind object;
}
procedure `void` `b`(`com.bumptech.glide.disklrucache.a` v4 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ca8a8.  v0:= v4.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3ca8ac.  v1:= v4.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca8b0.  v2:= length @variable v1;
  #L3ca8b2.  v3:= 0I;
  #L3ca8b4.  call temp:= `read`(v0, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3ca8ba.  v0:= temp;
  #L3ca8bc.  v1:= -1I;
  #L3ca8be.  if v0 == v1 then goto L3ca8cc;
  #L3ca8c2.  v4.`com.bumptech.glide.disklrucache.a.d` @type ^`int` := v3;
  #L3ca8c6.  v4.`com.bumptech.glide.disklrucache.a.e` @type ^`int` := v0;
  #L3ca8ca.  return @kind void;
  #L3ca8cc.  v0:= new `java.io.EOFException`;
  #L3ca8d0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3ca8d6.  throw v0;
}
procedure `boolean` `c`(`com.bumptech.glide.disklrucache.a` v2 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ca654.  v0:= v2.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3ca658.  v1:= -1I;
  #L3ca65a.  if v0 != v1 then goto L3ca662;
  #L3ca65e.  v0:= 1I;
  #L3ca660.  goto L3ca664;
  #L3ca662.  v0:= 0I;
  #L3ca664.  return v0;
}
procedure `void` `close`(`com.bumptech.glide.disklrucache.a` v2 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ca864.  v0:= v2.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3ca868.  @monitorenter v0
  #L3ca86a.  v1:= v2.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca86e.  if v1 == 0 then goto L3ca882;
  #L3ca872.  v1:= 0I;
  #L3ca874.  v2.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] := v1 @kind object;
  #L3ca878.  v1:= v2.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3ca87c.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3ca882.  @monitorexit v0
  #L3ca884.  return @kind void;
  #L3ca886.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ca888.  @monitorexit v0
  #L3ca88a.  throw v1;
  catch `java.lang.Throwable` @[L3ca86a..L3ca88a] goto L3ca886;
}
procedure `java.lang.String` `d`(`com.bumptech.glide.disklrucache.a` v7 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.d:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ca678.  v0:= v7.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3ca67c.  @monitorenter v0
  #L3ca67e.  v1:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca682.  if v1 == 0 then goto L3ca796;
  #L3ca686.  v1:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca68a.  v2:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3ca68e.  if v1 < v2 then goto L3ca698;
  #L3ca692.  call `b`(v7) @signature `Lcom/bumptech/glide/disklrucache/a;.b:()V` @kind direct;
  #L3ca698.  v1:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca69c.  v2:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3ca6a0.  v3:= 10I;
  #L3ca6a4.  if v1 == v2 then goto L3ca70a;
  #L3ca6a8.  v2:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca6ac.  v2:= v2[v1] @kind byte;
  #L3ca6b0.  if v2 != v3 then goto L3ca704;
  #L3ca6b4.  v2:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca6b8.  if v1 == v2 then goto L3ca6d2;
  #L3ca6bc.  v2:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca6c0.  v3:= v1 + -1;
  #L3ca6c4.  v2:= v2[v3] @kind byte;
  #L3ca6c8.  v4:= 13I;
  #L3ca6cc.  if v2 != v4 then goto L3ca6d2;
  #L3ca6d0.  goto L3ca6d4;
  #L3ca6d2.  v3:= v1;
  #L3ca6d4.  v2:= new `java.lang.String`;
  #L3ca6d8.  v4:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca6dc.  v5:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca6e0.  v6:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca6e4.  v3:= v3 - v6 @kind int;
  #L3ca6e6.  v6:= v7.`com.bumptech.glide.disklrucache.a.b` @type ^`java.nio.charset.Charset` @kind object;
  #L3ca6ea.  call temp:= `name`(v6) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L3ca6f0.  v6:= temp @kind object;
  #L3ca6f2.  call `<init>`(v2, v4, v5, v3, v6) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L3ca6f8.  v1:= v1 + 1;
  #L3ca6fc.  v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int` := v1;
  #L3ca700.  @monitorexit v0
  #L3ca702.  return v2 @kind object;
  #L3ca704.  v1:= v1 + 1;
  #L3ca708.  goto L3ca69c;
  #L3ca70a.  v1:= new `com.bumptech.glide.disklrucache.a$a`;
  #L3ca70e.  v2:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3ca712.  v4:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca716.  v2:= v2 - v4 @kind int;
  #L3ca718.  v2:= v2 + 80;
  #L3ca71c.  call `<init>`(v1, v7, v2) @signature `Lcom/bumptech/glide/disklrucache/a$a;.<init>:(Lcom/bumptech/glide/disklrucache/a;I)V` @kind direct;
  #L3ca722.  v2:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca726.  v4:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca72a.  v5:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3ca72e.  v6:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca732.  v5:= v5 - v6 @kind int;
  #L3ca734.  call `write`(v1, v2, v4, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L3ca73a.  v2:= -1I;
  #L3ca73c.  v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int` := v2;
  #L3ca740.  call `b`(v7) @signature `Lcom/bumptech/glide/disklrucache/a;.b:()V` @kind direct;
  #L3ca746.  v2:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca74a.  v4:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3ca74e.  if v2 == v4 then goto L3ca722;
  #L3ca752.  v4:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca756.  v4:= v4[v2] @kind byte;
  #L3ca75a.  if v4 != v3 then goto L3ca790;
  #L3ca75e.  v3:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca762.  if v2 == v3 then goto L3ca77c;
  #L3ca766.  v3:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3ca76a.  v4:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca76e.  v5:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3ca772.  v5:= v2 - v5 @kind int;
  #L3ca776.  call `write`(v1, v3, v4, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L3ca77c.  v2:= v2 + 1;
  #L3ca780.  v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int` := v2;
  #L3ca784.  call temp:= `toString`(v1) @signature `Lcom/bumptech/glide/disklrucache/a$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ca78a.  v1:= temp @kind object;
  #L3ca78c.  @monitorexit v0
  #L3ca78e.  return v1 @kind object;
  #L3ca790.  v2:= v2 + 1;
  #L3ca794.  goto L3ca74a;
  #L3ca796.  v1:= new `java.io.IOException`;
  #L3ca79a.  v2:= "LineReader is closed" @kind object;
  #L3ca79e.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ca7a4.  throw v1;
  #L3ca7a6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ca7a8.  @monitorexit v0
  #L3ca7aa.  throw v1;
  catch `java.lang.Throwable` @[L3ca67e..L3ca7aa] goto L3ca7a6;
}
