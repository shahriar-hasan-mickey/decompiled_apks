record `com.dbbl.nexus.pay.enums.TokenType` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `com.dbbl.nexus.pay.enums.TokenType.code` @AccessFlag ;
}
global `com.dbbl.nexus.pay.enums.TokenType`[] `@@com.dbbl.nexus.pay.enums.TokenType.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `com.dbbl.nexus.pay.enums.TokenType` `@@com.dbbl.nexus.pay.enums.TokenType.NR` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.dbbl.nexus.pay.enums.TokenType` `@@com.dbbl.nexus.pay.enums.TokenType.OTP` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.dbbl.nexus.pay.enums.TokenType` `@@com.dbbl.nexus.pay.enums.TokenType.RSA` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f844.  v0:= new `com.dbbl.nexus.pay.enums.TokenType`;
  #L43f848.  v1:= "OTP" @kind object;
  #L43f84c.  v2:= 0I;
  #L43f84e.  v3:= "otp" @kind object;
  #L43f852.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L43f858.  `@@com.dbbl.nexus.pay.enums.TokenType.OTP` @type ^`com.dbbl.nexus.pay.enums.TokenType` := v0 @kind object;
  #L43f85c.  v0:= new `com.dbbl.nexus.pay.enums.TokenType`;
  #L43f860.  v1:= "RSA" @kind object;
  #L43f864.  v3:= 1I;
  #L43f866.  v4:= "rsa" @kind object;
  #L43f86a.  call `<init>`(v0, v1, v3, v4) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L43f870.  `@@com.dbbl.nexus.pay.enums.TokenType.RSA` @type ^`com.dbbl.nexus.pay.enums.TokenType` := v0 @kind object;
  #L43f874.  v0:= new `com.dbbl.nexus.pay.enums.TokenType`;
  #L43f878.  v1:= "NR" @kind object;
  #L43f87c.  v4:= 2I;
  #L43f87e.  v5:= "nr" @kind object;
  #L43f882.  call `<init>`(v0, v1, v4, v5) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L43f888.  `@@com.dbbl.nexus.pay.enums.TokenType.NR` @type ^`com.dbbl.nexus.pay.enums.TokenType` := v0 @kind object;
  #L43f88c.  v1:= 3I;
  #L43f88e.  v1:= new `com.dbbl.nexus.pay.enums.TokenType`[v1];
  #L43f892.  v5:= `@@com.dbbl.nexus.pay.enums.TokenType.OTP` @type ^`com.dbbl.nexus.pay.enums.TokenType` @kind object;
  #L43f896.  v1[v2]:= v5 @kind object;
  #L43f89a.  v2:= `@@com.dbbl.nexus.pay.enums.TokenType.RSA` @type ^`com.dbbl.nexus.pay.enums.TokenType` @kind object;
  #L43f89e.  v1[v3]:= v2 @kind object;
  #L43f8a2.  v1[v4]:= v0 @kind object;
  #L43f8a6.  `@@com.dbbl.nexus.pay.enums.TokenType.$VALUES` @type ^`com.dbbl.nexus.pay.enums.TokenType`[] := v1 @kind object;
  #L43f8aa.  return @kind void;
}
procedure `void` `<init>`(`com.dbbl.nexus.pay.enums.TokenType` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L43f8bc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L43f8c2.  v0.`com.dbbl.nexus.pay.enums.TokenType.code` @type ^`java.lang.String` := v3 @kind object;
  #L43f8c6.  return @kind void;
}
procedure `com.dbbl.nexus.pay.enums.TokenType` `getTokenType`(`java.lang.String` v5 @kind object) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.getTokenType:(Ljava/lang/String;)Lcom/dbbl/nexus/pay/enums/TokenType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43f7a0.  call temp:= `values`() @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.values:()[Lcom/dbbl/nexus/pay/enums/TokenType;` @kind static;
  #L43f7a6.  v0:= temp @kind object;
  #L43f7a8.  v1:= length @variable v0;
  #L43f7aa.  v2:= 0I;
  #L43f7ac.  if v2 >= v1 then goto L43f7d0;
  #L43f7b0.  v3:= v0[v2] @kind object;
  #L43f7b4.  call temp:= `getCode`(v3) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.getCode:()Ljava/lang/String;` @kind virtual;
  #L43f7ba.  v4:= temp @kind object;
  #L43f7bc.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43f7c2.  v4:= temp;
  #L43f7c4.  if v4 == 0 then goto L43f7ca;
  #L43f7c8.  return v3 @kind object;
  #L43f7ca.  v2:= v2 + 1;
  #L43f7ce.  goto L43f7ac;
  #L43f7d0.  v5:= 0I;
  #L43f7d2.  return v5 @kind object;
}
procedure `com.dbbl.nexus.pay.enums.TokenType` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.valueOf:(Ljava/lang/String;)Lcom/dbbl/nexus/pay/enums/TokenType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43f7e4.  v0:= constclass @type ^`com.dbbl.nexus.pay.enums.TokenType` @kind object;
  #L43f7e8.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L43f7ee.  v1:= temp @kind object;
  #L43f7f0.  v1:= (`com.dbbl.nexus.pay.enums.TokenType`) v1 @kind object;
  #L43f7f4.  return v1 @kind object;
}
procedure `com.dbbl.nexus.pay.enums.TokenType`[] `values`() @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.values:()[Lcom/dbbl/nexus/pay/enums/TokenType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43f808.  v0:= `@@com.dbbl.nexus.pay.enums.TokenType.$VALUES` @type ^`com.dbbl.nexus.pay.enums.TokenType`[] @kind object;
  #L43f80c.  call temp:= `clone`(v0) @signature `[Lcom/dbbl/nexus/pay/enums/TokenType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L43f812.  v0:= temp @kind object;
  #L43f814.  v0:= (`com.dbbl.nexus.pay.enums.TokenType`[]) v0 @kind object;
  #L43f818.  return v0 @kind object;
}
procedure `java.lang.String` `getCode`(`com.dbbl.nexus.pay.enums.TokenType` v1 @kind this) @signature `Lcom/dbbl/nexus/pay/enums/TokenType;.getCode:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f82c.  v0:= v1.`com.dbbl.nexus.pay.enums.TokenType.code` @type ^`java.lang.String` @kind object;
  #L43f830.  return v0 @kind object;
}
