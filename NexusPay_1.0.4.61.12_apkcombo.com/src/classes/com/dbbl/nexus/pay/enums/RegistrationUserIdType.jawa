record `com.dbbl.nexus.pay.enums.RegistrationUserIdType` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `int` `com.dbbl.nexus.pay.enums.RegistrationUserIdType.code` @AccessFlag ;
}
global `com.dbbl.nexus.pay.enums.RegistrationUserIdType`[] `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `com.dbbl.nexus.pay.enums.RegistrationUserIdType` `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.EMAIL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.dbbl.nexus.pay.enums.RegistrationUserIdType` `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.MOBILE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43f364.  v0:= new `com.dbbl.nexus.pay.enums.RegistrationUserIdType`;
  #L43f368.  v1:= "MOBILE" @kind object;
  #L43f36c.  v2:= 0I;
  #L43f36e.  call `<init>`(v0, v1, v2, v2) @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L43f374.  `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.MOBILE` @type ^`com.dbbl.nexus.pay.enums.RegistrationUserIdType` := v0 @kind object;
  #L43f378.  v0:= new `com.dbbl.nexus.pay.enums.RegistrationUserIdType`;
  #L43f37c.  v1:= "EMAIL" @kind object;
  #L43f380.  v3:= 1I;
  #L43f382.  call `<init>`(v0, v1, v3, v3) @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L43f388.  `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.EMAIL` @type ^`com.dbbl.nexus.pay.enums.RegistrationUserIdType` := v0 @kind object;
  #L43f38c.  v1:= 2I;
  #L43f38e.  v1:= new `com.dbbl.nexus.pay.enums.RegistrationUserIdType`[v1];
  #L43f392.  v4:= `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.MOBILE` @type ^`com.dbbl.nexus.pay.enums.RegistrationUserIdType` @kind object;
  #L43f396.  v1[v2]:= v4 @kind object;
  #L43f39a.  v1[v3]:= v0 @kind object;
  #L43f39e.  `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.$VALUES` @type ^`com.dbbl.nexus.pay.enums.RegistrationUserIdType`[] := v1 @kind object;
  #L43f3a2.  return @kind void;
}
procedure `void` `<init>`(`com.dbbl.nexus.pay.enums.RegistrationUserIdType` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.<init>:(Ljava/lang/String;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L43f3b4.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L43f3ba.  v0.`com.dbbl.nexus.pay.enums.RegistrationUserIdType.code` @type ^`int` := v3;
  #L43f3be.  return @kind void;
}
procedure `com.dbbl.nexus.pay.enums.RegistrationUserIdType` `getRegistrationUserIdType`(`int` v5 ) @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.getRegistrationUserIdType:(I)Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43f2c8.  call temp:= `values`() @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.values:()[Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;` @kind static;
  #L43f2ce.  v0:= temp @kind object;
  #L43f2d0.  v1:= length @variable v0;
  #L43f2d2.  v2:= 0I;
  #L43f2d4.  if v2 >= v1 then goto L43f2f0;
  #L43f2d8.  v3:= v0[v2] @kind object;
  #L43f2dc.  call temp:= `getCode`(v3) @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.getCode:()I` @kind virtual;
  #L43f2e2.  v4:= temp;
  #L43f2e4.  if v4 != v5 then goto L43f2ea;
  #L43f2e8.  return v3 @kind object;
  #L43f2ea.  v2:= v2 + 1;
  #L43f2ee.  goto L43f2d4;
  #L43f2f0.  v5:= 0I;
  #L43f2f2.  return v5 @kind object;
}
procedure `com.dbbl.nexus.pay.enums.RegistrationUserIdType` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.valueOf:(Ljava/lang/String;)Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43f304.  v0:= constclass @type ^`com.dbbl.nexus.pay.enums.RegistrationUserIdType` @kind object;
  #L43f308.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L43f30e.  v1:= temp @kind object;
  #L43f310.  v1:= (`com.dbbl.nexus.pay.enums.RegistrationUserIdType`) v1 @kind object;
  #L43f314.  return v1 @kind object;
}
procedure `com.dbbl.nexus.pay.enums.RegistrationUserIdType`[] `values`() @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.values:()[Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43f328.  v0:= `@@com.dbbl.nexus.pay.enums.RegistrationUserIdType.$VALUES` @type ^`com.dbbl.nexus.pay.enums.RegistrationUserIdType`[] @kind object;
  #L43f32c.  call temp:= `clone`(v0) @signature `[Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L43f332.  v0:= temp @kind object;
  #L43f334.  v0:= (`com.dbbl.nexus.pay.enums.RegistrationUserIdType`[]) v0 @kind object;
  #L43f338.  return v0 @kind object;
}
procedure `int` `getCode`(`com.dbbl.nexus.pay.enums.RegistrationUserIdType` v1 @kind this) @signature `Lcom/dbbl/nexus/pay/enums/RegistrationUserIdType;.getCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f34c.  v0:= v1.`com.dbbl.nexus.pay.enums.RegistrationUserIdType.code` @type ^`int`;
  #L43f350.  return v0;
}
