record `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
  `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` v0 @kind this, `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` v1 @kind object) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.<init>:(Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3aa3cc.  v0.`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @type ^`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` := v1 @kind object;
  #L3aa3d0.  v1:= 0I;
  #L3aa3d2.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L3aa3d8.  return @kind void;
}
procedure `java.util.List` `a`(`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` v5 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.a:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3aa2f8.  v0:= v5.`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @type ^`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` @kind object;
  #L3aa2fc.  call temp:= `access$getAttrResToValueMap$p`(v0) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;.access$getAttrResToValueMap$p:(Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;)Ljava/util/Map;` @kind static;
  #L3aa302.  v0:= temp @kind object;
  #L3aa304.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3aa30a.  v0:= temp @kind object;
  #L3aa30c.  v1:= new `java.util.ArrayList`;
  #L3aa310.  v2:= 10I;
  #L3aa314.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L3aa31a.  v2:= temp;
  #L3aa31c.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3aa322.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3aa328.  v0:= temp @kind object;
  #L3aa32a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3aa330.  v2:= temp;
  #L3aa332.  if v2 == 0 then goto L3aa36e;
  #L3aa336.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3aa33c.  v2:= temp @kind object;
  #L3aa33e.  v2:= (`java.lang.Number`) v2 @kind object;
  #L3aa342.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L3aa348.  v2:= temp;
  #L3aa34a.  v3:= v5.`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @type ^`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` @kind object;
  #L3aa34e.  call temp:= `access$getStyleableAttrs$p`(v3) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;.access$getStyleableAttrs$p:(Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;)[I` @kind static;
  #L3aa354.  v3:= temp @kind object;
  #L3aa356.  call temp:= `indexOf`(v3, v2) @signature `Lkotlin/collections/ArraysKt;.indexOf:([II)I` @kind static;
  #L3aa35c.  v2:= temp;
  #L3aa35e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3aa364.  v2:= temp @kind object;
  #L3aa366.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3aa36c.  goto L3aa32a;
  #L3aa36e.  v0:= new `java.util.ArrayList`;
  #L3aa372.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3aa378.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3aa37e.  v1:= temp @kind object;
  #L3aa380.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3aa386.  v2:= temp;
  #L3aa388.  if v2 == 0 then goto L3aa3ba;
  #L3aa38c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3aa392.  v2:= temp @kind object;
  #L3aa394.  v3:= v2 @kind object;
  #L3aa396.  v3:= (`java.lang.Number`) v3 @kind object;
  #L3aa39a.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L3aa3a0.  v3:= temp;
  #L3aa3a2.  v4:= -1I;
  #L3aa3a4.  if v3 == v4 then goto L3aa3ac;
  #L3aa3a8.  v3:= 1I;
  #L3aa3aa.  goto L3aa3ae;
  #L3aa3ac.  v3:= 0I;
  #L3aa3ae.  if v3 == 0 then goto L3aa380;
  #L3aa3b2.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3aa3b8.  goto L3aa380;
  #L3aa3ba.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` v1 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3aa2dc.  call temp:= `a`(v1) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.a:()Ljava/util/List;` @kind virtual;
  #L3aa2e2.  v0:= temp @kind object;
  #L3aa2e4.  return v0 @kind object;
}
