record `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
  `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` v0 @kind this, `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` v1 @kind object) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.<init>:(Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3aab34.  v0.`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a.a` @type ^`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` := v1 @kind object;
  #L3aab38.  v1:= 0I;
  #L3aab3a.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L3aab40.  return @kind void;
}
procedure `java.util.HashMap` `a`(`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` v7 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.a:()Ljava/util/HashMap;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3aaa54.  v0:= new `java.util.HashMap`;
  #L3aaa58.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3aaa5e.  v1:= v7.`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a.a` @type ^`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` @kind object;
  #L3aaa62.  call temp:= `access$getWrappers$p`(v1) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper;.access$getWrappers$p:(Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper;)Ljava/util/List;` @kind static;
  #L3aaa68.  v1:= temp @kind object;
  #L3aaa6a.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3aaa70.  v1:= temp @kind object;
  #L3aaa72.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3aaa78.  v2:= temp;
  #L3aaa7a.  if v2 == 0 then goto L3aab22;
  #L3aaa7e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3aaa84.  v2:= temp @kind object;
  #L3aaa86.  v2:= (`com.airbnb.paris.typed_array_wrappers.TypedArrayWrapper`) v2 @kind object;
  #L3aaa8a.  call temp:= `getIndexCount`(v2) @signature `Lcom/airbnb/paris/typed_array_wrappers/TypedArrayWrapper;.getIndexCount:()I` @kind virtual;
  #L3aaa90.  v3:= temp;
  #L3aaa92.  v4:= 0I;
  #L3aaa94.  call temp:= `until`(v4, v3) @signature `Lkotlin/ranges/RangesKt;.until:(II)Lkotlin/ranges/IntRange;` @kind static;
  #L3aaa9a.  v3:= temp @kind object;
  #L3aaa9c.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3aaaa2.  v3:= temp @kind object;
  #L3aaaa4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3aaaaa.  v5:= temp;
  #L3aaaac.  if v5 == 0 then goto L3aaa72;
  #L3aaab0.  v5:= v3 @kind object;
  #L3aaab2.  v5:= (`kotlin.collections.IntIterator`) v5 @kind object;
  #L3aaab6.  call temp:= `nextInt`(v5) @signature `Lkotlin/collections/IntIterator;.nextInt:()I` @kind virtual;
  #L3aaabc.  v5:= temp;
  #L3aaabe.  call temp:= `getIndex`(v2, v5) @signature `Lcom/airbnb/paris/typed_array_wrappers/TypedArrayWrapper;.getIndex:(I)I` @kind virtual;
  #L3aaac4.  v5:= temp;
  #L3aaac6.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3aaacc.  v6:= temp @kind object;
  #L3aaace.  call temp:= `containsKey`(v0, v6) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3aaad4.  v6:= temp;
  #L3aaad6.  if v6 != 0 then goto L3aaafc;
  #L3aaada.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3aaae0.  v5:= temp @kind object;
  #L3aaae2.  v6:= 1I;
  #L3aaae4.  v6:= new `com.airbnb.paris.typed_array_wrappers.TypedArrayWrapper`[v6];
  #L3aaae8.  v6[v4]:= v2 @kind object;
  #L3aaaec.  call temp:= `mutableListOf`(v6) @signature `Lkotlin/collections/CollectionsKt;.mutableListOf:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3aaaf2.  v6:= temp @kind object;
  #L3aaaf4.  call temp:= `put`(v0, v5, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3aaafa.  goto L3aaaa4;
  #L3aaafc.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3aab02.  v5:= temp @kind object;
  #L3aab04.  call temp:= `get`(v0, v5) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3aab0a.  v5:= temp @kind object;
  #L3aab0c.  if v5 != 0 then goto L3aab16;
  #L3aab10.  call `throwNpe`() @signature `Lkotlin/jvm/internal/Intrinsics;.throwNpe:()V` @kind static;
  #L3aab16.  v5:= (`java.util.List`) v5 @kind object;
  #L3aab1a.  call temp:= `add`(v5, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3aab20.  goto L3aaaa4;
  #L3aab22.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` v1 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3aaa38.  call temp:= `a`(v1) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.a:()Ljava/util/HashMap;` @kind virtual;
  #L3aaa3e.  v0:= temp @kind object;
  #L3aaa40.  return v0 @kind object;
}
