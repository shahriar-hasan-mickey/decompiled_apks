record `com.airbnb.lottie.value.ScaleXY` @kind class @AccessFlag PUBLIC {
  `float` `com.airbnb.lottie.value.ScaleXY.a` @AccessFlag PRIVATE;
  `float` `com.airbnb.lottie.value.ScaleXY.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a1c70.  v0:= 1.0F;
  #L3a1c74.  call `<init>`(v1, v0, v0) @signature `Lcom/airbnb/lottie/value/ScaleXY;.<init>:(FF)V` @kind direct;
  #L3a1c7a.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.value.ScaleXY` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/airbnb/lottie/value/ScaleXY;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a1c8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a1c92.  v0.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float` := v1;
  #L3a1c96.  v0.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float` := v2;
  #L3a1c9a.  return @kind void;
}
procedure `boolean` `equals`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this, `float` v2 , `float` v3 ) @signature `Lcom/airbnb/lottie/value/ScaleXY;.equals:(FF)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1bc4.  v0:= v1.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float`;
  #L3a1bc8.  v2:= fcmpl(v0, v2);
  #L3a1bcc.  if v2 != 0 then goto L3a1be0;
  #L3a1bd0.  v2:= v1.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float`;
  #L3a1bd4.  v2:= fcmpl(v2, v3);
  #L3a1bd8.  if v2 != 0 then goto L3a1be0;
  #L3a1bdc.  v2:= 1I;
  #L3a1bde.  goto L3a1be2;
  #L3a1be0.  v2:= 0I;
  #L3a1be2.  return v2;
}
procedure `float` `getScaleX`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1bf4.  v0:= v1.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float`;
  #L3a1bf8.  return v0;
}
procedure `float` `getScaleY`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1c0c.  v0:= v1.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float`;
  #L3a1c10.  return v0;
}
procedure `void` `set`(`com.airbnb.lottie.value.ScaleXY` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/airbnb/lottie/value/ScaleXY;.set:(FF)V` @AccessFlag PUBLIC {
    temp;

  #L3a1cac.  v0.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float` := v1;
  #L3a1cb0.  v0.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float` := v2;
  #L3a1cb4.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.airbnb.lottie.value.ScaleXY` v2 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1c24.  v0:= new `java.lang.StringBuilder`;
  #L3a1c28.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a1c2e.  call temp:= `getScaleX`(v2) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleX:()F` @kind virtual;
  #L3a1c34.  v1:= temp;
  #L3a1c36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1c3c.  v1:= "x" @kind object;
  #L3a1c40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1c46.  call temp:= `getScaleY`(v2) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleY:()F` @kind virtual;
  #L3a1c4c.  v1:= temp;
  #L3a1c4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1c54.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a1c5a.  v0:= temp @kind object;
  #L3a1c5c.  return v0 @kind object;
}
