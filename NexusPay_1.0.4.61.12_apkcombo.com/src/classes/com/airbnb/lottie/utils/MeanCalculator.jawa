record `com.airbnb.lottie.utils.MeanCalculator` @kind class @AccessFlag PUBLIC {
  `float` `com.airbnb.lottie.utils.MeanCalculator.a` @AccessFlag PRIVATE;
  `int` `com.airbnb.lottie.utils.MeanCalculator.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.utils.MeanCalculator` v0 @kind this) @signature `Lcom/airbnb/lottie/utils/MeanCalculator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a04e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a04ea.  return @kind void;
}
procedure `void` `add`(`com.airbnb.lottie.utils.MeanCalculator` v2 @kind this, `float` v3 ) @signature `Lcom/airbnb/lottie/utils/MeanCalculator;.add:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a04fc.  v0:= v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float`;
  #L3a0500.  v0:= v0 + v3 @kind float;
  #L3a0502.  v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float` := v0;
  #L3a0506.  v3:= v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int`;
  #L3a050a.  v3:= v3 + 1;
  #L3a050e.  v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int` := v3;
  #L3a0512.  v1:= 2147483647I;
  #L3a0518.  if v3 != v1 then goto L3a052e;
  #L3a051c.  v1:= 2.0F;
  #L3a0520.  v0:= v0 / v1 @kind float;
  #L3a0522.  v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float` := v0;
  #L3a0526.  v3:= v3 / 2;
  #L3a052a.  v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int` := v3;
  #L3a052e.  return @kind void;
}
procedure `float` `getMean`(`com.airbnb.lottie.utils.MeanCalculator` v2 @kind this) @signature `Lcom/airbnb/lottie/utils/MeanCalculator;.getMean:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a04bc.  v0:= v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int`;
  #L3a04c0.  if v0 != 0 then goto L3a04c8;
  #L3a04c4.  v0:= 0I;
  #L3a04c6.  return v0;
  #L3a04c8.  v1:= v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float`;
  #L3a04cc.  v0:= (`float`) v0 @kind i2f;
  #L3a04ce.  v1:= v1 / v0 @kind float;
  #L3a04d0.  return v1;
}
