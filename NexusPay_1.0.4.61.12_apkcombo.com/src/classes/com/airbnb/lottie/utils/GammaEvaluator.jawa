record `com.airbnb.lottie.utils.GammaEvaluator` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.airbnb.lottie.utils.GammaEvaluator` v0 @kind this) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39fa24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39fa2a.  return @kind void;
}
procedure `float` `a`(`float` v4 ) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39f858.  v0:= 1025879782I;
  #L39f85e.  v0:= fcmpg(v4, v0);
  #L39f862.  if v0 > 0 then goto L39f870;
  #L39f866.  v0:= 1095678034I;
  #L39f86c.  v4:= v4 / v0 @kind float;
  #L39f86e.  goto L39f896;
  #L39f870.  v0:= 1029785518I;
  #L39f876.  v4:= v4 + v0 @kind float;
  #L39f878.  v0:= 1065814589I;
  #L39f87e.  v4:= v4 / v0 @kind float;
  #L39f880.  v0:= (`double`) v4 @kind f2d;
  #L39f882.  v2:= 2.4000000953674316D;
  #L39f88c.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L39f892.  v0:= temp @kind wide;
  #L39f894.  v4:= (`float`) v0 @kind d2f;
  #L39f896.  return v4;
}
procedure `float` `b`(`float` v4 ) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39f8a8.  v0:= 994913820I;
  #L39f8ae.  v0:= fcmpg(v4, v0);
  #L39f8b2.  if v0 > 0 then goto L39f8c2;
  #L39f8b6.  v0:= 1095678034I;
  #L39f8bc.  v4:= v4 * v0 @kind float;
  #L39f8c0.  goto L39f8f2;
  #L39f8c2.  v0:= (`double`) v4 @kind f2d;
  #L39f8c4.  v2:= 0.4166666567325592D;
  #L39f8ce.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L39f8d4.  v0:= temp @kind wide;
  #L39f8d6.  v2:= 1.0549999475479126D;
  #L39f8e0.  v0:= v0 * v2 @kind double;
  #L39f8e4.  v2:= 0.054999999701976776D;
  #L39f8ee.  v0:= v0 - v2 @kind double;
  #L39f8f0.  v4:= (`float`) v0 @kind d2f;
  #L39f8f2.  return v4;
}
procedure `int` `evaluate`(`float` v7 , `int` v8 , `int` v9 ) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.evaluate:(FII)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39f904.  if v8 != v9 then goto L39f90a;
  #L39f908.  return v8;
  #L39f90a.  v0:= v8 ^> 24;
  #L39f90e.  v0:= v0 ^& 255;
  #L39f912.  v0:= (`float`) v0 @kind i2f;
  #L39f914.  v1:= 255.0F;
  #L39f918.  v0:= v0 / v1 @kind float;
  #L39f91a.  v2:= v8 ^> 16;
  #L39f91e.  v2:= v2 ^& 255;
  #L39f922.  v2:= (`float`) v2 @kind i2f;
  #L39f924.  v2:= v2 / v1 @kind float;
  #L39f926.  v3:= v8 ^> 8;
  #L39f92a.  v3:= v3 ^& 255;
  #L39f92e.  v3:= (`float`) v3 @kind i2f;
  #L39f930.  v3:= v3 / v1 @kind float;
  #L39f932.  v8:= v8 ^& 255;
  #L39f936.  v8:= (`float`) v8 @kind i2f;
  #L39f938.  v8:= v8 / v1 @kind float;
  #L39f93a.  v4:= v9 ^> 24;
  #L39f93e.  v4:= v4 ^& 255;
  #L39f942.  v4:= (`float`) v4 @kind i2f;
  #L39f944.  v4:= v4 / v1 @kind float;
  #L39f946.  v5:= v9 ^> 16;
  #L39f94a.  v5:= v5 ^& 255;
  #L39f94e.  v5:= (`float`) v5 @kind i2f;
  #L39f950.  v5:= v5 / v1 @kind float;
  #L39f952.  v6:= v9 ^> 8;
  #L39f956.  v6:= v6 ^& 255;
  #L39f95a.  v6:= (`float`) v6 @kind i2f;
  #L39f95c.  v6:= v6 / v1 @kind float;
  #L39f95e.  v9:= v9 ^& 255;
  #L39f962.  v9:= (`float`) v9 @kind i2f;
  #L39f964.  v9:= v9 / v1 @kind float;
  #L39f966.  call temp:= `a`(v2) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L39f96c.  v2:= temp;
  #L39f96e.  call temp:= `a`(v3) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L39f974.  v3:= temp;
  #L39f976.  call temp:= `a`(v8) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L39f97c.  v8:= temp;
  #L39f97e.  call temp:= `a`(v5) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L39f984.  v5:= temp;
  #L39f986.  call temp:= `a`(v6) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L39f98c.  v6:= temp;
  #L39f98e.  call temp:= `a`(v9) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L39f994.  v9:= temp;
  #L39f996.  v4:= v4 - v0 @kind float;
  #L39f998.  v4:= v4 * v7 @kind float;
  #L39f99c.  v0:= v0 + v4 @kind float;
  #L39f99e.  v5:= v5 - v2 @kind float;
  #L39f9a0.  v5:= v5 * v7 @kind float;
  #L39f9a4.  v2:= v2 + v5 @kind float;
  #L39f9a6.  v6:= v6 - v3 @kind float;
  #L39f9a8.  v6:= v6 * v7 @kind float;
  #L39f9ac.  v3:= v3 + v6 @kind float;
  #L39f9ae.  v9:= v9 - v8 @kind float;
  #L39f9b0.  v7:= v7 * v9 @kind float;
  #L39f9b4.  v8:= v8 + v7 @kind float;
  #L39f9b6.  v0:= v0 * v1 @kind float;
  #L39f9ba.  call temp:= `b`(v2) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @kind static;
  #L39f9c0.  v7:= temp;
  #L39f9c2.  v7:= v7 * v1 @kind float;
  #L39f9c6.  call temp:= `b`(v3) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @kind static;
  #L39f9cc.  v9:= temp;
  #L39f9ce.  v9:= v9 * v1 @kind float;
  #L39f9d2.  call temp:= `b`(v8) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @kind static;
  #L39f9d8.  v8:= temp;
  #L39f9da.  v8:= v8 * v1 @kind float;
  #L39f9de.  call temp:= `round`(v0) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L39f9e4.  v0:= temp;
  #L39f9e6.  v0:= v0 ^< 24;
  #L39f9ea.  call temp:= `round`(v7) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L39f9f0.  v7:= temp;
  #L39f9f2.  v7:= v7 ^< 16;
  #L39f9f6.  v7:= v7 ^| v0 @kind int;
  #L39f9f8.  call temp:= `round`(v9) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L39f9fe.  v9:= temp;
  #L39fa00.  v9:= v9 ^< 8;
  #L39fa04.  v7:= v7 ^| v9 @kind int;
  #L39fa06.  call temp:= `round`(v8) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L39fa0c.  v8:= temp;
  #L39fa0e.  v7:= v7 ^| v8 @kind int;
  #L39fa10.  return v7;
}
