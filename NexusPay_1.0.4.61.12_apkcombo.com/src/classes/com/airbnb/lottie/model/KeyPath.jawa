record `com.airbnb.lottie.model.KeyPath` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.airbnb.lottie.model.KeyPath.a` @AccessFlag PRIVATE_FINAL;
  `com.airbnb.lottie.model.KeyPathElement` `com.airbnb.lottie.model.KeyPath.b` @AccessFlag PRIVATE;
}
global `com.airbnb.lottie.model.KeyPath` `@@com.airbnb.lottie.model.KeyPath.COMPOSITION` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/model/KeyPath;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L391cb4.  v0:= new `com.airbnb.lottie.model.KeyPath`;
  #L391cb8.  v1:= "COMPOSITION" @kind object;
  #L391cbc.  temp:= new `java.lang.String`[v1];
  #L391cc2.  v1:= temp @kind object;
  #L391cc4.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L391cca.  `@@com.airbnb.lottie.model.KeyPath.COMPOSITION` @type ^`com.airbnb.lottie.model.KeyPath` := v0 @kind object;
  #L391cce.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.KeyPath` v2 @kind this, `com.airbnb.lottie.model.KeyPath` v3 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:(Lcom/airbnb/lottie/model/KeyPath;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L391ce0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L391ce6.  v0:= new `java.util.ArrayList`;
  #L391cea.  v1:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391cee.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L391cf4.  v2.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` := v0 @kind object;
  #L391cf8.  v3:= v3.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` @kind object;
  #L391cfc.  v2.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` := v3 @kind object;
  #L391d00.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.KeyPath` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:([Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L391d14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L391d1a.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L391d20.  v1:= temp @kind object;
  #L391d22.  v0.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` := v1 @kind object;
  #L391d26.  return @kind void;
}
procedure `boolean` `a`(`com.airbnb.lottie.model.KeyPath` v2 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3918bc.  v0:= v2.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L3918c0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3918c6.  v1:= temp;
  #L3918c8.  v1:= v1 + -1;
  #L3918cc.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3918d2.  v0:= temp @kind object;
  #L3918d4.  v0:= (`java.lang.String`) v0 @kind object;
  #L3918d8.  v1:= "**" @kind object;
  #L3918dc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3918e2.  v0:= temp;
  #L3918e4.  return v0;
}
procedure `boolean` `b`(`com.airbnb.lottie.model.KeyPath` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.b:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L391a44.  v0:= "__container" @kind object;
  #L391a48.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391a4e.  v2:= temp;
  #L391a50.  return v2;
}
procedure `com.airbnb.lottie.model.KeyPath` `addKey`(`com.airbnb.lottie.model.KeyPath` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.addKey:(Ljava/lang/String;)Lcom/airbnb/lottie/model/KeyPath;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L391b58.  v0:= new `com.airbnb.lottie.model.KeyPath`;
  #L391b5c.  call `<init>`(v0, v2) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:(Lcom/airbnb/lottie/model/KeyPath;)V` @kind direct;
  #L391b62.  v1:= v0.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391b66.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L391b6c.  return v0 @kind object;
}
procedure `boolean` `fullyResolvesTo`(`com.airbnb.lottie.model.KeyPath` v5 @kind this, `java.lang.String` v6 @kind object, `int` v7 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.fullyResolvesTo:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3918f8.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L3918fc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L391902.  v0:= temp;
  #L391904.  v1:= 0I;
  #L391906.  if v7 < v0 then goto L39190c;
  #L39190a.  return v1;
  #L39190c.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391910.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L391916.  v0:= temp;
  #L391918.  v2:= 1I;
  #L39191a.  v0:= v0 - v2 @kind int;
  #L39191c.  if v7 != v0 then goto L391924;
  #L391920.  v0:= 1I;
  #L391922.  goto L391926;
  #L391924.  v0:= 0I;
  #L391926.  v3:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39192a.  call temp:= `get`(v3, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391930.  v3:= temp @kind object;
  #L391932.  v3:= (`java.lang.String`) v3 @kind object;
  #L391936.  v4:= "**" @kind object;
  #L39193a.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391940.  v4:= temp;
  #L391942.  if v4 != 0 then goto L391996;
  #L391946.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39194c.  v6:= temp;
  #L39194e.  if v6 != 0 then goto L391968;
  #L391952.  v6:= "*" @kind object;
  #L391956.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39195c.  v6:= temp;
  #L39195e.  if v6 == 0 then goto L391964;
  #L391962.  goto L391968;
  #L391964.  v6:= 0I;
  #L391966.  goto L39196a;
  #L391968.  v6:= 1I;
  #L39196a.  if v0 != 0 then goto L39198e;
  #L39196e.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391972.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L391978.  v0:= temp;
  #L39197a.  v0:= v0 + -2;
  #L39197e.  if v7 != v0 then goto L391994;
  #L391982.  call temp:= `a`(v5) @signature `Lcom/airbnb/lottie/model/KeyPath;.a:()Z` @kind direct;
  #L391988.  v7:= temp;
  #L39198a.  if v7 == 0 then goto L391994;
  #L39198e.  if v6 == 0 then goto L391994;
  #L391992.  v1:= 1I;
  #L391994.  return v1;
  #L391996.  if v0 != 0 then goto L3919be;
  #L39199a.  v3:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39199e.  v4:= v7 + 1;
  #L3919a2.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3919a8.  v3:= temp @kind object;
  #L3919aa.  v3:= (`java.lang.String`) v3 @kind object;
  #L3919ae.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3919b4.  v3:= temp;
  #L3919b6.  if v3 == 0 then goto L3919be;
  #L3919ba.  v3:= 1I;
  #L3919bc.  goto L3919c0;
  #L3919be.  v3:= 0I;
  #L3919c0.  if v3 == 0 then goto L3919fc;
  #L3919c4.  v6:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L3919c8.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3919ce.  v6:= temp;
  #L3919d0.  v6:= v6 + -2;
  #L3919d4.  if v7 == v6 then goto L3919f8;
  #L3919d8.  v6:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L3919dc.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3919e2.  v6:= temp;
  #L3919e4.  v6:= v6 + -3;
  #L3919e8.  if v7 != v6 then goto L3919fa;
  #L3919ec.  call temp:= `a`(v5) @signature `Lcom/airbnb/lottie/model/KeyPath;.a:()Z` @kind direct;
  #L3919f2.  v6:= temp;
  #L3919f4.  if v6 == 0 then goto L3919fa;
  #L3919f8.  v1:= 1I;
  #L3919fa.  return v1;
  #L3919fc.  if v0 == 0 then goto L391a02;
  #L391a00.  return v2;
  #L391a02.  v7:= v7 + v2 @kind int;
  #L391a04.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391a08.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L391a0e.  v0:= temp;
  #L391a10.  v0:= v0 - v2 @kind int;
  #L391a12.  if v7 >= v0 then goto L391a18;
  #L391a16.  return v1;
  #L391a18.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391a1c.  call temp:= `get`(v0, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391a22.  v7:= temp @kind object;
  #L391a24.  v7:= (`java.lang.String`) v7 @kind object;
  #L391a28.  call temp:= `equals`(v7, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391a2e.  v6:= temp;
  #L391a30.  return v6;
}
procedure `com.airbnb.lottie.model.KeyPathElement` `getResolvedElement`(`com.airbnb.lottie.model.KeyPath` v1 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.getResolvedElement:()Lcom/airbnb/lottie/model/KeyPathElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L391ba0.  v0:= v1.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` @kind object;
  #L391ba4.  return v0 @kind object;
}
procedure `int` `incrementDepthBy`(`com.airbnb.lottie.model.KeyPath` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.incrementDepthBy:(Ljava/lang/String;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L391bb8.  call temp:= `b`(v3, v4) @signature `Lcom/airbnb/lottie/model/KeyPath;.b:(Ljava/lang/String;)Z` @kind direct;
  #L391bbe.  v0:= temp;
  #L391bc0.  v1:= 0I;
  #L391bc2.  if v0 == 0 then goto L391bc8;
  #L391bc6.  return v1;
  #L391bc8.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391bcc.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391bd2.  v0:= temp @kind object;
  #L391bd4.  v0:= (`java.lang.String`) v0 @kind object;
  #L391bd8.  v2:= "**" @kind object;
  #L391bdc.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391be2.  v0:= temp;
  #L391be4.  v2:= 1I;
  #L391be6.  if v0 != 0 then goto L391bec;
  #L391bea.  return v2;
  #L391bec.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391bf0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L391bf6.  v0:= temp;
  #L391bf8.  v0:= v0 - v2 @kind int;
  #L391bfa.  if v5 != v0 then goto L391c00;
  #L391bfe.  return v1;
  #L391c00.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391c04.  v5:= v5 + v2 @kind int;
  #L391c06.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391c0c.  v5:= temp @kind object;
  #L391c0e.  v5:= (`java.lang.String`) v5 @kind object;
  #L391c12.  call temp:= `equals`(v5, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391c18.  v4:= temp;
  #L391c1a.  if v4 == 0 then goto L391c22;
  #L391c1e.  v4:= 2I;
  #L391c20.  return v4;
  #L391c22.  return v1;
}
procedure `java.lang.String` `keysToString`(`com.airbnb.lottie.model.KeyPath` v1 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.keysToString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L391c34.  v0:= v1.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391c38.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L391c3e.  v0:= temp @kind object;
  #L391c40.  return v0 @kind object;
}
procedure `boolean` `matches`(`com.airbnb.lottie.model.KeyPath` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.matches:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L391a64.  call temp:= `b`(v3, v4) @signature `Lcom/airbnb/lottie/model/KeyPath;.b:(Ljava/lang/String;)Z` @kind direct;
  #L391a6a.  v0:= temp;
  #L391a6c.  v1:= 1I;
  #L391a6e.  if v0 == 0 then goto L391a74;
  #L391a72.  return v1;
  #L391a74.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391a78.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L391a7e.  v0:= temp;
  #L391a80.  v2:= 0I;
  #L391a82.  if v5 < v0 then goto L391a88;
  #L391a86.  return v2;
  #L391a88.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391a8c.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391a92.  v0:= temp @kind object;
  #L391a94.  v0:= (`java.lang.String`) v0 @kind object;
  #L391a98.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391a9e.  v4:= temp;
  #L391aa0.  if v4 != 0 then goto L391ae8;
  #L391aa4.  v4:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391aa8.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391aae.  v4:= temp @kind object;
  #L391ab0.  v4:= (`java.lang.String`) v4 @kind object;
  #L391ab4.  v0:= "**" @kind object;
  #L391ab8.  call temp:= `equals`(v4, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391abe.  v4:= temp;
  #L391ac0.  if v4 != 0 then goto L391ae8;
  #L391ac4.  v4:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391ac8.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391ace.  v4:= temp @kind object;
  #L391ad0.  v4:= (`java.lang.String`) v4 @kind object;
  #L391ad4.  v5:= "*" @kind object;
  #L391ad8.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391ade.  v4:= temp;
  #L391ae0.  if v4 == 0 then goto L391ae6;
  #L391ae4.  goto L391ae8;
  #L391ae6.  return v2;
  #L391ae8.  return v1;
}
procedure `boolean` `propagateToChildren`(`com.airbnb.lottie.model.KeyPath` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.propagateToChildren:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L391afc.  v0:= "__container" @kind object;
  #L391b00.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391b06.  v2:= temp;
  #L391b08.  v0:= 1I;
  #L391b0a.  if v2 == 0 then goto L391b10;
  #L391b0e.  return v0;
  #L391b10.  v2:= v1.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391b14.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L391b1a.  v2:= temp;
  #L391b1c.  v2:= v2 - v0 @kind int;
  #L391b1e.  if v3 < v2 then goto L391b46;
  #L391b22.  v2:= v1.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391b26.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L391b2c.  v2:= temp @kind object;
  #L391b2e.  v2:= (`java.lang.String`) v2 @kind object;
  #L391b32.  v3:= "**" @kind object;
  #L391b36.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L391b3c.  v2:= temp;
  #L391b3e.  if v2 == 0 then goto L391b44;
  #L391b42.  goto L391b46;
  #L391b44.  v0:= 0I;
  #L391b46.  return v0;
}
procedure `com.airbnb.lottie.model.KeyPath` `resolve`(`com.airbnb.lottie.model.KeyPath` v1 @kind this, `com.airbnb.lottie.model.KeyPathElement` v2 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.resolve:(Lcom/airbnb/lottie/model/KeyPathElement;)Lcom/airbnb/lottie/model/KeyPath;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L391b80.  v0:= new `com.airbnb.lottie.model.KeyPath`;
  #L391b84.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:(Lcom/airbnb/lottie/model/KeyPath;)V` @kind direct;
  #L391b8a.  v0.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` := v2 @kind object;
  #L391b8e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.airbnb.lottie.model.KeyPath` v2 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L391c54.  v0:= new `java.lang.StringBuilder`;
  #L391c58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L391c5e.  v1:= "KeyPath{keys=" @kind object;
  #L391c62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L391c68.  v1:= v2.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L391c6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L391c72.  v1:= ",resolved=" @kind object;
  #L391c76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L391c7c.  v1:= v2.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` @kind object;
  #L391c80.  if v1 == 0 then goto L391c88;
  #L391c84.  v1:= 1I;
  #L391c86.  goto L391c8a;
  #L391c88.  v1:= 0I;
  #L391c8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L391c90.  v1:= 125I;
  #L391c94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L391c9a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L391ca0.  v0:= temp @kind object;
  #L391ca2.  return v0 @kind object;
}
