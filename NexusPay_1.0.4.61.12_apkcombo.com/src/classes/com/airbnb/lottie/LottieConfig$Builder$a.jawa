record `com.airbnb.lottie.LottieConfig$Builder$a` @kind class @AccessFlag  extends `com.airbnb.lottie.network.LottieNetworkCacheProvider` @kind interface {
  `java.io.File` `com.airbnb.lottie.LottieConfig$Builder$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.lottie.LottieConfig$Builder$a` v0 @kind this, `com.airbnb.lottie.LottieConfig$Builder` v1 @kind object, `java.io.File` v2 @kind object) @signature `Lcom/airbnb/lottie/LottieConfig$Builder$a;.<init>:(Lcom/airbnb/lottie/LottieConfig$Builder;Ljava/io/File;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3878b4.  v0.`com.airbnb.lottie.LottieConfig$Builder$a.a` @type ^`java.io.File` := v2 @kind object;
  #L3878b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3878be.  return @kind void;
}
procedure `java.io.File` `getCacheDir`(`com.airbnb.lottie.LottieConfig$Builder$a` v2 @kind this) @signature `Lcom/airbnb/lottie/LottieConfig$Builder$a;.getCacheDir:()Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38787c.  v0:= v2.`com.airbnb.lottie.LottieConfig$Builder$a.a` @type ^`java.io.File` @kind object;
  #L387880.  call temp:= `isDirectory`(v0) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L387886.  v0:= temp;
  #L387888.  if v0 == 0 then goto L387892;
  #L38788c.  v0:= v2.`com.airbnb.lottie.LottieConfig$Builder$a.a` @type ^`java.io.File` @kind object;
  #L387890.  return v0 @kind object;
  #L387892.  v0:= new `java.lang.IllegalArgumentException`;
  #L387896.  v1:= "cache file must be a directory" @kind object;
  #L38789a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3878a0.  throw v0;
}
