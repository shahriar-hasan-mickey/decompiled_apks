record `com.airbnb.lottie.parser.moshi.JsonReader$Options` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `com.airbnb.lottie.parser.moshi.JsonReader$Options.a` @AccessFlag FINAL;
  `okio.Options` `com.airbnb.lottie.parser.moshi.JsonReader$Options.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.JsonReader$Options` v0 @kind this, `java.lang.String`[] v1 @kind object, `okio.Options` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.<init>:([Ljava/lang/String;Lokio/Options;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L39d400.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39d406.  v0.`com.airbnb.lottie.parser.moshi.JsonReader$Options.a` @type ^`java.lang.String`[] := v1 @kind object;
  #L39d40a.  v0.`com.airbnb.lottie.parser.moshi.JsonReader$Options.b` @type ^`okio.Options` := v2 @kind object;
  #L39d40e.  return @kind void;
}
procedure `com.airbnb.lottie.parser.moshi.JsonReader$Options` `of`(`java.lang.String`[] v4 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.of:([Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39d378.  v0:= length @variable v4;
  #L39d37a.  v0:= new `okio.ByteString`[v0];
  #L39d37e.  v1:= new `okio.Buffer`;
  #L39d382.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L39d388.  v2:= 0I;
  #L39d38a.  v3:= length @variable v4;
  #L39d38c.  if v2 >= v3 then goto L39d3b2;
  #L39d390.  v3:= v4[v2] @kind object;
  #L39d394.  call `a`(v1, v3) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.a:(Lokio/BufferedSink;Ljava/lang/String;)V` @kind static;
  #L39d39a.  call temp:= `readByte`(v1) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L39d3a0.  call temp:= `readByteString`(v1) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L39d3a6.  v3:= temp @kind object;
  #L39d3a8.  v0[v2]:= v3 @kind object;
  #L39d3ac.  v2:= v2 + 1;
  #L39d3b0.  goto L39d38a;
  #L39d3b2.  v1:= new `com.airbnb.lottie.parser.moshi.JsonReader$Options`;
  #L39d3b6.  call temp:= `clone`(v4) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L39d3bc.  v4:= temp @kind object;
  #L39d3be.  v4:= (`java.lang.String`[]) v4 @kind object;
  #L39d3c2.  call temp:= `of`(v0) @signature `Lokio/Options;.of:([Lokio/ByteString;)Lokio/Options;` @kind static;
  #L39d3c8.  v0:= temp @kind object;
  #L39d3ca.  call `<init>`(v1, v4, v0) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.<init>:([Ljava/lang/String;Lokio/Options;)V` @kind direct;
  #L39d3d0.  return v1 @kind object;
  #L39d3d2.  v4:= Exception @type ^`java.io.IOException` @kind object;
  #L39d3d4.  v0:= new `java.lang.AssertionError`;
  #L39d3d8.  call `<init>`(v0, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L39d3de.  throw v0;
  catch `java.io.IOException` @[L39d378..L39d3d0] goto L39d3d2;
}
