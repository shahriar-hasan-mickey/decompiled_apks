record `com.airbnb.lottie.parser.moshi.JsonReader` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.io.Closeable` @kind interface {
  `int` `com.airbnb.lottie.parser.moshi.JsonReader.a` @AccessFlag ;
  `int`[] `com.airbnb.lottie.parser.moshi.JsonReader.b` @AccessFlag ;
  `java.lang.String`[] `com.airbnb.lottie.parser.moshi.JsonReader.c` @AccessFlag ;
  `int`[] `com.airbnb.lottie.parser.moshi.JsonReader.d` @AccessFlag ;
  `boolean` `com.airbnb.lottie.parser.moshi.JsonReader.e` @AccessFlag ;
  `boolean` `com.airbnb.lottie.parser.moshi.JsonReader.f` @AccessFlag ;
}
global `java.lang.String`[] `@@com.airbnb.lottie.parser.moshi.JsonReader.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39d64c.  v0:= 128I;
  #L39d650.  v0:= new `java.lang.String`[v0];
  #L39d654.  `@@com.airbnb.lottie.parser.moshi.JsonReader.g` @type ^`java.lang.String`[] := v0 @kind object;
  #L39d658.  v0:= 0I;
  #L39d65a.  v1:= 0I;
  #L39d65c.  v2:= 31I;
  #L39d660.  if v1 > v2 then goto L39d690;
  #L39d664.  v2:= `@@com.airbnb.lottie.parser.moshi.JsonReader.g` @type ^`java.lang.String`[] @kind object;
  #L39d668.  v3:= 1I;
  #L39d66a.  v3:= new `java.lang.Object`[v3];
  #L39d66e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L39d674.  v4:= temp @kind object;
  #L39d676.  v3[v0]:= v4 @kind object;
  #L39d67a.  v4:= "\\u%04x" @kind object;
  #L39d67e.  call temp:= `format`(v4, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L39d684.  v3:= temp @kind object;
  #L39d686.  v2[v1]:= v3 @kind object;
  #L39d68a.  v1:= v1 + 1;
  #L39d68e.  goto L39d65c;
  #L39d690.  v0:= `@@com.airbnb.lottie.parser.moshi.JsonReader.g` @type ^`java.lang.String`[] @kind object;
  #L39d694.  v1:= 34I;
  #L39d698.  v2:= "\\\"" @kind object;
  #L39d69c.  v0[v1]:= v2 @kind object;
  #L39d6a0.  v1:= 92I;
  #L39d6a4.  v2:= "\\\\" @kind object;
  #L39d6a8.  v0[v1]:= v2 @kind object;
  #L39d6ac.  v1:= 9I;
  #L39d6b0.  v2:= "\\t" @kind object;
  #L39d6b4.  v0[v1]:= v2 @kind object;
  #L39d6b8.  v1:= 8I;
  #L39d6bc.  v2:= "\\b" @kind object;
  #L39d6c0.  v0[v1]:= v2 @kind object;
  #L39d6c4.  v1:= 10I;
  #L39d6c8.  v2:= "\\n" @kind object;
  #L39d6cc.  v0[v1]:= v2 @kind object;
  #L39d6d0.  v1:= 13I;
  #L39d6d4.  v2:= "\\r" @kind object;
  #L39d6d8.  v0[v1]:= v2 @kind object;
  #L39d6dc.  v1:= 12I;
  #L39d6e0.  v2:= "\\f" @kind object;
  #L39d6e4.  v0[v1]:= v2 @kind object;
  #L39d6e8.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.JsonReader` v2 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39d6fc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39d702.  v0:= 32I;
  #L39d706.  v1:= new `int`[v0];
  #L39d70a.  v2.`com.airbnb.lottie.parser.moshi.JsonReader.b` @type ^`int`[] := v1 @kind object;
  #L39d70e.  v1:= new `java.lang.String`[v0];
  #L39d712.  v2.`com.airbnb.lottie.parser.moshi.JsonReader.c` @type ^`java.lang.String`[] := v1 @kind object;
  #L39d716.  v0:= new `int`[v0];
  #L39d71a.  v2.`com.airbnb.lottie.parser.moshi.JsonReader.d` @type ^`int`[] := v0 @kind object;
  #L39d71e.  return @kind void;
}
procedure `void` `a`(`okio.BufferedSink` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.a:(Lokio/BufferedSink;Ljava/lang/String;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L39d730.  call `c`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.c:(Lokio/BufferedSink;Ljava/lang/String;)V` @kind static;
  #L39d736.  return @kind void;
}
procedure `void` `c`(`okio.BufferedSink` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.c:(Lokio/BufferedSink;Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39d800.  v0:= `@@com.airbnb.lottie.parser.moshi.JsonReader.g` @type ^`java.lang.String`[] @kind object;
  #L39d804.  v1:= 34I;
  #L39d808.  call temp:= `writeByte`(v7, v1) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L39d80e.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L39d814.  v2:= temp;
  #L39d816.  v3:= 0I;
  #L39d818.  v4:= 0I;
  #L39d81a.  if v3 >= v2 then goto L39d86c;
  #L39d81e.  call temp:= `charAt`(v8, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L39d824.  v5:= temp;
  #L39d826.  v6:= 128I;
  #L39d82a.  if v5 >= v6 then goto L39d838;
  #L39d82e.  v5:= v0[v5] @kind object;
  #L39d832.  if v5 != 0 then goto L39d852;
  #L39d836.  goto L39d866;
  #L39d838.  v6:= 8232I;
  #L39d83c.  if v5 != v6 then goto L39d846;
  #L39d840.  v5:= "\\u2028" @kind object;
  #L39d844.  goto L39d852;
  #L39d846.  v6:= 8233I;
  #L39d84a.  if v5 != v6 then goto L39d866;
  #L39d84e.  v5:= "\\u2029" @kind object;
  #L39d852.  if v4 >= v3 then goto L39d85c;
  #L39d856.  call temp:= `writeUtf8`(v7, v8, v4, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @kind interface;
  #L39d85c.  call temp:= `writeUtf8`(v7, v5) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L39d862.  v4:= v3 + 1;
  #L39d866.  v3:= v3 + 1;
  #L39d86a.  goto L39d81a;
  #L39d86c.  if v4 >= v2 then goto L39d876;
  #L39d870.  call temp:= `writeUtf8`(v7, v8, v4, v2) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @kind interface;
  #L39d876.  call temp:= `writeByte`(v7, v1) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L39d87c.  return @kind void;
}
procedure `com.airbnb.lottie.parser.moshi.JsonReader` `of`(`okio.BufferedSource` v1 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.of:(Lokio/BufferedSource;)Lcom/airbnb/lottie/parser/moshi/JsonReader;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39d604.  v0:= new `com.airbnb.lottie.parser.moshi.d`;
  #L39d608.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/parser/moshi/d;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L39d60e.  return v0 @kind object;
}
procedure `void` `b`(`com.airbnb.lottie.parser.moshi.JsonReader` v3 @kind this, `int` v4 ) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.b:(I)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L39d748.  v0:= v3.`com.airbnb.lottie.parser.moshi.JsonReader.a` @type ^`int`;
  #L39d74c.  v1:= v3.`com.airbnb.lottie.parser.moshi.JsonReader.b` @type ^`int`[] @kind object;
  #L39d750.  v2:= length @variable v1;
  #L39d752.  if v0 != v2 then goto L39d7d8;
  #L39d756.  v2:= 256I;
  #L39d75a.  if v0 == v2 then goto L39d7a2;
  #L39d75e.  v0:= length @variable v1;
  #L39d760.  v0:= v0 * 2;
  #L39d764.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L39d76a.  v0:= temp @kind object;
  #L39d76c.  v3.`com.airbnb.lottie.parser.moshi.JsonReader.b` @type ^`int`[] := v0 @kind object;
  #L39d770.  v0:= v3.`com.airbnb.lottie.parser.moshi.JsonReader.c` @type ^`java.lang.String`[] @kind object;
  #L39d774.  v1:= length @variable v0;
  #L39d776.  v1:= v1 * 2;
  #L39d77a.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L39d780.  v0:= temp @kind object;
  #L39d782.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L39d786.  v3.`com.airbnb.lottie.parser.moshi.JsonReader.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L39d78a.  v0:= v3.`com.airbnb.lottie.parser.moshi.JsonReader.d` @type ^`int`[] @kind object;
  #L39d78e.  v1:= length @variable v0;
  #L39d790.  v1:= v1 * 2;
  #L39d794.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L39d79a.  v0:= temp @kind object;
  #L39d79c.  v3.`com.airbnb.lottie.parser.moshi.JsonReader.d` @type ^`int`[] := v0 @kind object;
  #L39d7a0.  goto L39d7d8;
  #L39d7a2.  v4:= new `com.airbnb.lottie.parser.moshi.a`;
  #L39d7a6.  v0:= new `java.lang.StringBuilder`;
  #L39d7aa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39d7b0.  v1:= "Nesting too deep at " @kind object;
  #L39d7b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d7ba.  call temp:= `getPath`(v3) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.getPath:()Ljava/lang/String;` @kind virtual;
  #L39d7c0.  v1:= temp @kind object;
  #L39d7c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d7c8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39d7ce.  v0:= temp @kind object;
  #L39d7d0.  call `<init>`(v4, v0) @signature `Lcom/airbnb/lottie/parser/moshi/a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39d7d6.  throw v4;
  #L39d7d8.  v0:= v3.`com.airbnb.lottie.parser.moshi.JsonReader.b` @type ^`int`[] @kind object;
  #L39d7dc.  v1:= v3.`com.airbnb.lottie.parser.moshi.JsonReader.a` @type ^`int`;
  #L39d7e0.  v2:= v1 + 1;
  #L39d7e4.  v3.`com.airbnb.lottie.parser.moshi.JsonReader.a` @type ^`int` := v2;
  #L39d7e8.  v0[v1]:= v4;
  #L39d7ec.  return @kind void;
}
procedure `void` `beginArray`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.beginArray:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `beginObject`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.beginObject:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.airbnb.lottie.parser.moshi.b` `d`(`com.airbnb.lottie.parser.moshi.JsonReader` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.d:(Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/b;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L39d5b8.  v0:= new `com.airbnb.lottie.parser.moshi.b`;
  #L39d5bc.  v1:= new `java.lang.StringBuilder`;
  #L39d5c0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39d5c6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d5cc.  v3:= " at path " @kind object;
  #L39d5d0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d5d6.  call temp:= `getPath`(v2) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.getPath:()Ljava/lang/String;` @kind virtual;
  #L39d5dc.  v3:= temp @kind object;
  #L39d5de.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39d5e4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39d5ea.  v3:= temp @kind object;
  #L39d5ec.  call `<init>`(v0, v3) @signature `Lcom/airbnb/lottie/parser/moshi/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39d5f2.  throw v0;
}
procedure `void` `endArray`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.endArray:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `endObject`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.endObject:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getPath`(`com.airbnb.lottie.parser.moshi.JsonReader` v4 @kind this) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.getPath:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39d620.  v0:= v4.`com.airbnb.lottie.parser.moshi.JsonReader.a` @type ^`int`;
  #L39d624.  v1:= v4.`com.airbnb.lottie.parser.moshi.JsonReader.b` @type ^`int`[] @kind object;
  #L39d628.  v2:= v4.`com.airbnb.lottie.parser.moshi.JsonReader.c` @type ^`java.lang.String`[] @kind object;
  #L39d62c.  v3:= v4.`com.airbnb.lottie.parser.moshi.JsonReader.d` @type ^`int`[] @kind object;
  #L39d630.  call temp:= `a`(v0, v1, v2, v3) @signature `Lcom/airbnb/lottie/parser/moshi/c;.a:(I[I[Ljava/lang/String;[I)Ljava/lang/String;` @kind static;
  #L39d636.  v0:= temp @kind object;
  #L39d638.  return v0 @kind object;
}
procedure `boolean` `hasNext`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.hasNext:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `nextBoolean`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextBoolean:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `double` `nextDouble`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextDouble:()D` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `nextInt`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextInt:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `nextName`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextName:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `nextString`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.airbnb.lottie.parser.moshi.JsonReader$Token` `peek`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.peek:()Lcom/airbnb/lottie/parser/moshi/JsonReader$Token;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `selectName`(`com.airbnb.lottie.parser.moshi.JsonReader$Options` v0 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.selectName:(Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `skipName`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipName:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `skipValue`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipValue:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
