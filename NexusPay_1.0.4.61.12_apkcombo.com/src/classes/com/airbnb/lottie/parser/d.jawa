record `com.airbnb.lottie.parser.d` @kind class @AccessFlag  {
}
global `com.airbnb.lottie.parser.moshi.JsonReader$Options` `@@com.airbnb.lottie.parser.d.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L399a8c.  v0:= "fFamily" @kind object;
  #L399a90.  v1:= "fName" @kind object;
  #L399a94.  v2:= "fStyle" @kind object;
  #L399a98.  v3:= "ascent" @kind object;
  #L399a9c.  temp:= new `java.lang.String`[v0, v1, v2, v3];
  #L399aa2.  v0:= temp @kind object;
  #L399aa4.  call temp:= `of`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.of:([Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;` @kind static;
  #L399aaa.  v0:= temp @kind object;
  #L399aac.  `@@com.airbnb.lottie.parser.d.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` := v0 @kind object;
  #L399ab0.  return @kind void;
}
procedure `com.airbnb.lottie.model.Font` `a`(`com.airbnb.lottie.parser.moshi.JsonReader` v6 @kind object) @signature `Lcom/airbnb/lottie/parser/d;.a:(Lcom/airbnb/lottie/parser/moshi/JsonReader;)Lcom/airbnb/lottie/model/Font;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3999f4.  call `beginObject`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.beginObject:()V` @kind virtual;
  #L3999fa.  v0:= 0I;
  #L3999fc.  v1:= 0I;
  #L3999fe.  v1:= v0 @kind object;
  #L399a00.  v2:= v1 @kind object;
  #L399a02.  v3:= 0I;
  #L399a04.  call temp:= `hasNext`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.hasNext:()Z` @kind virtual;
  #L399a0a.  v4:= temp;
  #L399a0c.  if v4 == 0 then goto L399a6a;
  #L399a10.  v4:= `@@com.airbnb.lottie.parser.d.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` @kind object;
  #L399a14.  call temp:= `selectName`(v6, v4) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.selectName:(Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;)I` @kind virtual;
  #L399a1a.  v4:= temp;
  #L399a1c.  if v4 == 0 then goto L399a60;
  #L399a20.  v5:= 1I;
  #L399a22.  if v4 == v5 then goto L399a56;
  #L399a26.  v5:= 2I;
  #L399a28.  if v4 == v5 then goto L399a4c;
  #L399a2c.  v5:= 3I;
  #L399a2e.  if v4 == v5 then goto L399a40;
  #L399a32.  call `skipName`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipName:()V` @kind virtual;
  #L399a38.  call `skipValue`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipValue:()V` @kind virtual;
  #L399a3e.  goto L399a04;
  #L399a40.  call temp:= `nextDouble`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextDouble:()D` @kind virtual;
  #L399a46.  v3:= temp @kind wide;
  #L399a48.  v3:= (`float`) v3 @kind d2f;
  #L399a4a.  goto L399a04;
  #L399a4c.  call temp:= `nextString`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L399a52.  v2:= temp @kind object;
  #L399a54.  goto L399a04;
  #L399a56.  call temp:= `nextString`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L399a5c.  v1:= temp @kind object;
  #L399a5e.  goto L399a04;
  #L399a60.  call temp:= `nextString`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L399a66.  v0:= temp @kind object;
  #L399a68.  goto L399a04;
  #L399a6a.  call `endObject`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.endObject:()V` @kind virtual;
  #L399a70.  v6:= new `com.airbnb.lottie.model.Font`;
  #L399a74.  call `<init>`(v6, v0, v1, v2, v3) @signature `Lcom/airbnb/lottie/model/Font;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;F)V` @kind direct;
  #L399a7a.  return v6 @kind object;
}
