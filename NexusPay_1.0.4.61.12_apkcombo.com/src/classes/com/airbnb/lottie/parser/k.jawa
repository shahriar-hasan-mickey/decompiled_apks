record `com.airbnb.lottie.parser.k` @kind class @AccessFlag  {
}
global `com.airbnb.lottie.parser.moshi.JsonReader$Options` `@@com.airbnb.lottie.parser.k.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39c450.  v0:= "nm" @kind object;
  #L39c454.  v1:= "mm" @kind object;
  #L39c458.  v2:= "hd" @kind object;
  #L39c45c.  temp:= new `java.lang.String`[v0, v1, v2];
  #L39c462.  v0:= temp @kind object;
  #L39c464.  call temp:= `of`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.of:([Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;` @kind static;
  #L39c46a.  v0:= temp @kind object;
  #L39c46c.  `@@com.airbnb.lottie.parser.k.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` := v0 @kind object;
  #L39c470.  return @kind void;
}
procedure `com.airbnb.lottie.model.content.MergePaths` `a`(`com.airbnb.lottie.parser.moshi.JsonReader` v5 @kind object) @signature `Lcom/airbnb/lottie/parser/k;.a:(Lcom/airbnb/lottie/parser/moshi/JsonReader;)Lcom/airbnb/lottie/model/content/MergePaths;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39c3d0.  v0:= 0I;
  #L39c3d2.  v1:= 0I;
  #L39c3d4.  v1:= v0 @kind object;
  #L39c3d6.  v2:= 0I;
  #L39c3d8.  call temp:= `hasNext`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.hasNext:()Z` @kind virtual;
  #L39c3de.  v3:= temp;
  #L39c3e0.  if v3 == 0 then goto L39c434;
  #L39c3e4.  v3:= `@@com.airbnb.lottie.parser.k.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` @kind object;
  #L39c3e8.  call temp:= `selectName`(v5, v3) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.selectName:(Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;)I` @kind virtual;
  #L39c3ee.  v3:= temp;
  #L39c3f0.  if v3 == 0 then goto L39c42a;
  #L39c3f4.  v4:= 1I;
  #L39c3f6.  if v3 == v4 then goto L39c418;
  #L39c3fa.  v4:= 2I;
  #L39c3fc.  if v3 == v4 then goto L39c40e;
  #L39c400.  call `skipName`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipName:()V` @kind virtual;
  #L39c406.  call `skipValue`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipValue:()V` @kind virtual;
  #L39c40c.  goto L39c3d8;
  #L39c40e.  call temp:= `nextBoolean`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextBoolean:()Z` @kind virtual;
  #L39c414.  v2:= temp;
  #L39c416.  goto L39c3d8;
  #L39c418.  call temp:= `nextInt`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextInt:()I` @kind virtual;
  #L39c41e.  v1:= temp;
  #L39c420.  call temp:= `forId`(v1) @signature `Lcom/airbnb/lottie/model/content/MergePaths$MergePathsMode;.forId:(I)Lcom/airbnb/lottie/model/content/MergePaths$MergePathsMode;` @kind static;
  #L39c426.  v1:= temp @kind object;
  #L39c428.  goto L39c3d8;
  #L39c42a.  call temp:= `nextString`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L39c430.  v0:= temp @kind object;
  #L39c432.  goto L39c3d8;
  #L39c434.  v5:= new `com.airbnb.lottie.model.content.MergePaths`;
  #L39c438.  call `<init>`(v5, v0, v1, v2) @signature `Lcom/airbnb/lottie/model/content/MergePaths;.<init>:(Ljava/lang/String;Lcom/airbnb/lottie/model/content/MergePaths$MergePathsMode;Z)V` @kind direct;
  #L39c43e.  return v5 @kind object;
}
