record `com.airbnb.lottie.parser.g$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@com.airbnb.lottie.parser.g$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/g$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39a3ac.  call temp:= `values`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Token;.values:()[Lcom/airbnb/lottie/parser/moshi/JsonReader$Token;` @kind static;
  #L39a3b2.  v0:= temp @kind object;
  #L39a3b4.  v0:= length @variable v0;
  #L39a3b6.  v0:= new `int`[v0];
  #L39a3ba.  `@@com.airbnb.lottie.parser.g$a.a` @type ^`int`[] := v0 @kind object;
  #L39a3be.  v1:= `@@com.airbnb.lottie.parser.moshi.JsonReader$Token.NUMBER` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Token` @kind object;
  #L39a3c2.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L39a3c8.  v1:= temp;
  #L39a3ca.  v2:= 1I;
  #L39a3cc.  v0[v1]:= v2;
  #L39a3d0.  v0:= `@@com.airbnb.lottie.parser.g$a.a` @type ^`int`[] @kind object;
  #L39a3d4.  v1:= `@@com.airbnb.lottie.parser.moshi.JsonReader$Token.BEGIN_ARRAY` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Token` @kind object;
  #L39a3d8.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L39a3de.  v1:= temp;
  #L39a3e0.  v2:= 2I;
  #L39a3e2.  v0[v1]:= v2;
  #L39a3e6.  v0:= `@@com.airbnb.lottie.parser.g$a.a` @type ^`int`[] @kind object;
  #L39a3ea.  v1:= `@@com.airbnb.lottie.parser.moshi.JsonReader$Token.BEGIN_OBJECT` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Token` @kind object;
  #L39a3ee.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L39a3f4.  v1:= temp;
  #L39a3f6.  v2:= 3I;
  #L39a3f8.  v0[v1]:= v2;
  #L39a3fc.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L39a3be..L39a3d0] goto L39a3d0;
  catch `java.lang.NoSuchFieldError` @[L39a3d0..L39a3e6] goto L39a3e6;
  catch `java.lang.NoSuchFieldError` @[L39a3e6..L39a3fc] goto L39a3fc;
}
