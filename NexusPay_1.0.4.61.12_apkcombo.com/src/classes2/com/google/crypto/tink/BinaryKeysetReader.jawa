record `com.google.crypto.tink.BinaryKeysetReader` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeysetReader` @kind interface {
  `java.io.InputStream` `com.google.crypto.tink.BinaryKeysetReader.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.crypto.tink.BinaryKeysetReader.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.BinaryKeysetReader` v0 @kind this, `java.io.InputStream` v1 @kind object, `boolean` v2 ) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L423d04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L423d0a.  v0.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L423d0e.  v0.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` := v2 @kind boolean;
  #L423d12.  return @kind void;
}
procedure `com.google.crypto.tink.KeysetReader` `withBytes`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.withBytes:([B)Lcom/google/crypto/tink/KeysetReader;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L423bdc.  v0:= new `com.google.crypto.tink.BinaryKeysetReader`;
  #L423be0.  v1:= new `java.io.ByteArrayInputStream`;
  #L423be4.  call `<init>`(v1, v2) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L423bea.  v2:= 1I;
  #L423bec.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L423bf2.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetReader` `withFile`(`java.io.File` v2 @kind object) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.withFile:(Ljava/io/File;)Lcom/google/crypto/tink/KeysetReader;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L423c04.  v0:= new `com.google.crypto.tink.BinaryKeysetReader`;
  #L423c08.  v1:= new `java.io.FileInputStream`;
  #L423c0c.  call `<init>`(v1, v2) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L423c12.  v2:= 1I;
  #L423c14.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L423c1a.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetReader` `withInputStream`(`java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.withInputStream:(Ljava/io/InputStream;)Lcom/google/crypto/tink/KeysetReader;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L423c2c.  v0:= new `com.google.crypto.tink.BinaryKeysetReader`;
  #L423c30.  v1:= 0I;
  #L423c32.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L423c38.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.Keyset` `read`(`com.google.crypto.tink.BinaryKeysetReader` v2 @kind this) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.read:()Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L423ca8.  v0:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L423cac.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L423cb2.  v1:= temp @kind object;
  #L423cb4.  call temp:= `parseFrom`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:(Ljava/io/InputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L423cba.  v0:= temp @kind object;
  #L423cbc.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L423cc0.  if v1 == 0 then goto L423cce;
  #L423cc4.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L423cc8.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L423cce.  return v0 @kind object;
  #L423cd0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L423cd2.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L423cd6.  if v1 == 0 then goto L423ce4;
  #L423cda.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L423cde.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L423ce4.  throw v0;
  catch `java.lang.Throwable` @[L423ca8..L423cbc] goto L423cd0;
}
procedure `com.google.crypto.tink.proto.EncryptedKeyset` `readEncrypted`(`com.google.crypto.tink.BinaryKeysetReader` v2 @kind this) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.readEncrypted:()Lcom/google/crypto/tink/proto/EncryptedKeyset;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L423c4c.  v0:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L423c50.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L423c56.  v1:= temp @kind object;
  #L423c58.  call temp:= `parseFrom`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.parseFrom:(Ljava/io/InputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/EncryptedKeyset;` @kind static;
  #L423c5e.  v0:= temp @kind object;
  #L423c60.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L423c64.  if v1 == 0 then goto L423c72;
  #L423c68.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L423c6c.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L423c72.  return v0 @kind object;
  #L423c74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L423c76.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L423c7a.  if v1 == 0 then goto L423c88;
  #L423c7e.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L423c82.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L423c88.  throw v0;
  catch `java.lang.Throwable` @[L423c4c..L423c60] goto L423c74;
}
