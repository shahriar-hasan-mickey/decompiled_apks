record `com.google.crypto.tink.KeyTypeManager` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.Class` `com.google.crypto.tink.KeyTypeManager.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.google.crypto.tink.KeyTypeManager.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.google.crypto.tink.KeyTypeManager.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.KeyTypeManager` v5 @kind this, `java.lang.Class` v6 @kind object, `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[] v7 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L425b6c.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L425b72.  v5.`com.google.crypto.tink.KeyTypeManager.a` @type ^`java.lang.Class` := v6 @kind object;
  #L425b76.  v6:= new `java.util.HashMap`;
  #L425b7a.  call `<init>`(v6) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L425b80.  v0:= length @variable v7;
  #L425b82.  v1:= 0I;
  #L425b84.  v2:= 0I;
  #L425b86.  if v2 >= v0 then goto L425bf4;
  #L425b8a.  v3:= v7[v2] @kind object;
  #L425b8e.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L425b94.  v4:= temp @kind object;
  #L425b96.  call temp:= `containsKey`(v6, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L425b9c.  v4:= temp;
  #L425b9e.  if v4 != 0 then goto L425bb6;
  #L425ba2.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L425ba8.  v4:= temp @kind object;
  #L425baa.  call temp:= `put`(v6, v4, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L425bb0.  v2:= v2 + 1;
  #L425bb4.  goto L425b86;
  #L425bb6.  v6:= new `java.lang.IllegalArgumentException`;
  #L425bba.  v7:= new `java.lang.StringBuilder`;
  #L425bbe.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L425bc4.  v0:= "KeyTypeManager constructed with duplicate factories for primitive " @kind object;
  #L425bc8.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425bce.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L425bd4.  v0:= temp @kind object;
  #L425bd6.  call temp:= `getCanonicalName`(v0) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L425bdc.  v0:= temp @kind object;
  #L425bde.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425be4.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L425bea.  v7:= temp @kind object;
  #L425bec.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425bf2.  throw v6;
  #L425bf4.  v0:= length @variable v7;
  #L425bf6.  if v0 <= 0 then goto L425c0c;
  #L425bfa.  v7:= v7[v1] @kind object;
  #L425bfe.  call temp:= `a`(v7) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L425c04.  v7:= temp @kind object;
  #L425c06.  v5.`com.google.crypto.tink.KeyTypeManager.c` @type ^`java.lang.Class` := v7 @kind object;
  #L425c0a.  goto L425c14;
  #L425c0c.  v7:= constclass @type ^`java.lang.Void` @kind object;
  #L425c10.  v5.`com.google.crypto.tink.KeyTypeManager.c` @type ^`java.lang.Class` := v7 @kind object;
  #L425c14.  call temp:= `unmodifiableMap`(v6) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L425c1a.  v6:= temp @kind object;
  #L425c1c.  v5.`com.google.crypto.tink.KeyTypeManager.b` @type ^`java.util.Map` := v6 @kind object;
  #L425c20.  return @kind void;
}
procedure `java.lang.Class` `a`(`com.google.crypto.tink.KeyTypeManager` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.a:()Ljava/lang/Class;` @AccessFlag FINAL {
    temp;
    v0;

  #L425aac.  v0:= v1.`com.google.crypto.tink.KeyTypeManager.c` @type ^`java.lang.Class` @kind object;
  #L425ab0.  return v0 @kind object;
}
procedure `java.lang.Class` `getKeyClass`(`com.google.crypto.tink.KeyTypeManager` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyClass:()Ljava/lang/Class;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L425ac4.  v0:= v1.`com.google.crypto.tink.KeyTypeManager.a` @type ^`java.lang.Class` @kind object;
  #L425ac8.  return v0 @kind object;
}
procedure `java.lang.String` `getKeyType`() @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.KeyTypeManager` v2 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L425adc.  v0:= v2.`com.google.crypto.tink.KeyTypeManager.b` @type ^`java.util.Map` @kind object;
  #L425ae0.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L425ae6.  v0:= temp @kind object;
  #L425ae8.  v0:= (`com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`) v0 @kind object;
  #L425aec.  if v0 == 0 then goto L425afa;
  #L425af0.  call temp:= `getPrimitive`(v0, v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.getPrimitive:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L425af6.  v3:= temp @kind object;
  #L425af8.  return v3 @kind object;
  #L425afa.  v3:= new `java.lang.IllegalArgumentException`;
  #L425afe.  v0:= new `java.lang.StringBuilder`;
  #L425b02.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L425b08.  v1:= "Requested primitive class " @kind object;
  #L425b0c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425b12.  call temp:= `getCanonicalName`(v4) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L425b18.  v4:= temp @kind object;
  #L425b1a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425b20.  v4:= " not supported." @kind object;
  #L425b24.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425b2a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L425b30.  v4:= temp @kind object;
  #L425b32.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425b38.  throw v3;
}
procedure `int` `getVersion`() @signature `Lcom/google/crypto/tink/KeyTypeManager;.getVersion:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.KeyTypeManager` v2 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L425a8c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L425a90.  v1:= "Creating keys is not supported." @kind object;
  #L425a94.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425a9a.  throw v0;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`() @signature `Lcom/google/crypto/tink/KeyTypeManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.shaded.protobuf.ByteString` v0 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Set` `supportedPrimitives`(`com.google.crypto.tink.KeyTypeManager` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.supportedPrimitives:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L425b4c.  v0:= v1.`com.google.crypto.tink.KeyTypeManager.b` @type ^`java.util.Map` @kind object;
  #L425b50.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L425b56.  v0:= temp @kind object;
  #L425b58.  return v0 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.shaded.protobuf.MessageLite` v0 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
