record `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.CodedInputStream` @kind class {
  `java.io.InputStream` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @AccessFlag PRIVATE;
  `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46289c.  v0:= 0I;
  #L46289e.  call `<init>`(v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.<init>:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @kind direct;
  #L4628a4.  v1:= 2147483647I;
  #L4628aa.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v1;
  #L4628ae.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` := v0 @kind object;
  #L4628b2.  v0:= "input" @kind object;
  #L4628b6.  call temp:= `b`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.b:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4628bc.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` := v3 @kind object;
  #L4628c0.  v3:= new `byte`[v4];
  #L4628c4.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] := v3 @kind object;
  #L4628c8.  v3:= 0I;
  #L4628ca.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v3;
  #L4628ce.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L4628d2.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v3;
  #L4628d6.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v0 @kind this, `java.io.InputStream` v1 @kind object, `int` v2 , `com.google.crypto.tink.shaded.protobuf.CodedInputStream$a` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.<init>:(Ljava/io/InputStream;ILcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4628e8.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.<init>:(Ljava/io/InputStream;I)V` @kind direct;
  #L4628ee.  return @kind void;
}
procedure `com.google.crypto.tink.shaded.protobuf.ByteString` `d`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this, `int` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.d:(I)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L461eb0.  call temp:= `f`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.f:(I)[B` @kind direct;
  #L461eb6.  v0:= temp @kind object;
  #L461eb8.  if v0 == 0 then goto L461ec6;
  #L461ebc.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L461ec2.  v6:= temp @kind object;
  #L461ec4.  return v6 @kind object;
  #L461ec6.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461eca.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461ece.  v2:= v1 - v0 @kind int;
  #L461ed2.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461ed6.  v3:= v3 + v1 @kind int;
  #L461ed8.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v3;
  #L461edc.  v1:= 0I;
  #L461ede.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v1;
  #L461ee2.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v1;
  #L461ee6.  v3:= v6 - v2 @kind int;
  #L461eea.  call temp:= `g`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.g:(I)Ljava/util/List;` @kind direct;
  #L461ef0.  v3:= temp @kind object;
  #L461ef2.  v6:= new `byte`[v6];
  #L461ef6.  v4:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461efa.  call `arraycopy`(v4, v0, v6, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461f00.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L461f06.  v0:= temp @kind object;
  #L461f08.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L461f0e.  v3:= temp;
  #L461f10.  if v3 == 0 then goto L461f2e;
  #L461f14.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L461f1a.  v3:= temp @kind object;
  #L461f1c.  v3:= (`byte`[]) v3 @kind object;
  #L461f20.  v4:= length @variable v3;
  #L461f22.  call `arraycopy`(v3, v1, v6, v2, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461f28.  v3:= length @variable v3;
  #L461f2a.  v2:= v2 + v3 @kind int;
  #L461f2c.  goto L461f08;
  #L461f2e.  call temp:= `k`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.k:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L461f34.  v6:= temp @kind object;
  #L461f36.  return v6 @kind object;
}
procedure `byte`[] `e`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461ccc.  call temp:= `f`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.f:(I)[B` @kind direct;
  #L461cd2.  v0:= temp @kind object;
  #L461cd4.  if v0 == 0 then goto L461cec;
  #L461cd8.  if v6 == 0 then goto L461cea;
  #L461cdc.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L461ce2.  v5:= temp @kind object;
  #L461ce4.  v0:= v5 @kind object;
  #L461ce6.  v0:= (`byte`[]) v0 @kind object;
  #L461cea.  return v0 @kind object;
  #L461cec.  v6:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461cf0.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461cf4.  v1:= v0 - v6 @kind int;
  #L461cf8.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461cfc.  v2:= v2 + v0 @kind int;
  #L461cfe.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v2;
  #L461d02.  v0:= 0I;
  #L461d04.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v0;
  #L461d08.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v0;
  #L461d0c.  v2:= v5 - v1 @kind int;
  #L461d10.  call temp:= `g`(v4, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.g:(I)Ljava/util/List;` @kind direct;
  #L461d16.  v2:= temp @kind object;
  #L461d18.  v5:= new `byte`[v5];
  #L461d1c.  v3:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461d20.  call `arraycopy`(v3, v6, v5, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461d26.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L461d2c.  v6:= temp @kind object;
  #L461d2e.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L461d34.  v2:= temp;
  #L461d36.  if v2 == 0 then goto L461d54;
  #L461d3a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L461d40.  v2:= temp @kind object;
  #L461d42.  v2:= (`byte`[]) v2 @kind object;
  #L461d46.  v3:= length @variable v2;
  #L461d48.  call `arraycopy`(v2, v0, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461d4e.  v2:= length @variable v2;
  #L461d50.  v1:= v1 + v2 @kind int;
  #L461d52.  goto L461d2e;
  #L461d54.  return v5 @kind object;
}
procedure `byte`[] `f`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this, `int` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.f:(I)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L461d68.  if v6 != 0 then goto L461d72;
  #L461d6c.  v6:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_ARRAY` @type ^`byte`[] @kind object;
  #L461d70.  return v6 @kind object;
  #L461d72.  if v6 < 0 then goto L461e3c;
  #L461d76.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461d7a.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461d7e.  v2:= v0 + v1 @kind int;
  #L461d82.  v2:= v2 + v6 @kind int;
  #L461d84.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L461d88.  v3:= v2 - v3 @kind int;
  #L461d8c.  if v3 > 0 then goto L461e32;
  #L461d90.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L461d94.  if v2 > v3 then goto L461e1e;
  #L461d98.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461d9c.  v0:= v0 - v1 @kind int;
  #L461d9e.  v1:= v6 - v0 @kind int;
  #L461da2.  v2:= 4096I;
  #L461da6.  if v1 < v2 then goto L461dc0;
  #L461daa.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` @kind object;
  #L461dae.  call temp:= `available`(v2) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L461db4.  v2:= temp;
  #L461db6.  if v1 > v2 then goto L461dbc;
  #L461dba.  goto L461dc0;
  #L461dbc.  v6:= 0I;
  #L461dbe.  return v6 @kind object;
  #L461dc0.  v1:= new `byte`[v6];
  #L461dc4.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461dc8.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461dcc.  v4:= 0I;
  #L461dce.  call `arraycopy`(v2, v3, v1, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461dd4.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461dd8.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461ddc.  v2:= v2 + v3 @kind int;
  #L461dde.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v2;
  #L461de2.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v4;
  #L461de6.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v4;
  #L461dea.  if v0 >= v6 then goto L461e1c;
  #L461dee.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` @kind object;
  #L461df2.  v3:= v6 - v0 @kind int;
  #L461df6.  call temp:= `read`(v2, v1, v0, v3) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L461dfc.  v2:= temp;
  #L461dfe.  v3:= -1I;
  #L461e00.  if v2 == v3 then goto L461e12;
  #L461e04.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461e08.  v3:= v3 + v2 @kind int;
  #L461e0a.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v3;
  #L461e0e.  v0:= v0 + v2 @kind int;
  #L461e10.  goto L461dea;
  #L461e12.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L461e18.  v6:= temp @kind object;
  #L461e1a.  throw v6;
  #L461e1c.  return v1 @kind object;
  #L461e1e.  v3:= v3 - v0 @kind int;
  #L461e20.  v3:= v3 - v1 @kind int;
  #L461e22.  call `skipRawBytes`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L461e28.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L461e2e.  v6:= temp @kind object;
  #L461e30.  throw v6;
  #L461e32.  call temp:= `i`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.i:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L461e38.  v6:= temp @kind object;
  #L461e3a.  throw v6;
  #L461e3c.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L461e42.  v6:= temp @kind object;
  #L461e44.  throw v6;
}
procedure `java.util.List` `g`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v6 @kind this, `int` v7 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.g:(I)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4624ec.  v0:= new `java.util.ArrayList`;
  #L4624f0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4624f6.  if v7 <= 0 then goto L462548;
  #L4624fa.  v1:= 4096I;
  #L4624fe.  call temp:= `min`(v7, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L462504.  v1:= temp;
  #L462506.  v2:= new `byte`[v1];
  #L46250a.  v3:= 0I;
  #L46250c.  if v3 >= v1 then goto L46253e;
  #L462510.  v4:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` @kind object;
  #L462514.  v5:= v1 - v3 @kind int;
  #L462518.  call temp:= `read`(v4, v2, v3, v5) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L46251e.  v4:= temp;
  #L462520.  v5:= -1I;
  #L462522.  if v4 == v5 then goto L462534;
  #L462526.  v5:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L46252a.  v5:= v5 + v4 @kind int;
  #L46252c.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v5;
  #L462530.  v3:= v3 + v4 @kind int;
  #L462532.  goto L46250c;
  #L462534.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L46253a.  v7:= temp @kind object;
  #L46253c.  throw v7;
  #L46253e.  v7:= v7 - v1 @kind int;
  #L462540.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L462546.  goto L4624f6;
  #L462548.  return v0 @kind object;
}
procedure `void` `i`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L462a2c.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L462a30.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L462a34.  v0:= v0 + v1 @kind int;
  #L462a36.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v0;
  #L462a3a.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L462a3e.  v1:= v1 + v0 @kind int;
  #L462a40.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L462a44.  if v1 <= v2 then goto L462a56;
  #L462a48.  v1:= v1 - v2 @kind int;
  #L462a4a.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v1;
  #L462a4e.  v0:= v0 - v1 @kind int;
  #L462a50.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v0;
  #L462a54.  goto L462a5c;
  #L462a56.  v0:= 0I;
  #L462a58.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v0;
  #L462a5c.  return @kind void;
}
procedure `void` `j`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L462a70.  call temp:= `o`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @kind direct;
  #L462a76.  v0:= temp;
  #L462a78.  if v0 != 0 then goto L462aa4;
  #L462a7c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L462a80.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L462a84.  v0:= v0 - v1 @kind int;
  #L462a86.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462a8a.  v0:= v0 - v1 @kind int;
  #L462a8c.  if v3 <= v0 then goto L462a9a;
  #L462a90.  call temp:= `i`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.i:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462a96.  v3:= temp @kind object;
  #L462a98.  throw v3;
  #L462a9a.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462aa0.  v3:= temp @kind object;
  #L462aa2.  throw v3;
  #L462aa4.  return @kind void;
}
procedure `void` `k`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v8 @kind this, `int` v9 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.k:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L462b60.  if v9 < 0 then goto L462c8e;
  #L462b64.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L462b68.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462b6c.  v2:= v0 + v1 @kind int;
  #L462b70.  v2:= v2 + v9 @kind int;
  #L462b72.  v3:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L462b76.  if v2 > v3 then goto L462c7a;
  #L462b7a.  v2:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` @kind object;
  #L462b7e.  v3:= 0I;
  #L462b80.  if v2 != 0 then goto L462c3e;
  #L462b84.  v0:= v0 + v1 @kind int;
  #L462b86.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v0;
  #L462b8a.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L462b8e.  v0:= v0 - v1 @kind int;
  #L462b90.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v3;
  #L462b94.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L462b98.  v3:= v0;
  #L462b9a.  if v3 >= v9 then goto L462c2e;
  #L462b9e.  v0:= v9 - v3 @kind int;
  #L462ba2.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` @kind object;
  #L462ba6.  v4:= (`long`) v0 @kind i2l;
  #L462ba8.  call temp:= `skip`(v1, v4) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L462bae.  v0:= temp @kind wide;
  #L462bb0.  v6:= 0L;
  #L462bb4.  v2:= lcmp(v0, v6);
  #L462bb8.  if v2 < 0 then goto L462bd0;
  #L462bbc.  v6:= lcmp(v0, v4);
  #L462bc0.  if v6 > 0 then goto L462bd0;
  #L462bc4.  if v2 != 0 then goto L462bca;
  #L462bc8.  goto L462c2e;
  #L462bca.  v1:= (`int`) v0 @kind l2i;
  #L462bcc.  v3:= v3 + v1 @kind int;
  #L462bce.  goto L462b9a;
  #L462bd0.  v9:= new `java.lang.IllegalStateException`;
  #L462bd4.  v2:= new `java.lang.StringBuilder`;
  #L462bd8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L462bde.  v4:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` @kind object;
  #L462be2.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L462be8.  v4:= temp @kind object;
  #L462bea.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L462bf0.  v4:= "#skip returned invalid result: " @kind object;
  #L462bf4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L462bfa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L462c00.  v0:= "\nThe InputStream implementation is buggy." @kind object;
  #L462c04.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L462c0a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L462c10.  v0:= temp @kind object;
  #L462c12.  call `<init>`(v9, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L462c18.  throw v9;
  #L462c1a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462c1c.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L462c20.  v0:= v0 + v3 @kind int;
  #L462c22.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v0;
  #L462c26.  call `i`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L462c2c.  throw v9;
  #L462c2e.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L462c32.  v0:= v0 + v3 @kind int;
  #L462c34.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v0;
  #L462c38.  call `i`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L462c3e.  if v3 >= v9 then goto L462c78;
  #L462c42.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L462c46.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462c4a.  v1:= v0 - v1 @kind int;
  #L462c4e.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v0;
  #L462c52.  v0:= 1I;
  #L462c54.  call `j`(v8, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L462c5a.  v2:= v9 - v1 @kind int;
  #L462c5e.  v3:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L462c62.  if v2 <= v3 then goto L462c74;
  #L462c66.  v1:= v1 + v3 @kind int;
  #L462c68.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L462c6c.  call `j`(v8, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L462c72.  goto L462c5a;
  #L462c74.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L462c78.  return @kind void;
  #L462c7a.  v3:= v3 - v0 @kind int;
  #L462c7c.  v3:= v3 - v1 @kind int;
  #L462c7e.  call `skipRawBytes`(v8, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L462c84.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462c8a.  v9:= temp @kind object;
  #L462c8c.  throw v9;
  #L462c8e.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462c94.  v9:= temp @kind object;
  #L462c96.  throw v9;
  catch `java.lang.Throwable` @[L462ba2..L462c1a] goto L462c1a;
}
procedure `void` `l`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L462cb4.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L462cb8.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462cbc.  v0:= v0 - v1 @kind int;
  #L462cbe.  v1:= 10I;
  #L462cc2.  if v0 < v1 then goto L462cce;
  #L462cc6.  call `m`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.m:()V` @kind direct;
  #L462ccc.  goto L462cd4;
  #L462cce.  call `n`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.n:()V` @kind direct;
  #L462cd4.  return @kind void;
}
procedure `void` `m`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.m:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L462ce8.  v0:= 0I;
  #L462cea.  v1:= 10I;
  #L462cee.  if v0 >= v1 then goto L462d12;
  #L462cf2.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L462cf6.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462cfa.  v3:= v2 + 1;
  #L462cfe.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L462d02.  v1:= v1[v2] @kind byte;
  #L462d06.  if v1 < 0 then goto L462d0c;
  #L462d0a.  return @kind void;
  #L462d0c.  v0:= v0 + 1;
  #L462d10.  goto L462cea;
  #L462d12.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462d18.  v0:= temp @kind object;
  #L462d1a.  throw v0;
}
procedure `void` `n`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L462d2c.  v0:= 0I;
  #L462d2e.  v1:= 10I;
  #L462d32.  if v0 >= v1 then goto L462d4a;
  #L462d36.  call temp:= `readRawByte`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawByte:()B` @kind virtual;
  #L462d3c.  v1:= temp;
  #L462d3e.  if v1 < 0 then goto L462d44;
  #L462d42.  return @kind void;
  #L462d44.  v0:= v0 + 1;
  #L462d48.  goto L462d2e;
  #L462d4a.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462d50.  v0:= temp @kind object;
  #L462d52.  throw v0;
}
procedure `boolean` `o`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v7 @kind this, `int` v8 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L461a84.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461a88.  v1:= v0 + v8 @kind int;
  #L461a8c.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461a90.  if v1 <= v2 then goto L461bae;
  #L461a94.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L461a98.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461a9c.  v1:= v1 - v2 @kind int;
  #L461a9e.  v1:= v1 - v0 @kind int;
  #L461aa0.  v3:= 0I;
  #L461aa2.  if v8 <= v1 then goto L461aa8;
  #L461aa6.  return v3;
  #L461aa8.  v2:= v2 + v0 @kind int;
  #L461aaa.  v2:= v2 + v8 @kind int;
  #L461aac.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L461ab0.  if v2 <= v0 then goto L461ab6;
  #L461ab4.  return v3;
  #L461ab6.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` @kind object;
  #L461aba.  if v0 == 0 then goto L461ac4;
  #L461abe.  call `a`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d$a;.a:()V` @kind interface;
  #L461ac4.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461ac8.  if v0 <= 0 then goto L461af8;
  #L461acc.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461ad0.  if v1 <= v0 then goto L461ae0;
  #L461ad4.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461ad8.  v1:= v1 - v0 @kind int;
  #L461ada.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L461ae0.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461ae4.  v1:= v1 + v0 @kind int;
  #L461ae6.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v1;
  #L461aea.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461aee.  v1:= v1 - v0 @kind int;
  #L461af0.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v1;
  #L461af4.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L461af8.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` @kind object;
  #L461afc.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461b00.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461b04.  v4:= length @variable v1;
  #L461b06.  v4:= v4 - v2 @kind int;
  #L461b08.  v5:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L461b0c.  v6:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L461b10.  v5:= v5 - v6 @kind int;
  #L461b12.  v5:= v5 - v2 @kind int;
  #L461b14.  call temp:= `min`(v4, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L461b1a.  v4:= temp;
  #L461b1c.  call temp:= `read`(v0, v1, v2, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L461b22.  v0:= temp;
  #L461b24.  if v0 == 0 then goto L461b64;
  #L461b28.  v1:= -1I;
  #L461b2a.  if v0 < v1 then goto L461b64;
  #L461b2e.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461b32.  v1:= length @variable v1;
  #L461b34.  if v0 > v1 then goto L461b64;
  #L461b38.  if v0 <= 0 then goto L461b62;
  #L461b3c.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461b40.  v1:= v1 + v0 @kind int;
  #L461b42.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int` := v1;
  #L461b46.  call `i`(v7) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L461b4c.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461b50.  if v0 < v8 then goto L461b58;
  #L461b54.  v8:= 1I;
  #L461b56.  goto L461b60;
  #L461b58.  call temp:= `o`(v7, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @kind direct;
  #L461b5e.  v8:= temp;
  #L461b60.  return v8;
  #L461b62.  return v3;
  #L461b64.  v8:= new `java.lang.IllegalStateException`;
  #L461b68.  v1:= new `java.lang.StringBuilder`;
  #L461b6c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L461b72.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.e` @type ^`java.io.InputStream` @kind object;
  #L461b76.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L461b7c.  v2:= temp @kind object;
  #L461b7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461b84.  v2:= "#read(byte[]) returned invalid result: " @kind object;
  #L461b88.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461b8e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L461b94.  v0:= "\nThe InputStream implementation is buggy." @kind object;
  #L461b98.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461b9e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L461ba4.  v0:= temp @kind object;
  #L461ba6.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461bac.  throw v8;
  #L461bae.  v0:= new `java.lang.IllegalStateException`;
  #L461bb2.  v1:= new `java.lang.StringBuilder`;
  #L461bb6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L461bbc.  v2:= "refillBuffer() called when " @kind object;
  #L461bc0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461bc6.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L461bcc.  v8:= " bytes were already available in buffer" @kind object;
  #L461bd0.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L461bd6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L461bdc.  v8:= temp @kind object;
  #L461bde.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L461be4.  throw v0;
}
procedure `void` `checkLastTagWas`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462900.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L462904.  if v0 != v2 then goto L46290a;
  #L462908.  return @kind void;
  #L46290a.  call temp:= `a`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.a:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462910.  v2:= temp @kind object;
  #L462912.  throw v2;
}
procedure `void` `enableAliasing`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.enableAliasing:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L462924.  return @kind void;
}
procedure `int` `getBytesUntilLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.getBytesUntilLimit:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L462054.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L462058.  v1:= 2147483647I;
  #L46205e.  if v0 != v1 then goto L462066;
  #L462062.  v0:= -1I;
  #L462064.  return v0;
  #L462066.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L46206a.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L46206e.  v1:= v1 + v2 @kind int;
  #L462070.  v0:= v0 - v1 @kind int;
  #L462072.  return v0;
}
procedure `int` `getLastTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.getLastTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462084.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L462088.  return v0;
}
procedure `int` `getTotalBytesRead`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.getTotalBytesRead:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46209c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L4620a0.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4620a4.  v0:= v0 + v1 @kind int;
  #L4620a6.  return v0;
}
procedure `long` `h`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v6 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.h:()J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4627f4.  v0:= 0L;
  #L4627f8.  v2:= 0I;
  #L4627fa.  v3:= 64I;
  #L4627fe.  if v2 >= v3 then goto L462824;
  #L462802.  call temp:= `readRawByte`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawByte:()B` @kind virtual;
  #L462808.  v3:= temp;
  #L46280a.  v4:= v3 ^& 127;
  #L46280e.  v4:= (`long`) v4 @kind i2l;
  #L462810.  v4:= v4 ^< v2 @kind long;
  #L462812.  v0:= v0 ^| v4 @kind long;
  #L462814.  v3:= v3 ^& 128;
  #L462818.  if v3 != 0 then goto L46281e;
  #L46281c.  return v0 @kind wide;
  #L46281e.  v2:= v2 + 7;
  #L462822.  goto L4627fa;
  #L462824.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L46282a.  v0:= temp @kind object;
  #L46282c.  throw v0;
}
procedure `boolean` `isAtEnd`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.isAtEnd:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4618c8.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4618cc.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L4618d0.  v2:= 1I;
  #L4618d2.  if v0 != v1 then goto L4618e4;
  #L4618d6.  call temp:= `o`(v3, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @kind direct;
  #L4618dc.  v0:= temp;
  #L4618de.  if v0 != 0 then goto L4618e4;
  #L4618e2.  goto L4618e6;
  #L4618e4.  v2:= 0I;
  #L4618e6.  return v2;
}
procedure `void` `popLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.popLimit:(I)V` @AccessFlag PUBLIC {
    temp;

  #L462938.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v1;
  #L46293c.  call `i`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L462942.  return @kind void;
}
procedure `int` `pushLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.pushLimit:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4620b8.  if v3 < 0 then goto L4620e6;
  #L4620bc.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L4620c0.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4620c4.  v0:= v0 + v1 @kind int;
  #L4620c6.  v3:= v3 + v0 @kind int;
  #L4620c8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L4620cc.  if v3 > v0 then goto L4620dc;
  #L4620d0.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v3;
  #L4620d4.  call `i`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L4620da.  return v0;
  #L4620dc.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4620e2.  v3:= temp @kind object;
  #L4620e4.  throw v3;
  #L4620e6.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4620ec.  v3:= temp @kind object;
  #L4620ee.  throw v3;
}
procedure `boolean` `readBool`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readBool:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4618f8.  call temp:= `readRawVarint64`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L4618fe.  v0:= temp @kind wide;
  #L461900.  v2:= 0L;
  #L461904.  v4:= lcmp(v0, v2);
  #L461908.  if v4 == 0 then goto L461910;
  #L46190c.  v0:= 1I;
  #L46190e.  goto L461912;
  #L461910.  v0:= 0I;
  #L461912.  return v0;
}
procedure `byte`[] `readByteArray`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461c34.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L461c3a.  v0:= temp;
  #L461c3c.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461c40.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461c44.  v1:= v1 - v2 @kind int;
  #L461c46.  if v0 > v1 then goto L461c6a;
  #L461c4a.  if v0 <= 0 then goto L461c6a;
  #L461c4e.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461c52.  v3:= v2 + v0 @kind int;
  #L461c56.  call temp:= `copyOfRange`(v1, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L461c5c.  v1:= temp @kind object;
  #L461c5e.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461c62.  v2:= v2 + v0 @kind int;
  #L461c64.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L461c68.  return v1 @kind object;
  #L461c6a.  v1:= 0I;
  #L461c6c.  call temp:= `e`(v4, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L461c72.  v0:= temp @kind object;
  #L461c74.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `readByteBuffer`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L462480.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L462486.  v0:= temp;
  #L462488.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L46248c.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462490.  v1:= v1 - v2 @kind int;
  #L462492.  if v0 > v1 then goto L4624be;
  #L462496.  if v0 <= 0 then goto L4624be;
  #L46249a.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L46249e.  v3:= v2 + v0 @kind int;
  #L4624a2.  call temp:= `copyOfRange`(v1, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L4624a8.  v1:= temp @kind object;
  #L4624aa.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L4624b0.  v1:= temp @kind object;
  #L4624b2.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4624b6.  v2:= v2 + v0 @kind int;
  #L4624b8.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L4624bc.  return v1 @kind object;
  #L4624be.  if v0 != 0 then goto L4624c8;
  #L4624c2.  v0:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_BUFFER` @type ^`java.nio.ByteBuffer` @kind object;
  #L4624c6.  return v0 @kind object;
  #L4624c8.  v1:= 1I;
  #L4624ca.  call temp:= `e`(v4, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L4624d0.  v0:= temp @kind object;
  #L4624d2.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L4624d8.  v0:= temp @kind object;
  #L4624da.  return v0 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.ByteString` `readBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461e58.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L461e5e.  v0:= temp;
  #L461e60.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461e64.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461e68.  v1:= v1 - v2 @kind int;
  #L461e6a.  if v0 > v1 then goto L461e8a;
  #L461e6e.  if v0 <= 0 then goto L461e8a;
  #L461e72.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461e76.  call temp:= `copyFrom`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([BII)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L461e7c.  v1:= temp @kind object;
  #L461e7e.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461e82.  v2:= v2 + v0 @kind int;
  #L461e84.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L461e88.  return v1 @kind object;
  #L461e8a.  if v0 != 0 then goto L461e94;
  #L461e8e.  v0:= `@@com.google.crypto.tink.shaded.protobuf.ByteString.EMPTY` @type ^`com.google.crypto.tink.shaded.protobuf.ByteString` @kind object;
  #L461e92.  return v0 @kind object;
  #L461e94.  call temp:= `d`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.d:(I)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind direct;
  #L461e9a.  v0:= temp @kind object;
  #L461e9c.  return v0 @kind object;
}
procedure `double` `readDouble`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46200c.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L462012.  v0:= temp @kind wide;
  #L462014.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L46201a.  v0:= temp @kind wide;
  #L46201c.  return v0 @kind wide;
}
procedure `int` `readEnum`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readEnum:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462100.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L462106.  v0:= temp;
  #L462108.  return v0;
}
procedure `int` `readFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46211c.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L462122.  v0:= temp;
  #L462124.  return v0;
}
procedure `long` `readFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46255c.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L462562.  v0:= temp @kind wide;
  #L462564.  return v0 @kind wide;
}
procedure `float` `readFloat`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462030.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L462036.  v0:= temp;
  #L462038.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L46203e.  v0:= temp;
  #L462040.  return v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461f48.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L461f4c.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L461f50.  if v0 >= v1 then goto L461f86;
  #L461f54.  v0:= v0 + 1;
  #L461f58.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L461f5c.  call temp:= `parsePartialFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L461f62.  v4:= temp @kind object;
  #L461f64.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L461f68.  v5:= 4I;
  #L461f6a.  call temp:= `a`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L461f70.  v3:= temp;
  #L461f72.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L461f78.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L461f7c.  v3:= v3 + -1;
  #L461f80.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L461f84.  return v4 @kind object;
  #L461f86.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L461f8c.  v3:= temp @kind object;
  #L461f8e.  throw v3;
}
procedure `void` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462954.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L462958.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L46295c.  if v0 >= v1 then goto L46298c;
  #L462960.  v0:= v0 + 1;
  #L462964.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L462968.  call temp:= `mergeFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L46296e.  v4:= 4I;
  #L462970.  call temp:= `a`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L462976.  v3:= temp;
  #L462978.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L46297e.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L462982.  v3:= v3 + -1;
  #L462986.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L46298a.  return @kind void;
  #L46298c.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L462992.  v3:= temp @kind object;
  #L462994.  throw v3;
}
procedure `int` `readInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462138.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L46213e.  v0:= temp;
  #L462140.  return v0;
}
procedure `long` `readInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462578.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L46257e.  v0:= temp @kind wide;
  #L462580.  return v0 @kind wide;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461fa0.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L461fa6.  v0:= temp;
  #L461fa8.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L461fac.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L461fb0.  if v1 >= v2 then goto L461ff0;
  #L461fb4.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.pushLimit:(I)I` @kind virtual;
  #L461fba.  v0:= temp;
  #L461fbc.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L461fc0.  v1:= v1 + 1;
  #L461fc4.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L461fc8.  call temp:= `parsePartialFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L461fce.  v4:= temp @kind object;
  #L461fd0.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L461fd4.  v5:= 0I;
  #L461fd6.  call `checkLastTagWas`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L461fdc.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L461fe0.  v5:= v5 + -1;
  #L461fe4.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v5;
  #L461fe8.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.popLimit:(I)V` @kind virtual;
  #L461fee.  return v4 @kind object;
  #L461ff0.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L461ff6.  v4:= temp @kind object;
  #L461ff8.  throw v4;
}
procedure `void` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4629a8.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L4629ae.  v0:= temp;
  #L4629b0.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L4629b4.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L4629b8.  if v1 >= v2 then goto L4629f2;
  #L4629bc.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.pushLimit:(I)I` @kind virtual;
  #L4629c2.  v0:= temp;
  #L4629c4.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L4629c8.  v1:= v1 + 1;
  #L4629cc.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L4629d0.  call temp:= `mergeFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L4629d6.  v4:= 0I;
  #L4629d8.  call `checkLastTagWas`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L4629de.  v4:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L4629e2.  v4:= v4 + -1;
  #L4629e6.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v4;
  #L4629ea.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.popLimit:(I)V` @kind virtual;
  #L4629f0.  return @kind void;
  #L4629f2.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4629f8.  v4:= temp @kind object;
  #L4629fa.  throw v4;
}
procedure `byte` `readRawByte`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461bf8.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461bfc.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461c00.  if v0 != v1 then goto L461c0c;
  #L461c04.  v0:= 1I;
  #L461c06.  call `j`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L461c0c.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461c10.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461c14.  v2:= v1 + 1;
  #L461c18.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L461c1c.  v0:= v0[v1] @kind byte;
  #L461c20.  return v0;
}
procedure `byte`[] `readRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461c88.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L461c8c.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L461c90.  v1:= v1 - v0 @kind int;
  #L461c92.  if v3 > v1 then goto L461cae;
  #L461c96.  if v3 <= 0 then goto L461cae;
  #L461c9a.  v3:= v3 + v0 @kind int;
  #L461c9c.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L461ca0.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L461ca4.  call temp:= `copyOfRange`(v1, v0, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L461caa.  v3:= temp @kind object;
  #L461cac.  return v3 @kind object;
  #L461cae.  v0:= 0I;
  #L461cb0.  call temp:= `e`(v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L461cb6.  v3:= temp @kind object;
  #L461cb8.  return v3 @kind object;
}
procedure `int` `readRawLittleEndian32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L462154.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462158.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L46215c.  v1:= v1 - v0 @kind int;
  #L46215e.  v2:= 4I;
  #L462160.  if v1 >= v2 then goto L46216e;
  #L462164.  call `j`(v4, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L46216a.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L46216e.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L462172.  v2:= v0 + 4;
  #L462176.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L46217a.  v2:= v1[v0] @kind byte;
  #L46217e.  v2:= v2 ^& 255;
  #L462182.  v3:= v0 + 1;
  #L462186.  v3:= v1[v3] @kind byte;
  #L46218a.  v3:= v3 ^& 255;
  #L46218e.  v3:= v3 ^< 8;
  #L462192.  v2:= v2 ^| v3 @kind int;
  #L462194.  v3:= v0 + 2;
  #L462198.  v3:= v1[v3] @kind byte;
  #L46219c.  v3:= v3 ^& 255;
  #L4621a0.  v3:= v3 ^< 16;
  #L4621a4.  v2:= v2 ^| v3 @kind int;
  #L4621a6.  v0:= v0 + 3;
  #L4621aa.  v0:= v1[v0] @kind byte;
  #L4621ae.  v0:= v0 ^& 255;
  #L4621b2.  v0:= v0 ^< 24;
  #L4621b6.  v0:= v0 ^| v2 @kind int;
  #L4621b8.  return v0;
}
procedure `long` `readRawLittleEndian64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v9 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L462594.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462598.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L46259c.  v1:= v1 - v0 @kind int;
  #L46259e.  v2:= 8I;
  #L4625a2.  if v1 >= v2 then goto L4625b0;
  #L4625a6.  call `j`(v9, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L4625ac.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4625b0.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L4625b4.  v3:= v0 + 8;
  #L4625b8.  v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L4625bc.  v3:= v1[v0] @kind byte;
  #L4625c0.  v3:= (`long`) v3 @kind i2l;
  #L4625c2.  v5:= 255L;
  #L4625c6.  v3:= v3 ^& v5 @kind long;
  #L4625c8.  v7:= v0 + 1;
  #L4625cc.  v7:= v1[v7] @kind byte;
  #L4625d0.  v7:= (`long`) v7 @kind i2l;
  #L4625d2.  v7:= v7 ^& v5 @kind long;
  #L4625d4.  v7:= v7 ^< v2 @kind long;
  #L4625d6.  v2:= v3 ^| v7 @kind long;
  #L4625da.  v4:= v0 + 2;
  #L4625de.  v4:= v1[v4] @kind byte;
  #L4625e2.  v7:= (`long`) v4 @kind i2l;
  #L4625e4.  v7:= v7 ^& v5 @kind long;
  #L4625e6.  v4:= 16I;
  #L4625ea.  v7:= v7 ^< v4 @kind long;
  #L4625ec.  v2:= v2 ^| v7 @kind long;
  #L4625ee.  v4:= v0 + 3;
  #L4625f2.  v4:= v1[v4] @kind byte;
  #L4625f6.  v7:= (`long`) v4 @kind i2l;
  #L4625f8.  v7:= v7 ^& v5 @kind long;
  #L4625fa.  v4:= 24I;
  #L4625fe.  v7:= v7 ^< v4 @kind long;
  #L462600.  v2:= v2 ^| v7 @kind long;
  #L462602.  v4:= v0 + 4;
  #L462606.  v4:= v1[v4] @kind byte;
  #L46260a.  v7:= (`long`) v4 @kind i2l;
  #L46260c.  v7:= v7 ^& v5 @kind long;
  #L46260e.  v4:= 32I;
  #L462612.  v7:= v7 ^< v4 @kind long;
  #L462614.  v2:= v2 ^| v7 @kind long;
  #L462616.  v4:= v0 + 5;
  #L46261a.  v4:= v1[v4] @kind byte;
  #L46261e.  v7:= (`long`) v4 @kind i2l;
  #L462620.  v7:= v7 ^& v5 @kind long;
  #L462622.  v4:= 40I;
  #L462626.  v7:= v7 ^< v4 @kind long;
  #L462628.  v2:= v2 ^| v7 @kind long;
  #L46262a.  v4:= v0 + 6;
  #L46262e.  v4:= v1[v4] @kind byte;
  #L462632.  v7:= (`long`) v4 @kind i2l;
  #L462634.  v7:= v7 ^& v5 @kind long;
  #L462636.  v4:= 48I;
  #L46263a.  v7:= v7 ^< v4 @kind long;
  #L46263c.  v2:= v2 ^| v7 @kind long;
  #L46263e.  v0:= v0 + 7;
  #L462642.  v0:= v1[v0] @kind byte;
  #L462646.  v0:= (`long`) v0 @kind i2l;
  #L462648.  v0:= v0 ^& v5 @kind long;
  #L46264a.  v4:= 56I;
  #L46264e.  v0:= v0 ^< v4 @kind long;
  #L462650.  v0:= v0 ^| v2 @kind long;
  #L462652.  return v0 @kind wide;
}
procedure `int` `readRawVarint32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4621cc.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4621d0.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L4621d4.  if v1 != v0 then goto L4621da;
  #L4621d8.  goto L4622a0;
  #L4621da.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L4621de.  v3:= v0 + 1;
  #L4621e2.  v0:= v2[v0] @kind byte;
  #L4621e6.  if v0 < 0 then goto L4621f0;
  #L4621ea.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L4621ee.  return v0;
  #L4621f0.  v1:= v1 - v3 @kind int;
  #L4621f2.  v4:= 9I;
  #L4621f6.  if v1 >= v4 then goto L4621fc;
  #L4621fa.  goto L4622a0;
  #L4621fc.  v1:= v3 + 1;
  #L462200.  v3:= v2[v3] @kind byte;
  #L462204.  v3:= v3 ^< 7;
  #L462208.  v0:= v0 ^~ v3 @kind int;
  #L46220a.  if v0 >= 0 then goto L462214;
  #L46220e.  v0:= v0 ^~ -128;
  #L462212.  goto L4622ac;
  #L462214.  v3:= v1 + 1;
  #L462218.  v1:= v2[v1] @kind byte;
  #L46221c.  v1:= v1 ^< 14;
  #L462220.  v0:= v0 ^~ v1 @kind int;
  #L462222.  if v0 < 0 then goto L46222e;
  #L462226.  v0:= v0 ^~ 16256;
  #L46222a.  v1:= v3;
  #L46222c.  goto L4622ac;
  #L46222e.  v1:= v3 + 1;
  #L462232.  v3:= v2[v3] @kind byte;
  #L462236.  v3:= v3 ^< 21;
  #L46223a.  v0:= v0 ^~ v3 @kind int;
  #L46223c.  if v0 >= 0 then goto L46224a;
  #L462240.  v2:= -2080896I;
  #L462246.  v0:= v0 ^~ v2 @kind int;
  #L462248.  goto L4622ac;
  #L46224a.  v3:= v1 + 1;
  #L46224e.  v1:= v2[v1] @kind byte;
  #L462252.  v4:= v1 ^< 28;
  #L462256.  v0:= v0 ^~ v4 @kind int;
  #L462258.  v4:= 266354560I;
  #L46225e.  v0:= v0 ^~ v4 @kind int;
  #L462260.  if v1 >= 0 then goto L46222a;
  #L462264.  v1:= v3 + 1;
  #L462268.  v3:= v2[v3] @kind byte;
  #L46226c.  if v3 >= 0 then goto L4622ac;
  #L462270.  v3:= v1 + 1;
  #L462274.  v1:= v2[v1] @kind byte;
  #L462278.  if v1 >= 0 then goto L46222a;
  #L46227c.  v1:= v3 + 1;
  #L462280.  v3:= v2[v3] @kind byte;
  #L462284.  if v3 >= 0 then goto L4622ac;
  #L462288.  v3:= v1 + 1;
  #L46228c.  v1:= v2[v1] @kind byte;
  #L462290.  if v1 >= 0 then goto L46222a;
  #L462294.  v1:= v3 + 1;
  #L462298.  v2:= v2[v3] @kind byte;
  #L46229c.  if v2 >= 0 then goto L4622ac;
  #L4622a0.  call temp:= `h`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.h:()J` @kind virtual;
  #L4622a6.  v0:= temp @kind wide;
  #L4622a8.  v1:= (`int`) v0 @kind l2i;
  #L4622aa.  return v1;
  #L4622ac.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v1;
  #L4622b0.  return v0;
}
procedure `long` `readRawVarint64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v11 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L462664.  v0:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462668.  v1:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L46266c.  if v1 != v0 then goto L462674;
  #L462670.  goto L4627d0;
  #L462674.  v2:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L462678.  v3:= v0 + 1;
  #L46267c.  v0:= v2[v0] @kind byte;
  #L462680.  if v0 < 0 then goto L46268c;
  #L462684.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L462688.  v0:= (`long`) v0 @kind i2l;
  #L46268a.  return v0 @kind wide;
  #L46268c.  v1:= v1 - v3 @kind int;
  #L46268e.  v4:= 9I;
  #L462692.  if v1 >= v4 then goto L46269a;
  #L462696.  goto L4627d0;
  #L46269a.  v1:= v3 + 1;
  #L46269e.  v3:= v2[v3] @kind byte;
  #L4626a2.  v3:= v3 ^< 7;
  #L4626a6.  v0:= v0 ^~ v3 @kind int;
  #L4626a8.  if v0 >= 0 then goto L4626b6;
  #L4626ac.  v0:= v0 ^~ -128;
  #L4626b0.  v2:= (`long`) v0 @kind i2l;
  #L4626b2.  goto L4627de;
  #L4626b6.  v3:= v1 + 1;
  #L4626ba.  v1:= v2[v1] @kind byte;
  #L4626be.  v1:= v1 ^< 14;
  #L4626c2.  v0:= v0 ^~ v1 @kind int;
  #L4626c4.  if v0 < 0 then goto L4626d8;
  #L4626c8.  v0:= v0 ^~ 16256;
  #L4626cc.  v0:= (`long`) v0 @kind i2l;
  #L4626ce.  v9:= v0 @kind wide;
  #L4626d0.  v1:= v3;
  #L4626d2.  v2:= v9 @kind wide;
  #L4626d4.  goto L4627de;
  #L4626d8.  v1:= v3 + 1;
  #L4626dc.  v3:= v2[v3] @kind byte;
  #L4626e0.  v3:= v3 ^< 21;
  #L4626e4.  v0:= v0 ^~ v3 @kind int;
  #L4626e6.  if v0 >= 0 then goto L4626f4;
  #L4626ea.  v2:= -2080896I;
  #L4626f0.  v0:= v0 ^~ v2 @kind int;
  #L4626f2.  goto L4626b0;
  #L4626f4.  v3:= (`long`) v0 @kind i2l;
  #L4626f6.  v0:= v1 + 1;
  #L4626fa.  v1:= v2[v1] @kind byte;
  #L4626fe.  v5:= (`long`) v1 @kind i2l;
  #L462700.  v1:= 28I;
  #L462704.  v5:= v5 ^< v1 @kind long;
  #L462706.  v3:= v3 ^~ v5 @kind long;
  #L462708.  v5:= 0L;
  #L46270c.  v1:= lcmp(v3, v5);
  #L462710.  if v1 < 0 then goto L462722;
  #L462714.  v1:= 266354560L;
  #L46271a.  v2:= v3 ^~ v1 @kind long;
  #L46271e.  v1:= v0;
  #L462720.  goto L4627de;
  #L462722.  v1:= v0 + 1;
  #L462726.  v0:= v2[v0] @kind byte;
  #L46272a.  v7:= (`long`) v0 @kind i2l;
  #L46272c.  v0:= 35I;
  #L462730.  v7:= v7 ^< v0 @kind long;
  #L462732.  v3:= v3 ^~ v7 @kind long;
  #L462734.  v0:= lcmp(v3, v5);
  #L462738.  if v0 >= 0 then goto L46274c;
  #L46273c.  v5:= -34093383808L;
  #L462746.  v2:= v3 ^~ v5 @kind long;
  #L46274a.  goto L4627de;
  #L46274c.  v0:= v1 + 1;
  #L462750.  v1:= v2[v1] @kind byte;
  #L462754.  v7:= (`long`) v1 @kind i2l;
  #L462756.  v1:= 42I;
  #L46275a.  v7:= v7 ^< v1 @kind long;
  #L46275c.  v3:= v3 ^~ v7 @kind long;
  #L46275e.  v1:= lcmp(v3, v5);
  #L462762.  if v1 < 0 then goto L462772;
  #L462766.  v1:= 4363953127296L;
  #L462770.  goto L46271a;
  #L462772.  v1:= v0 + 1;
  #L462776.  v0:= v2[v0] @kind byte;
  #L46277a.  v7:= (`long`) v0 @kind i2l;
  #L46277c.  v0:= 49I;
  #L462780.  v7:= v7 ^< v0 @kind long;
  #L462782.  v3:= v3 ^~ v7 @kind long;
  #L462784.  v0:= lcmp(v3, v5);
  #L462788.  if v0 >= 0 then goto L462798;
  #L46278c.  v5:= -558586000294016L;
  #L462796.  goto L462746;
  #L462798.  v0:= v1 + 1;
  #L46279c.  v1:= v2[v1] @kind byte;
  #L4627a0.  v7:= (`long`) v1 @kind i2l;
  #L4627a2.  v1:= 56I;
  #L4627a6.  v7:= v7 ^< v1 @kind long;
  #L4627a8.  v3:= v3 ^~ v7 @kind long;
  #L4627aa.  v7:= 71499008037633920L;
  #L4627b4.  v3:= v3 ^~ v7 @kind long;
  #L4627b6.  v1:= lcmp(v3, v5);
  #L4627ba.  if v1 >= 0 then goto L4627da;
  #L4627be.  v1:= v0 + 1;
  #L4627c2.  v0:= v2[v0] @kind byte;
  #L4627c6.  v7:= (`long`) v0 @kind i2l;
  #L4627c8.  v0:= lcmp(v7, v5);
  #L4627cc.  if v0 >= 0 then goto L4627dc;
  #L4627d0.  call temp:= `h`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.h:()J` @kind virtual;
  #L4627d6.  v0:= temp @kind wide;
  #L4627d8.  return v0 @kind wide;
  #L4627da.  v1:= v0;
  #L4627dc.  v2:= v3 @kind wide;
  #L4627de.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v1;
  #L4627e2.  return v2 @kind wide;
}
procedure `int` `readSFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4622c4.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L4622ca.  v0:= temp;
  #L4622cc.  return v0;
}
procedure `long` `readSFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462840.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L462846.  v0:= temp @kind wide;
  #L462848.  return v0 @kind wide;
}
procedure `int` `readSInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4622e0.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L4622e6.  v0:= temp;
  #L4622e8.  call temp:= `decodeZigZag32`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag32:(I)I` @kind static;
  #L4622ee.  v0:= temp;
  #L4622f0.  return v0;
}
procedure `long` `readSInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46285c.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L462862.  v0:= temp @kind wide;
  #L462864.  call temp:= `decodeZigZag64`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag64:(J)J` @kind static;
  #L46286a.  v0:= temp @kind wide;
  #L46286c.  return v0 @kind wide;
}
procedure `java.lang.String` `readString`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46236c.  call temp:= `readRawVarint32`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L462372.  v0:= temp;
  #L462374.  if v0 <= 0 then goto L4623a8;
  #L462378.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L46237c.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462380.  v1:= v1 - v2 @kind int;
  #L462382.  if v0 > v1 then goto L4623a8;
  #L462386.  v1:= new `java.lang.String`;
  #L46238a.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L46238e.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462392.  v4:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L462396.  call `<init>`(v1, v2, v3, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L46239c.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4623a0.  v2:= v2 + v0 @kind int;
  #L4623a2.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L4623a6.  return v1 @kind object;
  #L4623a8.  if v0 != 0 then goto L4623b2;
  #L4623ac.  v0:= "" @kind object;
  #L4623b0.  return v0 @kind object;
  #L4623b2.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L4623b6.  if v0 > v1 then goto L4623e2;
  #L4623ba.  call `j`(v5, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L4623c0.  v1:= new `java.lang.String`;
  #L4623c4.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L4623c8.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4623cc.  v4:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L4623d0.  call `<init>`(v1, v2, v3, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L4623d6.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L4623da.  v2:= v2 + v0 @kind int;
  #L4623dc.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v2;
  #L4623e0.  return v1 @kind object;
  #L4623e2.  v1:= new `java.lang.String`;
  #L4623e6.  v2:= 0I;
  #L4623e8.  call temp:= `e`(v5, v0, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L4623ee.  v0:= temp @kind object;
  #L4623f0.  v2:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L4623f4.  call `<init>`(v1, v0, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L4623fa.  return v1 @kind object;
}
procedure `java.lang.String` `readStringRequireUtf8`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readStringRequireUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46240c.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L462412.  v0:= temp;
  #L462414.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462418.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L46241c.  v2:= v2 - v1 @kind int;
  #L46241e.  v3:= 0I;
  #L462420.  if v0 > v2 then goto L462436;
  #L462424.  if v0 <= 0 then goto L462436;
  #L462428.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L46242c.  v3:= v1 + v0 @kind int;
  #L462430.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v3;
  #L462434.  goto L462466;
  #L462436.  if v0 != 0 then goto L462440;
  #L46243a.  v0:= "" @kind object;
  #L46243e.  return v0 @kind object;
  #L462440.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L462444.  if v0 > v1 then goto L46245c;
  #L462448.  call `j`(v4, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L46244e.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`byte`[] @kind object;
  #L462452.  v1:= v0 + 0;
  #L462456.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v1;
  #L46245a.  goto L462464;
  #L46245c.  call temp:= `e`(v4, v0, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L462462.  v2:= temp @kind object;
  #L462464.  v1:= 0I;
  #L462466.  call temp:= `h`(v2, v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/u0;.h:([BII)Ljava/lang/String;` @kind static;
  #L46246c.  v0:= temp @kind object;
  #L46246e.  return v0 @kind object;
}
procedure `int` `readTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462304.  call temp:= `isAtEnd`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.isAtEnd:()Z` @kind virtual;
  #L46230a.  v0:= temp;
  #L46230c.  if v0 == 0 then goto L462318;
  #L462310.  v0:= 0I;
  #L462312.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v0;
  #L462316.  return v0;
  #L462318.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L46231e.  v0:= temp;
  #L462320.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v0;
  #L462324.  call temp:= `getTagFieldNumber`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L46232a.  v0:= temp;
  #L46232c.  if v0 == 0 then goto L462336;
  #L462330.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L462334.  return v0;
  #L462336.  call temp:= `b`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.b:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L46233c.  v0:= temp @kind object;
  #L46233e.  throw v0;
}
procedure `int` `readUInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readUInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462350.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L462356.  v0:= temp;
  #L462358.  return v0;
}
procedure `long` `readUInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readUInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462880.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L462886.  v0:= temp @kind wide;
  #L462888.  return v0 @kind wide;
}
procedure `void` `readUnknownGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this, `int` v2 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readUnknownGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462a0c.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L462a12.  v0:= temp @kind object;
  #L462a14.  call `readGroup`(v1, v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @kind virtual;
  #L462a1a.  return @kind void;
}
procedure `void` `resetSizeCounter`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.resetSizeCounter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462ab8.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462abc.  v0:= -v0 @kind int;
  #L462abe.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v0;
  #L462ac2.  return @kind void;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461924.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L46192a.  v0:= temp;
  #L46192c.  v1:= 1I;
  #L46192e.  if v0 == 0 then goto L46199e;
  #L461932.  if v0 == v1 then goto L461992;
  #L461936.  v2:= 2I;
  #L461938.  if v0 == v2 then goto L461982;
  #L46193c.  v2:= 3I;
  #L46193e.  v3:= 4I;
  #L461940.  if v0 == v2 then goto L461964;
  #L461944.  if v0 == v3 then goto L461960;
  #L461948.  v5:= 5I;
  #L46194a.  if v0 != v5 then goto L461956;
  #L46194e.  call `skipRawBytes`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L461954.  return v1;
  #L461956.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L46195c.  v5:= temp @kind object;
  #L46195e.  throw v5;
  #L461960.  v5:= 0I;
  #L461962.  return v5;
  #L461964.  call `skipMessage`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:()V` @kind virtual;
  #L46196a.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L461970.  v5:= temp;
  #L461972.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L461978.  v5:= temp;
  #L46197a.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L461980.  return v1;
  #L461982.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L461988.  v5:= temp;
  #L46198a.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L461990.  return v1;
  #L461992.  v5:= 8I;
  #L461996.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L46199c.  return v1;
  #L46199e.  call `l`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.l:()V` @kind direct;
  #L4619a4.  return v1;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this, `int` v5 , `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4619b8.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L4619be.  v0:= temp;
  #L4619c0.  v1:= 1I;
  #L4619c2.  if v0 == 0 then goto L461a5c;
  #L4619c6.  if v0 == v1 then goto L461a46;
  #L4619ca.  v2:= 2I;
  #L4619cc.  if v0 == v2 then goto L461a30;
  #L4619d0.  v2:= 3I;
  #L4619d2.  v3:= 4I;
  #L4619d4.  if v0 == v2 then goto L461a06;
  #L4619d8.  if v0 == v3 then goto L461a02;
  #L4619dc.  v2:= 5I;
  #L4619de.  if v0 != v2 then goto L4619f8;
  #L4619e2.  call temp:= `readRawLittleEndian32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L4619e8.  v0:= temp;
  #L4619ea.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L4619f0.  call `writeFixed32NoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed32NoTag:(I)V` @kind virtual;
  #L4619f6.  return v1;
  #L4619f8.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L4619fe.  v5:= temp @kind object;
  #L461a00.  throw v5;
  #L461a02.  v5:= 0I;
  #L461a04.  return v5;
  #L461a06.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L461a0c.  call `skipMessage`(v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @kind virtual;
  #L461a12.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L461a18.  v5:= temp;
  #L461a1a.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L461a20.  v5:= temp;
  #L461a22.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L461a28.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L461a2e.  return v1;
  #L461a30.  call temp:= `readBytes`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L461a36.  v0:= temp @kind object;
  #L461a38.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L461a3e.  call `writeBytesNoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeBytesNoTag:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)V` @kind virtual;
  #L461a44.  return v1;
  #L461a46.  call temp:= `readRawLittleEndian64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L461a4c.  v2:= temp @kind wide;
  #L461a4e.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L461a54.  call `writeFixed64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed64NoTag:(J)V` @kind virtual;
  #L461a5a.  return v1;
  #L461a5c.  call temp:= `readInt64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readInt64:()J` @kind virtual;
  #L461a62.  v2:= temp @kind wide;
  #L461a64.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L461a6a.  call `writeUInt64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeUInt64NoTag:(J)V` @kind virtual;
  #L461a70.  return v1;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462ad4.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readTag:()I` @kind virtual;
  #L462ada.  v0:= temp;
  #L462adc.  if v0 == 0 then goto L462aec;
  #L462ae0.  call temp:= `skipField`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(I)Z` @kind virtual;
  #L462ae6.  v0:= temp;
  #L462ae8.  if v0 != 0 then goto L462ad4;
  #L462aec.  return @kind void;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462b00.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readTag:()I` @kind virtual;
  #L462b06.  v0:= temp;
  #L462b08.  if v0 == 0 then goto L462b18;
  #L462b0c.  call temp:= `skipField`(v1, v0, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @kind virtual;
  #L462b12.  v0:= temp;
  #L462b14.  if v0 != 0 then goto L462b00;
  #L462b18.  return @kind void;
}
procedure `void` `skipRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462b2c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`int`;
  #L462b30.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L462b34.  v0:= v0 - v1 @kind int;
  #L462b36.  if v3 > v0 then goto L462b46;
  #L462b3a.  if v3 < 0 then goto L462b46;
  #L462b3e.  v1:= v1 + v3 @kind int;
  #L462b40.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v1;
  #L462b44.  goto L462b4c;
  #L462b46.  call `k`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.k:(I)V` @kind direct;
  #L462b4c.  return @kind void;
}
