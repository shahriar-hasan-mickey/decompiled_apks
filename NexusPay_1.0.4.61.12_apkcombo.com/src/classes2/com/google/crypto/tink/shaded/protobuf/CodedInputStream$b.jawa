record `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.CodedInputStream` @kind class {
  `byte`[] `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.<init>:([BIIZ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L460170.  v0:= 0I;
  #L460172.  call `<init>`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.<init>:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @kind direct;
  #L460178.  v0:= 2147483647I;
  #L46017e.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`int` := v0;
  #L460182.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] := v2 @kind object;
  #L460186.  v4:= v4 + v3 @kind int;
  #L460188.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int` := v4;
  #L46018c.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v3;
  #L460190.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v3;
  #L460194.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`boolean` := v5 @kind boolean;
  #L460198.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `com.google.crypto.tink.shaded.protobuf.CodedInputStream$a` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.<init>:([BIIZLcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4601ac.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.<init>:([BIIZ)V` @kind direct;
  #L4601b2.  return @kind void;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4602f4.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L4602f8.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int`;
  #L4602fc.  v0:= v0 + v1 @kind int;
  #L4602fe.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int` := v0;
  #L460302.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L460306.  v1:= v0 - v1 @kind int;
  #L46030a.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`int`;
  #L46030e.  if v1 <= v2 then goto L460320;
  #L460312.  v1:= v1 - v2 @kind int;
  #L460314.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int` := v1;
  #L460318.  v0:= v0 - v1 @kind int;
  #L46031a.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int` := v0;
  #L46031e.  goto L460326;
  #L460320.  v0:= 0I;
  #L460322.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.h` @type ^`int` := v0;
  #L460326.  return @kind void;
}
procedure `void` `f`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4603f0.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L4603f4.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L4603f8.  v0:= v0 - v1 @kind int;
  #L4603fa.  v1:= 10I;
  #L4603fe.  if v0 < v1 then goto L46040a;
  #L460402.  call `g`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.g:()V` @kind direct;
  #L460408.  goto L460410;
  #L46040a.  call `h`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.h:()V` @kind direct;
  #L460410.  return @kind void;
}
procedure `void` `g`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L460424.  v0:= 0I;
  #L460426.  v1:= 10I;
  #L46042a.  if v0 >= v1 then goto L46044e;
  #L46042e.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L460432.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L460436.  v3:= v2 + 1;
  #L46043a.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v3;
  #L46043e.  v1:= v1[v2] @kind byte;
  #L460442.  if v1 < 0 then goto L460448;
  #L460446.  return @kind void;
  #L460448.  v0:= v0 + 1;
  #L46044c.  goto L460426;
  #L46044e.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L460454.  v0:= temp @kind object;
  #L460456.  throw v0;
}
procedure `void` `h`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L460468.  v0:= 0I;
  #L46046a.  v1:= 10I;
  #L46046e.  if v0 >= v1 then goto L460486;
  #L460472.  call temp:= `readRawByte`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawByte:()B` @kind virtual;
  #L460478.  v1:= temp;
  #L46047a.  if v1 < 0 then goto L460480;
  #L46047e.  return @kind void;
  #L460480.  v0:= v0 + 1;
  #L460484.  goto L46046a;
  #L460486.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L46048c.  v0:= temp @kind object;
  #L46048e.  throw v0;
}
procedure `void` `checkLastTagWas`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4601c4.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int`;
  #L4601c8.  if v0 != v2 then goto L4601ce;
  #L4601cc.  return @kind void;
  #L4601ce.  call temp:= `a`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.a:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4601d4.  v2:= temp @kind object;
  #L4601d6.  throw v2;
}
procedure `long` `d`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v6 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.d:()J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4600c8.  v0:= 0L;
  #L4600cc.  v2:= 0I;
  #L4600ce.  v3:= 64I;
  #L4600d2.  if v2 >= v3 then goto L4600f8;
  #L4600d6.  call temp:= `readRawByte`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawByte:()B` @kind virtual;
  #L4600dc.  v3:= temp;
  #L4600de.  v4:= v3 ^& 127;
  #L4600e2.  v4:= (`long`) v4 @kind i2l;
  #L4600e4.  v4:= v4 ^< v2 @kind long;
  #L4600e6.  v0:= v0 ^| v4 @kind long;
  #L4600e8.  v3:= v3 ^& 128;
  #L4600ec.  if v3 != 0 then goto L4600f2;
  #L4600f0.  return v0 @kind wide;
  #L4600f2.  v2:= v2 + 7;
  #L4600f6.  goto L4600ce;
  #L4600f8.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4600fe.  v0:= temp @kind object;
  #L460100.  throw v0;
}
procedure `void` `enableAliasing`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.enableAliasing:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L4601e8.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`boolean` := v1 @kind boolean;
  #L4601ec.  return @kind void;
}
procedure `int` `getBytesUntilLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getBytesUntilLimit:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f9a8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`int`;
  #L45f9ac.  v1:= 2147483647I;
  #L45f9b2.  if v0 != v1 then goto L45f9ba;
  #L45f9b6.  v0:= -1I;
  #L45f9b8.  return v0;
  #L45f9ba.  call temp:= `getTotalBytesRead`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getTotalBytesRead:()I` @kind virtual;
  #L45f9c0.  v1:= temp;
  #L45f9c2.  v0:= v0 - v1 @kind int;
  #L45f9c4.  return v0;
}
procedure `int` `getLastTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getLastTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f9d8.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int`;
  #L45f9dc.  return v0;
}
procedure `int` `getTotalBytesRead`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getTotalBytesRead:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f9f0.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45f9f4.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int`;
  #L45f9f8.  v0:= v0 - v1 @kind int;
  #L45f9fa.  return v0;
}
procedure `boolean` `isAtEnd`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.isAtEnd:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f5b8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45f5bc.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45f5c0.  if v0 != v1 then goto L45f5c8;
  #L45f5c4.  v0:= 1I;
  #L45f5c6.  goto L45f5ca;
  #L45f5c8.  v0:= 0I;
  #L45f5ca.  return v0;
}
procedure `void` `popLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.popLimit:(I)V` @AccessFlag PUBLIC {
    temp;

  #L460200.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`int` := v1;
  #L460204.  call `e`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.e:()V` @kind direct;
  #L46020a.  return @kind void;
}
procedure `int` `pushLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.pushLimit:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa0c.  if v2 < 0 then goto L45fa38;
  #L45fa10.  call temp:= `getTotalBytesRead`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.getTotalBytesRead:()I` @kind virtual;
  #L45fa16.  v0:= temp;
  #L45fa18.  v2:= v2 + v0 @kind int;
  #L45fa1a.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`int`;
  #L45fa1e.  if v2 > v0 then goto L45fa2e;
  #L45fa22.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.m` @type ^`int` := v2;
  #L45fa26.  call `e`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.e:()V` @kind direct;
  #L45fa2c.  return v0;
  #L45fa2e.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fa34.  v2:= temp @kind object;
  #L45fa36.  throw v2;
  #L45fa38.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fa3e.  v2:= temp @kind object;
  #L45fa40.  throw v2;
}
procedure `boolean` `readBool`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readBool:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45f5dc.  call temp:= `readRawVarint64`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L45f5e2.  v0:= temp @kind wide;
  #L45f5e4.  v2:= 0L;
  #L45f5e8.  v4:= lcmp(v0, v2);
  #L45f5ec.  if v4 == 0 then goto L45f5f4;
  #L45f5f0.  v0:= 1I;
  #L45f5f2.  goto L45f5f6;
  #L45f5f4.  v0:= 0I;
  #L45f5f6.  return v0;
}
procedure `byte`[] `readByteArray`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f7a0.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45f7a6.  v0:= temp;
  #L45f7a8.  call temp:= `readRawBytes`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawBytes:(I)[B` @kind virtual;
  #L45f7ae.  v0:= temp @kind object;
  #L45f7b0.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `readByteBuffer`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fd94.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fd9a.  v0:= temp;
  #L45fd9c.  if v0 <= 0 then goto L45fdfc;
  #L45fda0.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45fda4.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fda8.  v1:= v1 - v2 @kind int;
  #L45fdaa.  if v0 > v1 then goto L45fdfc;
  #L45fdae.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`boolean` @kind boolean;
  #L45fdb2.  if v1 != 0 then goto L45fdd4;
  #L45fdb6.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`boolean` @kind boolean;
  #L45fdba.  if v1 == 0 then goto L45fdd4;
  #L45fdbe.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45fdc2.  call temp:= `wrap`(v1, v2, v0) @signature `Ljava/nio/ByteBuffer;.wrap:([BII)Ljava/nio/ByteBuffer;` @kind static;
  #L45fdc8.  v1:= temp @kind object;
  #L45fdca.  call temp:= `slice`(v1) @signature `Ljava/nio/ByteBuffer;.slice:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L45fdd0.  v1:= temp @kind object;
  #L45fdd2.  goto L45fdf0;
  #L45fdd4.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45fdd8.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fddc.  v3:= v2 + v0 @kind int;
  #L45fde0.  call temp:= `copyOfRange`(v1, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L45fde6.  v1:= temp @kind object;
  #L45fde8.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L45fdee.  v1:= temp @kind object;
  #L45fdf0.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fdf4.  v2:= v2 + v0 @kind int;
  #L45fdf6.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v2;
  #L45fdfa.  return v1 @kind object;
  #L45fdfc.  if v0 != 0 then goto L45fe06;
  #L45fe00.  v0:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_BUFFER` @type ^`java.nio.ByteBuffer` @kind object;
  #L45fe04.  return v0 @kind object;
  #L45fe06.  if v0 >= 0 then goto L45fe14;
  #L45fe0a.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fe10.  v0:= temp @kind object;
  #L45fe12.  throw v0;
  #L45fe14.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fe1a.  v0:= temp @kind object;
  #L45fe1c.  throw v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.ByteString` `readBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f81c.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45f822.  v0:= temp;
  #L45f824.  if v0 <= 0 then goto L45f870;
  #L45f828.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45f82c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45f830.  v1:= v1 - v2 @kind int;
  #L45f832.  if v0 > v1 then goto L45f870;
  #L45f836.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.f` @type ^`boolean` @kind boolean;
  #L45f83a.  if v1 == 0 then goto L45f854;
  #L45f83e.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.l` @type ^`boolean` @kind boolean;
  #L45f842.  if v1 == 0 then goto L45f854;
  #L45f846.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45f84a.  call temp:= `l`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.l:([BII)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L45f850.  v1:= temp @kind object;
  #L45f852.  goto L45f864;
  #L45f854.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45f858.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45f85c.  call temp:= `copyFrom`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([BII)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L45f862.  v1:= temp @kind object;
  #L45f864.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45f868.  v2:= v2 + v0 @kind int;
  #L45f86a.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v2;
  #L45f86e.  return v1 @kind object;
  #L45f870.  if v0 != 0 then goto L45f87a;
  #L45f874.  v0:= `@@com.google.crypto.tink.shaded.protobuf.ByteString.EMPTY` @type ^`com.google.crypto.tink.shaded.protobuf.ByteString` @kind object;
  #L45f878.  return v0 @kind object;
  #L45f87a.  call temp:= `readRawBytes`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawBytes:(I)[B` @kind virtual;
  #L45f880.  v0:= temp @kind object;
  #L45f882.  call temp:= `k`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.k:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L45f888.  v0:= temp @kind object;
  #L45f88a.  return v0 @kind object;
}
procedure `double` `readDouble`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f960.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L45f966.  v0:= temp @kind wide;
  #L45f968.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L45f96e.  v0:= temp @kind wide;
  #L45f970.  return v0 @kind wide;
}
procedure `int` `readEnum`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readEnum:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa54.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fa5a.  v0:= temp;
  #L45fa5c.  return v0;
}
procedure `int` `readFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa70.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L45fa76.  v0:= temp;
  #L45fa78.  return v0;
}
procedure `long` `readFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fe30.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L45fe36.  v0:= temp @kind wide;
  #L45fe38.  return v0 @kind wide;
}
procedure `float` `readFloat`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f984.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L45f98a.  v0:= temp;
  #L45f98c.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L45f992.  v0:= temp;
  #L45f994.  return v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f89c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L45f8a0.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L45f8a4.  if v0 >= v1 then goto L45f8da;
  #L45f8a8.  v0:= v0 + 1;
  #L45f8ac.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L45f8b0.  call temp:= `parsePartialFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L45f8b6.  v4:= temp @kind object;
  #L45f8b8.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L45f8bc.  v5:= 4I;
  #L45f8be.  call temp:= `a`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L45f8c4.  v3:= temp;
  #L45f8c6.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L45f8cc.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L45f8d0.  v3:= v3 + -1;
  #L45f8d4.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L45f8d8.  return v4 @kind object;
  #L45f8da.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45f8e0.  v3:= temp @kind object;
  #L45f8e2.  throw v3;
}
procedure `void` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46021c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L460220.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L460224.  if v0 >= v1 then goto L460254;
  #L460228.  v0:= v0 + 1;
  #L46022c.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L460230.  call temp:= `mergeFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L460236.  v4:= 4I;
  #L460238.  call temp:= `a`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L46023e.  v3:= temp;
  #L460240.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L460246.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L46024a.  v3:= v3 + -1;
  #L46024e.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L460252.  return @kind void;
  #L460254.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L46025a.  v3:= temp @kind object;
  #L46025c.  throw v3;
}
procedure `int` `readInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fa8c.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fa92.  v0:= temp;
  #L45fa94.  return v0;
}
procedure `long` `readInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fe4c.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L45fe52.  v0:= temp @kind wide;
  #L45fe54.  return v0 @kind wide;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f8f4.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45f8fa.  v0:= temp;
  #L45f8fc.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L45f900.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L45f904.  if v1 >= v2 then goto L45f944;
  #L45f908.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.pushLimit:(I)I` @kind virtual;
  #L45f90e.  v0:= temp;
  #L45f910.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L45f914.  v1:= v1 + 1;
  #L45f918.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L45f91c.  call temp:= `parsePartialFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L45f922.  v4:= temp @kind object;
  #L45f924.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L45f928.  v5:= 0I;
  #L45f92a.  call `checkLastTagWas`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L45f930.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L45f934.  v5:= v5 + -1;
  #L45f938.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v5;
  #L45f93c.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.popLimit:(I)V` @kind virtual;
  #L45f942.  return v4 @kind object;
  #L45f944.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45f94a.  v4:= temp @kind object;
  #L45f94c.  throw v4;
}
procedure `void` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L460270.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L460276.  v0:= temp;
  #L460278.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L46027c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L460280.  if v1 >= v2 then goto L4602ba;
  #L460284.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.pushLimit:(I)I` @kind virtual;
  #L46028a.  v0:= temp;
  #L46028c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L460290.  v1:= v1 + 1;
  #L460294.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L460298.  call temp:= `mergeFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L46029e.  v4:= 0I;
  #L4602a0.  call `checkLastTagWas`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L4602a6.  v4:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L4602aa.  v4:= v4 + -1;
  #L4602ae.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v4;
  #L4602b2.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.popLimit:(I)V` @kind virtual;
  #L4602b8.  return @kind void;
  #L4602ba.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4602c0.  v4:= temp @kind object;
  #L4602c2.  throw v4;
}
procedure `byte` `readRawByte`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f768.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45f76c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45f770.  if v0 == v1 then goto L45f786;
  #L45f774.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45f778.  v2:= v0 + 1;
  #L45f77c.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v2;
  #L45f780.  v0:= v1[v0] @kind byte;
  #L45f784.  return v0;
  #L45f786.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45f78c.  v0:= temp @kind object;
  #L45f78e.  throw v0;
}
procedure `byte`[] `readRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f7c4.  if v3 <= 0 then goto L45f7ea;
  #L45f7c8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45f7cc.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45f7d0.  v0:= v0 - v1 @kind int;
  #L45f7d2.  if v3 > v0 then goto L45f7ea;
  #L45f7d6.  v3:= v3 + v1 @kind int;
  #L45f7d8.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v3;
  #L45f7dc.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45f7e0.  call temp:= `copyOfRange`(v0, v1, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L45f7e6.  v3:= temp @kind object;
  #L45f7e8.  return v3 @kind object;
  #L45f7ea.  if v3 > 0 then goto L45f802;
  #L45f7ee.  if v3 != 0 then goto L45f7f8;
  #L45f7f2.  v3:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_ARRAY` @type ^`byte`[] @kind object;
  #L45f7f6.  return v3 @kind object;
  #L45f7f8.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45f7fe.  v3:= temp @kind object;
  #L45f800.  throw v3;
  #L45f802.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45f808.  v3:= temp @kind object;
  #L45f80a.  throw v3;
}
procedure `int` `readRawLittleEndian32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45faa8.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45faac.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45fab0.  v1:= v1 - v0 @kind int;
  #L45fab2.  v2:= 4I;
  #L45fab4.  if v1 < v2 then goto L45fb04;
  #L45fab8.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45fabc.  v2:= v0 + 4;
  #L45fac0.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v2;
  #L45fac4.  v2:= v1[v0] @kind byte;
  #L45fac8.  v2:= v2 ^& 255;
  #L45facc.  v3:= v0 + 1;
  #L45fad0.  v3:= v1[v3] @kind byte;
  #L45fad4.  v3:= v3 ^& 255;
  #L45fad8.  v3:= v3 ^< 8;
  #L45fadc.  v2:= v2 ^| v3 @kind int;
  #L45fade.  v3:= v0 + 2;
  #L45fae2.  v3:= v1[v3] @kind byte;
  #L45fae6.  v3:= v3 ^& 255;
  #L45faea.  v3:= v3 ^< 16;
  #L45faee.  v2:= v2 ^| v3 @kind int;
  #L45faf0.  v0:= v0 + 3;
  #L45faf4.  v0:= v1[v0] @kind byte;
  #L45faf8.  v0:= v0 ^& 255;
  #L45fafc.  v0:= v0 ^< 24;
  #L45fb00.  v0:= v0 ^| v2 @kind int;
  #L45fb02.  return v0;
  #L45fb04.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fb0a.  v0:= temp @kind object;
  #L45fb0c.  throw v0;
}
procedure `long` `readRawLittleEndian64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v9 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L45fe68.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fe6c.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45fe70.  v1:= v1 - v0 @kind int;
  #L45fe72.  v2:= 8I;
  #L45fe76.  if v1 < v2 then goto L45ff1e;
  #L45fe7a.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45fe7e.  v3:= v0 + 8;
  #L45fe82.  v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v3;
  #L45fe86.  v3:= v1[v0] @kind byte;
  #L45fe8a.  v3:= (`long`) v3 @kind i2l;
  #L45fe8c.  v5:= 255L;
  #L45fe90.  v3:= v3 ^& v5 @kind long;
  #L45fe92.  v7:= v0 + 1;
  #L45fe96.  v7:= v1[v7] @kind byte;
  #L45fe9a.  v7:= (`long`) v7 @kind i2l;
  #L45fe9c.  v7:= v7 ^& v5 @kind long;
  #L45fe9e.  v7:= v7 ^< v2 @kind long;
  #L45fea0.  v2:= v3 ^| v7 @kind long;
  #L45fea4.  v4:= v0 + 2;
  #L45fea8.  v4:= v1[v4] @kind byte;
  #L45feac.  v7:= (`long`) v4 @kind i2l;
  #L45feae.  v7:= v7 ^& v5 @kind long;
  #L45feb0.  v4:= 16I;
  #L45feb4.  v7:= v7 ^< v4 @kind long;
  #L45feb6.  v2:= v2 ^| v7 @kind long;
  #L45feb8.  v4:= v0 + 3;
  #L45febc.  v4:= v1[v4] @kind byte;
  #L45fec0.  v7:= (`long`) v4 @kind i2l;
  #L45fec2.  v7:= v7 ^& v5 @kind long;
  #L45fec4.  v4:= 24I;
  #L45fec8.  v7:= v7 ^< v4 @kind long;
  #L45feca.  v2:= v2 ^| v7 @kind long;
  #L45fecc.  v4:= v0 + 4;
  #L45fed0.  v4:= v1[v4] @kind byte;
  #L45fed4.  v7:= (`long`) v4 @kind i2l;
  #L45fed6.  v7:= v7 ^& v5 @kind long;
  #L45fed8.  v4:= 32I;
  #L45fedc.  v7:= v7 ^< v4 @kind long;
  #L45fede.  v2:= v2 ^| v7 @kind long;
  #L45fee0.  v4:= v0 + 5;
  #L45fee4.  v4:= v1[v4] @kind byte;
  #L45fee8.  v7:= (`long`) v4 @kind i2l;
  #L45feea.  v7:= v7 ^& v5 @kind long;
  #L45feec.  v4:= 40I;
  #L45fef0.  v7:= v7 ^< v4 @kind long;
  #L45fef2.  v2:= v2 ^| v7 @kind long;
  #L45fef4.  v4:= v0 + 6;
  #L45fef8.  v4:= v1[v4] @kind byte;
  #L45fefc.  v7:= (`long`) v4 @kind i2l;
  #L45fefe.  v7:= v7 ^& v5 @kind long;
  #L45ff00.  v4:= 48I;
  #L45ff04.  v7:= v7 ^< v4 @kind long;
  #L45ff06.  v2:= v2 ^| v7 @kind long;
  #L45ff08.  v0:= v0 + 7;
  #L45ff0c.  v0:= v1[v0] @kind byte;
  #L45ff10.  v0:= (`long`) v0 @kind i2l;
  #L45ff12.  v0:= v0 ^& v5 @kind long;
  #L45ff14.  v4:= 56I;
  #L45ff18.  v0:= v0 ^< v4 @kind long;
  #L45ff1a.  v0:= v0 ^| v2 @kind long;
  #L45ff1c.  return v0 @kind wide;
  #L45ff1e.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45ff24.  v0:= temp @kind object;
  #L45ff26.  throw v0;
}
procedure `int` `readRawVarint32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45fb20.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fb24.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45fb28.  if v1 != v0 then goto L45fb2e;
  #L45fb2c.  goto L45fbf4;
  #L45fb2e.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45fb32.  v3:= v0 + 1;
  #L45fb36.  v0:= v2[v0] @kind byte;
  #L45fb3a.  if v0 < 0 then goto L45fb44;
  #L45fb3e.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v3;
  #L45fb42.  return v0;
  #L45fb44.  v1:= v1 - v3 @kind int;
  #L45fb46.  v4:= 9I;
  #L45fb4a.  if v1 >= v4 then goto L45fb50;
  #L45fb4e.  goto L45fbf4;
  #L45fb50.  v1:= v3 + 1;
  #L45fb54.  v3:= v2[v3] @kind byte;
  #L45fb58.  v3:= v3 ^< 7;
  #L45fb5c.  v0:= v0 ^~ v3 @kind int;
  #L45fb5e.  if v0 >= 0 then goto L45fb68;
  #L45fb62.  v0:= v0 ^~ -128;
  #L45fb66.  goto L45fc00;
  #L45fb68.  v3:= v1 + 1;
  #L45fb6c.  v1:= v2[v1] @kind byte;
  #L45fb70.  v1:= v1 ^< 14;
  #L45fb74.  v0:= v0 ^~ v1 @kind int;
  #L45fb76.  if v0 < 0 then goto L45fb82;
  #L45fb7a.  v0:= v0 ^~ 16256;
  #L45fb7e.  v1:= v3;
  #L45fb80.  goto L45fc00;
  #L45fb82.  v1:= v3 + 1;
  #L45fb86.  v3:= v2[v3] @kind byte;
  #L45fb8a.  v3:= v3 ^< 21;
  #L45fb8e.  v0:= v0 ^~ v3 @kind int;
  #L45fb90.  if v0 >= 0 then goto L45fb9e;
  #L45fb94.  v2:= -2080896I;
  #L45fb9a.  v0:= v0 ^~ v2 @kind int;
  #L45fb9c.  goto L45fc00;
  #L45fb9e.  v3:= v1 + 1;
  #L45fba2.  v1:= v2[v1] @kind byte;
  #L45fba6.  v4:= v1 ^< 28;
  #L45fbaa.  v0:= v0 ^~ v4 @kind int;
  #L45fbac.  v4:= 266354560I;
  #L45fbb2.  v0:= v0 ^~ v4 @kind int;
  #L45fbb4.  if v1 >= 0 then goto L45fb7e;
  #L45fbb8.  v1:= v3 + 1;
  #L45fbbc.  v3:= v2[v3] @kind byte;
  #L45fbc0.  if v3 >= 0 then goto L45fc00;
  #L45fbc4.  v3:= v1 + 1;
  #L45fbc8.  v1:= v2[v1] @kind byte;
  #L45fbcc.  if v1 >= 0 then goto L45fb7e;
  #L45fbd0.  v1:= v3 + 1;
  #L45fbd4.  v3:= v2[v3] @kind byte;
  #L45fbd8.  if v3 >= 0 then goto L45fc00;
  #L45fbdc.  v3:= v1 + 1;
  #L45fbe0.  v1:= v2[v1] @kind byte;
  #L45fbe4.  if v1 >= 0 then goto L45fb7e;
  #L45fbe8.  v1:= v3 + 1;
  #L45fbec.  v2:= v2[v3] @kind byte;
  #L45fbf0.  if v2 >= 0 then goto L45fc00;
  #L45fbf4.  call temp:= `d`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.d:()J` @kind virtual;
  #L45fbfa.  v0:= temp @kind wide;
  #L45fbfc.  v1:= (`int`) v0 @kind l2i;
  #L45fbfe.  return v1;
  #L45fc00.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v1;
  #L45fc04.  return v0;
}
procedure `long` `readRawVarint64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v11 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L45ff38.  v0:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45ff3c.  v1:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45ff40.  if v1 != v0 then goto L45ff48;
  #L45ff44.  goto L4600a4;
  #L45ff48.  v2:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45ff4c.  v3:= v0 + 1;
  #L45ff50.  v0:= v2[v0] @kind byte;
  #L45ff54.  if v0 < 0 then goto L45ff60;
  #L45ff58.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v3;
  #L45ff5c.  v0:= (`long`) v0 @kind i2l;
  #L45ff5e.  return v0 @kind wide;
  #L45ff60.  v1:= v1 - v3 @kind int;
  #L45ff62.  v4:= 9I;
  #L45ff66.  if v1 >= v4 then goto L45ff6e;
  #L45ff6a.  goto L4600a4;
  #L45ff6e.  v1:= v3 + 1;
  #L45ff72.  v3:= v2[v3] @kind byte;
  #L45ff76.  v3:= v3 ^< 7;
  #L45ff7a.  v0:= v0 ^~ v3 @kind int;
  #L45ff7c.  if v0 >= 0 then goto L45ff8a;
  #L45ff80.  v0:= v0 ^~ -128;
  #L45ff84.  v2:= (`long`) v0 @kind i2l;
  #L45ff86.  goto L4600b2;
  #L45ff8a.  v3:= v1 + 1;
  #L45ff8e.  v1:= v2[v1] @kind byte;
  #L45ff92.  v1:= v1 ^< 14;
  #L45ff96.  v0:= v0 ^~ v1 @kind int;
  #L45ff98.  if v0 < 0 then goto L45ffac;
  #L45ff9c.  v0:= v0 ^~ 16256;
  #L45ffa0.  v0:= (`long`) v0 @kind i2l;
  #L45ffa2.  v9:= v0 @kind wide;
  #L45ffa4.  v1:= v3;
  #L45ffa6.  v2:= v9 @kind wide;
  #L45ffa8.  goto L4600b2;
  #L45ffac.  v1:= v3 + 1;
  #L45ffb0.  v3:= v2[v3] @kind byte;
  #L45ffb4.  v3:= v3 ^< 21;
  #L45ffb8.  v0:= v0 ^~ v3 @kind int;
  #L45ffba.  if v0 >= 0 then goto L45ffc8;
  #L45ffbe.  v2:= -2080896I;
  #L45ffc4.  v0:= v0 ^~ v2 @kind int;
  #L45ffc6.  goto L45ff84;
  #L45ffc8.  v3:= (`long`) v0 @kind i2l;
  #L45ffca.  v0:= v1 + 1;
  #L45ffce.  v1:= v2[v1] @kind byte;
  #L45ffd2.  v5:= (`long`) v1 @kind i2l;
  #L45ffd4.  v1:= 28I;
  #L45ffd8.  v5:= v5 ^< v1 @kind long;
  #L45ffda.  v3:= v3 ^~ v5 @kind long;
  #L45ffdc.  v5:= 0L;
  #L45ffe0.  v1:= lcmp(v3, v5);
  #L45ffe4.  if v1 < 0 then goto L45fff6;
  #L45ffe8.  v1:= 266354560L;
  #L45ffee.  v2:= v3 ^~ v1 @kind long;
  #L45fff2.  v1:= v0;
  #L45fff4.  goto L4600b2;
  #L45fff6.  v1:= v0 + 1;
  #L45fffa.  v0:= v2[v0] @kind byte;
  #L45fffe.  v7:= (`long`) v0 @kind i2l;
  #L460000.  v0:= 35I;
  #L460004.  v7:= v7 ^< v0 @kind long;
  #L460006.  v3:= v3 ^~ v7 @kind long;
  #L460008.  v0:= lcmp(v3, v5);
  #L46000c.  if v0 >= 0 then goto L460020;
  #L460010.  v5:= -34093383808L;
  #L46001a.  v2:= v3 ^~ v5 @kind long;
  #L46001e.  goto L4600b2;
  #L460020.  v0:= v1 + 1;
  #L460024.  v1:= v2[v1] @kind byte;
  #L460028.  v7:= (`long`) v1 @kind i2l;
  #L46002a.  v1:= 42I;
  #L46002e.  v7:= v7 ^< v1 @kind long;
  #L460030.  v3:= v3 ^~ v7 @kind long;
  #L460032.  v1:= lcmp(v3, v5);
  #L460036.  if v1 < 0 then goto L460046;
  #L46003a.  v1:= 4363953127296L;
  #L460044.  goto L45ffee;
  #L460046.  v1:= v0 + 1;
  #L46004a.  v0:= v2[v0] @kind byte;
  #L46004e.  v7:= (`long`) v0 @kind i2l;
  #L460050.  v0:= 49I;
  #L460054.  v7:= v7 ^< v0 @kind long;
  #L460056.  v3:= v3 ^~ v7 @kind long;
  #L460058.  v0:= lcmp(v3, v5);
  #L46005c.  if v0 >= 0 then goto L46006c;
  #L460060.  v5:= -558586000294016L;
  #L46006a.  goto L46001a;
  #L46006c.  v0:= v1 + 1;
  #L460070.  v1:= v2[v1] @kind byte;
  #L460074.  v7:= (`long`) v1 @kind i2l;
  #L460076.  v1:= 56I;
  #L46007a.  v7:= v7 ^< v1 @kind long;
  #L46007c.  v3:= v3 ^~ v7 @kind long;
  #L46007e.  v7:= 71499008037633920L;
  #L460088.  v3:= v3 ^~ v7 @kind long;
  #L46008a.  v1:= lcmp(v3, v5);
  #L46008e.  if v1 >= 0 then goto L4600ae;
  #L460092.  v1:= v0 + 1;
  #L460096.  v0:= v2[v0] @kind byte;
  #L46009a.  v7:= (`long`) v0 @kind i2l;
  #L46009c.  v0:= lcmp(v7, v5);
  #L4600a0.  if v0 >= 0 then goto L4600b0;
  #L4600a4.  call temp:= `d`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.d:()J` @kind virtual;
  #L4600aa.  v0:= temp @kind wide;
  #L4600ac.  return v0 @kind wide;
  #L4600ae.  v1:= v0;
  #L4600b0.  v2:= v3 @kind wide;
  #L4600b2.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v1;
  #L4600b6.  return v2 @kind wide;
}
procedure `int` `readSFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc18.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L45fc1e.  v0:= temp;
  #L45fc20.  return v0;
}
procedure `long` `readSFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460114.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L46011a.  v0:= temp @kind wide;
  #L46011c.  return v0 @kind wide;
}
procedure `int` `readSInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc34.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fc3a.  v0:= temp;
  #L45fc3c.  call temp:= `decodeZigZag32`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag32:(I)I` @kind static;
  #L45fc42.  v0:= temp;
  #L45fc44.  return v0;
}
procedure `long` `readSInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readSInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460130.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L460136.  v0:= temp @kind wide;
  #L460138.  call temp:= `decodeZigZag64`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag64:(J)J` @kind static;
  #L46013e.  v0:= temp @kind wide;
  #L460140.  return v0 @kind wide;
}
procedure `java.lang.String` `readString`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45fcc0.  call temp:= `readRawVarint32`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fcc6.  v0:= temp;
  #L45fcc8.  if v0 <= 0 then goto L45fcfc;
  #L45fccc.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45fcd0.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fcd4.  v1:= v1 - v2 @kind int;
  #L45fcd6.  if v0 > v1 then goto L45fcfc;
  #L45fcda.  v1:= new `java.lang.String`;
  #L45fcde.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45fce2.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fce6.  v4:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L45fcea.  call `<init>`(v1, v2, v3, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L45fcf0.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fcf4.  v2:= v2 + v0 @kind int;
  #L45fcf6.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v2;
  #L45fcfa.  return v1 @kind object;
  #L45fcfc.  if v0 != 0 then goto L45fd06;
  #L45fd00.  v0:= "" @kind object;
  #L45fd04.  return v0 @kind object;
  #L45fd06.  if v0 >= 0 then goto L45fd14;
  #L45fd0a.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fd10.  v0:= temp @kind object;
  #L45fd12.  throw v0;
  #L45fd14.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fd1a.  v0:= temp @kind object;
  #L45fd1c.  throw v0;
}
procedure `java.lang.String` `readStringRequireUtf8`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readStringRequireUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45fd30.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fd36.  v0:= temp;
  #L45fd38.  if v0 <= 0 then goto L45fd62;
  #L45fd3c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L45fd40.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fd44.  v1:= v1 - v2 @kind int;
  #L45fd46.  if v0 > v1 then goto L45fd62;
  #L45fd4a.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.e` @type ^`byte`[] @kind object;
  #L45fd4e.  call temp:= `h`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/u0;.h:([BII)Ljava/lang/String;` @kind static;
  #L45fd54.  v1:= temp @kind object;
  #L45fd56.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L45fd5a.  v2:= v2 + v0 @kind int;
  #L45fd5c.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v2;
  #L45fd60.  return v1 @kind object;
  #L45fd62.  if v0 != 0 then goto L45fd6c;
  #L45fd66.  v0:= "" @kind object;
  #L45fd6a.  return v0 @kind object;
  #L45fd6c.  if v0 > 0 then goto L45fd7a;
  #L45fd70.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fd76.  v0:= temp @kind object;
  #L45fd78.  throw v0;
  #L45fd7a.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fd80.  v0:= temp @kind object;
  #L45fd82.  throw v0;
}
procedure `int` `readTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fc58.  call temp:= `isAtEnd`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.isAtEnd:()Z` @kind virtual;
  #L45fc5e.  v0:= temp;
  #L45fc60.  if v0 == 0 then goto L45fc6c;
  #L45fc64.  v0:= 0I;
  #L45fc66.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int` := v0;
  #L45fc6a.  return v0;
  #L45fc6c.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fc72.  v0:= temp;
  #L45fc74.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int` := v0;
  #L45fc78.  call temp:= `getTagFieldNumber`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L45fc7e.  v0:= temp;
  #L45fc80.  if v0 == 0 then goto L45fc8a;
  #L45fc84.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.k` @type ^`int`;
  #L45fc88.  return v0;
  #L45fc8a.  call temp:= `b`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.b:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L45fc90.  v0:= temp @kind object;
  #L45fc92.  throw v0;
}
procedure `int` `readUInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readUInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fca4.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45fcaa.  v0:= temp;
  #L45fcac.  return v0;
}
procedure `long` `readUInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readUInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460154.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint64:()J` @kind virtual;
  #L46015a.  v0:= temp @kind wide;
  #L46015c.  return v0 @kind wide;
}
procedure `void` `readUnknownGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `int` v2 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readUnknownGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4602d4.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L4602da.  v0:= temp @kind object;
  #L4602dc.  call `readGroup`(v1, v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @kind virtual;
  #L4602e2.  return @kind void;
}
procedure `void` `resetSizeCounter`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.resetSizeCounter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460338.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L46033c.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.j` @type ^`int` := v0;
  #L460340.  return @kind void;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f608.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L45f60e.  v0:= temp;
  #L45f610.  v1:= 1I;
  #L45f612.  if v0 == 0 then goto L45f682;
  #L45f616.  if v0 == v1 then goto L45f676;
  #L45f61a.  v2:= 2I;
  #L45f61c.  if v0 == v2 then goto L45f666;
  #L45f620.  v2:= 3I;
  #L45f622.  v3:= 4I;
  #L45f624.  if v0 == v2 then goto L45f648;
  #L45f628.  if v0 == v3 then goto L45f644;
  #L45f62c.  v5:= 5I;
  #L45f62e.  if v0 != v5 then goto L45f63a;
  #L45f632.  call `skipRawBytes`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @kind virtual;
  #L45f638.  return v1;
  #L45f63a.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L45f640.  v5:= temp @kind object;
  #L45f642.  throw v5;
  #L45f644.  v5:= 0I;
  #L45f646.  return v5;
  #L45f648.  call `skipMessage`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:()V` @kind virtual;
  #L45f64e.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L45f654.  v5:= temp;
  #L45f656.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L45f65c.  v5:= temp;
  #L45f65e.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L45f664.  return v1;
  #L45f666.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawVarint32:()I` @kind virtual;
  #L45f66c.  v5:= temp;
  #L45f66e.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @kind virtual;
  #L45f674.  return v1;
  #L45f676.  v5:= 8I;
  #L45f67a.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @kind virtual;
  #L45f680.  return v1;
  #L45f682.  call `f`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.f:()V` @kind direct;
  #L45f688.  return v1;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v4 @kind this, `int` v5 , `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f69c.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L45f6a2.  v0:= temp;
  #L45f6a4.  v1:= 1I;
  #L45f6a6.  if v0 == 0 then goto L45f740;
  #L45f6aa.  if v0 == v1 then goto L45f72a;
  #L45f6ae.  v2:= 2I;
  #L45f6b0.  if v0 == v2 then goto L45f714;
  #L45f6b4.  v2:= 3I;
  #L45f6b6.  v3:= 4I;
  #L45f6b8.  if v0 == v2 then goto L45f6ea;
  #L45f6bc.  if v0 == v3 then goto L45f6e6;
  #L45f6c0.  v2:= 5I;
  #L45f6c2.  if v0 != v2 then goto L45f6dc;
  #L45f6c6.  call temp:= `readRawLittleEndian32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian32:()I` @kind virtual;
  #L45f6cc.  v0:= temp;
  #L45f6ce.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L45f6d4.  call `writeFixed32NoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed32NoTag:(I)V` @kind virtual;
  #L45f6da.  return v1;
  #L45f6dc.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L45f6e2.  v5:= temp @kind object;
  #L45f6e4.  throw v5;
  #L45f6e6.  v5:= 0I;
  #L45f6e8.  return v5;
  #L45f6ea.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L45f6f0.  call `skipMessage`(v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @kind virtual;
  #L45f6f6.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L45f6fc.  v5:= temp;
  #L45f6fe.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L45f704.  v5:= temp;
  #L45f706.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.checkLastTagWas:(I)V` @kind virtual;
  #L45f70c.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L45f712.  return v1;
  #L45f714.  call temp:= `readBytes`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L45f71a.  v0:= temp @kind object;
  #L45f71c.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L45f722.  call `writeBytesNoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeBytesNoTag:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)V` @kind virtual;
  #L45f728.  return v1;
  #L45f72a.  call temp:= `readRawLittleEndian64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readRawLittleEndian64:()J` @kind virtual;
  #L45f730.  v2:= temp @kind wide;
  #L45f732.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L45f738.  call `writeFixed64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed64NoTag:(J)V` @kind virtual;
  #L45f73e.  return v1;
  #L45f740.  call temp:= `readInt64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readInt64:()J` @kind virtual;
  #L45f746.  v2:= temp @kind wide;
  #L45f748.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L45f74e.  call `writeUInt64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeUInt64NoTag:(J)V` @kind virtual;
  #L45f754.  return v1;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460354.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readTag:()I` @kind virtual;
  #L46035a.  v0:= temp;
  #L46035c.  if v0 == 0 then goto L46036c;
  #L460360.  call temp:= `skipField`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(I)Z` @kind virtual;
  #L460366.  v0:= temp;
  #L460368.  if v0 != 0 then goto L460354;
  #L46036c.  return @kind void;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460380.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.readTag:()I` @kind virtual;
  #L460386.  v0:= temp;
  #L460388.  if v0 == 0 then goto L460398;
  #L46038c.  call temp:= `skipField`(v1, v0, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @kind virtual;
  #L460392.  v0:= temp;
  #L460394.  if v0 != 0 then goto L460380;
  #L460398.  return @kind void;
}
procedure `void` `skipRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$b;.skipRawBytes:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4603ac.  if v3 < 0 then goto L4603c6;
  #L4603b0.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.g` @type ^`int`;
  #L4603b4.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int`;
  #L4603b8.  v0:= v0 - v1 @kind int;
  #L4603ba.  if v3 > v0 then goto L4603c6;
  #L4603be.  v1:= v1 + v3 @kind int;
  #L4603c0.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$b.i` @type ^`int` := v1;
  #L4603c4.  return @kind void;
  #L4603c6.  if v3 >= 0 then goto L4603d4;
  #L4603ca.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4603d0.  v3:= temp @kind object;
  #L4603d2.  throw v3;
  #L4603d4.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L4603da.  v3:= temp @kind object;
  #L4603dc.  throw v3;
}
