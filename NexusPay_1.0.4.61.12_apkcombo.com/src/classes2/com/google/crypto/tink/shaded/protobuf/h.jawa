record `com.google.crypto.tink.shaded.protobuf.h` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.a` @kind class, `com.google.crypto.tink.shaded.protobuf.Internal$DoubleList` @kind interface, `java.util.RandomAccess` @kind interface, `com.google.crypto.tink.shaded.protobuf.g0` @kind interface {
  `double`[] `com.google.crypto.tink.shaded.protobuf.h.b` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.h.c` @AccessFlag PRIVATE;
}
global `com.google.crypto.tink.shaded.protobuf.h` `@@com.google.crypto.tink.shaded.protobuf.h.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L46b580.  v0:= new `com.google.crypto.tink.shaded.protobuf.h`;
  #L46b584.  v1:= 0I;
  #L46b586.  v2:= new `double`[v1];
  #L46b58a.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @kind direct;
  #L46b590.  `@@com.google.crypto.tink.shaded.protobuf.h.d` @type ^`com.google.crypto.tink.shaded.protobuf.h` := v0 @kind object;
  #L46b594.  call `makeImmutable`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.makeImmutable:()V` @kind virtual;
  #L46b59a.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46b5ac.  v0:= 10I;
  #L46b5b0.  v0:= new `double`[v0];
  #L46b5b4.  v1:= 0I;
  #L46b5b6.  call `<init>`(v2, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @kind direct;
  #L46b5bc.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `double`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L46b5d0.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.<init>:()V` @kind direct;
  #L46b5d6.  v0.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v1 @kind object;
  #L46b5da.  v0.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v2;
  #L46b5de.  return @kind void;
}
procedure `void` `c`(`com.google.crypto.tink.shaded.protobuf.h` v4 @kind this, `int` v5 , `double` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.c:(ID)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46b684.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L46b68a.  if v5 < 0 then goto L46b700;
  #L46b68e.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b692.  if v5 > v0 then goto L46b700;
  #L46b696.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b69a.  v2:= length @variable v1;
  #L46b69c.  if v0 >= v2 then goto L46b6ae;
  #L46b6a0.  v2:= v5 + 1;
  #L46b6a4.  v0:= v0 - v5 @kind int;
  #L46b6a6.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b6ac.  goto L46b6de;
  #L46b6ae.  v0:= v0 * 3;
  #L46b6b2.  v0:= v0 / 2;
  #L46b6b6.  v0:= v0 + 1;
  #L46b6ba.  v0:= new `double`[v0];
  #L46b6be.  v2:= 0I;
  #L46b6c0.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b6c6.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b6ca.  v2:= v5 + 1;
  #L46b6ce.  v3:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b6d2.  v3:= v3 - v5 @kind int;
  #L46b6d4.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b6da.  v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v0 @kind object;
  #L46b6de.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b6e2.  v0[v5]:= v6 @kind wide;
  #L46b6e6.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b6ea.  v5:= v5 + 1;
  #L46b6ee.  v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v5;
  #L46b6f2.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L46b6f6.  v5:= v5 + 1;
  #L46b6fa.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L46b6fe.  return @kind void;
  #L46b700.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L46b704.  call temp:= `g`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.g:(I)Ljava/lang/String;` @kind direct;
  #L46b70a.  v5:= temp @kind object;
  #L46b70c.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46b712.  throw v6;
}
procedure `com.google.crypto.tink.shaded.protobuf.h` `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.d:()Lcom/google/crypto/tink/shaded/protobuf/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L46b310.  v0:= `@@com.google.crypto.tink.shaded.protobuf.h.d` @type ^`com.google.crypto.tink.shaded.protobuf.h` @kind object;
  #L46b314.  return v0 @kind object;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.h` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L46b724.  if v2 < 0 then goto L46b732;
  #L46b728.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b72c.  if v2 >= v0 then goto L46b732;
  #L46b730.  return @kind void;
  #L46b732.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L46b736.  call temp:= `g`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.g:(I)Ljava/lang/String;` @kind direct;
  #L46b73c.  v2:= temp @kind object;
  #L46b73e.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46b744.  throw v0;
}
procedure `java.lang.String` `g`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.g:(I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L46b538.  v0:= new `java.lang.StringBuilder`;
  #L46b53c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L46b542.  v1:= "Index:" @kind object;
  #L46b546.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b54c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b552.  v3:= ", Size:" @kind object;
  #L46b556.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b55c.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b560.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L46b566.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L46b56c.  v3:= temp @kind object;
  #L46b56e.  return v3 @kind object;
}
procedure `void` `a`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 , `java.lang.Double` v4 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.a:(ILjava/lang/Double;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46b5f0.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L46b5f6.  v0:= temp @kind wide;
  #L46b5f8.  call `c`(v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.c:(ID)V` @kind direct;
  #L46b5fe.  return @kind void;
}
procedure `void` `add`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L46b610.  v2:= (`java.lang.Double`) v2 @kind object;
  #L46b614.  call `a`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.a:(ILjava/lang/Double;)V` @kind virtual;
  #L46b61a.  return @kind void;
}
procedure `boolean` `add`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L46b164.  v1:= (`java.lang.Double`) v1 @kind object;
  #L46b168.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.b:(Ljava/lang/Double;)Z` @kind virtual;
  #L46b16e.  v1:= temp;
  #L46b170.  return v1;
}
procedure `boolean` `addAll`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46b184.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L46b18a.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L46b190.  v0:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.h` @kind boolean;
  #L46b194.  if v0 != 0 then goto L46b1a2;
  #L46b198.  call temp:= `addAll`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L46b19e.  v6:= temp;
  #L46b1a0.  return v6;
  #L46b1a2.  v6:= (`com.google.crypto.tink.shaded.protobuf.h`) v6 @kind object;
  #L46b1a6.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b1aa.  v1:= 0I;
  #L46b1ac.  if v0 != 0 then goto L46b1b2;
  #L46b1b0.  return v1;
  #L46b1b2.  v2:= 2147483647I;
  #L46b1b8.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b1bc.  v2:= v2 - v3 @kind int;
  #L46b1be.  if v2 < v0 then goto L46b202;
  #L46b1c2.  v3:= v3 + v0 @kind int;
  #L46b1c4.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b1c8.  v2:= length @variable v0;
  #L46b1ca.  if v3 <= v2 then goto L46b1da;
  #L46b1ce.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L46b1d4.  v0:= temp @kind object;
  #L46b1d6.  v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v0 @kind object;
  #L46b1da.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b1de.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b1e2.  v4:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b1e6.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b1ea.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b1f0.  v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v3;
  #L46b1f4.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L46b1f8.  v0:= 1I;
  #L46b1fa.  v6:= v6 + v0 @kind int;
  #L46b1fc.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L46b200.  return v0;
  #L46b202.  v6:= new `java.lang.OutOfMemoryError`;
  #L46b206.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L46b20c.  throw v6;
}
procedure `void` `addDouble`(`com.google.crypto.tink.shaded.protobuf.h` v4 @kind this, `double` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.addDouble:(D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46b62c.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L46b632.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b636.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b63a.  v2:= length @variable v1;
  #L46b63c.  if v0 != v2 then goto L46b65c;
  #L46b640.  v2:= v0 * 3;
  #L46b644.  v2:= v2 / 2;
  #L46b648.  v2:= v2 + 1;
  #L46b64c.  v2:= new `double`[v2];
  #L46b650.  v3:= 0I;
  #L46b652.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b658.  v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v2 @kind object;
  #L46b65c.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b660.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b664.  v2:= v1 + 1;
  #L46b668.  v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v2;
  #L46b66c.  v0[v1]:= v5 @kind wide;
  #L46b670.  return @kind void;
}
procedure `boolean` `b`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `java.lang.Double` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.b:(Ljava/lang/Double;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46b140.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L46b146.  v0:= temp @kind wide;
  #L46b148.  call `addDouble`(v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.addDouble:(D)V` @kind virtual;
  #L46b14e.  v3:= 1I;
  #L46b150.  return v3;
}
procedure `boolean` `equals`(`com.google.crypto.tink.shaded.protobuf.h` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L46b220.  v0:= 1I;
  #L46b222.  if v8 != v9 then goto L46b228;
  #L46b226.  return v0;
  #L46b228.  v1:= instanceof @variable v9 @type ^`com.google.crypto.tink.shaded.protobuf.h` @kind boolean;
  #L46b22c.  if v1 != 0 then goto L46b23a;
  #L46b230.  call temp:= `equals`(v8, v9) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L46b236.  v9:= temp;
  #L46b238.  return v9;
  #L46b23a.  v9:= (`com.google.crypto.tink.shaded.protobuf.h`) v9 @kind object;
  #L46b23e.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b242.  v2:= v9.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b246.  v3:= 0I;
  #L46b248.  if v1 == v2 then goto L46b24e;
  #L46b24c.  return v3;
  #L46b24e.  v9:= v9.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b252.  v1:= 0I;
  #L46b254.  v2:= v8.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b258.  if v1 >= v2 then goto L46b288;
  #L46b25c.  v2:= v8.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b260.  v4:= v2[v1] @kind wide;
  #L46b264.  call temp:= `doubleToLongBits`(v4) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L46b26a.  v4:= temp @kind wide;
  #L46b26c.  v6:= v9[v1] @kind wide;
  #L46b270.  call temp:= `doubleToLongBits`(v6) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L46b276.  v6:= temp @kind wide;
  #L46b278.  v2:= lcmp(v4, v6);
  #L46b27c.  if v2 == 0 then goto L46b282;
  #L46b280.  return v3;
  #L46b282.  v1:= v1 + 1;
  #L46b286.  goto L46b254;
  #L46b288.  return v0;
}
procedure `java.lang.Double` `f`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.f:(I)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46b42c.  call temp:= `getDouble`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.getDouble:(I)D` @kind virtual;
  #L46b432.  v0:= temp @kind wide;
  #L46b434.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L46b43a.  v3:= temp @kind object;
  #L46b43c.  return v3 @kind object;
}
procedure `java.lang.Object` `get`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L46b4e0.  call temp:= `f`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.f:(I)Ljava/lang/Double;` @kind virtual;
  #L46b4e6.  v1:= temp @kind object;
  #L46b4e8.  return v1 @kind object;
}
procedure `double` `getDouble`(`com.google.crypto.tink.shaded.protobuf.h` v3 @kind this, `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.getDouble:(I)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46b384.  call `e`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @kind direct;
  #L46b38a.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b38e.  v1:= v0[v4] @kind wide;
  #L46b392.  return v1 @kind wide;
}
procedure `java.lang.Double` `h`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this, `int` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.h:(I)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46b450.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L46b456.  call `e`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @kind direct;
  #L46b45c.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b460.  v1:= v0[v6] @kind wide;
  #L46b464.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b468.  v4:= v3 + -1;
  #L46b46c.  if v6 >= v4 then goto L46b480;
  #L46b470.  v4:= v6 + 1;
  #L46b474.  v3:= v3 - v6 @kind int;
  #L46b476.  v3:= v3 + -1;
  #L46b47a.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b480.  v6:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b484.  v6:= v6 + -1;
  #L46b488.  v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v6;
  #L46b48c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L46b490.  v6:= v6 + 1;
  #L46b494.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L46b498.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L46b49e.  v6:= temp @kind object;
  #L46b4a0.  return v6 @kind object;
}
procedure `int` `hashCode`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46b3d0.  v0:= 1I;
  #L46b3d2.  v1:= 0I;
  #L46b3d4.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b3d8.  if v1 >= v2 then goto L46b400;
  #L46b3dc.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b3e0.  v3:= v2[v1] @kind wide;
  #L46b3e4.  call temp:= `doubleToLongBits`(v3) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L46b3ea.  v2:= temp @kind wide;
  #L46b3ec.  v0:= v0 * 31;
  #L46b3f0.  call temp:= `hashLong`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.hashLong:(J)I` @kind static;
  #L46b3f6.  v2:= temp;
  #L46b3f8.  v0:= v0 + v2 @kind int;
  #L46b3fa.  v1:= v1 + 1;
  #L46b3fe.  goto L46b3d4;
  #L46b400.  return v0;
}
procedure `java.lang.Double` `i`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 , `java.lang.Double` v4 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.i:(ILjava/lang/Double;)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46b4b4.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L46b4ba.  v0:= temp @kind wide;
  #L46b4bc.  call temp:= `setDouble`(v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.setDouble:(ID)D` @kind virtual;
  #L46b4c2.  v3:= temp @kind wide;
  #L46b4c4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L46b4ca.  v3:= temp @kind object;
  #L46b4cc.  return v3 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$DoubleList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$DoubleList;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46b328.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b32c.  if v3 < v0 then goto L46b34c;
  #L46b330.  v0:= new `com.google.crypto.tink.shaded.protobuf.h`;
  #L46b334.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b338.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L46b33e.  v3:= temp @kind object;
  #L46b340.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b344.  call `<init>`(v0, v3, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @kind direct;
  #L46b34a.  return v0 @kind object;
  #L46b34c.  v3:= new `java.lang.IllegalArgumentException`;
  #L46b350.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L46b356.  throw v3;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$ProtobufList;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L46b368.  call temp:= `mutableCopyWithCapacity`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$DoubleList;` @kind virtual;
  #L46b36e.  v1:= temp @kind object;
  #L46b370.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L46b4fc.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.h:(I)Ljava/lang/Double;` @kind virtual;
  #L46b502.  v1:= temp @kind object;
  #L46b504.  return v1 @kind object;
}
procedure `boolean` `remove`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46b29c.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L46b2a2.  v0:= 0I;
  #L46b2a4.  v1:= 0I;
  #L46b2a6.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b2aa.  if v1 >= v2 then goto L46b2fe;
  #L46b2ae.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b2b2.  v3:= v2[v1] @kind wide;
  #L46b2b6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L46b2bc.  v2:= temp @kind object;
  #L46b2be.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46b2c4.  v2:= temp;
  #L46b2c6.  if v2 == 0 then goto L46b2f8;
  #L46b2ca.  v6:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b2ce.  v0:= v1 + 1;
  #L46b2d2.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b2d6.  v2:= v2 - v1 @kind int;
  #L46b2d8.  v3:= 1I;
  #L46b2da.  v2:= v2 - v3 @kind int;
  #L46b2dc.  call `arraycopy`(v6, v0, v6, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b2e2.  v6:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b2e6.  v6:= v6 - v3 @kind int;
  #L46b2e8.  v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v6;
  #L46b2ec.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L46b2f0.  v6:= v6 + v3 @kind int;
  #L46b2f2.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L46b2f6.  return v3;
  #L46b2f8.  v1:= v1 + 1;
  #L46b2fc.  goto L46b2a6;
  #L46b2fe.  return v0;
}
procedure `void` `removeRange`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.removeRange:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L46b758.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L46b75e.  if v4 < v3 then goto L46b78c;
  #L46b762.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b766.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b76a.  v1:= v1 - v4 @kind int;
  #L46b76c.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46b772.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b776.  v4:= v4 - v3 @kind int;
  #L46b778.  v0:= v0 - v4 @kind int;
  #L46b77a.  v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v0;
  #L46b77e.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L46b782.  v3:= v3 + 1;
  #L46b786.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L46b78a.  return @kind void;
  #L46b78c.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L46b790.  v4:= "toIndex < fromIndex" @kind object;
  #L46b794.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46b79a.  throw v3;
}
procedure `java.lang.Object` `set`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L46b518.  v2:= (`java.lang.Double`) v2 @kind object;
  #L46b51c.  call temp:= `i`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.i:(ILjava/lang/Double;)Ljava/lang/Double;` @kind virtual;
  #L46b522.  v1:= temp @kind object;
  #L46b524.  return v1 @kind object;
}
procedure `double` `setDouble`(`com.google.crypto.tink.shaded.protobuf.h` v3 @kind this, `int` v4 , `double` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.setDouble:(ID)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46b3a4.  call `ensureIsMutable`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L46b3aa.  call `e`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @kind direct;
  #L46b3b0.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L46b3b4.  v1:= v0[v4] @kind wide;
  #L46b3b8.  v0[v4]:= v5 @kind wide;
  #L46b3bc.  return v1 @kind wide;
}
procedure `int` `size`(`com.google.crypto.tink.shaded.protobuf.h` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46b414.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L46b418.  return v0;
}
