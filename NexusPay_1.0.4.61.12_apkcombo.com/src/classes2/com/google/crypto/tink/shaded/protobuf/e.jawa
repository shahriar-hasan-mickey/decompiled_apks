record `com.google.crypto.tink.shaded.protobuf.e` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.a` @kind class, `com.google.crypto.tink.shaded.protobuf.Internal$BooleanList` @kind interface, `java.util.RandomAccess` @kind interface, `com.google.crypto.tink.shaded.protobuf.g0` @kind interface {
  `boolean`[] `com.google.crypto.tink.shaded.protobuf.e.b` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.e.c` @AccessFlag PRIVATE;
}
global `com.google.crypto.tink.shaded.protobuf.e` `@@com.google.crypto.tink.shaded.protobuf.e.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L45dd24.  v0:= new `com.google.crypto.tink.shaded.protobuf.e`;
  #L45dd28.  v1:= 0I;
  #L45dd2a.  v2:= new `boolean`[v1];
  #L45dd2e.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @kind direct;
  #L45dd34.  `@@com.google.crypto.tink.shaded.protobuf.e.d` @type ^`com.google.crypto.tink.shaded.protobuf.e` := v0 @kind object;
  #L45dd38.  call `makeImmutable`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.makeImmutable:()V` @kind virtual;
  #L45dd3e.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45dd50.  v0:= 10I;
  #L45dd54.  v0:= new `boolean`[v0];
  #L45dd58.  v1:= 0I;
  #L45dd5a.  call `<init>`(v2, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @kind direct;
  #L45dd60.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `boolean`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L45dd74.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.<init>:()V` @kind direct;
  #L45dd7a.  v0.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v1 @kind object;
  #L45dd7e.  v0.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v2;
  #L45dd82.  return @kind void;
}
procedure `void` `c`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.c:(IZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45de28.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L45de2e.  if v5 < 0 then goto L45dea4;
  #L45de32.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45de36.  if v5 > v0 then goto L45dea4;
  #L45de3a.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45de3e.  v2:= length @variable v1;
  #L45de40.  if v0 >= v2 then goto L45de52;
  #L45de44.  v2:= v5 + 1;
  #L45de48.  v0:= v0 - v5 @kind int;
  #L45de4a.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45de50.  goto L45de82;
  #L45de52.  v0:= v0 * 3;
  #L45de56.  v0:= v0 / 2;
  #L45de5a.  v0:= v0 + 1;
  #L45de5e.  v0:= new `boolean`[v0];
  #L45de62.  v2:= 0I;
  #L45de64.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45de6a.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45de6e.  v2:= v5 + 1;
  #L45de72.  v3:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45de76.  v3:= v3 - v5 @kind int;
  #L45de78.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45de7e.  v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v0 @kind object;
  #L45de82.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45de86.  v0[v5]:= v6 @kind boolean;
  #L45de8a.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45de8e.  v5:= v5 + 1;
  #L45de92.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v5;
  #L45de96.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L45de9a.  v5:= v5 + 1;
  #L45de9e.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L45dea2.  return @kind void;
  #L45dea4.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L45dea8.  call temp:= `g`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.g:(I)Ljava/lang/String;` @kind direct;
  #L45deae.  v5:= temp @kind object;
  #L45deb0.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45deb6.  throw v6;
}
procedure `com.google.crypto.tink.shaded.protobuf.e` `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.d:()Lcom/google/crypto/tink/shaded/protobuf/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45db08.  v0:= `@@com.google.crypto.tink.shaded.protobuf.e.d` @type ^`com.google.crypto.tink.shaded.protobuf.e` @kind object;
  #L45db0c.  return v0 @kind object;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.e` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L45dec8.  if v2 < 0 then goto L45ded6;
  #L45decc.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45ded0.  if v2 >= v0 then goto L45ded6;
  #L45ded4.  return @kind void;
  #L45ded6.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L45deda.  call temp:= `g`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.g:(I)Ljava/lang/String;` @kind direct;
  #L45dee0.  v2:= temp @kind object;
  #L45dee2.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45dee8.  throw v0;
}
procedure `java.lang.String` `g`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.g:(I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L45dcdc.  v0:= new `java.lang.StringBuilder`;
  #L45dce0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45dce6.  v1:= "Index:" @kind object;
  #L45dcea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45dcf0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45dcf6.  v3:= ", Size:" @kind object;
  #L45dcfa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45dd00.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45dd04.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45dd0a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45dd10.  v3:= temp @kind object;
  #L45dd12.  return v3 @kind object;
}
procedure `void` `a`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Boolean` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.a:(ILjava/lang/Boolean;)V` @AccessFlag PUBLIC {
    temp;

  #L45dd94.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L45dd9a.  v2:= temp;
  #L45dd9c.  call `c`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.c:(IZ)V` @kind direct;
  #L45dda2.  return @kind void;
}
procedure `void` `add`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45ddb4.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L45ddb8.  call `a`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.a:(ILjava/lang/Boolean;)V` @kind virtual;
  #L45ddbe.  return @kind void;
}
procedure `boolean` `add`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45d924.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L45d928.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.b:(Ljava/lang/Boolean;)Z` @kind virtual;
  #L45d92e.  v1:= temp;
  #L45d930.  return v1;
}
procedure `boolean` `addAll`(`com.google.crypto.tink.shaded.protobuf.e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45d944.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L45d94a.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L45d950.  v0:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.e` @kind boolean;
  #L45d954.  if v0 != 0 then goto L45d962;
  #L45d958.  call temp:= `addAll`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L45d95e.  v6:= temp;
  #L45d960.  return v6;
  #L45d962.  v6:= (`com.google.crypto.tink.shaded.protobuf.e`) v6 @kind object;
  #L45d966.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45d96a.  v1:= 0I;
  #L45d96c.  if v0 != 0 then goto L45d972;
  #L45d970.  return v1;
  #L45d972.  v2:= 2147483647I;
  #L45d978.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45d97c.  v2:= v2 - v3 @kind int;
  #L45d97e.  if v2 < v0 then goto L45d9c2;
  #L45d982.  v3:= v3 + v0 @kind int;
  #L45d984.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45d988.  v2:= length @variable v0;
  #L45d98a.  if v3 <= v2 then goto L45d99a;
  #L45d98e.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L45d994.  v0:= temp @kind object;
  #L45d996.  v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v0 @kind object;
  #L45d99a.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45d99e.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45d9a2.  v4:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45d9a6.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45d9aa.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45d9b0.  v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v3;
  #L45d9b4.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L45d9b8.  v0:= 1I;
  #L45d9ba.  v6:= v6 + v0 @kind int;
  #L45d9bc.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L45d9c0.  return v0;
  #L45d9c2.  v6:= new `java.lang.OutOfMemoryError`;
  #L45d9c6.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L45d9cc.  throw v6;
}
procedure `void` `addBoolean`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `boolean` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.addBoolean:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45ddd0.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L45ddd6.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45ddda.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45ddde.  v2:= length @variable v1;
  #L45dde0.  if v0 != v2 then goto L45de00;
  #L45dde4.  v2:= v0 * 3;
  #L45dde8.  v2:= v2 / 2;
  #L45ddec.  v2:= v2 + 1;
  #L45ddf0.  v2:= new `boolean`[v2];
  #L45ddf4.  v3:= 0I;
  #L45ddf6.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45ddfc.  v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v2 @kind object;
  #L45de00.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45de04.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45de08.  v2:= v1 + 1;
  #L45de0c.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v2;
  #L45de10.  v0[v1]:= v5 @kind boolean;
  #L45de14.  return @kind void;
}
procedure `boolean` `b`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `java.lang.Boolean` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.b:(Ljava/lang/Boolean;)Z` @AccessFlag PUBLIC {
    temp;

  #L45d900.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L45d906.  v1:= temp;
  #L45d908.  call `addBoolean`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.addBoolean:(Z)V` @kind virtual;
  #L45d90e.  v1:= 1I;
  #L45d910.  return v1;
}
procedure `boolean` `equals`(`com.google.crypto.tink.shaded.protobuf.e` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45d9e0.  v0:= 1I;
  #L45d9e2.  if v5 != v6 then goto L45d9e8;
  #L45d9e6.  return v0;
  #L45d9e8.  v1:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.e` @kind boolean;
  #L45d9ec.  if v1 != 0 then goto L45d9fa;
  #L45d9f0.  call temp:= `equals`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L45d9f6.  v6:= temp;
  #L45d9f8.  return v6;
  #L45d9fa.  v6:= (`com.google.crypto.tink.shaded.protobuf.e`) v6 @kind object;
  #L45d9fe.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45da02.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45da06.  v3:= 0I;
  #L45da08.  if v1 == v2 then goto L45da0e;
  #L45da0c.  return v3;
  #L45da0e.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45da12.  v1:= 0I;
  #L45da14.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45da18.  if v1 >= v2 then goto L45da34;
  #L45da1c.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45da20.  v2:= v2[v1] @kind boolean;
  #L45da24.  v4:= v6[v1] @kind boolean;
  #L45da28.  if v2 == v4 then goto L45da2e;
  #L45da2c.  return v3;
  #L45da2e.  v1:= v1 + 1;
  #L45da32.  goto L45da14;
  #L45da34.  return v0;
}
procedure `java.lang.Boolean` `f`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.f:(I)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;

  #L45dbd0.  call temp:= `getBoolean`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.getBoolean:(I)Z` @kind virtual;
  #L45dbd6.  v1:= temp;
  #L45dbd8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L45dbde.  v1:= temp @kind object;
  #L45dbe0.  return v1 @kind object;
}
procedure `java.lang.Object` `get`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45dc84.  call temp:= `f`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.f:(I)Ljava/lang/Boolean;` @kind virtual;
  #L45dc8a.  v1:= temp @kind object;
  #L45dc8c.  return v1 @kind object;
}
procedure `boolean` `getBoolean`(`com.google.crypto.tink.shaded.protobuf.e` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.getBoolean:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45da48.  call `e`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @kind direct;
  #L45da4e.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45da52.  v2:= v0[v2] @kind boolean;
  #L45da56.  return v2;
}
procedure `java.lang.Boolean` `h`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.h:(I)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45dbf4.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L45dbfa.  call `e`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @kind direct;
  #L45dc00.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45dc04.  v1:= v0[v5] @kind boolean;
  #L45dc08.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45dc0c.  v3:= v2 + -1;
  #L45dc10.  if v5 >= v3 then goto L45dc24;
  #L45dc14.  v3:= v5 + 1;
  #L45dc18.  v2:= v2 - v5 @kind int;
  #L45dc1a.  v2:= v2 + -1;
  #L45dc1e.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45dc24.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45dc28.  v5:= v5 + -1;
  #L45dc2c.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v5;
  #L45dc30.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L45dc34.  v5:= v5 + 1;
  #L45dc38.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L45dc3c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L45dc42.  v5:= temp @kind object;
  #L45dc44.  return v5 @kind object;
}
procedure `int` `hashCode`(`com.google.crypto.tink.shaded.protobuf.e` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45db7c.  v0:= 1I;
  #L45db7e.  v1:= 0I;
  #L45db80.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45db84.  if v1 >= v2 then goto L45dba4;
  #L45db88.  v0:= v0 * 31;
  #L45db8c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45db90.  v2:= v2[v1] @kind boolean;
  #L45db94.  call temp:= `hashBoolean`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.hashBoolean:(Z)I` @kind static;
  #L45db9a.  v2:= temp;
  #L45db9c.  v0:= v0 + v2 @kind int;
  #L45db9e.  v1:= v1 + 1;
  #L45dba2.  goto L45db80;
  #L45dba4.  return v0;
}
procedure `java.lang.Boolean` `i`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Boolean` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.i:(ILjava/lang/Boolean;)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;

  #L45dc58.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L45dc5e.  v2:= temp;
  #L45dc60.  call temp:= `setBoolean`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.setBoolean:(IZ)Z` @kind virtual;
  #L45dc66.  v1:= temp;
  #L45dc68.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L45dc6e.  v1:= temp @kind object;
  #L45dc70.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$BooleanList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$BooleanList;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45db20.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45db24.  if v3 < v0 then goto L45db44;
  #L45db28.  v0:= new `com.google.crypto.tink.shaded.protobuf.e`;
  #L45db2c.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45db30.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L45db36.  v3:= temp @kind object;
  #L45db38.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45db3c.  call `<init>`(v0, v3, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @kind direct;
  #L45db42.  return v0 @kind object;
  #L45db44.  v3:= new `java.lang.IllegalArgumentException`;
  #L45db48.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L45db4e.  throw v3;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$ProtobufList;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45db60.  call temp:= `mutableCopyWithCapacity`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$BooleanList;` @kind virtual;
  #L45db66.  v1:= temp @kind object;
  #L45db68.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45dca0.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.h:(I)Ljava/lang/Boolean;` @kind virtual;
  #L45dca6.  v1:= temp @kind object;
  #L45dca8.  return v1 @kind object;
}
procedure `boolean` `remove`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45da68.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L45da6e.  v0:= 0I;
  #L45da70.  v1:= 0I;
  #L45da72.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45da76.  if v1 >= v2 then goto L45daca;
  #L45da7a.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45da7e.  v2:= v2[v1] @kind boolean;
  #L45da82.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L45da88.  v2:= temp @kind object;
  #L45da8a.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L45da90.  v2:= temp;
  #L45da92.  if v2 == 0 then goto L45dac4;
  #L45da96.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45da9a.  v0:= v1 + 1;
  #L45da9e.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45daa2.  v2:= v2 - v1 @kind int;
  #L45daa4.  v3:= 1I;
  #L45daa6.  v2:= v2 - v3 @kind int;
  #L45daa8.  call `arraycopy`(v5, v0, v5, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45daae.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45dab2.  v5:= v5 - v3 @kind int;
  #L45dab4.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v5;
  #L45dab8.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L45dabc.  v5:= v5 + v3 @kind int;
  #L45dabe.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L45dac2.  return v3;
  #L45dac4.  v1:= v1 + 1;
  #L45dac8.  goto L45da72;
  #L45daca.  return v0;
}
procedure `void` `removeRange`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.removeRange:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L45defc.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L45df02.  if v4 < v3 then goto L45df30;
  #L45df06.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45df0a.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45df0e.  v1:= v1 - v4 @kind int;
  #L45df10.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45df16.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45df1a.  v4:= v4 - v3 @kind int;
  #L45df1c.  v0:= v0 - v4 @kind int;
  #L45df1e.  v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v0;
  #L45df22.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L45df26.  v3:= v3 + 1;
  #L45df2a.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L45df2e.  return @kind void;
  #L45df30.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L45df34.  v4:= "toIndex < fromIndex" @kind object;
  #L45df38.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45df3e.  throw v3;
}
procedure `java.lang.Object` `set`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45dcbc.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L45dcc0.  call temp:= `i`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.i:(ILjava/lang/Boolean;)Ljava/lang/Boolean;` @kind virtual;
  #L45dcc6.  v1:= temp @kind object;
  #L45dcc8.  return v1 @kind object;
}
procedure `boolean` `setBoolean`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.setBoolean:(IZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45dadc.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L45dae2.  call `e`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @kind direct;
  #L45dae8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L45daec.  v1:= v0[v3] @kind boolean;
  #L45daf0.  v0[v3]:= v4 @kind boolean;
  #L45daf4.  return v1;
}
procedure `int` `size`(`com.google.crypto.tink.shaded.protobuf.e` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45dbb8.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L45dbbc.  return v0;
}
