record `com.google.crypto.tink.KeyTemplate` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.crypto.tink.proto.KeyTemplate` `com.google.crypto.tink.KeyTemplate.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.KeyTemplate` v0 @kind this, `com.google.crypto.tink.proto.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.<init>:(Lcom/google/crypto/tink/proto/KeyTemplate;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4259bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4259c2.  v0.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` := v1 @kind object;
  #L4259c6.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate$OutputPrefixType` `a`(`com.google.crypto.tink.proto.OutputPrefixType` v1 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.a:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42589c.  v0:= `@@com.google.crypto.tink.KeyTemplate$a.a` @type ^`int`[] @kind object;
  #L4258a0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4258a6.  v1:= temp;
  #L4258a8.  v1:= v0[v1];
  #L4258ac.  v0:= 1I;
  #L4258ae.  if v1 == v0 then goto L4258e6;
  #L4258b2.  v0:= 2I;
  #L4258b4.  if v1 == v0 then goto L4258e0;
  #L4258b8.  v0:= 3I;
  #L4258ba.  if v1 == v0 then goto L4258da;
  #L4258be.  v0:= 4I;
  #L4258c0.  if v1 != v0 then goto L4258ca;
  #L4258c4.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.CRUNCHY` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4258c8.  return v1 @kind object;
  #L4258ca.  v1:= new `java.lang.IllegalArgumentException`;
  #L4258ce.  v0:= "Unknown output prefix type" @kind object;
  #L4258d2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4258d8.  throw v1;
  #L4258da.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4258de.  return v1 @kind object;
  #L4258e0.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4258e4.  return v1 @kind object;
  #L4258e6.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4258ea.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.OutputPrefixType` `c`(`com.google.crypto.tink.KeyTemplate$OutputPrefixType` v1 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.c:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42593c.  v0:= `@@com.google.crypto.tink.KeyTemplate$a.b` @type ^`int`[] @kind object;
  #L425940.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L425946.  v1:= temp;
  #L425948.  v1:= v0[v1];
  #L42594c.  v0:= 1I;
  #L42594e.  if v1 == v0 then goto L425986;
  #L425952.  v0:= 2I;
  #L425954.  if v1 == v0 then goto L425980;
  #L425958.  v0:= 3I;
  #L42595a.  if v1 == v0 then goto L42597a;
  #L42595e.  v0:= 4I;
  #L425960.  if v1 != v0 then goto L42596a;
  #L425964.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.CRUNCHY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L425968.  return v1 @kind object;
  #L42596a.  v1:= new `java.lang.IllegalArgumentException`;
  #L42596e.  v0:= "Unknown output prefix type" @kind object;
  #L425972.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425978.  throw v1;
  #L42597a.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L42597e.  return v1 @kind object;
  #L425980.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L425984.  return v1 @kind object;
  #L425986.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.TINK` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L42598a.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `create`(`java.lang.String` v2 @kind object, `byte`[] v3 @kind object, `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v4 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L425844.  v0:= new `com.google.crypto.tink.KeyTemplate`;
  #L425848.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.newBuilder:()Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind static;
  #L42584e.  v1:= temp @kind object;
  #L425850.  call temp:= `setTypeUrl`(v1, v2) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L425856.  v2:= temp @kind object;
  #L425858.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42585e.  v3:= temp @kind object;
  #L425860.  call temp:= `setValue`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L425866.  v2:= temp @kind object;
  #L425868.  call temp:= `c`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.c:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind static;
  #L42586e.  v3:= temp @kind object;
  #L425870.  call temp:= `setOutputPrefixType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L425876.  v2:= temp @kind object;
  #L425878.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42587e.  v2:= temp @kind object;
  #L425880.  v2:= (`com.google.crypto.tink.proto.KeyTemplate`) v2 @kind object;
  #L425884.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.<init>:(Lcom/google/crypto/tink/proto/KeyTemplate;)V` @kind direct;
  #L42588a.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyTemplate` `b`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.b:()Lcom/google/crypto/tink/proto/KeyTemplate;` @AccessFlag  {
    temp;
    v0;

  #L425924.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L425928.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate$OutputPrefixType` `getOutputPrefixType`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4258fc.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L425900.  call temp:= `getOutputPrefixType`(v0) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L425906.  v0:= temp @kind object;
  #L425908.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/KeyTemplate;.a:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @kind static;
  #L42590e.  v0:= temp @kind object;
  #L425910.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeUrl`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42599c.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L4259a0.  call temp:= `getTypeUrl`(v0) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L4259a6.  v0:= temp @kind object;
  #L4259a8.  return v0 @kind object;
}
procedure `byte`[] `getValue`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.getValue:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42581c.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L425820.  call temp:= `getValue`(v0) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L425826.  v0:= temp @kind object;
  #L425828.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L42582e.  v0:= temp @kind object;
  #L425830.  return v0 @kind object;
}
