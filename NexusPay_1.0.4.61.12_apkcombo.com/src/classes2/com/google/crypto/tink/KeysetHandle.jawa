record `com.google.crypto.tink.KeysetHandle` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.crypto.tink.proto.Keyset` `com.google.crypto.tink.KeysetHandle.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.KeysetHandle` v0 @kind this, `com.google.crypto.tink.proto.Keyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4260d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4260da.  v0.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` := v1 @kind object;
  #L4260de.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.proto.Keyset` v4 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L426160.  call temp:= `getKeyList`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L426166.  v4:= temp @kind object;
  #L426168.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42616e.  v4:= temp @kind object;
  #L426170.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L426176.  v0:= temp;
  #L426178.  if v0 == 0 then goto L42621c;
  #L42617c.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L426182.  v0:= temp @kind object;
  #L426184.  v0:= (`com.google.crypto.tink.proto.Keyset$Key`) v0 @kind object;
  #L426188.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L42618e.  v1:= temp @kind object;
  #L426190.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L426196.  v1:= temp @kind object;
  #L426198.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.UNKNOWN_KEYMATERIAL` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42619c.  if v1 == v2 then goto L4261d2;
  #L4261a0.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L4261a6.  v1:= temp @kind object;
  #L4261a8.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L4261ae.  v1:= temp @kind object;
  #L4261b0.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L4261b4.  if v1 == v2 then goto L4261d2;
  #L4261b8.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L4261be.  v1:= temp @kind object;
  #L4261c0.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L4261c6.  v1:= temp @kind object;
  #L4261c8.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L4261cc.  if v1 == v2 then goto L4261d2;
  #L4261d0.  goto L426170;
  #L4261d2.  v4:= new `java.security.GeneralSecurityException`;
  #L4261d6.  v1:= 2I;
  #L4261d8.  v1:= new `java.lang.Object`[v1];
  #L4261dc.  v2:= 0I;
  #L4261de.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L4261e4.  v3:= temp @kind object;
  #L4261e6.  call temp:= `getKeyMaterialType`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L4261ec.  v3:= temp @kind object;
  #L4261ee.  v1[v2]:= v3 @kind object;
  #L4261f2.  v2:= 1I;
  #L4261f4.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L4261fa.  v0:= temp @kind object;
  #L4261fc.  call temp:= `getTypeUrl`(v0) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L426202.  v0:= temp @kind object;
  #L426204.  v1[v2]:= v0 @kind object;
  #L426208.  v0:= "keyset contains key material of type %s for type url %s" @kind object;
  #L42620c.  call temp:= `format`(v0, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L426212.  v0:= temp @kind object;
  #L426214.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42621a.  throw v4;
  #L42621c.  return @kind void;
}
procedure `void` `assertEnoughEncryptedKeyMaterial`(`com.google.crypto.tink.proto.EncryptedKeyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughEncryptedKeyMaterial:(Lcom/google/crypto/tink/proto/EncryptedKeyset;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4260f0.  if v1 == 0 then goto L42610a;
  #L4260f4.  call temp:= `getEncryptedKeyset`(v1) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.getEncryptedKeyset:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L4260fa.  v1:= temp @kind object;
  #L4260fc.  call temp:= `size`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L426102.  v1:= temp;
  #L426104.  if v1 == 0 then goto L42610a;
  #L426108.  return @kind void;
  #L42610a.  v1:= new `java.security.GeneralSecurityException`;
  #L42610e.  v0:= "empty keyset" @kind object;
  #L426112.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L426118.  throw v1;
}
procedure `void` `assertEnoughKeyMaterial`(`com.google.crypto.tink.proto.Keyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughKeyMaterial:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42612c.  if v1 == 0 then goto L42613e;
  #L426130.  call temp:= `getKeyCount`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyCount:()I` @kind virtual;
  #L426136.  v1:= temp;
  #L426138.  if v1 <= 0 then goto L42613e;
  #L42613c.  return @kind void;
  #L42613e.  v1:= new `java.security.GeneralSecurityException`;
  #L426142.  v0:= "empty keyset" @kind object;
  #L426146.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42614c.  throw v1;
}
procedure `com.google.crypto.tink.proto.KeyData` `b`(`com.google.crypto.tink.proto.KeyData` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.b:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L425f08.  call temp:= `getKeyMaterialType`(v2) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L425f0e.  v0:= temp @kind object;
  #L425f10.  v1:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L425f14.  if v0 != v1 then goto L425f38;
  #L425f18.  call temp:= `getTypeUrl`(v2) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L425f1e.  v0:= temp @kind object;
  #L425f20.  call temp:= `getValue`(v2) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L425f26.  v2:= temp @kind object;
  #L425f28.  call temp:= `getPublicKeyData`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.getPublicKeyData:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L425f2e.  v2:= temp @kind object;
  #L425f30.  call `h`(v2) @signature `Lcom/google/crypto/tink/KeysetHandle;.h:(Lcom/google/crypto/tink/proto/KeyData;)V` @kind static;
  #L425f36.  return v2 @kind object;
  #L425f38.  v2:= new `java.security.GeneralSecurityException`;
  #L425f3c.  v0:= "The keyset contains a non-private key" @kind object;
  #L425f40.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425f46.  throw v2;
}
procedure `com.google.crypto.tink.proto.Keyset` `c`(`com.google.crypto.tink.proto.EncryptedKeyset` v1 @kind object, `com.google.crypto.tink.Aead` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.c:(Lcom/google/crypto/tink/proto/EncryptedKeyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L425f58.  call temp:= `getEncryptedKeyset`(v1) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.getEncryptedKeyset:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L425f5e.  v1:= temp @kind object;
  #L425f60.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L425f66.  v1:= temp @kind object;
  #L425f68.  v0:= 0I;
  #L425f6a.  v0:= new `byte`[v0];
  #L425f6e.  call temp:= `decrypt`(v2, v1, v0) @signature `Lcom/google/crypto/tink/Aead;.decrypt:([B[B)[B` @kind interface;
  #L425f74.  v1:= temp @kind object;
  #L425f76.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L425f7c.  v2:= temp @kind object;
  #L425f7e.  call temp:= `parseFrom`(v1, v2) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:([BLcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L425f84.  v1:= temp @kind object;
  #L425f86.  call `assertEnoughKeyMaterial`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughKeyMaterial:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L425f8c.  return v1 @kind object;
  #L425f8e.  v1:= new `java.security.GeneralSecurityException`;
  #L425f92.  v2:= "invalid keyset, corrupted key material" @kind object;
  #L425f96.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425f9c.  throw v1;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L425f58..L425f8c] goto L425f8e;
}
procedure `com.google.crypto.tink.proto.EncryptedKeyset` `d`(`com.google.crypto.tink.proto.Keyset` v3 @kind object, `com.google.crypto.tink.Aead` v4 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.d:(Lcom/google/crypto/tink/proto/Keyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/EncryptedKeyset;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L425e4c.  call temp:= `toByteArray`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L425e52.  v0:= temp @kind object;
  #L425e54.  v1:= 0I;
  #L425e56.  v2:= new `byte`[v1];
  #L425e5a.  call temp:= `encrypt`(v4, v0, v2) @signature `Lcom/google/crypto/tink/Aead;.encrypt:([B[B)[B` @kind interface;
  #L425e60.  v0:= temp @kind object;
  #L425e62.  v1:= new `byte`[v1];
  #L425e66.  call temp:= `decrypt`(v4, v0, v1) @signature `Lcom/google/crypto/tink/Aead;.decrypt:([B[B)[B` @kind interface;
  #L425e6c.  v4:= temp @kind object;
  #L425e6e.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L425e74.  v1:= temp @kind object;
  #L425e76.  call temp:= `parseFrom`(v4, v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:([BLcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L425e7c.  v4:= temp @kind object;
  #L425e7e.  call temp:= `equals`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L425e84.  v4:= temp;
  #L425e86.  if v4 == 0 then goto L425ec0;
  #L425e8a.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.newBuilder:()Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;` @kind static;
  #L425e90.  v4:= temp @kind object;
  #L425e92.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L425e98.  v0:= temp @kind object;
  #L425e9a.  call temp:= `setEncryptedKeyset`(v4, v0) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;.setEncryptedKeyset:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;` @kind virtual;
  #L425ea0.  v4:= temp @kind object;
  #L425ea2.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/a;.b:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/proto/KeysetInfo;` @kind static;
  #L425ea8.  v3:= temp @kind object;
  #L425eaa.  call temp:= `setKeysetInfo`(v4, v3) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;.setKeysetInfo:(Lcom/google/crypto/tink/proto/KeysetInfo;)Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;` @kind virtual;
  #L425eb0.  v3:= temp @kind object;
  #L425eb2.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L425eb8.  v3:= temp @kind object;
  #L425eba.  v3:= (`com.google.crypto.tink.proto.EncryptedKeyset`) v3 @kind object;
  #L425ebe.  return v3 @kind object;
  #L425ec0.  v3:= new `java.security.GeneralSecurityException`;
  #L425ec4.  v4:= "cannot encrypt keyset" @kind object;
  #L425ec8.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425ece.  throw v3;
  #L425ed0.  v3:= new `java.security.GeneralSecurityException`;
  #L425ed4.  v4:= "invalid keyset, corrupted key material" @kind object;
  #L425ed8.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425ede.  throw v3;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L425e62..L425e86] goto L425ed0;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L425ec0..L425ed0] goto L425ed0;
}
procedure `com.google.crypto.tink.KeysetHandle` `e`(`com.google.crypto.tink.proto.Keyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag STATIC_FINAL {
    temp;
    v0;

  #L425c34.  call `assertEnoughKeyMaterial`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughKeyMaterial:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L425c3a.  v0:= new `com.google.crypto.tink.KeysetHandle`;
  #L425c3e.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind direct;
  #L425c44.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`com.google.crypto.tink.KeysetHandle` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.g:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;

  #L42608c.  call temp:= `getPrimitives`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L426092.  v2:= temp @kind object;
  #L426094.  call temp:= `wrap`(v2, v1) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L42609a.  v1:= temp @kind object;
  #L42609c.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeysetHandle` `generateNew`(`com.google.crypto.tink.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.generateNew:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L425c58.  call temp:= `withEmptyKeyset`() @signature `Lcom/google/crypto/tink/KeysetManager;.withEmptyKeyset:()Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L425c5e.  v0:= temp @kind object;
  #L425c60.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/KeyTemplate;.b:()Lcom/google/crypto/tink/proto/KeyTemplate;` @kind virtual;
  #L425c66.  v1:= temp @kind object;
  #L425c68.  call temp:= `rotate`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.rotate:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L425c6e.  v1:= temp @kind object;
  #L425c70.  call temp:= `getKeysetHandle`(v1) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L425c76.  v1:= temp @kind object;
  #L425c78.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeysetHandle` `generateNew`(`com.google.crypto.tink.proto.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.generateNew:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L425c8c.  call temp:= `withEmptyKeyset`() @signature `Lcom/google/crypto/tink/KeysetManager;.withEmptyKeyset:()Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L425c92.  v0:= temp @kind object;
  #L425c94.  call temp:= `rotate`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.rotate:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L425c9a.  v1:= temp @kind object;
  #L425c9c.  call temp:= `getKeysetHandle`(v1) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L425ca2.  v1:= temp @kind object;
  #L425ca4.  return v1 @kind object;
}
procedure `void` `h`(`com.google.crypto.tink.proto.KeyData` v0 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.h:(Lcom/google/crypto/tink/proto/KeyData;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L426230.  call temp:= `getPrimitive`(v0) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Lcom/google/crypto/tink/proto/KeyData;)Ljava/lang/Object;` @kind static;
  #L426236.  return @kind void;
}
procedure `com.google.crypto.tink.KeysetHandle` `read`(`com.google.crypto.tink.KeysetReader` v1 @kind object, `com.google.crypto.tink.Aead` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.read:(Lcom/google/crypto/tink/KeysetReader;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L425d80.  call temp:= `readEncrypted`(v1) @signature `Lcom/google/crypto/tink/KeysetReader;.readEncrypted:()Lcom/google/crypto/tink/proto/EncryptedKeyset;` @kind interface;
  #L425d86.  v1:= temp @kind object;
  #L425d88.  call `assertEnoughEncryptedKeyMaterial`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughEncryptedKeyMaterial:(Lcom/google/crypto/tink/proto/EncryptedKeyset;)V` @kind static;
  #L425d8e.  v0:= new `com.google.crypto.tink.KeysetHandle`;
  #L425d92.  call temp:= `c`(v1, v2) @signature `Lcom/google/crypto/tink/KeysetHandle;.c:(Lcom/google/crypto/tink/proto/EncryptedKeyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L425d98.  v1:= temp @kind object;
  #L425d9a.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind direct;
  #L425da0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetHandle` `readNoSecret`(`com.google.crypto.tink.KeysetReader` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.readNoSecret:(Lcom/google/crypto/tink/KeysetReader;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L425e04.  call temp:= `read`(v1) @signature `Lcom/google/crypto/tink/KeysetReader;.read:()Lcom/google/crypto/tink/proto/Keyset;` @kind interface;
  #L425e0a.  v1:= temp @kind object;
  #L425e0c.  call `a`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L425e12.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L425e18.  v1:= temp @kind object;
  #L425e1a.  return v1 @kind object;
  #L425e1c.  v1:= new `java.security.GeneralSecurityException`;
  #L425e20.  v0:= "invalid keyset" @kind object;
  #L425e24.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425e2a.  throw v1;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L425e04..L425e1a] goto L425e1c;
}
procedure `com.google.crypto.tink.KeysetHandle` `readNoSecret`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.readNoSecret:([B)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L425db4.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L425dba.  v0:= temp @kind object;
  #L425dbc.  call temp:= `parseFrom`(v1, v0) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:([BLcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L425dc2.  v1:= temp @kind object;
  #L425dc4.  call `a`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L425dca.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L425dd0.  v1:= temp @kind object;
  #L425dd2.  return v1 @kind object;
  #L425dd4.  v1:= new `java.security.GeneralSecurityException`;
  #L425dd8.  v0:= "invalid keyset" @kind object;
  #L425ddc.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425de2.  throw v1;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L425db4..L425dd2] goto L425dd4;
}
procedure `com.google.crypto.tink.proto.Keyset` `f`(`com.google.crypto.tink.KeysetHandle` v1 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag  {
    temp;
    v0;

  #L425fc0.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L425fc4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeysetInfo` `getKeysetInfo`(`com.google.crypto.tink.KeysetHandle` v1 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.getKeysetInfo:()Lcom/google/crypto/tink/proto/KeysetInfo;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L425fd8.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L425fdc.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/a;.b:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/proto/KeysetInfo;` @kind static;
  #L425fe2.  v0:= temp @kind object;
  #L425fe4.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.KeysetHandle` v0 @kind this, `com.google.crypto.tink.KeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.getPrimitive:(Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L425ff8.  if v1 == 0 then goto L42600e;
  #L425ffc.  call temp:= `getPrimitives`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L426002.  v1:= temp @kind object;
  #L426004.  call temp:= `wrap`(v1) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @kind static;
  #L42600a.  v1:= temp @kind object;
  #L42600c.  return v1 @kind object;
  #L42600e.  v1:= new `java.lang.IllegalArgumentException`;
  #L426012.  v2:= "customKeyManager must be non-null." @kind object;
  #L426016.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42601c.  throw v1;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.KeysetHandle` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.getPrimitive:(Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L426030.  call temp:= `getInputPrimitive`(v4) @signature `Lcom/google/crypto/tink/Registry;.getInputPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L426036.  v0:= temp @kind object;
  #L426038.  if v0 == 0 then goto L426046;
  #L42603c.  call temp:= `g`(v3, v4, v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.g:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;` @kind direct;
  #L426042.  v4:= temp @kind object;
  #L426044.  return v4 @kind object;
  #L426046.  v0:= new `java.security.GeneralSecurityException`;
  #L42604a.  v1:= new `java.lang.StringBuilder`;
  #L42604e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L426054.  v2:= "No wrapper found for " @kind object;
  #L426058.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42605e.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L426064.  v4:= temp @kind object;
  #L426066.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42606c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L426072.  v4:= temp @kind object;
  #L426074.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42607a.  throw v0;
}
procedure `com.google.crypto.tink.KeysetHandle` `getPublicKeysetHandle`(`com.google.crypto.tink.KeysetHandle` v5 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.getPublicKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L425cb8.  v0:= v5.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L425cbc.  if v0 == 0 then goto L425d5e;
  #L425cc0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind static;
  #L425cc6.  v0:= temp @kind object;
  #L425cc8.  v1:= v5.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L425ccc.  call temp:= `getKeyList`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L425cd2.  v1:= temp @kind object;
  #L425cd4.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L425cda.  v1:= temp @kind object;
  #L425cdc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L425ce2.  v2:= temp;
  #L425ce4.  if v2 == 0 then goto L425d34;
  #L425ce8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L425cee.  v2:= temp @kind object;
  #L425cf0.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L425cf4.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L425cfa.  v3:= temp @kind object;
  #L425cfc.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/KeysetHandle;.b:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L425d02.  v3:= temp @kind object;
  #L425d04.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind static;
  #L425d0a.  v4:= temp @kind object;
  #L425d0c.  call temp:= `mergeFrom`(v4, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;)Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;` @kind virtual;
  #L425d12.  v2:= temp @kind object;
  #L425d14.  v2:= (`com.google.crypto.tink.proto.Keyset$Key$Builder`) v2 @kind object;
  #L425d18.  call temp:= `setKeyData`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setKeyData:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L425d1e.  v2:= temp @kind object;
  #L425d20.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L425d26.  v2:= temp @kind object;
  #L425d28.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L425d2c.  call temp:= `addKey`(v0, v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.addKey:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L425d32.  goto L425cdc;
  #L425d34.  v1:= v5.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L425d38.  call temp:= `getPrimaryKeyId`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L425d3e.  v1:= temp;
  #L425d40.  call temp:= `setPrimaryKeyId`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.setPrimaryKeyId:(I)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L425d46.  v1:= new `com.google.crypto.tink.KeysetHandle`;
  #L425d4a.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L425d50.  v0:= temp @kind object;
  #L425d52.  v0:= (`com.google.crypto.tink.proto.Keyset`) v0 @kind object;
  #L425d56.  call `<init>`(v1, v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind direct;
  #L425d5c.  return v1 @kind object;
  #L425d5e.  v0:= new `java.security.GeneralSecurityException`;
  #L425d62.  v1:= "cleartext keyset is not available" @kind object;
  #L425d66.  call `<init>`(v0, v1) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425d6c.  throw v0;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.KeysetHandle` v1 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4260b0.  call temp:= `getKeysetInfo`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.getKeysetInfo:()Lcom/google/crypto/tink/proto/KeysetInfo;` @kind virtual;
  #L4260b6.  v0:= temp @kind object;
  #L4260b8.  call temp:= `toString`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;.toString:()Ljava/lang/String;` @kind virtual;
  #L4260be.  v0:= temp @kind object;
  #L4260c0.  return v0 @kind object;
}
procedure `void` `write`(`com.google.crypto.tink.KeysetHandle` v1 @kind this, `com.google.crypto.tink.KeysetWriter` v2 @kind object, `com.google.crypto.tink.Aead` v3 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.write:(Lcom/google/crypto/tink/KeysetWriter;Lcom/google/crypto/tink/Aead;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L426248.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L42624c.  call temp:= `d`(v0, v3) @signature `Lcom/google/crypto/tink/KeysetHandle;.d:(Lcom/google/crypto/tink/proto/Keyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/EncryptedKeyset;` @kind static;
  #L426252.  v3:= temp @kind object;
  #L426254.  call `write`(v2, v3) @signature `Lcom/google/crypto/tink/KeysetWriter;.write:(Lcom/google/crypto/tink/proto/EncryptedKeyset;)V` @kind interface;
  #L42625a.  return @kind void;
}
procedure `void` `writeNoSecret`(`com.google.crypto.tink.KeysetHandle` v1 @kind this, `com.google.crypto.tink.KeysetWriter` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.writeNoSecret:(Lcom/google/crypto/tink/KeysetWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42626c.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L426270.  call `a`(v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L426276.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L42627a.  call `write`(v2, v0) @signature `Lcom/google/crypto/tink/KeysetWriter;.write:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind interface;
  #L426280.  return @kind void;
}
