record `com.google.crypto.tink.PrimitiveSet` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.ConcurrentMap` `com.google.crypto.tink.PrimitiveSet.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.PrimitiveSet$Entry` `com.google.crypto.tink.PrimitiveSet.b` @AccessFlag PRIVATE;
  `java.lang.Class` `com.google.crypto.tink.PrimitiveSet.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.<init>:(Ljava/lang/Class;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4271e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4271ee.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4271f2.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4271f8.  v1.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L4271fc.  v1.`com.google.crypto.tink.PrimitiveSet.c` @type ^`java.lang.Class` := v2 @kind object;
  #L427200.  return @kind void;
}
procedure `com.google.crypto.tink.PrimitiveSet` `newPrimitiveSet`(`java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.newPrimitiveSet:(Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L427034.  v0:= new `com.google.crypto.tink.PrimitiveSet`;
  #L427038.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42703e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet$Entry` `addPrimitive`(`com.google.crypto.tink.PrimitiveSet` v8 @kind this, `java.lang.Object` v9 @kind object, `com.google.crypto.tink.proto.Keyset$Key` v10 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.addPrimitive:(Ljava/lang/Object;Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/PrimitiveSet$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L427050.  call temp:= `getStatus`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L427056.  v0:= temp @kind object;
  #L427058.  v1:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L42705c.  if v0 != v1 then goto L4270f8;
  #L427060.  v0:= new `com.google.crypto.tink.PrimitiveSet$Entry`;
  #L427064.  call temp:= `getOutputPrefix`(v10) @signature `Lcom/google/crypto/tink/CryptoFormat;.getOutputPrefix:(Lcom/google/crypto/tink/proto/Keyset$Key;)[B` @kind static;
  #L42706a.  v4:= temp @kind object;
  #L42706c.  call temp:= `getStatus`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L427072.  v5:= temp @kind object;
  #L427074.  call temp:= `getOutputPrefixType`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L42707a.  v6:= temp @kind object;
  #L42707c.  call temp:= `getKeyId`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L427082.  v7:= temp;
  #L427084.  v2:= v0 @kind object;
  #L427086.  v3:= v9 @kind object;
  #L427088.  call `<init>`(v2, v3, v4, v5, v6, v7) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.<init>:(Ljava/lang/Object;[BLcom/google/crypto/tink/proto/KeyStatusType;Lcom/google/crypto/tink/proto/OutputPrefixType;I)V` @kind direct;
  #L42708e.  v9:= new `java.util.ArrayList`;
  #L427092.  call `<init>`(v9) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L427098.  call temp:= `add`(v9, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42709e.  v10:= new `com.google.crypto.tink.PrimitiveSet$b`;
  #L4270a2.  call temp:= `getIdentifier`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L4270a8.  v1:= temp @kind object;
  #L4270aa.  v2:= 0I;
  #L4270ac.  call `<init>`(v10, v1, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$b;.<init>:([BLcom/google/crypto/tink/PrimitiveSet$a;)V` @kind direct;
  #L4270b2.  v1:= v8.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4270b6.  call temp:= `unmodifiableList`(v9) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4270bc.  v9:= temp @kind object;
  #L4270be.  call temp:= `put`(v1, v10, v9) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4270c4.  v9:= temp @kind object;
  #L4270c6.  v9:= (`java.util.List`) v9 @kind object;
  #L4270ca.  if v9 == 0 then goto L4270f6;
  #L4270ce.  v1:= new `java.util.ArrayList`;
  #L4270d2.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4270d8.  call temp:= `addAll`(v1, v9) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L4270de.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4270e4.  v9:= v8.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4270e8.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4270ee.  v1:= temp @kind object;
  #L4270f0.  call temp:= `put`(v9, v10, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4270f6.  return v0 @kind object;
  #L4270f8.  v9:= new `java.security.GeneralSecurityException`;
  #L4270fc.  v10:= "only ENABLED key is allowed" @kind object;
  #L427100.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427106.  throw v9;
}
procedure `java.util.Collection` `getAll`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getAll:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427148.  v0:= v1.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42714c.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentMap;.values:()Ljava/util/Collection;` @kind interface;
  #L427152.  v0:= temp @kind object;
  #L427154.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet$Entry` `getPrimary`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427118.  v0:= v1.`com.google.crypto.tink.PrimitiveSet.b` @type ^`com.google.crypto.tink.PrimitiveSet$Entry` @kind object;
  #L42711c.  return v0 @kind object;
}
procedure `java.util.List` `getPrimitive`(`com.google.crypto.tink.PrimitiveSet` v0 @kind this, `com.google.crypto.tink.proto.Keyset$Key` v1 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:(Lcom/google/crypto/tink/proto/Keyset$Key;)Ljava/util/List;` @AccessFlag PROTECTED {
    temp;

  #L4271a4.  call temp:= `getOutputPrefix`(v1) @signature `Lcom/google/crypto/tink/CryptoFormat;.getOutputPrefix:(Lcom/google/crypto/tink/proto/Keyset$Key;)[B` @kind static;
  #L4271aa.  v1:= temp @kind object;
  #L4271ac.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L4271b2.  v1:= temp @kind object;
  #L4271b4.  return v1 @kind object;
}
procedure `java.util.List` `getPrimitive`(`com.google.crypto.tink.PrimitiveSet` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L427168.  v0:= v3.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42716c.  v1:= new `com.google.crypto.tink.PrimitiveSet$b`;
  #L427170.  v2:= 0I;
  #L427172.  call `<init>`(v1, v4, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$b;.<init>:([BLcom/google/crypto/tink/PrimitiveSet$a;)V` @kind direct;
  #L427178.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42717e.  v4:= temp @kind object;
  #L427180.  v4:= (`java.util.List`) v4 @kind object;
  #L427184.  if v4 == 0 then goto L42718a;
  #L427188.  goto L427192;
  #L42718a.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L427190.  v4:= temp @kind object;
  #L427192.  return v4 @kind object;
}
procedure `java.lang.Class` `getPrimitiveClass`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427130.  v0:= v1.`com.google.crypto.tink.PrimitiveSet.c` @type ^`java.lang.Class` @kind object;
  #L427134.  return v0 @kind object;
}
procedure `java.util.List` `getRawPrimitives`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4271c8.  v0:= `@@com.google.crypto.tink.CryptoFormat.RAW_PREFIX` @type ^`byte`[] @kind object;
  #L4271cc.  call temp:= `getPrimitive`(v1, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L4271d2.  v0:= temp @kind object;
  #L4271d4.  return v0 @kind object;
}
procedure `void` `setPrimary`(`com.google.crypto.tink.PrimitiveSet` v2 @kind this, `com.google.crypto.tink.PrimitiveSet$Entry` v3 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.setPrimary:(Lcom/google/crypto/tink/PrimitiveSet$Entry;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L427214.  if v3 == 0 then goto L42726a;
  #L427218.  call temp:= `getStatus`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L42721e.  v0:= temp @kind object;
  #L427220.  v1:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L427224.  if v0 != v1 then goto L42725a;
  #L427228.  call temp:= `getIdentifier`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L42722e.  v0:= temp @kind object;
  #L427230.  call temp:= `getPrimitive`(v2, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L427236.  v0:= temp @kind object;
  #L427238.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L42723e.  v0:= temp;
  #L427240.  if v0 != 0 then goto L42724a;
  #L427244.  v2.`com.google.crypto.tink.PrimitiveSet.b` @type ^`com.google.crypto.tink.PrimitiveSet$Entry` := v3 @kind object;
  #L427248.  return @kind void;
  #L42724a.  v3:= new `java.lang.IllegalArgumentException`;
  #L42724e.  v0:= "the primary entry cannot be set to an entry which is not held by this primitive set" @kind object;
  #L427252.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427258.  throw v3;
  #L42725a.  v3:= new `java.lang.IllegalArgumentException`;
  #L42725e.  v0:= "the primary entry has to be ENABLED" @kind object;
  #L427262.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427268.  throw v3;
  #L42726a.  v3:= new `java.lang.IllegalArgumentException`;
  #L42726e.  v0:= "the primary entry must be non-null" @kind object;
  #L427272.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427278.  throw v3;
}
