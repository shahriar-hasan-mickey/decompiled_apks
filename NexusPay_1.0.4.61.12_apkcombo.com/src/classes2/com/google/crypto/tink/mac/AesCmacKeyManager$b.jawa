record `com.google.crypto.tink.mac.AesCmacKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.AesCmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.<init>:(Lcom/google/crypto/tink/mac/AesCmacKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f5ec.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42f5f2.  return @kind void;
}
procedure `com.google.crypto.tink.proto.AesCmacKey` `a`(`com.google.crypto.tink.mac.AesCmacKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesCmacKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesCmacKeyFormat;)Lcom/google/crypto/tink/proto/AesCmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f52c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacKey$Builder;` @kind static;
  #L42f532.  v0:= temp @kind object;
  #L42f534.  v1:= 0I;
  #L42f536.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesCmacKey$Builder;` @kind virtual;
  #L42f53c.  v0:= temp @kind object;
  #L42f53e.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L42f544.  v1:= temp;
  #L42f546.  call temp:= `randBytes`(v1) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L42f54c.  v1:= temp @kind object;
  #L42f54e.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42f554.  v1:= temp @kind object;
  #L42f556.  call temp:= `setKeyValue`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacKey$Builder;` @kind virtual;
  #L42f55c.  v0:= temp @kind object;
  #L42f55e.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesCmacParams;` @kind virtual;
  #L42f564.  v3:= temp @kind object;
  #L42f566.  call temp:= `setParams`(v0, v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesCmacParams;)Lcom/google/crypto/tink/proto/AesCmacKey$Builder;` @kind virtual;
  #L42f56c.  v3:= temp @kind object;
  #L42f56e.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42f574.  v3:= temp @kind object;
  #L42f576.  v3:= (`com.google.crypto.tink.proto.AesCmacKey`) v3 @kind object;
  #L42f57a.  return v3 @kind object;
}
procedure `com.google.crypto.tink.proto.AesCmacKeyFormat` `b`(`com.google.crypto.tink.mac.AesCmacKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f58c.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42f592.  v0:= temp @kind object;
  #L42f594.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesCmacKeyFormat;` @kind static;
  #L42f59a.  v2:= temp @kind object;
  #L42f59c.  return v2 @kind object;
}
procedure `void` `c`(`com.google.crypto.tink.mac.AesCmacKeyManager$b` v1 @kind this, `com.google.crypto.tink.proto.AesCmacKeyFormat` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.c:(Lcom/google/crypto/tink/proto/AesCmacKeyFormat;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f604.  call temp:= `getParams`(v2) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesCmacParams;` @kind virtual;
  #L42f60a.  v0:= temp @kind object;
  #L42f60c.  call `b`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.b:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @kind static;
  #L42f612.  call temp:= `getKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L42f618.  v2:= temp;
  #L42f61a.  call `c`(v2) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.c:(I)V` @kind static;
  #L42f620.  return @kind void;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.mac.AesCmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42f5cc.  v1:= (`com.google.crypto.tink.proto.AesCmacKeyFormat`) v1 @kind object;
  #L42f5d0.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesCmacKeyFormat;)Lcom/google/crypto/tink/proto/AesCmacKey;` @kind virtual;
  #L42f5d6.  v1:= temp @kind object;
  #L42f5d8.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.mac.AesCmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42f5b0.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacKeyFormat;` @kind virtual;
  #L42f5b6.  v1:= temp @kind object;
  #L42f5b8.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.mac.AesCmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42f634.  v1:= (`com.google.crypto.tink.proto.AesCmacKeyFormat`) v1 @kind object;
  #L42f638.  call `c`(v0, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.c:(Lcom/google/crypto/tink/proto/AesCmacKeyFormat;)V` @kind virtual;
  #L42f63e.  return @kind void;
}
