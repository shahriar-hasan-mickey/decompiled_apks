record `com.google.crypto.tink.mac.AesCmacKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.AesCmacKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42f7f4.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesCmacKey` @kind object;
  #L42f7f8.  v1:= 1I;
  #L42f7fa.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L42f7fe.  v2:= new `com.google.crypto.tink.mac.AesCmacKeyManager$a`;
  #L42f802.  v3:= constclass @type ^`com.google.crypto.tink.Mac` @kind object;
  #L42f806.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42f80c.  v3:= 0I;
  #L42f80e.  v1[v3]:= v2 @kind object;
  #L42f812.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L42f818.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256CmacTemplate`() @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.aes256CmacTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42f650.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind static;
  #L42f656.  v0:= temp @kind object;
  #L42f658.  v1:= 32I;
  #L42f65c.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L42f662.  v0:= temp @kind object;
  #L42f664.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind static;
  #L42f66a.  v1:= temp @kind object;
  #L42f66c.  v2:= 16I;
  #L42f670.  call temp:= `setTagSize`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams$Builder;.setTagSize:(I)Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind virtual;
  #L42f676.  v1:= temp @kind object;
  #L42f678.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42f67e.  v1:= temp @kind object;
  #L42f680.  v1:= (`com.google.crypto.tink.proto.AesCmacParams`) v1 @kind object;
  #L42f684.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesCmacParams;)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L42f68a.  v0:= temp @kind object;
  #L42f68c.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42f692.  v0:= temp @kind object;
  #L42f694.  v0:= (`com.google.crypto.tink.proto.AesCmacKeyFormat`) v0 @kind object;
  #L42f698.  v1:= new `com.google.crypto.tink.mac.AesCmacKeyManager`;
  #L42f69c.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @kind direct;
  #L42f6a2.  call temp:= `getKeyType`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42f6a8.  v1:= temp @kind object;
  #L42f6aa.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L42f6b0.  v0:= temp @kind object;
  #L42f6b2.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42f6b6.  call temp:= `create`(v1, v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42f6bc.  v0:= temp @kind object;
  #L42f6be.  return v0 @kind object;
}
procedure `void` `b`(`com.google.crypto.tink.proto.AesCmacParams` v0 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.b:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L42f82c.  call `d`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.d:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @kind static;
  #L42f832.  return @kind void;
}
procedure `void` `c`(`int` v0 ) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.c:(I)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L42f844.  call `e`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.e:(I)V` @kind static;
  #L42f84a.  return @kind void;
}
procedure `void` `d`(`com.google.crypto.tink.proto.AesCmacParams` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.d:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L42f8e8.  call temp:= `getTagSize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.getTagSize:()I` @kind virtual;
  #L42f8ee.  v0:= temp;
  #L42f8f0.  v1:= 10I;
  #L42f8f4.  if v0 < v1 then goto L42f91a;
  #L42f8f8.  call temp:= `getTagSize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.getTagSize:()I` @kind virtual;
  #L42f8fe.  v2:= temp;
  #L42f900.  v0:= 16I;
  #L42f904.  if v2 > v0 then goto L42f90a;
  #L42f908.  return @kind void;
  #L42f90a.  v2:= new `java.security.GeneralSecurityException`;
  #L42f90e.  v0:= "tag size too long" @kind object;
  #L42f912.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42f918.  throw v2;
  #L42f91a.  v2:= new `java.security.GeneralSecurityException`;
  #L42f91e.  v0:= "tag size too short" @kind object;
  #L42f922.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42f928.  throw v2;
}
procedure `void` `e`(`int` v1 ) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.e:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42f93c.  v0:= 32I;
  #L42f940.  if v1 != v0 then goto L42f946;
  #L42f944.  return @kind void;
  #L42f946.  v1:= new `java.security.GeneralSecurityException`;
  #L42f94a.  v0:= "AesCmacKey size wrong, must be 32 bytes" @kind object;
  #L42f94e.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42f954.  throw v1;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256CmacTemplate`() @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.rawAes256CmacTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42f6d0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind static;
  #L42f6d6.  v0:= temp @kind object;
  #L42f6d8.  v1:= 32I;
  #L42f6dc.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L42f6e2.  v0:= temp @kind object;
  #L42f6e4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind static;
  #L42f6ea.  v1:= temp @kind object;
  #L42f6ec.  v2:= 16I;
  #L42f6f0.  call temp:= `setTagSize`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams$Builder;.setTagSize:(I)Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind virtual;
  #L42f6f6.  v1:= temp @kind object;
  #L42f6f8.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42f6fe.  v1:= temp @kind object;
  #L42f700.  v1:= (`com.google.crypto.tink.proto.AesCmacParams`) v1 @kind object;
  #L42f704.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesCmacParams;)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L42f70a.  v0:= temp @kind object;
  #L42f70c.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42f712.  v0:= temp @kind object;
  #L42f714.  v0:= (`com.google.crypto.tink.proto.AesCmacKeyFormat`) v0 @kind object;
  #L42f718.  v1:= new `com.google.crypto.tink.mac.AesCmacKeyManager`;
  #L42f71c.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @kind direct;
  #L42f722.  call temp:= `getKeyType`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42f728.  v1:= temp @kind object;
  #L42f72a.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L42f730.  v0:= temp @kind object;
  #L42f732.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42f736.  call temp:= `create`(v1, v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42f73c.  v0:= temp @kind object;
  #L42f73e.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42f85c.  v0:= new `com.google.crypto.tink.mac.AesCmacKeyManager`;
  #L42f860.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @kind direct;
  #L42f866.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L42f86c.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f7dc.  v0:= "type.googleapis.com/google.crypto.tink.AesCmacKey" @kind object;
  #L42f7e0.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f7c8.  v0:= 0I;
  #L42f7ca.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.mac.AesCmacKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f750.  v0:= new `com.google.crypto.tink.mac.AesCmacKeyManager$b`;
  #L42f754.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesCmacKeyFormat` @kind object;
  #L42f758.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.<init>:(Lcom/google/crypto/tink/mac/AesCmacKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L42f75e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f794.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42f798.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesCmacKey` `parseKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f770.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42f776.  v0:= temp @kind object;
  #L42f778.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesCmacKey;` @kind static;
  #L42f77e.  v2:= temp @kind object;
  #L42f780.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42f7ac.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacKey;` @kind virtual;
  #L42f7b2.  v1:= temp @kind object;
  #L42f7b4.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesCmacKey` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCmacKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f880.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.getVersion:()I` @kind virtual;
  #L42f886.  v0:= temp;
  #L42f888.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getVersion:()I` @kind virtual;
  #L42f88e.  v1:= temp;
  #L42f890.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42f896.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42f89c.  v0:= temp @kind object;
  #L42f89e.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L42f8a4.  v0:= temp;
  #L42f8a6.  call `e`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.e:(I)V` @kind static;
  #L42f8ac.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.getParams:()Lcom/google/crypto/tink/proto/AesCmacParams;` @kind virtual;
  #L42f8b2.  v3:= temp @kind object;
  #L42f8b4.  call `d`(v3) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.d:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @kind static;
  #L42f8ba.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42f8cc.  v1:= (`com.google.crypto.tink.proto.AesCmacKey`) v1 @kind object;
  #L42f8d0.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCmacKey;)V` @kind virtual;
  #L42f8d6.  return @kind void;
}
