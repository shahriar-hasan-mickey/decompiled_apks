record `com.google.crypto.tink.mac.HmacKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.HmacKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42fee4.  v0:= constclass @type ^`com.google.crypto.tink.proto.HmacKey` @kind object;
  #L42fee8.  v1:= 1I;
  #L42feea.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L42feee.  v2:= new `com.google.crypto.tink.mac.HmacKeyManager$a`;
  #L42fef2.  v3:= constclass @type ^`com.google.crypto.tink.Mac` @kind object;
  #L42fef6.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42fefc.  v3:= 0I;
  #L42fefe.  v1[v3]:= v2 @kind object;
  #L42ff02.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L42ff08.  return @kind void;
}
procedure `void` `b`(`com.google.crypto.tink.proto.HmacParams` v0 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.b:(Lcom/google/crypto/tink/proto/HmacParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L42ff1c.  call `d`(v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @kind static;
  #L42ff22.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`int` v1 , `int` v2 , `com.google.crypto.tink.proto.HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42fd28.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacParams;.newBuilder:()Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind static;
  #L42fd2e.  v0:= temp @kind object;
  #L42fd30.  call temp:= `setHash`(v0, v3) @signature `Lcom/google/crypto/tink/proto/HmacParams$Builder;.setHash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind virtual;
  #L42fd36.  v3:= temp @kind object;
  #L42fd38.  call temp:= `setTagSize`(v3, v2) @signature `Lcom/google/crypto/tink/proto/HmacParams$Builder;.setTagSize:(I)Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind virtual;
  #L42fd3e.  v2:= temp @kind object;
  #L42fd40.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42fd46.  v2:= temp @kind object;
  #L42fd48.  v2:= (`com.google.crypto.tink.proto.HmacParams`) v2 @kind object;
  #L42fd4c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;` @kind static;
  #L42fd52.  v3:= temp @kind object;
  #L42fd54.  call temp:= `setParams`(v3, v2) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/HmacParams;)Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;` @kind virtual;
  #L42fd5a.  v2:= temp @kind object;
  #L42fd5c.  call temp:= `setKeySize`(v2, v1) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;` @kind virtual;
  #L42fd62.  v1:= temp @kind object;
  #L42fd64.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42fd6a.  v1:= temp @kind object;
  #L42fd6c.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L42fd70.  v2:= new `com.google.crypto.tink.mac.HmacKeyManager`;
  #L42fd74.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.<init>:()V` @kind direct;
  #L42fd7a.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42fd80.  v2:= temp @kind object;
  #L42fd82.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L42fd88.  v1:= temp @kind object;
  #L42fd8a.  v3:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42fd8e.  call temp:= `create`(v2, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42fd94.  v1:= temp @kind object;
  #L42fd96.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.HmacParams` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42ffd4.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L42ffda.  v0:= temp;
  #L42ffdc.  v1:= 10I;
  #L42ffe0.  if v0 < v1 then goto L43007c;
  #L42ffe4.  v0:= `@@com.google.crypto.tink.mac.HmacKeyManager$c.a` @type ^`int`[] @kind object;
  #L42ffe8.  call temp:= `getHash`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L42ffee.  v1:= temp @kind object;
  #L42fff0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L42fff6.  v1:= temp;
  #L42fff8.  v0:= v0[v1];
  #L42fffc.  v1:= 1I;
  #L42fffe.  v2:= "tag size too big" @kind object;
  #L430002.  if v0 == v1 then goto L43005e;
  #L430006.  v1:= 2I;
  #L430008.  if v0 == v1 then goto L430040;
  #L43000c.  v1:= 3I;
  #L43000e.  if v0 != v1 then goto L430030;
  #L430012.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L430018.  v3:= temp;
  #L43001a.  v0:= 64I;
  #L43001e.  if v3 > v0 then goto L430024;
  #L430022.  goto L43006e;
  #L430024.  v3:= new `java.security.GeneralSecurityException`;
  #L430028.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43002e.  throw v3;
  #L430030.  v3:= new `java.security.GeneralSecurityException`;
  #L430034.  v0:= "unknown hash type" @kind object;
  #L430038.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43003e.  throw v3;
  #L430040.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L430046.  v3:= temp;
  #L430048.  v0:= 32I;
  #L43004c.  if v3 > v0 then goto L430052;
  #L430050.  goto L43006e;
  #L430052.  v3:= new `java.security.GeneralSecurityException`;
  #L430056.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43005c.  throw v3;
  #L43005e.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L430064.  v3:= temp;
  #L430066.  v0:= 20I;
  #L43006a.  if v3 > v0 then goto L430070;
  #L43006e.  return @kind void;
  #L430070.  v3:= new `java.security.GeneralSecurityException`;
  #L430074.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43007a.  throw v3;
  #L43007c.  v3:= new `java.security.GeneralSecurityException`;
  #L430080.  v0:= "tag size too small" @kind object;
  #L430084.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43008a.  throw v3;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha256HalfDigestTemplate`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha256HalfDigestTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42fda8.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42fdac.  v1:= 32I;
  #L42fdb0.  v2:= 16I;
  #L42fdb4.  call temp:= `c`(v1, v2, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42fdba.  v0:= temp @kind object;
  #L42fdbc.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha256Template`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42fdd0.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42fdd4.  v1:= 32I;
  #L42fdd8.  call temp:= `c`(v1, v1, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42fdde.  v0:= temp @kind object;
  #L42fde0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha512HalfDigestTemplate`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha512HalfDigestTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42fdf4.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42fdf8.  v1:= 64I;
  #L42fdfc.  v2:= 32I;
  #L42fe00.  call temp:= `c`(v1, v2, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42fe06.  v0:= temp @kind object;
  #L42fe08.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha512Template`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha512Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42fe1c.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42fe20.  v1:= 64I;
  #L42fe24.  call temp:= `c`(v1, v1, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42fe2a.  v0:= temp @kind object;
  #L42fe2c.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42ff34.  v0:= new `com.google.crypto.tink.mac.HmacKeyManager`;
  #L42ff38.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.<init>:()V` @kind direct;
  #L42ff3e.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L42ff44.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fecc.  v0:= "type.googleapis.com/google.crypto.tink.HmacKey" @kind object;
  #L42fed0.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42feb8.  v0:= 0I;
  #L42feba.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.mac.HmacKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fe40.  v0:= new `com.google.crypto.tink.mac.HmacKeyManager$b`;
  #L42fe44.  v1:= constclass @type ^`com.google.crypto.tink.proto.HmacKeyFormat` @kind object;
  #L42fe48.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.<init>:(Lcom/google/crypto/tink/mac/HmacKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L42fe4e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fe84.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42fe88.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.HmacKey` `parseKey`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fe60.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42fe66.  v0:= temp @kind object;
  #L42fe68.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/HmacKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/HmacKey;` @kind static;
  #L42fe6e.  v2:= temp @kind object;
  #L42fe70.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.mac.HmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42fe9c.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey;` @kind virtual;
  #L42fea2.  v1:= temp @kind object;
  #L42fea4.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.HmacKeyManager` v2 @kind this, `com.google.crypto.tink.proto.HmacKey` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/HmacKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ff58.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKey;.getVersion:()I` @kind virtual;
  #L42ff5e.  v0:= temp;
  #L42ff60.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L42ff66.  v1:= temp;
  #L42ff68.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42ff6e.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42ff74.  v0:= temp @kind object;
  #L42ff76.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L42ff7c.  v0:= temp;
  #L42ff7e.  v1:= 16I;
  #L42ff82.  if v0 < v1 then goto L42ff96;
  #L42ff86.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKey;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L42ff8c.  v3:= temp @kind object;
  #L42ff8e.  call `d`(v3) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @kind static;
  #L42ff94.  return @kind void;
  #L42ff96.  v3:= new `java.security.GeneralSecurityException`;
  #L42ff9a.  v0:= "key too short" @kind object;
  #L42ff9e.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ffa4.  throw v3;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.HmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42ffb8.  v1:= (`com.google.crypto.tink.proto.HmacKey`) v1 @kind object;
  #L42ffbc.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/HmacKey;)V` @kind virtual;
  #L42ffc2.  return @kind void;
}
