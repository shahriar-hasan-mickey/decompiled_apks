record `com.google.crypto.tink.mac.HmacKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.mac.HmacKeyManager` `com.google.crypto.tink.mac.HmacKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.mac.HmacKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.<init>:(Lcom/google/crypto/tink/mac/HmacKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42fc24.  v0.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` := v1 @kind object;
  #L42fc28.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42fc2e.  return @kind void;
}
procedure `com.google.crypto.tink.proto.HmacKey` `a`(`com.google.crypto.tink.mac.HmacKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.HmacKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.a:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)Lcom/google/crypto/tink/proto/HmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fa70.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacKey;.newBuilder:()Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind static;
  #L42fa76.  v0:= temp @kind object;
  #L42fa78.  v1:= v2.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` @kind object;
  #L42fa7c.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L42fa82.  v1:= temp;
  #L42fa84.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L42fa8a.  v0:= temp @kind object;
  #L42fa8c.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L42fa92.  v1:= temp @kind object;
  #L42fa94.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/HmacParams;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L42fa9a.  v0:= temp @kind object;
  #L42fa9c.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L42faa2.  v3:= temp;
  #L42faa4.  call temp:= `randBytes`(v3) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L42faaa.  v3:= temp @kind object;
  #L42faac.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42fab2.  v3:= temp @kind object;
  #L42fab4.  call temp:= `setKeyValue`(v0, v3) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L42faba.  v3:= temp @kind object;
  #L42fabc.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42fac2.  v3:= temp @kind object;
  #L42fac4.  v3:= (`com.google.crypto.tink.proto.HmacKey`) v3 @kind object;
  #L42fac8.  return v3 @kind object;
}
procedure `com.google.crypto.tink.proto.HmacKey` `b`(`com.google.crypto.tink.mac.HmacKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.HmacKeyFormat` v3 @kind object, `java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.b:(Lcom/google/crypto/tink/proto/HmacKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/HmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fadc.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getVersion:()I` @kind virtual;
  #L42fae2.  v0:= temp;
  #L42fae4.  v1:= v2.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` @kind object;
  #L42fae8.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L42faee.  v1:= temp;
  #L42faf0.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42faf6.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L42fafc.  v0:= temp;
  #L42fafe.  v0:= new `byte`[v0];
  #L42fb02.  call temp:= `read`(v4, v0) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L42fb08.  v4:= temp;
  #L42fb0a.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L42fb10.  v1:= temp;
  #L42fb12.  if v4 != v1 then goto L42fb60;
  #L42fb16.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacKey;.newBuilder:()Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind static;
  #L42fb1c.  v4:= temp @kind object;
  #L42fb1e.  v1:= v2.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` @kind object;
  #L42fb22.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L42fb28.  v1:= temp;
  #L42fb2a.  call temp:= `setVersion`(v4, v1) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L42fb30.  v4:= temp @kind object;
  #L42fb32.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L42fb38.  v3:= temp @kind object;
  #L42fb3a.  call temp:= `setParams`(v4, v3) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/HmacParams;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L42fb40.  v3:= temp @kind object;
  #L42fb42.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42fb48.  v4:= temp @kind object;
  #L42fb4a.  call temp:= `setKeyValue`(v3, v4) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L42fb50.  v3:= temp @kind object;
  #L42fb52.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42fb58.  v3:= temp @kind object;
  #L42fb5a.  v3:= (`com.google.crypto.tink.proto.HmacKey`) v3 @kind object;
  #L42fb5e.  return v3 @kind object;
  #L42fb60.  v3:= new `java.security.GeneralSecurityException`;
  #L42fb64.  v4:= "Not enough pseudorandomness given" @kind object;
  #L42fb68.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42fb6e.  throw v3;
  #L42fb70.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L42fb72.  v4:= new `java.security.GeneralSecurityException`;
  #L42fb76.  v0:= "Reading pseudorandomness failed" @kind object;
  #L42fb7a.  call `<init>`(v4, v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L42fb80.  throw v4;
  catch `java.io.IOException` @[L42fb02..L42fb70] goto L42fb70;
}
procedure `com.google.crypto.tink.proto.HmacKeyFormat` `c`(`com.google.crypto.tink.mac.HmacKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fba4.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42fbaa.  v0:= temp @kind object;
  #L42fbac.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/HmacKeyFormat;` @kind static;
  #L42fbb2.  v2:= temp @kind object;
  #L42fbb4.  return v2 @kind object;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42fbe4.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L42fbe8.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.a:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)Lcom/google/crypto/tink/proto/HmacKey;` @kind virtual;
  #L42fbee.  v1:= temp @kind object;
  #L42fbf0.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.mac.HmacKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.HmacKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.d:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fc40.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L42fc46.  v0:= temp;
  #L42fc48.  v1:= 16I;
  #L42fc4c.  if v0 < v1 then goto L42fc60;
  #L42fc50.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L42fc56.  v3:= temp @kind object;
  #L42fc58.  call `b`(v3) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.b:(Lcom/google/crypto/tink/proto/HmacParams;)V` @kind static;
  #L42fc5e.  return @kind void;
  #L42fc60.  v3:= new `java.security.GeneralSecurityException`;
  #L42fc64.  v0:= "key too short" @kind object;
  #L42fc68.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42fc6e.  throw v3;
}
procedure `java.lang.Object` `deriveKey`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.deriveKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/io/InputStream;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42fc04.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L42fc08.  call temp:= `b`(v0, v1, v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.b:(Lcom/google/crypto/tink/proto/HmacKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/HmacKey;` @kind virtual;
  #L42fc0e.  v1:= temp @kind object;
  #L42fc10.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42fbc8.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKeyFormat;` @kind virtual;
  #L42fbce.  v1:= temp @kind object;
  #L42fbd0.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42fc80.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L42fc84.  call `d`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.d:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)V` @kind virtual;
  #L42fc8a.  return @kind void;
}
