record `com.google.crypto.tink.aead.AesEaxKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesEaxKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a104.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesEaxKey` @kind object;
  #L42a108.  v1:= 1I;
  #L42a10a.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L42a10e.  v2:= new `com.google.crypto.tink.aead.AesEaxKeyManager$a`;
  #L42a112.  v3:= constclass @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42a116.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42a11c.  v3:= 0I;
  #L42a11e.  v1[v3]:= v2 @kind object;
  #L42a122.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L42a128.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.aes128EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L429f54.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L429f58.  v1:= 16I;
  #L429f5c.  call temp:= `b`(v1, v1, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L429f62.  v0:= temp @kind object;
  #L429f64.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.aes256EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L429f78.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L429f7c.  v1:= 32I;
  #L429f80.  v2:= 16I;
  #L429f84.  call temp:= `b`(v1, v2, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L429f8a.  v0:= temp @kind object;
  #L429f8c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`int` v1 , `int` v2 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L429fa0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesEaxKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;` @kind static;
  #L429fa6.  v0:= temp @kind object;
  #L429fa8.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;` @kind virtual;
  #L429fae.  v1:= temp @kind object;
  #L429fb0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesEaxParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesEaxParams$Builder;` @kind static;
  #L429fb6.  v0:= temp @kind object;
  #L429fb8.  call temp:= `setIvSize`(v0, v2) @signature `Lcom/google/crypto/tink/proto/AesEaxParams$Builder;.setIvSize:(I)Lcom/google/crypto/tink/proto/AesEaxParams$Builder;` @kind virtual;
  #L429fbe.  v2:= temp @kind object;
  #L429fc0.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L429fc6.  v2:= temp @kind object;
  #L429fc8.  v2:= (`com.google.crypto.tink.proto.AesEaxParams`) v2 @kind object;
  #L429fcc.  call temp:= `setParams`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesEaxParams;)Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;` @kind virtual;
  #L429fd2.  v1:= temp @kind object;
  #L429fd4.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L429fda.  v1:= temp @kind object;
  #L429fdc.  v1:= (`com.google.crypto.tink.proto.AesEaxKeyFormat`) v1 @kind object;
  #L429fe0.  v2:= new `com.google.crypto.tink.aead.AesEaxKeyManager`;
  #L429fe4.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.<init>:()V` @kind direct;
  #L429fea.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L429ff0.  v2:= temp @kind object;
  #L429ff2.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L429ff8.  v1:= temp @kind object;
  #L429ffa.  call temp:= `create`(v2, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a000.  v1:= temp @kind object;
  #L42a002.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes128EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.rawAes128EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a014.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a018.  v1:= 16I;
  #L42a01c.  call temp:= `b`(v1, v1, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a022.  v0:= temp @kind object;
  #L42a024.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.rawAes256EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42a038.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a03c.  v1:= 32I;
  #L42a040.  v2:= 16I;
  #L42a044.  call temp:= `b`(v1, v2, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a04a.  v0:= temp @kind object;
  #L42a04c.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42a13c.  v0:= new `com.google.crypto.tink.aead.AesEaxKeyManager`;
  #L42a140.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.<init>:()V` @kind direct;
  #L42a146.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L42a14c.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a0ec.  v0:= "type.googleapis.com/google.crypto.tink.AesEaxKey" @kind object;
  #L42a0f0.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a0d8.  v0:= 0I;
  #L42a0da.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.aead.AesEaxKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a060.  v0:= new `com.google.crypto.tink.aead.AesEaxKeyManager$b`;
  #L42a064.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesEaxKeyFormat` @kind object;
  #L42a068.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesEaxKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L42a06e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a0a4.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42a0a8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesEaxKey` `parseKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesEaxKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a080.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42a086.  v0:= temp @kind object;
  #L42a088.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesEaxKey;` @kind static;
  #L42a08e.  v2:= temp @kind object;
  #L42a090.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a0bc.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesEaxKey;` @kind virtual;
  #L42a0c2.  v1:= temp @kind object;
  #L42a0c4.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesEaxKey` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesEaxKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a160.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getVersion:()I` @kind virtual;
  #L42a166.  v0:= temp;
  #L42a168.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getVersion:()I` @kind virtual;
  #L42a16e.  v1:= temp;
  #L42a170.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42a176.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42a17c.  v0:= temp @kind object;
  #L42a17e.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L42a184.  v0:= temp;
  #L42a186.  call `validateAesKeySize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L42a18c.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getParams:()Lcom/google/crypto/tink/proto/AesEaxParams;` @kind virtual;
  #L42a192.  v0:= temp @kind object;
  #L42a194.  call temp:= `getIvSize`(v0) @signature `Lcom/google/crypto/tink/proto/AesEaxParams;.getIvSize:()I` @kind virtual;
  #L42a19a.  v0:= temp;
  #L42a19c.  v1:= 12I;
  #L42a1a0.  if v0 == v1 then goto L42a1ce;
  #L42a1a4.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getParams:()Lcom/google/crypto/tink/proto/AesEaxParams;` @kind virtual;
  #L42a1aa.  v3:= temp @kind object;
  #L42a1ac.  call temp:= `getIvSize`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxParams;.getIvSize:()I` @kind virtual;
  #L42a1b2.  v3:= temp;
  #L42a1b4.  v0:= 16I;
  #L42a1b8.  if v3 != v0 then goto L42a1be;
  #L42a1bc.  goto L42a1ce;
  #L42a1be.  v3:= new `java.security.GeneralSecurityException`;
  #L42a1c2.  v0:= "invalid IV size; acceptable values have 12 or 16 bytes" @kind object;
  #L42a1c6.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a1cc.  throw v3;
  #L42a1ce.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a1e0.  v1:= (`com.google.crypto.tink.proto.AesEaxKey`) v1 @kind object;
  #L42a1e4.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesEaxKey;)V` @kind virtual;
  #L42a1ea.  return @kind void;
}
