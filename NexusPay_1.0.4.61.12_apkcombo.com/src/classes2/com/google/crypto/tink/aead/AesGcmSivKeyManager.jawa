record `com.google.crypto.tink.aead.AesGcmSivKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42aa90.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesGcmSivKey` @kind object;
  #L42aa94.  v1:= 1I;
  #L42aa96.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L42aa9a.  v2:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager$a`;
  #L42aa9e.  v3:= constclass @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42aaa2.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42aaa8.  v3:= 0I;
  #L42aaaa.  v1[v3]:= v2 @kind object;
  #L42aaae.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L42aab4.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.aes128GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a90c.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a910.  v1:= 16I;
  #L42a914.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a91a.  v0:= temp @kind object;
  #L42a91c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.aes256GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a930.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a934.  v1:= 32I;
  #L42a938.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a93e.  v0:= temp @kind object;
  #L42a940.  return v0 @kind object;
}
procedure `boolean` `b`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.b:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42a8d8.  v0:= "AES/GCM-SIV/NoPadding" @kind object;
  #L42a8dc.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L42a8e2.  v0:= 1I;
  #L42a8e4.  return v0;
  #L42a8e6.  v0:= 0I;
  #L42a8e8.  return v0;
  catch `java.security.NoSuchAlgorithmException` @[L42a8d8..L42a8e2] goto L42a8e6;
  catch `javax.crypto.NoSuchPaddingException` @[L42a8d8..L42a8e2] goto L42a8e6;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`int` v1 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42a954.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat$Builder;` @kind static;
  #L42a95a.  v0:= temp @kind object;
  #L42a95c.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat$Builder;` @kind virtual;
  #L42a962.  v1:= temp @kind object;
  #L42a964.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42a96a.  v1:= temp @kind object;
  #L42a96c.  v1:= (`com.google.crypto.tink.proto.AesGcmSivKeyFormat`) v1 @kind object;
  #L42a970.  v0:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager`;
  #L42a974.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.<init>:()V` @kind direct;
  #L42a97a.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42a980.  v0:= temp @kind object;
  #L42a982.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L42a988.  v1:= temp @kind object;
  #L42a98a.  call temp:= `create`(v0, v1, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a990.  v1:= temp @kind object;
  #L42a992.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes128GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.rawAes128GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a9a4.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a9a8.  v1:= 16I;
  #L42a9ac.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a9b2.  v0:= temp @kind object;
  #L42a9b4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.rawAes256GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a9c8.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a9cc.  v1:= 32I;
  #L42a9d0.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a9d6.  v0:= temp @kind object;
  #L42a9d8.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42aac8.  call temp:= `b`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.b:()Z` @kind static;
  #L42aace.  v0:= temp;
  #L42aad0.  if v0 == 0 then goto L42aae4;
  #L42aad4.  v0:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager`;
  #L42aad8.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.<init>:()V` @kind direct;
  #L42aade.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L42aae4.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa78.  v0:= "type.googleapis.com/google.crypto.tink.AesGcmSivKey" @kind object;
  #L42aa7c.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa64.  v0:= 0I;
  #L42aa66.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a9ec.  v0:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager$b`;
  #L42a9f0.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesGcmSivKeyFormat` @kind object;
  #L42a9f4.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L42a9fa.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa30.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42aa34.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmSivKey` `parseKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmSivKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42aa0c.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42aa12.  v0:= temp @kind object;
  #L42aa14.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmSivKey;` @kind static;
  #L42aa1a.  v2:= temp @kind object;
  #L42aa1c.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42aa48.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmSivKey;` @kind virtual;
  #L42aa4e.  v1:= temp @kind object;
  #L42aa50.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesGcmSivKey` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmSivKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42aaf8.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKey;.getVersion:()I` @kind virtual;
  #L42aafe.  v0:= temp;
  #L42ab00.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getVersion:()I` @kind virtual;
  #L42ab06.  v1:= temp;
  #L42ab08.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42ab0e.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42ab14.  v3:= temp @kind object;
  #L42ab16.  call temp:= `size`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L42ab1c.  v3:= temp;
  #L42ab1e.  call `validateAesKeySize`(v3) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L42ab24.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42ab38.  v1:= (`com.google.crypto.tink.proto.AesGcmSivKey`) v1 @kind object;
  #L42ab3c.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmSivKey;)V` @kind virtual;
  #L42ab42.  return @kind void;
}
