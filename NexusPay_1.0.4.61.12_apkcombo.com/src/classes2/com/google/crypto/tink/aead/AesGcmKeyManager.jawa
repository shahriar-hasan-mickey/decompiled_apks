record `com.google.crypto.tink.aead.AesGcmKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesGcmKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a5d0.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesGcmKey` @kind object;
  #L42a5d4.  v1:= 1I;
  #L42a5d6.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L42a5da.  v2:= new `com.google.crypto.tink.aead.AesGcmKeyManager$a`;
  #L42a5de.  v3:= constclass @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42a5e2.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42a5e8.  v3:= 0I;
  #L42a5ea.  v1[v3]:= v2 @kind object;
  #L42a5ee.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L42a5f4.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a44c.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a450.  v1:= 16I;
  #L42a454.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a45a.  v0:= temp @kind object;
  #L42a45c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes256GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a470.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a474.  v1:= 32I;
  #L42a478.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a47e.  v0:= temp @kind object;
  #L42a480.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`int` v1 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42a494.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmKeyFormat$Builder;` @kind static;
  #L42a49a.  v0:= temp @kind object;
  #L42a49c.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmKeyFormat$Builder;` @kind virtual;
  #L42a4a2.  v1:= temp @kind object;
  #L42a4a4.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42a4aa.  v1:= temp @kind object;
  #L42a4ac.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L42a4b0.  v0:= new `com.google.crypto.tink.aead.AesGcmKeyManager`;
  #L42a4b4.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.<init>:()V` @kind direct;
  #L42a4ba.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42a4c0.  v0:= temp @kind object;
  #L42a4c2.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L42a4c8.  v1:= temp @kind object;
  #L42a4ca.  call temp:= `create`(v0, v1, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a4d0.  v1:= temp @kind object;
  #L42a4d2.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.rawAes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a4e4.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a4e8.  v1:= 16I;
  #L42a4ec.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a4f2.  v0:= temp @kind object;
  #L42a4f4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.rawAes256GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42a508.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42a50c.  v1:= 32I;
  #L42a510.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42a516.  v0:= temp @kind object;
  #L42a518.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42a608.  v0:= new `com.google.crypto.tink.aead.AesGcmKeyManager`;
  #L42a60c.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.<init>:()V` @kind direct;
  #L42a612.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L42a618.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a5b8.  v0:= "type.googleapis.com/google.crypto.tink.AesGcmKey" @kind object;
  #L42a5bc.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a5a4.  v0:= 0I;
  #L42a5a6.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.aead.AesGcmKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a52c.  v0:= new `com.google.crypto.tink.aead.AesGcmKeyManager$b`;
  #L42a530.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesGcmKeyFormat` @kind object;
  #L42a534.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesGcmKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L42a53a.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a570.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42a574.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmKey` `parseKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a54c.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42a552.  v0:= temp @kind object;
  #L42a554.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind static;
  #L42a55a.  v2:= temp @kind object;
  #L42a55c.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a588.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind virtual;
  #L42a58e.  v1:= temp @kind object;
  #L42a590.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesGcmKey` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a62c.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.getVersion:()I` @kind virtual;
  #L42a632.  v0:= temp;
  #L42a634.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L42a63a.  v1:= temp;
  #L42a63c.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42a642.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42a648.  v3:= temp @kind object;
  #L42a64a.  call temp:= `size`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L42a650.  v3:= temp;
  #L42a652.  call `validateAesKeySize`(v3) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L42a658.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a66c.  v1:= (`com.google.crypto.tink.proto.AesGcmKey`) v1 @kind object;
  #L42a670.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmKey;)V` @kind virtual;
  #L42a676.  return @kind void;
}
