record `com.google.crypto.tink.aead.AesGcmKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.aead.AesGcmKeyManager` `com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesGcmKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42a3f4.  v0.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` := v1 @kind object;
  #L42a3f8.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42a3fe.  return @kind void;
}
procedure `com.google.crypto.tink.proto.AesGcmKey` `a`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v1 @kind this, `com.google.crypto.tink.proto.AesGcmKeyFormat` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a260.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind static;
  #L42a266.  v0:= temp @kind object;
  #L42a268.  call temp:= `getKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L42a26e.  v2:= temp;
  #L42a270.  call temp:= `randBytes`(v2) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L42a276.  v2:= temp @kind object;
  #L42a278.  call temp:= `copyFrom`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42a27e.  v2:= temp @kind object;
  #L42a280.  call temp:= `setKeyValue`(v0, v2) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L42a286.  v2:= temp @kind object;
  #L42a288.  v0:= v1.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` @kind object;
  #L42a28c.  call temp:= `getVersion`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L42a292.  v0:= temp;
  #L42a294.  call temp:= `setVersion`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L42a29a.  v2:= temp @kind object;
  #L42a29c.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42a2a2.  v2:= temp @kind object;
  #L42a2a4.  v2:= (`com.google.crypto.tink.proto.AesGcmKey`) v2 @kind object;
  #L42a2a8.  return v2 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmKey` `b`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmKeyFormat` v3 @kind object, `java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a2bc.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getVersion:()I` @kind virtual;
  #L42a2c2.  v0:= temp;
  #L42a2c4.  v1:= v2.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` @kind object;
  #L42a2c8.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L42a2ce.  v1:= temp;
  #L42a2d0.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42a2d6.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L42a2dc.  v0:= temp;
  #L42a2de.  v0:= new `byte`[v0];
  #L42a2e2.  call temp:= `read`(v4, v0) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L42a2e8.  v4:= temp;
  #L42a2ea.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L42a2f0.  v3:= temp;
  #L42a2f2.  if v4 != v3 then goto L42a330;
  #L42a2f6.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind static;
  #L42a2fc.  v3:= temp @kind object;
  #L42a2fe.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42a304.  v4:= temp @kind object;
  #L42a306.  call temp:= `setKeyValue`(v3, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L42a30c.  v3:= temp @kind object;
  #L42a30e.  v4:= v2.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` @kind object;
  #L42a312.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L42a318.  v4:= temp;
  #L42a31a.  call temp:= `setVersion`(v3, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L42a320.  v3:= temp @kind object;
  #L42a322.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42a328.  v3:= temp @kind object;
  #L42a32a.  v3:= (`com.google.crypto.tink.proto.AesGcmKey`) v3 @kind object;
  #L42a32e.  return v3 @kind object;
  #L42a330.  v3:= new `java.security.GeneralSecurityException`;
  #L42a334.  v4:= "Not enough pseudorandomness given" @kind object;
  #L42a338.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a33e.  throw v3;
  #L42a340.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L42a342.  v4:= new `java.security.GeneralSecurityException`;
  #L42a346.  v0:= "Reading pseudorandomness failed" @kind object;
  #L42a34a.  call `<init>`(v4, v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L42a350.  throw v4;
  catch `java.io.IOException` @[L42a2e2..L42a340] goto L42a340;
}
procedure `com.google.crypto.tink.proto.AesGcmKeyFormat` `c`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a374.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42a37a.  v0:= temp @kind object;
  #L42a37c.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmKeyFormat;` @kind static;
  #L42a382.  v2:= temp @kind object;
  #L42a384.  return v2 @kind object;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a3b4.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L42a3b8.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind virtual;
  #L42a3be.  v1:= temp @kind object;
  #L42a3c0.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.proto.AesGcmKeyFormat` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)V` @AccessFlag PUBLIC {
    temp;

  #L42a410.  call temp:= `getKeySize`(v1) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L42a416.  v1:= temp;
  #L42a418.  call `validateAesKeySize`(v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L42a41e.  return @kind void;
}
procedure `java.lang.Object` `deriveKey`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.deriveKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/io/InputStream;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a3d4.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L42a3d8.  call temp:= `b`(v0, v1, v2) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind virtual;
  #L42a3de.  v1:= temp @kind object;
  #L42a3e0.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a398.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKeyFormat;` @kind virtual;
  #L42a39e.  v1:= temp @kind object;
  #L42a3a0.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42a430.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L42a434.  call `d`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)V` @kind virtual;
  #L42a43a.  return @kind void;
}
