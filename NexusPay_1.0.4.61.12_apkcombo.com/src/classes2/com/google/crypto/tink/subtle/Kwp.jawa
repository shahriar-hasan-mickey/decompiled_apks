record `com.google.crypto.tink.subtle.Kwp` @kind class @AccessFlag PUBLIC extends `com.google.crypto.tink.KeyWrap` @kind interface {
  `javax.crypto.SecretKey` `com.google.crypto.tink.subtle.Kwp.a` @AccessFlag PRIVATE_FINAL;
}
global `byte`[] `@@com.google.crypto.tink.subtle.Kwp.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Kwp;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49c054.  v0:= 4I;
  #L49c056.  v0:= new `byte`[v0];
  #L49c05a.  goto L49c068;
  #L49c060.  `@@com.google.crypto.tink.subtle.Kwp.b` @type ^`byte`[] := v0 @kind object;
  #L49c064.  return @kind void;
  #L49c066.  
  #L49c068.  v0:= (-90I, 89I, 89I, -90I) @kind object;
  #L49c073.  goto L49c060;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Kwp` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49c084.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c08a.  v0:= length @variable v3;
  #L49c08c.  v1:= 16I;
  #L49c090.  if v0 == v1 then goto L49c0b0;
  #L49c094.  v0:= length @variable v3;
  #L49c096.  v1:= 32I;
  #L49c09a.  if v0 != v1 then goto L49c0a0;
  #L49c09e.  goto L49c0b0;
  #L49c0a0.  v3:= new `java.security.GeneralSecurityException`;
  #L49c0a4.  v0:= "Unsupported key length" @kind object;
  #L49c0a8.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49c0ae.  throw v3;
  #L49c0b0.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L49c0b4.  v1:= "AES" @kind object;
  #L49c0b8.  call `<init>`(v0, v3, v1) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L49c0be.  v2.`com.google.crypto.tink.subtle.Kwp.a` @type ^`javax.crypto.SecretKey` := v0 @kind object;
  #L49c0c2.  return @kind void;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.Kwp` v16 @kind this, `byte`[] v17 @kind object, `byte`[] v18 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.a:([B[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L49bcb4.  v0:= v16 @kind object;
  #L49bcb8.  v1:= v17 @kind object;
  #L49bcbc.  v2:= v18 @kind object;
  #L49bcc0.  v3:= length @variable v2;
  #L49bcc2.  v4:= 8I;
  #L49bcc6.  if v3 <= v4 then goto L49bd9c;
  #L49bcca.  v3:= length @variable v2;
  #L49bccc.  v5:= 2147483631I;
  #L49bcd2.  if v3 > v5 then goto L49bd9c;
  #L49bcd6.  v3:= length @variable v1;
  #L49bcd8.  if v3 != v4 then goto L49bd9c;
  #L49bcdc.  v3:= length @variable v2;
  #L49bcde.  call temp:= `c`(v0, v3) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L49bce4.  v3:= temp;
  #L49bce6.  v5:= new `byte`[v3];
  #L49bcea.  v6:= length @variable v1;
  #L49bcec.  v7:= 0I;
  #L49bcee.  call `arraycopy`(v1, v7, v5, v7, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49bcf4.  v1:= length @variable v2;
  #L49bcf6.  call `arraycopy`(v2, v7, v5, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49bcfc.  v3:= v3 / v4 @kind int;
  #L49bcfe.  v1:= 1I;
  #L49bd00.  v3:= v3 - v1 @kind int;
  #L49bd02.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49bd06.  v6:= "AES/ECB/NoPadding" @kind object;
  #L49bd0a.  call temp:= `getInstance`(v2, v6) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49bd10.  v2:= temp @kind object;
  #L49bd12.  v2:= (`javax.crypto.Cipher`) v2 @kind object;
  #L49bd16.  v6:= v0.`com.google.crypto.tink.subtle.Kwp.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L49bd1a.  call `init`(v2, v1, v6) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L49bd20.  v6:= 16I;
  #L49bd24.  v8:= new `byte`[v6];
  #L49bd28.  call `arraycopy`(v5, v7, v8, v7, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49bd2e.  v9:= 0I;
  #L49bd30.  v10:= 6I;
  #L49bd32.  if v9 >= v10 then goto L49bd94;
  #L49bd36.  v10:= 0I;
  #L49bd38.  if v10 >= v3 then goto L49bd8c;
  #L49bd3c.  v11:= v10 + 1;
  #L49bd40.  v12:= v11 * 8;
  #L49bd44.  call `arraycopy`(v5, v12, v8, v4, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49bd4a.  call temp:= `doFinal`(v2, v8, v7, v6, v8) @signature `Ljavax/crypto/Cipher;.doFinal:([BII[B)I` @kind virtual;
  #L49bd50.  v13:= v9 * v3 @kind int;
  #L49bd54.  v13:= v13 + v10 @kind int;
  #L49bd56.  v13:= v13 + v1 @kind int;
  #L49bd58.  v10:= 0I;
  #L49bd5a.  v14:= 4I;
  #L49bd5c.  if v10 >= v14 then goto L49bd80;
  #L49bd60.  v14:= v10 - 7;
  #L49bd64.  v15:= v8[v14] @kind byte;
  #L49bd68.  v1:= v13 ^& 255;
  #L49bd6c.  v1:= (`byte`) v1 @kind i2b;
  #L49bd6e.  v1:= v1 ^~ v15 @kind int;
  #L49bd70.  v1:= (`byte`) v1 @kind i2b;
  #L49bd72.  v8[v14]:= v1 @kind byte;
  #L49bd76.  v13:= v13 ^>> v4 @kind int;
  #L49bd78.  v10:= v10 + 1;
  #L49bd7c.  v1:= 1I;
  #L49bd7e.  goto L49bd5a;
  #L49bd80.  call `arraycopy`(v8, v4, v5, v12, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49bd86.  v10:= v11;
  #L49bd88.  v1:= 1I;
  #L49bd8a.  goto L49bd38;
  #L49bd8c.  v9:= v9 + 1;
  #L49bd90.  v1:= 1I;
  #L49bd92.  goto L49bd30;
  #L49bd94.  call `arraycopy`(v8, v7, v5, v7, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49bd9a.  return v5 @kind object;
  #L49bd9c.  v1:= new `java.security.GeneralSecurityException`;
  #L49bda0.  v2:= "computeW called with invalid parameters" @kind object;
  #L49bda4.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49bdaa.  throw v1;
}
procedure `byte`[] `b`(`com.google.crypto.tink.subtle.Kwp` v14 @kind this, `byte`[] v15 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.b:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L49bdbc.  v0:= length @variable v15;
  #L49bdbe.  v1:= 24I;
  #L49bdc2.  if v0 < v1 then goto L49be80;
  #L49bdc6.  v0:= length @variable v15;
  #L49bdc8.  v1:= 8I;
  #L49bdcc.  v0:= v0 %% v1 @kind int;
  #L49bdce.  if v0 != 0 then goto L49be80;
  #L49bdd2.  v0:= length @variable v15;
  #L49bdd4.  call temp:= `copyOf`(v15, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L49bdda.  v15:= temp @kind object;
  #L49bddc.  v0:= length @variable v15;
  #L49bdde.  v0:= v0 / v1 @kind int;
  #L49bde0.  v0:= v0 + -1;
  #L49bde4.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49bde8.  v3:= "AES/ECB/NoPadding" @kind object;
  #L49bdec.  call temp:= `getInstance`(v2, v3) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49bdf2.  v2:= temp @kind object;
  #L49bdf4.  v2:= (`javax.crypto.Cipher`) v2 @kind object;
  #L49bdf8.  v3:= 2I;
  #L49bdfa.  v4:= v14.`com.google.crypto.tink.subtle.Kwp.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L49bdfe.  call `init`(v2, v3, v4) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L49be04.  v3:= 16I;
  #L49be08.  v4:= new `byte`[v3];
  #L49be0c.  v5:= 0I;
  #L49be0e.  call `arraycopy`(v15, v5, v4, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49be14.  v6:= 5I;
  #L49be16.  if v6 < 0 then goto L49be78;
  #L49be1a.  v7:= v0 + -1;
  #L49be1e.  if v7 < 0 then goto L49be72;
  #L49be22.  v8:= v7 + 1;
  #L49be26.  v8:= v8 * 8;
  #L49be2a.  call `arraycopy`(v15, v8, v4, v1, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49be30.  v9:= v6 * v0 @kind int;
  #L49be34.  v9:= v9 + v7 @kind int;
  #L49be36.  v9:= v9 + 1;
  #L49be3a.  v10:= 0I;
  #L49be3c.  v11:= 4I;
  #L49be3e.  if v10 >= v11 then goto L49be60;
  #L49be42.  v11:= v10 - 7;
  #L49be46.  v12:= v4[v11] @kind byte;
  #L49be4a.  v13:= v9 ^& 255;
  #L49be4e.  v13:= (`byte`) v13 @kind i2b;
  #L49be50.  v12:= v12 ^~ v13 @kind int;
  #L49be52.  v12:= (`byte`) v12 @kind i2b;
  #L49be54.  v4[v11]:= v12 @kind byte;
  #L49be58.  v9:= v9 ^>> v1 @kind int;
  #L49be5a.  v10:= v10 + 1;
  #L49be5e.  goto L49be3c;
  #L49be60.  call temp:= `doFinal`(v2, v4, v5, v3, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([BII[B)I` @kind virtual;
  #L49be66.  call `arraycopy`(v4, v1, v15, v8, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49be6c.  v7:= v7 + -1;
  #L49be70.  goto L49be1e;
  #L49be72.  v6:= v6 + -1;
  #L49be76.  goto L49be16;
  #L49be78.  call `arraycopy`(v4, v5, v15, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49be7e.  return v15 @kind object;
  #L49be80.  v15:= new `java.security.GeneralSecurityException`;
  #L49be84.  v0:= "Incorrect data size" @kind object;
  #L49be88.  call `<init>`(v15, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49be8e.  throw v15;
}
procedure `int` `c`(`com.google.crypto.tink.subtle.Kwp` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L49c030.  v0:= v2 + 7;
  #L49c034.  v0:= v0 %% 8;
  #L49c038.  v0:= v0 - 7;
  #L49c03c.  v2:= v2 + v0 @kind int;
  #L49c03e.  v2:= v2 + 8;
  #L49c042.  return v2;
}
procedure `byte`[] `unwrap`(`com.google.crypto.tink.subtle.Kwp` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.unwrap:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49bea0.  v0:= length @variable v7;
  #L49bea2.  v1:= 16I;
  #L49bea6.  call temp:= `c`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L49beac.  v1:= temp;
  #L49beae.  if v0 < v1 then goto L49bf82;
  #L49beb2.  v0:= length @variable v7;
  #L49beb4.  v1:= 4096I;
  #L49beb8.  call temp:= `c`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L49bebe.  v1:= temp;
  #L49bec0.  if v0 > v1 then goto L49bf72;
  #L49bec4.  v0:= length @variable v7;
  #L49bec6.  v1:= 8I;
  #L49beca.  v0:= v0 %% v1 @kind int;
  #L49becc.  if v0 != 0 then goto L49bf62;
  #L49bed0.  call temp:= `b`(v6, v7) @signature `Lcom/google/crypto/tink/subtle/Kwp;.b:([B)[B` @kind direct;
  #L49bed6.  v7:= temp @kind object;
  #L49bed8.  v0:= 1I;
  #L49beda.  v2:= 0I;
  #L49bedc.  v3:= 0I;
  #L49bede.  v4:= 4I;
  #L49bee0.  if v3 >= v4 then goto L49befc;
  #L49bee4.  v4:= `@@com.google.crypto.tink.subtle.Kwp.b` @type ^`byte`[] @kind object;
  #L49bee8.  v4:= v4[v3] @kind byte;
  #L49beec.  v5:= v7[v3] @kind byte;
  #L49bef0.  if v4 == v5 then goto L49bef6;
  #L49bef4.  v0:= 0I;
  #L49bef6.  v3:= v3 + 1;
  #L49befa.  goto L49bede;
  #L49befc.  v3:= 0I;
  #L49befe.  if v4 >= v1 then goto L49bf16;
  #L49bf02.  v3:= v3 ^< 8;
  #L49bf06.  v5:= v7[v4] @kind byte;
  #L49bf0a.  v5:= v5 ^& 255;
  #L49bf0e.  v3:= v3 + v5 @kind int;
  #L49bf10.  v4:= v4 + 1;
  #L49bf14.  goto L49befe;
  #L49bf16.  call temp:= `c`(v6, v3) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L49bf1c.  v4:= temp;
  #L49bf1e.  v5:= length @variable v7;
  #L49bf20.  if v4 == v5 then goto L49bf26;
  #L49bf24.  goto L49bf42;
  #L49bf26.  v4:= v3 + 8;
  #L49bf2a.  v5:= length @variable v7;
  #L49bf2c.  if v4 >= v5 then goto L49bf40;
  #L49bf30.  v5:= v7[v4] @kind byte;
  #L49bf34.  if v5 == 0 then goto L49bf3a;
  #L49bf38.  v0:= 0I;
  #L49bf3a.  v4:= v4 + 1;
  #L49bf3e.  goto L49bf2a;
  #L49bf40.  v2:= v0;
  #L49bf42.  if v2 == 0 then goto L49bf52;
  #L49bf46.  v3:= v3 + v1 @kind int;
  #L49bf48.  call temp:= `copyOfRange`(v7, v1, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L49bf4e.  v7:= temp @kind object;
  #L49bf50.  return v7 @kind object;
  #L49bf52.  v7:= new `javax.crypto.BadPaddingException`;
  #L49bf56.  v0:= "Invalid padding" @kind object;
  #L49bf5a.  call `<init>`(v7, v0) @signature `Ljavax/crypto/BadPaddingException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49bf60.  throw v7;
  #L49bf62.  v7:= new `java.security.GeneralSecurityException`;
  #L49bf66.  v0:= "Wrapped key size must be a multiple of 8 bytes" @kind object;
  #L49bf6a.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49bf70.  throw v7;
  #L49bf72.  v7:= new `java.security.GeneralSecurityException`;
  #L49bf76.  v0:= "Wrapped key size is too large" @kind object;
  #L49bf7a.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49bf80.  throw v7;
  #L49bf82.  v7:= new `java.security.GeneralSecurityException`;
  #L49bf86.  v0:= "Wrapped key size is too small" @kind object;
  #L49bf8a.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49bf90.  throw v7;
}
procedure `byte`[] `wrap`(`com.google.crypto.tink.subtle.Kwp` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.wrap:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49bfa4.  v0:= length @variable v7;
  #L49bfa6.  v1:= 16I;
  #L49bfaa.  if v0 < v1 then goto L49c00e;
  #L49bfae.  v0:= length @variable v7;
  #L49bfb0.  v1:= 4096I;
  #L49bfb4.  if v0 > v1 then goto L49bffe;
  #L49bfb8.  v0:= 8I;
  #L49bfbc.  v1:= new `byte`[v0];
  #L49bfc0.  v2:= `@@com.google.crypto.tink.subtle.Kwp.b` @type ^`byte`[] @kind object;
  #L49bfc4.  v3:= length @variable v2;
  #L49bfc6.  v4:= 0I;
  #L49bfc8.  call `arraycopy`(v2, v4, v1, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49bfce.  v2:= 4I;
  #L49bfd0.  if v4 >= v2 then goto L49bff4;
  #L49bfd4.  v2:= v4 + 4;
  #L49bfd8.  v3:= length @variable v7;
  #L49bfda.  v5:= v4 - 3;
  #L49bfde.  v5:= v5 * 8;
  #L49bfe2.  v3:= v3 ^> v5 @kind int;
  #L49bfe4.  v3:= v3 ^& 255;
  #L49bfe8.  v3:= (`byte`) v3 @kind i2b;
  #L49bfea.  v1[v2]:= v3 @kind byte;
  #L49bfee.  v4:= v4 + 1;
  #L49bff2.  goto L49bfce;
  #L49bff4.  call temp:= `a`(v6, v1, v7) @signature `Lcom/google/crypto/tink/subtle/Kwp;.a:([B[B)[B` @kind direct;
  #L49bffa.  v7:= temp @kind object;
  #L49bffc.  return v7 @kind object;
  #L49bffe.  v7:= new `java.security.GeneralSecurityException`;
  #L49c002.  v0:= "Key size of key to wrap too large" @kind object;
  #L49c006.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49c00c.  throw v7;
  #L49c00e.  v7:= new `java.security.GeneralSecurityException`;
  #L49c012.  v0:= "Key size of key to wrap too small" @kind object;
  #L49c016.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49c01c.  throw v7;
}
