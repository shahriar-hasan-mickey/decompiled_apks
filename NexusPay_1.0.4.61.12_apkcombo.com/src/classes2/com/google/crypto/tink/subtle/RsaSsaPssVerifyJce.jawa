record `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PublicKeyVerify` @kind interface {
  `java.security.interfaces.RSAPublicKey` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` v1 @kind this, `java.security.interfaces.RSAPublicKey` v2 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v3 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v4 @kind object, `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.<init>:(Ljava/security/interfaces/RSAPublicKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/Enums$HashType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L49dc38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49dc3e.  call `validateSignatureHash`(v3) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L49dc44.  call temp:= `getModulus`(v2) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L49dc4a.  v0:= temp @kind object;
  #L49dc4c.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L49dc52.  v0:= temp;
  #L49dc54.  call `validateRsaModulusSize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @kind static;
  #L49dc5a.  call temp:= `getPublicExponent`(v2) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L49dc60.  v0:= temp @kind object;
  #L49dc62.  call `validateRsaPublicExponent`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @kind static;
  #L49dc68.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` := v2 @kind object;
  #L49dc6c.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v3 @kind object;
  #L49dc70.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v4 @kind object;
  #L49dc74.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int` := v5;
  #L49dc78.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` v18 @kind this, `byte`[] v19 @kind object, `byte`[] v20 @kind object, `int` v21 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.a:([B[BI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L49dc8c.  v0:= v18 @kind object;
  #L49dc90.  v1:= v20 @kind object;
  #L49dc94.  v2:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L49dc98.  call `validateSignatureHash`(v2) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L49dc9e.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.MESSAGE_DIGEST` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49dca2.  v3:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L49dca6.  call temp:= `toDigestAlgo`(v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @kind static;
  #L49dcac.  v3:= temp @kind object;
  #L49dcae.  call temp:= `getInstance`(v2, v3) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49dcb4.  v2:= temp @kind object;
  #L49dcb6.  v2:= (`java.security.MessageDigest`) v2 @kind object;
  #L49dcba.  v3:= v19 @kind object;
  #L49dcbe.  call temp:= `digest`(v2, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L49dcc4.  v3:= temp @kind object;
  #L49dcc6.  call temp:= `getDigestLength`(v2) @signature `Ljava/security/MessageDigest;.getDigestLength:()I` @kind virtual;
  #L49dccc.  v4:= temp;
  #L49dcce.  v5:= length @variable v1;
  #L49dcd0.  v6:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int`;
  #L49dcd4.  v6:= v6 + v4 @kind int;
  #L49dcd6.  v6:= v6 + 2;
  #L49dcda.  v7:= "inconsistent" @kind object;
  #L49dcde.  if v5 < v6 then goto L49de80;
  #L49dce2.  v6:= length @variable v1;
  #L49dce4.  v8:= 1I;
  #L49dce6.  v6:= v6 - v8 @kind int;
  #L49dce8.  v6:= v1[v6] @kind byte;
  #L49dcec.  v9:= -68I;
  #L49dcf0.  if v6 != v9 then goto L49de74;
  #L49dcf4.  v6:= v5 - v4 @kind int;
  #L49dcf8.  v9:= v6 + -1;
  #L49dcfc.  call temp:= `copyOf`(v1, v9) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L49dd02.  v10:= temp @kind object;
  #L49dd04.  v11:= length @variable v10;
  #L49dd06.  v12:= length @variable v10;
  #L49dd08.  v12:= v12 + v4 @kind int;
  #L49dd0a.  call temp:= `copyOfRange`(v1, v11, v12) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L49dd10.  v1:= temp @kind object;
  #L49dd12.  v12:= 0I;
  #L49dd14.  v13:= (`long`) v12 @kind i2l;
  #L49dd16.  v15:= v9;
  #L49dd18.  v8:= (`long`) v5 @kind i2l;
  #L49dd1a.  v16:= 8L;
  #L49dd1e.  v8:= v8 * v16 @kind long;
  #L49dd22.  v11:= v21;
  #L49dd26.  v16:= v2 @kind object;
  #L49dd2a.  v17:= v3 @kind object;
  #L49dd2e.  v2:= (`long`) v11 @kind i2l;
  #L49dd30.  v8:= v8 - v2 @kind long;
  #L49dd32.  v2:= lcmp(v13, v8);
  #L49dd36.  if v2 >= 0 then goto L49dd72;
  #L49dd3a.  v2:= v12 / 8;
  #L49dd3e.  v3:= v12 %% 8;
  #L49dd42.  v3:= v3 - 7;
  #L49dd46.  v2:= v10[v2] @kind byte;
  #L49dd4a.  v2:= v2 ^> v3 @kind int;
  #L49dd4c.  v3:= 1I;
  #L49dd4e.  v2:= v2 ^& v3 @kind int;
  #L49dd50.  if v2 != 0 then goto L49dd66;
  #L49dd54.  v12:= v12 + 1;
  #L49dd58.  v9:= v15;
  #L49dd5a.  v2:= v16 @kind object;
  #L49dd5e.  v3:= v17 @kind object;
  #L49dd62.  v8:= 1I;
  #L49dd64.  goto L49dd14;
  #L49dd66.  v1:= new `java.security.GeneralSecurityException`;
  #L49dd6a.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49dd70.  throw v1;
  #L49dd72.  v2:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L49dd76.  v3:= v15;
  #L49dd78.  call temp:= `mgf1`(v1, v3, v2) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.mgf1:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @kind static;
  #L49dd7e.  v2:= temp @kind object;
  #L49dd80.  v3:= length @variable v2;
  #L49dd82.  v5:= new `byte`[v3];
  #L49dd86.  v11:= 0I;
  #L49dd88.  if v11 >= v3 then goto L49dda2;
  #L49dd8c.  v12:= v2[v11] @kind byte;
  #L49dd90.  v13:= v10[v11] @kind byte;
  #L49dd94.  v12:= v12 ^~ v13 @kind int;
  #L49dd96.  v12:= (`byte`) v12 @kind i2b;
  #L49dd98.  v5[v11]:= v12 @kind byte;
  #L49dd9c.  v11:= v11 + 1;
  #L49dda0.  goto L49dd88;
  #L49dda2.  v2:= 0I;
  #L49dda4.  v10:= (`long`) v2 @kind i2l;
  #L49dda6.  v12:= lcmp(v10, v8);
  #L49ddaa.  if v12 > 0 then goto L49ddd4;
  #L49ddae.  v10:= v2 / 8;
  #L49ddb2.  v11:= v2 %% 8;
  #L49ddb6.  v11:= v11 - 7;
  #L49ddba.  v12:= v5[v10] @kind byte;
  #L49ddbe.  v13:= 1I;
  #L49ddc0.  v11:= v13 ^< v11 @kind int;
  #L49ddc4.  v11:= ~v11 @kind int;
  #L49ddc6.  v11:= v11 ^& v12 @kind int;
  #L49ddc8.  v11:= (`byte`) v11 @kind i2b;
  #L49ddca.  v5[v10]:= v11 @kind byte;
  #L49ddce.  v2:= v2 + 1;
  #L49ddd2.  goto L49dda4;
  #L49ddd4.  v2:= 0I;
  #L49ddd6.  v8:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int`;
  #L49ddda.  v9:= v6 - v8 @kind int;
  #L49ddde.  v9:= v9 + -2;
  #L49dde2.  if v2 >= v9 then goto L49de00;
  #L49dde6.  v8:= v5[v2] @kind byte;
  #L49ddea.  if v8 != 0 then goto L49ddf4;
  #L49ddee.  v2:= v2 + 1;
  #L49ddf2.  goto L49ddd6;
  #L49ddf4.  v1:= new `java.security.GeneralSecurityException`;
  #L49ddf8.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ddfe.  throw v1;
  #L49de00.  v6:= v6 - v8 @kind int;
  #L49de02.  v6:= v6 + -2;
  #L49de06.  v2:= v5[v6] @kind byte;
  #L49de0a.  v6:= 1I;
  #L49de0c.  if v2 != v6 then goto L49de68;
  #L49de10.  v2:= v3 - v8 @kind int;
  #L49de14.  call temp:= `copyOfRange`(v5, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L49de1a.  v2:= temp @kind object;
  #L49de1c.  v3:= 8I;
  #L49de20.  v4:= v4 + v3 @kind int;
  #L49de22.  v5:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int`;
  #L49de26.  v5:= v5 + v4 @kind int;
  #L49de28.  v5:= new `byte`[v5];
  #L49de2c.  v6:= v17 @kind object;
  #L49de30.  v8:= length @variable v6;
  #L49de32.  v9:= 0I;
  #L49de34.  call `arraycopy`(v6, v9, v5, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49de3a.  v3:= length @variable v2;
  #L49de3c.  call `arraycopy`(v2, v9, v5, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49de42.  v2:= v16 @kind object;
  #L49de46.  call temp:= `digest`(v2, v5) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L49de4c.  v2:= temp @kind object;
  #L49de4e.  call temp:= `equal`(v2, v1) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @kind static;
  #L49de54.  v1:= temp;
  #L49de56.  if v1 == 0 then goto L49de5c;
  #L49de5a.  return @kind void;
  #L49de5c.  v1:= new `java.security.GeneralSecurityException`;
  #L49de60.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49de66.  throw v1;
  #L49de68.  v1:= new `java.security.GeneralSecurityException`;
  #L49de6c.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49de72.  throw v1;
  #L49de74.  v1:= new `java.security.GeneralSecurityException`;
  #L49de78.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49de7e.  throw v1;
  #L49de80.  v1:= new `java.security.GeneralSecurityException`;
  #L49de84.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49de8a.  throw v1;
}
procedure `void` `verify`(`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` v5 @kind this, `byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.verify:([B[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49de9c.  v0:= v5.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L49dea0.  call temp:= `getPublicExponent`(v0) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L49dea6.  v0:= temp @kind object;
  #L49dea8.  v1:= v5.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L49deac.  call temp:= `getModulus`(v1) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L49deb2.  v1:= temp @kind object;
  #L49deb4.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L49deba.  v2:= temp;
  #L49debc.  v2:= v2 + 7;
  #L49dec0.  v2:= v2 / 8;
  #L49dec4.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L49deca.  v3:= temp;
  #L49decc.  v3:= v3 + -1;
  #L49ded0.  v3:= v3 + 7;
  #L49ded4.  v3:= v3 / 8;
  #L49ded8.  v4:= length @variable v6;
  #L49deda.  if v2 != v4 then goto L49df26;
  #L49dede.  call temp:= `bytes2Integer`(v6) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.bytes2Integer:([B)Ljava/math/BigInteger;` @kind static;
  #L49dee4.  v6:= temp @kind object;
  #L49dee6.  call temp:= `compareTo`(v6, v1) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L49deec.  v2:= temp;
  #L49deee.  if v2 >= 0 then goto L49df16;
  #L49def2.  call temp:= `modPow`(v6, v0, v1) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49def8.  v6:= temp @kind object;
  #L49defa.  call temp:= `integer2Bytes`(v6, v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.integer2Bytes:(Ljava/math/BigInteger;I)[B` @kind static;
  #L49df00.  v6:= temp @kind object;
  #L49df02.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L49df08.  v0:= temp;
  #L49df0a.  v0:= v0 + -1;
  #L49df0e.  call `a`(v5, v7, v6, v0) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.a:([B[BI)V` @kind direct;
  #L49df14.  return @kind void;
  #L49df16.  v6:= new `java.security.GeneralSecurityException`;
  #L49df1a.  v7:= "signature out of range" @kind object;
  #L49df1e.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49df24.  throw v6;
  #L49df26.  v6:= new `java.security.GeneralSecurityException`;
  #L49df2a.  v7:= "invalid signature's length" @kind object;
  #L49df2e.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49df34.  throw v6;
}
