record `com.google.crypto.tink.subtle.Bytes` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Bytes` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Bytes;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4938d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4938d6.  return @kind void;
}
procedure `int` `byteArrayToInt`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493864.  v0:= length @variable v1;
  #L493866.  call temp:= `byteArrayToInt`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BI)I` @kind static;
  #L49386c.  v1:= temp;
  #L49386e.  return v1;
}
procedure `int` `byteArrayToInt`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493880.  v0:= 0I;
  #L493882.  call temp:= `byteArrayToInt`(v1, v0, v2) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BII)I` @kind static;
  #L493888.  v1:= temp;
  #L49388a.  return v1;
}
procedure `int` `byteArrayToInt`(`byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BII)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49389c.  v0:= 0I;
  #L49389e.  v1:= 0I;
  #L4938a0.  if v0 >= v6 then goto L4938be;
  #L4938a4.  v2:= v0 + v5 @kind int;
  #L4938a8.  v2:= v4[v2] @kind byte;
  #L4938ac.  v2:= v2 ^& 255;
  #L4938b0.  v3:= v0 * 8;
  #L4938b4.  v2:= v2 ^< v3 @kind int;
  #L4938b6.  v1:= v1 + v2 @kind int;
  #L4938b8.  v0:= v0 + 1;
  #L4938bc.  goto L4938a0;
  #L4938be.  return v1;
}
procedure `byte`[] `concat`(`byte`[][] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4936cc.  v0:= length @variable v7;
  #L4936ce.  v1:= 0I;
  #L4936d0.  v2:= 0I;
  #L4936d2.  v3:= 0I;
  #L4936d4.  if v2 >= v0 then goto L493704;
  #L4936d8.  v4:= v7[v2] @kind object;
  #L4936dc.  v5:= 2147483647I;
  #L4936e2.  v6:= length @variable v4;
  #L4936e4.  v5:= v5 - v6 @kind int;
  #L4936e6.  if v3 > v5 then goto L4936f4;
  #L4936ea.  v4:= length @variable v4;
  #L4936ec.  v3:= v3 + v4 @kind int;
  #L4936ee.  v2:= v2 + 1;
  #L4936f2.  goto L4936d4;
  #L4936f4.  v7:= new `java.security.GeneralSecurityException`;
  #L4936f8.  v0:= "exceeded size limit" @kind object;
  #L4936fc.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493702.  throw v7;
  #L493704.  v0:= new `byte`[v3];
  #L493708.  v2:= length @variable v7;
  #L49370a.  v3:= 0I;
  #L49370c.  v4:= 0I;
  #L49370e.  if v3 >= v2 then goto L493728;
  #L493712.  v5:= v7[v3] @kind object;
  #L493716.  v6:= length @variable v5;
  #L493718.  call `arraycopy`(v5, v1, v0, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49371e.  v5:= length @variable v5;
  #L493720.  v4:= v4 + v5 @kind int;
  #L493722.  v3:= v3 + 1;
  #L493726.  goto L49370e;
  #L493728.  return v0 @kind object;
}
procedure `boolean` `equal`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L493680.  v0:= 0I;
  #L493682.  if v5 == 0 then goto L4936b8;
  #L493686.  if v6 != 0 then goto L49368c;
  #L49368a.  goto L4936b8;
  #L49368c.  v1:= length @variable v5;
  #L49368e.  v2:= length @variable v6;
  #L493690.  if v1 == v2 then goto L493696;
  #L493694.  return v0;
  #L493696.  v1:= 0I;
  #L493698.  v2:= 0I;
  #L49369a.  v3:= length @variable v5;
  #L49369c.  if v1 >= v3 then goto L4936b2;
  #L4936a0.  v3:= v5[v1] @kind byte;
  #L4936a4.  v4:= v6[v1] @kind byte;
  #L4936a8.  v3:= v3 ^~ v4 @kind int;
  #L4936aa.  v2:= v2 ^| v3 @kind int;
  #L4936ac.  v1:= v1 + 1;
  #L4936b0.  goto L49369a;
  #L4936b2.  if v2 != 0 then goto L4936b8;
  #L4936b6.  v0:= 1I;
  #L4936b8.  return v0;
}
procedure `byte`[] `intToByteArray`(`int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.intToByteArray:(II)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49373c.  v0:= new `byte`[v3];
  #L493740.  v1:= 0I;
  #L493742.  if v1 >= v3 then goto L49375e;
  #L493746.  v2:= v1 * 8;
  #L49374a.  v2:= v4 ^> v2 @kind int;
  #L49374e.  v2:= v2 ^& 255;
  #L493752.  v2:= (`byte`) v2 @kind i2b;
  #L493754.  v0[v1]:= v2 @kind byte;
  #L493758.  v1:= v1 + 1;
  #L49375c.  goto L493742;
  #L49375e.  return v0 @kind object;
}
procedure `void` `xor`(`java.nio.ByteBuffer` v3 @kind object, `java.nio.ByteBuffer` v4 @kind object, `java.nio.ByteBuffer` v5 @kind object, `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4938e8.  if v6 < 0 then goto L493938;
  #L4938ec.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4938f2.  v0:= temp;
  #L4938f4.  if v0 < v6 then goto L493938;
  #L4938f8.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4938fe.  v0:= temp;
  #L493900.  if v0 < v6 then goto L493938;
  #L493904.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49390a.  v0:= temp;
  #L49390c.  if v0 < v6 then goto L493938;
  #L493910.  v0:= 0I;
  #L493912.  if v0 >= v6 then goto L493936;
  #L493916.  call temp:= `get`(v4) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L49391c.  v1:= temp;
  #L49391e.  call temp:= `get`(v5) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L493924.  v2:= temp;
  #L493926.  v1:= v1 ^~ v2 @kind int;
  #L493928.  v1:= (`byte`) v1 @kind i2b;
  #L49392a.  call temp:= `put`(v3, v1) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493930.  v0:= v0 + 1;
  #L493934.  goto L493912;
  #L493936.  return @kind void;
  #L493938.  v3:= new `java.lang.IllegalArgumentException`;
  #L49393c.  v4:= "That combination of buffers, offsets and length to xor result in out-of-bond accesses." @kind object;
  #L493940.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493946.  throw v3;
}
procedure `byte`[] `xor`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4937a8.  if v8 < 0 then goto L4937e6;
  #L4937ac.  v0:= length @variable v4;
  #L4937ae.  v0:= v0 - v8 @kind int;
  #L4937b0.  if v0 < v5 then goto L4937e6;
  #L4937b4.  v0:= length @variable v6;
  #L4937b6.  v0:= v0 - v8 @kind int;
  #L4937b8.  if v0 < v7 then goto L4937e6;
  #L4937bc.  v0:= new `byte`[v8];
  #L4937c0.  v1:= 0I;
  #L4937c2.  if v1 >= v8 then goto L4937e4;
  #L4937c6.  v2:= v1 + v5 @kind int;
  #L4937ca.  v2:= v4[v2] @kind byte;
  #L4937ce.  v3:= v1 + v7 @kind int;
  #L4937d2.  v3:= v6[v3] @kind byte;
  #L4937d6.  v2:= v2 ^~ v3 @kind int;
  #L4937d8.  v2:= (`byte`) v2 @kind i2b;
  #L4937da.  v0[v1]:= v2 @kind byte;
  #L4937de.  v1:= v1 + 1;
  #L4937e2.  goto L4937c2;
  #L4937e4.  return v0 @kind object;
  #L4937e6.  v4:= new `java.lang.IllegalArgumentException`;
  #L4937ea.  v5:= "That combination of buffers, offsets and length to xor result in out-of-bond accesses." @kind object;
  #L4937ee.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4937f4.  throw v4;
}
procedure `byte`[] `xor`(`byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L493770.  v0:= length @variable v2;
  #L493772.  v1:= length @variable v3;
  #L493774.  if v0 != v1 then goto L493786;
  #L493778.  v0:= length @variable v2;
  #L49377a.  v1:= 0I;
  #L49377c.  call temp:= `xor`(v2, v1, v3, v1, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @kind static;
  #L493782.  v2:= temp @kind object;
  #L493784.  return v2 @kind object;
  #L493786.  v2:= new `java.lang.IllegalArgumentException`;
  #L49378a.  v3:= "The lengths of x and y should match." @kind object;
  #L49378e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493794.  throw v2;
}
procedure `byte`[] `xorEnd`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xorEnd:([B[B)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L493808.  v0:= length @variable v5;
  #L49380a.  v1:= length @variable v6;
  #L49380c.  if v0 < v1 then goto L493844;
  #L493810.  v0:= length @variable v5;
  #L493812.  v1:= length @variable v6;
  #L493814.  v0:= v0 - v1 @kind int;
  #L493816.  v1:= length @variable v5;
  #L493818.  call temp:= `copyOf`(v5, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L49381e.  v5:= temp @kind object;
  #L493820.  v1:= 0I;
  #L493822.  v2:= length @variable v6;
  #L493824.  if v1 >= v2 then goto L493842;
  #L493828.  v2:= v0 + v1 @kind int;
  #L49382c.  v3:= v5[v2] @kind byte;
  #L493830.  v4:= v6[v1] @kind byte;
  #L493834.  v3:= v3 ^~ v4 @kind int;
  #L493836.  v3:= (`byte`) v3 @kind i2b;
  #L493838.  v5[v2]:= v3 @kind byte;
  #L49383c.  v1:= v1 + 1;
  #L493840.  goto L493822;
  #L493842.  return v5 @kind object;
  #L493844.  v5:= new `java.lang.IllegalArgumentException`;
  #L493848.  v6:= "xorEnd requires a.length >= b.length" @kind object;
  #L49384c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493852.  throw v5;
}
