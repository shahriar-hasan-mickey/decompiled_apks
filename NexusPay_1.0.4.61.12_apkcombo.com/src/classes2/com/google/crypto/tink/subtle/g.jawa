record `com.google.crypto.tink.subtle.g` @kind class @AccessFlag FINAL {
}
global `long`[] `@@com.google.crypto.tink.subtle.g.a` @AccessFlag STATIC_FINAL;
global `long`[] `@@com.google.crypto.tink.subtle.g.b` @AccessFlag STATIC_FINAL;
global `long`[] `@@com.google.crypto.tink.subtle.g.c` @AccessFlag STATIC_FINAL;
global `com.google.crypto.tink.subtle.f$a`[][] `@@com.google.crypto.tink.subtle.g.d` @AccessFlag STATIC_FINAL;
global `com.google.crypto.tink.subtle.f$a`[] `@@com.google.crypto.tink.subtle.g.e` @AccessFlag STATIC_FINAL;
global `java.math.BigInteger` `@@com.google.crypto.tink.subtle.g.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@com.google.crypto.tink.subtle.g.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@com.google.crypto.tink.subtle.g.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@com.google.crypto.tink.subtle.g.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49581c.  v0:= 2L;
  #L495820.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L495826.  v2:= temp @kind object;
  #L495828.  v3:= 255I;
  #L49582c.  call temp:= `pow`(v2, v3) @signature `Ljava/math/BigInteger;.pow:(I)Ljava/math/BigInteger;` @kind virtual;
  #L495832.  v2:= temp @kind object;
  #L495834.  v3:= 19L;
  #L495838.  call temp:= `valueOf`(v3) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L49583e.  v3:= temp @kind object;
  #L495840.  call temp:= `subtract`(v2, v3) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495846.  v2:= temp @kind object;
  #L495848.  `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` := v2 @kind object;
  #L49584c.  v2:= -121665L;
  #L495852.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L495858.  v2:= temp @kind object;
  #L49585a.  v3:= 121666L;
  #L495860.  call temp:= `valueOf`(v3) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L495866.  v3:= temp @kind object;
  #L495868.  v4:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L49586c.  call temp:= `modInverse`(v3, v4) @signature `Ljava/math/BigInteger;.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495872.  v3:= temp @kind object;
  #L495874.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49587a.  v2:= temp @kind object;
  #L49587c.  v3:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495880.  call temp:= `mod`(v2, v3) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495886.  v2:= temp @kind object;
  #L495888.  `@@com.google.crypto.tink.subtle.g.g` @type ^`java.math.BigInteger` := v2 @kind object;
  #L49588c.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L495892.  v2:= temp @kind object;
  #L495894.  v3:= `@@com.google.crypto.tink.subtle.g.g` @type ^`java.math.BigInteger` @kind object;
  #L495898.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49589e.  v2:= temp @kind object;
  #L4958a0.  v3:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4958a4.  call temp:= `mod`(v2, v3) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4958aa.  v2:= temp @kind object;
  #L4958ac.  `@@com.google.crypto.tink.subtle.g.h` @type ^`java.math.BigInteger` := v2 @kind object;
  #L4958b0.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L4958b6.  v0:= temp @kind object;
  #L4958b8.  v1:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4958bc.  v2:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L4958c0.  call temp:= `subtract`(v1, v2) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4958c6.  v1:= temp @kind object;
  #L4958c8.  v2:= 4L;
  #L4958cc.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L4958d2.  v4:= temp @kind object;
  #L4958d4.  call temp:= `divide`(v1, v4) @signature `Ljava/math/BigInteger;.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4958da.  v1:= temp @kind object;
  #L4958dc.  v4:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4958e0.  call temp:= `modPow`(v0, v1, v4) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4958e6.  v0:= temp @kind object;
  #L4958e8.  `@@com.google.crypto.tink.subtle.g.i` @type ^`java.math.BigInteger` := v0 @kind object;
  #L4958ec.  v0:= new `com.google.crypto.tink.subtle.g$b`;
  #L4958f0.  v1:= 0I;
  #L4958f2.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/g$b;.<init>:(Lcom/google/crypto/tink/subtle/g$a;)V` @kind direct;
  #L4958f8.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L4958fe.  v1:= temp @kind object;
  #L495900.  v2:= 5L;
  #L495904.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L49590a.  v2:= temp @kind object;
  #L49590c.  v3:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495910.  call temp:= `modInverse`(v2, v3) @signature `Ljava/math/BigInteger;.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495916.  v2:= temp @kind object;
  #L495918.  call temp:= `multiply`(v1, v2) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49591e.  v1:= temp @kind object;
  #L495920.  v2:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495924.  call temp:= `mod`(v1, v2) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49592a.  v1:= temp @kind object;
  #L49592c.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/g$b;.b:(Lcom/google/crypto/tink/subtle/g$b;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind static;
  #L495932.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495938.  v1:= temp @kind object;
  #L49593a.  call temp:= `c`(v1) @signature `Lcom/google/crypto/tink/subtle/g;.c:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind static;
  #L495940.  v1:= temp @kind object;
  #L495942.  call temp:= `d`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/g$b;.d:(Lcom/google/crypto/tink/subtle/g$b;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind static;
  #L495948.  v1:= `@@com.google.crypto.tink.subtle.g.g` @type ^`java.math.BigInteger` @kind object;
  #L49594c.  call temp:= `d`(v1) @signature `Lcom/google/crypto/tink/subtle/g;.d:(Ljava/math/BigInteger;)[B` @kind static;
  #L495952.  v1:= temp @kind object;
  #L495954.  call temp:= `c`(v1) @signature `Lcom/google/crypto/tink/subtle/h;.c:([B)[J` @kind static;
  #L49595a.  v1:= temp @kind object;
  #L49595c.  `@@com.google.crypto.tink.subtle.g.a` @type ^`long`[] := v1 @kind object;
  #L495960.  v1:= `@@com.google.crypto.tink.subtle.g.h` @type ^`java.math.BigInteger` @kind object;
  #L495964.  call temp:= `d`(v1) @signature `Lcom/google/crypto/tink/subtle/g;.d:(Ljava/math/BigInteger;)[B` @kind static;
  #L49596a.  v1:= temp @kind object;
  #L49596c.  call temp:= `c`(v1) @signature `Lcom/google/crypto/tink/subtle/h;.c:([B)[J` @kind static;
  #L495972.  v1:= temp @kind object;
  #L495974.  `@@com.google.crypto.tink.subtle.g.b` @type ^`long`[] := v1 @kind object;
  #L495978.  v1:= `@@com.google.crypto.tink.subtle.g.i` @type ^`java.math.BigInteger` @kind object;
  #L49597c.  call temp:= `d`(v1) @signature `Lcom/google/crypto/tink/subtle/g;.d:(Ljava/math/BigInteger;)[B` @kind static;
  #L495982.  v1:= temp @kind object;
  #L495984.  call temp:= `c`(v1) @signature `Lcom/google/crypto/tink/subtle/h;.c:([B)[J` @kind static;
  #L49598a.  v1:= temp @kind object;
  #L49598c.  `@@com.google.crypto.tink.subtle.g.c` @type ^`long`[] := v1 @kind object;
  #L495990.  v1:= 2I;
  #L495992.  v1:= new `int`[v1];
  #L495996.  goto L495a3c;
  #L49599c.  v2:= constclass @type ^`com.google.crypto.tink.subtle.f$a` @kind object;
  #L4959a0.  call temp:= `newInstance`(v2, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;[I)Ljava/lang/Object;` @kind static;
  #L4959a6.  v1:= temp @kind object;
  #L4959a8.  v1:= (`com.google.crypto.tink.subtle.f$a`[][]) v1 @kind object;
  #L4959ac.  `@@com.google.crypto.tink.subtle.g.d` @type ^`com.google.crypto.tink.subtle.f$a`[][] := v1 @kind object;
  #L4959b0.  v1:= 0I;
  #L4959b2.  v3:= v0 @kind object;
  #L4959b4.  v2:= 0I;
  #L4959b6.  v4:= 32I;
  #L4959ba.  v5:= 8I;
  #L4959be.  if v2 >= v4 then goto L495a06;
  #L4959c2.  v6:= v3 @kind object;
  #L4959c4.  v4:= 0I;
  #L4959c6.  if v4 >= v5 then goto L4959ec;
  #L4959ca.  v7:= `@@com.google.crypto.tink.subtle.g.d` @type ^`com.google.crypto.tink.subtle.f$a`[][] @kind object;
  #L4959ce.  v7:= v7[v2] @kind object;
  #L4959d2.  call temp:= `b`(v6) @signature `Lcom/google/crypto/tink/subtle/g;.b:(Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/f$a;` @kind static;
  #L4959d8.  v8:= temp @kind object;
  #L4959da.  v7[v4]:= v8 @kind object;
  #L4959de.  call temp:= `a`(v6, v3) @signature `Lcom/google/crypto/tink/subtle/g;.a:(Lcom/google/crypto/tink/subtle/g$b;Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/g$b;` @kind static;
  #L4959e4.  v6:= temp @kind object;
  #L4959e6.  v4:= v4 + 1;
  #L4959ea.  goto L4959c6;
  #L4959ec.  v4:= 0I;
  #L4959ee.  if v4 >= v5 then goto L495a00;
  #L4959f2.  call temp:= `a`(v3, v3) @signature `Lcom/google/crypto/tink/subtle/g;.a:(Lcom/google/crypto/tink/subtle/g$b;Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/g$b;` @kind static;
  #L4959f8.  v3:= temp @kind object;
  #L4959fa.  v4:= v4 + 1;
  #L4959fe.  goto L4959ee;
  #L495a00.  v2:= v2 + 1;
  #L495a04.  goto L4959b6;
  #L495a06.  call temp:= `a`(v0, v0) @signature `Lcom/google/crypto/tink/subtle/g;.a:(Lcom/google/crypto/tink/subtle/g$b;Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/g$b;` @kind static;
  #L495a0c.  v2:= temp @kind object;
  #L495a0e.  v3:= new `com.google.crypto.tink.subtle.f$a`[v5];
  #L495a12.  `@@com.google.crypto.tink.subtle.g.e` @type ^`com.google.crypto.tink.subtle.f$a`[] := v3 @kind object;
  #L495a16.  if v1 >= v5 then goto L495a38;
  #L495a1a.  v3:= `@@com.google.crypto.tink.subtle.g.e` @type ^`com.google.crypto.tink.subtle.f$a`[] @kind object;
  #L495a1e.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/g;.b:(Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/f$a;` @kind static;
  #L495a24.  v4:= temp @kind object;
  #L495a26.  v3[v1]:= v4 @kind object;
  #L495a2a.  call temp:= `a`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/g;.a:(Lcom/google/crypto/tink/subtle/g$b;Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/g$b;` @kind static;
  #L495a30.  v0:= temp @kind object;
  #L495a32.  v1:= v1 + 1;
  #L495a36.  goto L495a16;
  #L495a38.  return @kind void;
  #L495a3a.  
  #L495a3c.  v1:= (32I, 8I) @kind object;
  #L495a4b.  goto L49599c;
}
procedure `com.google.crypto.tink.subtle.g$b` `a`(`com.google.crypto.tink.subtle.g$b` v5 @kind object, `com.google.crypto.tink.subtle.g$b` v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/g;.a:(Lcom/google/crypto/tink/subtle/g$b;Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/g$b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4955e4.  v0:= new `com.google.crypto.tink.subtle.g$b`;
  #L4955e8.  v1:= 0I;
  #L4955ea.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/g$b;.<init>:(Lcom/google/crypto/tink/subtle/g$a;)V` @kind direct;
  #L4955f0.  v1:= `@@com.google.crypto.tink.subtle.g.g` @type ^`java.math.BigInteger` @kind object;
  #L4955f4.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L4955fa.  v2:= temp @kind object;
  #L4955fc.  call temp:= `c`(v6) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495602.  v3:= temp @kind object;
  #L495604.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49560a.  v2:= temp @kind object;
  #L49560c.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495612.  v3:= temp @kind object;
  #L495614.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49561a.  v2:= temp @kind object;
  #L49561c.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495622.  v3:= temp @kind object;
  #L495624.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49562a.  v2:= temp @kind object;
  #L49562c.  call temp:= `multiply`(v1, v2) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495632.  v1:= temp @kind object;
  #L495634.  v2:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495638.  call temp:= `mod`(v1, v2) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49563e.  v1:= temp @kind object;
  #L495640.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495646.  v2:= temp @kind object;
  #L495648.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L49564e.  v3:= temp @kind object;
  #L495650.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495656.  v2:= temp @kind object;
  #L495658.  call temp:= `c`(v6) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L49565e.  v3:= temp @kind object;
  #L495660.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495666.  v4:= temp @kind object;
  #L495668.  call temp:= `multiply`(v3, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49566e.  v3:= temp @kind object;
  #L495670.  call temp:= `add`(v2, v3) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495676.  v2:= temp @kind object;
  #L495678.  v3:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L49567c.  call temp:= `add`(v3, v1) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495682.  v3:= temp @kind object;
  #L495684.  v4:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495688.  call temp:= `modInverse`(v3, v4) @signature `Ljava/math/BigInteger;.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49568e.  v3:= temp @kind object;
  #L495690.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495696.  v2:= temp @kind object;
  #L495698.  v3:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L49569c.  call temp:= `mod`(v2, v3) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4956a2.  v2:= temp @kind object;
  #L4956a4.  call temp:= `d`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/g$b;.d:(Lcom/google/crypto/tink/subtle/g$b;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind static;
  #L4956aa.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L4956b0.  v2:= temp @kind object;
  #L4956b2.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L4956b8.  v3:= temp @kind object;
  #L4956ba.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4956c0.  v2:= temp @kind object;
  #L4956c2.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L4956c8.  v5:= temp @kind object;
  #L4956ca.  call temp:= `c`(v6) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L4956d0.  v6:= temp @kind object;
  #L4956d2.  call temp:= `multiply`(v5, v6) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4956d8.  v5:= temp @kind object;
  #L4956da.  call temp:= `add`(v2, v5) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4956e0.  v5:= temp @kind object;
  #L4956e2.  v6:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L4956e6.  call temp:= `subtract`(v6, v1) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4956ec.  v6:= temp @kind object;
  #L4956ee.  v1:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4956f2.  call temp:= `modInverse`(v6, v1) @signature `Ljava/math/BigInteger;.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4956f8.  v6:= temp @kind object;
  #L4956fa.  call temp:= `multiply`(v5, v6) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495700.  v5:= temp @kind object;
  #L495702.  v6:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495706.  call temp:= `mod`(v5, v6) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49570c.  v5:= temp @kind object;
  #L49570e.  call temp:= `b`(v0, v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.b:(Lcom/google/crypto/tink/subtle/g$b;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind static;
  #L495714.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.f$a` `b`(`com.google.crypto.tink.subtle.g$b` v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/g;.b:(Lcom/google/crypto/tink/subtle/g$b;)Lcom/google/crypto/tink/subtle/f$a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L495520.  v0:= new `com.google.crypto.tink.subtle.f$a`;
  #L495524.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L49552a.  v1:= temp @kind object;
  #L49552c.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495532.  v2:= temp @kind object;
  #L495534.  call temp:= `add`(v1, v2) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49553a.  v1:= temp @kind object;
  #L49553c.  v2:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495540.  call temp:= `mod`(v1, v2) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495546.  v1:= temp @kind object;
  #L495548.  call temp:= `d`(v1) @signature `Lcom/google/crypto/tink/subtle/g;.d:(Ljava/math/BigInteger;)[B` @kind static;
  #L49554e.  v1:= temp @kind object;
  #L495550.  call temp:= `c`(v1) @signature `Lcom/google/crypto/tink/subtle/h;.c:([B)[J` @kind static;
  #L495556.  v1:= temp @kind object;
  #L495558.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L49555e.  v2:= temp @kind object;
  #L495560.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495566.  v3:= temp @kind object;
  #L495568.  call temp:= `subtract`(v2, v3) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49556e.  v2:= temp @kind object;
  #L495570.  v3:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495574.  call temp:= `mod`(v2, v3) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49557a.  v2:= temp @kind object;
  #L49557c.  call temp:= `d`(v2) @signature `Lcom/google/crypto/tink/subtle/g;.d:(Ljava/math/BigInteger;)[B` @kind static;
  #L495582.  v2:= temp @kind object;
  #L495584.  call temp:= `c`(v2) @signature `Lcom/google/crypto/tink/subtle/h;.c:([B)[J` @kind static;
  #L49558a.  v2:= temp @kind object;
  #L49558c.  v3:= `@@com.google.crypto.tink.subtle.g.h` @type ^`java.math.BigInteger` @kind object;
  #L495590.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.c:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L495596.  v4:= temp @kind object;
  #L495598.  call temp:= `multiply`(v3, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49559e.  v3:= temp @kind object;
  #L4955a0.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/subtle/g$b;.a:(Lcom/google/crypto/tink/subtle/g$b;)Ljava/math/BigInteger;` @kind static;
  #L4955a6.  v5:= temp @kind object;
  #L4955a8.  call temp:= `multiply`(v3, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4955ae.  v5:= temp @kind object;
  #L4955b0.  v3:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4955b4.  call temp:= `mod`(v5, v3) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4955ba.  v5:= temp @kind object;
  #L4955bc.  call temp:= `d`(v5) @signature `Lcom/google/crypto/tink/subtle/g;.d:(Ljava/math/BigInteger;)[B` @kind static;
  #L4955c2.  v5:= temp @kind object;
  #L4955c4.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/subtle/h;.c:([B)[J` @kind static;
  #L4955ca.  v5:= temp @kind object;
  #L4955cc.  call `<init>`(v0, v1, v2, v5) @signature `Lcom/google/crypto/tink/subtle/f$a;.<init>:([J[J[J)V` @kind direct;
  #L4955d2.  return v0 @kind object;
}
procedure `java.math.BigInteger` `c`(`java.math.BigInteger` v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/g;.c:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L495728.  v0:= 2I;
  #L49572a.  call temp:= `pow`(v4, v0) @signature `Ljava/math/BigInteger;.pow:(I)Ljava/math/BigInteger;` @kind virtual;
  #L495730.  v1:= temp @kind object;
  #L495732.  v2:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L495736.  call temp:= `subtract`(v1, v2) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49573c.  v1:= temp @kind object;
  #L49573e.  v2:= `@@com.google.crypto.tink.subtle.g.g` @type ^`java.math.BigInteger` @kind object;
  #L495742.  call temp:= `pow`(v4, v0) @signature `Ljava/math/BigInteger;.pow:(I)Ljava/math/BigInteger;` @kind virtual;
  #L495748.  v4:= temp @kind object;
  #L49574a.  call temp:= `multiply`(v2, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495750.  v4:= temp @kind object;
  #L495752.  v2:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L495756.  call temp:= `add`(v4, v2) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49575c.  v4:= temp @kind object;
  #L49575e.  v2:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495762.  call temp:= `modInverse`(v4, v2) @signature `Ljava/math/BigInteger;.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495768.  v4:= temp @kind object;
  #L49576a.  call temp:= `multiply`(v1, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495770.  v4:= temp @kind object;
  #L495772.  v1:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495776.  v2:= 3L;
  #L49577a.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L495780.  v2:= temp @kind object;
  #L495782.  call temp:= `add`(v1, v2) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495788.  v1:= temp @kind object;
  #L49578a.  v2:= 8L;
  #L49578e.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L495794.  v2:= temp @kind object;
  #L495796.  call temp:= `divide`(v1, v2) @signature `Ljava/math/BigInteger;.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49579c.  v1:= temp @kind object;
  #L49579e.  v2:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4957a2.  call temp:= `modPow`(v4, v1, v2) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4957a8.  v1:= temp @kind object;
  #L4957aa.  call temp:= `pow`(v1, v0) @signature `Ljava/math/BigInteger;.pow:(I)Ljava/math/BigInteger;` @kind virtual;
  #L4957b0.  v0:= temp @kind object;
  #L4957b2.  call temp:= `subtract`(v0, v4) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4957b8.  v4:= temp @kind object;
  #L4957ba.  v0:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4957be.  call temp:= `mod`(v4, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4957c4.  v4:= temp @kind object;
  #L4957c6.  v0:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L4957ca.  call temp:= `equals`(v4, v0) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4957d0.  v4:= temp;
  #L4957d2.  if v4 != 0 then goto L4957ee;
  #L4957d6.  v4:= `@@com.google.crypto.tink.subtle.g.i` @type ^`java.math.BigInteger` @kind object;
  #L4957da.  call temp:= `multiply`(v1, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4957e0.  v4:= temp @kind object;
  #L4957e2.  v0:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L4957e6.  call temp:= `mod`(v4, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4957ec.  v1:= temp @kind object;
  #L4957ee.  v4:= 0I;
  #L4957f0.  call temp:= `testBit`(v1, v4) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L4957f6.  v4:= temp;
  #L4957f8.  if v4 == 0 then goto L495808;
  #L4957fc.  v4:= `@@com.google.crypto.tink.subtle.g.f` @type ^`java.math.BigInteger` @kind object;
  #L495800.  call temp:= `subtract`(v4, v1) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L495806.  v1:= temp @kind object;
  #L495808.  return v1 @kind object;
}
procedure `byte`[] `d`(`java.math.BigInteger` v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/g;.d:(Ljava/math/BigInteger;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4954c8.  v0:= 32I;
  #L4954cc.  v1:= new `byte`[v0];
  #L4954d0.  call temp:= `toByteArray`(v4) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L4954d6.  v4:= temp @kind object;
  #L4954d8.  v2:= length @variable v4;
  #L4954da.  v0:= v0 - v2 @kind int;
  #L4954dc.  v2:= length @variable v4;
  #L4954de.  v3:= 0I;
  #L4954e0.  call `arraycopy`(v4, v3, v1, v0, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4954e6.  v4:= 16I;
  #L4954ea.  if v3 >= v4 then goto L49550c;
  #L4954ee.  v4:= v1[v3] @kind byte;
  #L4954f2.  v0:= v3 - 32;
  #L4954f6.  v0:= v0 + -1;
  #L4954fa.  v2:= v1[v0] @kind byte;
  #L4954fe.  v1[v3]:= v2 @kind byte;
  #L495502.  v1[v0]:= v4 @kind byte;
  #L495506.  v3:= v3 + 1;
  #L49550a.  goto L4954e6;
  #L49550c.  return v1 @kind object;
}
