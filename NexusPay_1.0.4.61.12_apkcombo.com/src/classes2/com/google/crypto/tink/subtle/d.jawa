record `com.google.crypto.tink.subtle.d` @kind class @AccessFlag ABSTRACT extends `com.google.crypto.tink.Aead` @kind interface {
  `com.google.crypto.tink.subtle.c` `com.google.crypto.tink.subtle.d.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.c` `com.google.crypto.tink.subtle.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.d` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L494000.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L494006.  v0:= 1I;
  #L494008.  call temp:= `e`(v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/d;.e:([BI)Lcom/google/crypto/tink/subtle/c;` @kind virtual;
  #L49400e.  v0:= temp @kind object;
  #L494010.  v1.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` := v0 @kind object;
  #L494014.  v0:= 0I;
  #L494016.  call temp:= `e`(v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/d;.e:([BI)Lcom/google/crypto/tink/subtle/c;` @kind virtual;
  #L49401c.  v2:= temp @kind object;
  #L49401e.  v1.`com.google.crypto.tink.subtle.d.b` @type ^`com.google.crypto.tink.subtle.c` := v2 @kind object;
  #L494022.  return @kind void;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.d` v4 @kind this, `java.nio.ByteBuffer` v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.a:(Ljava/nio/ByteBuffer;[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L493de8.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L493dee.  v0:= temp;
  #L493df0.  v1:= v4.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L493df4.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493dfa.  v1:= temp;
  #L493dfc.  v2:= 16I;
  #L493e00.  v1:= v1 + v2 @kind int;
  #L493e02.  if v0 < v1 then goto L493e9e;
  #L493e06.  call temp:= `position`(v5) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L493e0c.  v0:= temp;
  #L493e0e.  v1:= new `byte`[v2];
  #L493e12.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L493e18.  v3:= temp;
  #L493e1a.  v3:= v3 - v2 @kind int;
  #L493e1c.  call temp:= `position`(v5, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L493e22.  call temp:= `get`(v5, v1) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493e28.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L493e2e.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L493e34.  v3:= temp;
  #L493e36.  v3:= v3 - v2 @kind int;
  #L493e38.  call temp:= `limit`(v5, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L493e3e.  v2:= v4.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L493e42.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493e48.  v2:= temp;
  #L493e4a.  v2:= new `byte`[v2];
  #L493e4e.  call temp:= `get`(v5, v2) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493e54.  if v6 != 0 then goto L493e5e;
  #L493e58.  v6:= 0I;
  #L493e5a.  v6:= new `byte`[v6];
  #L493e5e.  call temp:= `c`(v4, v2) @signature `Lcom/google/crypto/tink/subtle/d;.c:([B)[B` @kind direct;
  #L493e64.  v2:= temp @kind object;
  #L493e66.  call temp:= `d`(v6, v5) @signature `Lcom/google/crypto/tink/subtle/d;.d:([BLjava/nio/ByteBuffer;)[B` @kind static;
  #L493e6c.  v6:= temp @kind object;
  #L493e6e.  call `f`(v2, v6, v1) @signature `Lcom/google/crypto/tink/subtle/j;.f:([B[B[B)V` @kind static;
  #L493e74.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L493e7a.  v6:= v4.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L493e7e.  call temp:= `c`(v6, v5) @signature `Lcom/google/crypto/tink/subtle/c;.c:(Ljava/nio/ByteBuffer;)[B` @kind virtual;
  #L493e84.  v5:= temp @kind object;
  #L493e86.  return v5 @kind object;
  #L493e88.  v5:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L493e8a.  v6:= new `javax.crypto.AEADBadTagException`;
  #L493e8e.  call temp:= `toString`(v5) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L493e94.  v5:= temp @kind object;
  #L493e96.  call `<init>`(v6, v5) @signature `Ljavax/crypto/AEADBadTagException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493e9c.  throw v6;
  #L493e9e.  v5:= new `java.security.GeneralSecurityException`;
  #L493ea2.  v6:= "ciphertext too short" @kind object;
  #L493ea6.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493eac.  throw v5;
  catch `java.security.GeneralSecurityException` @[L493e5e..L493e74] goto L493e88;
}
procedure `void` `b`(`com.google.crypto.tink.subtle.d` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.b:(Ljava/nio/ByteBuffer;[B[B)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L494034.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49403a.  v0:= temp;
  #L49403c.  v1:= length @variable v5;
  #L49403e.  v2:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L494042.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L494048.  v2:= temp;
  #L49404a.  v1:= v1 + v2 @kind int;
  #L49404c.  v1:= v1 + 16;
  #L494050.  if v0 < v1 then goto L4940d0;
  #L494054.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49405a.  v0:= temp;
  #L49405c.  v1:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L494060.  call `d`(v1, v4, v5) @signature `Lcom/google/crypto/tink/subtle/c;.d:(Ljava/nio/ByteBuffer;[B)V` @kind virtual;
  #L494066.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49406c.  v5:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L494070.  call temp:= `e`(v5) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L494076.  v5:= temp;
  #L494078.  v5:= new `byte`[v5];
  #L49407c.  call temp:= `get`(v4, v5) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L494082.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L494088.  v0:= temp;
  #L49408a.  v0:= v0 + -16;
  #L49408e.  call temp:= `limit`(v4, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L494094.  if v6 != 0 then goto L49409e;
  #L494098.  v6:= 0I;
  #L49409a.  v6:= new `byte`[v6];
  #L49409e.  call temp:= `c`(v3, v5) @signature `Lcom/google/crypto/tink/subtle/d;.c:([B)[B` @kind direct;
  #L4940a4.  v5:= temp @kind object;
  #L4940a6.  call temp:= `d`(v6, v4) @signature `Lcom/google/crypto/tink/subtle/d;.d:([BLjava/nio/ByteBuffer;)[B` @kind static;
  #L4940ac.  v6:= temp @kind object;
  #L4940ae.  call temp:= `a`(v5, v6) @signature `Lcom/google/crypto/tink/subtle/j;.a:([B[B)[B` @kind static;
  #L4940b4.  v5:= temp @kind object;
  #L4940b6.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4940bc.  v6:= temp;
  #L4940be.  v6:= v6 + 16;
  #L4940c2.  call temp:= `limit`(v4, v6) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4940c8.  call temp:= `put`(v4, v5) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4940ce.  return @kind void;
  #L4940d0.  v4:= new `java.lang.IllegalArgumentException`;
  #L4940d4.  v5:= "Given ByteBuffer output is too small" @kind object;
  #L4940d8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4940de.  throw v4;
}
procedure `byte`[] `c`(`com.google.crypto.tink.subtle.d` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.c:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L493f3c.  v0:= v2.`com.google.crypto.tink.subtle.d.b` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L493f40.  v1:= 0I;
  #L493f42.  call temp:= `a`(v0, v3, v1) @signature `Lcom/google/crypto/tink/subtle/c;.a:([BI)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493f48.  v3:= temp @kind object;
  #L493f4a.  v0:= 32I;
  #L493f4e.  v0:= new `byte`[v0];
  #L493f52.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493f58.  return v0 @kind object;
}
procedure `byte`[] `d`(`byte`[] v5 @kind object, `java.nio.ByteBuffer` v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.d:([BLjava/nio/ByteBuffer;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L493f6c.  v0:= length @variable v5;
  #L493f6e.  v0:= v0 %% 16;
  #L493f72.  if v0 != 0 then goto L493f7a;
  #L493f76.  v0:= length @variable v5;
  #L493f78.  goto L493f88;
  #L493f7a.  v0:= length @variable v5;
  #L493f7c.  v0:= v0 + 16;
  #L493f80.  v1:= length @variable v5;
  #L493f82.  v1:= v1 %% 16;
  #L493f86.  v0:= v0 - v1 @kind int;
  #L493f88.  call temp:= `remaining`(v6) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L493f8e.  v1:= temp;
  #L493f90.  v2:= v1 %% 16;
  #L493f94.  if v2 != 0 then goto L493f9c;
  #L493f98.  v3:= v1;
  #L493f9a.  goto L493fa2;
  #L493f9c.  v3:= v1 + 16;
  #L493fa0.  v3:= v3 - v2 @kind int;
  #L493fa2.  v3:= v3 + v0 @kind int;
  #L493fa4.  v2:= v3 + 16;
  #L493fa8.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L493fae.  v2:= temp @kind object;
  #L493fb0.  v4:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L493fb4.  call temp:= `order`(v2, v4) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493fba.  v2:= temp @kind object;
  #L493fbc.  call temp:= `put`(v2, v5) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493fc2.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L493fc8.  call temp:= `put`(v2, v6) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493fce.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L493fd4.  v5:= length @variable v5;
  #L493fd6.  v5:= (`long`) v5 @kind i2l;
  #L493fd8.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493fde.  v5:= (`long`) v1 @kind i2l;
  #L493fe0.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493fe6.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L493fec.  v5:= temp @kind object;
  #L493fee.  return v5 @kind object;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.subtle.d` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;

  #L493dc4.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L493dca.  v1:= temp @kind object;
  #L493dcc.  call temp:= `a`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/d;.a:(Ljava/nio/ByteBuffer;[B)[B` @kind direct;
  #L493dd2.  v1:= temp @kind object;
  #L493dd4.  return v1 @kind object;
}
procedure `com.google.crypto.tink.subtle.c` `e`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/d;.e:([BI)Lcom/google/crypto/tink/subtle/c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `byte`[] `encrypt`(`com.google.crypto.tink.subtle.d` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L493ed0.  v0:= length @variable v4;
  #L493ed2.  v1:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L493ed6.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493edc.  v1:= temp;
  #L493ede.  v2:= 2147483647I;
  #L493ee4.  v2:= v2 - v1 @kind int;
  #L493ee6.  v2:= v2 + -16;
  #L493eea.  if v0 > v2 then goto L493f1a;
  #L493eee.  v0:= length @variable v4;
  #L493ef0.  v1:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L493ef4.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493efa.  v1:= temp;
  #L493efc.  v0:= v0 + v1 @kind int;
  #L493efe.  v0:= v0 + 16;
  #L493f02.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L493f08.  v0:= temp @kind object;
  #L493f0a.  call `b`(v3, v0, v4, v5) @signature `Lcom/google/crypto/tink/subtle/d;.b:(Ljava/nio/ByteBuffer;[B[B)V` @kind direct;
  #L493f10.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L493f16.  v4:= temp @kind object;
  #L493f18.  return v4 @kind object;
  #L493f1a.  v4:= new `java.security.GeneralSecurityException`;
  #L493f1e.  v5:= "plaintext too long" @kind object;
  #L493f22.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493f28.  throw v4;
}
