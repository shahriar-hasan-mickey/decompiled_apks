record `com.google.crypto.tink.subtle.Base64$b` @kind class @AccessFlag  extends `com.google.crypto.tink.subtle.Base64$a` @kind class {
  `int` `com.google.crypto.tink.subtle.Base64$b.c` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.Base64$b.d` @AccessFlag PRIVATE;
  `int`[] `com.google.crypto.tink.subtle.Base64$b.e` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@com.google.crypto.tink.subtle.Base64$b.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@com.google.crypto.tink.subtle.Base64$b.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Base64$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L492634.  v0:= 256I;
  #L492638.  v1:= new `int`[v0];
  #L49263c.  goto L492658;
  #L492642.  `@@com.google.crypto.tink.subtle.Base64$b.f` @type ^`int`[] := v1 @kind object;
  #L492646.  v0:= new `int`[v0];
  #L49264a.  goto L492a60;
  #L492650.  `@@com.google.crypto.tink.subtle.Base64$b.g` @type ^`int`[] := v0 @kind object;
  #L492654.  return @kind void;
  #L492656.  
  #L492658.  v1:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 62I, -1I, -1I, -1I, 63I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -1I, -1I, -1I, -2I, -1I, -1I, -1I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -1I, -1I, -1I, -1I, -1I, -1I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I) @kind object;
  #L492a5f.  goto L492642;
  #L492a60.  v0:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 62I, -1I, -1I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -1I, -1I, -1I, -2I, -1I, -1I, -1I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -1I, -1I, -1I, -1I, 63I, -1I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I) @kind object;
  #L492e67.  goto L492650;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Base64$b` v0 @kind this, `int` v1 , `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.<init>:(I[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L492e78.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/subtle/Base64$a;.<init>:()V` @kind direct;
  #L492e7e.  v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] := v2 @kind object;
  #L492e82.  v1:= v1 ^& 8;
  #L492e86.  if v1 != 0 then goto L492e90;
  #L492e8a.  v1:= `@@com.google.crypto.tink.subtle.Base64$b.f` @type ^`int`[] @kind object;
  #L492e8e.  goto L492e94;
  #L492e90.  v1:= `@@com.google.crypto.tink.subtle.Base64$b.g` @type ^`int`[] @kind object;
  #L492e94.  v0.`com.google.crypto.tink.subtle.Base64$b.e` @type ^`int`[] := v1 @kind object;
  #L492e98.  v1:= 0I;
  #L492e9a.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v1;
  #L492e9e.  v0.`com.google.crypto.tink.subtle.Base64$b.d` @type ^`int` := v1;
  #L492ea2.  return @kind void;
}
procedure `boolean` `a`(`com.google.crypto.tink.subtle.Base64$b` v16 @kind this, `byte`[] v17 @kind object, `int` v18 , `int` v19 , `boolean` v20 ) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.a:([BIIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L4923d8.  v0:= v16 @kind object;
  #L4923dc.  v1:= v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int`;
  #L4923e0.  v2:= 0I;
  #L4923e2.  v3:= 6I;
  #L4923e4.  if v1 != v3 then goto L4923ea;
  #L4923e8.  return v2;
  #L4923ea.  v4:= v19 + v18 @kind int;
  #L4923ee.  v5:= v0.`com.google.crypto.tink.subtle.Base64$b.d` @type ^`int`;
  #L4923f2.  v6:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L4923f6.  v7:= v0.`com.google.crypto.tink.subtle.Base64$b.e` @type ^`int`[] @kind object;
  #L4923fa.  v8:= v5;
  #L4923fc.  v9:= 0I;
  #L4923fe.  v5:= v1;
  #L492400.  v1:= v18;
  #L492404.  v10:= 3I;
  #L492406.  v11:= 4I;
  #L492408.  v12:= 2I;
  #L49240a.  v13:= 1I;
  #L49240c.  if v1 >= v4 then goto L4925ba;
  #L492410.  if v5 != 0 then goto L49249e;
  #L492414.  v14:= v1 + 4;
  #L492418.  if v14 > v4 then goto L492496;
  #L49241c.  v8:= v17[v1] @kind byte;
  #L492420.  v8:= v8 ^& 255;
  #L492424.  v8:= v7[v8];
  #L492428.  v8:= v8 ^< 18;
  #L49242c.  v15:= v1 + 1;
  #L492430.  v15:= v17[v15] @kind byte;
  #L492434.  v15:= v15 ^& 255;
  #L492438.  v15:= v7[v15];
  #L49243c.  v15:= v15 ^< 12;
  #L492440.  v8:= v8 ^| v15 @kind int;
  #L492442.  v15:= v1 + 2;
  #L492446.  v15:= v17[v15] @kind byte;
  #L49244a.  v15:= v15 ^& 255;
  #L49244e.  v15:= v7[v15];
  #L492452.  v15:= v15 ^< v3 @kind int;
  #L492454.  v8:= v8 ^| v15 @kind int;
  #L492456.  v15:= v1 + 3;
  #L49245a.  v15:= v17[v15] @kind byte;
  #L49245e.  v15:= v15 ^& 255;
  #L492462.  v15:= v7[v15];
  #L492466.  v8:= v8 ^| v15 @kind int;
  #L492468.  if v8 < 0 then goto L492496;
  #L49246c.  v1:= v9 + 2;
  #L492470.  v15:= (`byte`) v8 @kind i2b;
  #L492472.  v6[v1]:= v15 @kind byte;
  #L492476.  v1:= v9 + 1;
  #L49247a.  v15:= v8 ^> 8;
  #L49247e.  v15:= (`byte`) v15 @kind i2b;
  #L492480.  v6[v1]:= v15 @kind byte;
  #L492484.  v1:= v8 ^> 16;
  #L492488.  v1:= (`byte`) v1 @kind i2b;
  #L49248a.  v6[v9]:= v1 @kind byte;
  #L49248e.  v9:= v9 + 3;
  #L492492.  v1:= v14;
  #L492494.  goto L492414;
  #L492496.  if v1 < v4 then goto L49249e;
  #L49249a.  goto L4925ba;
  #L49249e.  v14:= v1 + 1;
  #L4924a2.  v1:= v17[v1] @kind byte;
  #L4924a6.  v1:= v1 ^& 255;
  #L4924aa.  v1:= v7[v1];
  #L4924ae.  v15:= 5I;
  #L4924b0.  v2:= -1I;
  #L4924b2.  if v5 == 0 then goto L49259a;
  #L4924b6.  if v5 == v13 then goto L492582;
  #L4924ba.  v13:= -2I;
  #L4924bc.  if v5 == v12 then goto L49255a;
  #L4924c0.  if v5 == v10 then goto L4924f4;
  #L4924c4.  if v5 == v11 then goto L4924dc;
  #L4924c8.  if v5 == v15 then goto L4924d0;
  #L4924cc.  goto L4925b2;
  #L4924d0.  if v1 == v2 then goto L4925b2;
  #L4924d4.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L4924d8.  v10:= 0I;
  #L4924da.  return v10;
  #L4924dc.  v10:= 0I;
  #L4924de.  if v1 != v13 then goto L4924ea;
  #L4924e2.  v5:= v5 + 1;
  #L4924e6.  goto L4925b2;
  #L4924ea.  if v1 == v2 then goto L4925b2;
  #L4924ee.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L4924f2.  return v10;
  #L4924f4.  if v1 < 0 then goto L49252a;
  #L4924f8.  v2:= v8 ^< 6;
  #L4924fc.  v1:= v1 ^| v2 @kind int;
  #L4924fe.  v2:= v9 + 2;
  #L492502.  v5:= (`byte`) v1 @kind i2b;
  #L492504.  v6[v2]:= v5 @kind byte;
  #L492508.  v2:= v9 + 1;
  #L49250c.  v5:= v1 ^> 8;
  #L492510.  v5:= (`byte`) v5 @kind i2b;
  #L492512.  v6[v2]:= v5 @kind byte;
  #L492516.  v2:= v1 ^> 16;
  #L49251a.  v2:= (`byte`) v2 @kind i2b;
  #L49251c.  v6[v9]:= v2 @kind byte;
  #L492520.  v9:= v9 + 3;
  #L492524.  v8:= v1;
  #L492526.  v5:= 0I;
  #L492528.  goto L4925b2;
  #L49252a.  if v1 != v13 then goto L49254e;
  #L49252e.  v1:= v9 + 1;
  #L492532.  v2:= v8 ^> 2;
  #L492536.  v2:= (`byte`) v2 @kind i2b;
  #L492538.  v6[v1]:= v2 @kind byte;
  #L49253c.  v1:= v8 ^> 10;
  #L492540.  v1:= (`byte`) v1 @kind i2b;
  #L492542.  v6[v9]:= v1 @kind byte;
  #L492546.  v9:= v9 + 2;
  #L49254a.  v5:= 5I;
  #L49254c.  goto L4925b2;
  #L49254e.  if v1 == v2 then goto L4925b2;
  #L492552.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L492556.  v1:= 0I;
  #L492558.  return v1;
  #L49255a.  if v1 < 0 then goto L492560;
  #L49255e.  goto L492588;
  #L492560.  if v1 != v13 then goto L492578;
  #L492564.  v1:= v9 + 1;
  #L492568.  v2:= v8 ^> 4;
  #L49256c.  v2:= (`byte`) v2 @kind i2b;
  #L49256e.  v6[v9]:= v2 @kind byte;
  #L492572.  v9:= v1;
  #L492574.  v5:= 4I;
  #L492576.  goto L4925b2;
  #L492578.  if v1 == v2 then goto L4925b2;
  #L49257c.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L492580.  goto L4924d8;
  #L492582.  v10:= 0I;
  #L492584.  if v1 < 0 then goto L492590;
  #L492588.  v2:= v8 ^< 6;
  #L49258c.  v1:= v1 ^| v2 @kind int;
  #L49258e.  goto L4925a0;
  #L492590.  if v1 == v2 then goto L4925b2;
  #L492594.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L492598.  return v10;
  #L49259a.  v10:= 0I;
  #L49259c.  if v1 < 0 then goto L4925a8;
  #L4925a0.  v5:= v5 + 1;
  #L4925a4.  v8:= v1;
  #L4925a6.  goto L4925b2;
  #L4925a8.  if v1 == v2 then goto L4925b2;
  #L4925ac.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L4925b0.  return v10;
  #L4925b2.  v1:= v14;
  #L4925b4.  v2:= 0I;
  #L4925b6.  goto L492404;
  #L4925ba.  if v20 != 0 then goto L4925cc;
  #L4925be.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v5;
  #L4925c2.  v0.`com.google.crypto.tink.subtle.Base64$b.d` @type ^`int` := v8;
  #L4925c6.  v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int` := v9;
  #L4925ca.  return v13;
  #L4925cc.  if v5 == v13 then goto L49261c;
  #L4925d0.  if v5 == v12 then goto L492602;
  #L4925d4.  if v5 == v10 then goto L4925e4;
  #L4925d8.  if v5 == v11 then goto L4925de;
  #L4925dc.  goto L492612;
  #L4925de.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L4925e2.  goto L492556;
  #L4925e4.  v1:= v9 + 1;
  #L4925e8.  v2:= v8 ^> 10;
  #L4925ec.  v2:= (`byte`) v2 @kind i2b;
  #L4925ee.  v6[v9]:= v2 @kind byte;
  #L4925f2.  v9:= v1 + 1;
  #L4925f6.  v2:= v8 ^> 2;
  #L4925fa.  v2:= (`byte`) v2 @kind i2b;
  #L4925fc.  v6[v1]:= v2 @kind byte;
  #L492600.  goto L492612;
  #L492602.  v1:= v9 + 1;
  #L492606.  v2:= v8 ^> 4;
  #L49260a.  v2:= (`byte`) v2 @kind i2b;
  #L49260c.  v6[v9]:= v2 @kind byte;
  #L492610.  v9:= v1;
  #L492612.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v5;
  #L492616.  v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int` := v9;
  #L49261a.  return v13;
  #L49261c.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L492620.  goto L492556;
}
