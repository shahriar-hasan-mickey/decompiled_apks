record `com.google.crypto.tink.subtle.k` @kind class @AccessFlag  extends `java.nio.channels.ReadableByteChannel` @kind interface {
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.subtle.k.a` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.k.b` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.k.c` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.k.d` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.e` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.f` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.g` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.h` @AccessFlag PRIVATE;
  `byte`[] `com.google.crypto.tink.subtle.k.i` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.k.j` @AccessFlag PRIVATE;
  `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `com.google.crypto.tink.subtle.k.k` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.k.l` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.k.m` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.k` v2 @kind this, `com.google.crypto.tink.subtle.i` v3 @kind object, `java.nio.channels.ReadableByteChannel` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/k;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/ReadableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49e468.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49e46e.  call temp:= `newStreamSegmentDecrypter`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @kind virtual;
  #L49e474.  v0:= temp @kind object;
  #L49e476.  v2.`com.google.crypto.tink.subtle.k.k` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` := v0 @kind object;
  #L49e47a.  v2.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` := v4 @kind object;
  #L49e47e.  call temp:= `getHeaderLength`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L49e484.  v4:= temp;
  #L49e486.  call temp:= `allocate`(v4) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49e48c.  v4:= temp @kind object;
  #L49e48e.  v2.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L49e492.  v4:= length @variable v5;
  #L49e494.  call temp:= `copyOf`(v5, v4) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L49e49a.  v4:= temp @kind object;
  #L49e49c.  v2.`com.google.crypto.tink.subtle.k.i` @type ^`byte`[] := v4 @kind object;
  #L49e4a0.  call temp:= `getCiphertextSegmentSize`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @kind virtual;
  #L49e4a6.  v4:= temp;
  #L49e4a8.  v2.`com.google.crypto.tink.subtle.k.l` @type ^`int` := v4;
  #L49e4ac.  v5:= 1I;
  #L49e4ae.  v4:= v4 + v5 @kind int;
  #L49e4b0.  call temp:= `allocate`(v4) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49e4b6.  v4:= temp @kind object;
  #L49e4b8.  v2.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L49e4bc.  v0:= 0I;
  #L49e4be.  call temp:= `limit`(v4, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e4c4.  v4:= v2.`com.google.crypto.tink.subtle.k.l` @type ^`int`;
  #L49e4c8.  call temp:= `getCiphertextOffset`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @kind virtual;
  #L49e4ce.  v1:= temp;
  #L49e4d0.  v4:= v4 - v1 @kind int;
  #L49e4d2.  v2.`com.google.crypto.tink.subtle.k.m` @type ^`int` := v4;
  #L49e4d6.  call temp:= `getPlaintextSegmentSize`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @kind virtual;
  #L49e4dc.  v3:= temp;
  #L49e4de.  v3:= v3 + 16;
  #L49e4e2.  call temp:= `allocate`(v3) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49e4e8.  v3:= temp @kind object;
  #L49e4ea.  v2.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L49e4ee.  call temp:= `limit`(v3, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e4f4.  v2.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` := v0 @kind boolean;
  #L49e4f8.  v2.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` := v0 @kind boolean;
  #L49e4fc.  v2.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` := v0 @kind boolean;
  #L49e500.  v2.`com.google.crypto.tink.subtle.k.j` @type ^`int` := v0;
  #L49e504.  v2.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` := v5 @kind boolean;
  #L49e508.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.k` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/k;.a:(Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L49e550.  v0:= v2.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49e554.  call temp:= `read`(v0, v3) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L49e55a.  v0:= temp;
  #L49e55c.  if v0 <= 0 then goto L49e56c;
  #L49e560.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e566.  v1:= temp;
  #L49e568.  if v1 > 0 then goto L49e550;
  #L49e56c.  v3:= -1I;
  #L49e56e.  if v0 != v3 then goto L49e578;
  #L49e572.  v3:= 1I;
  #L49e574.  v2.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` := v3 @kind boolean;
  #L49e578.  return @kind void;
}
procedure `void` `b`(`com.google.crypto.tink.subtle.k` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L49e58c.  v0:= 0I;
  #L49e58e.  v2.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` := v0 @kind boolean;
  #L49e592.  v1:= v2.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e596.  call temp:= `limit`(v1, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e59c.  return @kind void;
}
procedure `boolean` `c`(`com.google.crypto.tink.subtle.k` v7 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.c:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49df7c.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49df80.  if v0 != 0 then goto L49df8e;
  #L49df84.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49df88.  call `a`(v7, v0) @signature `Lcom/google/crypto/tink/subtle/k;.a:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L49df8e.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49df92.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49df98.  v0:= temp;
  #L49df9a.  v1:= 0I;
  #L49df9c.  if v0 <= 0 then goto L49dfaa;
  #L49dfa0.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49dfa4.  if v0 != 0 then goto L49dfaa;
  #L49dfa8.  return v1;
  #L49dfaa.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49dfae.  v2:= 1I;
  #L49dfb0.  if v0 != 0 then goto L49dfde;
  #L49dfb4.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49dfb8.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49dfbe.  v1:= temp;
  #L49dfc0.  v1:= v1 - v2 @kind int;
  #L49dfc2.  call temp:= `get`(v0, v1) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L49dfc8.  v1:= temp;
  #L49dfca.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49dfce.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49dfd4.  v3:= temp;
  #L49dfd6.  v3:= v3 - v2 @kind int;
  #L49dfd8.  call temp:= `position`(v0, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49dfde.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49dfe2.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49dfe8.  v0:= v7.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49dfec.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49dff2.  v0:= v7.`com.google.crypto.tink.subtle.k.k` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L49dff6.  v3:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49dffa.  v4:= v7.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L49dffe.  v5:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49e002.  v6:= v7.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e006.  call `decryptSegment`(v0, v3, v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.decryptSegment:(Ljava/nio/ByteBuffer;IZLjava/nio/ByteBuffer;)V` @kind interface;
  #L49e00c.  v0:= v7.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L49e010.  v0:= v0 + v2 @kind int;
  #L49e012.  v7.`com.google.crypto.tink.subtle.k.j` @type ^`int` := v0;
  #L49e016.  v0:= v7.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e01a.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49e020.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e024.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49e02a.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49e02e.  if v0 != 0 then goto L49e056;
  #L49e032.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e036.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49e03c.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e040.  v3:= v7.`com.google.crypto.tink.subtle.k.l` @type ^`int`;
  #L49e044.  v3:= v3 + v2 @kind int;
  #L49e046.  call temp:= `limit`(v0, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e04c.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e050.  call temp:= `put`(v0, v1) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49e056.  return v2;
  #L49e058.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L49e05a.  call `b`(v7) @signature `Lcom/google/crypto/tink/subtle/k;.b:()V` @kind direct;
  #L49e060.  v1:= new `java.io.IOException`;
  #L49e064.  v2:= new `java.lang.StringBuilder`;
  #L49e068.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49e06e.  call temp:= `getMessage`(v0) @signature `Ljava/security/GeneralSecurityException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L49e074.  v3:= temp @kind object;
  #L49e076.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e07c.  v3:= "\n" @kind object;
  #L49e080.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e086.  call temp:= `toString`(v7) @signature `Lcom/google/crypto/tink/subtle/k;.toString:()Ljava/lang/String;` @kind virtual;
  #L49e08c.  v3:= temp @kind object;
  #L49e08e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e094.  v3:= "\nsegmentNr:" @kind object;
  #L49e098.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e09e.  v3:= v7.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L49e0a2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e0a8.  v3:= " endOfCiphertext:" @kind object;
  #L49e0ac.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e0b2.  v3:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49e0b6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e0bc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49e0c2.  v2:= temp @kind object;
  #L49e0c4.  call `<init>`(v1, v2, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L49e0ca.  throw v1;
  catch `java.security.GeneralSecurityException` @[L49dff2..L49e00c] goto L49e058;
}
procedure `boolean` `d`(`com.google.crypto.tink.subtle.k` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.d:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49e0ec.  v0:= v3.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49e0f0.  if v0 != 0 then goto L49e14a;
  #L49e0f4.  v0:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e0f8.  call `a`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/k;.a:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L49e0fe.  v0:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e102.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e108.  v0:= temp;
  #L49e10a.  if v0 <= 0 then goto L49e112;
  #L49e10e.  v0:= 0I;
  #L49e110.  return v0;
  #L49e112.  v0:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e116.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49e11c.  v0:= v3.`com.google.crypto.tink.subtle.k.k` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L49e120.  v1:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e124.  v2:= v3.`com.google.crypto.tink.subtle.k.i` @type ^`byte`[] @kind object;
  #L49e128.  call `init`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.init:(Ljava/nio/ByteBuffer;[B)V` @kind interface;
  #L49e12e.  v0:= 1I;
  #L49e130.  v3.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` := v0 @kind boolean;
  #L49e134.  return v0;
  #L49e136.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L49e138.  call `b`(v3) @signature `Lcom/google/crypto/tink/subtle/k;.b:()V` @kind direct;
  #L49e13e.  v1:= new `java.io.IOException`;
  #L49e142.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L49e148.  throw v1;
  #L49e14a.  v0:= new `java.io.IOException`;
  #L49e14e.  v1:= "Ciphertext is too short" @kind object;
  #L49e152.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49e158.  throw v0;
  catch `java.security.GeneralSecurityException` @[L49e11c..L49e134] goto L49e136;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.k` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e51c.  @monitorenter v1
  #L49e51e.  v0:= v1.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49e522.  call `close`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.close:()V` @kind interface;
  #L49e528.  @monitorexit v1
  #L49e52a.  return @kind void;
  #L49e52c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e52e.  @monitorexit v1
  #L49e530.  throw v0;
  catch `java.lang.Throwable` @[L49e51e..L49e528] goto L49e52c;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.subtle.k` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49df48.  @monitorenter v1
  #L49df4a.  v0:= v1.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49df4e.  call temp:= `isOpen`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.isOpen:()Z` @kind interface;
  #L49df54.  v0:= temp;
  #L49df56.  @monitorexit v1
  #L49df58.  return v0;
  #L49df5a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49df5c.  @monitorexit v1
  #L49df5e.  throw v0;
  catch `java.lang.Throwable` @[L49df4a..L49df56] goto L49df5a;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.k` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/k;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49e17c.  @monitorenter v6
  #L49e17e.  v0:= v6.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` @kind boolean;
  #L49e182.  if v0 == 0 then goto L49e29a;
  #L49e186.  v0:= v6.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` @kind boolean;
  #L49e18a.  v1:= 1I;
  #L49e18c.  if v0 != 0 then goto L49e1bc;
  #L49e190.  call temp:= `d`(v6) @signature `Lcom/google/crypto/tink/subtle/k;.d:()Z` @kind direct;
  #L49e196.  v0:= temp;
  #L49e198.  if v0 != 0 then goto L49e1a2;
  #L49e19c.  v7:= 0I;
  #L49e19e.  @monitorexit v6
  #L49e1a0.  return v7;
  #L49e1a2.  v0:= v6.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e1a6.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49e1ac.  v0:= v6.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e1b0.  v2:= v6.`com.google.crypto.tink.subtle.k.m` @type ^`int`;
  #L49e1b4.  v2:= v2 + v1 @kind int;
  #L49e1b6.  call temp:= `limit`(v0, v2) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e1bc.  v0:= v6.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` @kind boolean;
  #L49e1c0.  v2:= -1I;
  #L49e1c2.  if v0 == 0 then goto L49e1ca;
  #L49e1c6.  @monitorexit v6
  #L49e1c8.  return v2;
  #L49e1ca.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e1d0.  v0:= temp;
  #L49e1d2.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e1d8.  v3:= temp;
  #L49e1da.  if v3 <= 0 then goto L49e27c;
  #L49e1de.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e1e2.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e1e8.  v3:= temp;
  #L49e1ea.  if v3 != 0 then goto L49e20a;
  #L49e1ee.  v3:= v6.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49e1f2.  if v3 == 0 then goto L49e1fc;
  #L49e1f6.  v6.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` := v1 @kind boolean;
  #L49e1fa.  goto L49e27c;
  #L49e1fc.  call temp:= `c`(v6) @signature `Lcom/google/crypto/tink/subtle/k;.c:()Z` @kind direct;
  #L49e202.  v3:= temp;
  #L49e204.  if v3 != 0 then goto L49e20a;
  #L49e208.  goto L49e27c;
  #L49e20a.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e20e.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e214.  v3:= temp;
  #L49e216.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e21c.  v4:= temp;
  #L49e21e.  if v3 > v4 then goto L49e238;
  #L49e222.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e226.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e22c.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e230.  call temp:= `put`(v7, v3) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49e236.  goto L49e1d2;
  #L49e238.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e23e.  v3:= temp;
  #L49e240.  v4:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e244.  call temp:= `duplicate`(v4) @signature `Ljava/nio/ByteBuffer;.duplicate:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L49e24a.  v4:= temp @kind object;
  #L49e24c.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e252.  v5:= temp;
  #L49e254.  v5:= v5 + v3 @kind int;
  #L49e256.  call temp:= `limit`(v4, v5) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e25c.  call temp:= `put`(v7, v4) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49e262.  v4:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e266.  v5:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e26a.  call temp:= `position`(v5) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e270.  v5:= temp;
  #L49e272.  v5:= v5 + v3 @kind int;
  #L49e274.  call temp:= `position`(v4, v5) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e27a.  goto L49e1d2;
  #L49e27c.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e282.  v7:= temp;
  #L49e284.  v7:= v7 - v0 @kind int;
  #L49e286.  if v7 != 0 then goto L49e296;
  #L49e28a.  v0:= v6.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` @kind boolean;
  #L49e28e.  if v0 == 0 then goto L49e296;
  #L49e292.  @monitorexit v6
  #L49e294.  return v2;
  #L49e296.  @monitorexit v6
  #L49e298.  return v7;
  #L49e29a.  v7:= new `java.io.IOException`;
  #L49e29e.  v0:= "This StreamingAeadDecryptingChannel is in an undefined state" @kind object;
  #L49e2a2.  call `<init>`(v7, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49e2a8.  throw v7;
  #L49e2aa.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e2ac.  @monitorexit v6
  #L49e2ae.  throw v7;
  catch `java.lang.Throwable` @[L49e17e..L49e198] goto L49e2aa;
  catch `java.lang.Throwable` @[L49e1a2..L49e1c0] goto L49e2aa;
  catch `java.lang.Throwable` @[L49e1ca..L49e28e] goto L49e2aa;
  catch `java.lang.Throwable` @[L49e29a..L49e2aa] goto L49e2aa;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.subtle.k` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e2e4.  @monitorenter v2
  #L49e2e6.  v0:= new `java.lang.StringBuilder`;
  #L49e2ea.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49e2f0.  v1:= "StreamingAeadDecryptingChannel" @kind object;
  #L49e2f4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e2fa.  v1:= "\nsegmentNr:" @kind object;
  #L49e2fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e304.  v1:= v2.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L49e308.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e30e.  v1:= "\nciphertextSegmentSize:" @kind object;
  #L49e312.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e318.  v1:= v2.`com.google.crypto.tink.subtle.k.l` @type ^`int`;
  #L49e31c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e322.  v1:= "\nheaderRead:" @kind object;
  #L49e326.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e32c.  v1:= v2.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` @kind boolean;
  #L49e330.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e336.  v1:= "\nendOfCiphertext:" @kind object;
  #L49e33a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e340.  v1:= v2.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L49e344.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e34a.  v1:= "\nendOfPlaintext:" @kind object;
  #L49e34e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e354.  v1:= v2.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` @kind boolean;
  #L49e358.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e35e.  v1:= "\ndefinedState:" @kind object;
  #L49e362.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e368.  v1:= v2.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` @kind boolean;
  #L49e36c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e372.  v1:= "\nHeader" @kind object;
  #L49e376.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e37c.  v1:= " position:" @kind object;
  #L49e380.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e386.  v1:= v2.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e38a.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e390.  v1:= temp;
  #L49e392.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e398.  v1:= " limit:" @kind object;
  #L49e39c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e3a2.  v1:= v2.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e3a6.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e3ac.  v1:= temp;
  #L49e3ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e3b4.  v1:= "\nciphertextSgement" @kind object;
  #L49e3b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e3be.  v1:= " position:" @kind object;
  #L49e3c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e3c8.  v1:= v2.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e3cc.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e3d2.  v1:= temp;
  #L49e3d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e3da.  v1:= " limit:" @kind object;
  #L49e3de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e3e4.  v1:= v2.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e3e8.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49e3ee.  v1:= temp;
  #L49e3f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e3f6.  v1:= "\nplaintextSegment" @kind object;
  #L49e3fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e400.  v1:= " position:" @kind object;
  #L49e404.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e40a.  v1:= v2.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e40e.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e414.  v1:= temp;
  #L49e416.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e41c.  v1:= " limit:" @kind object;
  #L49e420.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e426.  v1:= v2.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e42a.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49e430.  v1:= temp;
  #L49e432.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e438.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49e43e.  v0:= temp @kind object;
  #L49e440.  @monitorexit v2
  #L49e442.  return v0 @kind object;
  #L49e444.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e446.  @monitorexit v2
  #L49e448.  throw v0;
  catch `java.lang.Throwable` @[L49e2e6..L49e440] goto L49e444;
}
