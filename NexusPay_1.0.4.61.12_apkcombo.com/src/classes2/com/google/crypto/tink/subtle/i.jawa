record `com.google.crypto.tink.subtle.i` @kind class @AccessFlag ABSTRACT extends `com.google.crypto.tink.StreamingAead` @kind interface {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.i` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/i;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49c160.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c166.  return @kind void;
}
procedure `int` `getCiphertextOffset`() @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getCiphertextOverhead`() @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOverhead:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getCiphertextSegmentSize`() @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getHeaderLength`() @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getPlaintextSegmentSize`() @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.nio.channels.ReadableByteChannel` `newDecryptingChannel`(`com.google.crypto.tink.subtle.i` v1 @kind this, `java.nio.channels.ReadableByteChannel` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c10c.  v0:= new `com.google.crypto.tink.subtle.k`;
  #L49c110.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/subtle/k;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/ReadableByteChannel;[B)V` @kind direct;
  #L49c116.  return v0 @kind object;
}
procedure `java.io.InputStream` `newDecryptingStream`(`com.google.crypto.tink.subtle.i` v1 @kind this, `java.io.InputStream` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c0d4.  v0:= new `com.google.crypto.tink.subtle.l`;
  #L49c0d8.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/subtle/l;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/io/InputStream;[B)V` @kind direct;
  #L49c0de.  return v0 @kind object;
}
procedure `java.nio.channels.WritableByteChannel` `newEncryptingChannel`(`com.google.crypto.tink.subtle.i` v1 @kind this, `java.nio.channels.WritableByteChannel` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c144.  v0:= new `com.google.crypto.tink.subtle.m`;
  #L49c148.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/subtle/m;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/WritableByteChannel;[B)V` @kind direct;
  #L49c14e.  return v0 @kind object;
}
procedure `java.io.OutputStream` `newEncryptingStream`(`com.google.crypto.tink.subtle.i` v1 @kind this, `java.io.OutputStream` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c0f0.  v0:= new `com.google.crypto.tink.subtle.n`;
  #L49c0f4.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/subtle/n;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/io/OutputStream;[B)V` @kind direct;
  #L49c0fa.  return v0 @kind object;
}
procedure `java.nio.channels.SeekableByteChannel` `newSeekableDecryptingChannel`(`com.google.crypto.tink.subtle.i` v1 @kind this, `java.nio.channels.SeekableByteChannel` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/i;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49c128.  v0:= new `com.google.crypto.tink.subtle.o`;
  #L49c12c.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/subtle/o;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/SeekableByteChannel;[B)V` @kind direct;
  #L49c132.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `newStreamSegmentDecrypter`() @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentEncrypter` `newStreamSegmentEncrypter`(`byte`[] v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
