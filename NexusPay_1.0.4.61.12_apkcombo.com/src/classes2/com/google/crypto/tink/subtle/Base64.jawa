record `com.google.crypto.tink.subtle.Base64` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@com.google.crypto.tink.subtle.Base64.CRLF` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.NO_CLOSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.NO_PADDING` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.NO_WRAP` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.URL_SAFE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@com.google.crypto.tink.subtle.Base64.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Base64;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L493644.  v0:= "UTF-8" @kind object;
  #L493648.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L49364e.  v0:= temp @kind object;
  #L493650.  `@@com.google.crypto.tink.subtle.Base64.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L493654.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Base64` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Base64;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L493668.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49366e.  return @kind void;
}
procedure `byte`[] `decode`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493460.  v0:= 2I;
  #L493462.  call temp:= `decode`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L493468.  v1:= temp @kind object;
  #L49346a.  return v1 @kind object;
}
procedure `byte`[] `decode`(`java.lang.String` v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;I)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49347c.  v0:= `@@com.google.crypto.tink.subtle.Base64.a` @type ^`java.nio.charset.Charset` @kind object;
  #L493480.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L493486.  v1:= temp @kind object;
  #L493488.  call temp:= `decode`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BI)[B` @kind static;
  #L49348e.  v1:= temp @kind object;
  #L493490.  return v1 @kind object;
}
procedure `byte`[] `decode`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4933dc.  v0:= length @variable v2;
  #L4933de.  v1:= 0I;
  #L4933e0.  call temp:= `decode`(v2, v1, v0, v3) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BIII)[B` @kind static;
  #L4933e6.  v2:= temp @kind object;
  #L4933e8.  return v2 @kind object;
}
procedure `byte`[] `decode`(`byte`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4933fc.  v0:= new `com.google.crypto.tink.subtle.Base64$b`;
  #L493400.  v1:= v4 * 3;
  #L493404.  v1:= v1 / 4;
  #L493408.  v1:= new `byte`[v1];
  #L49340c.  call `<init>`(v0, v5, v1) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.<init>:(I[B)V` @kind direct;
  #L493412.  v5:= 1I;
  #L493414.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.a:([BIIZ)Z` @kind virtual;
  #L49341a.  v2:= temp;
  #L49341c.  if v2 == 0 then goto L49343e;
  #L493420.  v2:= v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int`;
  #L493424.  v3:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L493428.  v4:= length @variable v3;
  #L49342a.  if v2 != v4 then goto L493430;
  #L49342e.  return v3 @kind object;
  #L493430.  v4:= new `byte`[v2];
  #L493434.  v5:= 0I;
  #L493436.  call `arraycopy`(v3, v5, v4, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49343c.  return v4 @kind object;
  #L49343e.  v2:= new `java.lang.IllegalArgumentException`;
  #L493442.  v3:= "bad base-64" @kind object;
  #L493446.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49344c.  throw v2;
}
procedure `java.lang.String` `encode`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493578.  v0:= 2I;
  #L49357a.  call temp:= `encodeToString`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L493580.  v1:= temp @kind object;
  #L493582.  return v1 @kind object;
}
procedure `byte`[] `encode`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4934a4.  v0:= length @variable v2;
  #L4934a6.  v1:= 0I;
  #L4934a8.  call temp:= `encode`(v2, v1, v0, v3) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BIII)[B` @kind static;
  #L4934ae.  v2:= temp @kind object;
  #L4934b0.  return v2 @kind object;
}
procedure `byte`[] `encode`(`byte`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4934c4.  v0:= new `com.google.crypto.tink.subtle.Base64$c`;
  #L4934c8.  v1:= 0I;
  #L4934ca.  call `<init>`(v0, v8, v1) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.<init>:(I[B)V` @kind direct;
  #L4934d0.  v8:= v7 / 3;
  #L4934d4.  v8:= v8 * 4;
  #L4934d8.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` @kind boolean;
  #L4934dc.  v2:= 2I;
  #L4934de.  v3:= 1I;
  #L4934e0.  if v1 == 0 then goto L4934f2;
  #L4934e4.  v1:= v7 %% 3;
  #L4934e8.  if v1 <= 0 then goto L49350a;
  #L4934ec.  v8:= v8 + 4;
  #L4934f0.  goto L49350a;
  #L4934f2.  v1:= v7 %% 3;
  #L4934f6.  if v1 == v3 then goto L493506;
  #L4934fa.  if v1 == v2 then goto L493500;
  #L4934fe.  goto L49350a;
  #L493500.  v8:= v8 + 3;
  #L493504.  goto L49350a;
  #L493506.  v8:= v8 + 2;
  #L49350a.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L49350e.  if v1 == 0 then goto L493532;
  #L493512.  if v7 <= 0 then goto L493532;
  #L493516.  v1:= v7 + -1;
  #L49351a.  v1:= v1 / 57;
  #L49351e.  v1:= v1 + v3 @kind int;
  #L493520.  v4:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L493524.  if v4 == 0 then goto L49352a;
  #L493528.  goto L49352c;
  #L49352a.  v2:= 1I;
  #L49352c.  v1:= v1 * v2 @kind int;
  #L493530.  v8:= v8 + v1 @kind int;
  #L493532.  v8:= new `byte`[v8];
  #L493536.  v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] := v8 @kind object;
  #L49353a.  call temp:= `a`(v0, v5, v6, v7, v3) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.a:([BIIZ)Z` @kind virtual;
  #L493540.  v5:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L493544.  return v5 @kind object;
}
procedure `java.lang.String` `encodeToString`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493594.  v0:= new `java.lang.String`;
  #L493598.  call temp:= `encode`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BI)[B` @kind static;
  #L49359e.  v1:= temp @kind object;
  #L4935a0.  v2:= "US-ASCII" @kind object;
  #L4935a4.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L4935aa.  return v0 @kind object;
  #L4935ac.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L4935ae.  v2:= new `java.lang.AssertionError`;
  #L4935b2.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4935b8.  throw v2;
  catch `java.io.UnsupportedEncodingException` @[L493594..L4935aa] goto L4935ac;
}
procedure `java.lang.String` `encodeToString`(`byte`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BIII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4935dc.  v0:= new `java.lang.String`;
  #L4935e0.  call temp:= `encode`(v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BIII)[B` @kind static;
  #L4935e6.  v1:= temp @kind object;
  #L4935e8.  v2:= "US-ASCII" @kind object;
  #L4935ec.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L4935f2.  return v0 @kind object;
  #L4935f4.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L4935f6.  v2:= new `java.lang.AssertionError`;
  #L4935fa.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L493600.  throw v2;
  catch `java.io.UnsupportedEncodingException` @[L4935dc..L4935f2] goto L4935f4;
}
procedure `byte`[] `urlSafeDecode`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.urlSafeDecode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493558.  v0:= 11I;
  #L49355c.  call temp:= `decode`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L493562.  v1:= temp @kind object;
  #L493564.  return v1 @kind object;
}
procedure `java.lang.String` `urlSafeEncode`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.urlSafeEncode:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493624.  v0:= 11I;
  #L493628.  call temp:= `encodeToString`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L49362e.  v1:= temp @kind object;
  #L493630.  return v1 @kind object;
}
