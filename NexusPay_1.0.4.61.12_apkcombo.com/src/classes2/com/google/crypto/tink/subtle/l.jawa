record `com.google.crypto.tink.subtle.l` @kind class @AccessFlag  extends `java.io.FilterInputStream` @kind class {
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.l.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.l.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.crypto.tink.subtle.l.d` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.l.e` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.l.f` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.l.g` @AccessFlag PRIVATE;
  `byte`[] `com.google.crypto.tink.subtle.l.h` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.i` @AccessFlag PRIVATE;
  `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `com.google.crypto.tink.subtle.l.j` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.k` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.l` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.l` v1 @kind this, `com.google.crypto.tink.subtle.i` v2 @kind object, `java.io.InputStream` v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/l;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/io/InputStream;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L49e8f0.  call `<init>`(v1, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L49e8f6.  call temp:= `newStreamSegmentDecrypter`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @kind virtual;
  #L49e8fc.  v3:= temp @kind object;
  #L49e8fe.  v1.`com.google.crypto.tink.subtle.l.j` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` := v3 @kind object;
  #L49e902.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L49e908.  v3:= temp;
  #L49e90a.  v1.`com.google.crypto.tink.subtle.l.c` @type ^`int` := v3;
  #L49e90e.  v3:= length @variable v4;
  #L49e910.  call temp:= `copyOf`(v4, v3) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L49e916.  v3:= temp @kind object;
  #L49e918.  v1.`com.google.crypto.tink.subtle.l.h` @type ^`byte`[] := v3 @kind object;
  #L49e91c.  call temp:= `getCiphertextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @kind virtual;
  #L49e922.  v3:= temp;
  #L49e924.  v1.`com.google.crypto.tink.subtle.l.k` @type ^`int` := v3;
  #L49e928.  v3:= v3 + 1;
  #L49e92c.  call temp:= `allocate`(v3) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49e932.  v3:= temp @kind object;
  #L49e934.  v1.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L49e938.  v4:= 0I;
  #L49e93a.  call temp:= `limit`(v3, v4) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e940.  v3:= v1.`com.google.crypto.tink.subtle.l.k` @type ^`int`;
  #L49e944.  call temp:= `getCiphertextOffset`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @kind virtual;
  #L49e94a.  v0:= temp;
  #L49e94c.  v3:= v3 - v0 @kind int;
  #L49e94e.  v1.`com.google.crypto.tink.subtle.l.l` @type ^`int` := v3;
  #L49e952.  call temp:= `getPlaintextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @kind virtual;
  #L49e958.  v2:= temp;
  #L49e95a.  v2:= v2 + 16;
  #L49e95e.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49e964.  v2:= temp @kind object;
  #L49e966.  v1.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L49e96a.  call temp:= `limit`(v2, v4) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e970.  v1.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` := v4 @kind boolean;
  #L49e974.  v1.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` := v4 @kind boolean;
  #L49e978.  v1.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` := v4 @kind boolean;
  #L49e97c.  v1.`com.google.crypto.tink.subtle.l.i` @type ^`int` := v4;
  #L49e980.  v1.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` := v4 @kind boolean;
  #L49e984.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.l` v7 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49e9c8.  v0:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L49e9cc.  v1:= 1I;
  #L49e9ce.  if v0 != 0 then goto L49ea4e;
  #L49e9d2.  v0:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e9d6.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e9dc.  v0:= temp;
  #L49e9de.  if v0 <= 0 then goto L49ea4e;
  #L49e9e2.  v0:= v7.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L49e9e6.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e9ea.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L49e9f0.  v2:= temp @kind object;
  #L49e9f2.  v3:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e9f6.  call temp:= `position`(v3) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e9fc.  v3:= temp;
  #L49e9fe.  v4:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ea02.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49ea08.  v4:= temp;
  #L49ea0a.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L49ea10.  v0:= temp;
  #L49ea12.  if v0 <= 0 then goto L49ea2c;
  #L49ea16.  v1:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ea1a.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49ea20.  v2:= temp;
  #L49ea22.  v2:= v2 + v0 @kind int;
  #L49ea24.  call temp:= `position`(v1, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49ea2a.  goto L49e9c8;
  #L49ea2c.  v2:= -1I;
  #L49ea2e.  if v0 != v2 then goto L49ea38;
  #L49ea32.  v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` := v1 @kind boolean;
  #L49ea36.  goto L49e9c8;
  #L49ea38.  if v0 == 0 then goto L49ea3e;
  #L49ea3c.  goto L49e9c8;
  #L49ea3e.  v0:= new `java.io.IOException`;
  #L49ea42.  v1:= "Could not read bytes from the ciphertext stream" @kind object;
  #L49ea46.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ea4c.  throw v0;
  #L49ea4e.  v0:= 0I;
  #L49ea50.  v2:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L49ea54.  if v2 != 0 then goto L49ea82;
  #L49ea58.  v0:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ea5c.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49ea62.  v2:= temp;
  #L49ea64.  v2:= v2 - v1 @kind int;
  #L49ea66.  call temp:= `get`(v0, v2) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L49ea6c.  v0:= temp;
  #L49ea6e.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ea72.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49ea78.  v3:= temp;
  #L49ea7a.  v3:= v3 - v1 @kind int;
  #L49ea7c.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49ea82.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ea86.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49ea8c.  v2:= v7.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ea90.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49ea96.  v2:= v7.`com.google.crypto.tink.subtle.l.j` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L49ea9a.  v3:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ea9e.  v4:= v7.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L49eaa2.  v5:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L49eaa6.  v6:= v7.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49eaaa.  call `decryptSegment`(v2, v3, v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.decryptSegment:(Ljava/nio/ByteBuffer;IZLjava/nio/ByteBuffer;)V` @kind interface;
  #L49eab0.  v2:= v7.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L49eab4.  v2:= v2 + v1 @kind int;
  #L49eab6.  v7.`com.google.crypto.tink.subtle.l.i` @type ^`int` := v2;
  #L49eaba.  v2:= v7.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49eabe.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49eac4.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49eac8.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49eace.  v2:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L49ead2.  if v2 != 0 then goto L49eafa;
  #L49ead6.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49eada.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49eae0.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49eae4.  v3:= v7.`com.google.crypto.tink.subtle.l.k` @type ^`int`;
  #L49eae8.  v3:= v3 + v1 @kind int;
  #L49eaea.  call temp:= `limit`(v2, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49eaf0.  v1:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49eaf4.  call temp:= `put`(v1, v0) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49eafa.  return @kind void;
  #L49eafc.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L49eafe.  call `c`(v7) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @kind direct;
  #L49eb04.  v1:= new `java.io.IOException`;
  #L49eb08.  v2:= new `java.lang.StringBuilder`;
  #L49eb0c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49eb12.  call temp:= `getMessage`(v0) @signature `Ljava/security/GeneralSecurityException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L49eb18.  v3:= temp @kind object;
  #L49eb1a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49eb20.  v3:= "\n" @kind object;
  #L49eb24.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49eb2a.  call temp:= `toString`(v7) @signature `Lcom/google/crypto/tink/subtle/l;.toString:()Ljava/lang/String;` @kind virtual;
  #L49eb30.  v3:= temp @kind object;
  #L49eb32.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49eb38.  v3:= "\nsegmentNr:" @kind object;
  #L49eb3c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49eb42.  v3:= v7.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L49eb46.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49eb4c.  v3:= " endOfCiphertext:" @kind object;
  #L49eb50.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49eb56.  v3:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L49eb5a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49eb60.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49eb66.  v2:= temp @kind object;
  #L49eb68.  call `<init>`(v1, v2, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L49eb6e.  throw v1;
  catch `java.security.GeneralSecurityException` @[L49ea96..L49eab0] goto L49eafc;
}
procedure `void` `b`(`com.google.crypto.tink.subtle.l` v5 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49eba8.  v0:= v5.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` @kind boolean;
  #L49ebac.  if v0 != 0 then goto L49ec58;
  #L49ebb0.  v0:= v5.`com.google.crypto.tink.subtle.l.c` @type ^`int`;
  #L49ebb4.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49ebba.  v0:= temp @kind object;
  #L49ebbc.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49ebc2.  v1:= temp;
  #L49ebc4.  if v1 <= 0 then goto L49ec2e;
  #L49ebc8.  v1:= v5.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L49ebcc.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L49ebd2.  v2:= temp @kind object;
  #L49ebd4.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49ebda.  v3:= temp;
  #L49ebdc.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49ebe2.  v4:= temp;
  #L49ebe4.  call temp:= `read`(v1, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L49ebea.  v1:= temp;
  #L49ebec.  v2:= -1I;
  #L49ebee.  if v1 == v2 then goto L49ec18;
  #L49ebf2.  if v1 == 0 then goto L49ec08;
  #L49ebf6.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49ebfc.  v2:= temp;
  #L49ebfe.  v2:= v2 + v1 @kind int;
  #L49ec00.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49ec06.  goto L49ebbc;
  #L49ec08.  v0:= new `java.io.IOException`;
  #L49ec0c.  v1:= "Could not read bytes from the ciphertext stream" @kind object;
  #L49ec10.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ec16.  throw v0;
  #L49ec18.  call `c`(v5) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @kind direct;
  #L49ec1e.  v0:= new `java.io.IOException`;
  #L49ec22.  v1:= "Ciphertext is too short" @kind object;
  #L49ec26.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ec2c.  throw v0;
  #L49ec2e.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49ec34.  v1:= v5.`com.google.crypto.tink.subtle.l.j` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L49ec38.  v2:= v5.`com.google.crypto.tink.subtle.l.h` @type ^`byte`[] @kind object;
  #L49ec3c.  call `init`(v1, v0, v2) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.init:(Ljava/nio/ByteBuffer;[B)V` @kind interface;
  #L49ec42.  v0:= 1I;
  #L49ec44.  v5.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` := v0 @kind boolean;
  #L49ec48.  return @kind void;
  #L49ec4a.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L49ec4c.  v1:= new `java.io.IOException`;
  #L49ec50.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L49ec56.  throw v1;
  #L49ec58.  call `c`(v5) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @kind direct;
  #L49ec5e.  v0:= new `java.io.IOException`;
  #L49ec62.  v1:= "Decryption failed." @kind object;
  #L49ec66.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ec6c.  throw v0;
  catch `java.security.GeneralSecurityException` @[L49ec34..L49ec42] goto L49ec4a;
}
procedure `void` `c`(`com.google.crypto.tink.subtle.l` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L49ec90.  v0:= 1I;
  #L49ec92.  v2.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` := v0 @kind boolean;
  #L49ec96.  v0:= v2.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49ec9a.  v1:= 0I;
  #L49ec9c.  call temp:= `limit`(v0, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49eca2.  return @kind void;
}
procedure `int` `available`(`com.google.crypto.tink.subtle.l` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e5c4.  @monitorenter v1
  #L49e5c6.  v0:= v1.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e5ca.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e5d0.  v0:= temp;
  #L49e5d2.  @monitorexit v1
  #L49e5d4.  return v0;
  #L49e5d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e5d8.  @monitorexit v1
  #L49e5da.  throw v0;
  catch `java.lang.Throwable` @[L49e5c6..L49e5d2] goto L49e5d6;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.l` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e998.  @monitorenter v1
  #L49e99a.  call `close`(v1) @signature `Ljava/io/FilterInputStream;.close:()V` @kind super;
  #L49e9a0.  @monitorexit v1
  #L49e9a2.  return @kind void;
  #L49e9a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e9a6.  @monitorexit v1
  #L49e9a8.  throw v0;
  catch `java.lang.Throwable` @[L49e99a..L49e9a0] goto L49e9a4;
}
procedure `void` `mark`(`com.google.crypto.tink.subtle.l` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/l;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L49eb90.  @monitorenter v0
  #L49eb92.  @monitorexit v0
  #L49eb94.  return @kind void;
}
procedure `boolean` `markSupported`(`com.google.crypto.tink.subtle.l` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49e5b0.  v0:= 0I;
  #L49e5b2.  return v0;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.l` v4 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49e5f8.  v0:= 1I;
  #L49e5fa.  v1:= new `byte`[v0];
  #L49e5fe.  v2:= 0I;
  #L49e600.  call temp:= `read`(v4, v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @kind virtual;
  #L49e606.  v3:= temp;
  #L49e608.  if v3 != v0 then goto L49e616;
  #L49e60c.  v0:= v1[v2] @kind byte;
  #L49e610.  v0:= v0 ^& 255;
  #L49e614.  return v0;
  #L49e616.  v0:= -1I;
  #L49e618.  if v3 != v0 then goto L49e61e;
  #L49e61c.  return v3;
  #L49e61e.  v0:= new `java.io.IOException`;
  #L49e622.  v1:= "Reading failed" @kind object;
  #L49e626.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49e62c.  throw v0;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.l` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/l;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e640.  v0:= length @variable v3;
  #L49e642.  v1:= 0I;
  #L49e644.  call temp:= `read`(v2, v3, v1, v0) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @kind virtual;
  #L49e64a.  v3:= temp;
  #L49e64c.  return v3;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.l` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49e660.  @monitorenter v6
  #L49e662.  v0:= v6.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` @kind boolean;
  #L49e666.  if v0 != 0 then goto L49e70a;
  #L49e66a.  v0:= v6.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` @kind boolean;
  #L49e66e.  v1:= 1I;
  #L49e670.  if v0 != 0 then goto L49e694;
  #L49e674.  call `b`(v6) @signature `Lcom/google/crypto/tink/subtle/l;.b:()V` @kind direct;
  #L49e67a.  v0:= v6.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e67e.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49e684.  v0:= v6.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e688.  v2:= v6.`com.google.crypto.tink.subtle.l.l` @type ^`int`;
  #L49e68c.  v2:= v2 + v1 @kind int;
  #L49e68e.  call temp:= `limit`(v0, v2) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49e694.  v0:= v6.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` @kind boolean;
  #L49e698.  v2:= -1I;
  #L49e69a.  if v0 == 0 then goto L49e6a2;
  #L49e69e.  @monitorexit v6
  #L49e6a0.  return v2;
  #L49e6a2.  v0:= 0I;
  #L49e6a4.  if v0 >= v9 then goto L49e6f6;
  #L49e6a8.  v3:= v6.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e6ac.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e6b2.  v3:= temp;
  #L49e6b4.  if v3 != 0 then goto L49e6cc;
  #L49e6b8.  v3:= v6.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L49e6bc.  if v3 == 0 then goto L49e6c6;
  #L49e6c0.  v6.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` := v1 @kind boolean;
  #L49e6c4.  goto L49e6f6;
  #L49e6c6.  call `a`(v6) @signature `Lcom/google/crypto/tink/subtle/l;.a:()V` @kind direct;
  #L49e6cc.  v3:= v6.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e6d0.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49e6d6.  v3:= temp;
  #L49e6d8.  v4:= v9 - v0 @kind int;
  #L49e6dc.  call temp:= `min`(v3, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L49e6e2.  v3:= temp;
  #L49e6e4.  v4:= v6.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e6e8.  v5:= v0 + v8 @kind int;
  #L49e6ec.  call temp:= `get`(v4, v7, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49e6f2.  v0:= v0 + v3 @kind int;
  #L49e6f4.  goto L49e6a4;
  #L49e6f6.  if v0 != 0 then goto L49e706;
  #L49e6fa.  v7:= v6.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` @kind boolean;
  #L49e6fe.  if v7 == 0 then goto L49e706;
  #L49e702.  @monitorexit v6
  #L49e704.  return v2;
  #L49e706.  @monitorexit v6
  #L49e708.  return v0;
  #L49e70a.  v7:= new `java.io.IOException`;
  #L49e70e.  v8:= "Decryption failed." @kind object;
  #L49e712.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49e718.  throw v7;
  #L49e71a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e71c.  @monitorexit v6
  #L49e71e.  throw v7;
  catch `java.lang.Throwable` @[L49e662..L49e698] goto L49e71a;
  catch `java.lang.Throwable` @[L49e6a8..L49e6fe] goto L49e71a;
  catch `java.lang.Throwable` @[L49e70a..L49e71a] goto L49e71a;
}
procedure `long` `skip`(`com.google.crypto.tink.subtle.l` v9 @kind this, `long` v10 ) @signature `Lcom/google/crypto/tink/subtle/l;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e88c.  v0:= v9.`com.google.crypto.tink.subtle.l.k` @type ^`int`;
  #L49e890.  v0:= (`long`) v0 @kind i2l;
  #L49e892.  v2:= 0L;
  #L49e896.  v4:= lcmp(v10, v2);
  #L49e89a.  if v4 > 0 then goto L49e8a0;
  #L49e89e.  return v2 @kind wide;
  #L49e8a0.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L49e8a6.  v0:= temp @kind wide;
  #L49e8a8.  v1:= (`int`) v0 @kind l2i;
  #L49e8aa.  v0:= new `byte`[v1];
  #L49e8ae.  v4:= v10 @kind wide;
  #L49e8b0.  v6:= lcmp(v4, v2);
  #L49e8b4.  if v6 <= 0 then goto L49e8da;
  #L49e8b8.  v6:= 0I;
  #L49e8ba.  v7:= (`long`) v1 @kind i2l;
  #L49e8bc.  call temp:= `min`(v7, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L49e8c2.  v7:= temp @kind wide;
  #L49e8c4.  v8:= (`int`) v7 @kind l2i;
  #L49e8c6.  call temp:= `read`(v9, v0, v6, v8) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @kind virtual;
  #L49e8cc.  v6:= temp;
  #L49e8ce.  if v6 > 0 then goto L49e8d4;
  #L49e8d2.  goto L49e8da;
  #L49e8d4.  v6:= (`long`) v6 @kind i2l;
  #L49e8d6.  v4:= v4 - v6 @kind long;
  #L49e8d8.  goto L49e8b0;
  #L49e8da.  v10:= v10 - v4 @kind long;
  #L49e8dc.  return v10 @kind wide;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.subtle.l` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49e74c.  @monitorenter v2
  #L49e74e.  v0:= new `java.lang.StringBuilder`;
  #L49e752.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49e758.  v1:= "StreamingAeadDecryptingStream" @kind object;
  #L49e75c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e762.  v1:= "\nsegmentNr:" @kind object;
  #L49e766.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e76c.  v1:= v2.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L49e770.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e776.  v1:= "\nciphertextSegmentSize:" @kind object;
  #L49e77a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e780.  v1:= v2.`com.google.crypto.tink.subtle.l.k` @type ^`int`;
  #L49e784.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e78a.  v1:= "\nheaderRead:" @kind object;
  #L49e78e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e794.  v1:= v2.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` @kind boolean;
  #L49e798.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e79e.  v1:= "\nendOfCiphertext:" @kind object;
  #L49e7a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7a8.  v1:= v2.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L49e7ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7b2.  v1:= "\nendOfPlaintext:" @kind object;
  #L49e7b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7bc.  v1:= v2.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` @kind boolean;
  #L49e7c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7c6.  v1:= "\ndecryptionErrorOccured:" @kind object;
  #L49e7ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7d0.  v1:= v2.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` @kind boolean;
  #L49e7d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7da.  v1:= "\nciphertextSgement" @kind object;
  #L49e7de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7e4.  v1:= " position:" @kind object;
  #L49e7e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e7ee.  v1:= v2.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e7f2.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e7f8.  v1:= temp;
  #L49e7fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e800.  v1:= " limit:" @kind object;
  #L49e804.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e80a.  v1:= v2.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e80e.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49e814.  v1:= temp;
  #L49e816.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e81c.  v1:= "\nplaintextSegment" @kind object;
  #L49e820.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e826.  v1:= " position:" @kind object;
  #L49e82a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e830.  v1:= v2.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e834.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49e83a.  v1:= temp;
  #L49e83c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e842.  v1:= " limit:" @kind object;
  #L49e846.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e84c.  v1:= v2.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49e850.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49e856.  v1:= temp;
  #L49e858.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49e85e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49e864.  v0:= temp @kind object;
  #L49e866.  @monitorexit v2
  #L49e868.  return v0 @kind object;
  #L49e86a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49e86c.  @monitorexit v2
  #L49e86e.  throw v0;
  catch `java.lang.Throwable` @[L49e74e..L49e866] goto L49e86a;
}
