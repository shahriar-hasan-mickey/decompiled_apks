record `com.google.crypto.tink.subtle.EncryptThenAuthenticate` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.Aead` @kind interface {
  `com.google.crypto.tink.subtle.IndCpaCipher` `com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.Mac` `com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.EncryptThenAuthenticate` v0 @kind this, `com.google.crypto.tink.subtle.IndCpaCipher` v1 @kind object, `com.google.crypto.tink.Mac` v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.<init>:(Lcom/google/crypto/tink/subtle/IndCpaCipher;Lcom/google/crypto/tink/Mac;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L499e18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L499e1e.  v0.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @type ^`com.google.crypto.tink.subtle.IndCpaCipher` := v1 @kind object;
  #L499e22.  v0.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @type ^`com.google.crypto.tink.Mac` := v2 @kind object;
  #L499e26.  v0.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @type ^`int` := v3;
  #L499e2a.  return @kind void;
}
procedure `com.google.crypto.tink.Aead` `newAesCtrHmac`(`byte`[] v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.newAesCtrHmac:([BILjava/lang/String;[BI)Lcom/google/crypto/tink/Aead;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L499dd0.  v0:= new `com.google.crypto.tink.subtle.AesCtrJceCipher`;
  #L499dd4.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrJceCipher;.<init>:([BI)V` @kind direct;
  #L499dda.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L499dde.  v2:= "HMAC" @kind object;
  #L499de2.  call `<init>`(v1, v4, v2) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L499de8.  v2:= new `com.google.crypto.tink.subtle.PrfMac`;
  #L499dec.  v4:= new `com.google.crypto.tink.subtle.PrfHmacJce`;
  #L499df0.  call `<init>`(v4, v3, v1) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce;.<init>:(Ljava/lang/String;Ljava/security/Key;)V` @kind direct;
  #L499df6.  call `<init>`(v2, v4, v5) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.<init>:(Lcom/google/crypto/tink/prf/Prf;I)V` @kind direct;
  #L499dfc.  v1:= new `com.google.crypto.tink.subtle.EncryptThenAuthenticate`;
  #L499e00.  call `<init>`(v1, v0, v2, v5) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.<init>:(Lcom/google/crypto/tink/subtle/IndCpaCipher;Lcom/google/crypto/tink/Mac;I)V` @kind direct;
  #L499e06.  return v1 @kind object;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.subtle.EncryptThenAuthenticate` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L499c80.  v0:= length @variable v9;
  #L499c82.  v1:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @type ^`int`;
  #L499c86.  if v0 < v1 then goto L499d18;
  #L499c8a.  v0:= length @variable v9;
  #L499c8c.  v0:= v0 - v1 @kind int;
  #L499c8e.  v1:= 0I;
  #L499c90.  call temp:= `copyOfRange`(v9, v1, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L499c96.  v0:= temp @kind object;
  #L499c98.  v2:= length @variable v9;
  #L499c9a.  v3:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @type ^`int`;
  #L499c9e.  v2:= v2 - v3 @kind int;
  #L499ca0.  v3:= length @variable v9;
  #L499ca2.  call temp:= `copyOfRange`(v9, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L499ca8.  v9:= temp @kind object;
  #L499caa.  if v10 != 0 then goto L499cb2;
  #L499cae.  v10:= new `byte`[v1];
  #L499cb2.  v2:= 8I;
  #L499cb6.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L499cbc.  v3:= temp @kind object;
  #L499cbe.  v4:= 8L;
  #L499cc2.  v6:= length @variable v10;
  #L499cc4.  v6:= (`long`) v6 @kind i2l;
  #L499cc6.  v6:= v6 * v4 @kind long;
  #L499cca.  call temp:= `putLong`(v3, v6) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L499cd0.  v3:= temp @kind object;
  #L499cd2.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L499cd8.  v3:= temp @kind object;
  #L499cda.  call temp:= `copyOf`(v3, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L499ce0.  v2:= temp @kind object;
  #L499ce2.  v3:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @type ^`com.google.crypto.tink.Mac` @kind object;
  #L499ce6.  v4:= 3I;
  #L499ce8.  v4:= new `byte`[][v4];
  #L499cec.  v4[v1]:= v10 @kind object;
  #L499cf0.  v10:= 1I;
  #L499cf2.  v4[v10]:= v0 @kind object;
  #L499cf6.  v10:= 2I;
  #L499cf8.  v4[v10]:= v2 @kind object;
  #L499cfc.  call temp:= `concat`(v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L499d02.  v10:= temp @kind object;
  #L499d04.  call `verifyMac`(v3, v9, v10) @signature `Lcom/google/crypto/tink/Mac;.verifyMac:([B[B)V` @kind interface;
  #L499d0a.  v9:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @type ^`com.google.crypto.tink.subtle.IndCpaCipher` @kind object;
  #L499d0e.  call temp:= `decrypt`(v9, v0) @signature `Lcom/google/crypto/tink/subtle/IndCpaCipher;.decrypt:([B)[B` @kind interface;
  #L499d14.  v9:= temp @kind object;
  #L499d16.  return v9 @kind object;
  #L499d18.  v9:= new `java.security.GeneralSecurityException`;
  #L499d1c.  v10:= "ciphertext too short" @kind object;
  #L499d20.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499d26.  throw v9;
}
procedure `byte`[] `encrypt`(`com.google.crypto.tink.subtle.EncryptThenAuthenticate` v7 @kind this, `byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L499d38.  v0:= v7.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @type ^`com.google.crypto.tink.subtle.IndCpaCipher` @kind object;
  #L499d3c.  call temp:= `encrypt`(v0, v8) @signature `Lcom/google/crypto/tink/subtle/IndCpaCipher;.encrypt:([B)[B` @kind interface;
  #L499d42.  v8:= temp @kind object;
  #L499d44.  v0:= 0I;
  #L499d46.  if v9 != 0 then goto L499d4e;
  #L499d4a.  v9:= new `byte`[v0];
  #L499d4e.  v1:= 8I;
  #L499d52.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L499d58.  v2:= temp @kind object;
  #L499d5a.  v3:= 8L;
  #L499d5e.  v5:= length @variable v9;
  #L499d60.  v5:= (`long`) v5 @kind i2l;
  #L499d62.  v5:= v5 * v3 @kind long;
  #L499d66.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L499d6c.  v2:= temp @kind object;
  #L499d6e.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L499d74.  v2:= temp @kind object;
  #L499d76.  call temp:= `copyOf`(v2, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L499d7c.  v1:= temp @kind object;
  #L499d7e.  v2:= v7.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @type ^`com.google.crypto.tink.Mac` @kind object;
  #L499d82.  v3:= 3I;
  #L499d84.  v3:= new `byte`[][v3];
  #L499d88.  v3[v0]:= v9 @kind object;
  #L499d8c.  v9:= 1I;
  #L499d8e.  v3[v9]:= v8 @kind object;
  #L499d92.  v4:= 2I;
  #L499d94.  v3[v4]:= v1 @kind object;
  #L499d98.  call temp:= `concat`(v3) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L499d9e.  v1:= temp @kind object;
  #L499da0.  call temp:= `computeMac`(v2, v1) @signature `Lcom/google/crypto/tink/Mac;.computeMac:([B)[B` @kind interface;
  #L499da6.  v1:= temp @kind object;
  #L499da8.  v2:= new `byte`[][v4];
  #L499dac.  v2[v0]:= v8 @kind object;
  #L499db0.  v2[v9]:= v1 @kind object;
  #L499db4.  call temp:= `concat`(v2) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L499dba.  v8:= temp @kind object;
  #L499dbc.  return v8 @kind object;
}
