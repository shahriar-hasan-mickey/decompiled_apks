record `com.google.crypto.tink.subtle.AesSiv` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.DeterministicAead` @kind interface {
  `com.google.crypto.tink.subtle.PrfAesCmac` `com.google.crypto.tink.subtle.AesSiv.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.AesSiv.b` @AccessFlag PRIVATE_FINAL;
}
global `java.util.Collection` `@@com.google.crypto.tink.subtle.AesSiv.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.google.crypto.tink.subtle.AesSiv.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.google.crypto.tink.subtle.AesSiv.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/AesSiv;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4921e8.  v0:= 1I;
  #L4921ea.  v0:= new `java.lang.Integer`[v0];
  #L4921ee.  v1:= 64I;
  #L4921f2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4921f8.  v1:= temp @kind object;
  #L4921fa.  v2:= 0I;
  #L4921fc.  v0[v2]:= v1 @kind object;
  #L492200.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L492206.  v0:= temp @kind object;
  #L492208.  `@@com.google.crypto.tink.subtle.AesSiv.c` @type ^`java.util.Collection` := v0 @kind object;
  #L49220c.  v0:= 16I;
  #L492210.  v1:= new `byte`[v0];
  #L492214.  `@@com.google.crypto.tink.subtle.AesSiv.d` @type ^`byte`[] := v1 @kind object;
  #L492218.  v0:= new `byte`[v0];
  #L49221c.  goto L492228;
  #L492222.  `@@com.google.crypto.tink.subtle.AesSiv.e` @type ^`byte`[] := v0 @kind object;
  #L492226.  return @kind void;
  #L492228.  v0:= (0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 1I) @kind object;
  #L49223f.  goto L492222;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesSiv` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L492250.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L492256.  v0:= `@@com.google.crypto.tink.subtle.AesSiv.c` @type ^`java.util.Collection` @kind object;
  #L49225a.  v1:= length @variable v4;
  #L49225c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L492262.  v1:= temp @kind object;
  #L492264.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L49226a.  v0:= temp;
  #L49226c.  if v0 == 0 then goto L4922a4;
  #L492270.  v0:= 0I;
  #L492272.  v1:= length @variable v4;
  #L492274.  v1:= v1 / 2;
  #L492278.  call temp:= `copyOfRange`(v4, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L49227e.  v0:= temp @kind object;
  #L492280.  v1:= length @variable v4;
  #L492282.  v1:= v1 / 2;
  #L492286.  v2:= length @variable v4;
  #L492288.  call temp:= `copyOfRange`(v4, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L49228e.  v4:= temp @kind object;
  #L492290.  v3.`com.google.crypto.tink.subtle.AesSiv.b` @type ^`byte`[] := v4 @kind object;
  #L492294.  v4:= new `com.google.crypto.tink.subtle.PrfAesCmac`;
  #L492298.  call `<init>`(v4, v0) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.<init>:([B)V` @kind direct;
  #L49229e.  v3.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` := v4 @kind object;
  #L4922a2.  return @kind void;
  #L4922a4.  v0:= new `java.security.InvalidKeyException`;
  #L4922a8.  v1:= new `java.lang.StringBuilder`;
  #L4922ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4922b2.  v2:= "invalid key size: " @kind object;
  #L4922b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4922bc.  v4:= length @variable v4;
  #L4922be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4922c4.  v4:= " bytes; key must have 64 bytes" @kind object;
  #L4922c8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4922ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4922d4.  v4:= temp @kind object;
  #L4922d6.  call `<init>`(v0, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4922dc.  throw v0;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.AesSiv` v6 @kind this, `byte`[][] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.a:([[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L492128.  v0:= length @variable v7;
  #L49212a.  v1:= 16I;
  #L49212e.  if v0 != 0 then goto L492144;
  #L492132.  v7:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L492136.  v0:= `@@com.google.crypto.tink.subtle.AesSiv.e` @type ^`byte`[] @kind object;
  #L49213a.  call temp:= `compute`(v7, v0, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L492140.  v7:= temp @kind object;
  #L492142.  return v7 @kind object;
  #L492144.  v0:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L492148.  v2:= `@@com.google.crypto.tink.subtle.AesSiv.d` @type ^`byte`[] @kind object;
  #L49214c.  call temp:= `compute`(v0, v2, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L492152.  v0:= temp @kind object;
  #L492154.  v2:= 0I;
  #L492156.  v3:= 0I;
  #L492158.  v4:= length @variable v7;
  #L49215a.  v4:= v4 + -1;
  #L49215e.  if v3 >= v4 then goto L492196;
  #L492162.  v4:= v7[v3] @kind object;
  #L492166.  if v4 != 0 then goto L492170;
  #L49216a.  v4:= new `byte`[v2];
  #L49216e.  goto L492174;
  #L492170.  v4:= v7[v3] @kind object;
  #L492174.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L49217a.  v0:= temp @kind object;
  #L49217c.  v5:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L492180.  call temp:= `compute`(v5, v4, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L492186.  v4:= temp @kind object;
  #L492188.  call temp:= `xor`(v0, v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L49218e.  v0:= temp @kind object;
  #L492190.  v3:= v3 + 1;
  #L492194.  goto L492158;
  #L492196.  v2:= length @variable v7;
  #L492198.  v2:= v2 + -1;
  #L49219c.  v7:= v7[v2] @kind object;
  #L4921a0.  v2:= length @variable v7;
  #L4921a2.  if v2 < v1 then goto L4921b0;
  #L4921a6.  call temp:= `xorEnd`(v7, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xorEnd:([B[B)[B` @kind static;
  #L4921ac.  v7:= temp @kind object;
  #L4921ae.  goto L4921c8;
  #L4921b0.  call temp:= `a`(v7) @signature `Lcom/google/crypto/tink/subtle/a;.a:([B)[B` @kind static;
  #L4921b6.  v7:= temp @kind object;
  #L4921b8.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L4921be.  v0:= temp @kind object;
  #L4921c0.  call temp:= `xor`(v7, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L4921c6.  v7:= temp @kind object;
  #L4921c8.  v0:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L4921cc.  call temp:= `compute`(v0, v7, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L4921d2.  v7:= temp @kind object;
  #L4921d4.  return v7 @kind object;
}
procedure `byte`[] `decryptDeterministically`(`com.google.crypto.tink.subtle.AesSiv` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.decryptDeterministically:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L491f60.  v0:= length @variable v9;
  #L491f62.  v1:= 16I;
  #L491f66.  if v0 < v1 then goto L49203c;
  #L491f6a.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L491f6e.  v2:= "AES/CTR/NoPadding" @kind object;
  #L491f72.  call temp:= `getInstance`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L491f78.  v0:= temp @kind object;
  #L491f7a.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L491f7e.  v2:= 0I;
  #L491f80.  call temp:= `copyOfRange`(v9, v2, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L491f86.  v3:= temp @kind object;
  #L491f88.  call temp:= `clone`(v3) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L491f8e.  v4:= temp @kind object;
  #L491f90.  v4:= (`byte`[]) v4 @kind object;
  #L491f94.  v5:= 8I;
  #L491f98.  v6:= v4[v5] @kind byte;
  #L491f9c.  v6:= v6 ^& 127;
  #L491fa0.  v6:= (`byte`) v6 @kind i2b;
  #L491fa2.  v4[v5]:= v6 @kind byte;
  #L491fa6.  v5:= 12I;
  #L491faa.  v6:= v4[v5] @kind byte;
  #L491fae.  v6:= v6 ^& 127;
  #L491fb2.  v6:= (`byte`) v6 @kind i2b;
  #L491fb4.  v4[v5]:= v6 @kind byte;
  #L491fb8.  v5:= new `javax.crypto.spec.SecretKeySpec`;
  #L491fbc.  v6:= v8.`com.google.crypto.tink.subtle.AesSiv.b` @type ^`byte`[] @kind object;
  #L491fc0.  v7:= "AES" @kind object;
  #L491fc4.  call `<init>`(v5, v6, v7) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L491fca.  v6:= new `javax.crypto.spec.IvParameterSpec`;
  #L491fce.  call `<init>`(v6, v4) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L491fd4.  v4:= 2I;
  #L491fd6.  call `init`(v0, v4, v5, v6) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L491fdc.  v5:= length @variable v9;
  #L491fde.  call temp:= `copyOfRange`(v9, v1, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L491fe4.  v9:= temp @kind object;
  #L491fe6.  call temp:= `doFinal`(v0, v9) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L491fec.  v0:= temp @kind object;
  #L491fee.  v9:= length @variable v9;
  #L491ff0.  if v9 != 0 then goto L492008;
  #L491ff4.  if v0 != 0 then goto L492008;
  #L491ff8.  call temp:= `isAndroid`() @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.isAndroid:()Z` @kind static;
  #L491ffe.  v9:= temp;
  #L492000.  if v9 == 0 then goto L492008;
  #L492004.  v0:= new `byte`[v2];
  #L492008.  v9:= new `byte`[][v4];
  #L49200c.  v9[v2]:= v10 @kind object;
  #L492010.  v10:= 1I;
  #L492012.  v9[v10]:= v0 @kind object;
  #L492016.  call temp:= `a`(v8, v9) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.a:([[B)[B` @kind direct;
  #L49201c.  v9:= temp @kind object;
  #L49201e.  call temp:= `equal`(v3, v9) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @kind static;
  #L492024.  v9:= temp;
  #L492026.  if v9 == 0 then goto L49202c;
  #L49202a.  return v0 @kind object;
  #L49202c.  v9:= new `javax.crypto.AEADBadTagException`;
  #L492030.  v10:= "Integrity check failed." @kind object;
  #L492034.  call `<init>`(v9, v10) @signature `Ljavax/crypto/AEADBadTagException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49203a.  throw v9;
  #L49203c.  v9:= new `java.security.GeneralSecurityException`;
  #L492040.  v10:= "Ciphertext too short." @kind object;
  #L492044.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49204a.  throw v9;
}
procedure `byte`[] `encryptDeterministically`(`com.google.crypto.tink.subtle.AesSiv` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.encryptDeterministically:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49205c.  v0:= length @variable v9;
  #L49205e.  v1:= 2147483631I;
  #L492064.  if v0 > v1 then goto L492106;
  #L492068.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49206c.  v1:= "AES/CTR/NoPadding" @kind object;
  #L492070.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L492076.  v0:= temp @kind object;
  #L492078.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L49207c.  v1:= 2I;
  #L49207e.  v2:= new `byte`[][v1];
  #L492082.  v3:= 0I;
  #L492084.  v2[v3]:= v10 @kind object;
  #L492088.  v10:= 1I;
  #L49208a.  v2[v10]:= v9 @kind object;
  #L49208e.  call temp:= `a`(v8, v2) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.a:([[B)[B` @kind direct;
  #L492094.  v2:= temp @kind object;
  #L492096.  call temp:= `clone`(v2) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L49209c.  v4:= temp @kind object;
  #L49209e.  v4:= (`byte`[]) v4 @kind object;
  #L4920a2.  v5:= 8I;
  #L4920a6.  v6:= v4[v5] @kind byte;
  #L4920aa.  v6:= v6 ^& 127;
  #L4920ae.  v6:= (`byte`) v6 @kind i2b;
  #L4920b0.  v4[v5]:= v6 @kind byte;
  #L4920b4.  v5:= 12I;
  #L4920b8.  v6:= v4[v5] @kind byte;
  #L4920bc.  v6:= v6 ^& 127;
  #L4920c0.  v6:= (`byte`) v6 @kind i2b;
  #L4920c2.  v4[v5]:= v6 @kind byte;
  #L4920c6.  v5:= new `javax.crypto.spec.SecretKeySpec`;
  #L4920ca.  v6:= v8.`com.google.crypto.tink.subtle.AesSiv.b` @type ^`byte`[] @kind object;
  #L4920ce.  v7:= "AES" @kind object;
  #L4920d2.  call `<init>`(v5, v6, v7) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L4920d8.  v6:= new `javax.crypto.spec.IvParameterSpec`;
  #L4920dc.  call `<init>`(v6, v4) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L4920e2.  call `init`(v0, v10, v5, v6) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L4920e8.  call temp:= `doFinal`(v0, v9) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L4920ee.  v9:= temp @kind object;
  #L4920f0.  v0:= new `byte`[][v1];
  #L4920f4.  v0[v3]:= v2 @kind object;
  #L4920f8.  v0[v10]:= v9 @kind object;
  #L4920fc.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L492102.  v9:= temp @kind object;
  #L492104.  return v9 @kind object;
  #L492106.  v9:= new `java.security.GeneralSecurityException`;
  #L49210a.  v10:= "plaintext too long" @kind object;
  #L49210e.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L492114.  throw v9;
}
