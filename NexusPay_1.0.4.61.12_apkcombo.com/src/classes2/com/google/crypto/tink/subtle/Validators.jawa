record `com.google.crypto.tink.subtle.Validators` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.regex.Pattern` `@@com.google.crypto.tink.subtle.Validators.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@com.google.crypto.tink.subtle.Validators.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Validators;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49ffb8.  v0:= 4I;
  #L49ffba.  v1:= new `java.lang.Object`[v0];
  #L49ffbe.  v2:= 0I;
  #L49ffc0.  v3:= "([0-9a-zA-Z\\-\\.\\_~])+" @kind object;
  #L49ffc4.  v1[v2]:= v3 @kind object;
  #L49ffc8.  v4:= 1I;
  #L49ffca.  v1[v4]:= v3 @kind object;
  #L49ffce.  v5:= 2I;
  #L49ffd0.  v1[v5]:= v3 @kind object;
  #L49ffd4.  v6:= 3I;
  #L49ffd6.  v1[v6]:= v3 @kind object;
  #L49ffda.  v7:= "^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s$" @kind object;
  #L49ffde.  call temp:= `format`(v7, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L49ffe4.  v1:= temp @kind object;
  #L49ffe6.  call temp:= `compile`(v1, v5) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;` @kind static;
  #L49ffec.  v1:= temp @kind object;
  #L49ffee.  `@@com.google.crypto.tink.subtle.Validators.a` @type ^`java.util.regex.Pattern` := v1 @kind object;
  #L49fff2.  v1:= 5I;
  #L49fff4.  v1:= new `java.lang.Object`[v1];
  #L49fff8.  v1[v2]:= v3 @kind object;
  #L49fffc.  v1[v4]:= v3 @kind object;
  #L4a0000.  v1[v5]:= v3 @kind object;
  #L4a0004.  v1[v6]:= v3 @kind object;
  #L4a0008.  v1[v0]:= v3 @kind object;
  #L4a000c.  v0:= "^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s/cryptoKeyVersions/%s$" @kind object;
  #L4a0010.  call temp:= `format`(v0, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a0016.  v0:= temp @kind object;
  #L4a0018.  call temp:= `compile`(v0, v5) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;` @kind static;
  #L4a001e.  v0:= temp @kind object;
  #L4a0020.  `@@com.google.crypto.tink.subtle.Validators.b` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L4a0024.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Validators` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Validators;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4a0038.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a003e.  return @kind void;
}
procedure `void` `validateAesKeySize`(`int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a0050.  v0:= 16I;
  #L4a0054.  if v3 == v0 then goto L4a0092;
  #L4a0058.  v0:= 32I;
  #L4a005c.  if v3 != v0 then goto L4a0062;
  #L4a0060.  goto L4a0092;
  #L4a0062.  v0:= new `java.security.InvalidAlgorithmParameterException`;
  #L4a0066.  v1:= 1I;
  #L4a0068.  v1:= new `java.lang.Object`[v1];
  #L4a006c.  v2:= 0I;
  #L4a006e.  v3:= v3 * 8;
  #L4a0072.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4a0078.  v3:= temp @kind object;
  #L4a007a.  v1[v2]:= v3 @kind object;
  #L4a007e.  v3:= "invalid key size %d; only 128-bit and 256-bit AES keys are supported" @kind object;
  #L4a0082.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a0088.  v3:= temp @kind object;
  #L4a008a.  call `<init>`(v0, v3) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a0090.  throw v0;
  #L4a0092.  return @kind void;
}
procedure `void` `validateCryptoKeyUri`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateCryptoKeyUri:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a00a4.  v0:= `@@com.google.crypto.tink.subtle.Validators.a` @type ^`java.util.regex.Pattern` @kind object;
  #L4a00a8.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L4a00ae.  v0:= temp @kind object;
  #L4a00b0.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L4a00b6.  v0:= temp;
  #L4a00b8.  if v0 != 0 then goto L4a00f4;
  #L4a00bc.  v0:= `@@com.google.crypto.tink.subtle.Validators.b` @type ^`java.util.regex.Pattern` @kind object;
  #L4a00c0.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L4a00c6.  v1:= temp @kind object;
  #L4a00c8.  call temp:= `matches`(v1) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L4a00ce.  v1:= temp;
  #L4a00d0.  if v1 == 0 then goto L4a00e4;
  #L4a00d4.  v1:= new `java.security.GeneralSecurityException`;
  #L4a00d8.  v0:= "Invalid Google Cloud KMS Key URI. The URI must point to a CryptoKey, not a CryptoKeyVersion" @kind object;
  #L4a00dc.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a00e2.  throw v1;
  #L4a00e4.  v1:= new `java.security.GeneralSecurityException`;
  #L4a00e8.  v0:= "Invalid Google Cloud KMS Key URI. The URI must point to a CryptoKey in the format projects/*/locations/*/keyRings/*/cryptoKeys/*. See https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKey" @kind object;
  #L4a00ec.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a00f2.  throw v1;
  #L4a00f4.  return @kind void;
}
procedure `void` `validateExists`(`java.io.File` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateExists:(Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a0108.  call temp:= `exists`(v3) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L4a010e.  v0:= temp;
  #L4a0110.  if v0 == 0 then goto L4a0116;
  #L4a0114.  return @kind void;
  #L4a0116.  v0:= new `java.io.IOException`;
  #L4a011a.  v1:= 1I;
  #L4a011c.  v1:= new `java.lang.Object`[v1];
  #L4a0120.  v2:= 0I;
  #L4a0122.  v1[v2]:= v3 @kind object;
  #L4a0126.  v3:= "Error: %s doesn't exist, please choose another file\n" @kind object;
  #L4a012a.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a0130.  v3:= temp @kind object;
  #L4a0132.  call `<init>`(v0, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a0138.  throw v0;
}
procedure `java.lang.String` `validateKmsKeyUriAndRemovePrefix`(`java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateKmsKeyUriAndRemovePrefix:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49ff58.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L49ff5c.  call temp:= `toLowerCase`(v3, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L49ff62.  v0:= temp @kind object;
  #L49ff64.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L49ff6a.  v0:= temp;
  #L49ff6c.  if v0 == 0 then goto L49ff82;
  #L49ff70.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L49ff76.  v2:= temp;
  #L49ff78.  call temp:= `substring`(v3, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L49ff7e.  v2:= temp @kind object;
  #L49ff80.  return v2 @kind object;
  #L49ff82.  v3:= new `java.lang.IllegalArgumentException`;
  #L49ff86.  v0:= 1I;
  #L49ff88.  v0:= new `java.lang.Object`[v0];
  #L49ff8c.  v1:= 0I;
  #L49ff8e.  v0[v1]:= v2 @kind object;
  #L49ff92.  v2:= "key URI must start with %s" @kind object;
  #L49ff96.  call temp:= `format`(v2, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L49ff9c.  v2:= temp @kind object;
  #L49ff9e.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ffa4.  throw v3;
}
procedure `void` `validateNotExists`(`java.io.File` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateNotExists:(Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a014c.  call temp:= `exists`(v3) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L4a0152.  v0:= temp;
  #L4a0154.  if v0 != 0 then goto L4a015a;
  #L4a0158.  return @kind void;
  #L4a015a.  v0:= new `java.io.IOException`;
  #L4a015e.  v1:= 1I;
  #L4a0160.  v1:= new `java.lang.Object`[v1];
  #L4a0164.  v2:= 0I;
  #L4a0166.  v1[v2]:= v3 @kind object;
  #L4a016a.  v3:= "%s exists, please choose another file\n" @kind object;
  #L4a016e.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a0174.  v3:= temp @kind object;
  #L4a0176.  call `<init>`(v0, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a017c.  throw v0;
}
procedure `void` `validateRsaModulusSize`(`int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a0190.  v0:= 2048I;
  #L4a0194.  if v3 < v0 then goto L4a019a;
  #L4a0198.  return @kind void;
  #L4a019a.  v0:= new `java.security.GeneralSecurityException`;
  #L4a019e.  v1:= 1I;
  #L4a01a0.  v1:= new `java.lang.Object`[v1];
  #L4a01a4.  v2:= 0I;
  #L4a01a6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4a01ac.  v3:= temp @kind object;
  #L4a01ae.  v1[v2]:= v3 @kind object;
  #L4a01b2.  v3:= "Modulus size is %d; only modulus size >= 2048-bit is supported" @kind object;
  #L4a01b6.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a01bc.  v3:= temp @kind object;
  #L4a01be.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a01c4.  throw v0;
}
procedure `void` `validateRsaPublicExponent`(`java.math.BigInteger` v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4a01d8.  v0:= 0I;
  #L4a01da.  call temp:= `testBit`(v2, v0) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L4a01e0.  v0:= temp;
  #L4a01e2.  if v0 == 0 then goto L4a0212;
  #L4a01e6.  v0:= 65536L;
  #L4a01ec.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L4a01f2.  v0:= temp @kind object;
  #L4a01f4.  call temp:= `compareTo`(v2, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L4a01fa.  v2:= temp;
  #L4a01fc.  if v2 <= 0 then goto L4a0202;
  #L4a0200.  return @kind void;
  #L4a0202.  v2:= new `java.security.GeneralSecurityException`;
  #L4a0206.  v0:= "Public exponent must be greater than 65536." @kind object;
  #L4a020a.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a0210.  throw v2;
  #L4a0212.  v2:= new `java.security.GeneralSecurityException`;
  #L4a0216.  v0:= "Public exponent must be odd." @kind object;
  #L4a021a.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a0220.  throw v2;
}
procedure `void` `validateSignatureHash`(`com.google.crypto.tink.subtle.Enums$HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a0234.  v0:= `@@com.google.crypto.tink.subtle.Validators$a.a` @type ^`int`[] @kind object;
  #L4a0238.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4a023e.  v1:= temp;
  #L4a0240.  v0:= v0[v1];
  #L4a0244.  v1:= 1I;
  #L4a0246.  if v0 == v1 then goto L4a028e;
  #L4a024a.  v1:= 2I;
  #L4a024c.  if v0 == v1 then goto L4a028e;
  #L4a0250.  v1:= 3I;
  #L4a0252.  if v0 != v1 then goto L4a0258;
  #L4a0256.  goto L4a028e;
  #L4a0258.  v0:= new `java.security.GeneralSecurityException`;
  #L4a025c.  v1:= new `java.lang.StringBuilder`;
  #L4a0260.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a0266.  v2:= "Unsupported hash: " @kind object;
  #L4a026a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a0270.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L4a0276.  v3:= temp @kind object;
  #L4a0278.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a027e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a0284.  v3:= temp @kind object;
  #L4a0286.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a028c.  throw v0;
  #L4a028e.  return @kind void;
}
procedure `void` `validateTypeUrl`(`java.lang.String` v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateTypeUrl:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a02a0.  v0:= "type.googleapis.com/" @kind object;
  #L4a02a4.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4a02aa.  v1:= temp;
  #L4a02ac.  v2:= 1I;
  #L4a02ae.  v3:= 0I;
  #L4a02b0.  if v1 == 0 then goto L4a02e6;
  #L4a02b4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4a02ba.  v0:= temp;
  #L4a02bc.  v1:= 20I;
  #L4a02c0.  if v0 == v1 then goto L4a02c6;
  #L4a02c4.  return @kind void;
  #L4a02c6.  v0:= new `java.security.GeneralSecurityException`;
  #L4a02ca.  v1:= new `java.lang.Object`[v2];
  #L4a02ce.  v1[v3]:= v5 @kind object;
  #L4a02d2.  v5:= "Error: type URL %s is invalid; it has no message name.\n" @kind object;
  #L4a02d6.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a02dc.  v5:= temp @kind object;
  #L4a02de.  call `<init>`(v0, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a02e4.  throw v0;
  #L4a02e6.  v1:= new `java.security.GeneralSecurityException`;
  #L4a02ea.  v4:= 2I;
  #L4a02ec.  v4:= new `java.lang.Object`[v4];
  #L4a02f0.  v4[v3]:= v5 @kind object;
  #L4a02f4.  v4[v2]:= v0 @kind object;
  #L4a02f8.  v5:= "Error: type URL %s is invalid; it must start with %s.\n" @kind object;
  #L4a02fc.  call temp:= `format`(v5, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a0302.  v5:= temp @kind object;
  #L4a0304.  call `<init>`(v1, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a030a.  throw v1;
}
procedure `void` `validateVersion`(`int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a031c.  if v3 < 0 then goto L4a0326;
  #L4a0320.  if v3 > v4 then goto L4a0326;
  #L4a0324.  return @kind void;
  #L4a0326.  v0:= new `java.security.GeneralSecurityException`;
  #L4a032a.  v1:= 2I;
  #L4a032c.  v1:= new `java.lang.Object`[v1];
  #L4a0330.  v2:= 0I;
  #L4a0332.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4a0338.  v3:= temp @kind object;
  #L4a033a.  v1[v2]:= v3 @kind object;
  #L4a033e.  v3:= 1I;
  #L4a0340.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4a0346.  v4:= temp @kind object;
  #L4a0348.  v1[v3]:= v4 @kind object;
  #L4a034c.  v3:= "key has version %d; only keys with version in range [0..%d] are supported" @kind object;
  #L4a0350.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4a0356.  v3:= temp @kind object;
  #L4a0358.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a035e.  throw v0;
}
