record `com.google.crypto.tink.subtle.PrfMac` @kind class @AccessFlag PUBLIC extends `com.google.crypto.tink.Mac` @kind interface {
  `com.google.crypto.tink.prf.Prf` `com.google.crypto.tink.subtle.PrfMac.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.PrfMac.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.PrfMac` v1 @kind this, `com.google.crypto.tink.prf.Prf` v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.<init>:(Lcom/google/crypto/tink/prf/Prf;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L49d060.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d066.  v1.`com.google.crypto.tink.subtle.PrfMac.a` @type ^`com.google.crypto.tink.prf.Prf` := v2 @kind object;
  #L49d06a.  v1.`com.google.crypto.tink.subtle.PrfMac.b` @type ^`int` := v3;
  #L49d06e.  v0:= 10I;
  #L49d072.  if v3 < v0 then goto L49d084;
  #L49d076.  v0:= 0I;
  #L49d078.  v0:= new `byte`[v0];
  #L49d07c.  call temp:= `compute`(v2, v0, v3) @signature `Lcom/google/crypto/tink/prf/Prf;.compute:([BI)[B` @kind interface;
  #L49d082.  return @kind void;
  #L49d084.  v2:= new `java.security.InvalidAlgorithmParameterException`;
  #L49d088.  v3:= "tag size too small, need at least 10 bytes" @kind object;
  #L49d08c.  call `<init>`(v2, v3) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49d092.  throw v2;
}
procedure `byte`[] `computeMac`(`com.google.crypto.tink.subtle.PrfMac` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.computeMac:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49d03c.  v0:= v2.`com.google.crypto.tink.subtle.PrfMac.a` @type ^`com.google.crypto.tink.prf.Prf` @kind object;
  #L49d040.  v1:= v2.`com.google.crypto.tink.subtle.PrfMac.b` @type ^`int`;
  #L49d044.  call temp:= `compute`(v0, v3, v1) @signature `Lcom/google/crypto/tink/prf/Prf;.compute:([BI)[B` @kind interface;
  #L49d04a.  v3:= temp @kind object;
  #L49d04c.  return v3 @kind object;
}
procedure `void` `verifyMac`(`com.google.crypto.tink.subtle.PrfMac` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.verifyMac:([B[B)V` @AccessFlag PUBLIC {
    temp;

  #L49d0a4.  call temp:= `computeMac`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.computeMac:([B)[B` @kind virtual;
  #L49d0aa.  v2:= temp @kind object;
  #L49d0ac.  call temp:= `equal`(v2, v1) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @kind static;
  #L49d0b2.  v1:= temp;
  #L49d0b4.  if v1 == 0 then goto L49d0ba;
  #L49d0b8.  return @kind void;
  #L49d0ba.  v1:= new `java.security.GeneralSecurityException`;
  #L49d0be.  v2:= "invalid MAC" @kind object;
  #L49d0c2.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49d0c8.  throw v1;
}
