record `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`[] `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.COMPRESSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.UNCOMPRESSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L498a04.  v0:= new `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`;
  #L498a08.  v1:= "UNCOMPRESSED" @kind object;
  #L498a0c.  v2:= 0I;
  #L498a0e.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L498a14.  `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.UNCOMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` := v0 @kind object;
  #L498a18.  v0:= new `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`;
  #L498a1c.  v1:= "COMPRESSED" @kind object;
  #L498a20.  v3:= 1I;
  #L498a22.  call `<init>`(v0, v1, v3) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L498a28.  `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.COMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` := v0 @kind object;
  #L498a2c.  v0:= new `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`;
  #L498a30.  v1:= "DO_NOT_USE_CRUNCHY_UNCOMPRESSED" @kind object;
  #L498a34.  v4:= 2I;
  #L498a36.  call `<init>`(v0, v1, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L498a3c.  `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` := v0 @kind object;
  #L498a40.  v1:= 3I;
  #L498a42.  v1:= new `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`[v1];
  #L498a46.  v5:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.UNCOMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L498a4a.  v1[v2]:= v5 @kind object;
  #L498a4e.  v2:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.COMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L498a52.  v1[v3]:= v2 @kind object;
  #L498a56.  v1[v4]:= v0 @kind object;
  #L498a5a.  `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.$VALUES` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`[] := v1 @kind object;
  #L498a5e.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L498a70.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L498a76.  return @kind void;
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.valueOf:(Ljava/lang/String;)Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4989bc.  v0:= constclass @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L4989c0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L4989c6.  v1:= temp @kind object;
  #L4989c8.  v1:= (`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`) v1 @kind object;
  #L4989cc.  return v1 @kind object;
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`[] `values`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.values:()[Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4989e0.  v0:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.$VALUES` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`[] @kind object;
  #L4989e4.  call temp:= `clone`(v0) @signature `[Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4989ea.  v0:= temp @kind object;
  #L4989ec.  v0:= (`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType`[]) v0 @kind object;
  #L4989f0.  return v0 @kind object;
}
