record `com.google.crypto.tink.subtle.Base64$c` @kind class @AccessFlag  extends `com.google.crypto.tink.subtle.Base64$a` @kind class {
  `byte`[] `com.google.crypto.tink.subtle.Base64$c.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.Base64$c.d` @AccessFlag ;
  `int` `com.google.crypto.tink.subtle.Base64$c.e` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.Base64$c.f` @AccessFlag PUBLIC_FINAL;
  `boolean` `com.google.crypto.tink.subtle.Base64$c.g` @AccessFlag PUBLIC_FINAL;
  `boolean` `com.google.crypto.tink.subtle.Base64$c.h` @AccessFlag PUBLIC_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.Base64$c.i` @AccessFlag PRIVATE_FINAL;
}
global `byte`[] `@@com.google.crypto.tink.subtle.Base64$c.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.google.crypto.tink.subtle.Base64$c.k` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Base64$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49328c.  v0:= 64I;
  #L493290.  v1:= new `byte`[v0];
  #L493294.  goto L4932b0;
  #L49329a.  `@@com.google.crypto.tink.subtle.Base64$c.j` @type ^`byte`[] := v1 @kind object;
  #L49329e.  v0:= new `byte`[v0];
  #L4932a2.  goto L4932f8;
  #L4932a8.  `@@com.google.crypto.tink.subtle.Base64$c.k` @type ^`byte`[] := v0 @kind object;
  #L4932ac.  return @kind void;
  #L4932ae.  
  #L4932b0.  v1:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L4932f7.  goto L49329a;
  #L4932f8.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L49333f.  goto L4932a8;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Base64$c` v2 @kind this, `int` v3 , `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.<init>:(I[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L493350.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/subtle/Base64$a;.<init>:()V` @kind direct;
  #L493356.  v2.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] := v4 @kind object;
  #L49335a.  v4:= v3 ^& 1;
  #L49335e.  v0:= 0I;
  #L493360.  v1:= 1I;
  #L493362.  if v4 != 0 then goto L49336a;
  #L493366.  v4:= 1I;
  #L493368.  goto L49336c;
  #L49336a.  v4:= 0I;
  #L49336c.  v2.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` := v4 @kind boolean;
  #L493370.  v4:= v3 ^& 2;
  #L493374.  if v4 != 0 then goto L49337c;
  #L493378.  v4:= 1I;
  #L49337a.  goto L49337e;
  #L49337c.  v4:= 0I;
  #L49337e.  v2.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` := v4 @kind boolean;
  #L493382.  v4:= v3 ^& 4;
  #L493386.  if v4 == 0 then goto L49338c;
  #L49338a.  goto L49338e;
  #L49338c.  v1:= 0I;
  #L49338e.  v2.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` := v1 @kind boolean;
  #L493392.  v3:= v3 ^& 8;
  #L493396.  if v3 != 0 then goto L4933a0;
  #L49339a.  v3:= `@@com.google.crypto.tink.subtle.Base64$c.j` @type ^`byte`[] @kind object;
  #L49339e.  goto L4933a4;
  #L4933a0.  v3:= `@@com.google.crypto.tink.subtle.Base64$c.k` @type ^`byte`[] @kind object;
  #L4933a4.  v2.`com.google.crypto.tink.subtle.Base64$c.i` @type ^`byte`[] := v3 @kind object;
  #L4933a8.  v3:= 2I;
  #L4933aa.  v3:= new `byte`[v3];
  #L4933ae.  v2.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] := v3 @kind object;
  #L4933b2.  v2.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v0;
  #L4933b6.  v3:= v2.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L4933ba.  if v3 == 0 then goto L4933c4;
  #L4933be.  v3:= 19I;
  #L4933c2.  goto L4933c6;
  #L4933c4.  v3:= -1I;
  #L4933c6.  v2.`com.google.crypto.tink.subtle.Base64$c.e` @type ^`int` := v3;
  #L4933ca.  return @kind void;
}
procedure `boolean` `a`(`com.google.crypto.tink.subtle.Base64$c` v17 @kind this, `byte`[] v18 @kind object, `int` v19 , `int` v20 , `boolean` v21 ) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.a:([BIIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L492eb4.  v0:= v17 @kind object;
  #L492eb8.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.i` @type ^`byte`[] @kind object;
  #L492ebc.  v2:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L492ec0.  v3:= v0.`com.google.crypto.tink.subtle.Base64$c.e` @type ^`int`;
  #L492ec4.  v4:= v20 + v19 @kind int;
  #L492ec8.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L492ecc.  v6:= -1I;
  #L492ece.  v7:= 0I;
  #L492ed0.  v8:= 2I;
  #L492ed2.  v9:= 1I;
  #L492ed4.  if v5 == v9 then goto L492f16;
  #L492ed8.  if v5 == v8 then goto L492ede;
  #L492edc.  goto L492f54;
  #L492ede.  v5:= v19 + 1;
  #L492ee2.  if v5 > v4 then goto L492f54;
  #L492ee6.  v10:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L492eea.  v11:= v10[v7] @kind byte;
  #L492eee.  v11:= v11 ^& 255;
  #L492ef2.  v11:= v11 ^< 16;
  #L492ef6.  v10:= v10[v9] @kind byte;
  #L492efa.  v10:= v10 ^& 255;
  #L492efe.  v10:= v10 ^< 8;
  #L492f02.  v10:= v10 ^| v11 @kind int;
  #L492f04.  v11:= v18[v19] @kind byte;
  #L492f08.  v11:= v11 ^& 255;
  #L492f0c.  v10:= v10 ^| v11 @kind int;
  #L492f0e.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v7;
  #L492f12.  v11:= v5;
  #L492f14.  goto L492f5a;
  #L492f16.  v5:= v19 + 2;
  #L492f1a.  if v5 > v4 then goto L492f54;
  #L492f1e.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L492f22.  v5:= v5[v7] @kind byte;
  #L492f26.  v5:= v5 ^& 255;
  #L492f2a.  v5:= v5 ^< 16;
  #L492f2e.  v10:= v19 + 1;
  #L492f32.  v11:= v18[v19] @kind byte;
  #L492f36.  v11:= v11 ^& 255;
  #L492f3a.  v11:= v11 ^< 8;
  #L492f3e.  v5:= v5 ^| v11 @kind int;
  #L492f40.  v11:= v10 + 1;
  #L492f44.  v10:= v18[v10] @kind byte;
  #L492f48.  v10:= v10 ^& 255;
  #L492f4c.  v10:= v10 ^| v5 @kind int;
  #L492f4e.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v7;
  #L492f52.  goto L492f5a;
  #L492f54.  v11:= v19;
  #L492f58.  v10:= -1I;
  #L492f5a.  v12:= 4I;
  #L492f5c.  v13:= 13I;
  #L492f60.  v14:= 10I;
  #L492f64.  if v10 == v6 then goto L492fd2;
  #L492f68.  v6:= v10 ^> 18;
  #L492f6c.  v6:= v6 ^& 63;
  #L492f70.  v6:= v1[v6] @kind byte;
  #L492f74.  v2[v7]:= v6 @kind byte;
  #L492f78.  v6:= v10 ^> 12;
  #L492f7c.  v6:= v6 ^& 63;
  #L492f80.  v6:= v1[v6] @kind byte;
  #L492f84.  v2[v9]:= v6 @kind byte;
  #L492f88.  v6:= v10 ^> 6;
  #L492f8c.  v6:= v6 ^& 63;
  #L492f90.  v6:= v1[v6] @kind byte;
  #L492f94.  v2[v8]:= v6 @kind byte;
  #L492f98.  v6:= v10 ^& 63;
  #L492f9c.  v6:= v1[v6] @kind byte;
  #L492fa0.  v10:= 3I;
  #L492fa2.  v2[v10]:= v6 @kind byte;
  #L492fa6.  v3:= v3 + -1;
  #L492faa.  if v3 != 0 then goto L492fce;
  #L492fae.  v3:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L492fb2.  if v3 == 0 then goto L492fbe;
  #L492fb6.  v3:= 5I;
  #L492fb8.  v2[v12]:= v13 @kind byte;
  #L492fbc.  goto L492fc0;
  #L492fbe.  v3:= 4I;
  #L492fc0.  v6:= v3 + 1;
  #L492fc4.  v2[v3]:= v14 @kind byte;
  #L492fc8.  v3:= 19I;
  #L492fcc.  goto L492fd4;
  #L492fce.  v6:= 4I;
  #L492fd0.  goto L492fd4;
  #L492fd2.  v6:= 0I;
  #L492fd4.  v10:= v11 + 3;
  #L492fd8.  if v10 > v4 then goto L493080;
  #L492fdc.  v15:= v18[v11] @kind byte;
  #L492fe0.  v15:= v15 ^& 255;
  #L492fe4.  v15:= v15 ^< 16;
  #L492fe8.  v16:= v11 + 1;
  #L492fec.  v5:= v18[v16] @kind byte;
  #L492ff0.  v5:= v5 ^& 255;
  #L492ff4.  v5:= v5 ^< 8;
  #L492ff8.  v5:= v5 ^| v15 @kind int;
  #L492ffa.  v11:= v11 + 2;
  #L492ffe.  v11:= v18[v11] @kind byte;
  #L493002.  v11:= v11 ^& 255;
  #L493006.  v5:= v5 ^| v11 @kind int;
  #L493008.  v11:= v5 ^> 18;
  #L49300c.  v11:= v11 ^& 63;
  #L493010.  v11:= v1[v11] @kind byte;
  #L493014.  v2[v6]:= v11 @kind byte;
  #L493018.  v11:= v6 + 1;
  #L49301c.  v15:= v5 ^> 12;
  #L493020.  v15:= v15 ^& 63;
  #L493024.  v15:= v1[v15] @kind byte;
  #L493028.  v2[v11]:= v15 @kind byte;
  #L49302c.  v11:= v6 + 2;
  #L493030.  v15:= v5 ^> 6;
  #L493034.  v15:= v15 ^& 63;
  #L493038.  v15:= v1[v15] @kind byte;
  #L49303c.  v2[v11]:= v15 @kind byte;
  #L493040.  v11:= v6 + 3;
  #L493044.  v5:= v5 ^& 63;
  #L493048.  v5:= v1[v5] @kind byte;
  #L49304c.  v2[v11]:= v5 @kind byte;
  #L493050.  v6:= v6 + 4;
  #L493054.  v3:= v3 + -1;
  #L493058.  if v3 != 0 then goto L49307c;
  #L49305c.  v3:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L493060.  if v3 == 0 then goto L49306e;
  #L493064.  v3:= v6 + 1;
  #L493068.  v2[v6]:= v13 @kind byte;
  #L49306c.  v6:= v3;
  #L49306e.  v3:= v6 + 1;
  #L493072.  v2[v6]:= v14 @kind byte;
  #L493076.  v6:= v3;
  #L493078.  v11:= v10;
  #L49307a.  goto L492fc8;
  #L49307c.  v11:= v10;
  #L49307e.  goto L492fd4;
  #L493080.  if v21 == 0 then goto L49321e;
  #L493084.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L493088.  v10:= v11 - v5 @kind int;
  #L49308c.  v15:= v4 + -1;
  #L493090.  v16:= 61I;
  #L493094.  if v10 != v15 then goto L493120;
  #L493098.  if v5 <= 0 then goto L4930a8;
  #L49309c.  v4:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L4930a0.  v4:= v4[v7] @kind byte;
  #L4930a4.  v7:= 1I;
  #L4930a6.  goto L4930ac;
  #L4930a8.  v4:= v18[v11] @kind byte;
  #L4930ac.  v4:= v4 ^& 255;
  #L4930b0.  v4:= v4 ^< v12 @kind int;
  #L4930b2.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L4930b6.  v5:= v5 - v7 @kind int;
  #L4930b8.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v5;
  #L4930bc.  v5:= v6 + 1;
  #L4930c0.  v7:= v4 ^> 6;
  #L4930c4.  v7:= v7 ^& 63;
  #L4930c8.  v7:= v1[v7] @kind byte;
  #L4930cc.  v2[v6]:= v7 @kind byte;
  #L4930d0.  v6:= v5 + 1;
  #L4930d4.  v4:= v4 ^& 63;
  #L4930d8.  v1:= v1[v4] @kind byte;
  #L4930dc.  v2[v5]:= v1 @kind byte;
  #L4930e0.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` @kind boolean;
  #L4930e4.  if v1 == 0 then goto L4930f8;
  #L4930e8.  v1:= v6 + 1;
  #L4930ec.  v2[v6]:= v16 @kind byte;
  #L4930f0.  v6:= v1 + 1;
  #L4930f4.  v2[v1]:= v16 @kind byte;
  #L4930f8.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L4930fc.  if v1 == 0 then goto L493270;
  #L493100.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L493104.  if v1 == 0 then goto L493112;
  #L493108.  v1:= v6 + 1;
  #L49310c.  v2[v6]:= v13 @kind byte;
  #L493110.  v6:= v1;
  #L493112.  v1:= v6 + 1;
  #L493116.  v2[v6]:= v14 @kind byte;
  #L49311a.  v6:= v1;
  #L49311c.  goto L493270;
  #L493120.  v10:= v11 - v5 @kind int;
  #L493124.  v4:= v4 - v8 @kind int;
  #L493126.  if v10 != v4 then goto L4931ec;
  #L49312a.  if v5 <= v9 then goto L49313a;
  #L49312e.  v4:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L493132.  v4:= v4[v7] @kind byte;
  #L493136.  v7:= 1I;
  #L493138.  goto L493146;
  #L49313a.  v4:= v11 + 1;
  #L49313e.  v5:= v18[v11] @kind byte;
  #L493142.  v11:= v4;
  #L493144.  v4:= v5;
  #L493146.  v4:= v4 ^& 255;
  #L49314a.  v4:= v4 ^< v14 @kind int;
  #L49314c.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L493150.  if v5 <= 0 then goto L493164;
  #L493154.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L493158.  v10:= v7 + 1;
  #L49315c.  v5:= v5[v7] @kind byte;
  #L493160.  v7:= v10;
  #L493162.  goto L493168;
  #L493164.  v5:= v18[v11] @kind byte;
  #L493168.  v5:= v5 ^& 255;
  #L49316c.  v5:= v5 ^< v8 @kind int;
  #L49316e.  v4:= v4 ^| v5 @kind int;
  #L493170.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L493174.  v5:= v5 - v7 @kind int;
  #L493176.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v5;
  #L49317a.  v5:= v6 + 1;
  #L49317e.  v7:= v4 ^> 12;
  #L493182.  v7:= v7 ^& 63;
  #L493186.  v7:= v1[v7] @kind byte;
  #L49318a.  v2[v6]:= v7 @kind byte;
  #L49318e.  v6:= v5 + 1;
  #L493192.  v7:= v4 ^> 6;
  #L493196.  v7:= v7 ^& 63;
  #L49319a.  v7:= v1[v7] @kind byte;
  #L49319e.  v2[v5]:= v7 @kind byte;
  #L4931a2.  v5:= v6 + 1;
  #L4931a6.  v4:= v4 ^& 63;
  #L4931aa.  v1:= v1[v4] @kind byte;
  #L4931ae.  v2[v6]:= v1 @kind byte;
  #L4931b2.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` @kind boolean;
  #L4931b6.  if v1 == 0 then goto L4931c4;
  #L4931ba.  v1:= v5 + 1;
  #L4931be.  v2[v5]:= v16 @kind byte;
  #L4931c2.  v5:= v1;
  #L4931c4.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L4931c8.  if v1 == 0 then goto L4931e8;
  #L4931cc.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L4931d0.  if v1 == 0 then goto L4931de;
  #L4931d4.  v1:= v5 + 1;
  #L4931d8.  v2[v5]:= v13 @kind byte;
  #L4931dc.  v5:= v1;
  #L4931de.  v1:= v5 + 1;
  #L4931e2.  v2[v5]:= v14 @kind byte;
  #L4931e6.  v5:= v1;
  #L4931e8.  v6:= v5;
  #L4931ea.  goto L493270;
  #L4931ec.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L4931f0.  if v1 == 0 then goto L493270;
  #L4931f4.  if v6 <= 0 then goto L493270;
  #L4931f8.  v1:= 19I;
  #L4931fc.  if v3 == v1 then goto L493270;
  #L493200.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L493204.  if v1 == 0 then goto L493212;
  #L493208.  v1:= v6 + 1;
  #L49320c.  v2[v6]:= v13 @kind byte;
  #L493210.  v6:= v1;
  #L493212.  v1:= v6 + 1;
  #L493216.  v2[v6]:= v14 @kind byte;
  #L49321a.  goto L49311a;
  #L49321e.  v1:= v4 + -1;
  #L493222.  if v11 != v1 then goto L493240;
  #L493226.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L49322a.  v2:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L49322e.  v4:= v2 + 1;
  #L493232.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v4;
  #L493236.  v4:= v18[v11] @kind byte;
  #L49323a.  v1[v2]:= v4 @kind byte;
  #L49323e.  goto L493270;
  #L493240.  v4:= v4 - v8 @kind int;
  #L493242.  if v11 != v4 then goto L493270;
  #L493246.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L49324a.  v2:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L49324e.  v4:= v2 + 1;
  #L493252.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v4;
  #L493256.  v5:= v18[v11] @kind byte;
  #L49325a.  v1[v2]:= v5 @kind byte;
  #L49325e.  v2:= v4 + 1;
  #L493262.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v2;
  #L493266.  v11:= v11 + v9 @kind int;
  #L493268.  v2:= v18[v11] @kind byte;
  #L49326c.  v1[v4]:= v2 @kind byte;
  #L493270.  v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int` := v6;
  #L493274.  v0.`com.google.crypto.tink.subtle.Base64$c.e` @type ^`int` := v3;
  #L493278.  return v9;
}
