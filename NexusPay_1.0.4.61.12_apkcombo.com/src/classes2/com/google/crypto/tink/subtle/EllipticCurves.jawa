record `com.google.crypto.tink.subtle.EllipticCurves` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.EllipticCurves` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L499a38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L499a3e.  return @kind void;
}
procedure `void` `a`(`java.security.spec.ECPoint` v4 @kind object, `java.security.spec.EllipticCurve` v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L499a50.  call temp:= `getModulus`(v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L499a56.  v0:= temp @kind object;
  #L499a58.  call temp:= `getAffineX`(v4) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L499a5e.  v1:= temp @kind object;
  #L499a60.  call temp:= `getAffineY`(v4) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L499a66.  v4:= temp @kind object;
  #L499a68.  if v1 == 0 then goto L499b28;
  #L499a6c.  if v4 == 0 then goto L499b28;
  #L499a70.  call temp:= `signum`(v1) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L499a76.  v2:= temp;
  #L499a78.  v3:= -1I;
  #L499a7a.  if v2 == v3 then goto L499b18;
  #L499a7e.  call temp:= `compareTo`(v1, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L499a84.  v2:= temp;
  #L499a86.  if v2 >= 0 then goto L499b18;
  #L499a8a.  call temp:= `signum`(v4) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L499a90.  v2:= temp;
  #L499a92.  if v2 == v3 then goto L499b08;
  #L499a96.  call temp:= `compareTo`(v4, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L499a9c.  v2:= temp;
  #L499a9e.  if v2 >= 0 then goto L499b08;
  #L499aa2.  call temp:= `multiply`(v4, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499aa8.  v4:= temp @kind object;
  #L499aaa.  call temp:= `mod`(v4, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499ab0.  v4:= temp @kind object;
  #L499ab2.  call temp:= `multiply`(v1, v1) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499ab8.  v2:= temp @kind object;
  #L499aba.  call temp:= `getA`(v5) @signature `Ljava/security/spec/EllipticCurve;.getA:()Ljava/math/BigInteger;` @kind virtual;
  #L499ac0.  v3:= temp @kind object;
  #L499ac2.  call temp:= `add`(v2, v3) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499ac8.  v2:= temp @kind object;
  #L499aca.  call temp:= `multiply`(v2, v1) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499ad0.  v1:= temp @kind object;
  #L499ad2.  call temp:= `getB`(v5) @signature `Ljava/security/spec/EllipticCurve;.getB:()Ljava/math/BigInteger;` @kind virtual;
  #L499ad8.  v5:= temp @kind object;
  #L499ada.  call temp:= `add`(v1, v5) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499ae0.  v5:= temp @kind object;
  #L499ae2.  call temp:= `mod`(v5, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499ae8.  v5:= temp @kind object;
  #L499aea.  call temp:= `equals`(v4, v5) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L499af0.  v4:= temp;
  #L499af2.  if v4 == 0 then goto L499af8;
  #L499af6.  return @kind void;
  #L499af8.  v4:= new `java.security.GeneralSecurityException`;
  #L499afc.  v5:= "Point is not on curve" @kind object;
  #L499b00.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499b06.  throw v4;
  #L499b08.  v4:= new `java.security.GeneralSecurityException`;
  #L499b0c.  v5:= "y is out of range" @kind object;
  #L499b10.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499b16.  throw v4;
  #L499b18.  v4:= new `java.security.GeneralSecurityException`;
  #L499b1c.  v5:= "x is out of range" @kind object;
  #L499b20.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499b26.  throw v4;
  #L499b28.  v4:= new `java.security.GeneralSecurityException`;
  #L499b2c.  v5:= "point is at infinity" @kind object;
  #L499b30.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499b36.  throw v4;
}
procedure `void` `b`(`java.security.interfaces.ECPublicKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.b:(Ljava/security/interfaces/ECPublicKey;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L499b48.  call temp:= `getW`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L499b4e.  v0:= temp @kind object;
  #L499b50.  call temp:= `getParams`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L499b56.  v1:= temp @kind object;
  #L499b58.  call temp:= `getCurve`(v1) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L499b5e.  v1:= temp @kind object;
  #L499b60.  call `a`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L499b66.  return @kind void;
}
procedure `int` `c`(`java.security.spec.EllipticCurve` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.c:(Ljava/security/spec/EllipticCurve;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L499138.  call temp:= `getModulus`(v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L49913e.  v1:= temp @kind object;
  #L499140.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L499144.  call temp:= `subtract`(v1, v0) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49914a.  v1:= temp @kind object;
  #L49914c.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L499152.  v1:= temp;
  #L499154.  return v1;
}
procedure `byte`[] `computeSharedSecret`(`java.security.interfaces.ECPrivateKey` v0 @kind object, `java.security.interfaces.ECPublicKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.computeSharedSecret:(Ljava/security/interfaces/ECPrivateKey;Ljava/security/interfaces/ECPublicKey;)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L498c88.  call `f`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.f:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @kind static;
  #L498c8e.  call temp:= `getW`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L498c94.  v1:= temp @kind object;
  #L498c96.  call temp:= `computeSharedSecret`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.computeSharedSecret:(Ljava/security/interfaces/ECPrivateKey;Ljava/security/spec/ECPoint;)[B` @kind static;
  #L498c9c.  v0:= temp @kind object;
  #L498c9e.  return v0 @kind object;
}
procedure `byte`[] `computeSharedSecret`(`java.security.interfaces.ECPrivateKey` v2 @kind object, `java.security.spec.ECPoint` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.computeSharedSecret:(Ljava/security/interfaces/ECPrivateKey;Ljava/security/spec/ECPoint;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L498cb0.  call temp:= `getParams`(v2) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L498cb6.  v0:= temp @kind object;
  #L498cb8.  call temp:= `getCurve`(v0) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L498cbe.  v0:= temp @kind object;
  #L498cc0.  call `a`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L498cc6.  call temp:= `getParams`(v2) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L498ccc.  v0:= temp @kind object;
  #L498cce.  v1:= new `java.security.spec.ECPublicKeySpec`;
  #L498cd2.  call `<init>`(v1, v3, v0) @signature `Ljava/security/spec/ECPublicKeySpec;.<init>:(Ljava/security/spec/ECPoint;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L498cd8.  v3:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L498cdc.  v0:= "EC" @kind object;
  #L498ce0.  call temp:= `getInstance`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L498ce6.  v3:= temp @kind object;
  #L498ce8.  v3:= (`java.security.KeyFactory`) v3 @kind object;
  #L498cec.  call temp:= `generatePublic`(v3, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L498cf2.  v3:= temp @kind object;
  #L498cf4.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_AGREEMENT` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L498cf8.  v1:= "ECDH" @kind object;
  #L498cfc.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L498d02.  v0:= temp @kind object;
  #L498d04.  v0:= (`javax.crypto.KeyAgreement`) v0 @kind object;
  #L498d08.  call `init`(v0, v2) @signature `Ljavax/crypto/KeyAgreement;.init:(Ljava/security/Key;)V` @kind virtual;
  #L498d0e.  v1:= 1I;
  #L498d10.  call temp:= `doPhase`(v0, v3, v1) @signature `Ljavax/crypto/KeyAgreement;.doPhase:(Ljava/security/Key;Z)Ljava/security/Key;` @kind virtual;
  #L498d16.  call temp:= `generateSecret`(v0) @signature `Ljavax/crypto/KeyAgreement;.generateSecret:()[B` @kind virtual;
  #L498d1c.  v3:= temp @kind object;
  #L498d1e.  call `g`(v3, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.g:([BLjava/security/interfaces/ECPrivateKey;)V` @kind static;
  #L498d24.  return v3 @kind object;
  #L498d26.  v2:= Exception @type ^`java.lang.IllegalStateException` @kind object;
  #L498d28.  v3:= new `java.security.GeneralSecurityException`;
  #L498d2c.  call temp:= `toString`(v2) @signature `Ljava/lang/IllegalStateException;.toString:()Ljava/lang/String;` @kind virtual;
  #L498d32.  v2:= temp @kind object;
  #L498d34.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L498d3a.  throw v3;
  catch `java.lang.IllegalStateException` @[L498d10..L498d24] goto L498d26;
}
procedure `java.security.spec.ECParameterSpec` `d`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.String` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L499718.  v0:= new `java.math.BigInteger`;
  #L49971c.  call `<init>`(v0, v3) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499722.  v3:= new `java.math.BigInteger`;
  #L499726.  call `<init>`(v3, v4) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49972c.  v4:= new `java.math.BigInteger`;
  #L499730.  v1:= "3" @kind object;
  #L499734.  call `<init>`(v4, v1) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49973a.  call temp:= `subtract`(v0, v4) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499740.  v4:= temp @kind object;
  #L499742.  v1:= new `java.math.BigInteger`;
  #L499746.  v2:= 16I;
  #L49974a.  call `<init>`(v1, v5, v2) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L499750.  v5:= new `java.math.BigInteger`;
  #L499754.  call `<init>`(v5, v6, v2) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L49975a.  v6:= new `java.math.BigInteger`;
  #L49975e.  call `<init>`(v6, v7, v2) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L499764.  v7:= new `java.security.spec.ECFieldFp`;
  #L499768.  call `<init>`(v7, v0) @signature `Ljava/security/spec/ECFieldFp;.<init>:(Ljava/math/BigInteger;)V` @kind direct;
  #L49976e.  v0:= new `java.security.spec.EllipticCurve`;
  #L499772.  call `<init>`(v0, v7, v4, v1) @signature `Ljava/security/spec/EllipticCurve;.<init>:(Ljava/security/spec/ECField;Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L499778.  v4:= new `java.security.spec.ECPoint`;
  #L49977c.  call `<init>`(v4, v5, v6) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L499782.  v5:= new `java.security.spec.ECParameterSpec`;
  #L499786.  v6:= 1I;
  #L499788.  call `<init>`(v5, v0, v4, v3, v6) @signature `Ljava/security/spec/ECParameterSpec;.<init>:(Ljava/security/spec/EllipticCurve;Ljava/security/spec/ECPoint;Ljava/math/BigInteger;I)V` @kind direct;
  #L49978e.  return v5 @kind object;
}
procedure `byte`[] `e`(`byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.e:([B)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L499080.  v0:= 0I;
  #L499082.  v1:= 0I;
  #L499084.  v2:= length @variable v5;
  #L499086.  if v1 >= v2 then goto L499098;
  #L49908a.  v2:= v5[v1] @kind byte;
  #L49908e.  if v2 != 0 then goto L499098;
  #L499092.  v1:= v1 + 1;
  #L499096.  goto L499084;
  #L499098.  v2:= length @variable v5;
  #L49909a.  v3:= 1I;
  #L49909c.  if v1 != v2 then goto L4990a4;
  #L4990a0.  v1:= length @variable v5;
  #L4990a2.  v1:= v1 - v3 @kind int;
  #L4990a4.  v2:= v5[v1] @kind byte;
  #L4990a8.  v4:= 128I;
  #L4990ac.  v2:= v2 ^& v4 @kind int;
  #L4990ae.  if v2 != v4 then goto L4990b4;
  #L4990b2.  v0:= 1I;
  #L4990b4.  v2:= length @variable v5;
  #L4990b6.  v2:= v2 - v1 @kind int;
  #L4990b8.  v2:= v2 + v0 @kind int;
  #L4990ba.  v2:= new `byte`[v2];
  #L4990be.  v3:= length @variable v5;
  #L4990c0.  v3:= v3 - v1 @kind int;
  #L4990c2.  call `arraycopy`(v5, v1, v2, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4990c8.  return v2 @kind object;
}
procedure `java.security.spec.ECPoint` `ecPointDecode`(`java.security.spec.EllipticCurve` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.ecPointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L499830.  call temp:= `pointDecode`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @kind static;
  #L499836.  v0:= temp @kind object;
  #L499838.  return v0 @kind object;
}
procedure `byte`[] `ecdsaDer2Ieee`(`byte`[] v8 @kind object, `int` v9 ) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.ecdsaDer2Ieee:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L498d5c.  call temp:= `isValidDerEncoding`(v8) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isValidDerEncoding:([B)Z` @kind static;
  #L498d62.  v0:= temp;
  #L498d64.  if v0 == 0 then goto L498ddc;
  #L498d68.  v0:= new `byte`[v9];
  #L498d6c.  v1:= 1I;
  #L498d6e.  v2:= v8[v1] @kind byte;
  #L498d72.  v2:= v2 ^& 255;
  #L498d76.  v3:= 128I;
  #L498d7a.  if v2 < v3 then goto L498d82;
  #L498d7e.  v2:= 3I;
  #L498d80.  goto L498d84;
  #L498d82.  v2:= 2I;
  #L498d84.  v2:= v2 + v1 @kind int;
  #L498d86.  v3:= v2 + 1;
  #L498d8a.  v2:= v8[v2] @kind byte;
  #L498d8e.  v4:= v8[v3] @kind byte;
  #L498d92.  v5:= 0I;
  #L498d94.  if v4 != 0 then goto L498d9c;
  #L498d98.  v4:= 1I;
  #L498d9a.  goto L498d9e;
  #L498d9c.  v4:= 0I;
  #L498d9e.  v6:= v3 + v4 @kind int;
  #L498da2.  v7:= v9 / 2;
  #L498da6.  v7:= v7 - v2 @kind int;
  #L498da8.  v7:= v7 + v4 @kind int;
  #L498daa.  v4:= v2 - v4 @kind int;
  #L498dae.  call `arraycopy`(v8, v6, v0, v7, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L498db4.  v2:= v2 + v1 @kind int;
  #L498db6.  v3:= v3 + v2 @kind int;
  #L498db8.  v2:= v3 + 1;
  #L498dbc.  v3:= v8[v3] @kind byte;
  #L498dc0.  v4:= v8[v2] @kind byte;
  #L498dc4.  if v4 != 0 then goto L498dca;
  #L498dc8.  goto L498dcc;
  #L498dca.  v1:= 0I;
  #L498dcc.  v2:= v2 + v1 @kind int;
  #L498dce.  v9:= v9 - v3 @kind int;
  #L498dd0.  v9:= v9 + v1 @kind int;
  #L498dd2.  v3:= v3 - v1 @kind int;
  #L498dd4.  call `arraycopy`(v8, v2, v0, v9, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L498dda.  return v0 @kind object;
  #L498ddc.  v8:= new `java.security.GeneralSecurityException`;
  #L498de0.  v9:= "Invalid DER encoding" @kind object;
  #L498de4.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L498dea.  throw v8;
}
procedure `byte`[] `ecdsaIeee2Der`(`byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.ecdsaIeee2Der:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L498dfc.  v0:= length @variable v7;
  #L498dfe.  v1:= 2I;
  #L498e00.  v0:= v0 %% v1 @kind int;
  #L498e02.  if v0 != 0 then goto L498ecc;
  #L498e06.  v0:= length @variable v7;
  #L498e08.  if v0 == 0 then goto L498ecc;
  #L498e0c.  v0:= length @variable v7;
  #L498e0e.  v2:= 132I;
  #L498e12.  if v0 > v2 then goto L498ecc;
  #L498e16.  v0:= length @variable v7;
  #L498e18.  v0:= v0 / v1 @kind int;
  #L498e1a.  call temp:= `copyOf`(v7, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L498e20.  v0:= temp @kind object;
  #L498e22.  call temp:= `e`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.e:([B)[B` @kind static;
  #L498e28.  v0:= temp @kind object;
  #L498e2a.  v2:= length @variable v7;
  #L498e2c.  v2:= v2 / v1 @kind int;
  #L498e2e.  v3:= length @variable v7;
  #L498e30.  call temp:= `copyOfRange`(v7, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L498e36.  v7:= temp @kind object;
  #L498e38.  call temp:= `e`(v7) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.e:([B)[B` @kind static;
  #L498e3e.  v7:= temp @kind object;
  #L498e40.  v2:= length @variable v0;
  #L498e42.  v2:= v2 + v1 @kind int;
  #L498e44.  v3:= 1I;
  #L498e46.  v2:= v2 + v3 @kind int;
  #L498e48.  v2:= v2 + v3 @kind int;
  #L498e4a.  v4:= length @variable v7;
  #L498e4c.  v2:= v2 + v4 @kind int;
  #L498e4e.  v4:= 128I;
  #L498e52.  v5:= 48I;
  #L498e56.  v6:= 0I;
  #L498e58.  if v2 < v4 then goto L498e7a;
  #L498e5c.  v4:= v2 + 3;
  #L498e60.  v4:= new `byte`[v4];
  #L498e64.  v4[v6]:= v5 @kind byte;
  #L498e68.  v5:= -127I;
  #L498e6c.  v4[v3]:= v5 @kind byte;
  #L498e70.  v2:= (`byte`) v2 @kind i2b;
  #L498e72.  v4[v1]:= v2 @kind byte;
  #L498e76.  v2:= 3I;
  #L498e78.  goto L498e8e;
  #L498e7a.  v4:= v2 + 2;
  #L498e7e.  v4:= new `byte`[v4];
  #L498e82.  v4[v6]:= v5 @kind byte;
  #L498e86.  v2:= (`byte`) v2 @kind i2b;
  #L498e88.  v4[v3]:= v2 @kind byte;
  #L498e8c.  v2:= 2I;
  #L498e8e.  v3:= v2 + 1;
  #L498e92.  v4[v2]:= v1 @kind byte;
  #L498e96.  v2:= v3 + 1;
  #L498e9a.  v5:= length @variable v0;
  #L498e9c.  v5:= (`byte`) v5 @kind i2b;
  #L498e9e.  v4[v3]:= v5 @kind byte;
  #L498ea2.  v3:= length @variable v0;
  #L498ea4.  call `arraycopy`(v0, v6, v4, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L498eaa.  v0:= length @variable v0;
  #L498eac.  v2:= v2 + v0 @kind int;
  #L498eae.  v0:= v2 + 1;
  #L498eb2.  v4[v2]:= v1 @kind byte;
  #L498eb6.  v1:= v0 + 1;
  #L498eba.  v2:= length @variable v7;
  #L498ebc.  v2:= (`byte`) v2 @kind i2b;
  #L498ebe.  v4[v0]:= v2 @kind byte;
  #L498ec2.  v0:= length @variable v7;
  #L498ec4.  call `arraycopy`(v7, v6, v4, v1, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L498eca.  return v4 @kind object;
  #L498ecc.  v7:= new `java.security.GeneralSecurityException`;
  #L498ed0.  v0:= "Invalid IEEE_P1363 encoding" @kind object;
  #L498ed4.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L498eda.  throw v7;
}
procedure `int` `encodingSizeInBytes`(`java.security.spec.EllipticCurve` v2 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.encodingSizeInBytes:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4990dc.  call temp:= `fieldSizeInBytes`(v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L4990e2.  v2:= temp;
  #L4990e4.  v0:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.a` @type ^`int`[] @kind object;
  #L4990e8.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4990ee.  v3:= temp;
  #L4990f0.  v3:= v0[v3];
  #L4990f4.  v0:= 2I;
  #L4990f6.  v1:= 1I;
  #L4990f8.  if v3 == v1 then goto L499120;
  #L4990fc.  if v3 == v0 then goto L49911a;
  #L499100.  v0:= 3I;
  #L499102.  if v3 != v0 then goto L49910a;
  #L499106.  v2:= v2 + v1 @kind int;
  #L499108.  return v2;
  #L49910a.  v2:= new `java.security.GeneralSecurityException`;
  #L49910e.  v3:= "unknown EC point format" @kind object;
  #L499112.  call `<init>`(v2, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499118.  throw v2;
  #L49911a.  v2:= v2 * 2;
  #L49911e.  return v2;
  #L499120.  v2:= v2 * 2;
  #L499124.  v2:= v2 + v1 @kind int;
  #L499126.  return v2;
}
procedure `void` `f`(`java.security.interfaces.ECPublicKey` v0 @kind object, `java.security.interfaces.ECPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.f:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @AccessFlag STATIC {
    temp;

  #L499bb0.  call temp:= `getParams`(v0) @signature `Ljava/security/interfaces/ECPublicKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L499bb6.  v0:= temp @kind object;
  #L499bb8.  call temp:= `getParams`(v1) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L499bbe.  v1:= temp @kind object;
  #L499bc0.  call temp:= `isSameEcParameterSpec`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L499bc6.  v0:= temp;
  #L499bc8.  if v0 == 0 then goto L499bce;
  #L499bcc.  return @kind void;
  #L499bce.  v0:= new `java.security.GeneralSecurityException`;
  #L499bd2.  v1:= "invalid public key spec" @kind object;
  #L499bd6.  call `<init>`(v0, v1) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499bdc.  throw v0;
  #L499bde.  v0:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L499be0.  goto L499be4;
  #L499be2.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L499be4.  v1:= new `java.security.GeneralSecurityException`;
  #L499be8.  call temp:= `toString`(v0) @signature `Ljava/lang/RuntimeException;.toString:()Ljava/lang/String;` @kind virtual;
  #L499bee.  v0:= temp @kind object;
  #L499bf0.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499bf6.  throw v1;
  catch `java.lang.IllegalArgumentException` @[L499bb0..L499bde] goto L499be2;
  catch `java.lang.NullPointerException` @[L499bb0..L499bde] goto L499bde;
}
procedure `int` `fieldSizeInBytes`(`java.security.spec.EllipticCurve` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L499168.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.c:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L49916e.  v0:= temp;
  #L499170.  v0:= v0 + 7;
  #L499174.  v0:= v0 / 8;
  #L499178.  return v0;
}
procedure `void` `g`(`byte`[] v3 @kind object, `java.security.interfaces.ECPrivateKey` v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.g:([BLjava/security/interfaces/ECPrivateKey;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L499c18.  call temp:= `getParams`(v4) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L499c1e.  v4:= temp @kind object;
  #L499c20.  call temp:= `getCurve`(v4) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L499c26.  v4:= temp @kind object;
  #L499c28.  v0:= new `java.math.BigInteger`;
  #L499c2c.  v1:= 1I;
  #L499c2e.  call `<init>`(v0, v1, v3) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L499c34.  call temp:= `signum`(v0) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L499c3a.  v3:= temp;
  #L499c3c.  v2:= -1I;
  #L499c3e.  if v3 == v2 then goto L499c5e;
  #L499c42.  call temp:= `getModulus`(v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L499c48.  v3:= temp @kind object;
  #L499c4a.  call temp:= `compareTo`(v0, v3) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L499c50.  v3:= temp;
  #L499c52.  if v3 >= 0 then goto L499c5e;
  #L499c56.  call temp:= `getY`(v0, v1, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getY:(Ljava/math/BigInteger;ZLjava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L499c5c.  return @kind void;
  #L499c5e.  v3:= new `java.security.GeneralSecurityException`;
  #L499c62.  v4:= "shared secret is out of range" @kind object;
  #L499c66.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499c6c.  throw v3;
}
procedure `java.security.KeyPair` `generateKeyPair`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L499494.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L49949a.  v0:= temp @kind object;
  #L49949c.  call temp:= `generateKeyPair`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Ljava/security/spec/ECParameterSpec;)Ljava/security/KeyPair;` @kind static;
  #L4994a2.  v0:= temp @kind object;
  #L4994a4.  return v0 @kind object;
}
procedure `java.security.KeyPair` `generateKeyPair`(`java.security.spec.ECParameterSpec` v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Ljava/security/spec/ECParameterSpec;)Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4994b8.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_PAIR_GENERATOR` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L4994bc.  v1:= "EC" @kind object;
  #L4994c0.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L4994c6.  v0:= temp @kind object;
  #L4994c8.  v0:= (`java.security.KeyPairGenerator`) v0 @kind object;
  #L4994cc.  call `initialize`(v0, v2) @signature `Ljava/security/KeyPairGenerator;.initialize:(Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L4994d2.  call temp:= `generateKeyPair`(v0) @signature `Ljava/security/KeyPairGenerator;.generateKeyPair:()Ljava/security/KeyPair;` @kind virtual;
  #L4994d8.  v2:= temp @kind object;
  #L4994da.  return v2 @kind object;
}
procedure `java.security.spec.ECParameterSpec` `getCurveSpec`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L499698.  v0:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.b` @type ^`int`[] @kind object;
  #L49969c.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4996a2.  v1:= temp;
  #L4996a4.  v0:= v0[v1];
  #L4996a8.  v1:= 1I;
  #L4996aa.  if v0 == v1 then goto L4996fc;
  #L4996ae.  v1:= 2I;
  #L4996b0.  if v0 == v1 then goto L4996f2;
  #L4996b4.  v1:= 3I;
  #L4996b6.  if v0 != v1 then goto L4996c4;
  #L4996ba.  call temp:= `getNistP521Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP521Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L4996c0.  v3:= temp @kind object;
  #L4996c2.  return v3 @kind object;
  #L4996c4.  v0:= new `java.security.NoSuchAlgorithmException`;
  #L4996c8.  v1:= new `java.lang.StringBuilder`;
  #L4996cc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4996d2.  v2:= "curve not implemented:" @kind object;
  #L4996d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4996dc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4996e2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4996e8.  v3:= temp @kind object;
  #L4996ea.  call `<init>`(v0, v3) @signature `Ljava/security/NoSuchAlgorithmException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4996f0.  throw v0;
  #L4996f2.  call temp:= `getNistP384Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP384Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L4996f8.  v3:= temp @kind object;
  #L4996fa.  return v3 @kind object;
  #L4996fc.  call temp:= `getNistP256Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP256Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L499702.  v3:= temp @kind object;
  #L499704.  return v3 @kind object;
}
procedure `java.security.interfaces.ECPrivateKey` `getEcPrivateKey`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPrivateKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;[B)Ljava/security/interfaces/ECPrivateKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L499528.  call temp:= `getCurveSpec`(v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L49952e.  v2:= temp @kind object;
  #L499530.  v0:= new `java.math.BigInteger`;
  #L499534.  v1:= 1I;
  #L499536.  call `<init>`(v0, v1, v3) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L49953c.  v3:= new `java.security.spec.ECPrivateKeySpec`;
  #L499540.  call `<init>`(v3, v0, v2) @signature `Ljava/security/spec/ECPrivateKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L499546.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49954a.  v0:= "EC" @kind object;
  #L49954e.  call temp:= `getInstance`(v2, v0) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L499554.  v2:= temp @kind object;
  #L499556.  v2:= (`java.security.KeyFactory`) v2 @kind object;
  #L49955a.  call temp:= `generatePrivate`(v2, v3) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L499560.  v2:= temp @kind object;
  #L499562.  v2:= (`java.security.interfaces.ECPrivateKey`) v2 @kind object;
  #L499566.  return v2 @kind object;
}
procedure `java.security.interfaces.ECPrivateKey` `getEcPrivateKey`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPrivateKey:([B)Ljava/security/interfaces/ECPrivateKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4994ec.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L4994f0.  v1:= "EC" @kind object;
  #L4994f4.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L4994fa.  v0:= temp @kind object;
  #L4994fc.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L499500.  v1:= new `java.security.spec.PKCS8EncodedKeySpec`;
  #L499504.  call `<init>`(v1, v2) @signature `Ljava/security/spec/PKCS8EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L49950a.  call temp:= `generatePrivate`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L499510.  v2:= temp @kind object;
  #L499512.  v2:= (`java.security.interfaces.ECPrivateKey`) v2 @kind object;
  #L499516.  return v2 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L499628.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L49962e.  v0:= temp @kind object;
  #L499630.  call temp:= `getEcPublicKey`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Ljava/security/spec/ECParameterSpec;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/interfaces/ECPublicKey;` @kind static;
  #L499636.  v0:= temp @kind object;
  #L499638.  return v0 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v2 @kind object, `byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;[B[B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4995b4.  call temp:= `getCurveSpec`(v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L4995ba.  v2:= temp @kind object;
  #L4995bc.  v0:= new `java.math.BigInteger`;
  #L4995c0.  v1:= 1I;
  #L4995c2.  call `<init>`(v0, v1, v3) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L4995c8.  v3:= new `java.math.BigInteger`;
  #L4995cc.  call `<init>`(v3, v1, v4) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L4995d2.  v4:= new `java.security.spec.ECPoint`;
  #L4995d6.  call `<init>`(v4, v0, v3) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L4995dc.  call temp:= `getCurve`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L4995e2.  v3:= temp @kind object;
  #L4995e4.  call `a`(v4, v3) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L4995ea.  v3:= new `java.security.spec.ECPublicKeySpec`;
  #L4995ee.  call `<init>`(v3, v4, v2) @signature `Ljava/security/spec/ECPublicKeySpec;.<init>:(Ljava/security/spec/ECPoint;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L4995f4.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L4995f8.  v4:= "EC" @kind object;
  #L4995fc.  call temp:= `getInstance`(v2, v4) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L499602.  v2:= temp @kind object;
  #L499604.  v2:= (`java.security.KeyFactory`) v2 @kind object;
  #L499608.  call temp:= `generatePublic`(v2, v3) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L49960e.  v2:= temp @kind object;
  #L499610.  v2:= (`java.security.interfaces.ECPublicKey`) v2 @kind object;
  #L499614.  return v2 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`java.security.spec.ECParameterSpec` v1 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Ljava/security/spec/ECParameterSpec;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49964c.  call temp:= `getCurve`(v1) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L499652.  v0:= temp @kind object;
  #L499654.  call temp:= `pointDecode`(v0, v2, v3) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @kind static;
  #L49965a.  v2:= temp @kind object;
  #L49965c.  v3:= new `java.security.spec.ECPublicKeySpec`;
  #L499660.  call `<init>`(v3, v2, v1) @signature `Ljava/security/spec/ECPublicKeySpec;.<init>:(Ljava/security/spec/ECPoint;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L499666.  v1:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49966a.  v2:= "EC" @kind object;
  #L49966e.  call temp:= `getInstance`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L499674.  v1:= temp @kind object;
  #L499676.  v1:= (`java.security.KeyFactory`) v1 @kind object;
  #L49967a.  call temp:= `generatePublic`(v1, v3) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L499680.  v1:= temp @kind object;
  #L499682.  v1:= (`java.security.interfaces.ECPublicKey`) v1 @kind object;
  #L499686.  return v1 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:([B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L499578.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49957c.  v1:= "EC" @kind object;
  #L499580.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L499586.  v0:= temp @kind object;
  #L499588.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L49958c.  v1:= new `java.security.spec.X509EncodedKeySpec`;
  #L499590.  call `<init>`(v1, v2) @signature `Ljava/security/spec/X509EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L499596.  call temp:= `generatePublic`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L49959c.  v2:= temp @kind object;
  #L49959e.  v2:= (`java.security.interfaces.ECPublicKey`) v2 @kind object;
  #L4995a2.  return v2 @kind object;
}
procedure `java.math.BigInteger` `getModulus`(`java.security.spec.EllipticCurve` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49918c.  call temp:= `getField`(v1) @signature `Ljava/security/spec/EllipticCurve;.getField:()Ljava/security/spec/ECField;` @kind virtual;
  #L499192.  v1:= temp @kind object;
  #L499194.  v0:= instanceof @variable v1 @type ^`java.security.spec.ECFieldFp` @kind boolean;
  #L499198.  if v0 == 0 then goto L4991aa;
  #L49919c.  v1:= (`java.security.spec.ECFieldFp`) v1 @kind object;
  #L4991a0.  call temp:= `getP`(v1) @signature `Ljava/security/spec/ECFieldFp;.getP:()Ljava/math/BigInteger;` @kind virtual;
  #L4991a6.  v1:= temp @kind object;
  #L4991a8.  return v1 @kind object;
  #L4991aa.  v1:= new `java.security.GeneralSecurityException`;
  #L4991ae.  v0:= "Only curves over prime order fields are supported" @kind object;
  #L4991b2.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4991b8.  throw v1;
}
procedure `java.security.spec.ECParameterSpec` `getNistP256Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP256Params:()Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4997a0.  v0:= "115792089210356248762697446949407573530086143415290314195533631308867097853951" @kind object;
  #L4997a4.  v1:= "115792089210356248762697446949407573529996955224135760342422259061068512044369" @kind object;
  #L4997a8.  v2:= "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b" @kind object;
  #L4997ac.  v3:= "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296" @kind object;
  #L4997b0.  v4:= "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" @kind object;
  #L4997b4.  call temp:= `d`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L4997ba.  v0:= temp @kind object;
  #L4997bc.  return v0 @kind object;
}
procedure `java.security.spec.ECParameterSpec` `getNistP384Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP384Params:()Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4997d0.  v0:= "39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319" @kind object;
  #L4997d4.  v1:= "39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643" @kind object;
  #L4997d8.  v2:= "b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef" @kind object;
  #L4997dc.  v3:= "aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7" @kind object;
  #L4997e0.  v4:= "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f" @kind object;
  #L4997e4.  call temp:= `d`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L4997ea.  v0:= temp @kind object;
  #L4997ec.  return v0 @kind object;
}
procedure `java.security.spec.ECParameterSpec` `getNistP521Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP521Params:()Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L499800.  v0:= "6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151" @kind object;
  #L499804.  v1:= "6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449" @kind object;
  #L499808.  v2:= "051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00" @kind object;
  #L49980c.  v3:= "c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66" @kind object;
  #L499810.  v4:= "11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650" @kind object;
  #L499814.  call temp:= `d`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L49981a.  v0:= temp @kind object;
  #L49981c.  return v0 @kind object;
}
procedure `java.math.BigInteger` `getY`(`java.math.BigInteger` v3 @kind object, `boolean` v4 , `java.security.spec.EllipticCurve` v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getY:(Ljava/math/BigInteger;ZLjava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4991cc.  call temp:= `getModulus`(v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L4991d2.  v0:= temp @kind object;
  #L4991d4.  call temp:= `getA`(v5) @signature `Ljava/security/spec/EllipticCurve;.getA:()Ljava/math/BigInteger;` @kind virtual;
  #L4991da.  v1:= temp @kind object;
  #L4991dc.  call temp:= `getB`(v5) @signature `Ljava/security/spec/EllipticCurve;.getB:()Ljava/math/BigInteger;` @kind virtual;
  #L4991e2.  v5:= temp @kind object;
  #L4991e4.  call temp:= `multiply`(v3, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4991ea.  v2:= temp @kind object;
  #L4991ec.  call temp:= `add`(v2, v1) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4991f2.  v1:= temp @kind object;
  #L4991f4.  call temp:= `multiply`(v1, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4991fa.  v3:= temp @kind object;
  #L4991fc.  call temp:= `add`(v3, v5) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499202.  v3:= temp @kind object;
  #L499204.  call temp:= `mod`(v3, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49920a.  v3:= temp @kind object;
  #L49920c.  call temp:= `modSqrt`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.modSqrt:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind static;
  #L499212.  v3:= temp @kind object;
  #L499214.  v5:= 0I;
  #L499216.  call temp:= `testBit`(v3, v5) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L49921c.  v5:= temp;
  #L49921e.  if v4 == v5 then goto L499232;
  #L499222.  call temp:= `subtract`(v0, v3) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499228.  v3:= temp @kind object;
  #L49922a.  call temp:= `mod`(v3, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499230.  v3:= temp @kind object;
  #L499232.  return v3 @kind object;
}
procedure `boolean` `isNistEcParameterSpec`(`java.security.spec.ECParameterSpec` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isNistEcParameterSpec:(Ljava/security/spec/ECParameterSpec;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L498a88.  call temp:= `getNistP256Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP256Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L498a8e.  v0:= temp @kind object;
  #L498a90.  call temp:= `isSameEcParameterSpec`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L498a96.  v0:= temp;
  #L498a98.  if v0 != 0 then goto L498aca;
  #L498a9c.  call temp:= `getNistP384Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP384Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L498aa2.  v0:= temp @kind object;
  #L498aa4.  call temp:= `isSameEcParameterSpec`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L498aaa.  v0:= temp;
  #L498aac.  if v0 != 0 then goto L498aca;
  #L498ab0.  call temp:= `getNistP521Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP521Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L498ab6.  v0:= temp @kind object;
  #L498ab8.  call temp:= `isSameEcParameterSpec`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L498abe.  v1:= temp;
  #L498ac0.  if v1 == 0 then goto L498ac6;
  #L498ac4.  goto L498aca;
  #L498ac6.  v1:= 0I;
  #L498ac8.  goto L498acc;
  #L498aca.  v1:= 1I;
  #L498acc.  return v1;
}
procedure `boolean` `isSameEcParameterSpec`(`java.security.spec.ECParameterSpec` v2 @kind object, `java.security.spec.ECParameterSpec` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L498ae0.  call temp:= `getCurve`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L498ae6.  v0:= temp @kind object;
  #L498ae8.  call temp:= `getCurve`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L498aee.  v1:= temp @kind object;
  #L498af0.  call temp:= `equals`(v0, v1) @signature `Ljava/security/spec/EllipticCurve;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498af6.  v0:= temp;
  #L498af8.  if v0 == 0 then goto L498b4c;
  #L498afc.  call temp:= `getGenerator`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getGenerator:()Ljava/security/spec/ECPoint;` @kind virtual;
  #L498b02.  v0:= temp @kind object;
  #L498b04.  call temp:= `getGenerator`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getGenerator:()Ljava/security/spec/ECPoint;` @kind virtual;
  #L498b0a.  v1:= temp @kind object;
  #L498b0c.  call temp:= `equals`(v0, v1) @signature `Ljava/security/spec/ECPoint;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498b12.  v0:= temp;
  #L498b14.  if v0 == 0 then goto L498b4c;
  #L498b18.  call temp:= `getOrder`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getOrder:()Ljava/math/BigInteger;` @kind virtual;
  #L498b1e.  v0:= temp @kind object;
  #L498b20.  call temp:= `getOrder`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getOrder:()Ljava/math/BigInteger;` @kind virtual;
  #L498b26.  v1:= temp @kind object;
  #L498b28.  call temp:= `equals`(v0, v1) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498b2e.  v0:= temp;
  #L498b30.  if v0 == 0 then goto L498b4c;
  #L498b34.  call temp:= `getCofactor`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getCofactor:()I` @kind virtual;
  #L498b3a.  v2:= temp;
  #L498b3c.  call temp:= `getCofactor`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getCofactor:()I` @kind virtual;
  #L498b42.  v3:= temp;
  #L498b44.  if v2 != v3 then goto L498b4c;
  #L498b48.  v2:= 1I;
  #L498b4a.  goto L498b4e;
  #L498b4c.  v2:= 0I;
  #L498b4e.  return v2;
}
procedure `boolean` `isValidDerEncoding`(`byte`[] v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isValidDerEncoding:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L498b60.  v0:= length @variable v9;
  #L498b62.  v1:= 0I;
  #L498b64.  v2:= 8I;
  #L498b68.  if v0 >= v2 then goto L498b6e;
  #L498b6c.  return v1;
  #L498b6e.  v0:= v9[v1] @kind byte;
  #L498b72.  v2:= 48I;
  #L498b76.  if v0 == v2 then goto L498b7c;
  #L498b7a.  return v1;
  #L498b7c.  v0:= 1I;
  #L498b7e.  v2:= v9[v0] @kind byte;
  #L498b82.  v2:= v2 ^& 255;
  #L498b86.  v3:= 129I;
  #L498b8a.  v4:= 2I;
  #L498b8c.  v5:= 128I;
  #L498b90.  if v2 != v3 then goto L498ba6;
  #L498b94.  v2:= v9[v4] @kind byte;
  #L498b98.  v2:= v2 ^& 255;
  #L498b9c.  if v2 >= v5 then goto L498ba2;
  #L498ba0.  return v1;
  #L498ba2.  v3:= 2I;
  #L498ba4.  goto L498bb2;
  #L498ba6.  if v2 == v5 then goto L498c76;
  #L498baa.  if v2 <= v3 then goto L498bb0;
  #L498bae.  goto L498c76;
  #L498bb0.  v3:= 1I;
  #L498bb2.  v6:= length @variable v9;
  #L498bb4.  v6:= v6 - v0 @kind int;
  #L498bb6.  v6:= v6 - v3 @kind int;
  #L498bb8.  if v2 == v6 then goto L498bbe;
  #L498bbc.  return v1;
  #L498bbe.  v2:= v3 + 1;
  #L498bc2.  v6:= v9[v2] @kind byte;
  #L498bc6.  if v6 == v4 then goto L498bcc;
  #L498bca.  return v1;
  #L498bcc.  v2:= v2 + v0 @kind int;
  #L498bce.  v6:= v9[v2] @kind byte;
  #L498bd2.  v6:= v6 ^& 255;
  #L498bd6.  v2:= v2 + v0 @kind int;
  #L498bd8.  v2:= v2 + v6 @kind int;
  #L498bda.  v2:= v2 + v0 @kind int;
  #L498bdc.  v7:= length @variable v9;
  #L498bde.  if v2 < v7 then goto L498be4;
  #L498be2.  return v1;
  #L498be4.  if v6 != 0 then goto L498bea;
  #L498be8.  return v1;
  #L498bea.  v7:= v3 + 3;
  #L498bee.  v8:= v9[v7] @kind byte;
  #L498bf2.  v8:= v8 ^& 255;
  #L498bf6.  if v8 < v5 then goto L498bfc;
  #L498bfa.  return v1;
  #L498bfc.  if v6 <= v0 then goto L498c1a;
  #L498c00.  v8:= v9[v7] @kind byte;
  #L498c04.  if v8 != 0 then goto L498c1a;
  #L498c08.  v8:= v3 + 4;
  #L498c0c.  v8:= v9[v8] @kind byte;
  #L498c10.  v8:= v8 ^& 255;
  #L498c14.  if v8 >= v5 then goto L498c1a;
  #L498c18.  return v1;
  #L498c1a.  v7:= v7 + v6 @kind int;
  #L498c1c.  v7:= v9[v7] @kind byte;
  #L498c20.  if v7 == v4 then goto L498c26;
  #L498c24.  return v1;
  #L498c26.  v4:= v9[v2] @kind byte;
  #L498c2a.  v4:= v4 ^& 255;
  #L498c2e.  v2:= v2 + v0 @kind int;
  #L498c30.  v2:= v2 + v4 @kind int;
  #L498c32.  v7:= length @variable v9;
  #L498c34.  if v2 == v7 then goto L498c3a;
  #L498c38.  return v1;
  #L498c3a.  if v4 != 0 then goto L498c40;
  #L498c3e.  return v1;
  #L498c40.  v2:= v3 + 5;
  #L498c44.  v2:= v2 + v6 @kind int;
  #L498c46.  v7:= v9[v2] @kind byte;
  #L498c4a.  v7:= v7 ^& 255;
  #L498c4e.  if v7 < v5 then goto L498c54;
  #L498c52.  return v1;
  #L498c54.  if v4 <= v0 then goto L498c74;
  #L498c58.  v2:= v9[v2] @kind byte;
  #L498c5c.  if v2 != 0 then goto L498c74;
  #L498c60.  v3:= v3 + 6;
  #L498c64.  v3:= v3 + v6 @kind int;
  #L498c66.  v9:= v9[v3] @kind byte;
  #L498c6a.  v9:= v9 ^& 255;
  #L498c6e.  if v9 >= v5 then goto L498c74;
  #L498c72.  return v1;
  #L498c74.  return v0;
  #L498c76.  return v1;
}
procedure `java.math.BigInteger` `modSqrt`(`java.math.BigInteger` v8 @kind object, `java.math.BigInteger` v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.modSqrt:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L499244.  call temp:= `signum`(v9) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L49924a.  v0:= temp;
  #L49924c.  v1:= 1I;
  #L49924e.  if v0 != v1 then goto L499474;
  #L499252.  call temp:= `mod`(v8, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499258.  v8:= temp @kind object;
  #L49925a.  v0:= 0I;
  #L49925c.  v2:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L499260.  call temp:= `equals`(v8, v2) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L499266.  v2:= temp;
  #L499268.  if v2 == 0 then goto L499272;
  #L49926c.  v8:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L499270.  return v8 @kind object;
  #L499272.  v2:= 0I;
  #L499274.  call temp:= `testBit`(v9, v2) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L49927a.  v3:= temp;
  #L49927c.  v4:= 2I;
  #L49927e.  if v3 == 0 then goto L4992ae;
  #L499282.  call temp:= `testBit`(v9, v1) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L499288.  v3:= temp;
  #L49928a.  if v3 == 0 then goto L4992ae;
  #L49928e.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L499292.  call temp:= `add`(v9, v0) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499298.  v0:= temp @kind object;
  #L49929a.  call temp:= `shiftRight`(v0, v4) @signature `Ljava/math/BigInteger;.shiftRight:(I)Ljava/math/BigInteger;` @kind virtual;
  #L4992a0.  v0:= temp @kind object;
  #L4992a2.  call temp:= `modPow`(v8, v0, v9) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4992a8.  v0:= temp @kind object;
  #L4992aa.  goto L499440;
  #L4992ae.  call temp:= `testBit`(v9, v2) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L4992b4.  v3:= temp;
  #L4992b6.  if v3 == 0 then goto L499440;
  #L4992ba.  call temp:= `testBit`(v9, v1) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L4992c0.  v3:= temp;
  #L4992c2.  if v3 != 0 then goto L499440;
  #L4992c6.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L4992ca.  call temp:= `subtract`(v9, v0) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4992d0.  v3:= temp @kind object;
  #L4992d2.  call temp:= `shiftRight`(v3, v1) @signature `Ljava/math/BigInteger;.shiftRight:(I)Ljava/math/BigInteger;` @kind virtual;
  #L4992d8.  v3:= temp @kind object;
  #L4992da.  call temp:= `multiply`(v0, v0) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4992e0.  v5:= temp @kind object;
  #L4992e2.  call temp:= `subtract`(v5, v8) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4992e8.  v5:= temp @kind object;
  #L4992ea.  call temp:= `mod`(v5, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4992f0.  v5:= temp @kind object;
  #L4992f2.  v6:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L4992f6.  call temp:= `equals`(v5, v6) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4992fc.  v6:= temp;
  #L4992fe.  if v6 == 0 then goto L499304;
  #L499302.  return v0 @kind object;
  #L499304.  call temp:= `modPow`(v5, v3, v9) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49930a.  v6:= temp @kind object;
  #L49930c.  v7:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L499310.  call temp:= `add`(v6, v7) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499316.  v7:= temp @kind object;
  #L499318.  call temp:= `equals`(v7, v9) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49931e.  v7:= temp;
  #L499320.  if v7 == 0 then goto L4993ea;
  #L499324.  v2:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L499328.  call temp:= `add`(v9, v2) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49932e.  v2:= temp @kind object;
  #L499330.  call temp:= `shiftRight`(v2, v1) @signature `Ljava/math/BigInteger;.shiftRight:(I)Ljava/math/BigInteger;` @kind virtual;
  #L499336.  v1:= temp @kind object;
  #L499338.  v2:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L49933c.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L499342.  v3:= temp;
  #L499344.  v3:= v3 - v4 @kind int;
  #L499346.  v4:= v3;
  #L499348.  v3:= v2 @kind object;
  #L49934a.  v2:= v0 @kind object;
  #L49934c.  if v4 < 0 then goto L4993e6;
  #L499350.  call temp:= `multiply`(v2, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499356.  v6:= temp @kind object;
  #L499358.  call temp:= `multiply`(v2, v2) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49935e.  v2:= temp @kind object;
  #L499360.  call temp:= `multiply`(v3, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499366.  v3:= temp @kind object;
  #L499368.  call temp:= `mod`(v3, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49936e.  v3:= temp @kind object;
  #L499370.  call temp:= `multiply`(v3, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499376.  v3:= temp @kind object;
  #L499378.  call temp:= `add`(v2, v3) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49937e.  v2:= temp @kind object;
  #L499380.  call temp:= `mod`(v2, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499386.  v2:= temp @kind object;
  #L499388.  call temp:= `add`(v6, v6) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49938e.  v3:= temp @kind object;
  #L499390.  call temp:= `mod`(v3, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499396.  v3:= temp @kind object;
  #L499398.  call temp:= `testBit`(v1, v4) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L49939e.  v6:= temp;
  #L4993a0.  if v6 == 0 then goto L4993e0;
  #L4993a4.  call temp:= `multiply`(v2, v0) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4993aa.  v6:= temp @kind object;
  #L4993ac.  call temp:= `multiply`(v3, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4993b2.  v7:= temp @kind object;
  #L4993b4.  call temp:= `add`(v6, v7) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4993ba.  v6:= temp @kind object;
  #L4993bc.  call temp:= `mod`(v6, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4993c2.  v6:= temp @kind object;
  #L4993c4.  call temp:= `multiply`(v0, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4993ca.  v3:= temp @kind object;
  #L4993cc.  call temp:= `add`(v3, v2) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4993d2.  v2:= temp @kind object;
  #L4993d4.  call temp:= `mod`(v2, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L4993da.  v2:= temp @kind object;
  #L4993dc.  v3:= v2 @kind object;
  #L4993de.  v2:= v6 @kind object;
  #L4993e0.  v4:= v4 + -1;
  #L4993e4.  goto L49934c;
  #L4993e6.  v0:= v2 @kind object;
  #L4993e8.  goto L499440;
  #L4993ea.  v5:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L4993ee.  call temp:= `equals`(v6, v5) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4993f4.  v5:= temp;
  #L4993f6.  v6:= "p is not prime" @kind object;
  #L4993fa.  if v5 == 0 then goto L499434;
  #L4993fe.  v5:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L499402.  call temp:= `add`(v0, v5) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499408.  v0:= temp @kind object;
  #L49940a.  v2:= v2 + v1 @kind int;
  #L49940c.  v5:= 128I;
  #L499410.  if v2 != v5 then goto L4992da;
  #L499414.  v5:= 80I;
  #L499418.  call temp:= `isProbablePrime`(v9, v5) @signature `Ljava/math/BigInteger;.isProbablePrime:(I)Z` @kind virtual;
  #L49941e.  v5:= temp;
  #L499420.  if v5 == 0 then goto L499428;
  #L499424.  goto L4992da;
  #L499428.  v8:= new `java.security.InvalidAlgorithmParameterException`;
  #L49942c.  call `<init>`(v8, v6) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499432.  throw v8;
  #L499434.  v8:= new `java.security.InvalidAlgorithmParameterException`;
  #L499438.  call `<init>`(v8, v6) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49943e.  throw v8;
  #L499440.  if v0 == 0 then goto L499472;
  #L499444.  call temp:= `multiply`(v0, v0) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L49944a.  v1:= temp @kind object;
  #L49944c.  call temp:= `mod`(v1, v9) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L499452.  v9:= temp @kind object;
  #L499454.  call temp:= `compareTo`(v9, v8) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L49945a.  v8:= temp;
  #L49945c.  if v8 != 0 then goto L499462;
  #L499460.  goto L499472;
  #L499462.  v8:= new `java.security.GeneralSecurityException`;
  #L499466.  v9:= "Could not find a modular square root" @kind object;
  #L49946a.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499470.  throw v8;
  #L499472.  return v0 @kind object;
  #L499474.  v8:= new `java.security.InvalidAlgorithmParameterException`;
  #L499478.  v9:= "p must be positive" @kind object;
  #L49947c.  call `<init>`(v8, v9) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499482.  throw v8;
}
procedure `java.security.spec.ECPoint` `pointDecode`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L49984c.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L499852.  v0:= temp @kind object;
  #L499854.  call temp:= `getCurve`(v0) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L49985a.  v0:= temp @kind object;
  #L49985c.  call temp:= `pointDecode`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @kind static;
  #L499862.  v0:= temp @kind object;
  #L499864.  return v0 @kind object;
}
procedure `java.security.spec.ECPoint` `pointDecode`(`java.security.spec.EllipticCurve` v6 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v7 @kind object, `byte`[] v8 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L499878.  call temp:= `fieldSizeInBytes`(v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L49987e.  v0:= temp;
  #L499880.  v1:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.a` @type ^`int`[] @kind object;
  #L499884.  call temp:= `ordinal`(v7) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L49988a.  v2:= temp;
  #L49988c.  v1:= v1[v2];
  #L499890.  v2:= "invalid point size" @kind object;
  #L499894.  v3:= 0I;
  #L499896.  v4:= 1I;
  #L499898.  if v1 == v4 then goto L4999ba;
  #L49989c.  v5:= 2I;
  #L49989e.  if v1 == v5 then goto L49996c;
  #L4998a2.  v2:= 3I;
  #L4998a4.  if v1 != v2 then goto L49993e;
  #L4998a8.  call temp:= `getModulus`(v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L4998ae.  v7:= temp @kind object;
  #L4998b0.  v1:= length @variable v8;
  #L4998b2.  v0:= v0 + v4 @kind int;
  #L4998b4.  if v1 != v0 then goto L49992e;
  #L4998b8.  v0:= v8[v3] @kind byte;
  #L4998bc.  if v0 != v5 then goto L4998c2;
  #L4998c0.  goto L4998cc;
  #L4998c2.  v0:= v8[v3] @kind byte;
  #L4998c6.  if v0 != v2 then goto L49991e;
  #L4998ca.  v3:= 1I;
  #L4998cc.  v0:= new `java.math.BigInteger`;
  #L4998d0.  v1:= length @variable v8;
  #L4998d2.  call temp:= `copyOfRange`(v8, v4, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L4998d8.  v8:= temp @kind object;
  #L4998da.  call `<init>`(v0, v4, v8) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L4998e0.  call temp:= `signum`(v0) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L4998e6.  v8:= temp;
  #L4998e8.  v1:= -1I;
  #L4998ea.  if v8 == v1 then goto L49990e;
  #L4998ee.  call temp:= `compareTo`(v0, v7) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L4998f4.  v7:= temp;
  #L4998f6.  if v7 >= 0 then goto L49990e;
  #L4998fa.  call temp:= `getY`(v0, v3, v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getY:(Ljava/math/BigInteger;ZLjava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L499900.  v6:= temp @kind object;
  #L499902.  v7:= new `java.security.spec.ECPoint`;
  #L499906.  call `<init>`(v7, v0, v6) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L49990c.  return v7 @kind object;
  #L49990e.  v6:= new `java.security.GeneralSecurityException`;
  #L499912.  v7:= "x is out of range" @kind object;
  #L499916.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49991c.  throw v6;
  #L49991e.  v6:= new `java.security.GeneralSecurityException`;
  #L499922.  v7:= "invalid format" @kind object;
  #L499926.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49992c.  throw v6;
  #L49992e.  v6:= new `java.security.GeneralSecurityException`;
  #L499932.  v7:= "compressed point has wrong length" @kind object;
  #L499936.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49993c.  throw v6;
  #L49993e.  v6:= new `java.security.GeneralSecurityException`;
  #L499942.  v8:= new `java.lang.StringBuilder`;
  #L499946.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49994c.  v0:= "invalid format:" @kind object;
  #L499950.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L499956.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49995c.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L499962.  v7:= temp @kind object;
  #L499964.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49996a.  throw v6;
  #L49996c.  v7:= length @variable v8;
  #L49996e.  v1:= v0 * 2;
  #L499972.  if v7 != v1 then goto L4999ae;
  #L499976.  v7:= new `java.math.BigInteger`;
  #L49997a.  call temp:= `copyOfRange`(v8, v3, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L499980.  v1:= temp @kind object;
  #L499982.  call `<init>`(v7, v4, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L499988.  v1:= new `java.math.BigInteger`;
  #L49998c.  v2:= length @variable v8;
  #L49998e.  call temp:= `copyOfRange`(v8, v0, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L499994.  v8:= temp @kind object;
  #L499996.  call `<init>`(v1, v4, v8) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L49999c.  v8:= new `java.security.spec.ECPoint`;
  #L4999a0.  call `<init>`(v8, v7, v1) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L4999a6.  call `a`(v8, v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L4999ac.  return v8 @kind object;
  #L4999ae.  v6:= new `java.security.GeneralSecurityException`;
  #L4999b2.  call `<init>`(v6, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4999b8.  throw v6;
  #L4999ba.  v7:= length @variable v8;
  #L4999bc.  v1:= v0 * 2;
  #L4999c0.  v1:= v1 + v4 @kind int;
  #L4999c2.  if v7 != v1 then goto L499a1a;
  #L4999c6.  v7:= v8[v3] @kind byte;
  #L4999ca.  v1:= 4I;
  #L4999cc.  if v7 != v1 then goto L499a0a;
  #L4999d0.  v7:= new `java.math.BigInteger`;
  #L4999d4.  v0:= v0 + v4 @kind int;
  #L4999d6.  call temp:= `copyOfRange`(v8, v4, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L4999dc.  v1:= temp @kind object;
  #L4999de.  call `<init>`(v7, v4, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L4999e4.  v1:= new `java.math.BigInteger`;
  #L4999e8.  v2:= length @variable v8;
  #L4999ea.  call temp:= `copyOfRange`(v8, v0, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L4999f0.  v8:= temp @kind object;
  #L4999f2.  call `<init>`(v1, v4, v8) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L4999f8.  v8:= new `java.security.spec.ECPoint`;
  #L4999fc.  call `<init>`(v8, v7, v1) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L499a02.  call `a`(v8, v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L499a08.  return v8 @kind object;
  #L499a0a.  v6:= new `java.security.GeneralSecurityException`;
  #L499a0e.  v7:= "invalid point format" @kind object;
  #L499a12.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499a18.  throw v6;
  #L499a1a.  v6:= new `java.security.GeneralSecurityException`;
  #L499a1e.  call `<init>`(v6, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L499a24.  throw v6;
}
procedure `byte`[] `pointEncode`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `java.security.spec.ECPoint` v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointEncode:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Ljava/security/spec/ECPoint;)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L498eec.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L498ef2.  v0:= temp @kind object;
  #L498ef4.  call temp:= `getCurve`(v0) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L498efa.  v0:= temp @kind object;
  #L498efc.  call temp:= `pointEncode`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointEncode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Ljava/security/spec/ECPoint;)[B` @kind static;
  #L498f02.  v0:= temp @kind object;
  #L498f04.  return v0 @kind object;
}
procedure `byte`[] `pointEncode`(`java.security.spec.EllipticCurve` v5 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v6 @kind object, `java.security.spec.ECPoint` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointEncode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Ljava/security/spec/ECPoint;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L498f18.  call `a`(v7, v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L498f1e.  call temp:= `fieldSizeInBytes`(v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L498f24.  v5:= temp;
  #L498f26.  v0:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.a` @type ^`int`[] @kind object;
  #L498f2a.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L498f30.  v1:= temp;
  #L498f32.  v0:= v0[v1];
  #L498f36.  v1:= 1I;
  #L498f38.  v2:= 0I;
  #L498f3a.  if v0 == v1 then goto L499022;
  #L498f3e.  v3:= 2I;
  #L498f40.  if v0 == v3 then goto L498fb8;
  #L498f44.  v4:= 3I;
  #L498f46.  if v0 != v4 then goto L498f8a;
  #L498f4a.  v5:= v5 + v1 @kind int;
  #L498f4c.  v6:= new `byte`[v5];
  #L498f50.  call temp:= `getAffineX`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L498f56.  v0:= temp @kind object;
  #L498f58.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L498f5e.  v0:= temp @kind object;
  #L498f60.  v1:= length @variable v0;
  #L498f62.  v5:= v5 - v1 @kind int;
  #L498f64.  v1:= length @variable v0;
  #L498f66.  call `arraycopy`(v0, v2, v6, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L498f6c.  call temp:= `getAffineY`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L498f72.  v5:= temp @kind object;
  #L498f74.  call temp:= `testBit`(v5, v2) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L498f7a.  v5:= temp;
  #L498f7c.  if v5 == 0 then goto L498f82;
  #L498f80.  v3:= 3I;
  #L498f82.  v5:= (`byte`) v3 @kind i2b;
  #L498f84.  v6[v2]:= v5 @kind byte;
  #L498f88.  return v6 @kind object;
  #L498f8a.  v5:= new `java.security.GeneralSecurityException`;
  #L498f8e.  v7:= new `java.lang.StringBuilder`;
  #L498f92.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L498f98.  v0:= "invalid format:" @kind object;
  #L498f9c.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498fa2.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498fa8.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L498fae.  v6:= temp @kind object;
  #L498fb0.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L498fb6.  throw v5;
  #L498fb8.  v6:= v5 * 2;
  #L498fbc.  v0:= new `byte`[v6];
  #L498fc0.  call temp:= `getAffineX`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L498fc6.  v1:= temp @kind object;
  #L498fc8.  call temp:= `toByteArray`(v1) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L498fce.  v1:= temp @kind object;
  #L498fd0.  v3:= length @variable v1;
  #L498fd2.  if v3 <= v5 then goto L498fe4;
  #L498fd6.  v3:= length @variable v1;
  #L498fd8.  v3:= v3 - v5 @kind int;
  #L498fda.  v4:= length @variable v1;
  #L498fdc.  call temp:= `copyOfRange`(v1, v3, v4) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L498fe2.  v1:= temp @kind object;
  #L498fe4.  call temp:= `getAffineY`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L498fea.  v7:= temp @kind object;
  #L498fec.  call temp:= `toByteArray`(v7) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L498ff2.  v7:= temp @kind object;
  #L498ff4.  v3:= length @variable v7;
  #L498ff6.  if v3 <= v5 then goto L499008;
  #L498ffa.  v3:= length @variable v7;
  #L498ffc.  v3:= v3 - v5 @kind int;
  #L498ffe.  v4:= length @variable v7;
  #L499000.  call temp:= `copyOfRange`(v7, v3, v4) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L499006.  v7:= temp @kind object;
  #L499008.  v3:= length @variable v7;
  #L49900a.  v6:= v6 - v3 @kind int;
  #L49900c.  v3:= length @variable v7;
  #L49900e.  call `arraycopy`(v7, v2, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L499014.  v6:= length @variable v1;
  #L499016.  v5:= v5 - v6 @kind int;
  #L499018.  v6:= length @variable v1;
  #L49901a.  call `arraycopy`(v1, v2, v0, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L499020.  return v0 @kind object;
  #L499022.  v6:= v5 * 2;
  #L499026.  v6:= v6 + v1 @kind int;
  #L499028.  v0:= new `byte`[v6];
  #L49902c.  call temp:= `getAffineX`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L499032.  v3:= temp @kind object;
  #L499034.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L49903a.  v3:= temp @kind object;
  #L49903c.  call temp:= `getAffineY`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L499042.  v7:= temp @kind object;
  #L499044.  call temp:= `toByteArray`(v7) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L49904a.  v7:= temp @kind object;
  #L49904c.  v4:= length @variable v7;
  #L49904e.  v6:= v6 - v4 @kind int;
  #L499050.  v4:= length @variable v7;
  #L499052.  call `arraycopy`(v7, v2, v0, v6, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L499058.  v5:= v5 + v1 @kind int;
  #L49905a.  v6:= length @variable v3;
  #L49905c.  v5:= v5 - v6 @kind int;
  #L49905e.  v6:= length @variable v3;
  #L499060.  call `arraycopy`(v3, v2, v0, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L499066.  v5:= 4I;
  #L499068.  v0[v2]:= v5 @kind byte;
  #L49906c.  return v0 @kind object;
}
procedure `void` `validatePublicKey`(`java.security.interfaces.ECPublicKey` v0 @kind object, `java.security.interfaces.ECPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.validatePublicKey:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L499b78.  call `f`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.f:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @kind static;
  #L499b7e.  call temp:= `getW`(v0) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L499b84.  v0:= temp @kind object;
  #L499b86.  call temp:= `getParams`(v1) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L499b8c.  v1:= temp @kind object;
  #L499b8e.  call temp:= `getCurve`(v1) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L499b94.  v1:= temp @kind object;
  #L499b96.  call `a`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L499b9c.  return @kind void;
}
