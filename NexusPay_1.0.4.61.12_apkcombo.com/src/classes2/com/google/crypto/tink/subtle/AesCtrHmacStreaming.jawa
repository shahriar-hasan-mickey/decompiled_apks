record `com.google.crypto.tink.subtle.AesCtrHmacStreaming` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.subtle.i` @kind class {
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.g` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.AesCtrHmacStreaming.h` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v6 @kind this, `byte`[] v7 @kind object, `java.lang.String` v8 @kind object, `int` v9 , `java.lang.String` v10 @kind object, `int` v11 , `int` v12 , `int` v13 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.<init>:([BLjava/lang/String;ILjava/lang/String;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L490c24.  call `<init>`(v6) @signature `Lcom/google/crypto/tink/subtle/i;.<init>:()V` @kind direct;
  #L490c2a.  v0:= length @variable v7;
  #L490c2c.  v1:= v9;
  #L490c2e.  v2:= v10 @kind object;
  #L490c30.  v3:= v11;
  #L490c32.  v4:= v12;
  #L490c34.  v5:= v13;
  #L490c36.  call `s`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.s:(IILjava/lang/String;III)V` @kind static;
  #L490c3c.  v0:= length @variable v7;
  #L490c3e.  call temp:= `copyOf`(v7, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L490c44.  v7:= temp @kind object;
  #L490c46.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.h` @type ^`byte`[] := v7 @kind object;
  #L490c4a.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.g` @type ^`java.lang.String` := v8 @kind object;
  #L490c4e.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int` := v9;
  #L490c52.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @type ^`java.lang.String` := v10 @kind object;
  #L490c56.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int` := v11;
  #L490c5a.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @type ^`int` := v12;
  #L490c5e.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @type ^`int` := v13;
  #L490c62.  v12:= v12 - v11 @kind int;
  #L490c64.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @type ^`int` := v12;
  #L490c68.  return @kind void;
}
procedure `javax.crypto.Cipher` `a`() @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.a:()Ljavax/crypto/Cipher;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L490ac8.  call temp:= `k`() @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.k:()Ljavax/crypto/Cipher;` @kind static;
  #L490ace.  v0:= temp @kind object;
  #L490ad0.  return v0 @kind object;
}
procedure `javax.crypto.Mac` `b`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.b:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)Ljavax/crypto/Mac;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L490b0c.  call temp:= `o`(v0) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.o:()Ljavax/crypto/Mac;` @kind direct;
  #L490b12.  v0:= temp @kind object;
  #L490b14.  return v0 @kind object;
}
procedure `byte`[] `c`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.c:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4907d8.  call temp:= `r`(v0) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.r:()[B` @kind direct;
  #L4907de.  v0:= temp @kind object;
  #L4907e0.  return v0 @kind object;
}
procedure `byte`[] `d`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.d:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4907f4.  call temp:= `q`(v0) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.q:()[B` @kind direct;
  #L4907fa.  v0:= temp @kind object;
  #L4907fc.  return v0 @kind object;
}
procedure `byte`[] `e`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.e:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B[B)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L490810.  call temp:= `m`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.m:([B[B)[B` @kind direct;
  #L490816.  v0:= temp @kind object;
  #L490818.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `f`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.f:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L490b50.  call temp:= `n`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.n:([B)Ljavax/crypto/spec/SecretKeySpec;` @kind direct;
  #L490b56.  v0:= temp @kind object;
  #L490b58.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `g`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.g:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L490b6c.  call temp:= `l`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.l:([B)Ljavax/crypto/spec/SecretKeySpec;` @kind direct;
  #L490b72.  v0:= temp @kind object;
  #L490b74.  return v0 @kind object;
}
procedure `byte`[] `h`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object, `long` v2 , `boolean` v4 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.h:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[BJZ)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49082c.  call temp:= `p`(v0, v1, v2, v4) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.p:([BJZ)[B` @kind direct;
  #L490832.  v0:= temp @kind object;
  #L490834.  return v0 @kind object;
}
procedure `int` `i`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.i:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49096c.  v0:= v0.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int`;
  #L490970.  return v0;
}
procedure `int` `j`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.j:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L490984.  v0:= v0.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L490988.  return v0;
}
procedure `javax.crypto.Cipher` `k`() @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.k:()Ljavax/crypto/Cipher;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L490ae4.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L490ae8.  v1:= "AES/CTR/NoPadding" @kind object;
  #L490aec.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L490af2.  v0:= temp @kind object;
  #L490af4.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L490af8.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `l`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v4 @kind this, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.l:([B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L490b88.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L490b8c.  v1:= v4.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L490b90.  v2:= v4.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @type ^`java.lang.String` @kind object;
  #L490b94.  v3:= 32I;
  #L490b98.  call `<init>`(v0, v5, v1, v3, v2) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L490b9e.  return v0 @kind object;
}
procedure `byte`[] `m`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.m:([B[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L490848.  v0:= v3.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L49084c.  v0:= v0 + 32;
  #L490850.  v1:= v3.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.g` @type ^`java.lang.String` @kind object;
  #L490854.  v2:= v3.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.h` @type ^`byte`[] @kind object;
  #L490858.  call temp:= `computeHkdf`(v1, v2, v4, v5, v0) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @kind static;
  #L49085e.  v4:= temp @kind object;
  #L490860.  return v4 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `n`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v4 @kind this, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.n:([B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L490bb0.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L490bb4.  v1:= v4.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L490bb8.  v2:= 0I;
  #L490bba.  v3:= "AES" @kind object;
  #L490bbe.  call `<init>`(v0, v5, v2, v1, v3) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L490bc4.  return v0 @kind object;
}
procedure `javax.crypto.Mac` `o`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.o:()Ljavax/crypto/Mac;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L490b28.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.MAC` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L490b2c.  v1:= v2.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @type ^`java.lang.String` @kind object;
  #L490b30.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L490b36.  v0:= temp @kind object;
  #L490b38.  v0:= (`javax.crypto.Mac`) v0 @kind object;
  #L490b3c.  return v0 @kind object;
}
procedure `byte`[] `p`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v2 @kind this, `byte`[] v3 @kind object, `long` v4 , `boolean` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.p:([BJZ)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L490874.  v0:= 16I;
  #L490878.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49087e.  v0:= temp @kind object;
  #L490880.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L490884.  call temp:= `order`(v0, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49088a.  call temp:= `put`(v0, v3) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L490890.  call `putAsUnsigedInt`(v0, v4) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.putAsUnsigedInt:(Ljava/nio/ByteBuffer;J)V` @kind static;
  #L490896.  v3:= (`byte`) v6 @kind i2b;
  #L490898.  call temp:= `put`(v0, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49089e.  v3:= 0I;
  #L4908a0.  call temp:= `putInt`(v0, v3) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4908a6.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4908ac.  v3:= temp @kind object;
  #L4908ae.  return v3 @kind object;
}
procedure `byte`[] `q`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.q:()[B` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4908c0.  v0:= 7I;
  #L4908c2.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L4908c8.  v0:= temp @kind object;
  #L4908ca.  return v0 @kind object;
}
procedure `byte`[] `r`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.r:()[B` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4908dc.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L4908e0.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L4908e6.  v0:= temp @kind object;
  #L4908e8.  return v0 @kind object;
}
procedure `void` `s`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.s:(IILjava/lang/String;III)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L490c7c.  v0:= 16I;
  #L490c80.  if v1 < v0 then goto L490d42;
  #L490c84.  if v1 < v2 then goto L490d42;
  #L490c88.  call `validateAesKeySize`(v2) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L490c8e.  v1:= 10I;
  #L490c92.  if v4 < v1 then goto L490d14;
  #L490c96.  v1:= "HmacSha1" @kind object;
  #L490c9a.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L490ca0.  v1:= temp;
  #L490ca2.  if v1 == 0 then goto L490cae;
  #L490ca6.  v1:= 20I;
  #L490caa.  if v4 > v1 then goto L490ce0;
  #L490cae.  v1:= "HmacSha256" @kind object;
  #L490cb2.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L490cb8.  v1:= temp;
  #L490cba.  if v1 == 0 then goto L490cc6;
  #L490cbe.  v1:= 32I;
  #L490cc2.  if v4 > v1 then goto L490ce0;
  #L490cc6.  v1:= "HmacSha512" @kind object;
  #L490cca.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L490cd0.  v1:= temp;
  #L490cd2.  if v1 == 0 then goto L490cf0;
  #L490cd6.  v1:= 64I;
  #L490cda.  if v4 > v1 then goto L490ce0;
  #L490cde.  goto L490cf0;
  #L490ce0.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L490ce4.  v2:= "tag size too big" @kind object;
  #L490ce8.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490cee.  throw v1;
  #L490cf0.  v5:= v5 - v6 @kind int;
  #L490cf2.  v5:= v5 - v4 @kind int;
  #L490cf4.  v5:= v5 - v2 @kind int;
  #L490cf6.  v5:= v5 + -7;
  #L490cfa.  v5:= v5 + -1;
  #L490cfe.  if v5 <= 0 then goto L490d04;
  #L490d02.  return @kind void;
  #L490d04.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L490d08.  v2:= "ciphertextSegmentSize too small" @kind object;
  #L490d0c.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490d12.  throw v1;
  #L490d14.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L490d18.  v2:= new `java.lang.StringBuilder`;
  #L490d1c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L490d22.  v3:= "tag size too small " @kind object;
  #L490d26.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d2c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d32.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L490d38.  v2:= temp @kind object;
  #L490d3a.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490d40.  throw v1;
  #L490d42.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L490d46.  v3:= new `java.lang.StringBuilder`;
  #L490d4a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L490d50.  v4:= "ikm too short, must be >= " @kind object;
  #L490d54.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d5a.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L490d60.  v2:= temp;
  #L490d62.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d68.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L490d6e.  v2:= temp @kind object;
  #L490d70.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490d76.  throw v1;
}
procedure `long` `expectedCiphertextSize`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v5 @kind this, `long` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.expectedCiphertextSize:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L490bd8.  call temp:= `getCiphertextOffset`(v5) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextOffset:()I` @kind virtual;
  #L490bde.  v0:= temp;
  #L490be0.  v0:= (`long`) v0 @kind i2l;
  #L490be2.  v6:= v6 + v0 @kind long;
  #L490be4.  v0:= v5.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @type ^`int`;
  #L490be8.  v1:= (`long`) v0 @kind i2l;
  #L490bea.  v1:= v6 / v1 @kind long;
  #L490bee.  v3:= v5.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @type ^`int`;
  #L490bf2.  v3:= (`long`) v3 @kind i2l;
  #L490bf4.  v1:= v1 * v3 @kind long;
  #L490bf8.  v3:= (`long`) v0 @kind i2l;
  #L490bfa.  v6:= v6 %% v3 @kind long;
  #L490bfc.  v3:= 0L;
  #L490c00.  v0:= lcmp(v6, v3);
  #L490c04.  if v0 <= 0 then goto L490c12;
  #L490c08.  v0:= v5.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int`;
  #L490c0c.  v3:= (`long`) v0 @kind i2l;
  #L490c0e.  v6:= v6 + v3 @kind long;
  #L490c10.  v1:= v1 + v6 @kind long;
  #L490c12.  return v1 @kind wide;
}
procedure `int` `getCiphertextOffset`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49099c.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getHeaderLength:()I` @kind virtual;
  #L4909a2.  v0:= temp;
  #L4909a4.  v1:= v2.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @type ^`int`;
  #L4909a8.  v0:= v0 + v1 @kind int;
  #L4909aa.  return v0;
}
procedure `int` `getCiphertextOverhead`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextOverhead:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4909bc.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int`;
  #L4909c0.  return v0;
}
procedure `int` `getCiphertextSegmentSize`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4909d4.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @type ^`int`;
  #L4909d8.  return v0;
}
procedure `int` `getFirstSegmentOffset`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getFirstSegmentOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4909ec.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @type ^`int`;
  #L4909f0.  return v0;
}
procedure `int` `getHeaderLength`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getHeaderLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490a04.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L490a08.  v0:= v0 + 1;
  #L490a0c.  v0:= v0 + 7;
  #L490a10.  return v0;
}
procedure `int` `getPlaintextSegmentSize`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getPlaintextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490a24.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @type ^`int`;
  #L490a28.  return v0;
}
procedure `java.nio.channels.ReadableByteChannel` `newDecryptingChannel`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.nio.channels.ReadableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L490a74.  call temp:= `newDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @kind super;
  #L490a7a.  v1:= temp @kind object;
  #L490a7c.  return v1 @kind object;
}
procedure `java.io.InputStream` `newDecryptingStream`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.io.InputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L490a3c.  call temp:= `newDecryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @kind super;
  #L490a42.  v1:= temp @kind object;
  #L490a44.  return v1 @kind object;
}
procedure `java.nio.channels.WritableByteChannel` `newEncryptingChannel`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.nio.channels.WritableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L490aac.  call temp:= `newEncryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @kind super;
  #L490ab2.  v1:= temp @kind object;
  #L490ab4.  return v1 @kind object;
}
procedure `java.io.OutputStream` `newEncryptingStream`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.io.OutputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L490a58.  call temp:= `newEncryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @kind super;
  #L490a5e.  v1:= temp @kind object;
  #L490a60.  return v1 @kind object;
}
procedure `java.nio.channels.SeekableByteChannel` `newSeekableDecryptingChannel`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.nio.channels.SeekableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L490a90.  call temp:= `newSeekableDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @kind super;
  #L490a96.  v1:= temp @kind object;
  #L490a98.  return v1 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesCtrHmacStreaming$a` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4908fc.  v0:= new `com.google.crypto.tink.subtle.AesCtrHmacStreaming$a`;
  #L490900.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$a;.<init>:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)V` @kind direct;
  #L490906.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L490934.  call temp:= `newStreamSegmentDecrypter`(v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$a;` @kind virtual;
  #L49093a.  v0:= temp @kind object;
  #L49093c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesCtrHmacStreaming$b` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490918.  v0:= new `com.google.crypto.tink.subtle.AesCtrHmacStreaming$b`;
  #L49091c.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$b;.<init>:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B)V` @kind direct;
  #L490922.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentEncrypter` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L490950.  call temp:= `newStreamSegmentEncrypter`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$b;` @kind virtual;
  #L490956.  v1:= temp @kind object;
  #L490958.  return v1 @kind object;
}
