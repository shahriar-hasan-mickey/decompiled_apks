record `com.google.crypto.tink.subtle.SubtleUtil` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.SubtleUtil` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49fe6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49fe72.  return @kind void;
}
procedure `int` `androidApiLevel`() @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.androidApiLevel:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49fd08.  v0:= "android.os.Build$VERSION" @kind object;
  #L49fd0c.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L49fd12.  v0:= temp @kind object;
  #L49fd14.  v1:= "SDK_INT" @kind object;
  #L49fd18.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L49fd1e.  v0:= temp @kind object;
  #L49fd20.  v1:= 0I;
  #L49fd22.  call temp:= `getInt`(v0, v1) @signature `Ljava/lang/reflect/Field;.getInt:(Ljava/lang/Object;)I` @kind virtual;
  #L49fd28.  v0:= temp;
  #L49fd2a.  return v0;
  #L49fd2c.  v0:= -1I;
  #L49fd2e.  return v0;
  catch `java.lang.ClassNotFoundException` @[L49fd08..L49fd2a] goto L49fd2c;
  catch `java.lang.NoSuchFieldException` @[L49fd08..L49fd2a] goto L49fd2c;
  catch `java.lang.IllegalAccessException` @[L49fd08..L49fd2a] goto L49fd2c;
}
procedure `java.math.BigInteger` `bytes2Integer`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.bytes2Integer:([B)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49fe4c.  v0:= new `java.math.BigInteger`;
  #L49fe50.  v1:= 1I;
  #L49fe52.  call `<init>`(v0, v1, v2) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L49fe58.  return v0 @kind object;
}
procedure `byte`[] `integer2Bytes`(`java.math.BigInteger` v4 @kind object, `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.integer2Bytes:(Ljava/math/BigInteger;I)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49fbfc.  call temp:= `toByteArray`(v4) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L49fc02.  v4:= temp @kind object;
  #L49fc04.  v0:= length @variable v4;
  #L49fc06.  if v0 != v5 then goto L49fc0c;
  #L49fc0a.  return v4 @kind object;
  #L49fc0c.  v0:= length @variable v4;
  #L49fc0e.  v1:= v5 + 1;
  #L49fc12.  v2:= "integer too large" @kind object;
  #L49fc16.  if v0 > v1 then goto L49fc56;
  #L49fc1a.  v0:= length @variable v4;
  #L49fc1c.  v3:= 0I;
  #L49fc1e.  if v0 != v1 then goto L49fc44;
  #L49fc22.  v5:= v4[v3] @kind byte;
  #L49fc26.  if v5 != 0 then goto L49fc38;
  #L49fc2a.  v5:= length @variable v4;
  #L49fc2c.  v0:= 1I;
  #L49fc2e.  call temp:= `copyOfRange`(v4, v0, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L49fc34.  v4:= temp @kind object;
  #L49fc36.  return v4 @kind object;
  #L49fc38.  v4:= new `java.security.GeneralSecurityException`;
  #L49fc3c.  call `<init>`(v4, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49fc42.  throw v4;
  #L49fc44.  v0:= new `byte`[v5];
  #L49fc48.  v1:= length @variable v4;
  #L49fc4a.  v5:= v5 - v1 @kind int;
  #L49fc4c.  v1:= length @variable v4;
  #L49fc4e.  call `arraycopy`(v4, v3, v0, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49fc54.  return v0 @kind object;
  #L49fc56.  v4:= new `java.security.GeneralSecurityException`;
  #L49fc5a.  call `<init>`(v4, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49fc60.  throw v4;
}
procedure `boolean` `isAndroid`() @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.isAndroid:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49fbc8.  v0:= 0I;
  #L49fbca.  v1:= "android.app.Application" @kind object;
  #L49fbce.  v2:= 0I;
  #L49fbd0.  call temp:= `forName`(v1, v0, v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L49fbd6.  v0:= 1I;
  #L49fbd8.  return v0;
  catch `java.lang.Exception` @[L49fbca..L49fbd6] goto L49fbd8;
}
procedure `byte`[] `mgf1`(`byte`[] v8 @kind object, `int` v9 , `com.google.crypto.tink.subtle.Enums$HashType` v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.mgf1:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49fc74.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.MESSAGE_DIGEST` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49fc78.  call temp:= `toDigestAlgo`(v10) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @kind static;
  #L49fc7e.  v10:= temp @kind object;
  #L49fc80.  call temp:= `getInstance`(v0, v10) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49fc86.  v10:= temp @kind object;
  #L49fc88.  v10:= (`java.security.MessageDigest`) v10 @kind object;
  #L49fc8c.  call temp:= `getDigestLength`(v10) @signature `Ljava/security/MessageDigest;.getDigestLength:()I` @kind virtual;
  #L49fc92.  v0:= temp;
  #L49fc94.  v1:= new `byte`[v9];
  #L49fc98.  v2:= 0I;
  #L49fc9a.  v3:= 0I;
  #L49fc9c.  v4:= 0I;
  #L49fc9e.  v5:= v9 + -1;
  #L49fca2.  v5:= v5 / v0 @kind int;
  #L49fca4.  if v3 > v5 then goto L49fcf4;
  #L49fca8.  call `reset`(v10) @signature `Ljava/security/MessageDigest;.reset:()V` @kind virtual;
  #L49fcae.  call `update`(v10, v8) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L49fcb4.  v5:= (`long`) v3 @kind i2l;
  #L49fcb6.  call temp:= `valueOf`(v5) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L49fcbc.  v5:= temp @kind object;
  #L49fcbe.  v6:= 4I;
  #L49fcc0.  call temp:= `integer2Bytes`(v5, v6) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.integer2Bytes:(Ljava/math/BigInteger;I)[B` @kind static;
  #L49fcc6.  v5:= temp @kind object;
  #L49fcc8.  call `update`(v10, v5) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L49fcce.  call temp:= `digest`(v10) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L49fcd4.  v5:= temp @kind object;
  #L49fcd6.  v6:= length @variable v5;
  #L49fcd8.  v7:= v9 - v4 @kind int;
  #L49fcdc.  call temp:= `min`(v6, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L49fce2.  v6:= temp;
  #L49fce4.  call `arraycopy`(v5, v2, v1, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49fcea.  v5:= length @variable v5;
  #L49fcec.  v4:= v4 + v5 @kind int;
  #L49fcee.  v3:= v3 + 1;
  #L49fcf2.  goto L49fc9e;
  #L49fcf4.  return v1 @kind object;
}
procedure `void` `putAsUnsigedInt`(`java.nio.ByteBuffer` v3 @kind object, `long` v4 ) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.putAsUnsigedInt:(Ljava/nio/ByteBuffer;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49fe84.  v0:= 0L;
  #L49fe88.  v2:= lcmp(v0, v4);
  #L49fe8c.  if v2 > 0 then goto L49feac;
  #L49fe90.  v0:= 4294967296L;
  #L49fe9a.  v2:= lcmp(v4, v0);
  #L49fe9e.  if v2 >= 0 then goto L49feac;
  #L49fea2.  v5:= (`int`) v4 @kind l2i;
  #L49fea4.  call temp:= `putInt`(v3, v5) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49feaa.  return @kind void;
  #L49feac.  v3:= new `java.security.GeneralSecurityException`;
  #L49feb0.  v4:= "Index out of range" @kind object;
  #L49feb4.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49feba.  throw v3;
}
procedure `java.lang.String` `toDigestAlgo`(`com.google.crypto.tink.subtle.Enums$HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49fd54.  v0:= `@@com.google.crypto.tink.subtle.SubtleUtil$a.a` @type ^`int`[] @kind object;
  #L49fd58.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L49fd5e.  v1:= temp;
  #L49fd60.  v0:= v0[v1];
  #L49fd64.  v1:= 1I;
  #L49fd66.  if v0 == v1 then goto L49fdbc;
  #L49fd6a.  v1:= 2I;
  #L49fd6c.  if v0 == v1 then goto L49fdb6;
  #L49fd70.  v1:= 3I;
  #L49fd72.  if v0 == v1 then goto L49fdb0;
  #L49fd76.  v1:= 4I;
  #L49fd78.  if v0 != v1 then goto L49fd82;
  #L49fd7c.  v3:= "SHA-512" @kind object;
  #L49fd80.  return v3 @kind object;
  #L49fd82.  v0:= new `java.security.GeneralSecurityException`;
  #L49fd86.  v1:= new `java.lang.StringBuilder`;
  #L49fd8a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49fd90.  v2:= "Unsupported hash " @kind object;
  #L49fd94.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49fd9a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49fda0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49fda6.  v3:= temp @kind object;
  #L49fda8.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49fdae.  throw v0;
  #L49fdb0.  v3:= "SHA-384" @kind object;
  #L49fdb4.  return v3 @kind object;
  #L49fdb6.  v3:= "SHA-256" @kind object;
  #L49fdba.  return v3 @kind object;
  #L49fdbc.  v3:= "SHA-1" @kind object;
  #L49fdc0.  return v3 @kind object;
}
procedure `java.lang.String` `toEcdsaAlgo`(`com.google.crypto.tink.subtle.Enums$HashType` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toEcdsaAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49fdd4.  call `validateSignatureHash`(v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L49fdda.  v0:= new `java.lang.StringBuilder`;
  #L49fdde.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49fde4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49fdea.  v1:= "withECDSA" @kind object;
  #L49fdee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49fdf4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49fdfa.  v1:= temp @kind object;
  #L49fdfc.  return v1 @kind object;
}
procedure `java.lang.String` `toRsaSsaPkcs1Algo`(`com.google.crypto.tink.subtle.Enums$HashType` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toRsaSsaPkcs1Algo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49fe10.  call `validateSignatureHash`(v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L49fe16.  v0:= new `java.lang.StringBuilder`;
  #L49fe1a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49fe20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49fe26.  v1:= "withRSA" @kind object;
  #L49fe2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49fe30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49fe36.  v1:= temp @kind object;
  #L49fe38.  return v1 @kind object;
}
