record `com.google.crypto.tink.subtle.o` @kind class @AccessFlag  extends `java.nio.channels.SeekableByteChannel` @kind interface {
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.subtle.o.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.o.b` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.o.c` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.o.d` @AccessFlag PRIVATE_FINAL;
  `long` `com.google.crypto.tink.subtle.o.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.g` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.o.h` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `com.google.crypto.tink.subtle.o.i` @AccessFlag PRIVATE_FINAL;
  `long` `com.google.crypto.tink.subtle.o.j` @AccessFlag PRIVATE;
  `long` `com.google.crypto.tink.subtle.o.k` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.o.l` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.o.m` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.o.n` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.o.o` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.o.p` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.q` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.r` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.s` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.o` v3 @kind this, `com.google.crypto.tink.subtle.i` v4 @kind object, `java.nio.channels.SeekableByteChannel` v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/o;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/SeekableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L49f978.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49f97e.  call temp:= `newStreamSegmentDecrypter`(v4) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @kind virtual;
  #L49f984.  v0:= temp @kind object;
  #L49f986.  v3.`com.google.crypto.tink.subtle.o.i` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` := v0 @kind object;
  #L49f98a.  v3.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` := v5 @kind object;
  #L49f98e.  call temp:= `getHeaderLength`(v4) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L49f994.  v5:= temp;
  #L49f996.  call temp:= `allocate`(v5) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49f99c.  v5:= temp @kind object;
  #L49f99e.  v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` := v5 @kind object;
  #L49f9a2.  call temp:= `getCiphertextSegmentSize`(v4) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @kind virtual;
  #L49f9a8.  v5:= temp;
  #L49f9aa.  v3.`com.google.crypto.tink.subtle.o.q` @type ^`int` := v5;
  #L49f9ae.  call temp:= `allocate`(v5) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49f9b4.  v5:= temp @kind object;
  #L49f9b6.  v3.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` := v5 @kind object;
  #L49f9ba.  call temp:= `getPlaintextSegmentSize`(v4) @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @kind virtual;
  #L49f9c0.  v5:= temp;
  #L49f9c2.  v3.`com.google.crypto.tink.subtle.o.p` @type ^`int` := v5;
  #L49f9c6.  v5:= v5 + 16;
  #L49f9ca.  call temp:= `allocate`(v5) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49f9d0.  v5:= temp @kind object;
  #L49f9d2.  v3.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` := v5 @kind object;
  #L49f9d6.  v0:= 0L;
  #L49f9da.  v3.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v0 @kind wide;
  #L49f9de.  v5:= 0I;
  #L49f9e0.  v3.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` := v5 @kind boolean;
  #L49f9e4.  v0:= -1I;
  #L49f9e6.  v3.`com.google.crypto.tink.subtle.o.n` @type ^`int` := v0;
  #L49f9ea.  v3.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` := v5 @kind boolean;
  #L49f9ee.  v5:= v3.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49f9f2.  call temp:= `size`(v5) @signature `Ljava/nio/channels/SeekableByteChannel;.size:()J` @kind interface;
  #L49f9f8.  v0:= temp @kind wide;
  #L49f9fa.  v3.`com.google.crypto.tink.subtle.o.e` @type ^`long` := v0 @kind wide;
  #L49f9fe.  v5:= length @variable v6;
  #L49fa00.  call temp:= `copyOf`(v6, v5) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L49fa06.  v5:= temp @kind object;
  #L49fa08.  v3.`com.google.crypto.tink.subtle.o.h` @type ^`byte`[] := v5 @kind object;
  #L49fa0c.  v5:= v3.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49fa10.  call temp:= `isOpen`(v5) @signature `Ljava/nio/channels/SeekableByteChannel;.isOpen:()Z` @kind interface;
  #L49fa16.  v5:= temp;
  #L49fa18.  v3.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` := v5 @kind boolean;
  #L49fa1c.  v5:= v3.`com.google.crypto.tink.subtle.o.e` @type ^`long` @kind wide;
  #L49fa20.  v0:= v3.`com.google.crypto.tink.subtle.o.q` @type ^`int`;
  #L49fa24.  v1:= (`long`) v0 @kind i2l;
  #L49fa26.  v1:= v5 / v1 @kind long;
  #L49fa2a.  v2:= (`int`) v1 @kind l2i;
  #L49fa2c.  v0:= (`long`) v0 @kind i2l;
  #L49fa2e.  v5:= v5 %% v0 @kind long;
  #L49fa30.  v6:= (`int`) v5 @kind l2i;
  #L49fa32.  call temp:= `getCiphertextOverhead`(v4) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOverhead:()I` @kind virtual;
  #L49fa38.  v5:= temp;
  #L49fa3a.  if v6 <= 0 then goto L49fa60;
  #L49fa3e.  v2:= v2 + 1;
  #L49fa42.  v3.`com.google.crypto.tink.subtle.o.f` @type ^`int` := v2;
  #L49fa46.  if v6 < v5 then goto L49fa50;
  #L49fa4a.  v3.`com.google.crypto.tink.subtle.o.g` @type ^`int` := v6;
  #L49fa4e.  goto L49fa6c;
  #L49fa50.  v4:= new `java.io.IOException`;
  #L49fa54.  v5:= "Invalid ciphertext size" @kind object;
  #L49fa58.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49fa5e.  throw v4;
  #L49fa60.  v3.`com.google.crypto.tink.subtle.o.f` @type ^`int` := v2;
  #L49fa64.  v6:= v3.`com.google.crypto.tink.subtle.o.q` @type ^`int`;
  #L49fa68.  v3.`com.google.crypto.tink.subtle.o.g` @type ^`int` := v6;
  #L49fa6c.  call temp:= `getCiphertextOffset`(v4) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @kind virtual;
  #L49fa72.  v6:= temp;
  #L49fa74.  v3.`com.google.crypto.tink.subtle.o.r` @type ^`int` := v6;
  #L49fa78.  call temp:= `getHeaderLength`(v4) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L49fa7e.  v4:= temp;
  #L49fa80.  v6:= v6 - v4 @kind int;
  #L49fa82.  v3.`com.google.crypto.tink.subtle.o.s` @type ^`int` := v6;
  #L49fa86.  if v6 < 0 then goto L49fac2;
  #L49fa8a.  v4:= v3.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L49fa8e.  v0:= (`long`) v4 @kind i2l;
  #L49fa90.  v4:= (`long`) v5 @kind i2l;
  #L49fa92.  v0:= v0 * v4 @kind long;
  #L49fa96.  v4:= v3.`com.google.crypto.tink.subtle.o.r` @type ^`int`;
  #L49fa9a.  v4:= (`long`) v4 @kind i2l;
  #L49fa9c.  v0:= v0 + v4 @kind long;
  #L49fa9e.  v4:= v3.`com.google.crypto.tink.subtle.o.e` @type ^`long` @kind wide;
  #L49faa2.  v6:= lcmp(v0, v4);
  #L49faa6.  if v6 > 0 then goto L49fab2;
  #L49faaa.  v4:= v4 - v0 @kind long;
  #L49faac.  v3.`com.google.crypto.tink.subtle.o.k` @type ^`long` := v4 @kind wide;
  #L49fab0.  return @kind void;
  #L49fab2.  v4:= new `java.io.IOException`;
  #L49fab6.  v5:= "Ciphertext is too short" @kind object;
  #L49faba.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49fac0.  throw v4;
  #L49fac2.  v4:= new `java.io.IOException`;
  #L49fac6.  v5:= "Invalid ciphertext offset or header length" @kind object;
  #L49faca.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49fad0.  throw v4;
}
procedure `int` `a`(`com.google.crypto.tink.subtle.o` v2 @kind this, `long` v3 ) @signature `Lcom/google/crypto/tink/subtle/o;.a:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L49f528.  v0:= v2.`com.google.crypto.tink.subtle.o.r` @type ^`int`;
  #L49f52c.  v0:= (`long`) v0 @kind i2l;
  #L49f52e.  v3:= v3 + v0 @kind long;
  #L49f530.  v0:= v2.`com.google.crypto.tink.subtle.o.p` @type ^`int`;
  #L49f534.  v0:= (`long`) v0 @kind i2l;
  #L49f536.  v3:= v3 / v0 @kind long;
  #L49f538.  v4:= (`int`) v3 @kind l2i;
  #L49f53a.  return v4;
}
procedure `boolean` `b`(`com.google.crypto.tink.subtle.o` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49f330.  v0:= v3.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` @kind boolean;
  #L49f334.  v1:= 1I;
  #L49f336.  if v0 == 0 then goto L49f35a;
  #L49f33a.  v0:= v3.`com.google.crypto.tink.subtle.o.n` @type ^`int`;
  #L49f33e.  v2:= v3.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L49f342.  v2:= v2 - v1 @kind int;
  #L49f344.  if v0 != v2 then goto L49f35a;
  #L49f348.  v0:= v3.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f34c.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f352.  v0:= temp;
  #L49f354.  if v0 != 0 then goto L49f35a;
  #L49f358.  goto L49f35c;
  #L49f35a.  v1:= 0I;
  #L49f35c.  return v1;
}
procedure `boolean` `c`(`com.google.crypto.tink.subtle.o` v8 @kind this, `int` v9 ) @signature `Lcom/google/crypto/tink/subtle/o;.c:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49f370.  if v9 < 0 then goto L49f462;
  #L49f374.  v0:= v8.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L49f378.  if v9 >= v0 then goto L49f462;
  #L49f37c.  v1:= 1I;
  #L49f37e.  v0:= v0 - v1 @kind int;
  #L49f380.  v2:= 0I;
  #L49f382.  if v9 != v0 then goto L49f38a;
  #L49f386.  v0:= 1I;
  #L49f388.  goto L49f38c;
  #L49f38a.  v0:= 0I;
  #L49f38c.  v3:= v8.`com.google.crypto.tink.subtle.o.n` @type ^`int`;
  #L49f390.  if v9 != v3 then goto L49f39e;
  #L49f394.  v3:= v8.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` @kind boolean;
  #L49f398.  if v3 == 0 then goto L49f3e4;
  #L49f39c.  return v1;
  #L49f39e.  v3:= (`long`) v9 @kind i2l;
  #L49f3a0.  v5:= v8.`com.google.crypto.tink.subtle.o.q` @type ^`int`;
  #L49f3a4.  v6:= (`long`) v5 @kind i2l;
  #L49f3a6.  v3:= v3 * v6 @kind long;
  #L49f3aa.  if v0 == 0 then goto L49f3b2;
  #L49f3ae.  v5:= v8.`com.google.crypto.tink.subtle.o.g` @type ^`int`;
  #L49f3b2.  if v9 != 0 then goto L49f3be;
  #L49f3b6.  v3:= v8.`com.google.crypto.tink.subtle.o.r` @type ^`int`;
  #L49f3ba.  v5:= v5 - v3 @kind int;
  #L49f3bc.  v3:= (`long`) v3 @kind i2l;
  #L49f3be.  v6:= v8.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49f3c2.  call temp:= `position`(v6, v3) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L49f3c8.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f3cc.  call temp:= `clear`(v3) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49f3d2.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f3d6.  call temp:= `limit`(v3, v5) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49f3dc.  v8.`com.google.crypto.tink.subtle.o.n` @type ^`int` := v9;
  #L49f3e0.  v8.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` := v2 @kind boolean;
  #L49f3e4.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f3e8.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f3ee.  v3:= temp;
  #L49f3f0.  if v3 <= 0 then goto L49f402;
  #L49f3f4.  v3:= v8.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49f3f8.  v4:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f3fc.  call temp:= `read`(v3, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L49f402.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f406.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f40c.  v3:= temp;
  #L49f40e.  if v3 <= 0 then goto L49f414;
  #L49f412.  return v2;
  #L49f414.  v2:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f418.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49f41e.  v2:= v8.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f422.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L49f428.  v2:= v8.`com.google.crypto.tink.subtle.o.i` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L49f42c.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f430.  v4:= v8.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f434.  call `decryptSegment`(v2, v3, v9, v0, v4) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.decryptSegment:(Ljava/nio/ByteBuffer;IZLjava/nio/ByteBuffer;)V` @kind interface;
  #L49f43a.  v9:= v8.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f43e.  call temp:= `flip`(v9) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49f444.  v8.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` := v1 @kind boolean;
  #L49f448.  return v1;
  #L49f44a.  v9:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L49f44c.  v0:= -1I;
  #L49f44e.  v8.`com.google.crypto.tink.subtle.o.n` @type ^`int` := v0;
  #L49f452.  v0:= new `java.io.IOException`;
  #L49f456.  v1:= "Failed to decrypt" @kind object;
  #L49f45a.  call `<init>`(v0, v1, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L49f460.  throw v0;
  #L49f462.  v9:= new `java.io.IOException`;
  #L49f466.  v0:= "Invalid position" @kind object;
  #L49f46a.  call `<init>`(v9, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49f470.  throw v9;
  catch `java.security.GeneralSecurityException` @[L49f428..L49f43a] goto L49f44a;
}
procedure `boolean` `d`(`com.google.crypto.tink.subtle.o` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.d:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49f494.  v0:= v3.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49f498.  v1:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f49c.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f4a2.  v1:= temp;
  #L49f4a4.  v2:= v3.`com.google.crypto.tink.subtle.o.s` @type ^`int`;
  #L49f4a8.  v1:= v1 + v2 @kind int;
  #L49f4aa.  v1:= (`long`) v1 @kind i2l;
  #L49f4ac.  call temp:= `position`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L49f4b2.  v0:= v3.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49f4b6.  v1:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f4ba.  call temp:= `read`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L49f4c0.  v0:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f4c4.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f4ca.  v0:= temp;
  #L49f4cc.  if v0 <= 0 then goto L49f4d4;
  #L49f4d0.  v0:= 0I;
  #L49f4d2.  return v0;
  #L49f4d4.  v0:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f4d8.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49f4de.  v0:= v3.`com.google.crypto.tink.subtle.o.i` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L49f4e2.  v1:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f4e6.  v2:= v3.`com.google.crypto.tink.subtle.o.h` @type ^`byte`[] @kind object;
  #L49f4ea.  call `init`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.init:(Ljava/nio/ByteBuffer;[B)V` @kind interface;
  #L49f4f0.  v0:= 1I;
  #L49f4f2.  v3.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` := v0 @kind boolean;
  #L49f4f6.  return v0;
  #L49f4f8.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L49f4fa.  v1:= new `java.io.IOException`;
  #L49f4fe.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L49f504.  throw v1;
  catch `java.security.GeneralSecurityException` @[L49f4de..L49f4f6] goto L49f4f8;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.o` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49fae4.  @monitorenter v1
  #L49fae6.  v0:= v1.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49faea.  call `close`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.close:()V` @kind interface;
  #L49faf0.  v0:= 0I;
  #L49faf2.  v1.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` := v0 @kind boolean;
  #L49faf6.  @monitorexit v1
  #L49faf8.  return @kind void;
  #L49fafa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fafc.  @monitorexit v1
  #L49fafe.  throw v0;
  catch `java.lang.Throwable` @[L49fae6..L49faf6] goto L49fafa;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.subtle.o` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f304.  @monitorenter v1
  #L49f306.  v0:= v1.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` @kind boolean;
  #L49f30a.  @monitorexit v1
  #L49f30c.  return v0;
  #L49f30e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f310.  @monitorexit v1
  #L49f312.  throw v0;
  catch `java.lang.Throwable` @[L49f306..L49f30a] goto L49f30e;
}
procedure `long` `position`(`com.google.crypto.tink.subtle.o` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.position:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49f934.  @monitorenter v2
  #L49f936.  v0:= v2.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f93a.  @monitorexit v2
  #L49f93c.  return v0 @kind wide;
  #L49f93e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f940.  @monitorexit v2
  #L49f942.  throw v0;
  catch `java.lang.Throwable` @[L49f936..L49f93a] goto L49f93e;
}
procedure `java.nio.channels.SeekableByteChannel` `position`(`com.google.crypto.tink.subtle.o` v0 @kind this, `long` v1 ) @signature `Lcom/google/crypto/tink/subtle/o;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;

  #L49f8ec.  @monitorenter v0
  #L49f8ee.  v0.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v1 @kind wide;
  #L49f8f2.  @monitorexit v0
  #L49f8f4.  return v0 @kind object;
  #L49f8f6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f8f8.  @monitorexit v0
  #L49f8fa.  throw v1;
  catch `java.lang.Throwable` @[L49f8ee..L49f8f2] goto L49f8f6;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.o` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/o;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49f54c.  @monitorenter v6
  #L49f54e.  v0:= v6.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` @kind boolean;
  #L49f552.  if v0 == 0 then goto L49f688;
  #L49f556.  v0:= v6.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` @kind boolean;
  #L49f55a.  if v0 != 0 then goto L49f570;
  #L49f55e.  call temp:= `d`(v6) @signature `Lcom/google/crypto/tink/subtle/o;.d:()Z` @kind direct;
  #L49f564.  v0:= temp;
  #L49f566.  if v0 != 0 then goto L49f570;
  #L49f56a.  v7:= 0I;
  #L49f56c.  @monitorexit v6
  #L49f56e.  return v7;
  #L49f570.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f576.  v0:= temp;
  #L49f578.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f57e.  v1:= temp;
  #L49f580.  if v1 <= 0 then goto L49f664;
  #L49f584.  v1:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f588.  v3:= v6.`com.google.crypto.tink.subtle.o.k` @type ^`long` @kind wide;
  #L49f58c.  v5:= lcmp(v1, v3);
  #L49f590.  if v5 >= 0 then goto L49f664;
  #L49f594.  v1:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f598.  call temp:= `a`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/o;.a:(J)I` @kind direct;
  #L49f59e.  v1:= temp;
  #L49f5a0.  if v1 != 0 then goto L49f5ac;
  #L49f5a4.  v2:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f5a8.  v3:= (`int`) v2 @kind l2i;
  #L49f5aa.  goto L49f5c2;
  #L49f5ac.  v2:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f5b0.  v4:= v6.`com.google.crypto.tink.subtle.o.r` @type ^`int`;
  #L49f5b4.  v4:= (`long`) v4 @kind i2l;
  #L49f5b6.  v2:= v2 + v4 @kind long;
  #L49f5b8.  v4:= v6.`com.google.crypto.tink.subtle.o.p` @type ^`int`;
  #L49f5bc.  v4:= (`long`) v4 @kind i2l;
  #L49f5be.  v2:= v2 %% v4 @kind long;
  #L49f5c0.  goto L49f5a8;
  #L49f5c2.  call temp:= `c`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/o;.c:(I)Z` @kind direct;
  #L49f5c8.  v1:= temp;
  #L49f5ca.  if v1 == 0 then goto L49f664;
  #L49f5ce.  v1:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f5d2.  call temp:= `position`(v1, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49f5d8.  v1:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f5dc.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f5e2.  v1:= temp;
  #L49f5e4.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f5ea.  v2:= temp;
  #L49f5ec.  if v1 > v2 then goto L49f614;
  #L49f5f0.  v1:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f5f4.  v3:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f5f8.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f5fe.  v3:= temp;
  #L49f600.  v3:= (`long`) v3 @kind i2l;
  #L49f602.  v1:= v1 + v3 @kind long;
  #L49f604.  v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v1 @kind wide;
  #L49f608.  v1:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f60c.  call temp:= `put`(v7, v1) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49f612.  goto L49f578;
  #L49f614.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49f61a.  v1:= temp;
  #L49f61c.  v2:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f620.  call temp:= `duplicate`(v2) @signature `Ljava/nio/ByteBuffer;.duplicate:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L49f626.  v2:= temp @kind object;
  #L49f628.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f62e.  v3:= temp;
  #L49f630.  v3:= v3 + v1 @kind int;
  #L49f632.  call temp:= `limit`(v2, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49f638.  call temp:= `put`(v7, v2) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49f63e.  v2:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f642.  v4:= (`long`) v1 @kind i2l;
  #L49f644.  v2:= v2 + v4 @kind long;
  #L49f646.  v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v2 @kind wide;
  #L49f64a.  v2:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f64e.  v3:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f652.  call temp:= `position`(v3) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f658.  v3:= temp;
  #L49f65a.  v3:= v3 + v1 @kind int;
  #L49f65c.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49f662.  goto L49f578;
  #L49f664.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f66a.  v7:= temp;
  #L49f66c.  v7:= v7 - v0 @kind int;
  #L49f66e.  if v7 != 0 then goto L49f684;
  #L49f672.  call temp:= `b`(v6) @signature `Lcom/google/crypto/tink/subtle/o;.b:()Z` @kind direct;
  #L49f678.  v0:= temp;
  #L49f67a.  if v0 == 0 then goto L49f684;
  #L49f67e.  v7:= -1I;
  #L49f680.  @monitorexit v6
  #L49f682.  return v7;
  #L49f684.  @monitorexit v6
  #L49f686.  return v7;
  #L49f688.  v7:= new `java.nio.channels.ClosedChannelException`;
  #L49f68c.  call `<init>`(v7) @signature `Ljava/nio/channels/ClosedChannelException;.<init>:()V` @kind direct;
  #L49f692.  throw v7;
  #L49f694.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f696.  @monitorexit v6
  #L49f698.  throw v7;
  catch `java.lang.Throwable` @[L49f54e..L49f566] goto L49f694;
  catch `java.lang.Throwable` @[L49f570..L49f67a] goto L49f694;
  catch `java.lang.Throwable` @[L49f688..L49f694] goto L49f694;
}
procedure `long` `size`(`com.google.crypto.tink.subtle.o` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49f960.  v0:= v2.`com.google.crypto.tink.subtle.o.k` @type ^`long` @kind wide;
  #L49f964.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.subtle.o` v4 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49f6e4.  @monitorenter v4
  #L49f6e6.  v0:= new `java.lang.StringBuilder`;
  #L49f6ea.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49f6f0.  v1:= new `java.lang.StringBuilder`;
  #L49f6f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49f6fa.  v2:= "position:" @kind object;
  #L49f6fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f704.  v2:= v4.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L49f708.  call temp:= `position`(v2) @signature `Ljava/nio/channels/SeekableByteChannel;.position:()J` @kind interface;
  #L49f70e.  v2:= temp @kind wide;
  #L49f710.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f716.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49f71c.  v1:= temp @kind object;
  #L49f71e.  goto L49f724;
  #L49f720.  v1:= "position: n/a" @kind object;
  #L49f724.  v2:= "StreamingAeadSeekableDecryptingChannel" @kind object;
  #L49f728.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f72e.  v2:= "\nciphertextChannel" @kind object;
  #L49f732.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f738.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f73e.  v1:= "\nciphertextChannelSize:" @kind object;
  #L49f742.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f748.  v1:= v4.`com.google.crypto.tink.subtle.o.e` @type ^`long` @kind wide;
  #L49f74c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f752.  v1:= "\nplaintextSize:" @kind object;
  #L49f756.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f75c.  v1:= v4.`com.google.crypto.tink.subtle.o.k` @type ^`long` @kind wide;
  #L49f760.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f766.  v1:= "\nciphertextSegmentSize:" @kind object;
  #L49f76a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f770.  v1:= v4.`com.google.crypto.tink.subtle.o.q` @type ^`int`;
  #L49f774.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f77a.  v1:= "\nnumberOfSegments:" @kind object;
  #L49f77e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f784.  v1:= v4.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L49f788.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f78e.  v1:= "\nheaderRead:" @kind object;
  #L49f792.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f798.  v1:= v4.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` @kind boolean;
  #L49f79c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7a2.  v1:= "\nplaintextPosition:" @kind object;
  #L49f7a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7ac.  v1:= v4.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L49f7b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7b6.  v1:= "\nHeader" @kind object;
  #L49f7ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7c0.  v1:= " position:" @kind object;
  #L49f7c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7ca.  v1:= v4.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f7ce.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f7d4.  v1:= temp;
  #L49f7d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7dc.  v1:= " limit:" @kind object;
  #L49f7e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7e6.  v1:= v4.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f7ea.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f7f0.  v1:= temp;
  #L49f7f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f7f8.  v1:= "\ncurrentSegmentNr:" @kind object;
  #L49f7fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f802.  v1:= v4.`com.google.crypto.tink.subtle.o.n` @type ^`int`;
  #L49f806.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f80c.  v1:= "\nciphertextSgement" @kind object;
  #L49f810.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f816.  v1:= " position:" @kind object;
  #L49f81a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f820.  v1:= v4.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f824.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f82a.  v1:= temp;
  #L49f82c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f832.  v1:= " limit:" @kind object;
  #L49f836.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f83c.  v1:= v4.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f840.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49f846.  v1:= temp;
  #L49f848.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f84e.  v1:= "\nisCurrentSegmentDecrypted:" @kind object;
  #L49f852.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f858.  v1:= v4.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` @kind boolean;
  #L49f85c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f862.  v1:= "\nplaintextSegment" @kind object;
  #L49f866.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f86c.  v1:= " position:" @kind object;
  #L49f870.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f876.  v1:= v4.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f87a.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49f880.  v1:= temp;
  #L49f882.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f888.  v1:= " limit:" @kind object;
  #L49f88c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f892.  v1:= v4.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L49f896.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49f89c.  v1:= temp;
  #L49f89e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L49f8a4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49f8aa.  v0:= temp @kind object;
  #L49f8ac.  @monitorexit v4
  #L49f8ae.  return v0 @kind object;
  #L49f8b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f8b2.  @monitorexit v4
  #L49f8b4.  throw v0;
  catch `java.lang.Throwable` @[L49f6e6..L49f6f0] goto L49f8b0;
  catch `java.io.IOException` @[L49f6f0..L49f71e] goto L49f720;
  catch `java.lang.Throwable` @[L49f6f0..L49f71e] goto L49f8b0;
  catch `java.lang.Throwable` @[L49f720..L49f8ac] goto L49f8b0;
}
procedure `java.nio.channels.SeekableByteChannel` `truncate`(`com.google.crypto.tink.subtle.o` v0 @kind this, `long` v1 ) @signature `Lcom/google/crypto/tink/subtle/o;.truncate:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;

  #L49f918.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L49f91c.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L49f922.  throw v1;
}
procedure `int` `write`(`com.google.crypto.tink.subtle.o` v0 @kind this, `java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/o;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;

  #L49f6c8.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L49f6cc.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L49f6d2.  throw v1;
}
