record `com.google.crypto.tink.subtle.PrfAesCmac` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.prf.Prf` @kind interface {
  `javax.crypto.SecretKey` `com.google.crypto.tink.subtle.PrfAesCmac.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.PrfAesCmac.b` @AccessFlag PRIVATE;
  `byte`[] `com.google.crypto.tink.subtle.PrfAesCmac.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.PrfAesCmac` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49cd2c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49cd32.  v0:= length @variable v3;
  #L49cd34.  call `validateAesKeySize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L49cd3a.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L49cd3e.  v1:= "AES" @kind object;
  #L49cd42.  call `<init>`(v0, v3, v1) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L49cd48.  v2.`com.google.crypto.tink.subtle.PrfAesCmac.a` @type ^`javax.crypto.SecretKey` := v0 @kind object;
  #L49cd4c.  call `a`(v2) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.a:()V` @kind direct;
  #L49cd52.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.PrfAesCmac` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49cd64.  call temp:= `b`() @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.b:()Ljavax/crypto/Cipher;` @kind static;
  #L49cd6a.  v0:= temp @kind object;
  #L49cd6c.  v1:= v3.`com.google.crypto.tink.subtle.PrfAesCmac.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L49cd70.  v2:= 1I;
  #L49cd72.  call `init`(v0, v2, v1) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L49cd78.  v1:= 16I;
  #L49cd7c.  v1:= new `byte`[v1];
  #L49cd80.  call temp:= `doFinal`(v0, v1) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L49cd86.  v0:= temp @kind object;
  #L49cd88.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L49cd8e.  v0:= temp @kind object;
  #L49cd90.  v3.`com.google.crypto.tink.subtle.PrfAesCmac.b` @type ^`byte`[] := v0 @kind object;
  #L49cd94.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L49cd9a.  v0:= temp @kind object;
  #L49cd9c.  v3.`com.google.crypto.tink.subtle.PrfAesCmac.c` @type ^`byte`[] := v0 @kind object;
  #L49cda0.  return @kind void;
}
procedure `javax.crypto.Cipher` `b`() @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.b:()Ljavax/crypto/Cipher;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L49cd04.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49cd08.  v1:= "AES/ECB/NoPadding" @kind object;
  #L49cd0c.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49cd12.  v0:= temp @kind object;
  #L49cd14.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L49cd18.  return v0 @kind object;
}
procedure `byte`[] `compute`(`com.google.crypto.tink.subtle.PrfAesCmac` v9 @kind this, `byte`[] v10 @kind object, `int` v11 ) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49cc18.  v0:= 16I;
  #L49cc1c.  if v11 > v0 then goto L49cce4;
  #L49cc20.  call temp:= `b`() @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.b:()Ljavax/crypto/Cipher;` @kind static;
  #L49cc26.  v1:= temp @kind object;
  #L49cc28.  v2:= v9.`com.google.crypto.tink.subtle.PrfAesCmac.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L49cc2c.  v3:= 1I;
  #L49cc2e.  call `init`(v1, v3, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L49cc34.  v2:= length @variable v10;
  #L49cc36.  v4:= (`double`) v2 @kind i2d;
  #L49cc38.  v6:= 16.0D;
  #L49cc3c.  v4:= v4 / v6 @kind double;
  #L49cc3e.  call temp:= `ceil`(v4) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L49cc44.  v4:= temp @kind wide;
  #L49cc46.  v2:= (`int`) v4 @kind d2i;
  #L49cc48.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L49cc4e.  v2:= temp;
  #L49cc50.  v4:= v2 * 16;
  #L49cc54.  v5:= length @variable v10;
  #L49cc56.  v6:= 0I;
  #L49cc58.  if v4 != v5 then goto L49cc60;
  #L49cc5c.  v4:= 1I;
  #L49cc5e.  goto L49cc62;
  #L49cc60.  v4:= 0I;
  #L49cc62.  if v4 == 0 then goto L49cc7c;
  #L49cc66.  v4:= v2 + -1;
  #L49cc6a.  v4:= v4 * 16;
  #L49cc6e.  v5:= v9.`com.google.crypto.tink.subtle.PrfAesCmac.b` @type ^`byte`[] @kind object;
  #L49cc72.  call temp:= `xor`(v10, v4, v5, v6, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @kind static;
  #L49cc78.  v4:= temp @kind object;
  #L49cc7a.  goto L49cca2;
  #L49cc7c.  v4:= v2 + -1;
  #L49cc80.  v4:= v4 * 16;
  #L49cc84.  v5:= length @variable v10;
  #L49cc86.  call temp:= `copyOfRange`(v10, v4, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L49cc8c.  v4:= temp @kind object;
  #L49cc8e.  call temp:= `a`(v4) @signature `Lcom/google/crypto/tink/subtle/a;.a:([B)[B` @kind static;
  #L49cc94.  v4:= temp @kind object;
  #L49cc96.  v5:= v9.`com.google.crypto.tink.subtle.PrfAesCmac.c` @type ^`byte`[] @kind object;
  #L49cc9a.  call temp:= `xor`(v4, v5) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L49cca0.  v4:= temp @kind object;
  #L49cca2.  v5:= new `byte`[v0];
  #L49cca6.  v7:= 0I;
  #L49cca8.  v8:= v2 + -1;
  #L49ccac.  if v7 >= v8 then goto L49ccca;
  #L49ccb0.  v8:= v7 * 16;
  #L49ccb4.  call temp:= `xor`(v5, v6, v10, v8, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @kind static;
  #L49ccba.  v5:= temp @kind object;
  #L49ccbc.  call temp:= `doFinal`(v1, v5) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L49ccc2.  v5:= temp @kind object;
  #L49ccc4.  v7:= v7 + 1;
  #L49ccc8.  goto L49cca8;
  #L49ccca.  call temp:= `xor`(v4, v5) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L49ccd0.  v10:= temp @kind object;
  #L49ccd2.  call temp:= `doFinal`(v1, v10) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L49ccd8.  v10:= temp @kind object;
  #L49ccda.  call temp:= `copyOf`(v10, v11) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L49cce0.  v10:= temp @kind object;
  #L49cce2.  return v10 @kind object;
  #L49cce4.  v10:= new `java.security.InvalidAlgorithmParameterException`;
  #L49cce8.  v11:= "outputLength too large, max is 16 bytes" @kind object;
  #L49ccec.  call `<init>`(v10, v11) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ccf2.  throw v10;
}
