record `com.google.crypto.tink.subtle.RsaSsaPssSignJce` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PublicKeySign` @kind interface {
  `java.security.interfaces.RSAPrivateCrtKey` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.a` @AccessFlag PRIVATE_FINAL;
  `java.security.interfaces.RSAPublicKey` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.d` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v3 @kind this, `java.security.interfaces.RSAPrivateCrtKey` v4 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v5 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v6 @kind object, `int` v7 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.<init>:(Ljava/security/interfaces/RSAPrivateCrtKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/Enums$HashType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L49dba8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49dbae.  call `validateSignatureHash`(v5) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L49dbb4.  call temp:= `getModulus`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L49dbba.  v0:= temp @kind object;
  #L49dbbc.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L49dbc2.  v0:= temp;
  #L49dbc4.  call `validateRsaModulusSize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @kind static;
  #L49dbca.  call temp:= `getPublicExponent`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L49dbd0.  v0:= temp @kind object;
  #L49dbd2.  call `validateRsaPublicExponent`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @kind static;
  #L49dbd8.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.a` @type ^`java.security.interfaces.RSAPrivateCrtKey` := v4 @kind object;
  #L49dbdc.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49dbe0.  v1:= "RSA" @kind object;
  #L49dbe4.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49dbea.  v0:= temp @kind object;
  #L49dbec.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L49dbf0.  v1:= new `java.security.spec.RSAPublicKeySpec`;
  #L49dbf4.  call temp:= `getModulus`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L49dbfa.  v2:= temp @kind object;
  #L49dbfc.  call temp:= `getPublicExponent`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L49dc02.  v4:= temp @kind object;
  #L49dc04.  call `<init>`(v1, v2, v4) @signature `Ljava/security/spec/RSAPublicKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L49dc0a.  call temp:= `generatePublic`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L49dc10.  v4:= temp @kind object;
  #L49dc12.  v4:= (`java.security.interfaces.RSAPublicKey`) v4 @kind object;
  #L49dc16.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @type ^`java.security.interfaces.RSAPublicKey` := v4 @kind object;
  #L49dc1a.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v5 @kind object;
  #L49dc1e.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.d` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v6 @kind object;
  #L49dc22.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int` := v7;
  #L49dc26.  return @kind void;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v18 @kind this, `byte`[] v19 @kind object, `int` v20 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.a:([BI)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L49d970.  v0:= v18 @kind object;
  #L49d974.  v1:= v20;
  #L49d978.  v2:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L49d97c.  call `validateSignatureHash`(v2) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L49d982.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.MESSAGE_DIGEST` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49d986.  v3:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L49d98a.  call temp:= `toDigestAlgo`(v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @kind static;
  #L49d990.  v3:= temp @kind object;
  #L49d992.  call temp:= `getInstance`(v2, v3) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49d998.  v2:= temp @kind object;
  #L49d99a.  v2:= (`java.security.MessageDigest`) v2 @kind object;
  #L49d99e.  v3:= v19 @kind object;
  #L49d9a2.  call temp:= `digest`(v2, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L49d9a8.  v3:= temp @kind object;
  #L49d9aa.  call temp:= `getDigestLength`(v2) @signature `Ljava/security/MessageDigest;.getDigestLength:()I` @kind virtual;
  #L49d9b0.  v4:= temp;
  #L49d9b2.  v5:= v1 + -1;
  #L49d9b6.  v6:= 8I;
  #L49d9ba.  v5:= v5 / v6 @kind int;
  #L49d9bc.  v7:= 1I;
  #L49d9be.  v5:= v5 + v7 @kind int;
  #L49d9c0.  v8:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int`;
  #L49d9c4.  v9:= v4 + v8 @kind int;
  #L49d9c8.  v9:= v9 + 2;
  #L49d9cc.  if v5 < v9 then goto L49daba;
  #L49d9d0.  call temp:= `randBytes`(v8) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L49d9d6.  v8:= temp @kind object;
  #L49d9d8.  v9:= v4 + 8;
  #L49d9dc.  v10:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int`;
  #L49d9e0.  v10:= v10 + v9 @kind int;
  #L49d9e2.  v10:= new `byte`[v10];
  #L49d9e6.  v11:= 0I;
  #L49d9e8.  call `arraycopy`(v3, v11, v10, v6, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49d9ee.  v3:= length @variable v8;
  #L49d9f0.  call `arraycopy`(v8, v11, v10, v9, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49d9f6.  call temp:= `digest`(v2, v10) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L49d9fc.  v2:= temp @kind object;
  #L49d9fe.  v3:= v5 - v4 @kind int;
  #L49da02.  v3:= v3 - v7 @kind int;
  #L49da04.  v6:= new `byte`[v3];
  #L49da08.  v9:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int`;
  #L49da0c.  v10:= v5 - v9 @kind int;
  #L49da10.  v10:= v10 - v4 @kind int;
  #L49da12.  v10:= v10 + -2;
  #L49da16.  v6[v10]:= v7 @kind byte;
  #L49da1a.  v9:= v5 - v9 @kind int;
  #L49da1e.  v9:= v9 - v4 @kind int;
  #L49da20.  v9:= v9 - v7 @kind int;
  #L49da22.  v10:= length @variable v8;
  #L49da24.  call `arraycopy`(v8, v11, v6, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49da2a.  v8:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.d` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L49da2e.  call temp:= `mgf1`(v2, v3, v8) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.mgf1:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @kind static;
  #L49da34.  v8:= temp @kind object;
  #L49da36.  v9:= new `byte`[v3];
  #L49da3a.  v10:= 0I;
  #L49da3c.  if v10 >= v3 then goto L49da56;
  #L49da40.  v12:= v6[v10] @kind byte;
  #L49da44.  v13:= v8[v10] @kind byte;
  #L49da48.  v12:= v12 ^~ v13 @kind int;
  #L49da4a.  v12:= (`byte`) v12 @kind i2b;
  #L49da4c.  v9[v10]:= v12 @kind byte;
  #L49da50.  v10:= v10 + 1;
  #L49da54.  goto L49da3c;
  #L49da56.  v6:= 0I;
  #L49da58.  v12:= (`long`) v6 @kind i2l;
  #L49da5a.  v14:= (`long`) v5 @kind i2l;
  #L49da5c.  v16:= 8L;
  #L49da60.  v14:= v14 * v16 @kind long;
  #L49da64.  v7:= (`long`) v1 @kind i2l;
  #L49da66.  v14:= v14 - v7 @kind long;
  #L49da68.  v7:= lcmp(v12, v14);
  #L49da6c.  if v7 >= 0 then goto L49da98;
  #L49da70.  v7:= v6 / 8;
  #L49da74.  v8:= v6 %% 8;
  #L49da78.  v8:= v8 - 7;
  #L49da7c.  v10:= v9[v7] @kind byte;
  #L49da80.  v12:= 1I;
  #L49da82.  v8:= v12 ^< v8 @kind int;
  #L49da86.  v8:= ~v8 @kind int;
  #L49da88.  v8:= v8 ^& v10 @kind int;
  #L49da8a.  v8:= (`byte`) v8 @kind i2b;
  #L49da8c.  v9[v7]:= v8 @kind byte;
  #L49da90.  v6:= v6 + 1;
  #L49da94.  v7:= 1I;
  #L49da96.  goto L49da58;
  #L49da98.  v4:= v4 + v3 @kind int;
  #L49da9a.  v1:= v4 + 1;
  #L49da9e.  v1:= new `byte`[v1];
  #L49daa2.  call `arraycopy`(v9, v11, v1, v11, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49daa8.  v5:= length @variable v2;
  #L49daaa.  call `arraycopy`(v2, v11, v1, v3, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49dab0.  v2:= -68I;
  #L49dab4.  v1[v4]:= v2 @kind byte;
  #L49dab8.  return v1 @kind object;
  #L49daba.  v1:= new `java.security.GeneralSecurityException`;
  #L49dabe.  v2:= "encoding error" @kind object;
  #L49dac2.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49dac8.  throw v1;
}
procedure `byte`[] `b`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v4 @kind this, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.b:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49dadc.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49dae0.  v1:= "RSA/ECB/NOPADDING" @kind object;
  #L49dae4.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49daea.  v0:= temp @kind object;
  #L49daec.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L49daf0.  v2:= v4.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.a` @type ^`java.security.interfaces.RSAPrivateCrtKey` @kind object;
  #L49daf4.  v3:= 2I;
  #L49daf6.  call `init`(v0, v3, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L49dafc.  call temp:= `doFinal`(v0, v5) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L49db02.  v0:= temp @kind object;
  #L49db04.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L49db08.  call temp:= `getInstance`(v2, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L49db0e.  v1:= temp @kind object;
  #L49db10.  v1:= (`javax.crypto.Cipher`) v1 @kind object;
  #L49db14.  v2:= v4.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L49db18.  v3:= 1I;
  #L49db1a.  call `init`(v1, v3, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L49db20.  call temp:= `doFinal`(v1, v0) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L49db26.  v1:= temp @kind object;
  #L49db28.  v2:= new `java.math.BigInteger`;
  #L49db2c.  call `<init>`(v2, v3, v5) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L49db32.  v5:= new `java.math.BigInteger`;
  #L49db36.  call `<init>`(v5, v3, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L49db3c.  call temp:= `equals`(v2, v5) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L49db42.  v5:= temp;
  #L49db44.  if v5 == 0 then goto L49db4a;
  #L49db48.  return v0 @kind object;
  #L49db4a.  v5:= new `java.lang.RuntimeException`;
  #L49db4e.  v0:= "Security bug: RSA signature computation error" @kind object;
  #L49db52.  call `<init>`(v5, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49db58.  throw v5;
}
procedure `byte`[] `sign`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.sign:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49db6c.  v0:= v1.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L49db70.  call temp:= `getModulus`(v0) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L49db76.  v0:= temp @kind object;
  #L49db78.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L49db7e.  v0:= temp;
  #L49db80.  v0:= v0 + -1;
  #L49db84.  call temp:= `a`(v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.a:([BI)[B` @kind direct;
  #L49db8a.  v2:= temp @kind object;
  #L49db8c.  call temp:= `b`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.b:([B)[B` @kind direct;
  #L49db92.  v2:= temp @kind object;
  #L49db94.  return v2 @kind object;
}
