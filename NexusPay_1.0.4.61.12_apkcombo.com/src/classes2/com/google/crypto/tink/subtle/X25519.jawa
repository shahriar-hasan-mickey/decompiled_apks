record `com.google.crypto.tink.subtle.X25519` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.X25519` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/X25519;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0480.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0486.  return @kind void;
}
procedure `byte`[] `computeSharedSecret`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/X25519;.computeSharedSecret:([B[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a0370.  v0:= length @variable v3;
  #L4a0372.  v1:= 32I;
  #L4a0376.  if v0 != v1 then goto L4a03ca;
  #L4a037a.  v0:= 11I;
  #L4a037e.  v0:= new `long`[v0];
  #L4a0382.  call temp:= `copyOf`(v3, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L4a0388.  v3:= temp @kind object;
  #L4a038a.  v1:= 0I;
  #L4a038c.  v2:= v3[v1] @kind byte;
  #L4a0390.  v2:= v2 ^& 248;
  #L4a0394.  v2:= (`byte`) v2 @kind i2b;
  #L4a0396.  v3[v1]:= v2 @kind byte;
  #L4a039a.  v1:= 31I;
  #L4a039e.  v2:= v3[v1] @kind byte;
  #L4a03a2.  v2:= v2 ^& 127;
  #L4a03a6.  v2:= (`byte`) v2 @kind i2b;
  #L4a03a8.  v3[v1]:= v2 @kind byte;
  #L4a03ac.  v2:= v3[v1] @kind byte;
  #L4a03b0.  v2:= v2 ^| 64;
  #L4a03b4.  v2:= (`byte`) v2 @kind i2b;
  #L4a03b6.  v3[v1]:= v2 @kind byte;
  #L4a03ba.  call `b`(v0, v3, v4) @signature `Lcom/google/crypto/tink/subtle/e;.b:([J[B[B)V` @kind static;
  #L4a03c0.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/subtle/h;.a:([J)[B` @kind static;
  #L4a03c6.  v3:= temp @kind object;
  #L4a03c8.  return v3 @kind object;
  #L4a03ca.  v3:= new `java.security.InvalidKeyException`;
  #L4a03ce.  v4:= "Private key must have 32 bytes." @kind object;
  #L4a03d2.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a03d8.  throw v3;
}
procedure `byte`[] `generatePrivateKey`() @signature `Lcom/google/crypto/tink/subtle/X25519;.generatePrivateKey:()[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a03ec.  v0:= 32I;
  #L4a03f0.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L4a03f6.  v0:= temp @kind object;
  #L4a03f8.  v1:= 0I;
  #L4a03fa.  v2:= v0[v1] @kind byte;
  #L4a03fe.  v2:= v2 ^| 7;
  #L4a0402.  v2:= (`byte`) v2 @kind i2b;
  #L4a0404.  v0[v1]:= v2 @kind byte;
  #L4a0408.  v1:= 31I;
  #L4a040c.  v2:= v0[v1] @kind byte;
  #L4a0410.  v2:= v2 ^& 63;
  #L4a0414.  v2:= (`byte`) v2 @kind i2b;
  #L4a0416.  v0[v1]:= v2 @kind byte;
  #L4a041a.  v2:= v0[v1] @kind byte;
  #L4a041e.  v2:= v2 ^| 128;
  #L4a0422.  v2:= (`byte`) v2 @kind i2b;
  #L4a0424.  v0[v1]:= v2 @kind byte;
  #L4a0428.  return v0 @kind object;
}
procedure `byte`[] `publicFromPrivate`(`byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/X25519;.publicFromPrivate:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a043c.  v0:= length @variable v3;
  #L4a043e.  v1:= 32I;
  #L4a0442.  if v0 != v1 then goto L4a045e;
  #L4a0446.  v0:= new `byte`[v1];
  #L4a044a.  v1:= 0I;
  #L4a044c.  v2:= 9I;
  #L4a0450.  v0[v1]:= v2 @kind byte;
  #L4a0454.  call temp:= `computeSharedSecret`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/X25519;.computeSharedSecret:([B[B)[B` @kind static;
  #L4a045a.  v3:= temp @kind object;
  #L4a045c.  return v3 @kind object;
  #L4a045e.  v3:= new `java.security.InvalidKeyException`;
  #L4a0462.  v0:= "Private key must have 32 bytes." @kind object;
  #L4a0466.  call `<init>`(v3, v0) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a046c.  throw v3;
}
