record `com.google.crypto.tink.subtle.c` @kind class @AccessFlag ABSTRACT extends `com.google.crypto.tink.subtle.IndCpaCipher` @kind interface {
  `int`[] `com.google.crypto.tink.subtle.c.a` @AccessFlag ;
  `int` `com.google.crypto.tink.subtle.c.b` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@com.google.crypto.tink.subtle.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L493b18.  v0:= 16I;
  #L493b1c.  v0:= new `byte`[v0];
  #L493b20.  goto L493b34;
  #L493b26.  call temp:= `k`(v0) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @kind static;
  #L493b2c.  v0:= temp @kind object;
  #L493b2e.  `@@com.google.crypto.tink.subtle.c.c` @type ^`int`[] := v0 @kind object;
  #L493b32.  return @kind void;
  #L493b34.  v0:= (101I, 120I, 112I, 97I, 110I, 100I, 32I, 51I, 50I, 45I, 98I, 121I, 116I, 101I, 32I, 107I) @kind object;
  #L493b4b.  goto L493b26;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.c` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/c;.<init>:([BI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L493b5c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L493b62.  v0:= length @variable v3;
  #L493b64.  v1:= 32I;
  #L493b68.  if v0 != v1 then goto L493b7e;
  #L493b6c.  call temp:= `k`(v3) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @kind static;
  #L493b72.  v3:= temp @kind object;
  #L493b74.  v2.`com.google.crypto.tink.subtle.c.a` @type ^`int`[] := v3 @kind object;
  #L493b78.  v2.`com.google.crypto.tink.subtle.c.b` @type ^`int` := v4;
  #L493b7c.  return @kind void;
  #L493b7e.  v3:= new `java.security.InvalidKeyException`;
  #L493b82.  v4:= "The key length in bytes must be 32." @kind object;
  #L493b86.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493b8c.  throw v3;
}
procedure `void` `f`(`com.google.crypto.tink.subtle.c` v6 @kind this, `byte`[] v7 @kind object, `java.nio.ByteBuffer` v8 @kind object, `java.nio.ByteBuffer` v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.f:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L493c00.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L493c06.  v0:= temp;
  #L493c08.  v1:= v0 / 64;
  #L493c0c.  v1:= v1 + 1;
  #L493c10.  v2:= 0I;
  #L493c12.  if v2 >= v1 then goto L493c48;
  #L493c16.  v3:= v6.`com.google.crypto.tink.subtle.c.b` @type ^`int`;
  #L493c1a.  v3:= v3 + v2 @kind int;
  #L493c1c.  call temp:= `a`(v6, v7, v3) @signature `Lcom/google/crypto/tink/subtle/c;.a:([BI)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493c22.  v3:= temp @kind object;
  #L493c24.  v4:= v1 + -1;
  #L493c28.  v5:= 64I;
  #L493c2c.  if v2 != v4 then goto L493c3c;
  #L493c30.  v4:= v0 %% 64;
  #L493c34.  call `xor`(v8, v9, v3, v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @kind static;
  #L493c3a.  goto L493c42;
  #L493c3c.  call `xor`(v8, v9, v3, v5) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @kind static;
  #L493c42.  v2:= v2 + 1;
  #L493c46.  goto L493c12;
  #L493c48.  return @kind void;
}
procedure `void` `g`(`int`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L493c5c.  v0:= v2[v3];
  #L493c60.  v1:= v2[v4];
  #L493c64.  v0:= v0 + v1 @kind int;
  #L493c66.  v2[v3]:= v0;
  #L493c6a.  v0:= v2[v6];
  #L493c6e.  v1:= v2[v3];
  #L493c72.  v0:= v0 ^~ v1 @kind int;
  #L493c74.  v1:= 16I;
  #L493c78.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L493c7e.  v0:= temp;
  #L493c80.  v2[v6]:= v0;
  #L493c84.  v0:= v2[v5];
  #L493c88.  v1:= v2[v6];
  #L493c8c.  v0:= v0 + v1 @kind int;
  #L493c8e.  v2[v5]:= v0;
  #L493c92.  v0:= v2[v4];
  #L493c96.  v1:= v2[v5];
  #L493c9a.  v0:= v0 ^~ v1 @kind int;
  #L493c9c.  v1:= 12I;
  #L493ca0.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L493ca6.  v0:= temp;
  #L493ca8.  v2[v4]:= v0;
  #L493cac.  v0:= v2[v3];
  #L493cb0.  v1:= v2[v4];
  #L493cb4.  v0:= v0 + v1 @kind int;
  #L493cb6.  v2[v3]:= v0;
  #L493cba.  v0:= v2[v6];
  #L493cbe.  v3:= v2[v3];
  #L493cc2.  v3:= v3 ^~ v0 @kind int;
  #L493cc4.  v0:= 8I;
  #L493cc8.  call temp:= `h`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L493cce.  v3:= temp;
  #L493cd0.  v2[v6]:= v3;
  #L493cd4.  v3:= v2[v5];
  #L493cd8.  v6:= v2[v6];
  #L493cdc.  v3:= v3 + v6 @kind int;
  #L493cde.  v2[v5]:= v3;
  #L493ce2.  v3:= v2[v4];
  #L493ce6.  v5:= v2[v5];
  #L493cea.  v3:= v3 ^~ v5 @kind int;
  #L493cec.  v5:= 7I;
  #L493cee.  call temp:= `h`(v3, v5) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L493cf4.  v3:= temp;
  #L493cf6.  v2[v4]:= v3;
  #L493cfa.  return @kind void;
}
procedure `int` `h`(`int` v1 , `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L493a40.  v0:= v1 ^< v2 @kind int;
  #L493a44.  v2:= -v2 @kind int;
  #L493a46.  v1:= v1 ^>> v2 @kind int;
  #L493a48.  v1:= v1 ^| v0 @kind int;
  #L493a4a.  return v1;
}
procedure `void` `i`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.i:([I[I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L493d0c.  v0:= `@@com.google.crypto.tink.subtle.c.c` @type ^`int`[] @kind object;
  #L493d10.  v1:= length @variable v0;
  #L493d12.  v2:= 0I;
  #L493d14.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L493d1a.  v0:= `@@com.google.crypto.tink.subtle.c.c` @type ^`int`[] @kind object;
  #L493d1e.  v0:= length @variable v0;
  #L493d20.  v1:= 8I;
  #L493d24.  call `arraycopy`(v4, v2, v3, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L493d2a.  return @kind void;
}
procedure `void` `j`(`int`[] v16 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.j:([I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L493d3c.  v0:= v16 @kind object;
  #L493d40.  v1:= 0I;
  #L493d42.  v2:= 0I;
  #L493d44.  v3:= 10I;
  #L493d48.  if v2 >= v3 then goto L493db2;
  #L493d4c.  v4:= 4I;
  #L493d4e.  v5:= 8I;
  #L493d52.  v6:= 12I;
  #L493d56.  call `g`(v0, v1, v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493d5c.  v7:= 1I;
  #L493d5e.  v8:= 5I;
  #L493d60.  v9:= 9I;
  #L493d64.  v10:= 13I;
  #L493d68.  call `g`(v0, v7, v8, v9, v10) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493d6e.  v11:= 2I;
  #L493d70.  v12:= 6I;
  #L493d72.  v13:= 14I;
  #L493d76.  call `g`(v0, v11, v12, v3, v13) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493d7c.  v14:= 3I;
  #L493d7e.  v15:= 7I;
  #L493d80.  v4:= 11I;
  #L493d84.  v9:= 15I;
  #L493d88.  call `g`(v0, v14, v15, v4, v9) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493d8e.  call `g`(v0, v1, v8, v3, v9) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493d94.  call `g`(v0, v7, v12, v4, v6) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493d9a.  call `g`(v0, v11, v15, v5, v10) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493da0.  v3:= 9I;
  #L493da4.  v4:= 4I;
  #L493da6.  call `g`(v0, v14, v4, v3, v13) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L493dac.  v2:= v2 + 1;
  #L493db0.  goto L493d44;
  #L493db2.  return @kind void;
}
procedure `int`[] `k`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @AccessFlag STATIC {
    temp;
    v0;

  #L493a5c.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L493a62.  v1:= temp @kind object;
  #L493a64.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L493a68.  call temp:= `order`(v1, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493a6e.  v1:= temp @kind object;
  #L493a70.  call temp:= `asIntBuffer`(v1) @signature `Ljava/nio/ByteBuffer;.asIntBuffer:()Ljava/nio/IntBuffer;` @kind virtual;
  #L493a76.  v1:= temp @kind object;
  #L493a78.  call temp:= `remaining`(v1) @signature `Ljava/nio/IntBuffer;.remaining:()I` @kind virtual;
  #L493a7e.  v0:= temp;
  #L493a80.  v0:= new `int`[v0];
  #L493a84.  call temp:= `get`(v1, v0) @signature `Ljava/nio/IntBuffer;.get:([I)Ljava/nio/IntBuffer;` @kind virtual;
  #L493a8a.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `a`(`com.google.crypto.tink.subtle.c` v4 @kind this, `byte`[] v5 @kind object, `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/c;.a:([BI)Ljava/nio/ByteBuffer;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L493a9c.  call temp:= `k`(v5) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @kind static;
  #L493aa2.  v5:= temp @kind object;
  #L493aa4.  call temp:= `b`(v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/c;.b:([II)[I` @kind virtual;
  #L493aaa.  v5:= temp @kind object;
  #L493aac.  call temp:= `clone`(v5) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L493ab2.  v6:= temp @kind object;
  #L493ab4.  v6:= (`int`[]) v6 @kind object;
  #L493ab8.  call `j`(v6) @signature `Lcom/google/crypto/tink/subtle/c;.j:([I)V` @kind static;
  #L493abe.  v0:= 0I;
  #L493ac0.  v1:= 0I;
  #L493ac2.  v2:= length @variable v5;
  #L493ac4.  if v1 >= v2 then goto L493adc;
  #L493ac8.  v2:= v5[v1];
  #L493acc.  v3:= v6[v1];
  #L493ad0.  v2:= v2 + v3 @kind int;
  #L493ad2.  v5[v1]:= v2;
  #L493ad6.  v1:= v1 + 1;
  #L493ada.  goto L493ac2;
  #L493adc.  v6:= 64I;
  #L493ae0.  call temp:= `allocate`(v6) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L493ae6.  v6:= temp @kind object;
  #L493ae8.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L493aec.  call temp:= `order`(v6, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493af2.  v6:= temp @kind object;
  #L493af4.  call temp:= `asIntBuffer`(v6) @signature `Ljava/nio/ByteBuffer;.asIntBuffer:()Ljava/nio/IntBuffer;` @kind virtual;
  #L493afa.  v1:= temp @kind object;
  #L493afc.  v2:= 16I;
  #L493b00.  call temp:= `put`(v1, v5, v0, v2) @signature `Ljava/nio/IntBuffer;.put:([III)Ljava/nio/IntBuffer;` @kind virtual;
  #L493b06.  return v6 @kind object;
}
procedure `int`[] `b`(`int`[] v0 @kind object, `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/c;.b:([II)[I` @AccessFlag ABSTRACT {

  # return;
}
procedure `byte`[] `c`(`com.google.crypto.tink.subtle.c` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.c:(Ljava/nio/ByteBuffer;)[B` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49397c.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L493982.  v0:= temp;
  #L493984.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L49398a.  v1:= temp;
  #L49398c.  if v0 < v1 then goto L4939c2;
  #L493990.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493996.  v0:= temp;
  #L493998.  v0:= new `byte`[v0];
  #L49399c.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4939a2.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4939a8.  v1:= temp;
  #L4939aa.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4939b0.  v1:= temp @kind object;
  #L4939b2.  call `f`(v2, v0, v1, v3) @signature `Lcom/google/crypto/tink/subtle/c;.f:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4939b8.  call temp:= `array`(v1) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4939be.  v3:= temp @kind object;
  #L4939c0.  return v3 @kind object;
  #L4939c2.  v3:= new `java.security.GeneralSecurityException`;
  #L4939c6.  v0:= "ciphertext too short" @kind object;
  #L4939ca.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4939d0.  throw v3;
}
procedure `void` `d`(`com.google.crypto.tink.subtle.c` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.d:(Ljava/nio/ByteBuffer;[B)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L493ba0.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L493ba6.  v0:= temp;
  #L493ba8.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493bae.  v1:= temp;
  #L493bb0.  v0:= v0 - v1 @kind int;
  #L493bb2.  v1:= length @variable v4;
  #L493bb4.  if v0 < v1 then goto L493bde;
  #L493bb8.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493bbe.  v0:= temp;
  #L493bc0.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L493bc6.  v0:= temp @kind object;
  #L493bc8.  call temp:= `put`(v3, v0) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L493bce.  call temp:= `wrap`(v4) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L493bd4.  v4:= temp @kind object;
  #L493bd6.  call `f`(v2, v0, v3, v4) @signature `Lcom/google/crypto/tink/subtle/c;.f:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @kind direct;
  #L493bdc.  return @kind void;
  #L493bde.  v3:= new `java.lang.IllegalArgumentException`;
  #L493be2.  v4:= "Given ByteBuffer output is too small" @kind object;
  #L493be6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493bec.  throw v3;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.subtle.c` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.decrypt:([B)[B` @AccessFlag PUBLIC {
    temp;

  #L493958.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L49395e.  v1:= temp @kind object;
  #L493960.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/c;.c:(Ljava/nio/ByteBuffer;)[B` @kind virtual;
  #L493966.  v1:= temp @kind object;
  #L493968.  return v1 @kind object;
}
procedure `int` `e`() @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @AccessFlag ABSTRACT {

  # return;
}
procedure `byte`[] `encrypt`(`com.google.crypto.tink.subtle.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.encrypt:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4939e4.  v0:= length @variable v4;
  #L4939e6.  call temp:= `e`(v3) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L4939ec.  v1:= temp;
  #L4939ee.  v2:= 2147483647I;
  #L4939f4.  v2:= v2 - v1 @kind int;
  #L4939f6.  if v0 > v2 then goto L493a1e;
  #L4939fa.  call temp:= `e`(v3) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L493a00.  v0:= temp;
  #L493a02.  v1:= length @variable v4;
  #L493a04.  v0:= v0 + v1 @kind int;
  #L493a06.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L493a0c.  v0:= temp @kind object;
  #L493a0e.  call `d`(v3, v0, v4) @signature `Lcom/google/crypto/tink/subtle/c;.d:(Ljava/nio/ByteBuffer;[B)V` @kind virtual;
  #L493a14.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L493a1a.  v4:= temp @kind object;
  #L493a1c.  return v4 @kind object;
  #L493a1e.  v4:= new `java.security.GeneralSecurityException`;
  #L493a22.  v0:= "plaintext too long" @kind object;
  #L493a26.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493a2c.  throw v4;
}
