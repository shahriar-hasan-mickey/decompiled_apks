record `com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.HybridDecrypt` @kind interface {
  `java.security.interfaces.ECPrivateKey` `com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.EciesHkdfRecipientKem` `com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.c` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.d` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` `com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.e` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.EciesAeadHkdfDemHelper` `com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.f` @AccessFlag PRIVATE_FINAL;
}
global `byte`[] `@@com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/EciesAeadHkdfHybridDecrypt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L494ac0.  v0:= 0I;
  #L494ac2.  v0:= new `byte`[v0];
  #L494ac6.  `@@com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.g` @type ^`byte`[] := v0 @kind object;
  #L494aca.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt` v1 @kind this, `java.security.interfaces.ECPrivateKey` v2 @kind object, `byte`[] v3 @kind object, `java.lang.String` v4 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v5 @kind object, `com.google.crypto.tink.subtle.EciesAeadHkdfDemHelper` v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/EciesAeadHkdfHybridDecrypt;.<init>:(Ljava/security/interfaces/ECPrivateKey;[BLjava/lang/String;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Lcom/google/crypto/tink/subtle/EciesAeadHkdfDemHelper;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L494adc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L494ae2.  v1.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.a` @type ^`java.security.interfaces.ECPrivateKey` := v2 @kind object;
  #L494ae6.  v0:= new `com.google.crypto.tink.subtle.EciesHkdfRecipientKem`;
  #L494aea.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/EciesHkdfRecipientKem;.<init>:(Ljava/security/interfaces/ECPrivateKey;)V` @kind direct;
  #L494af0.  v1.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.b` @type ^`com.google.crypto.tink.subtle.EciesHkdfRecipientKem` := v0 @kind object;
  #L494af4.  v1.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.d` @type ^`byte`[] := v3 @kind object;
  #L494af8.  v1.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.c` @type ^`java.lang.String` := v4 @kind object;
  #L494afc.  v1.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.e` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` := v5 @kind object;
  #L494b00.  v1.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.f` @type ^`com.google.crypto.tink.subtle.EciesAeadHkdfDemHelper` := v6 @kind object;
  #L494b04.  return @kind void;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt` v9 @kind this, `byte`[] v10 @kind object, `byte`[] v11 @kind object) @signature `Lcom/google/crypto/tink/subtle/EciesAeadHkdfHybridDecrypt;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L494a24.  v0:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.a` @type ^`java.security.interfaces.ECPrivateKey` @kind object;
  #L494a28.  call temp:= `getParams`(v0) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L494a2e.  v0:= temp @kind object;
  #L494a30.  call temp:= `getCurve`(v0) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L494a36.  v0:= temp @kind object;
  #L494a38.  v1:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.e` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L494a3c.  call temp:= `encodingSizeInBytes`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.encodingSizeInBytes:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;)I` @kind static;
  #L494a42.  v0:= temp;
  #L494a44.  v1:= length @variable v10;
  #L494a46.  if v1 < v0 then goto L494a9e;
  #L494a4a.  v1:= 0I;
  #L494a4c.  call temp:= `copyOfRange`(v10, v1, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L494a52.  v3:= temp @kind object;
  #L494a54.  v2:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.b` @type ^`com.google.crypto.tink.subtle.EciesHkdfRecipientKem` @kind object;
  #L494a58.  v4:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.c` @type ^`java.lang.String` @kind object;
  #L494a5c.  v5:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.d` @type ^`byte`[] @kind object;
  #L494a60.  v1:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.f` @type ^`com.google.crypto.tink.subtle.EciesAeadHkdfDemHelper` @kind object;
  #L494a64.  call temp:= `getSymmetricKeySizeInBytes`(v1) @signature `Lcom/google/crypto/tink/subtle/EciesAeadHkdfDemHelper;.getSymmetricKeySizeInBytes:()I` @kind interface;
  #L494a6a.  v7:= temp;
  #L494a6c.  v8:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.e` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L494a70.  v6:= v11 @kind object;
  #L494a72.  call temp:= `generateKey`(v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/google/crypto/tink/subtle/EciesHkdfRecipientKem;.generateKey:([BLjava/lang/String;[B[BILcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;)[B` @kind virtual;
  #L494a78.  v11:= temp @kind object;
  #L494a7a.  v1:= v9.`com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.f` @type ^`com.google.crypto.tink.subtle.EciesAeadHkdfDemHelper` @kind object;
  #L494a7e.  call temp:= `getAead`(v1, v11) @signature `Lcom/google/crypto/tink/subtle/EciesAeadHkdfDemHelper;.getAead:([B)Lcom/google/crypto/tink/Aead;` @kind interface;
  #L494a84.  v11:= temp @kind object;
  #L494a86.  v1:= length @variable v10;
  #L494a88.  call temp:= `copyOfRange`(v10, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L494a8e.  v10:= temp @kind object;
  #L494a90.  v0:= `@@com.google.crypto.tink.subtle.EciesAeadHkdfHybridDecrypt.g` @type ^`byte`[] @kind object;
  #L494a94.  call temp:= `decrypt`(v11, v10, v0) @signature `Lcom/google/crypto/tink/Aead;.decrypt:([B[B)[B` @kind interface;
  #L494a9a.  v10:= temp @kind object;
  #L494a9c.  return v10 @kind object;
  #L494a9e.  v10:= new `java.security.GeneralSecurityException`;
  #L494aa2.  v11:= "ciphertext too short" @kind object;
  #L494aa6.  call `<init>`(v10, v11) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L494aac.  throw v10;
}
