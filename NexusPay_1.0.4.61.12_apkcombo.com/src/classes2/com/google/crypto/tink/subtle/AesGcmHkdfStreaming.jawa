record `com.google.crypto.tink.subtle.AesGcmHkdfStreaming` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.subtle.i` @kind class {
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.e` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v2 @kind this, `byte`[] v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 , `int` v7 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.<init>:([BLjava/lang/String;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L491bf4.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.<init>:()V` @kind direct;
  #L491bfa.  v0:= length @variable v3;
  #L491bfc.  v1:= 16I;
  #L491c00.  if v0 < v1 then goto L491c56;
  #L491c04.  v0:= length @variable v3;
  #L491c06.  if v0 < v5 then goto L491c56;
  #L491c0a.  call `validateAesKeySize`(v5) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L491c10.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @kind virtual;
  #L491c16.  v0:= temp;
  #L491c18.  v0:= v0 + v7 @kind int;
  #L491c1a.  v0:= v0 + v1 @kind int;
  #L491c1c.  if v6 <= v0 then goto L491c46;
  #L491c20.  v0:= length @variable v3;
  #L491c22.  call temp:= `copyOf`(v3, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L491c28.  v3:= temp @kind object;
  #L491c2a.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.f` @type ^`byte`[] := v3 @kind object;
  #L491c2e.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.e` @type ^`java.lang.String` := v4 @kind object;
  #L491c32.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int` := v5;
  #L491c36.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @type ^`int` := v6;
  #L491c3a.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @type ^`int` := v7;
  #L491c3e.  v6:= v6 - v1 @kind int;
  #L491c40.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @type ^`int` := v6;
  #L491c44.  return @kind void;
  #L491c46.  v3:= new `java.security.InvalidAlgorithmParameterException`;
  #L491c4a.  v4:= "ciphertextSegmentSize too small" @kind object;
  #L491c4e.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491c54.  throw v3;
  #L491c56.  v3:= new `java.security.InvalidAlgorithmParameterException`;
  #L491c5a.  v4:= new `java.lang.StringBuilder`;
  #L491c5e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L491c64.  v6:= "ikm too short, must be >= " @kind object;
  #L491c68.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L491c6e.  call temp:= `max`(v1, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L491c74.  v5:= temp;
  #L491c76.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L491c7c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L491c82.  v4:= temp @kind object;
  #L491c84.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491c8a.  throw v3;
}
procedure `javax.crypto.Cipher` `a`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.a:()Ljavax/crypto/Cipher;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L491aa4.  call temp:= `g`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.g:()Ljavax/crypto/Cipher;` @kind static;
  #L491aaa.  v0:= temp @kind object;
  #L491aac.  return v0 @kind object;
}
procedure `byte`[] `b`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.b:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L49187c.  call temp:= `k`(v0) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.k:()[B` @kind direct;
  #L491882.  v0:= temp @kind object;
  #L491884.  return v0 @kind object;
}
procedure `byte`[] `c`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.c:()[B` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L491898.  call temp:= `j`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.j:()[B` @kind static;
  #L49189e.  v0:= temp @kind object;
  #L4918a0.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `d`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind object, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.d:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;[B[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L491b58.  call temp:= `h`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.h:([B[B)Ljavax/crypto/spec/SecretKeySpec;` @kind direct;
  #L491b5e.  v0:= temp @kind object;
  #L491b60.  return v0 @kind object;
}
procedure `javax.crypto.spec.GCMParameterSpec` `e`(`byte`[] v0 @kind object, `long` v1 , `boolean` v3 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.e:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L491ae8.  call temp:= `i`(v0, v1, v3) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.i:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @kind static;
  #L491aee.  v0:= temp @kind object;
  #L491af0.  return v0 @kind object;
}
procedure `int` `f`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.f:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L491960.  v0:= v0.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L491964.  return v0;
}
procedure `javax.crypto.Cipher` `g`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.g:()Ljavax/crypto/Cipher;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L491ac0.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L491ac4.  v1:= "AES/GCM/NoPadding" @kind object;
  #L491ac8.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L491ace.  v0:= temp @kind object;
  #L491ad0.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L491ad4.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `h`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.h:([B[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L491b74.  v0:= v3.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.e` @type ^`java.lang.String` @kind object;
  #L491b78.  v1:= v3.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.f` @type ^`byte`[] @kind object;
  #L491b7c.  v2:= v3.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L491b80.  call temp:= `computeHkdf`(v0, v1, v4, v5, v2) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @kind static;
  #L491b86.  v4:= temp @kind object;
  #L491b88.  v5:= new `javax.crypto.spec.SecretKeySpec`;
  #L491b8c.  v0:= "AES" @kind object;
  #L491b90.  call `<init>`(v5, v4, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L491b96.  return v5 @kind object;
}
procedure `javax.crypto.spec.GCMParameterSpec` `i`(`byte`[] v2 @kind object, `long` v3 , `boolean` v5 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.i:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L491b04.  v0:= 12I;
  #L491b08.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L491b0e.  v0:= temp @kind object;
  #L491b10.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L491b14.  call temp:= `order`(v0, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L491b1a.  call temp:= `put`(v0, v2) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L491b20.  call `putAsUnsigedInt`(v0, v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.putAsUnsigedInt:(Ljava/nio/ByteBuffer;J)V` @kind static;
  #L491b26.  v2:= (`byte`) v5 @kind i2b;
  #L491b28.  call temp:= `put`(v0, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L491b2e.  v2:= new `javax.crypto.spec.GCMParameterSpec`;
  #L491b32.  v3:= 128I;
  #L491b36.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L491b3c.  v4:= temp @kind object;
  #L491b3e.  call `<init>`(v2, v3, v4) @signature `Ljavax/crypto/spec/GCMParameterSpec;.<init>:(I[B)V` @kind direct;
  #L491b44.  return v2 @kind object;
}
procedure `byte`[] `j`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.j:()[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4918b4.  v0:= 7I;
  #L4918b6.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L4918bc.  v0:= temp @kind object;
  #L4918be.  return v0 @kind object;
}
procedure `byte`[] `k`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.k:()[B` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4918d0.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L4918d4.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L4918da.  v0:= temp @kind object;
  #L4918dc.  return v0 @kind object;
}
procedure `long` `expectedCiphertextSize`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v5 @kind this, `long` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.expectedCiphertextSize:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491ba8.  call temp:= `getCiphertextOffset`(v5) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextOffset:()I` @kind virtual;
  #L491bae.  v0:= temp;
  #L491bb0.  v0:= (`long`) v0 @kind i2l;
  #L491bb2.  v6:= v6 + v0 @kind long;
  #L491bb4.  v0:= v5.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @type ^`int`;
  #L491bb8.  v1:= (`long`) v0 @kind i2l;
  #L491bba.  v1:= v6 / v1 @kind long;
  #L491bbe.  v3:= v5.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @type ^`int`;
  #L491bc2.  v3:= (`long`) v3 @kind i2l;
  #L491bc4.  v1:= v1 * v3 @kind long;
  #L491bc8.  v3:= (`long`) v0 @kind i2l;
  #L491bca.  v6:= v6 %% v3 @kind long;
  #L491bcc.  v3:= 0L;
  #L491bd0.  v0:= lcmp(v6, v3);
  #L491bd4.  if v0 <= 0 then goto L491be0;
  #L491bd8.  v3:= 16L;
  #L491bdc.  v6:= v6 + v3 @kind long;
  #L491bde.  v1:= v1 + v6 @kind long;
  #L491be0.  return v1 @kind wide;
}
procedure `int` `getCiphertextOffset`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491978.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @kind virtual;
  #L49197e.  v0:= temp;
  #L491980.  v1:= v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @type ^`int`;
  #L491984.  v0:= v0 + v1 @kind int;
  #L491986.  return v0;
}
procedure `int` `getCiphertextOverhead`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextOverhead:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491998.  v0:= 16I;
  #L49199c.  return v0;
}
procedure `int` `getCiphertextSegmentSize`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4919b0.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @type ^`int`;
  #L4919b4.  return v0;
}
procedure `int` `getFirstSegmentOffset`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getFirstSegmentOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4919c8.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @type ^`int`;
  #L4919cc.  return v0;
}
procedure `int` `getHeaderLength`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4919e0.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L4919e4.  v0:= v0 + 1;
  #L4919e8.  v0:= v0 + 7;
  #L4919ec.  return v0;
}
procedure `int` `getPlaintextSegmentSize`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getPlaintextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491a00.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @type ^`int`;
  #L491a04.  return v0;
}
procedure `java.nio.channels.ReadableByteChannel` `newDecryptingChannel`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.nio.channels.ReadableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L491a50.  call temp:= `newDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @kind super;
  #L491a56.  v1:= temp @kind object;
  #L491a58.  return v1 @kind object;
}
procedure `java.io.InputStream` `newDecryptingStream`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.io.InputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L491a18.  call temp:= `newDecryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @kind super;
  #L491a1e.  v1:= temp @kind object;
  #L491a20.  return v1 @kind object;
}
procedure `java.nio.channels.WritableByteChannel` `newEncryptingChannel`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.nio.channels.WritableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L491a88.  call temp:= `newEncryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @kind super;
  #L491a8e.  v1:= temp @kind object;
  #L491a90.  return v1 @kind object;
}
procedure `java.io.OutputStream` `newEncryptingStream`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.io.OutputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L491a34.  call temp:= `newEncryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @kind super;
  #L491a3a.  v1:= temp @kind object;
  #L491a3c.  return v1 @kind object;
}
procedure `java.nio.channels.SeekableByteChannel` `newSeekableDecryptingChannel`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.nio.channels.SeekableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L491a6c.  call temp:= `newSeekableDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @kind super;
  #L491a72.  v1:= temp @kind object;
  #L491a74.  return v1 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$a` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4918f0.  v0:= new `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$a`;
  #L4918f4.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$a;.<init>:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;)V` @kind direct;
  #L4918fa.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L491928.  call temp:= `newStreamSegmentDecrypter`(v1) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$a;` @kind virtual;
  #L49192e.  v0:= temp @kind object;
  #L491930.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49190c.  v0:= new `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b`;
  #L491910.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;.<init>:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;[B)V` @kind direct;
  #L491916.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentEncrypter` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L491944.  call temp:= `newStreamSegmentEncrypter`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;` @kind virtual;
  #L49194a.  v1:= temp @kind object;
  #L49194c.  return v1 @kind object;
}
