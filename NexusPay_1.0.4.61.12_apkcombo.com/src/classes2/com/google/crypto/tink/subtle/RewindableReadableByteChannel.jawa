record `com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind class @AccessFlag PUBLIC_FINAL extends `java.nio.channels.ReadableByteChannel` @kind interface {
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @AccessFlag FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @AccessFlag ;
  `boolean` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @AccessFlag ;
  `boolean` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v0 @kind this, `java.nio.channels.ReadableByteChannel` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.<init>:(Ljava/nio/channels/ReadableByteChannel;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49d448.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d44e.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` := v1 @kind object;
  #L49d452.  v1:= 0I;
  #L49d454.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L49d458.  v1:= 1I;
  #L49d45a.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` := v1 @kind boolean;
  #L49d45e.  v1:= 0I;
  #L49d460.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v1 @kind boolean;
  #L49d464.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v3 @kind this, `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L49d544.  @monitorenter v3
  #L49d546.  v0:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d54a.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L49d550.  v0:= temp;
  #L49d552.  if v0 >= v4 then goto L49d5a0;
  #L49d556.  v0:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d55a.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49d560.  v0:= temp;
  #L49d562.  v1:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d566.  call temp:= `capacity`(v1) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L49d56c.  v1:= temp;
  #L49d56e.  v1:= v1 * 2;
  #L49d572.  call temp:= `max`(v1, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L49d578.  v1:= temp;
  #L49d57a.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49d580.  v1:= temp @kind object;
  #L49d582.  v2:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d586.  call temp:= `rewind`(v2) @signature `Ljava/nio/ByteBuffer;.rewind:()Ljava/nio/Buffer;` @kind virtual;
  #L49d58c.  v2:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d590.  call temp:= `put`(v1, v2) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49d596.  call temp:= `position`(v1, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49d59c.  v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L49d5a0.  v0:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d5a4.  call temp:= `limit`(v0, v4) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49d5aa.  @monitorexit v3
  #L49d5ac.  return @kind void;
  #L49d5ae.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d5b0.  @monitorexit v3
  #L49d5b2.  throw v4;
  catch `java.lang.Throwable` @[L49d546..L49d5aa] goto L49d5ae;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d478.  @monitorenter v1
  #L49d47a.  v0:= 0I;
  #L49d47c.  v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` := v0 @kind boolean;
  #L49d480.  v0:= 1I;
  #L49d482.  v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v0 @kind boolean;
  #L49d486.  v0:= v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49d48a.  call `close`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.close:()V` @kind interface;
  #L49d490.  @monitorexit v1
  #L49d492.  return @kind void;
  #L49d494.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d496.  @monitorexit v1
  #L49d498.  throw v0;
  catch `java.lang.Throwable` @[L49d47c..L49d490] goto L49d494;
}
procedure `void` `disableRewinding`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.disableRewinding:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d4b8.  @monitorenter v1
  #L49d4ba.  v0:= 0I;
  #L49d4bc.  v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` := v0 @kind boolean;
  #L49d4c0.  @monitorexit v1
  #L49d4c2.  return @kind void;
  #L49d4c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d4c6.  @monitorexit v1
  #L49d4c8.  throw v0;
  catch `java.lang.Throwable` @[L49d4bc..L49d4c0] goto L49d4c4;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d228.  @monitorenter v1
  #L49d22a.  v0:= v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49d22e.  call temp:= `isOpen`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.isOpen:()Z` @kind interface;
  #L49d234.  v0:= temp;
  #L49d236.  @monitorexit v1
  #L49d238.  return v0;
  #L49d23a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d23c.  @monitorexit v1
  #L49d23e.  throw v0;
  catch `java.lang.Throwable` @[L49d22a..L49d236] goto L49d23a;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49d25c.  @monitorenter v6
  #L49d25e.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` @kind boolean;
  #L49d262.  if v0 == 0 then goto L49d276;
  #L49d266.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49d26a.  call temp:= `read`(v0, v7) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L49d270.  v7:= temp;
  #L49d272.  @monitorexit v6
  #L49d274.  return v7;
  #L49d276.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49d27c.  v0:= temp;
  #L49d27e.  if v0 != 0 then goto L49d288;
  #L49d282.  v7:= 0I;
  #L49d284.  @monitorexit v6
  #L49d286.  return v7;
  #L49d288.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d28c.  v2:= 1I;
  #L49d28e.  if v1 != 0 then goto L49d2e2;
  #L49d292.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L49d296.  if v1 != 0 then goto L49d2ae;
  #L49d29a.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v2 @kind boolean;
  #L49d29e.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49d2a2.  call temp:= `read`(v0, v7) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L49d2a8.  v7:= temp;
  #L49d2aa.  @monitorexit v6
  #L49d2ac.  return v7;
  #L49d2ae.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L49d2b4.  v0:= temp @kind object;
  #L49d2b6.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L49d2ba.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49d2be.  call temp:= `read`(v1, v0) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L49d2c4.  v0:= temp;
  #L49d2c6.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d2ca.  call temp:= `flip`(v1) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49d2d0.  if v0 <= 0 then goto L49d2de;
  #L49d2d4.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d2d8.  call temp:= `put`(v7, v1) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49d2de.  @monitorexit v6
  #L49d2e0.  return v0;
  #L49d2e2.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d2e6.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49d2ec.  v1:= temp;
  #L49d2ee.  v3:= 0I;
  #L49d2f0.  if v1 < v0 then goto L49d350;
  #L49d2f4.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d2f8.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49d2fe.  v1:= temp;
  #L49d300.  v4:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d304.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d308.  call temp:= `position`(v5) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49d30e.  v5:= temp;
  #L49d310.  v5:= v5 + v0 @kind int;
  #L49d312.  call temp:= `limit`(v4, v5) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49d318.  v4:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d31c.  call temp:= `put`(v7, v4) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49d322.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d326.  call temp:= `limit`(v7, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49d32c.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L49d330.  if v7 != 0 then goto L49d34c;
  #L49d334.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d338.  call temp:= `hasRemaining`(v7) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L49d33e.  v7:= temp;
  #L49d340.  if v7 != 0 then goto L49d34c;
  #L49d344.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L49d348.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v2 @kind boolean;
  #L49d34c.  @monitorexit v6
  #L49d34e.  return v0;
  #L49d350.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d354.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L49d35a.  v1:= temp;
  #L49d35c.  v0:= v0 - v1 @kind int;
  #L49d35e.  v4:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d362.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49d368.  v4:= temp;
  #L49d36a.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d36e.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L49d374.  v5:= temp;
  #L49d376.  v0:= v0 + v5 @kind int;
  #L49d378.  call `a`(v6, v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.a:(I)V` @kind direct;
  #L49d37e.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d382.  call temp:= `position`(v0, v5) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49d388.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L49d38c.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d390.  call temp:= `read`(v0, v5) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L49d396.  v0:= temp;
  #L49d398.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d39c.  call temp:= `flip`(v5) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L49d3a2.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d3a6.  call temp:= `position`(v5, v4) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49d3ac.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d3b0.  call temp:= `put`(v7, v5) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L49d3b6.  if v1 != 0 then goto L49d3c4;
  #L49d3ba.  if v0 >= 0 then goto L49d3c4;
  #L49d3be.  v7:= -1I;
  #L49d3c0.  @monitorexit v6
  #L49d3c2.  return v7;
  #L49d3c4.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d3c8.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L49d3ce.  v7:= temp;
  #L49d3d0.  v7:= v7 - v4 @kind int;
  #L49d3d2.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L49d3d6.  if v0 != 0 then goto L49d3f2;
  #L49d3da.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d3de.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L49d3e4.  v0:= temp;
  #L49d3e6.  if v0 != 0 then goto L49d3f2;
  #L49d3ea.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L49d3ee.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v2 @kind boolean;
  #L49d3f2.  @monitorexit v6
  #L49d3f4.  return v7;
  #L49d3f6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d3f8.  @monitorexit v6
  #L49d3fa.  throw v7;
  catch `java.lang.Throwable` @[L49d25e..L49d272] goto L49d3f6;
  catch `java.lang.Throwable` @[L49d276..L49d27e] goto L49d3f6;
  catch `java.lang.Throwable` @[L49d288..L49d2aa] goto L49d3f6;
  catch `java.lang.Throwable` @[L49d2ae..L49d2de] goto L49d3f6;
  catch `java.lang.Throwable` @[L49d2e2..L49d34c] goto L49d3f6;
  catch `java.lang.Throwable` @[L49d350..L49d3b6] goto L49d3f6;
  catch `java.lang.Throwable` @[L49d3c4..L49d3f2] goto L49d3f6;
}
procedure `void` `rewind`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.rewind:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49d4e8.  @monitorenter v2
  #L49d4ea.  v0:= v2.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L49d4ee.  if v0 == 0 then goto L49d50a;
  #L49d4f2.  v0:= v2.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d4f6.  if v0 == 0 then goto L49d506;
  #L49d4fa.  v0:= v2.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L49d4fe.  v1:= 0I;
  #L49d500.  call temp:= `position`(v0, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L49d506.  @monitorexit v2
  #L49d508.  return @kind void;
  #L49d50a.  v0:= new `java.io.IOException`;
  #L49d50e.  v1:= "Cannot rewind anymore." @kind object;
  #L49d512.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49d518.  throw v0;
  #L49d51a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d51c.  @monitorexit v2
  #L49d51e.  throw v0;
  catch `java.lang.Throwable` @[L49d4ea..L49d506] goto L49d51a;
  catch `java.lang.Throwable` @[L49d50a..L49d51a] goto L49d51a;
}
