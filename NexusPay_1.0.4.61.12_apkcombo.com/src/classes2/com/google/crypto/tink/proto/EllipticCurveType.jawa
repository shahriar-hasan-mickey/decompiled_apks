record `com.google.crypto.tink.proto.EllipticCurveType` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `com.google.crypto.tink.shaded.protobuf.Internal$EnumLite` @kind interface {
  `int` `com.google.crypto.tink.proto.EllipticCurveType.value` @AccessFlag PRIVATE_FINAL;
}
global `com.google.crypto.tink.proto.EllipticCurveType`[] `@@com.google.crypto.tink.proto.EllipticCurveType.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `com.google.crypto.tink.proto.EllipticCurveType` `@@com.google.crypto.tink.proto.EllipticCurveType.CURVE25519` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `int` `@@com.google.crypto.tink.proto.EllipticCurveType.CURVE25519_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.EllipticCurveType` `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `int` `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.EllipticCurveType` `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P384` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `int` `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P384_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.EllipticCurveType` `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P521` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `int` `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P521_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.EllipticCurveType` `@@com.google.crypto.tink.proto.EllipticCurveType.UNKNOWN_CURVE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `int` `@@com.google.crypto.tink.proto.EllipticCurveType.UNKNOWN_CURVE_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.EllipticCurveType` `@@com.google.crypto.tink.proto.EllipticCurveType.UNRECOGNIZED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.google.crypto.tink.shaded.protobuf.Internal$EnumLiteMap` `@@com.google.crypto.tink.proto.EllipticCurveType.internalValueMap` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L445cec.  v0:= new `com.google.crypto.tink.proto.EllipticCurveType`;
  #L445cf0.  v1:= "UNKNOWN_CURVE" @kind object;
  #L445cf4.  v2:= 0I;
  #L445cf6.  call `<init>`(v0, v1, v2, v2) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L445cfc.  `@@com.google.crypto.tink.proto.EllipticCurveType.UNKNOWN_CURVE` @type ^`com.google.crypto.tink.proto.EllipticCurveType` := v0 @kind object;
  #L445d00.  v0:= new `com.google.crypto.tink.proto.EllipticCurveType`;
  #L445d04.  v1:= "NIST_P256" @kind object;
  #L445d08.  v3:= 1I;
  #L445d0a.  v4:= 2I;
  #L445d0c.  call `<init>`(v0, v1, v3, v4) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L445d12.  `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` := v0 @kind object;
  #L445d16.  v0:= new `com.google.crypto.tink.proto.EllipticCurveType`;
  #L445d1a.  v1:= "NIST_P384" @kind object;
  #L445d1e.  v5:= 3I;
  #L445d20.  call `<init>`(v0, v1, v4, v5) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L445d26.  `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P384` @type ^`com.google.crypto.tink.proto.EllipticCurveType` := v0 @kind object;
  #L445d2a.  v0:= new `com.google.crypto.tink.proto.EllipticCurveType`;
  #L445d2e.  v1:= "NIST_P521" @kind object;
  #L445d32.  v6:= 4I;
  #L445d34.  call `<init>`(v0, v1, v5, v6) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L445d3a.  `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P521` @type ^`com.google.crypto.tink.proto.EllipticCurveType` := v0 @kind object;
  #L445d3e.  v0:= new `com.google.crypto.tink.proto.EllipticCurveType`;
  #L445d42.  v1:= "CURVE25519" @kind object;
  #L445d46.  v7:= 5I;
  #L445d48.  call `<init>`(v0, v1, v6, v7) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L445d4e.  `@@com.google.crypto.tink.proto.EllipticCurveType.CURVE25519` @type ^`com.google.crypto.tink.proto.EllipticCurveType` := v0 @kind object;
  #L445d52.  v0:= new `com.google.crypto.tink.proto.EllipticCurveType`;
  #L445d56.  v1:= "UNRECOGNIZED" @kind object;
  #L445d5a.  v8:= -1I;
  #L445d5c.  call `<init>`(v0, v1, v7, v8) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L445d62.  `@@com.google.crypto.tink.proto.EllipticCurveType.UNRECOGNIZED` @type ^`com.google.crypto.tink.proto.EllipticCurveType` := v0 @kind object;
  #L445d66.  v1:= 6I;
  #L445d68.  v1:= new `com.google.crypto.tink.proto.EllipticCurveType`[v1];
  #L445d6c.  v8:= `@@com.google.crypto.tink.proto.EllipticCurveType.UNKNOWN_CURVE` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445d70.  v1[v2]:= v8 @kind object;
  #L445d74.  v2:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445d78.  v1[v3]:= v2 @kind object;
  #L445d7c.  v2:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P384` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445d80.  v1[v4]:= v2 @kind object;
  #L445d84.  v2:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P521` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445d88.  v1[v5]:= v2 @kind object;
  #L445d8c.  v2:= `@@com.google.crypto.tink.proto.EllipticCurveType.CURVE25519` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445d90.  v1[v6]:= v2 @kind object;
  #L445d94.  v1[v7]:= v0 @kind object;
  #L445d98.  `@@com.google.crypto.tink.proto.EllipticCurveType.$VALUES` @type ^`com.google.crypto.tink.proto.EllipticCurveType`[] := v1 @kind object;
  #L445d9c.  v0:= new `com.google.crypto.tink.proto.EllipticCurveType$a`;
  #L445da0.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType$a;.<init>:()V` @kind direct;
  #L445da6.  `@@com.google.crypto.tink.proto.EllipticCurveType.internalValueMap` @type ^`com.google.crypto.tink.shaded.protobuf.Internal$EnumLiteMap` := v0 @kind object;
  #L445daa.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.proto.EllipticCurveType` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.<init>:(Ljava/lang/String;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L445dbc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L445dc2.  v0.`com.google.crypto.tink.proto.EllipticCurveType.value` @type ^`int` := v3;
  #L445dc6.  return @kind void;
}
procedure `com.google.crypto.tink.proto.EllipticCurveType` `forNumber`(`int` v1 ) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.forNumber:(I)Lcom/google/crypto/tink/proto/EllipticCurveType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445bd8.  if v1 == 0 then goto L445c10;
  #L445bdc.  v0:= 2I;
  #L445bde.  if v1 == v0 then goto L445c0a;
  #L445be2.  v0:= 3I;
  #L445be4.  if v1 == v0 then goto L445c04;
  #L445be8.  v0:= 4I;
  #L445bea.  if v1 == v0 then goto L445bfe;
  #L445bee.  v0:= 5I;
  #L445bf0.  if v1 == v0 then goto L445bf8;
  #L445bf4.  v1:= 0I;
  #L445bf6.  return v1 @kind object;
  #L445bf8.  v1:= `@@com.google.crypto.tink.proto.EllipticCurveType.CURVE25519` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445bfc.  return v1 @kind object;
  #L445bfe.  v1:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P521` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445c02.  return v1 @kind object;
  #L445c04.  v1:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P384` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445c08.  return v1 @kind object;
  #L445c0a.  v1:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445c0e.  return v1 @kind object;
  #L445c10.  v1:= `@@com.google.crypto.tink.proto.EllipticCurveType.UNKNOWN_CURVE` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445c14.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$EnumLiteMap` `internalGetValueMap`() @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.internalGetValueMap:()Lcom/google/crypto/tink/shaded/protobuf/Internal$EnumLiteMap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445c8c.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.internalValueMap` @type ^`com.google.crypto.tink.shaded.protobuf.Internal$EnumLiteMap` @kind object;
  #L445c90.  return v0 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$EnumVerifier` `internalGetVerifier`() @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.internalGetVerifier:()Lcom/google/crypto/tink/shaded/protobuf/Internal$EnumVerifier;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445ca4.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType$b.a` @type ^`com.google.crypto.tink.shaded.protobuf.Internal$EnumVerifier` @kind object;
  #L445ca8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EllipticCurveType` `valueOf`(`int` v0 ) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.valueOf:(I)Lcom/google/crypto/tink/proto/EllipticCurveType;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L445c28.  call temp:= `forNumber`(v0) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.forNumber:(I)Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind static;
  #L445c2e.  v0:= temp @kind object;
  #L445c30.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EllipticCurveType` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.valueOf:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/EllipticCurveType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445c44.  v0:= constclass @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445c48.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L445c4e.  v1:= temp @kind object;
  #L445c50.  v1:= (`com.google.crypto.tink.proto.EllipticCurveType`) v1 @kind object;
  #L445c54.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.EllipticCurveType`[] `values`() @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.values:()[Lcom/google/crypto/tink/proto/EllipticCurveType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L445c68.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.$VALUES` @type ^`com.google.crypto.tink.proto.EllipticCurveType`[] @kind object;
  #L445c6c.  call temp:= `clone`(v0) @signature `[Lcom/google/crypto/tink/proto/EllipticCurveType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L445c72.  v0:= temp @kind object;
  #L445c74.  v0:= (`com.google.crypto.tink.proto.EllipticCurveType`[]) v0 @kind object;
  #L445c78.  return v0 @kind object;
}
procedure `int` `getNumber`(`com.google.crypto.tink.proto.EllipticCurveType` v2 @kind this) @signature `Lcom/google/crypto/tink/proto/EllipticCurveType;.getNumber:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L445cbc.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.UNRECOGNIZED` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L445cc0.  if v2 == v0 then goto L445cca;
  #L445cc4.  v0:= v2.`com.google.crypto.tink.proto.EllipticCurveType.value` @type ^`int`;
  #L445cc8.  return v0;
  #L445cca.  v0:= new `java.lang.IllegalArgumentException`;
  #L445cce.  v1:= "Can't get the number of an unknown enum value." @kind object;
  #L445cd2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L445cd8.  throw v0;
}
