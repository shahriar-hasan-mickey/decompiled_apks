record `com.google.crypto.tink.signature.c$a` @kind class @AccessFlag  extends `com.google.crypto.tink.PublicKeyVerify` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.signature.c$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.c$a` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/c$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48bcd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48bcd6.  v0.`com.google.crypto.tink.signature.c$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v1 @kind object;
  #L48bcda.  return @kind void;
}
procedure `void` `verify`(`com.google.crypto.tink.signature.c$a` v7 @kind this, `byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lcom/google/crypto/tink/signature/c$a;.verify:([B[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48bcec.  v0:= length @variable v8;
  #L48bcee.  v1:= 5I;
  #L48bcf0.  if v0 <= v1 then goto L48be24;
  #L48bcf4.  v0:= 0I;
  #L48bcf6.  call temp:= `copyOfRange`(v8, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L48bcfc.  v2:= temp @kind object;
  #L48bcfe.  v3:= length @variable v8;
  #L48bd00.  call temp:= `copyOfRange`(v8, v1, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L48bd06.  v1:= temp @kind object;
  #L48bd08.  v3:= v7.`com.google.crypto.tink.signature.c$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L48bd0c.  call temp:= `getPrimitive`(v3, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L48bd12.  v2:= temp @kind object;
  #L48bd14.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48bd1a.  v2:= temp @kind object;
  #L48bd1c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48bd22.  v3:= temp;
  #L48bd24.  if v3 == 0 then goto L48bdd0;
  #L48bd28.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48bd2e.  v3:= temp @kind object;
  #L48bd30.  v3:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v3 @kind object;
  #L48bd34.  call temp:= `getOutputPrefixType`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L48bd3a.  v4:= temp @kind object;
  #L48bd3c.  v5:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L48bd40.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48bd46.  v4:= temp;
  #L48bd48.  if v4 == 0 then goto L48bd80;
  #L48bd4c.  v4:= 1I;
  #L48bd4e.  v5:= new `byte`[v4];
  #L48bd52.  v5[v0]:= v0 @kind byte;
  #L48bd56.  v6:= 2I;
  #L48bd58.  v6:= new `byte`[][v6];
  #L48bd5c.  v6[v0]:= v9 @kind object;
  #L48bd60.  v6[v4]:= v5 @kind object;
  #L48bd64.  call temp:= `concat`(v6) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L48bd6a.  v4:= temp @kind object;
  #L48bd6c.  call temp:= `getPrimitive`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L48bd72.  v3:= temp @kind object;
  #L48bd74.  v3:= (`com.google.crypto.tink.PublicKeyVerify`) v3 @kind object;
  #L48bd78.  call `verify`(v3, v1, v4) @signature `Lcom/google/crypto/tink/PublicKeyVerify;.verify:([B[B)V` @kind interface;
  #L48bd7e.  goto L48bd92;
  #L48bd80.  call temp:= `getPrimitive`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L48bd86.  v3:= temp @kind object;
  #L48bd88.  v3:= (`com.google.crypto.tink.PublicKeyVerify`) v3 @kind object;
  #L48bd8c.  call `verify`(v3, v1, v9) @signature `Lcom/google/crypto/tink/PublicKeyVerify;.verify:([B[B)V` @kind interface;
  #L48bd92.  return @kind void;
  #L48bd94.  v3:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L48bd96.  call temp:= `a`() @signature `Lcom/google/crypto/tink/signature/c;.a:()Ljava/util/logging/Logger;` @kind static;
  #L48bd9c.  v4:= temp @kind object;
  #L48bd9e.  v5:= new `java.lang.StringBuilder`;
  #L48bda2.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48bda8.  v6:= "signature prefix matches a key, but cannot verify: " @kind object;
  #L48bdac.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48bdb2.  call temp:= `toString`(v3) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L48bdb8.  v3:= temp @kind object;
  #L48bdba.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48bdc0.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48bdc6.  v3:= temp @kind object;
  #L48bdc8.  call `info`(v4, v3) @signature `Ljava/util/logging/Logger;.info:(Ljava/lang/String;)V` @kind virtual;
  #L48bdce.  goto L48bd1c;
  #L48bdd0.  v0:= v7.`com.google.crypto.tink.signature.c$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L48bdd4.  call temp:= `getRawPrimitives`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L48bdda.  v0:= temp @kind object;
  #L48bddc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48bde2.  v0:= temp @kind object;
  #L48bde4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48bdea.  v1:= temp;
  #L48bdec.  if v1 == 0 then goto L48be14;
  #L48bdf0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48bdf6.  v1:= temp @kind object;
  #L48bdf8.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L48bdfc.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L48be02.  v1:= temp @kind object;
  #L48be04.  v1:= (`com.google.crypto.tink.PublicKeyVerify`) v1 @kind object;
  #L48be08.  call `verify`(v1, v8, v9) @signature `Lcom/google/crypto/tink/PublicKeyVerify;.verify:([B[B)V` @kind interface;
  #L48be0e.  return @kind void;
  #L48be10.  
  #L48be12.  goto L48bde4;
  #L48be14.  v8:= new `java.security.GeneralSecurityException`;
  #L48be18.  v9:= "invalid signature" @kind object;
  #L48be1c.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48be22.  throw v8;
  #L48be24.  v8:= new `java.security.GeneralSecurityException`;
  #L48be28.  v9:= "signature too short" @kind object;
  #L48be2c.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48be32.  throw v8;
  catch `java.security.GeneralSecurityException` @[L48bd34..L48bd92] goto L48bd94;
  catch `java.security.GeneralSecurityException` @[L48bdfc..L48be0e] goto L48be10;
}
