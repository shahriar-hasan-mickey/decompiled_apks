record `com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PrivateKeyTypeManager` @kind class {
}
global `byte`[] `@@com.google.crypto.tink.signature.RsaSsaPssSignKeyManager.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48d1e4.  v0:= "UTF-8" @kind object;
  #L48d1e8.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L48d1ee.  v0:= temp @kind object;
  #L48d1f0.  v1:= "Tink and Wycheproof." @kind object;
  #L48d1f4.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L48d1fa.  v0:= temp @kind object;
  #L48d1fc.  `@@com.google.crypto.tink.signature.RsaSsaPssSignKeyManager.e` @type ^`byte`[] := v0 @kind object;
  #L48d200.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v5 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48d214.  v0:= constclass @type ^`com.google.crypto.tink.proto.RsaSsaPssPrivateKey` @kind object;
  #L48d218.  v1:= constclass @type ^`com.google.crypto.tink.proto.RsaSsaPssPublicKey` @kind object;
  #L48d21c.  v2:= 1I;
  #L48d21e.  v2:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v2];
  #L48d222.  v3:= new `com.google.crypto.tink.signature.RsaSsaPssSignKeyManager$a`;
  #L48d226.  v4:= constclass @type ^`com.google.crypto.tink.PublicKeySign` @kind object;
  #L48d22a.  call `<init>`(v3, v4) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48d230.  v4:= 0I;
  #L48d232.  v2[v4]:= v3 @kind object;
  #L48d236.  call `<init>`(v5, v0, v1, v2) @signature `Lcom/google/crypto/tink/PrivateKeyTypeManager;.<init>:(Ljava/lang/Class;Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L48d23c.  return @kind void;
}
procedure `byte`[] `b`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.b:()[B` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L48cf90.  v0:= `@@com.google.crypto.tink.signature.RsaSsaPssSignKeyManager.e` @type ^`byte`[] @kind object;
  #L48cf94.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`com.google.crypto.tink.proto.HashType` v1 @kind object, `com.google.crypto.tink.proto.HashType` v2 @kind object, `int` v3 , `int` v4 , `java.math.BigInteger` v5 @kind object, `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v6 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/HashType;IILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L48cfa8.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind static;
  #L48cfae.  v0:= temp @kind object;
  #L48cfb0.  call temp:= `setSigHash`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setSigHash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L48cfb6.  v1:= temp @kind object;
  #L48cfb8.  call temp:= `setMgf1Hash`(v1, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setMgf1Hash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L48cfbe.  v1:= temp @kind object;
  #L48cfc0.  call temp:= `setSaltLength`(v1, v3) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setSaltLength:(I)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L48cfc6.  v1:= temp @kind object;
  #L48cfc8.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48cfce.  v1:= temp @kind object;
  #L48cfd0.  v1:= (`com.google.crypto.tink.proto.RsaSsaPssParams`) v1 @kind object;
  #L48cfd4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat$Builder;` @kind static;
  #L48cfda.  v2:= temp @kind object;
  #L48cfdc.  call temp:= `setParams`(v2, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/RsaSsaPssParams;)Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat$Builder;` @kind virtual;
  #L48cfe2.  v1:= temp @kind object;
  #L48cfe4.  call temp:= `setModulusSizeInBits`(v1, v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat$Builder;.setModulusSizeInBits:(I)Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat$Builder;` @kind virtual;
  #L48cfea.  v1:= temp @kind object;
  #L48cfec.  call temp:= `toByteArray`(v5) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48cff2.  v2:= temp @kind object;
  #L48cff4.  call temp:= `copyFrom`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48cffa.  v2:= temp @kind object;
  #L48cffc.  call temp:= `setPublicExponent`(v1, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat$Builder;.setPublicExponent:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPssKeyFormat$Builder;` @kind virtual;
  #L48d002.  v1:= temp @kind object;
  #L48d004.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48d00a.  v1:= temp @kind object;
  #L48d00c.  v1:= (`com.google.crypto.tink.proto.RsaSsaPssKeyFormat`) v1 @kind object;
  #L48d010.  v2:= new `com.google.crypto.tink.signature.RsaSsaPssSignKeyManager`;
  #L48d014.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.<init>:()V` @kind direct;
  #L48d01a.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L48d020.  v2:= temp @kind object;
  #L48d022.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L48d028.  v1:= temp @kind object;
  #L48d02a.  call temp:= `create`(v2, v1, v6) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48d030.  v1:= temp @kind object;
  #L48d032.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawRsa3072PssSha256F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.rawRsa3072PssSha256F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d044.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d048.  v4:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48d04c.  v5:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48d050.  v2:= 32I;
  #L48d054.  v3:= 3072I;
  #L48d058.  v0:= v1 @kind object;
  #L48d05a.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/HashType;IILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48d060.  v0:= temp @kind object;
  #L48d062.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawRsa4096PssSha512F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.rawRsa4096PssSha512F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d074.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d078.  v4:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48d07c.  v5:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48d080.  v2:= 64I;
  #L48d084.  v3:= 4096I;
  #L48d088.  v0:= v1 @kind object;
  #L48d08a.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/HashType;IILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48d090.  v0:= temp @kind object;
  #L48d092.  return v0 @kind object;
}
procedure `void` `registerPair`(`boolean` v2 ) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.registerPair:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48d250.  v0:= new `com.google.crypto.tink.signature.RsaSsaPssSignKeyManager`;
  #L48d254.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.<init>:()V` @kind direct;
  #L48d25a.  v1:= new `com.google.crypto.tink.signature.e`;
  #L48d25e.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/e;.<init>:()V` @kind direct;
  #L48d264.  call `registerAsymmetricKeyManagers`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.registerAsymmetricKeyManagers:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L48d26a.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `rsa3072PssSha256F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.rsa3072PssSha256F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d0a4.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d0a8.  v4:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48d0ac.  v5:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48d0b0.  v2:= 32I;
  #L48d0b4.  v3:= 3072I;
  #L48d0b8.  v0:= v1 @kind object;
  #L48d0ba.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/HashType;IILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48d0c0.  v0:= temp @kind object;
  #L48d0c2.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rsa4096PssSha512F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.rsa4096PssSha512F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d0d4.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d0d8.  v4:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48d0dc.  v5:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48d0e0.  v2:= 64I;
  #L48d0e4.  v3:= 4096I;
  #L48d0e8.  v0:= v1 @kind object;
  #L48d0ea.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/HashType;IILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48d0f0.  v0:= temp @kind object;
  #L48d0f2.  return v0 @kind object;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48d1cc.  v0:= "type.googleapis.com/google.crypto.tink.RsaSsaPssPrivateKey" @kind object;
  #L48d1d0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.RsaSsaPssPublicKey` `getPublicKey`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v0 @kind this, `com.google.crypto.tink.proto.RsaSsaPssPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @AccessFlag PUBLIC {
    temp;

  #L48d160.  call temp:= `getPublicKey`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48d166.  v1:= temp @kind object;
  #L48d168.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `getPublicKey`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48d17c.  v1:= (`com.google.crypto.tink.proto.RsaSsaPssPrivateKey`) v1 @kind object;
  #L48d180.  call temp:= `getPublicKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48d186.  v1:= temp @kind object;
  #L48d188.  return v1 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48d1b8.  v0:= 0I;
  #L48d1ba.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48d104.  v0:= new `com.google.crypto.tink.signature.RsaSsaPssSignKeyManager$b`;
  #L48d108.  v1:= constclass @type ^`com.google.crypto.tink.proto.RsaSsaPssKeyFormat` @kind object;
  #L48d10c.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager$b;.<init>:(Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L48d112.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48d124.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L48d128.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.RsaSsaPssPrivateKey` `parseKey`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48d13c.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L48d142.  v0:= temp @kind object;
  #L48d144.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;` @kind static;
  #L48d14a.  v2:= temp @kind object;
  #L48d14c.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48d19c.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;` @kind virtual;
  #L48d1a2.  v1:= temp @kind object;
  #L48d1a4.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v3 @kind this, `com.google.crypto.tink.proto.RsaSsaPssPrivateKey` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48d27c.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getVersion:()I` @kind virtual;
  #L48d282.  v0:= temp;
  #L48d284.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.getVersion:()I` @kind virtual;
  #L48d28a.  v1:= temp;
  #L48d28c.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L48d292.  v0:= new `java.math.BigInteger`;
  #L48d296.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48d29c.  v1:= temp @kind object;
  #L48d29e.  call temp:= `getN`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getN:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48d2a4.  v1:= temp @kind object;
  #L48d2a6.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48d2ac.  v1:= temp @kind object;
  #L48d2ae.  v2:= 1I;
  #L48d2b0.  call `<init>`(v0, v2, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48d2b6.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L48d2bc.  v0:= temp;
  #L48d2be.  call `validateRsaModulusSize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @kind static;
  #L48d2c4.  v0:= new `java.math.BigInteger`;
  #L48d2c8.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48d2ce.  v1:= temp @kind object;
  #L48d2d0.  call temp:= `getE`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getE:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48d2d6.  v1:= temp @kind object;
  #L48d2d8.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48d2de.  v1:= temp @kind object;
  #L48d2e0.  call `<init>`(v0, v2, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48d2e6.  call `validateRsaPublicExponent`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @kind static;
  #L48d2ec.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48d2f2.  v4:= temp @kind object;
  #L48d2f4.  call temp:= `getParams`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getParams:()Lcom/google/crypto/tink/proto/RsaSsaPssParams;` @kind virtual;
  #L48d2fa.  v4:= temp @kind object;
  #L48d2fc.  call `f`(v4) @signature `Lcom/google/crypto/tink/signature/f;.f:(Lcom/google/crypto/tink/proto/RsaSsaPssParams;)V` @kind static;
  #L48d302.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48d314.  v1:= (`com.google.crypto.tink.proto.RsaSsaPssPrivateKey`) v1 @kind object;
  #L48d318.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;)V` @kind virtual;
  #L48d31e.  return @kind void;
}
