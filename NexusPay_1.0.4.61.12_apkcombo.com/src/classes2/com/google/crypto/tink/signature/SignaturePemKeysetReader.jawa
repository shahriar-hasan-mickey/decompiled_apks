record `com.google.crypto.tink.signature.SignaturePemKeysetReader` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeysetReader` @kind interface {
  `java.util.List` `com.google.crypto.tink.signature.SignaturePemKeysetReader.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.SignaturePemKeysetReader` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48e6ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48e6b2.  v0.`com.google.crypto.tink.signature.SignaturePemKeysetReader.a` @type ^`java.util.List` := v1 @kind object;
  #L48e6b6.  return @kind void;
}
procedure `com.google.crypto.tink.proto.KeyData` `a`(`com.google.crypto.tink.subtle.PemKeyType` v2 @kind object, `java.security.interfaces.ECPublicKey` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.a:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/ECPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L48e10c.  v0:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L48e110.  v1:= "ECDSA" @kind object;
  #L48e114.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48e11a.  v0:= temp;
  #L48e11c.  if v0 == 0 then goto L48e232;
  #L48e120.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind static;
  #L48e126.  v0:= temp @kind object;
  #L48e128.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L48e12e.  v1:= temp @kind object;
  #L48e130.  call temp:= `setHashType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L48e136.  v0:= temp @kind object;
  #L48e138.  call temp:= `c`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.c:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind static;
  #L48e13e.  v2:= temp @kind object;
  #L48e140.  call temp:= `setCurve`(v0, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setCurve:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L48e146.  v2:= temp @kind object;
  #L48e148.  v0:= `@@com.google.crypto.tink.proto.EcdsaSignatureEncoding.DER` @type ^`com.google.crypto.tink.proto.EcdsaSignatureEncoding` @kind object;
  #L48e14c.  call temp:= `setEncoding`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaParams$Builder;.setEncoding:(Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;)Lcom/google/crypto/tink/proto/EcdsaParams$Builder;` @kind virtual;
  #L48e152.  v2:= temp @kind object;
  #L48e154.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e15a.  v2:= temp @kind object;
  #L48e15c.  v2:= (`com.google.crypto.tink.proto.EcdsaParams`) v2 @kind object;
  #L48e160.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind static;
  #L48e166.  v0:= temp @kind object;
  #L48e168.  v1:= new `com.google.crypto.tink.signature.a`;
  #L48e16c.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/a;.<init>:()V` @kind direct;
  #L48e172.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/signature/a;.getVersion:()I` @kind virtual;
  #L48e178.  v1:= temp;
  #L48e17a.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48e180.  v0:= temp @kind object;
  #L48e182.  call temp:= `setParams`(v0, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/EcdsaParams;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48e188.  v2:= temp @kind object;
  #L48e18a.  call temp:= `getW`(v3) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L48e190.  v0:= temp @kind object;
  #L48e192.  call temp:= `getAffineX`(v0) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L48e198.  v0:= temp @kind object;
  #L48e19a.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48e1a0.  v0:= temp @kind object;
  #L48e1a2.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48e1a8.  v0:= temp @kind object;
  #L48e1aa.  call temp:= `setX`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setX:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48e1b0.  v2:= temp @kind object;
  #L48e1b2.  call temp:= `getW`(v3) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L48e1b8.  v3:= temp @kind object;
  #L48e1ba.  call temp:= `getAffineY`(v3) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L48e1c0.  v3:= temp @kind object;
  #L48e1c2.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48e1c8.  v3:= temp @kind object;
  #L48e1ca.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48e1d0.  v3:= temp @kind object;
  #L48e1d2.  call temp:= `setY`(v2, v3) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setY:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48e1d8.  v2:= temp @kind object;
  #L48e1da.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e1e0.  v2:= temp @kind object;
  #L48e1e2.  v2:= (`com.google.crypto.tink.proto.EcdsaPublicKey`) v2 @kind object;
  #L48e1e6.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyData;.newBuilder:()Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind static;
  #L48e1ec.  v3:= temp @kind object;
  #L48e1ee.  v0:= new `com.google.crypto.tink.signature.a`;
  #L48e1f2.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/a;.<init>:()V` @kind direct;
  #L48e1f8.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/signature/a;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L48e1fe.  v0:= temp @kind object;
  #L48e200.  call temp:= `setTypeUrl`(v3, v0) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e206.  v3:= temp @kind object;
  #L48e208.  call temp:= `toByteString`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteString:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48e20e.  v2:= temp @kind object;
  #L48e210.  call temp:= `setValue`(v3, v2) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e216.  v2:= temp @kind object;
  #L48e218.  v3:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L48e21c.  call temp:= `setKeyMaterialType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setKeyMaterialType:(Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e222.  v2:= temp @kind object;
  #L48e224.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e22a.  v2:= temp @kind object;
  #L48e22c.  v2:= (`com.google.crypto.tink.proto.KeyData`) v2 @kind object;
  #L48e230.  return v2 @kind object;
  #L48e232.  v3:= new `java.io.IOException`;
  #L48e236.  v0:= new `java.lang.StringBuilder`;
  #L48e23a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e240.  v1:= "unsupported EC signature algorithm: " @kind object;
  #L48e244.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e24a.  v2:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L48e24e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e254.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e25a.  v2:= temp @kind object;
  #L48e25c.  call `<init>`(v3, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e262.  throw v3;
}
procedure `com.google.crypto.tink.proto.KeyData` `b`(`com.google.crypto.tink.subtle.PemKeyType` v2 @kind object, `java.security.interfaces.RSAPublicKey` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.b:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/RSAPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L48e274.  v0:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L48e278.  v1:= "RSASSA-PKCS1-v1_5" @kind object;
  #L48e27c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48e282.  v0:= temp;
  #L48e284.  if v0 == 0 then goto L48e36e;
  #L48e288.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;` @kind static;
  #L48e28e.  v0:= temp @kind object;
  #L48e290.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L48e296.  v2:= temp @kind object;
  #L48e298.  call temp:= `setHashType`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;.setHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;` @kind virtual;
  #L48e29e.  v2:= temp @kind object;
  #L48e2a0.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e2a6.  v2:= temp @kind object;
  #L48e2a8.  v2:= (`com.google.crypto.tink.proto.RsaSsaPkcs1Params`) v2 @kind object;
  #L48e2ac.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind static;
  #L48e2b2.  v0:= temp @kind object;
  #L48e2b4.  v1:= new `com.google.crypto.tink.signature.d`;
  #L48e2b8.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/d;.<init>:()V` @kind direct;
  #L48e2be.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/signature/d;.getVersion:()I` @kind virtual;
  #L48e2c4.  v1:= temp;
  #L48e2c6.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L48e2cc.  v0:= temp @kind object;
  #L48e2ce.  call temp:= `setParams`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L48e2d4.  v2:= temp @kind object;
  #L48e2d6.  call temp:= `getPublicExponent`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L48e2dc.  v0:= temp @kind object;
  #L48e2de.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48e2e4.  v0:= temp @kind object;
  #L48e2e6.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48e2ec.  v0:= temp @kind object;
  #L48e2ee.  call temp:= `setE`(v2, v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setE:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L48e2f4.  v2:= temp @kind object;
  #L48e2f6.  call temp:= `getModulus`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L48e2fc.  v3:= temp @kind object;
  #L48e2fe.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48e304.  v3:= temp @kind object;
  #L48e306.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48e30c.  v3:= temp @kind object;
  #L48e30e.  call temp:= `setN`(v2, v3) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;.setN:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey$Builder;` @kind virtual;
  #L48e314.  v2:= temp @kind object;
  #L48e316.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e31c.  v2:= temp @kind object;
  #L48e31e.  v2:= (`com.google.crypto.tink.proto.RsaSsaPkcs1PublicKey`) v2 @kind object;
  #L48e322.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyData;.newBuilder:()Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind static;
  #L48e328.  v3:= temp @kind object;
  #L48e32a.  v0:= new `com.google.crypto.tink.signature.d`;
  #L48e32e.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/d;.<init>:()V` @kind direct;
  #L48e334.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/signature/d;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L48e33a.  v0:= temp @kind object;
  #L48e33c.  call temp:= `setTypeUrl`(v3, v0) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e342.  v3:= temp @kind object;
  #L48e344.  call temp:= `toByteString`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteString:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48e34a.  v2:= temp @kind object;
  #L48e34c.  call temp:= `setValue`(v3, v2) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e352.  v2:= temp @kind object;
  #L48e354.  v3:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L48e358.  call temp:= `setKeyMaterialType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setKeyMaterialType:(Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e35e.  v2:= temp @kind object;
  #L48e360.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e366.  v2:= temp @kind object;
  #L48e368.  v2:= (`com.google.crypto.tink.proto.KeyData`) v2 @kind object;
  #L48e36c.  return v2 @kind object;
  #L48e36e.  v0:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L48e372.  v1:= "RSASSA-PSS" @kind object;
  #L48e376.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48e37c.  v0:= temp;
  #L48e37e.  if v0 == 0 then goto L48e488;
  #L48e382.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind static;
  #L48e388.  v0:= temp @kind object;
  #L48e38a.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L48e390.  v1:= temp @kind object;
  #L48e392.  call temp:= `setSigHash`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setSigHash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L48e398.  v0:= temp @kind object;
  #L48e39a.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @kind static;
  #L48e3a0.  v1:= temp @kind object;
  #L48e3a2.  call temp:= `setMgf1Hash`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setMgf1Hash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L48e3a8.  v0:= temp @kind object;
  #L48e3aa.  call temp:= `d`(v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.d:(Lcom/google/crypto/tink/subtle/PemKeyType;)I` @kind static;
  #L48e3b0.  v2:= temp;
  #L48e3b2.  call temp:= `setSaltLength`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;.setSaltLength:(I)Lcom/google/crypto/tink/proto/RsaSsaPssParams$Builder;` @kind virtual;
  #L48e3b8.  v2:= temp @kind object;
  #L48e3ba.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e3c0.  v2:= temp @kind object;
  #L48e3c2.  v2:= (`com.google.crypto.tink.proto.RsaSsaPssParams`) v2 @kind object;
  #L48e3c6.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind static;
  #L48e3cc.  v0:= temp @kind object;
  #L48e3ce.  v1:= new `com.google.crypto.tink.signature.e`;
  #L48e3d2.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/e;.<init>:()V` @kind direct;
  #L48e3d8.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/signature/e;.getVersion:()I` @kind virtual;
  #L48e3de.  v1:= temp;
  #L48e3e0.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L48e3e6.  v0:= temp @kind object;
  #L48e3e8.  call temp:= `setParams`(v0, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/RsaSsaPssParams;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L48e3ee.  v2:= temp @kind object;
  #L48e3f0.  call temp:= `getPublicExponent`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L48e3f6.  v0:= temp @kind object;
  #L48e3f8.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48e3fe.  v0:= temp @kind object;
  #L48e400.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48e406.  v0:= temp @kind object;
  #L48e408.  call temp:= `setE`(v2, v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setE:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L48e40e.  v2:= temp @kind object;
  #L48e410.  call temp:= `getModulus`(v3) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L48e416.  v3:= temp @kind object;
  #L48e418.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48e41e.  v3:= temp @kind object;
  #L48e420.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48e426.  v3:= temp @kind object;
  #L48e428.  call temp:= `setN`(v2, v3) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;.setN:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey$Builder;` @kind virtual;
  #L48e42e.  v2:= temp @kind object;
  #L48e430.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e436.  v2:= temp @kind object;
  #L48e438.  v2:= (`com.google.crypto.tink.proto.RsaSsaPssPublicKey`) v2 @kind object;
  #L48e43c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyData;.newBuilder:()Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind static;
  #L48e442.  v3:= temp @kind object;
  #L48e444.  v0:= new `com.google.crypto.tink.signature.e`;
  #L48e448.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/e;.<init>:()V` @kind direct;
  #L48e44e.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/signature/e;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L48e454.  v0:= temp @kind object;
  #L48e456.  call temp:= `setTypeUrl`(v3, v0) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e45c.  v3:= temp @kind object;
  #L48e45e.  call temp:= `toByteString`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteString:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48e464.  v2:= temp @kind object;
  #L48e466.  call temp:= `setValue`(v3, v2) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e46c.  v2:= temp @kind object;
  #L48e46e.  v3:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L48e472.  call temp:= `setKeyMaterialType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyData$Builder;.setKeyMaterialType:(Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;)Lcom/google/crypto/tink/proto/KeyData$Builder;` @kind virtual;
  #L48e478.  v2:= temp @kind object;
  #L48e47a.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e480.  v2:= temp @kind object;
  #L48e482.  v2:= (`com.google.crypto.tink.proto.KeyData`) v2 @kind object;
  #L48e486.  return v2 @kind object;
  #L48e488.  v3:= new `java.io.IOException`;
  #L48e48c.  v0:= new `java.lang.StringBuilder`;
  #L48e490.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e496.  v1:= "unsupported RSA signature algorithm: " @kind object;
  #L48e49a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e4a0.  v2:= v2.`com.google.crypto.tink.subtle.PemKeyType.algorithm` @type ^`java.lang.String` @kind object;
  #L48e4a4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e4aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e4b0.  v2:= temp @kind object;
  #L48e4b2.  call `<init>`(v3, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e4b8.  throw v3;
}
procedure `com.google.crypto.tink.proto.EllipticCurveType` `c`(`com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.c:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/EllipticCurveType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48dffc.  v0:= v3.`com.google.crypto.tink.subtle.PemKeyType.keySizeInBits` @type ^`int`;
  #L48e000.  v1:= 256I;
  #L48e004.  if v0 == v1 then goto L48e056;
  #L48e008.  v1:= 384I;
  #L48e00c.  if v0 == v1 then goto L48e050;
  #L48e010.  v1:= 521I;
  #L48e014.  if v0 != v1 then goto L48e01e;
  #L48e018.  v3:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P521` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L48e01c.  return v3 @kind object;
  #L48e01e.  v0:= new `java.lang.IllegalArgumentException`;
  #L48e022.  v1:= new `java.lang.StringBuilder`;
  #L48e026.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e02c.  v2:= "unsupported curve for key size: " @kind object;
  #L48e030.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e036.  v3:= v3.`com.google.crypto.tink.subtle.PemKeyType.keySizeInBits` @type ^`int`;
  #L48e03a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e040.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e046.  v3:= temp @kind object;
  #L48e048.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e04e.  throw v0;
  #L48e050.  v3:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P384` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L48e054.  return v3 @kind object;
  #L48e056.  v3:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L48e05a.  return v3 @kind object;
}
procedure `int` `d`(`com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.d:(Lcom/google/crypto/tink/subtle/PemKeyType;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48e628.  v0:= `@@com.google.crypto.tink.signature.SignaturePemKeysetReader$a.a` @type ^`int`[] @kind object;
  #L48e62c.  v1:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L48e630.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48e636.  v1:= temp;
  #L48e638.  v0:= v0[v1];
  #L48e63c.  v1:= 1I;
  #L48e63e.  if v0 == v1 then goto L48e694;
  #L48e642.  v1:= 2I;
  #L48e644.  if v0 == v1 then goto L48e68e;
  #L48e648.  v1:= 3I;
  #L48e64a.  if v0 != v1 then goto L48e654;
  #L48e64e.  v3:= 64I;
  #L48e652.  return v3;
  #L48e654.  v0:= new `java.lang.IllegalArgumentException`;
  #L48e658.  v1:= new `java.lang.StringBuilder`;
  #L48e65c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e662.  v2:= "unsupported hash type: " @kind object;
  #L48e666.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e66c.  v3:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L48e670.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L48e676.  v3:= temp @kind object;
  #L48e678.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e67e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e684.  v3:= temp @kind object;
  #L48e686.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e68c.  throw v0;
  #L48e68e.  v3:= 48I;
  #L48e692.  return v3;
  #L48e694.  v3:= 32I;
  #L48e698.  return v3;
}
procedure `com.google.crypto.tink.proto.HashType` `e`(`com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.e:(Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/HashType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48e088.  v0:= `@@com.google.crypto.tink.signature.SignaturePemKeysetReader$a.a` @type ^`int`[] @kind object;
  #L48e08c.  v1:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L48e090.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48e096.  v1:= temp;
  #L48e098.  v0:= v0[v1];
  #L48e09c.  v1:= 1I;
  #L48e09e.  if v0 == v1 then goto L48e0f4;
  #L48e0a2.  v1:= 2I;
  #L48e0a4.  if v0 == v1 then goto L48e0ee;
  #L48e0a8.  v1:= 3I;
  #L48e0aa.  if v0 != v1 then goto L48e0b4;
  #L48e0ae.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48e0b2.  return v3 @kind object;
  #L48e0b4.  v0:= new `java.lang.IllegalArgumentException`;
  #L48e0b8.  v1:= new `java.lang.StringBuilder`;
  #L48e0bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e0c2.  v2:= "unsupported hash type: " @kind object;
  #L48e0c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e0cc.  v3:= v3.`com.google.crypto.tink.subtle.PemKeyType.hash` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L48e0d0.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L48e0d6.  v3:= temp @kind object;
  #L48e0d8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e0de.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e0e4.  v3:= temp @kind object;
  #L48e0e6.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e0ec.  throw v0;
  #L48e0ee.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA384` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48e0f2.  return v3 @kind object;
  #L48e0f4.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48e0f8.  return v3 @kind object;
}
procedure `com.google.crypto.tink.proto.Keyset$Key` `f`(`java.io.BufferedReader` v2 @kind object, `com.google.crypto.tink.subtle.PemKeyType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.f:(Ljava/io/BufferedReader;Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/Keyset$Key;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L48e578.  call temp:= `readKey`(v3, v2) @signature `Lcom/google/crypto/tink/subtle/PemKeyType;.readKey:(Ljava/io/BufferedReader;)Ljava/security/Key;` @kind virtual;
  #L48e57e.  v2:= temp @kind object;
  #L48e580.  v0:= 0I;
  #L48e582.  if v2 != 0 then goto L48e588;
  #L48e586.  return v0 @kind object;
  #L48e588.  v1:= instanceof @variable v2 @type ^`java.security.interfaces.RSAPublicKey` @kind boolean;
  #L48e58c.  if v1 == 0 then goto L48e59e;
  #L48e590.  v2:= (`java.security.interfaces.RSAPublicKey`) v2 @kind object;
  #L48e594.  call temp:= `b`(v3, v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.b:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/RSAPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L48e59a.  v2:= temp @kind object;
  #L48e59c.  goto L48e5b2;
  #L48e59e.  v1:= instanceof @variable v2 @type ^`java.security.interfaces.ECPublicKey` @kind boolean;
  #L48e5a2.  if v1 == 0 then goto L48e5f8;
  #L48e5a6.  v2:= (`java.security.interfaces.ECPublicKey`) v2 @kind object;
  #L48e5aa.  call temp:= `a`(v3, v2) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.a:(Lcom/google/crypto/tink/subtle/PemKeyType;Ljava/security/interfaces/ECPublicKey;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L48e5b0.  v2:= temp @kind object;
  #L48e5b2.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind static;
  #L48e5b8.  v3:= temp @kind object;
  #L48e5ba.  call temp:= `setKeyData`(v3, v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setKeyData:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L48e5c0.  v2:= temp @kind object;
  #L48e5c2.  v3:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L48e5c6.  call temp:= `setStatus`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setStatus:(Lcom/google/crypto/tink/proto/KeyStatusType;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L48e5cc.  v2:= temp @kind object;
  #L48e5ce.  v3:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L48e5d2.  call temp:= `setOutputPrefixType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L48e5d8.  v2:= temp @kind object;
  #L48e5da.  call temp:= `randInt`() @signature `Lcom/google/crypto/tink/subtle/Random;.randInt:()I` @kind static;
  #L48e5e0.  v3:= temp;
  #L48e5e2.  call temp:= `setKeyId`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setKeyId:(I)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L48e5e8.  v2:= temp @kind object;
  #L48e5ea.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e5f0.  v2:= temp @kind object;
  #L48e5f2.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L48e5f6.  return v2 @kind object;
  #L48e5f8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.signature.SignaturePemKeysetReader$Builder` `newBuilder`() @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.newBuilder:()Lcom/google/crypto/tink/signature/SignaturePemKeysetReader$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e60c.  v0:= new `com.google.crypto.tink.signature.SignaturePemKeysetReader$Builder`;
  #L48e610.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader$Builder;.<init>:()V` @kind direct;
  #L48e616.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.Keyset` `read`(`com.google.crypto.tink.signature.SignaturePemKeysetReader` v5 @kind this) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.read:()Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48e4cc.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind static;
  #L48e4d2.  v0:= temp @kind object;
  #L48e4d4.  v1:= v5.`com.google.crypto.tink.signature.SignaturePemKeysetReader.a` @type ^`java.util.List` @kind object;
  #L48e4d8.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48e4de.  v1:= temp @kind object;
  #L48e4e0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48e4e6.  v2:= temp;
  #L48e4e8.  if v2 == 0 then goto L48e524;
  #L48e4ec.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48e4f2.  v2:= temp @kind object;
  #L48e4f4.  v2:= (`com.google.crypto.tink.signature.SignaturePemKeysetReader$b`) v2 @kind object;
  #L48e4f8.  v3:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.a` @type ^`java.io.BufferedReader` @kind object;
  #L48e4fc.  v4:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.b` @type ^`com.google.crypto.tink.subtle.PemKeyType` @kind object;
  #L48e500.  call temp:= `f`(v3, v4) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.f:(Ljava/io/BufferedReader;Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/Keyset$Key;` @kind static;
  #L48e506.  v3:= temp @kind object;
  #L48e508.  if v3 == 0 then goto L48e4e0;
  #L48e50c.  call temp:= `addKey`(v0, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.addKey:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L48e512.  v3:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.a` @type ^`java.io.BufferedReader` @kind object;
  #L48e516.  v4:= v2.`com.google.crypto.tink.signature.SignaturePemKeysetReader$b.b` @type ^`com.google.crypto.tink.subtle.PemKeyType` @kind object;
  #L48e51a.  call temp:= `f`(v3, v4) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.f:(Ljava/io/BufferedReader;Lcom/google/crypto/tink/subtle/PemKeyType;)Lcom/google/crypto/tink/proto/Keyset$Key;` @kind static;
  #L48e520.  v3:= temp @kind object;
  #L48e522.  goto L48e508;
  #L48e524.  call temp:= `getKeyCount`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.getKeyCount:()I` @kind virtual;
  #L48e52a.  v1:= temp;
  #L48e52c.  if v1 == 0 then goto L48e556;
  #L48e530.  v1:= 0I;
  #L48e532.  call temp:= `getKey`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.getKey:(I)Lcom/google/crypto/tink/proto/Keyset$Key;` @kind virtual;
  #L48e538.  v1:= temp @kind object;
  #L48e53a.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L48e540.  v1:= temp;
  #L48e542.  call temp:= `setPrimaryKeyId`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.setPrimaryKeyId:(I)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L48e548.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48e54e.  v0:= temp @kind object;
  #L48e550.  v0:= (`com.google.crypto.tink.proto.Keyset`) v0 @kind object;
  #L48e554.  return v0 @kind object;
  #L48e556.  v0:= new `java.io.IOException`;
  #L48e55a.  v1:= "cannot find any key" @kind object;
  #L48e55e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e564.  throw v0;
}
procedure `com.google.crypto.tink.proto.EncryptedKeyset` `readEncrypted`(`com.google.crypto.tink.signature.SignaturePemKeysetReader` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/SignaturePemKeysetReader;.readEncrypted:()Lcom/google/crypto/tink/proto/EncryptedKeyset;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e06c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L48e070.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L48e076.  throw v0;
}
