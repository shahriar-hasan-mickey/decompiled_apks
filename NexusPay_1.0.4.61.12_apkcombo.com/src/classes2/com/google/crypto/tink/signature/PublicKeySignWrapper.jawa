record `com.google.crypto.tink.signature.PublicKeySignWrapper` @kind class @AccessFlag PUBLIC extends `com.google.crypto.tink.PrimitiveWrapper` @kind interface {
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.PublicKeySignWrapper` v0 @kind this) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48bc24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48bc2a.  return @kind void;
}
procedure `void` `register`() @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.register:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48bc3c.  v0:= new `com.google.crypto.tink.signature.PublicKeySignWrapper`;
  #L48bc40.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.<init>:()V` @kind direct;
  #L48bc46.  call `registerPrimitiveWrapper`(v0) @signature `Lcom/google/crypto/tink/Registry;.registerPrimitiveWrapper:(Lcom/google/crypto/tink/PrimitiveWrapper;)V` @kind static;
  #L48bc4c.  return @kind void;
}
procedure `java.lang.Class` `getInputPrimitiveClass`(`com.google.crypto.tink.signature.PublicKeySignWrapper` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48bbd8.  v0:= constclass @type ^`com.google.crypto.tink.PublicKeySign` @kind object;
  #L48bbdc.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimitiveClass`(`com.google.crypto.tink.signature.PublicKeySignWrapper` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.getPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48bbf0.  v0:= constclass @type ^`com.google.crypto.tink.PublicKeySign` @kind object;
  #L48bbf4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PublicKeySign` `wrap`(`com.google.crypto.tink.signature.PublicKeySignWrapper` v1 @kind this, `com.google.crypto.tink.PrimitiveSet` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/PublicKeySign;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48bbbc.  v0:= new `com.google.crypto.tink.signature.PublicKeySignWrapper$a`;
  #L48bbc0.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @kind direct;
  #L48bbc6.  return v0 @kind object;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.signature.PublicKeySignWrapper` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48bc08.  call temp:= `wrap`(v0, v1) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/PublicKeySign;` @kind virtual;
  #L48bc0e.  v1:= temp @kind object;
  #L48bc10.  return v1 @kind object;
}
