record `com.google.crypto.tink.signature.PublicKeySignWrapper$a` @kind class @AccessFlag  extends `com.google.crypto.tink.PublicKeySign` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.PublicKeySignWrapper$a` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48bba0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48bba6.  v0.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v1 @kind object;
  #L48bbaa.  return @kind void;
}
procedure `byte`[] `sign`(`com.google.crypto.tink.signature.PublicKeySignWrapper$a` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/signature/PublicKeySignWrapper$a;.sign:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48bab4.  v0:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L48bab8.  call temp:= `getPrimary`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L48babe.  v0:= temp @kind object;
  #L48bac0.  call temp:= `getOutputPrefixType`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L48bac6.  v0:= temp @kind object;
  #L48bac8.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L48bacc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48bad2.  v0:= temp;
  #L48bad4.  v1:= 2I;
  #L48bad6.  v2:= 1I;
  #L48bad8.  v3:= 0I;
  #L48bada.  if v0 == 0 then goto L48bb44;
  #L48bade.  v0:= new `byte`[v2];
  #L48bae2.  v0[v3]:= v3 @kind byte;
  #L48bae6.  v4:= new `byte`[][v1];
  #L48baea.  v5:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L48baee.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L48baf4.  v5:= temp @kind object;
  #L48baf6.  call temp:= `getIdentifier`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L48bafc.  v5:= temp @kind object;
  #L48bafe.  v4[v3]:= v5 @kind object;
  #L48bb02.  v5:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L48bb06.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L48bb0c.  v5:= temp @kind object;
  #L48bb0e.  call temp:= `getPrimitive`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L48bb14.  v5:= temp @kind object;
  #L48bb16.  v5:= (`com.google.crypto.tink.PublicKeySign`) v5 @kind object;
  #L48bb1a.  v1:= new `byte`[][v1];
  #L48bb1e.  v1[v3]:= v7 @kind object;
  #L48bb22.  v1[v2]:= v0 @kind object;
  #L48bb26.  call temp:= `concat`(v1) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L48bb2c.  v7:= temp @kind object;
  #L48bb2e.  call temp:= `sign`(v5, v7) @signature `Lcom/google/crypto/tink/PublicKeySign;.sign:([B)[B` @kind interface;
  #L48bb34.  v7:= temp @kind object;
  #L48bb36.  v4[v2]:= v7 @kind object;
  #L48bb3a.  call temp:= `concat`(v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L48bb40.  v7:= temp @kind object;
  #L48bb42.  return v7 @kind object;
  #L48bb44.  v0:= new `byte`[][v1];
  #L48bb48.  v1:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L48bb4c.  call temp:= `getPrimary`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L48bb52.  v1:= temp @kind object;
  #L48bb54.  call temp:= `getIdentifier`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L48bb5a.  v1:= temp @kind object;
  #L48bb5c.  v0[v3]:= v1 @kind object;
  #L48bb60.  v1:= v6.`com.google.crypto.tink.signature.PublicKeySignWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L48bb64.  call temp:= `getPrimary`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L48bb6a.  v1:= temp @kind object;
  #L48bb6c.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L48bb72.  v1:= temp @kind object;
  #L48bb74.  v1:= (`com.google.crypto.tink.PublicKeySign`) v1 @kind object;
  #L48bb78.  call temp:= `sign`(v1, v7) @signature `Lcom/google/crypto/tink/PublicKeySign;.sign:([B)[B` @kind interface;
  #L48bb7e.  v7:= temp @kind object;
  #L48bb80.  v0[v2]:= v7 @kind object;
  #L48bb84.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L48bb8a.  v7:= temp @kind object;
  #L48bb8c.  return v7 @kind object;
}
