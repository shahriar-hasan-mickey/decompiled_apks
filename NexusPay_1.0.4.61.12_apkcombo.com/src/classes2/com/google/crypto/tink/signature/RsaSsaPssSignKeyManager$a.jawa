record `com.google.crypto.tink.signature.RsaSsaPssSignKeyManager$a` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager$a` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager$a;.<init>:(Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48cc88.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48cc8e.  return @kind void;
}
procedure `com.google.crypto.tink.PublicKeySign` `b`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager$a` v12 @kind this, `com.google.crypto.tink.proto.RsaSsaPssPrivateKey` v13 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager$a;.b:(Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;)Lcom/google/crypto/tink/PublicKeySign;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L48ca1c.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L48ca20.  v1:= "RSA" @kind object;
  #L48ca24.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L48ca2a.  v0:= temp @kind object;
  #L48ca2c.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L48ca30.  v10:= new `java.security.spec.RSAPrivateCrtKeySpec`;
  #L48ca34.  v2:= new `java.math.BigInteger`;
  #L48ca38.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48ca3e.  v1:= temp @kind object;
  #L48ca40.  call temp:= `getN`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getN:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48ca46.  v1:= temp @kind object;
  #L48ca48.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48ca4e.  v1:= temp @kind object;
  #L48ca50.  v11:= 1I;
  #L48ca52.  call `<init>`(v2, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48ca58.  v3:= new `java.math.BigInteger`;
  #L48ca5c.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48ca62.  v1:= temp @kind object;
  #L48ca64.  call temp:= `getE`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getE:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48ca6a.  v1:= temp @kind object;
  #L48ca6c.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48ca72.  v1:= temp @kind object;
  #L48ca74.  call `<init>`(v3, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48ca7a.  v4:= new `java.math.BigInteger`;
  #L48ca7e.  call temp:= `getD`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getD:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48ca84.  v1:= temp @kind object;
  #L48ca86.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48ca8c.  v1:= temp @kind object;
  #L48ca8e.  call `<init>`(v4, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48ca94.  v5:= new `java.math.BigInteger`;
  #L48ca98.  call temp:= `getP`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getP:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48ca9e.  v1:= temp @kind object;
  #L48caa0.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48caa6.  v1:= temp @kind object;
  #L48caa8.  call `<init>`(v5, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48caae.  v6:= new `java.math.BigInteger`;
  #L48cab2.  call temp:= `getQ`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getQ:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48cab8.  v1:= temp @kind object;
  #L48caba.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48cac0.  v1:= temp @kind object;
  #L48cac2.  call `<init>`(v6, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48cac8.  v7:= new `java.math.BigInteger`;
  #L48cacc.  call temp:= `getDp`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getDp:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48cad2.  v1:= temp @kind object;
  #L48cad4.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48cada.  v1:= temp @kind object;
  #L48cadc.  call `<init>`(v7, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48cae2.  v8:= new `java.math.BigInteger`;
  #L48cae6.  call temp:= `getDq`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getDq:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48caec.  v1:= temp @kind object;
  #L48caee.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48caf4.  v1:= temp @kind object;
  #L48caf6.  call `<init>`(v8, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48cafc.  v9:= new `java.math.BigInteger`;
  #L48cb00.  call temp:= `getCrt`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getCrt:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48cb06.  v1:= temp @kind object;
  #L48cb08.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48cb0e.  v1:= temp @kind object;
  #L48cb10.  call `<init>`(v9, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48cb16.  v1:= v10 @kind object;
  #L48cb18.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Ljava/security/spec/RSAPrivateCrtKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L48cb1e.  call temp:= `generatePrivate`(v0, v10) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L48cb24.  v1:= temp @kind object;
  #L48cb26.  v1:= (`java.security.interfaces.RSAPrivateCrtKey`) v1 @kind object;
  #L48cb2a.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48cb30.  v2:= temp @kind object;
  #L48cb32.  call temp:= `getParams`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getParams:()Lcom/google/crypto/tink/proto/RsaSsaPssParams;` @kind virtual;
  #L48cb38.  v2:= temp @kind object;
  #L48cb3a.  v3:= new `com.google.crypto.tink.subtle.RsaSsaPssSignJce`;
  #L48cb3e.  call temp:= `getSigHash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSigHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48cb44.  v4:= temp @kind object;
  #L48cb46.  call temp:= `c`(v4) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48cb4c.  v4:= temp @kind object;
  #L48cb4e.  call temp:= `getMgf1Hash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getMgf1Hash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48cb54.  v5:= temp @kind object;
  #L48cb56.  call temp:= `c`(v5) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48cb5c.  v5:= temp @kind object;
  #L48cb5e.  call temp:= `getSaltLength`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSaltLength:()I` @kind virtual;
  #L48cb64.  v6:= temp;
  #L48cb66.  call `<init>`(v3, v1, v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.<init>:(Ljava/security/interfaces/RSAPrivateCrtKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/Enums$HashType;I)V` @kind direct;
  #L48cb6c.  v1:= new `java.security.spec.RSAPublicKeySpec`;
  #L48cb70.  v4:= new `java.math.BigInteger`;
  #L48cb74.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48cb7a.  v5:= temp @kind object;
  #L48cb7c.  call temp:= `getN`(v5) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getN:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48cb82.  v5:= temp @kind object;
  #L48cb84.  call temp:= `toByteArray`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48cb8a.  v5:= temp @kind object;
  #L48cb8c.  call `<init>`(v4, v11, v5) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48cb92.  v5:= new `java.math.BigInteger`;
  #L48cb96.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;` @kind virtual;
  #L48cb9c.  v13:= temp @kind object;
  #L48cb9e.  call temp:= `getE`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssPublicKey;.getE:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48cba4.  v13:= temp @kind object;
  #L48cba6.  call temp:= `toByteArray`(v13) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48cbac.  v13:= temp @kind object;
  #L48cbae.  call `<init>`(v5, v11, v13) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48cbb4.  call `<init>`(v1, v4, v5) @signature `Ljava/security/spec/RSAPublicKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L48cbba.  call temp:= `generatePublic`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L48cbc0.  v13:= temp @kind object;
  #L48cbc2.  v13:= (`java.security.interfaces.RSAPublicKey`) v13 @kind object;
  #L48cbc6.  v0:= new `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce`;
  #L48cbca.  call temp:= `getSigHash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSigHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48cbd0.  v1:= temp @kind object;
  #L48cbd2.  call temp:= `c`(v1) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48cbd8.  v1:= temp @kind object;
  #L48cbda.  call temp:= `getMgf1Hash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getMgf1Hash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48cbe0.  v4:= temp @kind object;
  #L48cbe2.  call temp:= `c`(v4) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48cbe8.  v4:= temp @kind object;
  #L48cbea.  call temp:= `getSaltLength`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSaltLength:()I` @kind virtual;
  #L48cbf0.  v2:= temp;
  #L48cbf2.  call `<init>`(v0, v13, v1, v4, v2) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.<init>:(Ljava/security/interfaces/RSAPublicKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/Enums$HashType;I)V` @kind direct;
  #L48cbf8.  call temp:= `b`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.b:()[B` @kind static;
  #L48cbfe.  v13:= temp @kind object;
  #L48cc00.  call temp:= `sign`(v3, v13) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.sign:([B)[B` @kind virtual;
  #L48cc06.  v13:= temp @kind object;
  #L48cc08.  call temp:= `b`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager;.b:()[B` @kind static;
  #L48cc0e.  v1:= temp @kind object;
  #L48cc10.  call `verify`(v0, v13, v1) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.verify:([B[B)V` @kind virtual;
  #L48cc16.  return v3 @kind object;
  #L48cc18.  v13:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L48cc1a.  v0:= new `java.lang.RuntimeException`;
  #L48cc1e.  v1:= new `java.lang.StringBuilder`;
  #L48cc22.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48cc28.  v2:= "Security bug: signing with private key followed by verifying with public key failed" @kind object;
  #L48cc2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc32.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc38.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48cc3e.  v13:= temp @kind object;
  #L48cc40.  call `<init>`(v0, v13) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48cc46.  throw v0;
  catch `java.security.GeneralSecurityException` @[L48cbf8..L48cc16] goto L48cc18;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.signature.RsaSsaPssSignKeyManager$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager$a;.getPrimitive:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48cc68.  v1:= (`com.google.crypto.tink.proto.RsaSsaPssPrivateKey`) v1 @kind object;
  #L48cc6c.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPssSignKeyManager$a;.b:(Lcom/google/crypto/tink/proto/RsaSsaPssPrivateKey;)Lcom/google/crypto/tink/PublicKeySign;` @kind virtual;
  #L48cc72.  v1:= temp @kind object;
  #L48cc74.  return v1 @kind object;
}
