record `com.google.crypto.tink.signature.f` @kind class @AccessFlag FINAL {
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$CurveType` `a`(`com.google.crypto.tink.proto.EllipticCurveType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48d6b4.  v0:= `@@com.google.crypto.tink.signature.f$a.b` @type ^`int`[] @kind object;
  #L48d6b8.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48d6be.  v1:= temp;
  #L48d6c0.  v0:= v0[v1];
  #L48d6c4.  v1:= 1I;
  #L48d6c6.  if v0 == v1 then goto L48d718;
  #L48d6ca.  v1:= 2I;
  #L48d6cc.  if v0 == v1 then goto L48d712;
  #L48d6d0.  v1:= 3I;
  #L48d6d2.  if v0 != v1 then goto L48d6dc;
  #L48d6d6.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P521` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L48d6da.  return v3 @kind object;
  #L48d6dc.  v0:= new `java.security.GeneralSecurityException`;
  #L48d6e0.  v1:= new `java.lang.StringBuilder`;
  #L48d6e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48d6ea.  v2:= "unknown curve type: " @kind object;
  #L48d6ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d6f4.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L48d6fa.  v3:= temp @kind object;
  #L48d6fc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d702.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48d708.  v3:= temp @kind object;
  #L48d70a.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d710.  throw v0;
  #L48d712.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P384` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L48d716.  return v3 @kind object;
  #L48d718.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P256` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L48d71c.  return v3 @kind object;
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding` `b`(`com.google.crypto.tink.proto.EcdsaSignatureEncoding` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.b:(Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;)Lcom/google/crypto/tink/subtle/EllipticCurves$EcdsaEncoding;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48d730.  v0:= `@@com.google.crypto.tink.signature.f$a.a` @type ^`int`[] @kind object;
  #L48d734.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48d73a.  v1:= temp;
  #L48d73c.  v0:= v0[v1];
  #L48d740.  v1:= 1I;
  #L48d742.  if v0 == v1 then goto L48d788;
  #L48d746.  v1:= 2I;
  #L48d748.  if v0 != v1 then goto L48d752;
  #L48d74c.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding.IEEE_P1363` @type ^`com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding` @kind object;
  #L48d750.  return v3 @kind object;
  #L48d752.  v0:= new `java.security.GeneralSecurityException`;
  #L48d756.  v1:= new `java.lang.StringBuilder`;
  #L48d75a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48d760.  v2:= "unknown ECDSA encoding: " @kind object;
  #L48d764.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d76a.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L48d770.  v3:= temp @kind object;
  #L48d772.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d778.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48d77e.  v3:= temp @kind object;
  #L48d780.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d786.  throw v0;
  #L48d788.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding.DER` @type ^`com.google.crypto.tink.subtle.EllipticCurves$EcdsaEncoding` @kind object;
  #L48d78c.  return v3 @kind object;
}
procedure `com.google.crypto.tink.subtle.Enums$HashType` `c`(`com.google.crypto.tink.proto.HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48d7a0.  v0:= `@@com.google.crypto.tink.signature.f$a.c` @type ^`int`[] @kind object;
  #L48d7a4.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48d7aa.  v1:= temp;
  #L48d7ac.  v0:= v0[v1];
  #L48d7b0.  v1:= 1I;
  #L48d7b2.  if v0 == v1 then goto L48d804;
  #L48d7b6.  v1:= 2I;
  #L48d7b8.  if v0 == v1 then goto L48d7fe;
  #L48d7bc.  v1:= 3I;
  #L48d7be.  if v0 != v1 then goto L48d7c8;
  #L48d7c2.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA512` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L48d7c6.  return v3 @kind object;
  #L48d7c8.  v0:= new `java.security.GeneralSecurityException`;
  #L48d7cc.  v1:= new `java.lang.StringBuilder`;
  #L48d7d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48d7d6.  v2:= "unsupported hash type: " @kind object;
  #L48d7da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d7e0.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L48d7e6.  v3:= temp @kind object;
  #L48d7e8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d7ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48d7f4.  v3:= temp @kind object;
  #L48d7f6.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d7fc.  throw v0;
  #L48d7fe.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA384` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L48d802.  return v3 @kind object;
  #L48d804.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA256` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L48d808.  return v3 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.EcdsaParams` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.d:(Lcom/google/crypto/tink/proto/EcdsaParams;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48d81c.  call temp:= `getEncoding`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getEncoding:()Lcom/google/crypto/tink/proto/EcdsaSignatureEncoding;` @kind virtual;
  #L48d822.  v0:= temp @kind object;
  #L48d824.  call temp:= `getHashType`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48d82a.  v1:= temp @kind object;
  #L48d82c.  call temp:= `getCurve`(v4) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getCurve:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L48d832.  v4:= temp @kind object;
  #L48d834.  v2:= `@@com.google.crypto.tink.signature.f$a.a` @type ^`int`[] @kind object;
  #L48d838.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48d83e.  v0:= temp;
  #L48d840.  v0:= v2[v0];
  #L48d844.  v2:= 2I;
  #L48d846.  v3:= 1I;
  #L48d848.  if v0 == v3 then goto L48d862;
  #L48d84c.  if v0 != v2 then goto L48d852;
  #L48d850.  goto L48d862;
  #L48d852.  v4:= new `java.security.GeneralSecurityException`;
  #L48d856.  v0:= "unsupported signature encoding" @kind object;
  #L48d85a.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d860.  throw v4;
  #L48d862.  v0:= `@@com.google.crypto.tink.signature.f$a.b` @type ^`int`[] @kind object;
  #L48d866.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48d86c.  v4:= temp;
  #L48d86e.  v4:= v0[v4];
  #L48d872.  v0:= "Invalid ECDSA parameters" @kind object;
  #L48d876.  if v4 == v3 then goto L48d8c4;
  #L48d87a.  if v4 == v2 then goto L48d8a6;
  #L48d87e.  v2:= 3I;
  #L48d880.  if v4 != v2 then goto L48d89a;
  #L48d884.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d888.  if v1 != v4 then goto L48d88e;
  #L48d88c.  goto L48d8cc;
  #L48d88e.  v4:= new `java.security.GeneralSecurityException`;
  #L48d892.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d898.  throw v4;
  #L48d89a.  v4:= new `java.security.GeneralSecurityException`;
  #L48d89e.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d8a4.  throw v4;
  #L48d8a6.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA384` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d8aa.  if v1 == v4 then goto L48d8cc;
  #L48d8ae.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d8b2.  if v1 != v4 then goto L48d8b8;
  #L48d8b6.  goto L48d8cc;
  #L48d8b8.  v4:= new `java.security.GeneralSecurityException`;
  #L48d8bc.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d8c2.  throw v4;
  #L48d8c4.  v4:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48d8c8.  if v1 != v4 then goto L48d8ce;
  #L48d8cc.  return @kind void;
  #L48d8ce.  v4:= new `java.security.GeneralSecurityException`;
  #L48d8d2.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d8d8.  throw v4;
}
procedure `void` `e`(`com.google.crypto.tink.proto.RsaSsaPkcs1Params` v0 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.e:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48d8ec.  call temp:= `getHashType`(v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48d8f2.  v0:= temp @kind object;
  #L48d8f4.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48d8fa.  return @kind void;
}
procedure `void` `f`(`com.google.crypto.tink.proto.RsaSsaPssParams` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/f;.f:(Lcom/google/crypto/tink/proto/RsaSsaPssParams;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48d90c.  call temp:= `getSigHash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSigHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48d912.  v0:= temp @kind object;
  #L48d914.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48d91a.  call temp:= `getSigHash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSigHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48d920.  v0:= temp @kind object;
  #L48d922.  call temp:= `getMgf1Hash`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getMgf1Hash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48d928.  v1:= temp @kind object;
  #L48d92a.  if v0 != v1 then goto L48d94c;
  #L48d92e.  call temp:= `getSaltLength`(v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPssParams;.getSaltLength:()I` @kind virtual;
  #L48d934.  v2:= temp;
  #L48d936.  if v2 < 0 then goto L48d93c;
  #L48d93a.  return @kind void;
  #L48d93c.  v2:= new `java.security.GeneralSecurityException`;
  #L48d940.  v0:= "salt length is negative" @kind object;
  #L48d944.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d94a.  throw v2;
  #L48d94c.  v2:= new `java.security.GeneralSecurityException`;
  #L48d950.  v0:= "MGF1 hash is different from signature hash" @kind object;
  #L48d954.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d95a.  throw v2;
}
