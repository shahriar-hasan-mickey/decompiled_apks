record `com.google.crypto.tink.signature.EcdsaSignKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.signature.EcdsaSignKeyManager` `com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.signature.EcdsaSignKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.<init>:(Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48b024.  v0.`com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @type ^`com.google.crypto.tink.signature.EcdsaSignKeyManager` := v1 @kind object;
  #L48b028.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48b02e.  return @kind void;
}
procedure `com.google.crypto.tink.proto.EcdsaPrivateKey` `a`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v4 @kind this, `com.google.crypto.tink.proto.EcdsaKeyFormat` v5 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.a:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48aed4.  call temp:= `getParams`(v5) @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L48aeda.  v5:= temp @kind object;
  #L48aedc.  call temp:= `getCurve`(v5) @signature `Lcom/google/crypto/tink/proto/EcdsaParams;.getCurve:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L48aee2.  v0:= temp @kind object;
  #L48aee4.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/signature/f;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @kind static;
  #L48aeea.  v0:= temp @kind object;
  #L48aeec.  call temp:= `generateKeyPair`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/KeyPair;` @kind static;
  #L48aef2.  v0:= temp @kind object;
  #L48aef4.  call temp:= `getPublic`(v0) @signature `Ljava/security/KeyPair;.getPublic:()Ljava/security/PublicKey;` @kind virtual;
  #L48aefa.  v1:= temp @kind object;
  #L48aefc.  v1:= (`java.security.interfaces.ECPublicKey`) v1 @kind object;
  #L48af00.  call temp:= `getPrivate`(v0) @signature `Ljava/security/KeyPair;.getPrivate:()Ljava/security/PrivateKey;` @kind virtual;
  #L48af06.  v0:= temp @kind object;
  #L48af08.  v0:= (`java.security.interfaces.ECPrivateKey`) v0 @kind object;
  #L48af0c.  call temp:= `getW`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L48af12.  v1:= temp @kind object;
  #L48af14.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind static;
  #L48af1a.  v2:= temp @kind object;
  #L48af1c.  v3:= v4.`com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @type ^`com.google.crypto.tink.signature.EcdsaSignKeyManager` @kind object;
  #L48af20.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getVersion:()I` @kind virtual;
  #L48af26.  v3:= temp;
  #L48af28.  call temp:= `setVersion`(v2, v3) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48af2e.  v2:= temp @kind object;
  #L48af30.  call temp:= `setParams`(v2, v5) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/EcdsaParams;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48af36.  v5:= temp @kind object;
  #L48af38.  call temp:= `getAffineX`(v1) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L48af3e.  v2:= temp @kind object;
  #L48af40.  call temp:= `toByteArray`(v2) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48af46.  v2:= temp @kind object;
  #L48af48.  call temp:= `copyFrom`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48af4e.  v2:= temp @kind object;
  #L48af50.  call temp:= `setX`(v5, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setX:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48af56.  v5:= temp @kind object;
  #L48af58.  call temp:= `getAffineY`(v1) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L48af5e.  v1:= temp @kind object;
  #L48af60.  call temp:= `toByteArray`(v1) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48af66.  v1:= temp @kind object;
  #L48af68.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48af6e.  v1:= temp @kind object;
  #L48af70.  call temp:= `setY`(v5, v1) @signature `Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;.setY:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPublicKey$Builder;` @kind virtual;
  #L48af76.  v5:= temp @kind object;
  #L48af78.  call temp:= `build`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48af7e.  v5:= temp @kind object;
  #L48af80.  v5:= (`com.google.crypto.tink.proto.EcdsaPublicKey`) v5 @kind object;
  #L48af84.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey;.newBuilder:()Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind static;
  #L48af8a.  v1:= temp @kind object;
  #L48af8c.  v2:= v4.`com.google.crypto.tink.signature.EcdsaSignKeyManager$b.b` @type ^`com.google.crypto.tink.signature.EcdsaSignKeyManager` @kind object;
  #L48af90.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager;.getVersion:()I` @kind virtual;
  #L48af96.  v2:= temp;
  #L48af98.  call temp:= `setVersion`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind virtual;
  #L48af9e.  v1:= temp @kind object;
  #L48afa0.  call temp:= `setPublicKey`(v1, v5) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;.setPublicKey:(Lcom/google/crypto/tink/proto/EcdsaPublicKey;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind virtual;
  #L48afa6.  v5:= temp @kind object;
  #L48afa8.  call temp:= `getS`(v0) @signature `Ljava/security/interfaces/ECPrivateKey;.getS:()Ljava/math/BigInteger;` @kind interface;
  #L48afae.  v0:= temp @kind object;
  #L48afb0.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48afb6.  v0:= temp @kind object;
  #L48afb8.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48afbe.  v0:= temp @kind object;
  #L48afc0.  call temp:= `setKeyValue`(v5, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey$Builder;` @kind virtual;
  #L48afc6.  v5:= temp @kind object;
  #L48afc8.  call temp:= `build`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48afce.  v5:= temp @kind object;
  #L48afd0.  v5:= (`com.google.crypto.tink.proto.EcdsaPrivateKey`) v5 @kind object;
  #L48afd4.  return v5 @kind object;
}
procedure `com.google.crypto.tink.proto.EcdsaKeyFormat` `b`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48aeb0.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L48aeb6.  v0:= temp @kind object;
  #L48aeb8.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/EcdsaKeyFormat;` @kind static;
  #L48aebe.  v2:= temp @kind object;
  #L48aec0.  return v2 @kind object;
}
procedure `void` `c`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.proto.EcdsaKeyFormat` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.c:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)V` @AccessFlag PUBLIC {
    temp;

  #L48b040.  call temp:= `getParams`(v1) @signature `Lcom/google/crypto/tink/proto/EcdsaKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/EcdsaParams;` @kind virtual;
  #L48b046.  v1:= temp @kind object;
  #L48b048.  call `d`(v1) @signature `Lcom/google/crypto/tink/signature/f;.d:(Lcom/google/crypto/tink/proto/EcdsaParams;)V` @kind static;
  #L48b04e.  return @kind void;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48b004.  v1:= (`com.google.crypto.tink.proto.EcdsaKeyFormat`) v1 @kind object;
  #L48b008.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.a:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)Lcom/google/crypto/tink/proto/EcdsaPrivateKey;` @kind virtual;
  #L48b00e.  v1:= temp @kind object;
  #L48b010.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48afe8.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EcdsaKeyFormat;` @kind virtual;
  #L48afee.  v1:= temp @kind object;
  #L48aff0.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.signature.EcdsaSignKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48b060.  v1:= (`com.google.crypto.tink.proto.EcdsaKeyFormat`) v1 @kind object;
  #L48b064.  call `c`(v0, v1) @signature `Lcom/google/crypto/tink/signature/EcdsaSignKeyManager$b;.c:(Lcom/google/crypto/tink/proto/EcdsaKeyFormat;)V` @kind virtual;
  #L48b06a.  return @kind void;
}
