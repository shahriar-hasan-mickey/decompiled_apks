record `com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PrivateKeyTypeManager` @kind class {
}
global `byte`[] `@@com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48c6ac.  v0:= "UTF-8" @kind object;
  #L48c6b0.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L48c6b6.  v0:= temp @kind object;
  #L48c6b8.  v1:= "Tink and Wycheproof." @kind object;
  #L48c6bc.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L48c6c2.  v0:= temp @kind object;
  #L48c6c4.  `@@com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager.e` @type ^`byte`[] := v0 @kind object;
  #L48c6c8.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v5 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48c6dc.  v0:= constclass @type ^`com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey` @kind object;
  #L48c6e0.  v1:= constclass @type ^`com.google.crypto.tink.proto.RsaSsaPkcs1PublicKey` @kind object;
  #L48c6e4.  v2:= 1I;
  #L48c6e6.  v2:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v2];
  #L48c6ea.  v3:= new `com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager$a`;
  #L48c6ee.  v4:= constclass @type ^`com.google.crypto.tink.PublicKeySign` @kind object;
  #L48c6f2.  call `<init>`(v3, v4) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48c6f8.  v4:= 0I;
  #L48c6fa.  v2[v4]:= v3 @kind object;
  #L48c6fe.  call `<init>`(v5, v0, v1, v2) @signature `Lcom/google/crypto/tink/PrivateKeyTypeManager;.<init>:(Ljava/lang/Class;Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L48c704.  return @kind void;
}
procedure `byte`[] `b`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.b:()[B` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L48c478.  v0:= `@@com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager.e` @type ^`byte`[] @kind object;
  #L48c47c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`com.google.crypto.tink.proto.HashType` v1 @kind object, `int` v2 , `java.math.BigInteger` v3 @kind object, `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;ILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L48c490.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;` @kind static;
  #L48c496.  v0:= temp @kind object;
  #L48c498.  call temp:= `setHashType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;.setHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params$Builder;` @kind virtual;
  #L48c49e.  v1:= temp @kind object;
  #L48c4a0.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48c4a6.  v1:= temp @kind object;
  #L48c4a8.  v1:= (`com.google.crypto.tink.proto.RsaSsaPkcs1Params`) v1 @kind object;
  #L48c4ac.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat$Builder;` @kind static;
  #L48c4b2.  v0:= temp @kind object;
  #L48c4b4.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat$Builder;` @kind virtual;
  #L48c4ba.  v1:= temp @kind object;
  #L48c4bc.  call temp:= `setModulusSizeInBits`(v1, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat$Builder;.setModulusSizeInBits:(I)Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat$Builder;` @kind virtual;
  #L48c4c2.  v1:= temp @kind object;
  #L48c4c4.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L48c4ca.  v2:= temp @kind object;
  #L48c4cc.  call temp:= `copyFrom`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48c4d2.  v2:= temp @kind object;
  #L48c4d4.  call temp:= `setPublicExponent`(v1, v2) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat$Builder;.setPublicExponent:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1KeyFormat$Builder;` @kind virtual;
  #L48c4da.  v1:= temp @kind object;
  #L48c4dc.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48c4e2.  v1:= temp @kind object;
  #L48c4e4.  v1:= (`com.google.crypto.tink.proto.RsaSsaPkcs1KeyFormat`) v1 @kind object;
  #L48c4e8.  v2:= new `com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager`;
  #L48c4ec.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.<init>:()V` @kind direct;
  #L48c4f2.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L48c4f8.  v2:= temp @kind object;
  #L48c4fa.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L48c500.  v1:= temp @kind object;
  #L48c502.  call temp:= `create`(v2, v1, v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48c508.  v1:= temp @kind object;
  #L48c50a.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawRsa3072SsaPkcs1Sha256F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.rawRsa3072SsaPkcs1Sha256F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48c51c.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48c520.  v1:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48c524.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48c528.  v3:= 3072I;
  #L48c52c.  call temp:= `c`(v0, v3, v1, v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;ILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48c532.  v0:= temp @kind object;
  #L48c534.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawRsa4096SsaPkcs1Sha512F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.rawRsa4096SsaPkcs1Sha512F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48c548.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48c54c.  v1:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48c550.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48c554.  v3:= 4096I;
  #L48c558.  call temp:= `c`(v0, v3, v1, v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;ILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48c55e.  v0:= temp @kind object;
  #L48c560.  return v0 @kind object;
}
procedure `void` `registerPair`(`boolean` v2 ) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.registerPair:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c718.  v0:= new `com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager`;
  #L48c71c.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.<init>:()V` @kind direct;
  #L48c722.  v1:= new `com.google.crypto.tink.signature.d`;
  #L48c726.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/signature/d;.<init>:()V` @kind direct;
  #L48c72c.  call `registerAsymmetricKeyManagers`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.registerAsymmetricKeyManagers:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L48c732.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `rsa3072SsaPkcs1Sha256F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.rsa3072SsaPkcs1Sha256F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48c574.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48c578.  v1:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48c57c.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48c580.  v3:= 3072I;
  #L48c584.  call temp:= `c`(v0, v3, v1, v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;ILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48c58a.  v0:= temp @kind object;
  #L48c58c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rsa4096SsaPkcs1Sha512F4Template`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.rsa4096SsaPkcs1Sha512F4Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48c5a0.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48c5a4.  v1:= `@@java.security.spec.RSAKeyGenParameterSpec.F4` @type ^`java.math.BigInteger` @kind object;
  #L48c5a8.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48c5ac.  v3:= 4096I;
  #L48c5b0.  call temp:= `c`(v0, v3, v1, v2) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.c:(Lcom/google/crypto/tink/proto/HashType;ILjava/math/BigInteger;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48c5b6.  v0:= temp @kind object;
  #L48c5b8.  return v0 @kind object;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c694.  v0:= "type.googleapis.com/google.crypto.tink.RsaSsaPkcs1PrivateKey" @kind object;
  #L48c698.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.RsaSsaPkcs1PublicKey` `getPublicKey`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v0 @kind this, `com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @AccessFlag PUBLIC {
    temp;

  #L48c628.  call temp:= `getPublicKey`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c62e.  v1:= temp @kind object;
  #L48c630.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `getPublicKey`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48c644.  v1:= (`com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey`) v1 @kind object;
  #L48c648.  call temp:= `getPublicKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c64e.  v1:= temp @kind object;
  #L48c650.  return v1 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c680.  v0:= 0I;
  #L48c682.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48c5cc.  v0:= new `com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager$b`;
  #L48c5d0.  v1:= constclass @type ^`com.google.crypto.tink.proto.RsaSsaPkcs1KeyFormat` @kind object;
  #L48c5d4.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager$b;.<init>:(Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L48c5da.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c5ec.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L48c5f0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey` `parseKey`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c604.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L48c60a.  v0:= temp @kind object;
  #L48c60c.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;` @kind static;
  #L48c612.  v2:= temp @kind object;
  #L48c614.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48c664.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;` @kind virtual;
  #L48c66a.  v1:= temp @kind object;
  #L48c66c.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v3 @kind this, `com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey` v4 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48c744.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getVersion:()I` @kind virtual;
  #L48c74a.  v0:= temp;
  #L48c74c.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.getVersion:()I` @kind virtual;
  #L48c752.  v1:= temp;
  #L48c754.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L48c75a.  v0:= new `java.math.BigInteger`;
  #L48c75e.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c764.  v1:= temp @kind object;
  #L48c766.  call temp:= `getN`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getN:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48c76c.  v1:= temp @kind object;
  #L48c76e.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48c774.  v1:= temp @kind object;
  #L48c776.  v2:= 1I;
  #L48c778.  call `<init>`(v0, v2, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48c77e.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L48c784.  v0:= temp;
  #L48c786.  call `validateRsaModulusSize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @kind static;
  #L48c78c.  v0:= new `java.math.BigInteger`;
  #L48c790.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c796.  v1:= temp @kind object;
  #L48c798.  call temp:= `getE`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getE:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48c79e.  v1:= temp @kind object;
  #L48c7a0.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48c7a6.  v1:= temp @kind object;
  #L48c7a8.  call `<init>`(v0, v2, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48c7ae.  call `validateRsaPublicExponent`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @kind static;
  #L48c7b4.  call temp:= `getPublicKey`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c7ba.  v4:= temp @kind object;
  #L48c7bc.  call temp:= `getParams`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getParams:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;` @kind virtual;
  #L48c7c2.  v4:= temp @kind object;
  #L48c7c4.  call `e`(v4) @signature `Lcom/google/crypto/tink/signature/f;.e:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;)V` @kind static;
  #L48c7ca.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48c7dc.  v1:= (`com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey`) v1 @kind object;
  #L48c7e0.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;)V` @kind virtual;
  #L48c7e6.  return @kind void;
}
