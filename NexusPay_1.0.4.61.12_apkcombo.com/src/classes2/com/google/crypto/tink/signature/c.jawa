record `com.google.crypto.tink.signature.c` @kind class @AccessFlag  extends `com.google.crypto.tink.PrimitiveWrapper` @kind interface {
}
global `java.util.logging.Logger` `@@com.google.crypto.tink.signature.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/signature/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L48bee0.  v0:= constclass @type ^`com.google.crypto.tink.signature.c` @kind object;
  #L48bee4.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L48beea.  v0:= temp @kind object;
  #L48beec.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L48bef2.  v0:= temp @kind object;
  #L48bef4.  `@@com.google.crypto.tink.signature.c.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L48bef8.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.c` v0 @kind this) @signature `Lcom/google/crypto/tink/signature/c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48bf0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48bf12.  return @kind void;
}
procedure `java.util.logging.Logger` `a`() @signature `Lcom/google/crypto/tink/signature/c;.a:()Ljava/util/logging/Logger;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L48bec8.  v0:= `@@com.google.crypto.tink.signature.c.a` @type ^`java.util.logging.Logger` @kind object;
  #L48becc.  return v0 @kind object;
}
procedure `void` `b`() @signature `Lcom/google/crypto/tink/signature/c;.b:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48bf24.  v0:= new `com.google.crypto.tink.signature.c`;
  #L48bf28.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/signature/c;.<init>:()V` @kind direct;
  #L48bf2e.  call `registerPrimitiveWrapper`(v0) @signature `Lcom/google/crypto/tink/Registry;.registerPrimitiveWrapper:(Lcom/google/crypto/tink/PrimitiveWrapper;)V` @kind static;
  #L48bf34.  return @kind void;
}
procedure `com.google.crypto.tink.PublicKeyVerify` `c`(`com.google.crypto.tink.signature.c` v1 @kind this, `com.google.crypto.tink.PrimitiveSet` v2 @kind object) @signature `Lcom/google/crypto/tink/signature/c;.c:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/PublicKeyVerify;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48be60.  v0:= new `com.google.crypto.tink.signature.c$a`;
  #L48be64.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/signature/c$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @kind direct;
  #L48be6a.  return v0 @kind object;
}
procedure `java.lang.Class` `getInputPrimitiveClass`(`com.google.crypto.tink.signature.c` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/c;.getInputPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48be7c.  v0:= constclass @type ^`com.google.crypto.tink.PublicKeyVerify` @kind object;
  #L48be80.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimitiveClass`(`com.google.crypto.tink.signature.c` v1 @kind this) @signature `Lcom/google/crypto/tink/signature/c;.getPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48be94.  v0:= constclass @type ^`com.google.crypto.tink.PublicKeyVerify` @kind object;
  #L48be98.  return v0 @kind object;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.signature.c` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/c;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48beac.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/signature/c;.c:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/PublicKeyVerify;` @kind virtual;
  #L48beb2.  v1:= temp @kind object;
  #L48beb4.  return v1 @kind object;
}
