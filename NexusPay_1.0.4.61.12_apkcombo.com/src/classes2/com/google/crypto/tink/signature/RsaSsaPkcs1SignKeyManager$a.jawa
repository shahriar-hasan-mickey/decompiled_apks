record `com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager$a` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager$a` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager$a;.<init>:(Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48c194.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48c19a.  return @kind void;
}
procedure `com.google.crypto.tink.PublicKeySign` `b`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager$a` v12 @kind this, `com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey` v13 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager$a;.b:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;)Lcom/google/crypto/tink/PublicKeySign;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L48bf48.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L48bf4c.  v1:= "RSA" @kind object;
  #L48bf50.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L48bf56.  v0:= temp @kind object;
  #L48bf58.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L48bf5c.  v10:= new `java.security.spec.RSAPrivateCrtKeySpec`;
  #L48bf60.  v2:= new `java.math.BigInteger`;
  #L48bf64.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48bf6a.  v1:= temp @kind object;
  #L48bf6c.  call temp:= `getN`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getN:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48bf72.  v1:= temp @kind object;
  #L48bf74.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48bf7a.  v1:= temp @kind object;
  #L48bf7c.  v11:= 1I;
  #L48bf7e.  call `<init>`(v2, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48bf84.  v3:= new `java.math.BigInteger`;
  #L48bf88.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48bf8e.  v1:= temp @kind object;
  #L48bf90.  call temp:= `getE`(v1) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getE:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48bf96.  v1:= temp @kind object;
  #L48bf98.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48bf9e.  v1:= temp @kind object;
  #L48bfa0.  call `<init>`(v3, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48bfa6.  v4:= new `java.math.BigInteger`;
  #L48bfaa.  call temp:= `getD`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getD:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48bfb0.  v1:= temp @kind object;
  #L48bfb2.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48bfb8.  v1:= temp @kind object;
  #L48bfba.  call `<init>`(v4, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48bfc0.  v5:= new `java.math.BigInteger`;
  #L48bfc4.  call temp:= `getP`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getP:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48bfca.  v1:= temp @kind object;
  #L48bfcc.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48bfd2.  v1:= temp @kind object;
  #L48bfd4.  call `<init>`(v5, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48bfda.  v6:= new `java.math.BigInteger`;
  #L48bfde.  call temp:= `getQ`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getQ:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48bfe4.  v1:= temp @kind object;
  #L48bfe6.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48bfec.  v1:= temp @kind object;
  #L48bfee.  call `<init>`(v6, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48bff4.  v7:= new `java.math.BigInteger`;
  #L48bff8.  call temp:= `getDp`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getDp:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48bffe.  v1:= temp @kind object;
  #L48c000.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48c006.  v1:= temp @kind object;
  #L48c008.  call `<init>`(v7, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48c00e.  v8:= new `java.math.BigInteger`;
  #L48c012.  call temp:= `getDq`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getDq:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48c018.  v1:= temp @kind object;
  #L48c01a.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48c020.  v1:= temp @kind object;
  #L48c022.  call `<init>`(v8, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48c028.  v9:= new `java.math.BigInteger`;
  #L48c02c.  call temp:= `getCrt`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getCrt:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48c032.  v1:= temp @kind object;
  #L48c034.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48c03a.  v1:= temp @kind object;
  #L48c03c.  call `<init>`(v9, v11, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48c042.  v1:= v10 @kind object;
  #L48c044.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Ljava/security/spec/RSAPrivateCrtKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L48c04a.  call temp:= `generatePrivate`(v0, v10) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L48c050.  v1:= temp @kind object;
  #L48c052.  v1:= (`java.security.interfaces.RSAPrivateCrtKey`) v1 @kind object;
  #L48c056.  v2:= new `com.google.crypto.tink.subtle.RsaSsaPkcs1SignJce`;
  #L48c05a.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c060.  v3:= temp @kind object;
  #L48c062.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getParams:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;` @kind virtual;
  #L48c068.  v3:= temp @kind object;
  #L48c06a.  call temp:= `getHashType`(v3) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48c070.  v3:= temp @kind object;
  #L48c072.  call temp:= `c`(v3) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48c078.  v3:= temp @kind object;
  #L48c07a.  call `<init>`(v2, v1, v3) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1SignJce;.<init>:(Ljava/security/interfaces/RSAPrivateCrtKey;Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind direct;
  #L48c080.  v1:= new `java.security.spec.RSAPublicKeySpec`;
  #L48c084.  v3:= new `java.math.BigInteger`;
  #L48c088.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c08e.  v4:= temp @kind object;
  #L48c090.  call temp:= `getN`(v4) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getN:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48c096.  v4:= temp @kind object;
  #L48c098.  call temp:= `toByteArray`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48c09e.  v4:= temp @kind object;
  #L48c0a0.  call `<init>`(v3, v11, v4) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48c0a6.  v4:= new `java.math.BigInteger`;
  #L48c0aa.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c0b0.  v5:= temp @kind object;
  #L48c0b2.  call temp:= `getE`(v5) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getE:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48c0b8.  v5:= temp @kind object;
  #L48c0ba.  call temp:= `toByteArray`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L48c0c0.  v5:= temp @kind object;
  #L48c0c2.  call `<init>`(v4, v11, v5) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L48c0c8.  call `<init>`(v1, v3, v4) @signature `Ljava/security/spec/RSAPublicKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L48c0ce.  call temp:= `generatePublic`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L48c0d4.  v0:= temp @kind object;
  #L48c0d6.  v0:= (`java.security.interfaces.RSAPublicKey`) v0 @kind object;
  #L48c0da.  v1:= new `com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce`;
  #L48c0de.  call temp:= `getPublicKey`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;` @kind virtual;
  #L48c0e4.  v13:= temp @kind object;
  #L48c0e6.  call temp:= `getParams`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1PublicKey;.getParams:()Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;` @kind virtual;
  #L48c0ec.  v13:= temp @kind object;
  #L48c0ee.  call temp:= `getHashType`(v13) @signature `Lcom/google/crypto/tink/proto/RsaSsaPkcs1Params;.getHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48c0f4.  v13:= temp @kind object;
  #L48c0f6.  call temp:= `c`(v13) @signature `Lcom/google/crypto/tink/signature/f;.c:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L48c0fc.  v13:= temp @kind object;
  #L48c0fe.  call `<init>`(v1, v0, v13) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.<init>:(Ljava/security/interfaces/RSAPublicKey;Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind direct;
  #L48c104.  call temp:= `b`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.b:()[B` @kind static;
  #L48c10a.  v13:= temp @kind object;
  #L48c10c.  call temp:= `sign`(v2, v13) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1SignJce;.sign:([B)[B` @kind virtual;
  #L48c112.  v13:= temp @kind object;
  #L48c114.  call temp:= `b`() @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager;.b:()[B` @kind static;
  #L48c11a.  v0:= temp @kind object;
  #L48c11c.  call `verify`(v1, v13, v0) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.verify:([B[B)V` @kind virtual;
  #L48c122.  return v2 @kind object;
  #L48c124.  v13:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L48c126.  v0:= new `java.lang.RuntimeException`;
  #L48c12a.  v1:= new `java.lang.StringBuilder`;
  #L48c12e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c134.  v2:= "Security bug: signing with private key followed by verifying with public key failed" @kind object;
  #L48c138.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c13e.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c144.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c14a.  v13:= temp @kind object;
  #L48c14c.  call `<init>`(v0, v13) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48c152.  throw v0;
  catch `java.security.GeneralSecurityException` @[L48c104..L48c122] goto L48c124;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.signature.RsaSsaPkcs1SignKeyManager$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager$a;.getPrimitive:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48c174.  v1:= (`com.google.crypto.tink.proto.RsaSsaPkcs1PrivateKey`) v1 @kind object;
  #L48c178.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager$a;.b:(Lcom/google/crypto/tink/proto/RsaSsaPkcs1PrivateKey;)Lcom/google/crypto/tink/PublicKeySign;` @kind virtual;
  #L48c17e.  v1:= temp @kind object;
  #L48c180.  return v1 @kind object;
}
