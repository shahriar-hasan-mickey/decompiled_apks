record `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.crypto.tink.KeysetReader` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @AccessFlag PRIVATE;
  `com.google.crypto.tink.KeysetWriter` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @AccessFlag PRIVATE;
  `java.lang.String` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @AccessFlag PRIVATE;
  `com.google.crypto.tink.Aead` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @AccessFlag PRIVATE;
  `com.google.crypto.tink.KeyTemplate` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @AccessFlag PRIVATE;
  `java.security.KeyStore` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @AccessFlag PRIVATE;
  `com.google.crypto.tink.KeysetManager` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v2 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42e58c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42e592.  v0:= 0I;
  #L42e594.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` := v0 @kind object;
  #L42e598.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` := v0 @kind object;
  #L42e59c.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` := v0 @kind object;
  #L42e5a0.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` := v0 @kind object;
  #L42e5a4.  v1:= 1I;
  #L42e5a6.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @type ^`boolean` := v1 @kind boolean;
  #L42e5aa.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` := v0 @kind object;
  #L42e5ae.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @type ^`java.security.KeyStore` := v0 @kind object;
  #L42e5b2.  return @kind void;
}
procedure `com.google.crypto.tink.KeysetWriter` `a`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.a:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;)Lcom/google/crypto/tink/KeysetWriter;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L42e3f8.  v0:= v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` @kind object;
  #L42e3fc.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Aead` `b`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.b:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;)Lcom/google/crypto/tink/Aead;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L42e188.  v0:= v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42e18c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetManager` `c`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.c:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;)Lcom/google/crypto/tink/KeysetManager;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L42e2ac.  v0:= v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.h` @type ^`com.google.crypto.tink.KeysetManager` @kind object;
  #L42e2b0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetManager` `d`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v3 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.d:()Lcom/google/crypto/tink/KeysetManager;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L42e2c4.  v0:= v3.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42e2c8.  if v0 == 0 then goto L42e2fa;
  #L42e2cc.  v1:= v3.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` @kind object;
  #L42e2d0.  call temp:= `read`(v1, v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.read:(Lcom/google/crypto/tink/KeysetReader;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L42e2d6.  v0:= temp @kind object;
  #L42e2d8.  call temp:= `withKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.withKeysetHandle:(Lcom/google/crypto/tink/KeysetHandle;)Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L42e2de.  v0:= temp @kind object;
  #L42e2e0.  return v0 @kind object;
  #L42e2e2.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L42e2e4.  goto L42e2e8;
  #L42e2e6.  v0:= Exception @type ^`com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @kind object;
  #L42e2e8.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L42e2ee.  v1:= temp @kind object;
  #L42e2f0.  v2:= "cannot decrypt keyset: " @kind object;
  #L42e2f4.  call temp:= `w`(v1, v2, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L42e2fa.  v0:= v3.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` @kind object;
  #L42e2fe.  call temp:= `read`(v0) @signature `Lcom/google/crypto/tink/CleartextKeysetHandle;.read:(Lcom/google/crypto/tink/KeysetReader;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L42e304.  v0:= temp @kind object;
  #L42e306.  call temp:= `withKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.withKeysetHandle:(Lcom/google/crypto/tink/KeysetHandle;)Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L42e30c.  v0:= temp @kind object;
  #L42e30e.  return v0 @kind object;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L42e2cc..L42e2e0] goto L42e2e6;
  catch `java.security.GeneralSecurityException` @[L42e2cc..L42e2e0] goto L42e2e2;
}
procedure `com.google.crypto.tink.KeysetManager` `e`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v4 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.e:()Lcom/google/crypto/tink/KeysetManager;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42e330.  call temp:= `d`(v4) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.d:()Lcom/google/crypto/tink/KeysetManager;` @kind direct;
  #L42e336.  v0:= temp @kind object;
  #L42e338.  return v0 @kind object;
  #L42e33a.  v0:= Exception @type ^`java.io.FileNotFoundException` @kind object;
  #L42e33c.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L42e342.  v1:= temp @kind object;
  #L42e344.  v2:= "keyset not found, will generate a new one" @kind object;
  #L42e348.  call temp:= `w`(v1, v2, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L42e34e.  v0:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` @kind object;
  #L42e352.  if v0 == 0 then goto L42e3c8;
  #L42e356.  call temp:= `withEmptyKeyset`() @signature `Lcom/google/crypto/tink/KeysetManager;.withEmptyKeyset:()Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L42e35c.  v0:= temp @kind object;
  #L42e35e.  v1:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` @kind object;
  #L42e362.  call temp:= `add`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.add:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L42e368.  v0:= temp @kind object;
  #L42e36a.  call temp:= `getKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L42e370.  v1:= temp @kind object;
  #L42e372.  call temp:= `getKeysetInfo`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.getKeysetInfo:()Lcom/google/crypto/tink/proto/KeysetInfo;` @kind virtual;
  #L42e378.  v1:= temp @kind object;
  #L42e37a.  v2:= 0I;
  #L42e37c.  call temp:= `getKeyInfo`(v1, v2) @signature `Lcom/google/crypto/tink/proto/KeysetInfo;.getKeyInfo:(I)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;` @kind virtual;
  #L42e382.  v1:= temp @kind object;
  #L42e384.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;.getKeyId:()I` @kind virtual;
  #L42e38a.  v1:= temp;
  #L42e38c.  call temp:= `setPrimary`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.setPrimary:(I)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L42e392.  v0:= temp @kind object;
  #L42e394.  v1:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42e398.  if v1 == 0 then goto L42e3b4;
  #L42e39c.  call temp:= `getKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L42e3a2.  v1:= temp @kind object;
  #L42e3a4.  v2:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` @kind object;
  #L42e3a8.  v3:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42e3ac.  call `write`(v1, v2, v3) @signature `Lcom/google/crypto/tink/KeysetHandle;.write:(Lcom/google/crypto/tink/KeysetWriter;Lcom/google/crypto/tink/Aead;)V` @kind virtual;
  #L42e3b2.  goto L42e3c6;
  #L42e3b4.  call temp:= `getKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L42e3ba.  v1:= temp @kind object;
  #L42e3bc.  v2:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` @kind object;
  #L42e3c0.  call `write`(v1, v2) @signature `Lcom/google/crypto/tink/CleartextKeysetHandle;.write:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeysetWriter;)V` @kind static;
  #L42e3c6.  return v0 @kind object;
  #L42e3c8.  v0:= new `java.security.GeneralSecurityException`;
  #L42e3cc.  v1:= "cannot read or generate keyset" @kind object;
  #L42e3d0.  call `<init>`(v0, v1) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e3d6.  throw v0;
  catch `java.io.FileNotFoundException` @[L42e330..L42e338] goto L42e33a;
}
procedure `com.google.crypto.tink.Aead` `f`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v5 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.f:()Lcom/google/crypto/tink/Aead;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42e1a0.  call temp:= `b`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.b:()Z` @kind static;
  #L42e1a6.  v0:= temp;
  #L42e1a8.  v1:= 0I;
  #L42e1aa.  if v0 != 0 then goto L42e1c2;
  #L42e1ae.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L42e1b4.  v0:= temp @kind object;
  #L42e1b6.  v2:= "Android Keystore requires at least Android M" @kind object;
  #L42e1ba.  call temp:= `w`(v0, v2) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L42e1c0.  return v1 @kind object;
  #L42e1c2.  v0:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @type ^`java.security.KeyStore` @kind object;
  #L42e1c6.  if v0 == 0 then goto L42e1ea;
  #L42e1ca.  v0:= new `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder`;
  #L42e1ce.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.<init>:()V` @kind direct;
  #L42e1d4.  v2:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @type ^`java.security.KeyStore` @kind object;
  #L42e1d8.  call temp:= `setKeyStore`(v0, v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.setKeyStore:(Ljava/security/KeyStore;)Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;` @kind virtual;
  #L42e1de.  v0:= temp @kind object;
  #L42e1e0.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.build:()Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;` @kind virtual;
  #L42e1e6.  v0:= temp @kind object;
  #L42e1e8.  goto L42e1f4;
  #L42e1ea.  v0:= new `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient`;
  #L42e1ee.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.<init>:()V` @kind direct;
  #L42e1f4.  v2:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L42e1f8.  call temp:= `b`(v0, v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.b:(Ljava/lang/String;)Z` @kind virtual;
  #L42e1fe.  v2:= temp;
  #L42e200.  v3:= "cannot use Android Keystore, it'll be disabled" @kind object;
  #L42e204.  if v2 != 0 then goto L42e22a;
  #L42e208.  v4:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L42e20c.  call `generateNewAeadKey`(v4) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.generateNewAeadKey:(Ljava/lang/String;)V` @kind static;
  #L42e212.  goto L42e22a;
  #L42e214.  v0:= Exception @type ^`java.security.ProviderException` @kind object;
  #L42e216.  goto L42e21a;
  #L42e218.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L42e21a.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L42e220.  v2:= temp @kind object;
  #L42e222.  call temp:= `w`(v2, v3, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L42e228.  return v1 @kind object;
  #L42e22a.  v4:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L42e22e.  call temp:= `getAead`(v0, v4) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.getAead:(Ljava/lang/String;)Lcom/google/crypto/tink/Aead;` @kind virtual;
  #L42e234.  v0:= temp @kind object;
  #L42e236.  return v0 @kind object;
  #L42e238.  v0:= Exception @type ^`java.security.ProviderException` @kind object;
  #L42e23a.  goto L42e23e;
  #L42e23c.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L42e23e.  if v2 != 0 then goto L42e252;
  #L42e242.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L42e248.  v2:= temp @kind object;
  #L42e24a.  call temp:= `w`(v2, v3, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L42e250.  return v1 @kind object;
  #L42e252.  v1:= new `java.security.KeyStoreException`;
  #L42e256.  v2:= 1I;
  #L42e258.  v2:= new `java.lang.Object`[v2];
  #L42e25c.  v3:= 0I;
  #L42e25e.  v4:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L42e262.  v2[v3]:= v4 @kind object;
  #L42e266.  v3:= "the master key %s exists but is unusable" @kind object;
  #L42e26a.  call temp:= `format`(v3, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42e270.  v2:= temp @kind object;
  #L42e272.  call `<init>`(v1, v2, v0) @signature `Ljava/security/KeyStoreException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L42e278.  throw v1;
  catch `java.security.GeneralSecurityException` @[L42e208..L42e212] goto L42e218;
  catch `java.security.ProviderException` @[L42e208..L42e212] goto L42e214;
  catch `java.security.GeneralSecurityException` @[L42e22a..L42e236] goto L42e23c;
  catch `java.security.ProviderException` @[L42e22a..L42e236] goto L42e238;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager` `build`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v2 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.build:()Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e410.  @monitorenter v2
  #L42e412.  v0:= v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L42e416.  if v0 == 0 then goto L42e426;
  #L42e41a.  call temp:= `f`(v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.f:()Lcom/google/crypto/tink/Aead;` @kind direct;
  #L42e420.  v0:= temp @kind object;
  #L42e422.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` := v0 @kind object;
  #L42e426.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.e:()Lcom/google/crypto/tink/KeysetManager;` @kind direct;
  #L42e42c.  v0:= temp @kind object;
  #L42e42e.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.h` @type ^`com.google.crypto.tink.KeysetManager` := v0 @kind object;
  #L42e432.  v0:= new `com.google.crypto.tink.integration.android.AndroidKeysetManager`;
  #L42e436.  v1:= 0I;
  #L42e438.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.<init>:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$a;)V` @kind direct;
  #L42e43e.  @monitorexit v2
  #L42e440.  return v0 @kind object;
  #L42e442.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42e444.  @monitorexit v2
  #L42e446.  throw v0;
  catch `java.lang.Throwable` @[L42e412..L42e43e] goto L42e442;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `doNotUseKeystore`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v1 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.doNotUseKeystore:()Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e464.  v0:= 0I;
  #L42e466.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` := v0 @kind object;
  #L42e46a.  v0:= 0I;
  #L42e46c.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @type ^`boolean` := v0 @kind boolean;
  #L42e470.  return v1 @kind object;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withKeyTemplate`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind this, `com.google.crypto.tink.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withKeyTemplate:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;

  #L42e484.  v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` := v1 @kind object;
  #L42e488.  return v0 @kind object;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withKeyTemplate`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v2 @kind this, `com.google.crypto.tink.proto.KeyTemplate` v3 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withKeyTemplate:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e49c.  call temp:= `getTypeUrl`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L42e4a2.  v0:= temp @kind object;
  #L42e4a4.  call temp:= `getValue`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42e4aa.  v1:= temp @kind object;
  #L42e4ac.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L42e4b2.  v1:= temp @kind object;
  #L42e4b4.  call temp:= `getOutputPrefixType`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L42e4ba.  v3:= temp @kind object;
  #L42e4bc.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.a:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @kind static;
  #L42e4c2.  v3:= temp @kind object;
  #L42e4c4.  call temp:= `create`(v0, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42e4ca.  v3:= temp @kind object;
  #L42e4cc.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` := v3 @kind object;
  #L42e4d0.  return v2 @kind object;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withMasterKeyUri`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withMasterKeyUri:(Ljava/lang/String;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e4e4.  v0:= "android-keystore://" @kind object;
  #L42e4e8.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L42e4ee.  v0:= temp;
  #L42e4f0.  if v0 == 0 then goto L42e512;
  #L42e4f4.  v0:= v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @type ^`boolean` @kind boolean;
  #L42e4f8.  if v0 == 0 then goto L42e502;
  #L42e4fc.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` := v2 @kind object;
  #L42e500.  return v1 @kind object;
  #L42e502.  v2:= new `java.lang.IllegalArgumentException`;
  #L42e506.  v0:= "cannot call withMasterKeyUri() after calling doNotUseKeystore()" @kind object;
  #L42e50a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e510.  throw v2;
  #L42e512.  v2:= new `java.lang.IllegalArgumentException`;
  #L42e516.  v0:= "key URI must start with android-keystore://" @kind object;
  #L42e51a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e520.  throw v2;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withSharedPref`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v1 @kind this, `android.content.Context` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withSharedPref:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e534.  if v2 == 0 then goto L42e56a;
  #L42e538.  if v3 == 0 then goto L42e55a;
  #L42e53c.  v0:= new `com.google.crypto.tink.integration.android.SharedPrefKeysetReader`;
  #L42e540.  call `<init>`(v0, v2, v3, v4) @signature `Lcom/google/crypto/tink/integration/android/SharedPrefKeysetReader;.<init>:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L42e546.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` := v0 @kind object;
  #L42e54a.  v0:= new `com.google.crypto.tink.integration.android.SharedPrefKeysetWriter`;
  #L42e54e.  call `<init>`(v0, v2, v3, v4) @signature `Lcom/google/crypto/tink/integration/android/SharedPrefKeysetWriter;.<init>:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L42e554.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` := v0 @kind object;
  #L42e558.  return v1 @kind object;
  #L42e55a.  v2:= new `java.lang.IllegalArgumentException`;
  #L42e55e.  v3:= "need a keyset name" @kind object;
  #L42e562.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e568.  throw v2;
  #L42e56a.  v2:= new `java.lang.IllegalArgumentException`;
  #L42e56e.  v3:= "need an Android context" @kind object;
  #L42e572.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e578.  throw v2;
}
