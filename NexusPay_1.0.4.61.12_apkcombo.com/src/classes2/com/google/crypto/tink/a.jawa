record `com.google.crypto.tink.a` @kind class @AccessFlag  {
}
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L428af4.  v0:= "UTF-8" @kind object;
  #L428af8.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L428afe.  return @kind void;
}
procedure `com.google.crypto.tink.proto.KeysetInfo$KeyInfo` `a`(`com.google.crypto.tink.proto.Keyset$Key` v2 @kind object) @signature `Lcom/google/crypto/tink/a;.a:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L428a84.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;.newBuilder:()Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind static;
  #L428a8a.  v0:= temp @kind object;
  #L428a8c.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L428a92.  v1:= temp @kind object;
  #L428a94.  call temp:= `getTypeUrl`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L428a9a.  v1:= temp @kind object;
  #L428a9c.  call temp:= `setTypeUrl`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L428aa2.  v0:= temp @kind object;
  #L428aa4.  call temp:= `getStatus`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L428aaa.  v1:= temp @kind object;
  #L428aac.  call temp:= `setStatus`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setStatus:(Lcom/google/crypto/tink/proto/KeyStatusType;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L428ab2.  v0:= temp @kind object;
  #L428ab4.  call temp:= `getOutputPrefixType`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L428aba.  v1:= temp @kind object;
  #L428abc.  call temp:= `setOutputPrefixType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L428ac2.  v0:= temp @kind object;
  #L428ac4.  call temp:= `getKeyId`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L428aca.  v2:= temp;
  #L428acc.  call temp:= `setKeyId`(v0, v2) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setKeyId:(I)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L428ad2.  v2:= temp @kind object;
  #L428ad4.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L428ada.  v2:= temp @kind object;
  #L428adc.  v2:= (`com.google.crypto.tink.proto.KeysetInfo$KeyInfo`) v2 @kind object;
  #L428ae0.  return v2 @kind object;
}
procedure `com.google.crypto.tink.proto.KeysetInfo` `b`(`com.google.crypto.tink.proto.Keyset` v2 @kind object) @signature `Lcom/google/crypto/tink/a;.b:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/proto/KeysetInfo;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L428a14.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeysetInfo;.newBuilder:()Lcom/google/crypto/tink/proto/KeysetInfo$Builder;` @kind static;
  #L428a1a.  v0:= temp @kind object;
  #L428a1c.  call temp:= `getPrimaryKeyId`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L428a22.  v1:= temp;
  #L428a24.  call temp:= `setPrimaryKeyId`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$Builder;.setPrimaryKeyId:(I)Lcom/google/crypto/tink/proto/KeysetInfo$Builder;` @kind virtual;
  #L428a2a.  v0:= temp @kind object;
  #L428a2c.  call temp:= `getKeyList`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L428a32.  v2:= temp @kind object;
  #L428a34.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L428a3a.  v2:= temp @kind object;
  #L428a3c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L428a42.  v1:= temp;
  #L428a44.  if v1 == 0 then goto L428a64;
  #L428a48.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L428a4e.  v1:= temp @kind object;
  #L428a50.  v1:= (`com.google.crypto.tink.proto.Keyset$Key`) v1 @kind object;
  #L428a54.  call temp:= `a`(v1) @signature `Lcom/google/crypto/tink/a;.a:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;` @kind static;
  #L428a5a.  v1:= temp @kind object;
  #L428a5c.  call temp:= `addKeyInfo`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$Builder;.addKeyInfo:(Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;)Lcom/google/crypto/tink/proto/KeysetInfo$Builder;` @kind virtual;
  #L428a62.  goto L428a3c;
  #L428a64.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L428a6a.  v2:= temp @kind object;
  #L428a6c.  v2:= (`com.google.crypto.tink.proto.KeysetInfo`) v2 @kind object;
  #L428a70.  return v2 @kind object;
}
procedure `byte`[] `c`(`java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/a;.c:(Ljava/io/InputStream;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4289d0.  v0:= new `java.io.ByteArrayOutputStream`;
  #L4289d4.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L4289da.  v1:= 1024I;
  #L4289de.  v1:= new `byte`[v1];
  #L4289e2.  call temp:= `read`(v4, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L4289e8.  v2:= temp;
  #L4289ea.  v3:= -1I;
  #L4289ec.  if v2 == v3 then goto L4289fa;
  #L4289f0.  v3:= 0I;
  #L4289f2.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L4289f8.  goto L4289e2;
  #L4289fa.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L428a00.  v4:= temp @kind object;
  #L428a02.  return v4 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.Keyset$Key` v4 @kind object) @signature `Lcom/google/crypto/tink/a;.d:(Lcom/google/crypto/tink/proto/Keyset$Key;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L428b10.  call temp:= `hasKeyData`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.hasKeyData:()Z` @kind virtual;
  #L428b16.  v0:= temp;
  #L428b18.  v1:= 0I;
  #L428b1a.  v2:= 1I;
  #L428b1c.  if v0 == 0 then goto L428ba2;
  #L428b20.  call temp:= `getOutputPrefixType`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L428b26.  v0:= temp @kind object;
  #L428b28.  v3:= `@@com.google.crypto.tink.proto.OutputPrefixType.UNKNOWN_PREFIX` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L428b2c.  if v0 == v3 then goto L428b72;
  #L428b30.  call temp:= `getStatus`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L428b36.  v0:= temp @kind object;
  #L428b38.  v3:= `@@com.google.crypto.tink.proto.KeyStatusType.UNKNOWN_STATUS` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L428b3c.  if v0 == v3 then goto L428b42;
  #L428b40.  return @kind void;
  #L428b42.  v0:= new `java.security.GeneralSecurityException`;
  #L428b46.  v2:= new `java.lang.Object`[v2];
  #L428b4a.  call temp:= `getKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L428b50.  v4:= temp;
  #L428b52.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L428b58.  v4:= temp @kind object;
  #L428b5a.  v2[v1]:= v4 @kind object;
  #L428b5e.  v4:= "key %d has unknown status" @kind object;
  #L428b62.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L428b68.  v4:= temp @kind object;
  #L428b6a.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428b70.  throw v0;
  #L428b72.  v0:= new `java.security.GeneralSecurityException`;
  #L428b76.  v2:= new `java.lang.Object`[v2];
  #L428b7a.  call temp:= `getKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L428b80.  v4:= temp;
  #L428b82.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L428b88.  v4:= temp @kind object;
  #L428b8a.  v2[v1]:= v4 @kind object;
  #L428b8e.  v4:= "key %d has unknown prefix" @kind object;
  #L428b92.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L428b98.  v4:= temp @kind object;
  #L428b9a.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428ba0.  throw v0;
  #L428ba2.  v0:= new `java.security.GeneralSecurityException`;
  #L428ba6.  v2:= new `java.lang.Object`[v2];
  #L428baa.  call temp:= `getKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L428bb0.  v4:= temp;
  #L428bb2.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L428bb8.  v4:= temp @kind object;
  #L428bba.  v2[v1]:= v4 @kind object;
  #L428bbe.  v4:= "key %d has no key data" @kind object;
  #L428bc2.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L428bc8.  v4:= temp @kind object;
  #L428bca.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428bd0.  throw v0;
}
procedure `void` `e`(`com.google.crypto.tink.proto.Keyset` v9 @kind object) @signature `Lcom/google/crypto/tink/a;.e:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L428be4.  call temp:= `getPrimaryKeyId`(v9) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L428bea.  v0:= temp;
  #L428bec.  call temp:= `getKeyList`(v9) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L428bf2.  v9:= temp @kind object;
  #L428bf4.  call temp:= `iterator`(v9) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L428bfa.  v9:= temp @kind object;
  #L428bfc.  v1:= 1I;
  #L428bfe.  v2:= 0I;
  #L428c00.  v3:= 0I;
  #L428c02.  v4:= 0I;
  #L428c04.  v5:= 1I;
  #L428c06.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L428c0c.  v6:= temp;
  #L428c0e.  if v6 == 0 then goto L428c7a;
  #L428c12.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L428c18.  v6:= temp @kind object;
  #L428c1a.  v6:= (`com.google.crypto.tink.proto.Keyset$Key`) v6 @kind object;
  #L428c1e.  call temp:= `getStatus`(v6) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L428c24.  v7:= temp @kind object;
  #L428c26.  v8:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L428c2a.  if v7 == v8 then goto L428c30;
  #L428c2e.  goto L428c06;
  #L428c30.  call `d`(v6) @signature `Lcom/google/crypto/tink/a;.d:(Lcom/google/crypto/tink/proto/Keyset$Key;)V` @kind static;
  #L428c36.  call temp:= `getKeyId`(v6) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L428c3c.  v7:= temp;
  #L428c3e.  if v7 != v0 then goto L428c5a;
  #L428c42.  if v4 != 0 then goto L428c4a;
  #L428c46.  v4:= 1I;
  #L428c48.  goto L428c5a;
  #L428c4a.  v9:= new `java.security.GeneralSecurityException`;
  #L428c4e.  v0:= "keyset contains multiple primary keys" @kind object;
  #L428c52.  call `<init>`(v9, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428c58.  throw v9;
  #L428c5a.  call temp:= `getKeyData`(v6) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L428c60.  v6:= temp @kind object;
  #L428c62.  call temp:= `getKeyMaterialType`(v6) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L428c68.  v6:= temp @kind object;
  #L428c6a.  v7:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L428c6e.  if v6 == v7 then goto L428c74;
  #L428c72.  v5:= 0I;
  #L428c74.  v3:= v3 + 1;
  #L428c78.  goto L428c06;
  #L428c7a.  if v3 == 0 then goto L428c9a;
  #L428c7e.  if v4 != 0 then goto L428c98;
  #L428c82.  if v5 == 0 then goto L428c88;
  #L428c86.  goto L428c98;
  #L428c88.  v9:= new `java.security.GeneralSecurityException`;
  #L428c8c.  v0:= "keyset doesn't contain a valid primary key" @kind object;
  #L428c90.  call `<init>`(v9, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428c96.  throw v9;
  #L428c98.  return @kind void;
  #L428c9a.  v9:= new `java.security.GeneralSecurityException`;
  #L428c9e.  v0:= "keyset must contain at least one ENABLED key" @kind object;
  #L428ca2.  call `<init>`(v9, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428ca8.  throw v9;
}
