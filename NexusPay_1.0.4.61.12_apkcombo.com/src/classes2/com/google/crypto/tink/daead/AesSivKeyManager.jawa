record `com.google.crypto.tink.daead.AesSivKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.daead.AesSivKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42c154.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesSivKey` @kind object;
  #L42c158.  v1:= 1I;
  #L42c15a.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L42c15e.  v2:= new `com.google.crypto.tink.daead.AesSivKeyManager$a`;
  #L42c162.  v3:= constclass @type ^`com.google.crypto.tink.DeterministicAead` @kind object;
  #L42c166.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42c16c.  v3:= 0I;
  #L42c16e.  v1[v3]:= v2 @kind object;
  #L42c172.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L42c178.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256SivTemplate`() @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.aes256SivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42c018.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42c01c.  v1:= 64I;
  #L42c020.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42c026.  v0:= temp @kind object;
  #L42c028.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`int` v1 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42c03c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesSivKeyFormat$Builder;` @kind static;
  #L42c042.  v0:= temp @kind object;
  #L42c044.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesSivKeyFormat$Builder;` @kind virtual;
  #L42c04a.  v1:= temp @kind object;
  #L42c04c.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42c052.  v1:= temp @kind object;
  #L42c054.  v1:= (`com.google.crypto.tink.proto.AesSivKeyFormat`) v1 @kind object;
  #L42c058.  v0:= new `com.google.crypto.tink.daead.AesSivKeyManager`;
  #L42c05c.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.<init>:()V` @kind direct;
  #L42c062.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42c068.  v0:= temp @kind object;
  #L42c06a.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L42c070.  v1:= temp @kind object;
  #L42c072.  call temp:= `create`(v0, v1, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42c078.  v1:= temp @kind object;
  #L42c07a.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256SivTemplate`() @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.rawAes256SivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L42c08c.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42c090.  v1:= 64I;
  #L42c094.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42c09a.  v0:= temp @kind object;
  #L42c09c.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42c18c.  v0:= new `com.google.crypto.tink.daead.AesSivKeyManager`;
  #L42c190.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.<init>:()V` @kind direct;
  #L42c196.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L42c19c.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c13c.  v0:= "type.googleapis.com/google.crypto.tink.AesSivKey" @kind object;
  #L42c140.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c128.  v0:= 0I;
  #L42c12a.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.daead.AesSivKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c0b0.  v0:= new `com.google.crypto.tink.daead.AesSivKeyManager$b`;
  #L42c0b4.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesSivKeyFormat` @kind object;
  #L42c0b8.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.<init>:(Lcom/google/crypto/tink/daead/AesSivKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L42c0be.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c0f4.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42c0f8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesSivKey` `parseKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesSivKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c0d0.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42c0d6.  v0:= temp @kind object;
  #L42c0d8.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesSivKey;` @kind static;
  #L42c0de.  v2:= temp @kind object;
  #L42c0e0.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42c10c.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesSivKey;` @kind virtual;
  #L42c112.  v1:= temp @kind object;
  #L42c114.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v3 @kind this, `com.google.crypto.tink.proto.AesSivKey` v4 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesSivKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42c1b0.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.getVersion:()I` @kind virtual;
  #L42c1b6.  v0:= temp;
  #L42c1b8.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getVersion:()I` @kind virtual;
  #L42c1be.  v1:= temp;
  #L42c1c0.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42c1c6.  call temp:= `getKeyValue`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42c1cc.  v0:= temp @kind object;
  #L42c1ce.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L42c1d4.  v0:= temp;
  #L42c1d6.  v1:= 64I;
  #L42c1da.  if v0 != v1 then goto L42c1e0;
  #L42c1de.  return @kind void;
  #L42c1e0.  v0:= new `java.security.InvalidKeyException`;
  #L42c1e4.  v1:= new `java.lang.StringBuilder`;
  #L42c1e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c1ee.  v2:= "invalid key size: " @kind object;
  #L42c1f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c1f8.  call temp:= `getKeyValue`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42c1fe.  v4:= temp @kind object;
  #L42c200.  call temp:= `size`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L42c206.  v4:= temp;
  #L42c208.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c20e.  v4:= ". Valid keys must have 64 bytes." @kind object;
  #L42c212.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c218.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c21e.  v4:= temp @kind object;
  #L42c220.  call `<init>`(v0, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c226.  throw v0;
}
procedure `void` `validateKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42c238.  v1:= (`com.google.crypto.tink.proto.AesSivKey`) v1 @kind object;
  #L42c23c.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesSivKey;)V` @kind virtual;
  #L42c242.  return @kind void;
}
