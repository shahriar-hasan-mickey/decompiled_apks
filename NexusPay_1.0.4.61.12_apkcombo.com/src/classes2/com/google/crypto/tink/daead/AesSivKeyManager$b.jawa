record `com.google.crypto.tink.daead.AesSivKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.daead.AesSivKeyManager` `com.google.crypto.tink.daead.AesSivKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.daead.AesSivKeyManager$b` v0 @kind this, `com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.<init>:(Lcom/google/crypto/tink/daead/AesSivKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42bf7c.  v0.`com.google.crypto.tink.daead.AesSivKeyManager$b.b` @type ^`com.google.crypto.tink.daead.AesSivKeyManager` := v1 @kind object;
  #L42bf80.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42bf86.  return @kind void;
}
procedure `com.google.crypto.tink.proto.AesSivKey` `a`(`com.google.crypto.tink.daead.AesSivKeyManager$b` v1 @kind this, `com.google.crypto.tink.proto.AesSivKeyFormat` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesSivKeyFormat;)Lcom/google/crypto/tink/proto/AesSivKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bec0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesSivKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesSivKey$Builder;` @kind static;
  #L42bec6.  v0:= temp @kind object;
  #L42bec8.  call temp:= `getKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat;.getKeySize:()I` @kind virtual;
  #L42bece.  v2:= temp;
  #L42bed0.  call temp:= `randBytes`(v2) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L42bed6.  v2:= temp @kind object;
  #L42bed8.  call temp:= `copyFrom`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42bede.  v2:= temp @kind object;
  #L42bee0.  call temp:= `setKeyValue`(v0, v2) @signature `Lcom/google/crypto/tink/proto/AesSivKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesSivKey$Builder;` @kind virtual;
  #L42bee6.  v2:= temp @kind object;
  #L42bee8.  v0:= v1.`com.google.crypto.tink.daead.AesSivKeyManager$b.b` @type ^`com.google.crypto.tink.daead.AesSivKeyManager` @kind object;
  #L42beec.  call temp:= `getVersion`(v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getVersion:()I` @kind virtual;
  #L42bef2.  v0:= temp;
  #L42bef4.  call temp:= `setVersion`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesSivKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesSivKey$Builder;` @kind virtual;
  #L42befa.  v2:= temp @kind object;
  #L42befc.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42bf02.  v2:= temp @kind object;
  #L42bf04.  v2:= (`com.google.crypto.tink.proto.AesSivKey`) v2 @kind object;
  #L42bf08.  return v2 @kind object;
}
procedure `com.google.crypto.tink.proto.AesSivKeyFormat` `b`(`com.google.crypto.tink.daead.AesSivKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesSivKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bf1c.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42bf22.  v0:= temp @kind object;
  #L42bf24.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesSivKeyFormat;` @kind static;
  #L42bf2a.  v2:= temp @kind object;
  #L42bf2c.  return v2 @kind object;
}
procedure `void` `c`(`com.google.crypto.tink.daead.AesSivKeyManager$b` v3 @kind this, `com.google.crypto.tink.proto.AesSivKeyFormat` v4 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.c:(Lcom/google/crypto/tink/proto/AesSivKeyFormat;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42bf98.  call temp:= `getKeySize`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat;.getKeySize:()I` @kind virtual;
  #L42bf9e.  v0:= temp;
  #L42bfa0.  v1:= 64I;
  #L42bfa4.  if v0 != v1 then goto L42bfaa;
  #L42bfa8.  return @kind void;
  #L42bfaa.  v0:= new `java.security.InvalidAlgorithmParameterException`;
  #L42bfae.  v1:= new `java.lang.StringBuilder`;
  #L42bfb2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42bfb8.  v2:= "invalid key size: " @kind object;
  #L42bfbc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfc2.  call temp:= `getKeySize`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat;.getKeySize:()I` @kind virtual;
  #L42bfc8.  v4:= temp;
  #L42bfca.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfd0.  v4:= ". Valid keys must have 64 bytes." @kind object;
  #L42bfd4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42bfda.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42bfe0.  v4:= temp @kind object;
  #L42bfe2.  call `<init>`(v0, v4) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42bfe8.  throw v0;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.daead.AesSivKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42bf5c.  v1:= (`com.google.crypto.tink.proto.AesSivKeyFormat`) v1 @kind object;
  #L42bf60.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesSivKeyFormat;)Lcom/google/crypto/tink/proto/AesSivKey;` @kind virtual;
  #L42bf66.  v1:= temp @kind object;
  #L42bf68.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.daead.AesSivKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42bf40.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.b:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesSivKeyFormat;` @kind virtual;
  #L42bf46.  v1:= temp @kind object;
  #L42bf48.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.daead.AesSivKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42bffc.  v1:= (`com.google.crypto.tink.proto.AesSivKeyFormat`) v1 @kind object;
  #L42c000.  call `c`(v0, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.c:(Lcom/google/crypto/tink/proto/AesSivKeyFormat;)V` @kind virtual;
  #L42c006.  return @kind void;
}
