record `com.google.crypto.tink.Registry` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@com.google.crypto.tink.Registry.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/Registry;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L428198.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L42819c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L4281a2.  v0:= temp @kind object;
  #L4281a4.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L4281aa.  v0:= temp @kind object;
  #L4281ac.  `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L4281b0.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4281b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4281ba.  `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L4281be.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4281c2.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4281c8.  `@@com.google.crypto.tink.Registry.c` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L4281cc.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4281d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4281d6.  `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L4281da.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4281de.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4281e4.  `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L4281e8.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4281ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4281f2.  `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L4281f6.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.Registry` v0 @kind this) @signature `Lcom/google/crypto/tink/Registry;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L428208.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42820e.  return @kind void;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L427eb0.  if v0 == 0 then goto L427eb6;
  #L427eb4.  return v0 @kind object;
  #L427eb6.  v0:= 0I;
  #L427eb8.  throw v0;
}
procedure `void` `addCatalogue`(`java.lang.String` v3 @kind object, `com.google.crypto.tink.Catalogue` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.addCatalogue:(Ljava/lang/String;Lcom/google/crypto/tink/Catalogue;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L428220.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L428224.  @monitorenter v0
  #L428226.  if v3 == 0 then goto L428312;
  #L42822a.  if v4 == 0 then goto L428302;
  #L42822e.  v1:= `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428232.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L428236.  call temp:= `toLowerCase`(v3, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L42823c.  v2:= temp @kind object;
  #L42823e.  call temp:= `containsKey`(v1, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L428244.  v1:= temp;
  #L428246.  if v1 == 0 then goto L4282e8;
  #L42824a.  v1:= `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42824e.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L428252.  call temp:= `toLowerCase`(v3, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L428258.  v2:= temp @kind object;
  #L42825a.  call temp:= `get`(v1, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428260.  v1:= temp @kind object;
  #L428262.  v1:= (`com.google.crypto.tink.Catalogue`) v1 @kind object;
  #L428266.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L42826c.  v2:= temp @kind object;
  #L42826e.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L428274.  v1:= temp @kind object;
  #L428276.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42827c.  v1:= temp;
  #L42827e.  if v1 == 0 then goto L428284;
  #L428282.  goto L4282e8;
  #L428284.  v4:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L428288.  v1:= new `java.lang.StringBuilder`;
  #L42828c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L428292.  v2:= "Attempted overwrite of a catalogueName catalogue for name " @kind object;
  #L428296.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42829c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4282a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4282a8.  v1:= temp @kind object;
  #L4282aa.  call `warning`(v4, v1) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L4282b0.  v4:= new `java.security.GeneralSecurityException`;
  #L4282b4.  v1:= new `java.lang.StringBuilder`;
  #L4282b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4282be.  v2:= "catalogue for name " @kind object;
  #L4282c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4282c8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4282ce.  v3:= " has been already registered" @kind object;
  #L4282d2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4282d8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4282de.  v3:= temp @kind object;
  #L4282e0.  call `<init>`(v4, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4282e6.  throw v4;
  #L4282e8.  v1:= `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4282ec.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L4282f0.  call temp:= `toLowerCase`(v3, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L4282f6.  v3:= temp @kind object;
  #L4282f8.  call temp:= `put`(v1, v3, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4282fe.  @monitorexit v0
  #L428300.  return @kind void;
  #L428302.  v3:= new `java.lang.IllegalArgumentException`;
  #L428306.  v4:= "catalogue must be non-null." @kind object;
  #L42830a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428310.  throw v3;
  #L428312.  v3:= new `java.lang.IllegalArgumentException`;
  #L428316.  v4:= "catalogueName must be non-null." @kind object;
  #L42831a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428320.  throw v3;
  #L428322.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428324.  @monitorexit v0
  #L428326.  throw v3;
  catch `java.lang.Throwable` @[L42822e..L4282fe] goto L428322;
  catch `java.lang.Throwable` @[L428302..L428322] goto L428322;
}
procedure `com.google.crypto.tink.Registry$f` `b`(`com.google.crypto.tink.KeyManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.b:(Lcom/google/crypto/tink/KeyManager;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L427b10.  v0:= new `com.google.crypto.tink.Registry$a`;
  #L427b14.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/Registry$a;.<init>:(Lcom/google/crypto/tink/KeyManager;)V` @kind direct;
  #L427b1a.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Registry$f` `c`(`com.google.crypto.tink.KeyTypeManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.c:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L427b2c.  v0:= new `com.google.crypto.tink.Registry$b`;
  #L427b30.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/Registry$b;.<init>:(Lcom/google/crypto/tink/KeyTypeManager;)V` @kind direct;
  #L427b36.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Registry$e` `d`(`com.google.crypto.tink.KeyTypeManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.d:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$e;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L427af4.  v0:= new `com.google.crypto.tink.Registry$d`;
  #L427af8.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/Registry$d;.<init>:(Lcom/google/crypto/tink/KeyTypeManager;)V` @kind direct;
  #L427afe.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Registry$f` `e`(`com.google.crypto.tink.PrivateKeyTypeManager` v1 @kind object, `com.google.crypto.tink.KeyTypeManager` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.e:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L427b48.  v0:= new `com.google.crypto.tink.Registry$c`;
  #L427b4c.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry$c;.<init>:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;)V` @kind direct;
  #L427b52.  return v0 @kind object;
}
procedure `void` `f`(`java.lang.String` v5 @kind object, `java.lang.Class` v6 @kind object, `boolean` v7 ) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42834c.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L428350.  @monitorenter v0
  #L428352.  v1:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428356.  call temp:= `containsKey`(v1, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L42835c.  v1:= temp;
  #L42835e.  if v1 != 0 then goto L428366;
  #L428362.  @monitorexit v0
  #L428364.  return @kind void;
  #L428366.  v1:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42836a.  call temp:= `get`(v1, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428370.  v1:= temp @kind object;
  #L428372.  v1:= (`com.google.crypto.tink.Registry$f`) v1 @kind object;
  #L428376.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/Registry$f;.b:()Ljava/lang/Class;` @kind interface;
  #L42837c.  v2:= temp @kind object;
  #L42837e.  call temp:= `equals`(v2, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L428384.  v2:= temp;
  #L428386.  if v2 == 0 then goto L4283de;
  #L42838a.  if v7 == 0 then goto L4283da;
  #L42838e.  v6:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428392.  call temp:= `get`(v6, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428398.  v6:= temp @kind object;
  #L42839a.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L42839e.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4283a4.  v6:= temp;
  #L4283a6.  if v6 == 0 then goto L4283ac;
  #L4283aa.  goto L4283da;
  #L4283ac.  v6:= new `java.security.GeneralSecurityException`;
  #L4283b0.  v7:= new `java.lang.StringBuilder`;
  #L4283b4.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4283ba.  v1:= "New keys are already disallowed for key type " @kind object;
  #L4283be.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4283c4.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4283ca.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4283d0.  v5:= temp @kind object;
  #L4283d2.  call `<init>`(v6, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4283d8.  throw v6;
  #L4283da.  @monitorexit v0
  #L4283dc.  return @kind void;
  #L4283de.  v7:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L4283e2.  v2:= new `java.lang.StringBuilder`;
  #L4283e6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4283ec.  v3:= "Attempted overwrite of a registered key manager for key type " @kind object;
  #L4283f0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4283f6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4283fc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L428402.  v2:= temp @kind object;
  #L428404.  call `warning`(v7, v2) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L42840a.  v7:= new `java.security.GeneralSecurityException`;
  #L42840e.  v2:= "typeUrl (%s) is already registered with %s, cannot be re-registered with %s" @kind object;
  #L428412.  v3:= 3I;
  #L428414.  v3:= new `java.lang.Object`[v3];
  #L428418.  v4:= 0I;
  #L42841a.  v3[v4]:= v5 @kind object;
  #L42841e.  v5:= 1I;
  #L428420.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/Registry$f;.b:()Ljava/lang/Class;` @kind interface;
  #L428426.  v1:= temp @kind object;
  #L428428.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L42842e.  v1:= temp @kind object;
  #L428430.  v3[v5]:= v1 @kind object;
  #L428434.  v5:= 2I;
  #L428436.  call temp:= `getName`(v6) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L42843c.  v6:= temp @kind object;
  #L42843e.  v3[v5]:= v6 @kind object;
  #L428442.  call temp:= `format`(v2, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L428448.  v5:= temp @kind object;
  #L42844a.  call `<init>`(v7, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428450.  throw v7;
  #L428452.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428454.  @monitorexit v0
  #L428456.  throw v5;
  catch `java.lang.Throwable` @[L428352..L42835e] goto L428452;
  catch `java.lang.Throwable` @[L428366..L4283da] goto L428452;
  catch `java.lang.Throwable` @[L4283de..L428452] goto L428452;
}
procedure `com.google.crypto.tink.Registry$f` `g`(`java.lang.String` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.g:(Ljava/lang/String;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L427b64.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L427b68.  @monitorenter v0
  #L427b6a.  v1:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L427b6e.  call temp:= `containsKey`(v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L427b74.  v1:= temp;
  #L427b76.  if v1 == 0 then goto L427b8e;
  #L427b7a.  v1:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L427b7e.  call temp:= `get`(v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L427b84.  v4:= temp @kind object;
  #L427b86.  v4:= (`com.google.crypto.tink.Registry$f`) v4 @kind object;
  #L427b8a.  @monitorexit v0
  #L427b8c.  return v4 @kind object;
  #L427b8e.  v1:= new `java.security.GeneralSecurityException`;
  #L427b92.  v2:= new `java.lang.StringBuilder`;
  #L427b96.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427b9c.  v3:= "No key manager found for key type " @kind object;
  #L427ba0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427ba6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427bac.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427bb2.  v4:= temp @kind object;
  #L427bb4.  call `<init>`(v1, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427bba.  throw v1;
  #L427bbc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427bbe.  @monitorexit v0
  #L427bc0.  throw v4;
  catch `java.lang.Throwable` @[L427b6a..L427b8a] goto L427bbc;
  catch `java.lang.Throwable` @[L427b8e..L427bbc] goto L427bbc;
}
procedure `com.google.crypto.tink.Catalogue` `getCatalogue`(`java.lang.String` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getCatalogue:(Ljava/lang/String;)Lcom/google/crypto/tink/Catalogue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L427644.  if v3 == 0 then goto L427882;
  #L427648.  v0:= `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42764c.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L427650.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L427656.  v1:= temp @kind object;
  #L427658.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42765e.  v0:= temp @kind object;
  #L427660.  v0:= (`com.google.crypto.tink.Catalogue`) v0 @kind object;
  #L427664.  if v0 != 0 then goto L427880;
  #L427668.  v0:= 1I;
  #L42766a.  v0:= new `java.lang.Object`[v0];
  #L42766e.  v1:= 0I;
  #L427670.  v0[v1]:= v3 @kind object;
  #L427674.  v1:= "no catalogue found for %s. " @kind object;
  #L427678.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42767e.  v0:= temp @kind object;
  #L427680.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L427684.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L42768a.  v1:= temp @kind object;
  #L42768c.  v2:= "tinkaead" @kind object;
  #L427690.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L427696.  v1:= temp;
  #L427698.  if v1 == 0 then goto L4276be;
  #L42769c.  v1:= new `java.lang.StringBuilder`;
  #L4276a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4276a6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4276ac.  v0:= "Maybe call AeadConfig.register()." @kind object;
  #L4276b0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4276b6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4276bc.  v0:= temp @kind object;
  #L4276be.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L4276c2.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L4276c8.  v1:= temp @kind object;
  #L4276ca.  v2:= "tinkdeterministicaead" @kind object;
  #L4276ce.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4276d4.  v1:= temp;
  #L4276d6.  if v1 != 0 then goto L427852;
  #L4276da.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L4276de.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L4276e4.  v1:= temp @kind object;
  #L4276e6.  v2:= "tinkstreamingaead" @kind object;
  #L4276ea.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4276f0.  v1:= temp;
  #L4276f2.  if v1 != 0 then goto L42782e;
  #L4276f6.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L4276fa.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L427700.  v1:= temp @kind object;
  #L427702.  v2:= "tinkhybriddecrypt" @kind object;
  #L427706.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L42770c.  v1:= temp;
  #L42770e.  if v1 != 0 then goto L42780a;
  #L427712.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L427716.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L42771c.  v1:= temp @kind object;
  #L42771e.  v2:= "tinkhybridencrypt" @kind object;
  #L427722.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L427728.  v1:= temp;
  #L42772a.  if v1 != 0 then goto L42780a;
  #L42772e.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L427732.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L427738.  v1:= temp @kind object;
  #L42773a.  v2:= "tinkmac" @kind object;
  #L42773e.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L427744.  v1:= temp;
  #L427746.  if v1 != 0 then goto L4277e6;
  #L42774a.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L42774e.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L427754.  v1:= temp @kind object;
  #L427756.  v2:= "tinkpublickeysign" @kind object;
  #L42775a.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L427760.  v1:= temp;
  #L427762.  if v1 != 0 then goto L4277c2;
  #L427766.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L42776a.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L427770.  v1:= temp @kind object;
  #L427772.  v2:= "tinkpublickeyverify" @kind object;
  #L427776.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L42777c.  v1:= temp;
  #L42777e.  if v1 != 0 then goto L4277c2;
  #L427782.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L427786.  call temp:= `toLowerCase`(v3, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L42778c.  v3:= temp @kind object;
  #L42778e.  v1:= "tink" @kind object;
  #L427792.  call temp:= `startsWith`(v3, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L427798.  v3:= temp;
  #L42779a.  if v3 == 0 then goto L427874;
  #L42779e.  v3:= new `java.lang.StringBuilder`;
  #L4277a2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4277a8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4277ae.  v0:= "Maybe call TinkConfig.register()." @kind object;
  #L4277b2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4277b8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4277be.  v0:= temp @kind object;
  #L4277c0.  goto L427874;
  #L4277c2.  v3:= new `java.lang.StringBuilder`;
  #L4277c6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4277cc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4277d2.  v0:= "Maybe call SignatureConfig.register()." @kind object;
  #L4277d6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4277dc.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4277e2.  v0:= temp @kind object;
  #L4277e4.  goto L427874;
  #L4277e6.  v3:= new `java.lang.StringBuilder`;
  #L4277ea.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4277f0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4277f6.  v0:= "Maybe call MacConfig.register()." @kind object;
  #L4277fa.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427800.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427806.  v0:= temp @kind object;
  #L427808.  goto L427874;
  #L42780a.  v3:= new `java.lang.StringBuilder`;
  #L42780e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427814.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42781a.  v0:= "Maybe call HybridConfig.register()." @kind object;
  #L42781e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427824.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42782a.  v0:= temp @kind object;
  #L42782c.  goto L427874;
  #L42782e.  v3:= new `java.lang.StringBuilder`;
  #L427832.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427838.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42783e.  v0:= "Maybe call StreamingAeadConfig.register()." @kind object;
  #L427842.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427848.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42784e.  v0:= temp @kind object;
  #L427850.  goto L427874;
  #L427852.  v3:= new `java.lang.StringBuilder`;
  #L427856.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42785c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427862.  v0:= "Maybe call DeterministicAeadConfig.register()." @kind object;
  #L427866.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42786c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427872.  v0:= temp @kind object;
  #L427874.  v3:= new `java.security.GeneralSecurityException`;
  #L427878.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42787e.  throw v3;
  #L427880.  return v0 @kind object;
  #L427882.  v3:= new `java.lang.IllegalArgumentException`;
  #L427886.  v0:= "catalogueName must be non-null." @kind object;
  #L42788a.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427890.  throw v3;
}
procedure `java.lang.Class` `getInputPrimitive`(`java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getInputPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L427e7c.  v0:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L427e80.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L427e86.  v1:= temp @kind object;
  #L427e88.  v1:= (`com.google.crypto.tink.PrimitiveWrapper`) v1 @kind object;
  #L427e8c.  if v1 != 0 then goto L427e94;
  #L427e90.  v1:= 0I;
  #L427e92.  return v1 @kind object;
  #L427e94.  call temp:= `getInputPrimitiveClass`(v1) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L427e9a.  v1:= temp @kind object;
  #L427e9c.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `getKeyManager`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4278a4.  v0:= 0I;
  #L4278a6.  call temp:= `h`(v1, v0) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L4278ac.  v1:= temp @kind object;
  #L4278ae.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `getKeyManager`(`java.lang.String` v0 @kind object, `java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4278c0.  call temp:= `a`(v1) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4278c6.  v1:= (`java.lang.Class`) v1 @kind object;
  #L4278ca.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L4278d0.  v0:= temp @kind object;
  #L4278d2.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.proto.KeyData` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Lcom/google/crypto/tink/proto/KeyData;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L427ecc.  call temp:= `getTypeUrl`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427ed2.  v0:= temp @kind object;
  #L427ed4.  call temp:= `getValue`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L427eda.  v1:= temp @kind object;
  #L427edc.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind static;
  #L427ee2.  v1:= temp @kind object;
  #L427ee4.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.proto.KeyData` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Lcom/google/crypto/tink/proto/KeyData;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L427ef8.  call temp:= `getTypeUrl`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427efe.  v0:= temp @kind object;
  #L427f00.  call temp:= `getValue`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L427f06.  v1:= temp @kind object;
  #L427f08.  call temp:= `getPrimitive`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L427f0e.  v1:= temp @kind object;
  #L427f10.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v1 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L427f6c.  v0:= 0I;
  #L427f6e.  call temp:= `i`(v1, v2, v0) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L427f74.  v1:= temp @kind object;
  #L427f76.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L427f88.  call temp:= `a`(v2) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L427f8e.  v2:= (`java.lang.Class`) v2 @kind object;
  #L427f92.  call temp:= `i`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L427f98.  v0:= temp @kind object;
  #L427f9a.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v1 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L427fac.  v0:= 0I;
  #L427fae.  call temp:= `j`(v1, v2, v0) @signature `Lcom/google/crypto/tink/Registry;.j:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L427fb4.  v1:= temp @kind object;
  #L427fb6.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L427fc8.  call temp:= `a`(v2) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L427fce.  v2:= (`java.lang.Class`) v2 @kind object;
  #L427fd2.  call temp:= `j`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.j:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L427fd8.  v0:= temp @kind object;
  #L427fda.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;[B)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L427f24.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L427f2a.  v1:= temp @kind object;
  #L427f2c.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind static;
  #L427f32.  v0:= temp @kind object;
  #L427f34.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `byte`[] v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;[BLjava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L427f48.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L427f4e.  v1:= temp @kind object;
  #L427f50.  call temp:= `getPrimitive`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L427f56.  v0:= temp @kind object;
  #L427f58.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet` `getPrimitives`(`com.google.crypto.tink.KeysetHandle` v0 @kind object, `com.google.crypto.tink.KeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4279bc.  call temp:= `a`(v2) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4279c2.  v2:= (`java.lang.Class`) v2 @kind object;
  #L4279c6.  call temp:= `k`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.k:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L4279cc.  v0:= temp @kind object;
  #L4279ce.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet` `getPrimitives`(`com.google.crypto.tink.KeysetHandle` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4279e0.  v0:= 0I;
  #L4279e2.  call temp:= `getPrimitives`(v1, v0, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L4279e8.  v1:= temp @kind object;
  #L4279ea.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData` `getPublicKeyData`(`java.lang.String` v2 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPublicKeyData:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L427be8.  call temp:= `getKeyManager`(v2) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L427bee.  v0:= temp @kind object;
  #L427bf0.  v1:= instanceof @variable v0 @type ^`com.google.crypto.tink.PrivateKeyManager` @kind boolean;
  #L427bf4.  if v1 == 0 then goto L427c06;
  #L427bf8.  v0:= (`com.google.crypto.tink.PrivateKeyManager`) v0 @kind object;
  #L427bfc.  call temp:= `getPublicKeyData`(v0, v3) @signature `Lcom/google/crypto/tink/PrivateKeyManager;.getPublicKeyData:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @kind interface;
  #L427c02.  v2:= temp @kind object;
  #L427c04.  return v2 @kind object;
  #L427c06.  v3:= new `java.security.GeneralSecurityException`;
  #L427c0a.  v0:= new `java.lang.StringBuilder`;
  #L427c0e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427c14.  v1:= "manager for key type " @kind object;
  #L427c18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c1e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c24.  v2:= " is not a PrivateKeyManager" @kind object;
  #L427c28.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c2e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427c34.  v2:= temp @kind object;
  #L427c36.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427c3c.  throw v3;
}
procedure `com.google.crypto.tink.KeyManager` `getUntypedKeyManager`(`java.lang.String` v0 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getUntypedKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L427998.  call temp:= `g`(v0) @signature `Lcom/google/crypto/tink/Registry;.g:(Ljava/lang/String;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L42799e.  v0:= temp @kind object;
  #L4279a0.  call temp:= `e`(v0) @signature `Lcom/google/crypto/tink/Registry$f;.e:()Lcom/google/crypto/tink/KeyManager;` @kind interface;
  #L4279a6.  v0:= temp @kind object;
  #L4279a8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `h`(`java.lang.String` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4278e4.  call temp:= `g`(v3) @signature `Lcom/google/crypto/tink/Registry;.g:(Ljava/lang/String;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L4278ea.  v3:= temp @kind object;
  #L4278ec.  if v4 != 0 then goto L4278fa;
  #L4278f0.  call temp:= `e`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.e:()Lcom/google/crypto/tink/KeyManager;` @kind interface;
  #L4278f6.  v3:= temp @kind object;
  #L4278f8.  return v3 @kind object;
  #L4278fa.  call temp:= `c`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.c:()Ljava/util/Set;` @kind interface;
  #L427900.  v0:= temp @kind object;
  #L427902.  call temp:= `contains`(v0, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L427908.  v0:= temp;
  #L42790a.  if v0 == 0 then goto L427918;
  #L42790e.  call temp:= `d`(v3, v4) @signature `Lcom/google/crypto/tink/Registry$f;.d:(Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind interface;
  #L427914.  v3:= temp @kind object;
  #L427916.  return v3 @kind object;
  #L427918.  v0:= new `java.security.GeneralSecurityException`;
  #L42791c.  v1:= new `java.lang.StringBuilder`;
  #L427920.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427926.  v2:= "Primitive type " @kind object;
  #L42792a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427930.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L427936.  v4:= temp @kind object;
  #L427938.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42793e.  v4:= " not supported by key manager of type " @kind object;
  #L427942.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427948.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.b:()Ljava/lang/Class;` @kind interface;
  #L42794e.  v4:= temp @kind object;
  #L427950.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427956.  v4:= ", supported primitives: " @kind object;
  #L42795a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427960.  call temp:= `c`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.c:()Ljava/util/Set;` @kind interface;
  #L427966.  v3:= temp @kind object;
  #L427968.  call temp:= `l`(v3) @signature `Lcom/google/crypto/tink/Registry;.l:(Ljava/util/Set;)Ljava/lang/String;` @kind static;
  #L42796e.  v3:= temp @kind object;
  #L427970.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427976.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42797c.  v3:= temp @kind object;
  #L42797e.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427984.  throw v0;
}
procedure `java.lang.Object` `i`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L427fec.  call temp:= `h`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L427ff2.  v0:= temp @kind object;
  #L427ff4.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind interface;
  #L427ffa.  v0:= temp @kind object;
  #L427ffc.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.j:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L428010.  call temp:= `h`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L428016.  v0:= temp @kind object;
  #L428018.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @kind interface;
  #L42801e.  v0:= temp @kind object;
  #L428020.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet` `k`(`com.google.crypto.tink.KeysetHandle` v5 @kind object, `com.google.crypto.tink.KeyManager` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lcom/google/crypto/tink/Registry;.k:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4279fc.  call temp:= `f`(v5) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @kind virtual;
  #L427a02.  v0:= temp @kind object;
  #L427a04.  call `e`(v0) @signature `Lcom/google/crypto/tink/a;.e:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L427a0a.  call temp:= `newPrimitiveSet`(v7) @signature `Lcom/google/crypto/tink/PrimitiveSet;.newPrimitiveSet:(Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L427a10.  v0:= temp @kind object;
  #L427a12.  call temp:= `f`(v5) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @kind virtual;
  #L427a18.  v1:= temp @kind object;
  #L427a1a.  call temp:= `getKeyList`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L427a20.  v1:= temp @kind object;
  #L427a22.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L427a28.  v1:= temp @kind object;
  #L427a2a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L427a30.  v2:= temp;
  #L427a32.  if v2 == 0 then goto L427ae0;
  #L427a36.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L427a3c.  v2:= temp @kind object;
  #L427a3e.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L427a42.  call temp:= `getStatus`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L427a48.  v3:= temp @kind object;
  #L427a4a.  v4:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L427a4e.  if v3 != v4 then goto L427a2a;
  #L427a52.  if v6 == 0 then goto L427a8c;
  #L427a56.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L427a5c.  v3:= temp @kind object;
  #L427a5e.  call temp:= `getTypeUrl`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427a64.  v3:= temp @kind object;
  #L427a66.  call temp:= `doesSupport`(v6, v3) @signature `Lcom/google/crypto/tink/KeyManager;.doesSupport:(Ljava/lang/String;)Z` @kind interface;
  #L427a6c.  v3:= temp;
  #L427a6e.  if v3 == 0 then goto L427a8c;
  #L427a72.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L427a78.  v3:= temp @kind object;
  #L427a7a.  call temp:= `getValue`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L427a80.  v3:= temp @kind object;
  #L427a82.  call temp:= `getPrimitive`(v6, v3) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind interface;
  #L427a88.  v3:= temp @kind object;
  #L427a8a.  goto L427ab4;
  #L427a8c.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L427a92.  v3:= temp @kind object;
  #L427a94.  call temp:= `getTypeUrl`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427a9a.  v3:= temp @kind object;
  #L427a9c.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L427aa2.  v4:= temp @kind object;
  #L427aa4.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L427aaa.  v4:= temp @kind object;
  #L427aac.  call temp:= `i`(v3, v4, v7) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L427ab2.  v3:= temp @kind object;
  #L427ab4.  call temp:= `addPrimitive`(v0, v3, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet;.addPrimitive:(Ljava/lang/Object;Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L427aba.  v3:= temp @kind object;
  #L427abc.  call temp:= `getKeyId`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L427ac2.  v2:= temp;
  #L427ac4.  call temp:= `f`(v5) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @kind virtual;
  #L427aca.  v4:= temp @kind object;
  #L427acc.  call temp:= `getPrimaryKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L427ad2.  v4:= temp;
  #L427ad4.  if v2 != v4 then goto L427a2a;
  #L427ad8.  call `setPrimary`(v0, v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.setPrimary:(Lcom/google/crypto/tink/PrimitiveSet$Entry;)V` @kind virtual;
  #L427ade.  goto L427a2a;
  #L427ae0.  return v0 @kind object;
}
procedure `java.lang.String` `l`(`java.util.Set` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry;.l:(Ljava/util/Set;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L428130.  v0:= new `java.lang.StringBuilder`;
  #L428134.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42813a.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L428140.  v3:= temp @kind object;
  #L428142.  v1:= 1I;
  #L428144.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42814a.  v2:= temp;
  #L42814c.  if v2 == 0 then goto L42817c;
  #L428150.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L428156.  v2:= temp @kind object;
  #L428158.  v2:= (`java.lang.Class`) v2 @kind object;
  #L42815c.  if v1 != 0 then goto L42816a;
  #L428160.  v1:= ", " @kind object;
  #L428164.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42816a.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L428170.  v1:= temp @kind object;
  #L428172.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L428178.  v1:= 0I;
  #L42817a.  goto L428144;
  #L42817c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L428182.  v3:= temp @kind object;
  #L428184.  return v3 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `newKey`(`com.google.crypto.tink.proto.KeyTemplate` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKey:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L427d3c.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L427d40.  @monitorenter v0
  #L427d42.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427d48.  v1:= temp @kind object;
  #L427d4a.  call temp:= `getUntypedKeyManager`(v1) @signature `Lcom/google/crypto/tink/Registry;.getUntypedKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L427d50.  v1:= temp @kind object;
  #L427d52.  v2:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L427d56.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427d5c.  v3:= temp @kind object;
  #L427d5e.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L427d64.  v2:= temp @kind object;
  #L427d66.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L427d6a.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L427d70.  v2:= temp;
  #L427d72.  if v2 == 0 then goto L427d8a;
  #L427d76.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L427d7c.  v4:= temp @kind object;
  #L427d7e.  call temp:= `newKey`(v1, v4) @signature `Lcom/google/crypto/tink/KeyManager;.newKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @kind interface;
  #L427d84.  v4:= temp @kind object;
  #L427d86.  @monitorexit v0
  #L427d88.  return v4 @kind object;
  #L427d8a.  v1:= new `java.security.GeneralSecurityException`;
  #L427d8e.  v2:= new `java.lang.StringBuilder`;
  #L427d92.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427d98.  v3:= "newKey-operation not permitted for key type " @kind object;
  #L427d9c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427da2.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427da8.  v4:= temp @kind object;
  #L427daa.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427db0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427db6.  v4:= temp @kind object;
  #L427db8.  call `<init>`(v1, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427dbe.  throw v1;
  #L427dc0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427dc2.  @monitorexit v0
  #L427dc4.  throw v4;
  catch `java.lang.Throwable` @[L427d42..L427d86] goto L427dc0;
  catch `java.lang.Throwable` @[L427d8a..L427dc0] goto L427dc0;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `newKey`(`java.lang.String` v3 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKey:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L427dec.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L427df0.  @monitorenter v0
  #L427df2.  call temp:= `getKeyManager`(v3) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L427df8.  v1:= temp @kind object;
  #L427dfa.  v2:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L427dfe.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L427e04.  v2:= temp @kind object;
  #L427e06.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L427e0a.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L427e10.  v2:= temp;
  #L427e12.  if v2 == 0 then goto L427e22;
  #L427e16.  call temp:= `newKey`(v1, v4) @signature `Lcom/google/crypto/tink/KeyManager;.newKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @kind interface;
  #L427e1c.  v3:= temp @kind object;
  #L427e1e.  @monitorexit v0
  #L427e20.  return v3 @kind object;
  #L427e22.  v4:= new `java.security.GeneralSecurityException`;
  #L427e26.  v1:= new `java.lang.StringBuilder`;
  #L427e2a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427e30.  v2:= "newKey-operation not permitted for key type " @kind object;
  #L427e34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427e3a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427e40.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427e46.  v3:= temp @kind object;
  #L427e48.  call `<init>`(v4, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427e4e.  throw v4;
  #L427e50.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427e52.  @monitorexit v0
  #L427e54.  throw v3;
  catch `java.lang.Throwable` @[L427df2..L427e1e] goto L427e50;
  catch `java.lang.Throwable` @[L427e22..L427e50] goto L427e50;
}
procedure `com.google.crypto.tink.proto.KeyData` `newKeyData`(`com.google.crypto.tink.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L427c50.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L427c54.  @monitorenter v0
  #L427c56.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/KeyTemplate;.b:()Lcom/google/crypto/tink/proto/KeyTemplate;` @kind virtual;
  #L427c5c.  v1:= temp @kind object;
  #L427c5e.  call temp:= `newKeyData`(v1) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L427c64.  v1:= temp @kind object;
  #L427c66.  @monitorexit v0
  #L427c68.  return v1 @kind object;
  #L427c6a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427c6c.  @monitorexit v0
  #L427c6e.  throw v1;
  catch `java.lang.Throwable` @[L427c56..L427c66] goto L427c6a;
}
procedure `com.google.crypto.tink.proto.KeyData` `newKeyData`(`com.google.crypto.tink.proto.KeyTemplate` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L427c8c.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L427c90.  @monitorenter v0
  #L427c92.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427c98.  v1:= temp @kind object;
  #L427c9a.  call temp:= `getUntypedKeyManager`(v1) @signature `Lcom/google/crypto/tink/Registry;.getUntypedKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L427ca0.  v1:= temp @kind object;
  #L427ca2.  v2:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L427ca6.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427cac.  v3:= temp @kind object;
  #L427cae.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L427cb4.  v2:= temp @kind object;
  #L427cb6.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L427cba.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L427cc0.  v2:= temp;
  #L427cc2.  if v2 == 0 then goto L427cda;
  #L427cc6.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L427ccc.  v4:= temp @kind object;
  #L427cce.  call temp:= `newKeyData`(v1, v4) @signature `Lcom/google/crypto/tink/KeyManager;.newKeyData:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @kind interface;
  #L427cd4.  v4:= temp @kind object;
  #L427cd6.  @monitorexit v0
  #L427cd8.  return v4 @kind object;
  #L427cda.  v1:= new `java.security.GeneralSecurityException`;
  #L427cde.  v2:= new `java.lang.StringBuilder`;
  #L427ce2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427ce8.  v3:= "newKey-operation not permitted for key type " @kind object;
  #L427cec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427cf2.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L427cf8.  v4:= temp @kind object;
  #L427cfa.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427d00.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427d06.  v4:= temp @kind object;
  #L427d08.  call `<init>`(v1, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427d0e.  throw v1;
  #L427d10.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L427d12.  @monitorexit v0
  #L427d14.  throw v4;
  catch `java.lang.Throwable` @[L427c92..L427cd6] goto L427d10;
  catch `java.lang.Throwable` @[L427cda..L427d10] goto L427d10;
}
procedure `void` `registerAsymmetricKeyManagers`(`com.google.crypto.tink.PrivateKeyTypeManager` v7 @kind object, `com.google.crypto.tink.KeyTypeManager` v8 @kind object, `boolean` v9 ) @signature `Lcom/google/crypto/tink/Registry;.registerAsymmetricKeyManagers:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L428484.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L428488.  @monitorenter v0
  #L42848a.  if v7 == 0 then goto L428646;
  #L42848e.  if v8 == 0 then goto L428646;
  #L428492.  call temp:= `getKeyType`(v7) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L428498.  v1:= temp @kind object;
  #L42849a.  call temp:= `getKeyType`(v8) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L4284a0.  v2:= temp @kind object;
  #L4284a2.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4284a8.  v3:= temp @kind object;
  #L4284aa.  call `f`(v1, v3, v9) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L4284b0.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4284b6.  v3:= temp @kind object;
  #L4284b8.  v4:= 0I;
  #L4284ba.  call `f`(v2, v3, v4) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L4284c0.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4284c6.  v3:= temp;
  #L4284c8.  if v3 != 0 then goto L428636;
  #L4284cc.  v3:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4284d0.  call temp:= `containsKey`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4284d6.  v3:= temp;
  #L4284d8.  if v3 == 0 then goto L4285a0;
  #L4284dc.  v3:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4284e0.  call temp:= `get`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4284e6.  v3:= temp @kind object;
  #L4284e8.  v3:= (`com.google.crypto.tink.Registry$f`) v3 @kind object;
  #L4284ec.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.a:()Ljava/lang/Class;` @kind interface;
  #L4284f2.  v3:= temp @kind object;
  #L4284f4.  if v3 == 0 then goto L4285a0;
  #L4284f8.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4284fe.  v5:= temp @kind object;
  #L428500.  call temp:= `equals`(v3, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L428506.  v5:= temp;
  #L428508.  if v5 == 0 then goto L42850e;
  #L42850c.  goto L4285a0;
  #L42850e.  v9:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L428512.  v5:= new `java.lang.StringBuilder`;
  #L428516.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42851c.  v6:= "Attempted overwrite of a registered key manager for key type " @kind object;
  #L428520.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L428526.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42852c.  v1:= " with inconsistent public key type " @kind object;
  #L428530.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L428536.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42853c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L428542.  v1:= temp @kind object;
  #L428544.  call `warning`(v9, v1) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L42854a.  v9:= new `java.security.GeneralSecurityException`;
  #L42854e.  v1:= "public key manager corresponding to %s is already registered with %s, cannot be re-registered with %s" @kind object;
  #L428552.  v2:= 3I;
  #L428554.  v2:= new `java.lang.Object`[v2];
  #L428558.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L42855e.  v7:= temp @kind object;
  #L428560.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L428566.  v7:= temp @kind object;
  #L428568.  v2[v4]:= v7 @kind object;
  #L42856c.  v7:= 1I;
  #L42856e.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L428574.  v3:= temp @kind object;
  #L428576.  v2[v7]:= v3 @kind object;
  #L42857a.  v7:= 2I;
  #L42857c.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L428582.  v8:= temp @kind object;
  #L428584.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L42858a.  v8:= temp @kind object;
  #L42858c.  v2[v7]:= v8 @kind object;
  #L428590.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L428596.  v7:= temp @kind object;
  #L428598.  call `<init>`(v9, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42859e.  throw v9;
  #L4285a0.  v3:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4285a4.  call temp:= `containsKey`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4285aa.  v3:= temp;
  #L4285ac.  if v3 == 0 then goto L4285cc;
  #L4285b0.  v3:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4285b4.  call temp:= `get`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4285ba.  v3:= temp @kind object;
  #L4285bc.  v3:= (`com.google.crypto.tink.Registry$f`) v3 @kind object;
  #L4285c0.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.a:()Ljava/lang/Class;` @kind interface;
  #L4285c6.  v3:= temp @kind object;
  #L4285c8.  if v3 != 0 then goto L4285f0;
  #L4285cc.  v3:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4285d0.  call temp:= `e`(v7, v8) @signature `Lcom/google/crypto/tink/Registry;.e:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L4285d6.  v4:= temp @kind object;
  #L4285d8.  call temp:= `put`(v3, v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4285de.  v3:= `@@com.google.crypto.tink.Registry.c` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4285e2.  call temp:= `d`(v7) @signature `Lcom/google/crypto/tink/Registry;.d:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$e;` @kind static;
  #L4285e8.  v7:= temp @kind object;
  #L4285ea.  call temp:= `put`(v3, v1, v7) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4285f0.  v7:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4285f4.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4285fa.  v9:= temp @kind object;
  #L4285fc.  call temp:= `put`(v7, v1, v9) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428602.  v7:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428606.  call temp:= `containsKey`(v7, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L42860c.  v7:= temp;
  #L42860e.  if v7 != 0 then goto L428624;
  #L428612.  v7:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428616.  call temp:= `c`(v8) @signature `Lcom/google/crypto/tink/Registry;.c:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L42861c.  v8:= temp @kind object;
  #L42861e.  call temp:= `put`(v7, v2, v8) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428624.  v7:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428628.  v8:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L42862c.  call temp:= `put`(v7, v2, v8) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428632.  @monitorexit v0
  #L428634.  return @kind void;
  #L428636.  v7:= new `java.security.GeneralSecurityException`;
  #L42863a.  v8:= "Private and public key type must be different." @kind object;
  #L42863e.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428644.  throw v7;
  #L428646.  v7:= new `java.lang.IllegalArgumentException`;
  #L42864a.  v8:= "given key managers must be non-null." @kind object;
  #L42864e.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428654.  throw v7;
  #L428656.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428658.  @monitorexit v0
  #L42865a.  throw v7;
  catch `java.lang.Throwable` @[L428492..L428632] goto L428656;
  catch `java.lang.Throwable` @[L428636..L428656] goto L428656;
}
procedure `void` `registerKeyManager`(`com.google.crypto.tink.KeyManager` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L428680.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L428684.  @monitorenter v0
  #L428686.  v1:= 1I;
  #L428688.  call `registerKeyManager`(v2, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;Z)V` @kind static;
  #L42868e.  @monitorexit v0
  #L428690.  return @kind void;
  #L428692.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428694.  @monitorexit v0
  #L428696.  throw v2;
  catch `java.lang.Throwable` @[L428688..L42868e] goto L428692;
}
procedure `void` `registerKeyManager`(`com.google.crypto.tink.KeyManager` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4286b4.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L4286b8.  @monitorenter v0
  #L4286ba.  if v3 == 0 then goto L428700;
  #L4286be.  call temp:= `getKeyType`(v3) @signature `Lcom/google/crypto/tink/KeyManager;.getKeyType:()Ljava/lang/String;` @kind interface;
  #L4286c4.  v1:= temp @kind object;
  #L4286c6.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4286cc.  v2:= temp @kind object;
  #L4286ce.  call `f`(v1, v2, v4) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L4286d4.  v2:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4286d8.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/Registry;.b:(Lcom/google/crypto/tink/KeyManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L4286de.  v3:= temp @kind object;
  #L4286e0.  call temp:= `putIfAbsent`(v2, v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4286e6.  v3:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4286ea.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4286f0.  v4:= temp @kind object;
  #L4286f2.  call temp:= `put`(v3, v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4286f8.  @monitorexit v0
  #L4286fa.  return @kind void;
  #L4286fc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4286fe.  goto L428710;
  #L428700.  v3:= new `java.lang.IllegalArgumentException`;
  #L428704.  v4:= "key manager must be non-null." @kind object;
  #L428708.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42870e.  throw v3;
  #L428710.  @monitorexit v0
  #L428712.  throw v3;
  catch `java.lang.Throwable` @[L4286be..L4286f8] goto L4286fc;
  catch `java.lang.Throwable` @[L428700..L428710] goto L4286fc;
}
procedure `void` `registerKeyManager`(`com.google.crypto.tink.KeyTypeManager` v4 @kind object, `boolean` v5 ) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L428738.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L42873c.  @monitorenter v0
  #L42873e.  if v4 == 0 then goto L4287a6;
  #L428742.  call temp:= `getKeyType`(v4) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L428748.  v1:= temp @kind object;
  #L42874a.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L428750.  v2:= temp @kind object;
  #L428752.  call `f`(v1, v2, v5) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L428758.  v2:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42875c.  call temp:= `containsKey`(v2, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L428762.  v2:= temp;
  #L428764.  if v2 != 0 then goto L42878c;
  #L428768.  v2:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42876c.  call temp:= `c`(v4) @signature `Lcom/google/crypto/tink/Registry;.c:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L428772.  v3:= temp @kind object;
  #L428774.  call temp:= `put`(v2, v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42877a.  v2:= `@@com.google.crypto.tink.Registry.c` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42877e.  call temp:= `d`(v4) @signature `Lcom/google/crypto/tink/Registry;.d:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$e;` @kind static;
  #L428784.  v4:= temp @kind object;
  #L428786.  call temp:= `put`(v2, v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42878c.  v4:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428790.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L428796.  v5:= temp @kind object;
  #L428798.  call temp:= `put`(v4, v1, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42879e.  @monitorexit v0
  #L4287a0.  return @kind void;
  #L4287a2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4287a4.  goto L4287b6;
  #L4287a6.  v4:= new `java.lang.IllegalArgumentException`;
  #L4287aa.  v5:= "key manager must be non-null." @kind object;
  #L4287ae.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4287b4.  throw v4;
  #L4287b6.  @monitorexit v0
  #L4287b8.  throw v4;
  catch `java.lang.Throwable` @[L428742..L42879e] goto L4287a2;
  catch `java.lang.Throwable` @[L4287a6..L4287b6] goto L4287a2;
}
procedure `void` `registerKeyManager`(`java.lang.String` v2 @kind object, `com.google.crypto.tink.KeyManager` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Ljava/lang/String;Lcom/google/crypto/tink/KeyManager;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4287e0.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L4287e4.  @monitorenter v0
  #L4287e6.  v1:= 1I;
  #L4287e8.  call `registerKeyManager`(v2, v3, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Ljava/lang/String;Lcom/google/crypto/tink/KeyManager;Z)V` @kind static;
  #L4287ee.  @monitorexit v0
  #L4287f0.  return @kind void;
  #L4287f2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4287f4.  @monitorexit v0
  #L4287f6.  throw v2;
  catch `java.lang.Throwable` @[L4287e8..L4287ee] goto L4287f2;
}
procedure `void` `registerKeyManager`(`java.lang.String` v2 @kind object, `com.google.crypto.tink.KeyManager` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Ljava/lang/String;Lcom/google/crypto/tink/KeyManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L428814.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L428818.  @monitorenter v0
  #L42881a.  if v3 == 0 then goto L428878;
  #L42881e.  call temp:= `getKeyType`(v3) @signature `Lcom/google/crypto/tink/KeyManager;.getKeyType:()Ljava/lang/String;` @kind interface;
  #L428824.  v1:= temp @kind object;
  #L428826.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42882c.  v1:= temp;
  #L42882e.  if v1 == 0 then goto L42883c;
  #L428832.  call `registerKeyManager`(v3, v4) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;Z)V` @kind static;
  #L428838.  @monitorexit v0
  #L42883a.  return @kind void;
  #L42883c.  v3:= new `java.security.GeneralSecurityException`;
  #L428840.  v4:= new `java.lang.StringBuilder`;
  #L428844.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42884a.  v1:= "Manager does not support key type " @kind object;
  #L42884e.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L428854.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42885a.  v2:= "." @kind object;
  #L42885e.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L428864.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42886a.  v2:= temp @kind object;
  #L42886c.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428872.  throw v3;
  #L428874.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428876.  goto L428888;
  #L428878.  v2:= new `java.lang.IllegalArgumentException`;
  #L42887c.  v3:= "key manager must be non-null." @kind object;
  #L428880.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428886.  throw v2;
  #L428888.  @monitorexit v0
  #L42888a.  throw v2;
  catch `java.lang.Throwable` @[L42881e..L428838] goto L428874;
  catch `java.lang.Throwable` @[L42883c..L428888] goto L428874;
}
procedure `void` `registerPrimitiveWrapper`(`com.google.crypto.tink.PrimitiveWrapper` v7 @kind object) @signature `Lcom/google/crypto/tink/Registry;.registerPrimitiveWrapper:(Lcom/google/crypto/tink/PrimitiveWrapper;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4288b0.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L4288b4.  @monitorenter v0
  #L4288b6.  if v7 == 0 then goto L428996;
  #L4288ba.  call temp:= `getPrimitiveClass`(v7) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L4288c0.  v1:= temp @kind object;
  #L4288c2.  v2:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4288c6.  call temp:= `containsKey`(v2, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4288cc.  v2:= temp;
  #L4288ce.  if v2 == 0 then goto L428984;
  #L4288d2.  v2:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L4288d6.  call temp:= `get`(v2, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4288dc.  v2:= temp @kind object;
  #L4288de.  v2:= (`com.google.crypto.tink.PrimitiveWrapper`) v2 @kind object;
  #L4288e2.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4288e8.  v3:= temp @kind object;
  #L4288ea.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4288f0.  v4:= temp @kind object;
  #L4288f2.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4288f8.  v3:= temp;
  #L4288fa.  if v3 == 0 then goto L428900;
  #L4288fe.  goto L428984;
  #L428900.  v3:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L428904.  v4:= new `java.lang.StringBuilder`;
  #L428908.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42890e.  v5:= "Attempted overwrite of a registered SetWrapper for type " @kind object;
  #L428912.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L428918.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42891e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L428924.  v4:= temp @kind object;
  #L428926.  call `warning`(v3, v4) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L42892c.  v3:= new `java.security.GeneralSecurityException`;
  #L428930.  v4:= "SetWrapper for primitive (%s) is already registered to be %s, cannot be re-registered with %s" @kind object;
  #L428934.  v5:= 3I;
  #L428936.  v5:= new `java.lang.Object`[v5];
  #L42893a.  v6:= 0I;
  #L42893c.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L428942.  v1:= temp @kind object;
  #L428944.  v5[v6]:= v1 @kind object;
  #L428948.  v1:= 1I;
  #L42894a.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L428950.  v2:= temp @kind object;
  #L428952.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L428958.  v2:= temp @kind object;
  #L42895a.  v5[v1]:= v2 @kind object;
  #L42895e.  v1:= 2I;
  #L428960.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L428966.  v7:= temp @kind object;
  #L428968.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L42896e.  v7:= temp @kind object;
  #L428970.  v5[v1]:= v7 @kind object;
  #L428974.  call temp:= `format`(v4, v5) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42897a.  v7:= temp @kind object;
  #L42897c.  call `<init>`(v3, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428982.  throw v3;
  #L428984.  v2:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L428988.  call temp:= `put`(v2, v1, v7) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42898e.  @monitorexit v0
  #L428990.  return @kind void;
  #L428992.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L428994.  goto L4289a6;
  #L428996.  v7:= new `java.lang.IllegalArgumentException`;
  #L42899a.  v1:= "wrapper must be non-null" @kind object;
  #L42899e.  call `<init>`(v7, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4289a4.  throw v7;
  #L4289a6.  @monitorexit v0
  #L4289a8.  throw v7;
  catch `java.lang.Throwable` @[L4288ba..L42898e] goto L428992;
  catch `java.lang.Throwable` @[L428996..L4289a6] goto L428992;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L428034.  call temp:= `getPrimitiveClass`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L42803a.  v0:= temp @kind object;
  #L42803c.  call temp:= `wrap`(v1, v0) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L428042.  v1:= temp @kind object;
  #L428044.  return v1 @kind object;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.PrimitiveSet` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L428058.  v0:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L42805c.  call temp:= `get`(v0, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L428062.  v4:= temp @kind object;
  #L428064.  v4:= (`com.google.crypto.tink.PrimitiveWrapper`) v4 @kind object;
  #L428068.  if v4 == 0 then goto L4280e0;
  #L42806c.  call temp:= `getInputPrimitiveClass`(v4) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L428072.  v0:= temp @kind object;
  #L428074.  call temp:= `getPrimitiveClass`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L42807a.  v1:= temp @kind object;
  #L42807c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L428082.  v0:= temp;
  #L428084.  if v0 == 0 then goto L428092;
  #L428088.  call temp:= `wrap`(v4, v3) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @kind interface;
  #L42808e.  v3:= temp @kind object;
  #L428090.  return v3 @kind object;
  #L428092.  v0:= new `java.security.GeneralSecurityException`;
  #L428096.  v1:= new `java.lang.StringBuilder`;
  #L42809a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4280a0.  v2:= "Wrong input primitive class, expected " @kind object;
  #L4280a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4280aa.  call temp:= `getInputPrimitiveClass`(v4) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L4280b0.  v4:= temp @kind object;
  #L4280b2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4280b8.  v4:= ", got " @kind object;
  #L4280bc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4280c2.  call temp:= `getPrimitiveClass`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L4280c8.  v3:= temp @kind object;
  #L4280ca.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4280d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4280d6.  v3:= temp @kind object;
  #L4280d8.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4280de.  throw v0;
  #L4280e0.  v4:= new `java.security.GeneralSecurityException`;
  #L4280e4.  v0:= new `java.lang.StringBuilder`;
  #L4280e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4280ee.  v1:= "No wrapper found for " @kind object;
  #L4280f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4280f8.  call temp:= `getPrimitiveClass`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L4280fe.  v3:= temp @kind object;
  #L428100.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L428106.  v3:= temp @kind object;
  #L428108.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42810e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L428114.  v3:= temp @kind object;
  #L428116.  call `<init>`(v4, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42811c.  throw v4;
}
