record `com.google.crypto.tink.hybrid.HybridDecryptWrapper` @kind class @AccessFlag PUBLIC extends `com.google.crypto.tink.PrimitiveWrapper` @kind interface {
}
global `java.util.logging.Logger` `@@com.google.crypto.tink.hybrid.HybridDecryptWrapper.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42d378.  v0:= constclass @type ^`com.google.crypto.tink.hybrid.HybridDecryptWrapper` @kind object;
  #L42d37c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L42d382.  v0:= temp @kind object;
  #L42d384.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L42d38a.  v0:= temp @kind object;
  #L42d38c.  `@@com.google.crypto.tink.hybrid.HybridDecryptWrapper.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L42d390.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper` v0 @kind this) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d3a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d3aa.  return @kind void;
}
procedure `java.util.logging.Logger` `a`() @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.a:()Ljava/util/logging/Logger;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L42d360.  v0:= `@@com.google.crypto.tink.hybrid.HybridDecryptWrapper.a` @type ^`java.util.logging.Logger` @kind object;
  #L42d364.  return v0 @kind object;
}
procedure `void` `register`() @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.register:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d3bc.  v0:= new `com.google.crypto.tink.hybrid.HybridDecryptWrapper`;
  #L42d3c0.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.<init>:()V` @kind direct;
  #L42d3c6.  call `registerPrimitiveWrapper`(v0) @signature `Lcom/google/crypto/tink/Registry;.registerPrimitiveWrapper:(Lcom/google/crypto/tink/PrimitiveWrapper;)V` @kind static;
  #L42d3cc.  return @kind void;
}
procedure `java.lang.Class` `getInputPrimitiveClass`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d314.  v0:= constclass @type ^`com.google.crypto.tink.HybridDecrypt` @kind object;
  #L42d318.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimitiveClass`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.getPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d32c.  v0:= constclass @type ^`com.google.crypto.tink.HybridDecrypt` @kind object;
  #L42d330.  return v0 @kind object;
}
procedure `com.google.crypto.tink.HybridDecrypt` `wrap`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper` v1 @kind this, `com.google.crypto.tink.PrimitiveSet` v2 @kind object) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/HybridDecrypt;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d2f8.  v0:= new `com.google.crypto.tink.hybrid.HybridDecryptWrapper$a`;
  #L42d2fc.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @kind direct;
  #L42d302.  return v0 @kind object;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42d344.  call temp:= `wrap`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/HybridDecrypt;` @kind virtual;
  #L42d34a.  v1:= temp @kind object;
  #L42d34c.  return v1 @kind object;
}
