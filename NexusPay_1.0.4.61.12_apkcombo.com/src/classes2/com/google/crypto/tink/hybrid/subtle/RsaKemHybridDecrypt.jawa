record `com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.HybridDecrypt` @kind interface {
  `java.security.interfaces.RSAPrivateKey` `com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.c` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.aead.subtle.AeadFactory` `com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt` v1 @kind this, `java.security.interfaces.RSAPrivateKey` v2 @kind object, `java.lang.String` v3 @kind object, `byte`[] v4 @kind object, `com.google.crypto.tink.aead.subtle.AeadFactory` v5 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/RsaKemHybridDecrypt;.<init>:(Ljava/security/interfaces/RSAPrivateKey;Ljava/lang/String;[BLcom/google/crypto/tink/aead/subtle/AeadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42de30.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42de36.  call temp:= `getModulus`(v2) @signature `Ljava/security/interfaces/RSAPrivateKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L42de3c.  v0:= temp @kind object;
  #L42de3e.  call `d`(v0) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.d:(Ljava/math/BigInteger;)V` @kind static;
  #L42de44.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.a` @type ^`java.security.interfaces.RSAPrivateKey` := v2 @kind object;
  #L42de48.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.c` @type ^`byte`[] := v4 @kind object;
  #L42de4c.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.b` @type ^`java.lang.String` := v3 @kind object;
  #L42de50.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.d` @type ^`com.google.crypto.tink.aead.subtle.AeadFactory` := v5 @kind object;
  #L42de54.  return @kind void;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/RsaKemHybridDecrypt;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42dd50.  v0:= v4.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.a` @type ^`java.security.interfaces.RSAPrivateKey` @kind object;
  #L42dd54.  call temp:= `getModulus`(v0) @signature `Ljava/security/interfaces/RSAPrivateKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L42dd5a.  v0:= temp @kind object;
  #L42dd5c.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.a:(Ljava/math/BigInteger;)I` @kind static;
  #L42dd62.  v0:= temp;
  #L42dd64.  v1:= length @variable v5;
  #L42dd66.  v2:= 2I;
  #L42dd68.  if v1 < v0 then goto L42dde4;
  #L42dd6c.  call temp:= `wrap`(v5) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L42dd72.  v5:= temp @kind object;
  #L42dd74.  v0:= new `byte`[v0];
  #L42dd78.  call temp:= `get`(v5, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L42dd7e.  v1:= "RSA/ECB/NoPadding" @kind object;
  #L42dd82.  call temp:= `getInstance`(v1) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L42dd88.  v1:= temp @kind object;
  #L42dd8a.  v3:= v4.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.a` @type ^`java.security.interfaces.RSAPrivateKey` @kind object;
  #L42dd8e.  call `init`(v1, v2, v3) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L42dd94.  call temp:= `doFinal`(v1, v0) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L42dd9a.  v0:= temp @kind object;
  #L42dd9c.  v1:= v4.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.b` @type ^`java.lang.String` @kind object;
  #L42dda0.  v2:= v4.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.c` @type ^`byte`[] @kind object;
  #L42dda4.  v3:= v4.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.d` @type ^`com.google.crypto.tink.aead.subtle.AeadFactory` @kind object;
  #L42dda8.  call temp:= `getKeySizeInBytes`(v3) @signature `Lcom/google/crypto/tink/aead/subtle/AeadFactory;.getKeySizeInBytes:()I` @kind interface;
  #L42ddae.  v3:= temp;
  #L42ddb0.  call temp:= `computeHkdf`(v1, v0, v2, v6, v3) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @kind static;
  #L42ddb6.  v6:= temp @kind object;
  #L42ddb8.  v0:= v4.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridDecrypt.d` @type ^`com.google.crypto.tink.aead.subtle.AeadFactory` @kind object;
  #L42ddbc.  call temp:= `createAead`(v0, v6) @signature `Lcom/google/crypto/tink/aead/subtle/AeadFactory;.createAead:([B)Lcom/google/crypto/tink/Aead;` @kind interface;
  #L42ddc2.  v6:= temp @kind object;
  #L42ddc4.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L42ddca.  v0:= temp;
  #L42ddcc.  v0:= new `byte`[v0];
  #L42ddd0.  call temp:= `get`(v5, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L42ddd6.  v5:= `@@com.google.crypto.tink.hybrid.subtle.a.a` @type ^`byte`[] @kind object;
  #L42ddda.  call temp:= `decrypt`(v6, v0, v5) @signature `Lcom/google/crypto/tink/Aead;.decrypt:([B[B)[B` @kind interface;
  #L42dde0.  v5:= temp @kind object;
  #L42dde2.  return v5 @kind object;
  #L42dde4.  v6:= new `java.security.GeneralSecurityException`;
  #L42dde8.  v1:= new `java.lang.Object`[v2];
  #L42ddec.  v2:= 0I;
  #L42ddee.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42ddf4.  v0:= temp @kind object;
  #L42ddf6.  v1[v2]:= v0 @kind object;
  #L42ddfa.  v0:= 1I;
  #L42ddfc.  v5:= length @variable v5;
  #L42ddfe.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42de04.  v5:= temp @kind object;
  #L42de06.  v1[v0]:= v5 @kind object;
  #L42de0a.  v5:= "Ciphertext must be of at least size %d bytes, but got %d" @kind object;
  #L42de0e.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42de14.  v5:= temp @kind object;
  #L42de16.  call `<init>`(v6, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42de1c.  throw v6;
}
