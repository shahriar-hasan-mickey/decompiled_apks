record `com.google.crypto.tink.hybrid.d` @kind class @AccessFlag  extends `com.google.crypto.tink.subtle.EciesAeadHkdfDemHelper` @kind interface {
  `java.lang.String` `com.google.crypto.tink.hybrid.d.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.hybrid.d.b` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.proto.AesGcmKey` `com.google.crypto.tink.hybrid.d.c` @AccessFlag PRIVATE;
  `com.google.crypto.tink.proto.AesCtrHmacAeadKey` `com.google.crypto.tink.hybrid.d.d` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.hybrid.d.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.d` v2 @kind this, `com.google.crypto.tink.proto.KeyTemplate` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/d;.<init>:(Lcom/google/crypto/tink/proto/KeyTemplate;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42dc08.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42dc0e.  call temp:= `getTypeUrl`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L42dc14.  v0:= temp @kind object;
  #L42dc16.  v2.`com.google.crypto.tink.hybrid.d.a` @type ^`java.lang.String` := v0 @kind object;
  #L42dc1a.  v1:= `@@com.google.crypto.tink.aead.AeadConfig.AES_GCM_TYPE_URL` @type ^`java.lang.String` @kind object;
  #L42dc1e.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42dc24.  v0:= temp;
  #L42dc26.  if v0 == 0 then goto L42dc72;
  #L42dc2a.  call temp:= `getValue`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42dc30.  v0:= temp @kind object;
  #L42dc32.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42dc38.  v1:= temp @kind object;
  #L42dc3a.  call temp:= `parseFrom`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmKeyFormat;` @kind static;
  #L42dc40.  v0:= temp @kind object;
  #L42dc42.  call temp:= `newKey`(v3) @signature `Lcom/google/crypto/tink/Registry;.newKey:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @kind static;
  #L42dc48.  v3:= temp @kind object;
  #L42dc4a.  v3:= (`com.google.crypto.tink.proto.AesGcmKey`) v3 @kind object;
  #L42dc4e.  v2.`com.google.crypto.tink.hybrid.d.c` @type ^`com.google.crypto.tink.proto.AesGcmKey` := v3 @kind object;
  #L42dc52.  call temp:= `getKeySize`(v0) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L42dc58.  v3:= temp;
  #L42dc5a.  v2.`com.google.crypto.tink.hybrid.d.b` @type ^`int` := v3;
  #L42dc5e.  goto L42dcdc;
  #L42dc60.  v3:= Exception @type ^`com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @kind object;
  #L42dc62.  v0:= new `java.security.GeneralSecurityException`;
  #L42dc66.  v1:= "invalid KeyFormat protobuf, expected AesGcmKeyFormat" @kind object;
  #L42dc6a.  call `<init>`(v0, v1, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L42dc70.  throw v0;
  #L42dc72.  v0:= v2.`com.google.crypto.tink.hybrid.d.a` @type ^`java.lang.String` @kind object;
  #L42dc76.  v1:= `@@com.google.crypto.tink.aead.AeadConfig.AES_CTR_HMAC_AEAD_TYPE_URL` @type ^`java.lang.String` @kind object;
  #L42dc7a.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42dc80.  v0:= temp;
  #L42dc82.  if v0 == 0 then goto L42dcf0;
  #L42dc86.  call temp:= `getValue`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42dc8c.  v0:= temp @kind object;
  #L42dc8e.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42dc94.  v1:= temp @kind object;
  #L42dc96.  call temp:= `parseFrom`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesCtrHmacAeadKeyFormat;` @kind static;
  #L42dc9c.  v0:= temp @kind object;
  #L42dc9e.  call temp:= `newKey`(v3) @signature `Lcom/google/crypto/tink/Registry;.newKey:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @kind static;
  #L42dca4.  v3:= temp @kind object;
  #L42dca6.  v3:= (`com.google.crypto.tink.proto.AesCtrHmacAeadKey`) v3 @kind object;
  #L42dcaa.  v2.`com.google.crypto.tink.hybrid.d.d` @type ^`com.google.crypto.tink.proto.AesCtrHmacAeadKey` := v3 @kind object;
  #L42dcae.  call temp:= `getAesCtrKeyFormat`(v0) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKeyFormat;.getAesCtrKeyFormat:()Lcom/google/crypto/tink/proto/AesCtrKeyFormat;` @kind virtual;
  #L42dcb4.  v3:= temp @kind object;
  #L42dcb6.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrKeyFormat;.getKeySize:()I` @kind virtual;
  #L42dcbc.  v3:= temp;
  #L42dcbe.  v2.`com.google.crypto.tink.hybrid.d.e` @type ^`int` := v3;
  #L42dcc2.  call temp:= `getHmacKeyFormat`(v0) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKeyFormat;.getHmacKeyFormat:()Lcom/google/crypto/tink/proto/HmacKeyFormat;` @kind virtual;
  #L42dcc8.  v3:= temp @kind object;
  #L42dcca.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L42dcd0.  v3:= temp;
  #L42dcd2.  v0:= v2.`com.google.crypto.tink.hybrid.d.e` @type ^`int`;
  #L42dcd6.  v0:= v0 + v3 @kind int;
  #L42dcd8.  v2.`com.google.crypto.tink.hybrid.d.b` @type ^`int` := v0;
  #L42dcdc.  return @kind void;
  #L42dcde.  v3:= Exception @type ^`com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @kind object;
  #L42dce0.  v0:= new `java.security.GeneralSecurityException`;
  #L42dce4.  v1:= "invalid KeyFormat protobuf, expected AesCtrHmacAeadKeyFormat" @kind object;
  #L42dce8.  call `<init>`(v0, v1, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L42dcee.  throw v0;
  #L42dcf0.  v3:= new `java.security.GeneralSecurityException`;
  #L42dcf4.  v0:= new `java.lang.StringBuilder`;
  #L42dcf8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42dcfe.  v1:= "unsupported AEAD DEM key type: " @kind object;
  #L42dd02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dd08.  v1:= v2.`com.google.crypto.tink.hybrid.d.a` @type ^`java.lang.String` @kind object;
  #L42dd0c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dd12.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42dd18.  v0:= temp @kind object;
  #L42dd1a.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dd20.  throw v3;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L42dc2a..L42dc5e] goto L42dc60;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L42dc86..L42dcdc] goto L42dcde;
}
procedure `com.google.crypto.tink.Aead` `getAead`(`com.google.crypto.tink.hybrid.d` v4 @kind this, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/hybrid/d;.getAead:([B)Lcom/google/crypto/tink/Aead;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42da5c.  v0:= constclass @type ^`com.google.crypto.tink.Aead` @kind object;
  #L42da60.  v1:= length @variable v5;
  #L42da62.  call temp:= `getSymmetricKeySizeInBytes`(v4) @signature `Lcom/google/crypto/tink/hybrid/d;.getSymmetricKeySizeInBytes:()I` @kind virtual;
  #L42da68.  v2:= temp;
  #L42da6a.  if v1 != v2 then goto L42dbd0;
  #L42da6e.  v1:= v4.`com.google.crypto.tink.hybrid.d.a` @type ^`java.lang.String` @kind object;
  #L42da72.  v2:= `@@com.google.crypto.tink.aead.AeadConfig.AES_GCM_TYPE_URL` @type ^`java.lang.String` @kind object;
  #L42da76.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42da7c.  v1:= temp;
  #L42da7e.  v2:= 0I;
  #L42da80.  if v1 == 0 then goto L42dace;
  #L42da84.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind static;
  #L42da8a.  v1:= temp @kind object;
  #L42da8c.  v3:= v4.`com.google.crypto.tink.hybrid.d.c` @type ^`com.google.crypto.tink.proto.AesGcmKey` @kind object;
  #L42da90.  call temp:= `mergeFrom`(v1, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;)Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;` @kind virtual;
  #L42da96.  v1:= temp @kind object;
  #L42da98.  v1:= (`com.google.crypto.tink.proto.AesGcmKey$Builder`) v1 @kind object;
  #L42da9c.  v3:= v4.`com.google.crypto.tink.hybrid.d.b` @type ^`int`;
  #L42daa0.  call temp:= `copyFrom`(v5, v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([BII)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42daa6.  v5:= temp @kind object;
  #L42daa8.  call temp:= `setKeyValue`(v1, v5) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L42daae.  v5:= temp @kind object;
  #L42dab0.  call temp:= `build`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42dab6.  v5:= temp @kind object;
  #L42dab8.  v5:= (`com.google.crypto.tink.proto.AesGcmKey`) v5 @kind object;
  #L42dabc.  v1:= v4.`com.google.crypto.tink.hybrid.d.a` @type ^`java.lang.String` @kind object;
  #L42dac0.  call temp:= `getPrimitive`(v1, v5, v0) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L42dac6.  v5:= temp @kind object;
  #L42dac8.  v5:= (`com.google.crypto.tink.Aead`) v5 @kind object;
  #L42dacc.  return v5 @kind object;
  #L42dace.  v1:= v4.`com.google.crypto.tink.hybrid.d.a` @type ^`java.lang.String` @kind object;
  #L42dad2.  v3:= `@@com.google.crypto.tink.aead.AeadConfig.AES_CTR_HMAC_AEAD_TYPE_URL` @type ^`java.lang.String` @kind object;
  #L42dad6.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42dadc.  v1:= temp;
  #L42dade.  if v1 == 0 then goto L42dbc0;
  #L42dae2.  v1:= v4.`com.google.crypto.tink.hybrid.d.e` @type ^`int`;
  #L42dae6.  call temp:= `copyOfRange`(v5, v2, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L42daec.  v1:= temp @kind object;
  #L42daee.  v2:= v4.`com.google.crypto.tink.hybrid.d.e` @type ^`int`;
  #L42daf2.  v3:= v4.`com.google.crypto.tink.hybrid.d.b` @type ^`int`;
  #L42daf6.  call temp:= `copyOfRange`(v5, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L42dafc.  v5:= temp @kind object;
  #L42dafe.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCtrKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesCtrKey$Builder;` @kind static;
  #L42db04.  v2:= temp @kind object;
  #L42db06.  v3:= v4.`com.google.crypto.tink.hybrid.d.d` @type ^`com.google.crypto.tink.proto.AesCtrHmacAeadKey` @kind object;
  #L42db0a.  call temp:= `getAesCtrKey`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey;.getAesCtrKey:()Lcom/google/crypto/tink/proto/AesCtrKey;` @kind virtual;
  #L42db10.  v3:= temp @kind object;
  #L42db12.  call temp:= `mergeFrom`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;)Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;` @kind virtual;
  #L42db18.  v2:= temp @kind object;
  #L42db1a.  v2:= (`com.google.crypto.tink.proto.AesCtrKey$Builder`) v2 @kind object;
  #L42db1e.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42db24.  v1:= temp @kind object;
  #L42db26.  call temp:= `setKeyValue`(v2, v1) @signature `Lcom/google/crypto/tink/proto/AesCtrKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCtrKey$Builder;` @kind virtual;
  #L42db2c.  v1:= temp @kind object;
  #L42db2e.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42db34.  v1:= temp @kind object;
  #L42db36.  v1:= (`com.google.crypto.tink.proto.AesCtrKey`) v1 @kind object;
  #L42db3a.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacKey;.newBuilder:()Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind static;
  #L42db40.  v2:= temp @kind object;
  #L42db42.  v3:= v4.`com.google.crypto.tink.hybrid.d.d` @type ^`com.google.crypto.tink.proto.AesCtrHmacAeadKey` @kind object;
  #L42db46.  call temp:= `getHmacKey`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey;.getHmacKey:()Lcom/google/crypto/tink/proto/HmacKey;` @kind virtual;
  #L42db4c.  v3:= temp @kind object;
  #L42db4e.  call temp:= `mergeFrom`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;)Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;` @kind virtual;
  #L42db54.  v2:= temp @kind object;
  #L42db56.  v2:= (`com.google.crypto.tink.proto.HmacKey$Builder`) v2 @kind object;
  #L42db5a.  call temp:= `copyFrom`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42db60.  v5:= temp @kind object;
  #L42db62.  call temp:= `setKeyValue`(v2, v5) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L42db68.  v5:= temp @kind object;
  #L42db6a.  call temp:= `build`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42db70.  v5:= temp @kind object;
  #L42db72.  v5:= (`com.google.crypto.tink.proto.HmacKey`) v5 @kind object;
  #L42db76.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey$Builder;` @kind static;
  #L42db7c.  v2:= temp @kind object;
  #L42db7e.  v3:= v4.`com.google.crypto.tink.hybrid.d.d` @type ^`com.google.crypto.tink.proto.AesCtrHmacAeadKey` @kind object;
  #L42db82.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey;.getVersion:()I` @kind virtual;
  #L42db88.  v3:= temp;
  #L42db8a.  call temp:= `setVersion`(v2, v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey$Builder;` @kind virtual;
  #L42db90.  v2:= temp @kind object;
  #L42db92.  call temp:= `setAesCtrKey`(v2, v1) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey$Builder;.setAesCtrKey:(Lcom/google/crypto/tink/proto/AesCtrKey;)Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey$Builder;` @kind virtual;
  #L42db98.  v1:= temp @kind object;
  #L42db9a.  call temp:= `setHmacKey`(v1, v5) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey$Builder;.setHmacKey:(Lcom/google/crypto/tink/proto/HmacKey;)Lcom/google/crypto/tink/proto/AesCtrHmacAeadKey$Builder;` @kind virtual;
  #L42dba0.  v5:= temp @kind object;
  #L42dba2.  call temp:= `build`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42dba8.  v5:= temp @kind object;
  #L42dbaa.  v5:= (`com.google.crypto.tink.proto.AesCtrHmacAeadKey`) v5 @kind object;
  #L42dbae.  v1:= v4.`com.google.crypto.tink.hybrid.d.a` @type ^`java.lang.String` @kind object;
  #L42dbb2.  call temp:= `getPrimitive`(v1, v5, v0) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L42dbb8.  v5:= temp @kind object;
  #L42dbba.  v5:= (`com.google.crypto.tink.Aead`) v5 @kind object;
  #L42dbbe.  return v5 @kind object;
  #L42dbc0.  v5:= new `java.security.GeneralSecurityException`;
  #L42dbc4.  v0:= "unknown DEM key type" @kind object;
  #L42dbc8.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dbce.  throw v5;
  #L42dbd0.  v5:= new `java.security.GeneralSecurityException`;
  #L42dbd4.  v0:= "Symmetric key has incorrect length" @kind object;
  #L42dbd8.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dbde.  throw v5;
}
procedure `int` `getSymmetricKeySizeInBytes`(`com.google.crypto.tink.hybrid.d` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/d;.getSymmetricKeySizeInBytes:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dbf0.  v0:= v1.`com.google.crypto.tink.hybrid.d.b` @type ^`int`;
  #L42dbf4.  return v0;
}
