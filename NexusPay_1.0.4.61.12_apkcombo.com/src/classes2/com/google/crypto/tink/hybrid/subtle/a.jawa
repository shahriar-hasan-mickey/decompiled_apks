record `com.google.crypto.tink.hybrid.subtle.a` @kind class @AccessFlag  {
}
global `byte`[] `@@com.google.crypto.tink.hybrid.subtle.a.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42e05c.  v0:= 0I;
  #L42e05e.  v0:= new `byte`[v0];
  #L42e062.  `@@com.google.crypto.tink.hybrid.subtle.a.a` @type ^`byte`[] := v0 @kind object;
  #L42e066.  return @kind void;
}
procedure `int` `a`(`java.math.BigInteger` v0 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.a:(Ljava/math/BigInteger;)I` @AccessFlag STATIC {
    temp;

  #L42e038.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L42e03e.  v0:= temp;
  #L42e040.  v0:= v0 + 7;
  #L42e044.  v0:= v0 / 8;
  #L42e048.  return v0;
}
procedure `byte`[] `b`(`java.math.BigInteger` v5 @kind object, `int` v6 ) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.b:(Ljava/math/BigInteger;I)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42df40.  call temp:= `toByteArray`(v5) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L42df46.  v5:= temp @kind object;
  #L42df48.  v0:= length @variable v5;
  #L42df4a.  if v0 != v6 then goto L42df50;
  #L42df4e.  return v5 @kind object;
  #L42df50.  v0:= new `byte`[v6];
  #L42df54.  v1:= length @variable v5;
  #L42df56.  v2:= v6 + 1;
  #L42df5a.  v3:= 1I;
  #L42df5c.  v4:= 0I;
  #L42df5e.  if v1 != v2 then goto L42df82;
  #L42df62.  v1:= v5[v4] @kind byte;
  #L42df66.  if v1 != 0 then goto L42df72;
  #L42df6a.  call `arraycopy`(v5, v3, v0, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42df70.  goto L42df94;
  #L42df72.  v5:= new `java.lang.IllegalArgumentException`;
  #L42df76.  v6:= "Value is one-byte longer than the expected size, but its first byte is not 0" @kind object;
  #L42df7a.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42df80.  throw v5;
  #L42df82.  v1:= length @variable v5;
  #L42df84.  if v1 >= v6 then goto L42df96;
  #L42df88.  v1:= length @variable v5;
  #L42df8a.  v6:= v6 - v1 @kind int;
  #L42df8c.  v1:= length @variable v5;
  #L42df8e.  call `arraycopy`(v5, v4, v0, v6, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42df94.  return v0 @kind object;
  #L42df96.  v0:= new `java.lang.IllegalArgumentException`;
  #L42df9a.  v1:= 2I;
  #L42df9c.  v1:= new `java.lang.Object`[v1];
  #L42dfa0.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42dfa6.  v6:= temp @kind object;
  #L42dfa8.  v1[v4]:= v6 @kind object;
  #L42dfac.  v5:= length @variable v5;
  #L42dfae.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42dfb4.  v5:= temp @kind object;
  #L42dfb6.  v1[v3]:= v5 @kind object;
  #L42dfba.  v5:= "Value has invalid length, must be of length at most (%d + 1), but got %d" @kind object;
  #L42dfbe.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42dfc4.  v5:= temp @kind object;
  #L42dfc6.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dfcc.  throw v0;
}
procedure `byte`[] `c`(`java.math.BigInteger` v4 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.c:(Ljava/math/BigInteger;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42dfe0.  call temp:= `a`(v4) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.a:(Ljava/math/BigInteger;)I` @kind static;
  #L42dfe6.  v0:= temp;
  #L42dfe8.  v1:= new `java.security.SecureRandom`;
  #L42dfec.  call `<init>`(v1) @signature `Ljava/security/SecureRandom;.<init>:()V` @kind direct;
  #L42dff2.  v2:= new `java.math.BigInteger`;
  #L42dff6.  call temp:= `bitLength`(v4) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L42dffc.  v3:= temp;
  #L42dffe.  call `<init>`(v2, v3, v1) @signature `Ljava/math/BigInteger;.<init>:(ILjava/util/Random;)V` @kind direct;
  #L42e004.  call temp:= `signum`(v2) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L42e00a.  v3:= temp;
  #L42e00c.  if v3 <= 0 then goto L42dff2;
  #L42e010.  call temp:= `compareTo`(v2, v4) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L42e016.  v3:= temp;
  #L42e018.  if v3 >= 0 then goto L42dff2;
  #L42e01c.  call temp:= `b`(v2, v0) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.b:(Ljava/math/BigInteger;I)[B` @kind static;
  #L42e022.  v4:= temp @kind object;
  #L42e024.  return v4 @kind object;
}
procedure `void` `d`(`java.math.BigInteger` v4 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.d:(Ljava/math/BigInteger;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42e078.  call temp:= `bitLength`(v4) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L42e07e.  v0:= temp;
  #L42e080.  v1:= 2048I;
  #L42e084.  if v0 < v1 then goto L42e08a;
  #L42e088.  return @kind void;
  #L42e08a.  v0:= new `java.security.GeneralSecurityException`;
  #L42e08e.  v2:= 2I;
  #L42e090.  v2:= new `java.lang.Object`[v2];
  #L42e094.  v3:= 0I;
  #L42e096.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42e09c.  v1:= temp @kind object;
  #L42e09e.  v2[v3]:= v1 @kind object;
  #L42e0a2.  v1:= 1I;
  #L42e0a4.  call temp:= `bitLength`(v4) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L42e0aa.  v4:= temp;
  #L42e0ac.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L42e0b2.  v4:= temp @kind object;
  #L42e0b4.  v2[v1]:= v4 @kind object;
  #L42e0b8.  v4:= "RSA key must be of at least size %d bits, but got %d" @kind object;
  #L42e0bc.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42e0c2.  v4:= temp @kind object;
  #L42e0c4.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e0ca.  throw v0;
}
