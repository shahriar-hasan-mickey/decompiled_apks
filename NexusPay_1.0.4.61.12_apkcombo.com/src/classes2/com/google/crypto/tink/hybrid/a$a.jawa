record `com.google.crypto.tink.hybrid.a$a` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.a$a` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/a$a;.<init>:(Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42cf44.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42cf4a.  return @kind void;
}
procedure `com.google.crypto.tink.HybridEncrypt` `b`(`com.google.crypto.tink.hybrid.a$a` v10 @kind this, `com.google.crypto.tink.proto.EciesAeadHkdfPublicKey` v11 @kind object) @signature `Lcom/google/crypto/tink/hybrid/a$a;.b:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;)Lcom/google/crypto/tink/HybridEncrypt;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L42ce74.  call temp:= `getParams`(v11) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;` @kind virtual;
  #L42ce7a.  v0:= temp @kind object;
  #L42ce7c.  call temp:= `getKemParams`(v0) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getKemParams:()Lcom/google/crypto/tink/proto/EciesHkdfKemParams;` @kind virtual;
  #L42ce82.  v1:= temp @kind object;
  #L42ce84.  call temp:= `getCurveType`(v1) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.getCurveType:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L42ce8a.  v2:= temp @kind object;
  #L42ce8c.  call temp:= `a`(v2) @signature `Lcom/google/crypto/tink/hybrid/c;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @kind static;
  #L42ce92.  v2:= temp @kind object;
  #L42ce94.  call temp:= `getX`(v11) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;.getX:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42ce9a.  v3:= temp @kind object;
  #L42ce9c.  call temp:= `toByteArray`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L42cea2.  v3:= temp @kind object;
  #L42cea4.  call temp:= `getY`(v11) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;.getY:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42ceaa.  v11:= temp @kind object;
  #L42ceac.  call temp:= `toByteArray`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L42ceb2.  v11:= temp @kind object;
  #L42ceb4.  call temp:= `getEcPublicKey`(v2, v3, v11) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;[B[B)Ljava/security/interfaces/ECPublicKey;` @kind static;
  #L42ceba.  v5:= temp @kind object;
  #L42cebc.  v9:= new `com.google.crypto.tink.hybrid.d`;
  #L42cec0.  call temp:= `getDemParams`(v0) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getDemParams:()Lcom/google/crypto/tink/proto/EciesAeadDemParams;` @kind virtual;
  #L42cec6.  v11:= temp @kind object;
  #L42cec8.  call temp:= `getAeadDem`(v11) @signature `Lcom/google/crypto/tink/proto/EciesAeadDemParams;.getAeadDem:()Lcom/google/crypto/tink/proto/KeyTemplate;` @kind virtual;
  #L42cece.  v11:= temp @kind object;
  #L42ced0.  call `<init>`(v9, v11) @signature `Lcom/google/crypto/tink/hybrid/d;.<init>:(Lcom/google/crypto/tink/proto/KeyTemplate;)V` @kind direct;
  #L42ced6.  v11:= new `com.google.crypto.tink.subtle.EciesAeadHkdfHybridEncrypt`;
  #L42ceda.  call temp:= `getHkdfSalt`(v1) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.getHkdfSalt:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42cee0.  v2:= temp @kind object;
  #L42cee2.  call temp:= `toByteArray`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L42cee8.  v6:= temp @kind object;
  #L42ceea.  call temp:= `getHkdfHashType`(v1) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.getHkdfHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L42cef0.  v1:= temp @kind object;
  #L42cef2.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/hybrid/c;.b:(Lcom/google/crypto/tink/proto/HashType;)Ljava/lang/String;` @kind static;
  #L42cef8.  v7:= temp @kind object;
  #L42cefa.  call temp:= `getEcPointFormat`(v0) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getEcPointFormat:()Lcom/google/crypto/tink/proto/EcPointFormat;` @kind virtual;
  #L42cf00.  v0:= temp @kind object;
  #L42cf02.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/hybrid/c;.c:(Lcom/google/crypto/tink/proto/EcPointFormat;)Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;` @kind static;
  #L42cf08.  v8:= temp @kind object;
  #L42cf0a.  v4:= v11 @kind object;
  #L42cf0c.  call `<init>`(v4, v5, v6, v7, v8, v9) @signature `Lcom/google/crypto/tink/subtle/EciesAeadHkdfHybridEncrypt;.<init>:(Ljava/security/interfaces/ECPublicKey;[BLjava/lang/String;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Lcom/google/crypto/tink/subtle/EciesAeadHkdfDemHelper;)V` @kind direct;
  #L42cf12.  return v11 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.hybrid.a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/a$a;.getPrimitive:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42cf24.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfPublicKey`) v1 @kind object;
  #L42cf28.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/a$a;.b:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;)Lcom/google/crypto/tink/HybridEncrypt;` @kind virtual;
  #L42cf2e.  v1:= temp @kind object;
  #L42cf30.  return v1 @kind object;
}
