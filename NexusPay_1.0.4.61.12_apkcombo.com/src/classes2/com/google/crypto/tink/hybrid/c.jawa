record `com.google.crypto.tink.hybrid.c` @kind class @AccessFlag  {
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$CurveType` `a`(`com.google.crypto.tink.proto.EllipticCurveType` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42d884.  v0:= `@@com.google.crypto.tink.hybrid.c$a.b` @type ^`int`[] @kind object;
  #L42d888.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L42d88e.  v1:= temp;
  #L42d890.  v0:= v0[v1];
  #L42d894.  v1:= 1I;
  #L42d896.  if v0 == v1 then goto L42d8e0;
  #L42d89a.  v1:= 2I;
  #L42d89c.  if v0 == v1 then goto L42d8da;
  #L42d8a0.  v1:= 3I;
  #L42d8a2.  if v0 != v1 then goto L42d8ac;
  #L42d8a6.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P521` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L42d8aa.  return v3 @kind object;
  #L42d8ac.  v0:= new `java.security.GeneralSecurityException`;
  #L42d8b0.  v1:= new `java.lang.StringBuilder`;
  #L42d8b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d8ba.  v2:= "unknown curve type: " @kind object;
  #L42d8be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d8c4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d8ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d8d0.  v3:= temp @kind object;
  #L42d8d2.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d8d8.  throw v0;
  #L42d8da.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P384` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L42d8de.  return v3 @kind object;
  #L42d8e0.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P256` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L42d8e4.  return v3 @kind object;
}
procedure `java.lang.String` `b`(`com.google.crypto.tink.proto.HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.b:(Lcom/google/crypto/tink/proto/HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42d96c.  v0:= `@@com.google.crypto.tink.hybrid.c$a.a` @type ^`int`[] @kind object;
  #L42d970.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L42d976.  v1:= temp;
  #L42d978.  v0:= v0[v1];
  #L42d97c.  v1:= 1I;
  #L42d97e.  if v0 == v1 then goto L42d9c8;
  #L42d982.  v1:= 2I;
  #L42d984.  if v0 == v1 then goto L42d9c2;
  #L42d988.  v1:= 3I;
  #L42d98a.  if v0 != v1 then goto L42d994;
  #L42d98e.  v3:= "HmacSha512" @kind object;
  #L42d992.  return v3 @kind object;
  #L42d994.  v0:= new `java.security.NoSuchAlgorithmException`;
  #L42d998.  v1:= new `java.lang.StringBuilder`;
  #L42d99c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d9a2.  v2:= "hash unsupported for HMAC: " @kind object;
  #L42d9a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d9ac.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d9b2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d9b8.  v3:= temp @kind object;
  #L42d9ba.  call `<init>`(v0, v3) @signature `Ljava/security/NoSuchAlgorithmException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d9c0.  throw v0;
  #L42d9c2.  v3:= "HmacSha256" @kind object;
  #L42d9c6.  return v3 @kind object;
  #L42d9c8.  v3:= "HmacSha1" @kind object;
  #L42d9cc.  return v3 @kind object;
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` `c`(`com.google.crypto.tink.proto.EcPointFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.c:(Lcom/google/crypto/tink/proto/EcPointFormat;)Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42d8f8.  v0:= `@@com.google.crypto.tink.hybrid.c$a.c` @type ^`int`[] @kind object;
  #L42d8fc.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L42d902.  v1:= temp;
  #L42d904.  v0:= v0[v1];
  #L42d908.  v1:= 1I;
  #L42d90a.  if v0 == v1 then goto L42d954;
  #L42d90e.  v1:= 2I;
  #L42d910.  if v0 == v1 then goto L42d94e;
  #L42d914.  v1:= 3I;
  #L42d916.  if v0 != v1 then goto L42d920;
  #L42d91a.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.COMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L42d91e.  return v3 @kind object;
  #L42d920.  v0:= new `java.security.GeneralSecurityException`;
  #L42d924.  v1:= new `java.lang.StringBuilder`;
  #L42d928.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d92e.  v2:= "unknown point format: " @kind object;
  #L42d932.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d938.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d93e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d944.  v3:= temp @kind object;
  #L42d946.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d94c.  throw v0;
  #L42d94e.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L42d952.  return v3 @kind object;
  #L42d954.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.UNCOMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L42d958.  return v3 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.EciesAeadHkdfParams` v2 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.d:(Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L42d9e0.  call temp:= `getKemParams`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getKemParams:()Lcom/google/crypto/tink/proto/EciesHkdfKemParams;` @kind virtual;
  #L42d9e6.  v0:= temp @kind object;
  #L42d9e8.  call temp:= `getCurveType`(v0) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.getCurveType:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L42d9ee.  v0:= temp @kind object;
  #L42d9f0.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/hybrid/c;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @kind static;
  #L42d9f6.  v0:= temp @kind object;
  #L42d9f8.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L42d9fe.  call temp:= `getKemParams`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getKemParams:()Lcom/google/crypto/tink/proto/EciesHkdfKemParams;` @kind virtual;
  #L42da04.  v0:= temp @kind object;
  #L42da06.  call temp:= `getHkdfHashType`(v0) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.getHkdfHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L42da0c.  v0:= temp @kind object;
  #L42da0e.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/hybrid/c;.b:(Lcom/google/crypto/tink/proto/HashType;)Ljava/lang/String;` @kind static;
  #L42da14.  call temp:= `getEcPointFormat`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getEcPointFormat:()Lcom/google/crypto/tink/proto/EcPointFormat;` @kind virtual;
  #L42da1a.  v0:= temp @kind object;
  #L42da1c.  v1:= `@@com.google.crypto.tink.proto.EcPointFormat.UNKNOWN_FORMAT` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L42da20.  if v0 == v1 then goto L42da3c;
  #L42da24.  call temp:= `getDemParams`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getDemParams:()Lcom/google/crypto/tink/proto/EciesAeadDemParams;` @kind virtual;
  #L42da2a.  v2:= temp @kind object;
  #L42da2c.  call temp:= `getAeadDem`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadDemParams;.getAeadDem:()Lcom/google/crypto/tink/proto/KeyTemplate;` @kind virtual;
  #L42da32.  v2:= temp @kind object;
  #L42da34.  call temp:= `newKeyData`(v2) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L42da3a.  return @kind void;
  #L42da3c.  v2:= new `java.security.GeneralSecurityException`;
  #L42da40.  v0:= "unknown EC point format" @kind object;
  #L42da44.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42da4a.  throw v2;
}
