record `com.google.crypto.tink.hybrid.HybridDecryptWrapper$a` @kind class @AccessFlag  extends `com.google.crypto.tink.HybridDecrypt` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d2dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d2e2.  v0.`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v1 @kind object;
  #L42d2e6.  return @kind void;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a` v6 @kind this, `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper$a;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42d1c0.  v0:= length @variable v7;
  #L42d1c2.  v1:= 5I;
  #L42d1c4.  if v0 <= v1 then goto L42d25a;
  #L42d1c8.  v0:= 0I;
  #L42d1ca.  call temp:= `copyOfRange`(v7, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L42d1d0.  v0:= temp @kind object;
  #L42d1d2.  v2:= length @variable v7;
  #L42d1d4.  call temp:= `copyOfRange`(v7, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L42d1da.  v1:= temp @kind object;
  #L42d1dc.  v2:= v6.`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L42d1e0.  call temp:= `getPrimitive`(v2, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L42d1e6.  v0:= temp @kind object;
  #L42d1e8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42d1ee.  v0:= temp @kind object;
  #L42d1f0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42d1f6.  v2:= temp;
  #L42d1f8.  if v2 == 0 then goto L42d25a;
  #L42d1fc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42d202.  v2:= temp @kind object;
  #L42d204.  v2:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v2 @kind object;
  #L42d208.  call temp:= `getPrimitive`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L42d20e.  v2:= temp @kind object;
  #L42d210.  v2:= (`com.google.crypto.tink.HybridDecrypt`) v2 @kind object;
  #L42d214.  call temp:= `decrypt`(v2, v1, v8) @signature `Lcom/google/crypto/tink/HybridDecrypt;.decrypt:([B[B)[B` @kind interface;
  #L42d21a.  v7:= temp @kind object;
  #L42d21c.  return v7 @kind object;
  #L42d21e.  v2:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L42d220.  call temp:= `a`() @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.a:()Ljava/util/logging/Logger;` @kind static;
  #L42d226.  v3:= temp @kind object;
  #L42d228.  v4:= new `java.lang.StringBuilder`;
  #L42d22c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d232.  v5:= "ciphertext prefix matches a key, but cannot decrypt: " @kind object;
  #L42d236.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d23c.  call temp:= `toString`(v2) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d242.  v2:= temp @kind object;
  #L42d244.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d24a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d250.  v2:= temp @kind object;
  #L42d252.  call `info`(v3, v2) @signature `Ljava/util/logging/Logger;.info:(Ljava/lang/String;)V` @kind virtual;
  #L42d258.  goto L42d1f0;
  #L42d25a.  v0:= v6.`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L42d25e.  call temp:= `getRawPrimitives`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L42d264.  v0:= temp @kind object;
  #L42d266.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42d26c.  v0:= temp @kind object;
  #L42d26e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42d274.  v1:= temp;
  #L42d276.  if v1 == 0 then goto L42d2a0;
  #L42d27a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42d280.  v1:= temp @kind object;
  #L42d282.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L42d286.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L42d28c.  v1:= temp @kind object;
  #L42d28e.  v1:= (`com.google.crypto.tink.HybridDecrypt`) v1 @kind object;
  #L42d292.  call temp:= `decrypt`(v1, v7, v8) @signature `Lcom/google/crypto/tink/HybridDecrypt;.decrypt:([B[B)[B` @kind interface;
  #L42d298.  v7:= temp @kind object;
  #L42d29a.  return v7 @kind object;
  #L42d29c.  
  #L42d29e.  goto L42d26e;
  #L42d2a0.  v7:= new `java.security.GeneralSecurityException`;
  #L42d2a4.  v8:= "decryption failed" @kind object;
  #L42d2a8.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d2ae.  throw v7;
  catch `java.security.GeneralSecurityException` @[L42d208..L42d21c] goto L42d21e;
  catch `java.security.GeneralSecurityException` @[L42d286..L42d29a] goto L42d29c;
}
