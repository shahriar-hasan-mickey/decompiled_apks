record `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PrivateKeyTypeManager` @kind class {
}
global `byte`[] `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42cd70.  v0:= 0I;
  #L42cd72.  v0:= new `byte`[v0];
  #L42cd76.  `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] := v0 @kind object;
  #L42cd7a.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v5 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42cd8c.  v0:= constclass @type ^`com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` @kind object;
  #L42cd90.  v1:= constclass @type ^`com.google.crypto.tink.proto.EciesAeadHkdfPublicKey` @kind object;
  #L42cd94.  v2:= 1I;
  #L42cd96.  v2:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v2];
  #L42cd9a.  v3:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager$a`;
  #L42cd9e.  v4:= constclass @type ^`com.google.crypto.tink.HybridDecrypt` @kind object;
  #L42cda2.  call `<init>`(v3, v4) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L42cda8.  v4:= 0I;
  #L42cdaa.  v2[v4]:= v3 @kind object;
  #L42cdae.  call `<init>`(v5, v0, v1, v2) @signature `Lcom/google/crypto/tink/PrivateKeyTypeManager;.<init>:(Ljava/lang/Class;Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L42cdb4.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`com.google.crypto.tink.proto.EllipticCurveType` v1 @kind object, `com.google.crypto.tink.proto.HashType` v2 @kind object, `com.google.crypto.tink.proto.EcPointFormat` v3 @kind object, `com.google.crypto.tink.KeyTemplate` v4 @kind object, `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42ca14.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat$Builder;` @kind static;
  #L42ca1a.  v0:= temp @kind object;
  #L42ca1c.  call temp:= `c`(v1, v2, v3, v4, v6) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.c:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;[B)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;` @kind static;
  #L42ca22.  v1:= temp @kind object;
  #L42ca24.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;)Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat$Builder;` @kind virtual;
  #L42ca2a.  v1:= temp @kind object;
  #L42ca2c.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42ca32.  v1:= temp @kind object;
  #L42ca34.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfKeyFormat`) v1 @kind object;
  #L42ca38.  v2:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager`;
  #L42ca3c.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<init>:()V` @kind direct;
  #L42ca42.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42ca48.  v2:= temp @kind object;
  #L42ca4a.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L42ca50.  v1:= temp @kind object;
  #L42ca52.  call temp:= `create`(v2, v1, v5) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42ca58.  v1:= temp @kind object;
  #L42ca5a.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.EciesAeadHkdfParams` `c`(`com.google.crypto.tink.proto.EllipticCurveType` v1 @kind object, `com.google.crypto.tink.proto.HashType` v2 @kind object, `com.google.crypto.tink.proto.EcPointFormat` v3 @kind object, `com.google.crypto.tink.KeyTemplate` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.c:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;[B)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;` @AccessFlag STATIC {
    temp;
    v0;

  #L42cb6c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.newBuilder:()Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind static;
  #L42cb72.  v0:= temp @kind object;
  #L42cb74.  call temp:= `setCurveType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;.setCurveType:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind virtual;
  #L42cb7a.  v1:= temp @kind object;
  #L42cb7c.  call temp:= `setHkdfHashType`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;.setHkdfHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind virtual;
  #L42cb82.  v1:= temp @kind object;
  #L42cb84.  call temp:= `copyFrom`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42cb8a.  v2:= temp @kind object;
  #L42cb8c.  call temp:= `setHkdfSalt`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;.setHkdfSalt:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind virtual;
  #L42cb92.  v1:= temp @kind object;
  #L42cb94.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42cb9a.  v1:= temp @kind object;
  #L42cb9c.  v1:= (`com.google.crypto.tink.proto.EciesHkdfKemParams`) v1 @kind object;
  #L42cba0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.newBuilder:()Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind static;
  #L42cba6.  v2:= temp @kind object;
  #L42cba8.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L42cbae.  v5:= temp @kind object;
  #L42cbb0.  call temp:= `setTypeUrl`(v2, v5) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L42cbb6.  v2:= temp @kind object;
  #L42cbb8.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.getValue:()[B` @kind virtual;
  #L42cbbe.  v5:= temp @kind object;
  #L42cbc0.  call temp:= `copyFrom`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L42cbc6.  v5:= temp @kind object;
  #L42cbc8.  call temp:= `setValue`(v2, v5) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L42cbce.  v2:= temp @kind object;
  #L42cbd0.  call temp:= `getOutputPrefixType`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @kind virtual;
  #L42cbd6.  v4:= temp @kind object;
  #L42cbd8.  call temp:= `d`(v4) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.d:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind static;
  #L42cbde.  v4:= temp @kind object;
  #L42cbe0.  call temp:= `setOutputPrefixType`(v2, v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L42cbe6.  v2:= temp @kind object;
  #L42cbe8.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42cbee.  v2:= temp @kind object;
  #L42cbf0.  v2:= (`com.google.crypto.tink.proto.KeyTemplate`) v2 @kind object;
  #L42cbf4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesAeadDemParams;.newBuilder:()Lcom/google/crypto/tink/proto/EciesAeadDemParams$Builder;` @kind static;
  #L42cbfa.  v4:= temp @kind object;
  #L42cbfc.  call temp:= `setAeadDem`(v4, v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadDemParams$Builder;.setAeadDem:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/EciesAeadDemParams$Builder;` @kind virtual;
  #L42cc02.  v2:= temp @kind object;
  #L42cc04.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42cc0a.  v2:= temp @kind object;
  #L42cc0c.  v2:= (`com.google.crypto.tink.proto.EciesAeadDemParams`) v2 @kind object;
  #L42cc10.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.newBuilder:()Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind static;
  #L42cc16.  v4:= temp @kind object;
  #L42cc18.  call temp:= `setKemParams`(v4, v1) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;.setKemParams:(Lcom/google/crypto/tink/proto/EciesHkdfKemParams;)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind virtual;
  #L42cc1e.  v1:= temp @kind object;
  #L42cc20.  call temp:= `setDemParams`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;.setDemParams:(Lcom/google/crypto/tink/proto/EciesAeadDemParams;)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind virtual;
  #L42cc26.  v1:= temp @kind object;
  #L42cc28.  call temp:= `setEcPointFormat`(v1, v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;.setEcPointFormat:(Lcom/google/crypto/tink/proto/EcPointFormat;)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind virtual;
  #L42cc2e.  v1:= temp @kind object;
  #L42cc30.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L42cc36.  v1:= temp @kind object;
  #L42cc38.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfParams`) v1 @kind object;
  #L42cc3c.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.OutputPrefixType` `d`(`com.google.crypto.tink.KeyTemplate$OutputPrefixType` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.d:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L42cca8.  v0:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager$c.a` @type ^`int`[] @kind object;
  #L42ccac.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L42ccb2.  v1:= temp;
  #L42ccb4.  v1:= v0[v1];
  #L42ccb8.  v0:= 1I;
  #L42ccba.  if v1 == v0 then goto L42ccf2;
  #L42ccbe.  v0:= 2I;
  #L42ccc0.  if v1 == v0 then goto L42ccec;
  #L42ccc4.  v0:= 3I;
  #L42ccc6.  if v1 == v0 then goto L42cce6;
  #L42ccca.  v0:= 4I;
  #L42cccc.  if v1 != v0 then goto L42ccd6;
  #L42ccd0.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.CRUNCHY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L42ccd4.  return v1 @kind object;
  #L42ccd6.  v1:= new `java.lang.IllegalArgumentException`;
  #L42ccda.  v0:= "Unknown output prefix type" @kind object;
  #L42ccde.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42cce4.  throw v1;
  #L42cce6.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L42ccea.  return v1 @kind object;
  #L42ccec.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L42ccf0.  return v1 @kind object;
  #L42ccf2.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.TINK` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L42ccf6.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42ca6c.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L42ca70.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42ca74.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.UNCOMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L42ca78.  call temp:= `aes128CtrHmacSha256Template`() @signature `Lcom/google/crypto/tink/aead/AesCtrHmacAeadKeyManager;.aes128CtrHmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42ca7e.  v3:= temp @kind object;
  #L42ca80.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42ca84.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L42ca88.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42ca8e.  v0:= temp @kind object;
  #L42ca90.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `eciesP256HkdfHmacSha256Aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.eciesP256HkdfHmacSha256Aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42caa4.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L42caa8.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42caac.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.UNCOMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L42cab0.  call temp:= `aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42cab6.  v3:= temp @kind object;
  #L42cab8.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42cabc.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L42cac0.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42cac6.  v0:= temp @kind object;
  #L42cac8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42cadc.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L42cae0.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42cae4.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.COMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L42cae8.  call temp:= `aes128CtrHmacSha256Template`() @signature `Lcom/google/crypto/tink/aead/AesCtrHmacAeadKeyManager;.aes128CtrHmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42caee.  v3:= temp @kind object;
  #L42caf0.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42caf4.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L42caf8.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42cafe.  v0:= temp @kind object;
  #L42cb00.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42cb14.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L42cb18.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L42cb1c.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.COMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L42cb20.  call temp:= `aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42cb26.  v3:= temp @kind object;
  #L42cb28.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L42cb2c.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L42cb30.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L42cb36.  v0:= temp @kind object;
  #L42cb38.  return v0 @kind object;
}
procedure `void` `registerPair`(`boolean` v2 ) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.registerPair:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L42cdc8.  v0:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager`;
  #L42cdcc.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<init>:()V` @kind direct;
  #L42cdd2.  v1:= new `com.google.crypto.tink.hybrid.a`;
  #L42cdd6.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/hybrid/a;.<init>:()V` @kind direct;
  #L42cddc.  call `registerAsymmetricKeyManagers`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.registerAsymmetricKeyManagers:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L42cde2.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd58.  v0:= "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" @kind object;
  #L42cd5c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EciesAeadHkdfPublicKey` `getPublicKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @AccessFlag PUBLIC {
    temp;

  #L42cc74.  call temp:= `getPublicKey`(v1) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @kind virtual;
  #L42cc7a.  v1:= temp @kind object;
  #L42cc7c.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `getPublicKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getPublicKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42cd08.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey`) v1 @kind object;
  #L42cd0c.  call temp:= `getPublicKey`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @kind virtual;
  #L42cd12.  v1:= temp @kind object;
  #L42cd14.  return v1 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd44.  v0:= 0I;
  #L42cd46.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42cb4c.  v0:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager$b`;
  #L42cb50.  v1:= constclass @type ^`com.google.crypto.tink.proto.EciesAeadHkdfKeyFormat` @kind object;
  #L42cb54.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager$b;.<init>:(Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L42cb5a.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cc90.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L42cc94.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` `parseKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cc50.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L42cc56.  v0:= temp @kind object;
  #L42cc58.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;` @kind static;
  #L42cc5e.  v2:= temp @kind object;
  #L42cc60.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42cd28.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;` @kind virtual;
  #L42cd2e.  v1:= temp @kind object;
  #L42cd30.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v2 @kind this, `com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42cdf4.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L42cdfa.  v0:= temp @kind object;
  #L42cdfc.  call temp:= `isEmpty`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.isEmpty:()Z` @kind virtual;
  #L42ce02.  v0:= temp;
  #L42ce04.  if v0 != 0 then goto L42ce36;
  #L42ce08.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getVersion:()I` @kind virtual;
  #L42ce0e.  v0:= temp;
  #L42ce10.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getVersion:()I` @kind virtual;
  #L42ce16.  v1:= temp;
  #L42ce18.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L42ce1e.  call temp:= `getPublicKey`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @kind virtual;
  #L42ce24.  v3:= temp @kind object;
  #L42ce26.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;` @kind virtual;
  #L42ce2c.  v3:= temp @kind object;
  #L42ce2e.  call `d`(v3) @signature `Lcom/google/crypto/tink/hybrid/c;.d:(Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;)V` @kind static;
  #L42ce34.  return @kind void;
  #L42ce36.  v3:= new `java.security.GeneralSecurityException`;
  #L42ce3a.  v0:= "invalid ECIES private key" @kind object;
  #L42ce3e.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ce44.  throw v3;
}
procedure `void` `validateKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42ce58.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey`) v1 @kind object;
  #L42ce5c.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)V` @kind virtual;
  #L42ce62.  return @kind void;
}
