record `com.google.crypto.tink.hybrid.b` @kind class @AccessFlag  extends `com.google.crypto.tink.PrimitiveWrapper` @kind interface {
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.b` v0 @kind this) @signature `Lcom/google/crypto/tink/hybrid/b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d534.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d53a.  return @kind void;
}
procedure `void` `a`() @signature `Lcom/google/crypto/tink/hybrid/b;.a:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d54c.  v0:= new `com.google.crypto.tink.hybrid.b`;
  #L42d550.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/hybrid/b;.<init>:()V` @kind direct;
  #L42d556.  call `registerPrimitiveWrapper`(v0) @signature `Lcom/google/crypto/tink/Registry;.registerPrimitiveWrapper:(Lcom/google/crypto/tink/PrimitiveWrapper;)V` @kind static;
  #L42d55c.  return @kind void;
}
procedure `com.google.crypto.tink.HybridEncrypt` `b`(`com.google.crypto.tink.hybrid.b` v1 @kind this, `com.google.crypto.tink.PrimitiveSet` v2 @kind object) @signature `Lcom/google/crypto/tink/hybrid/b;.b:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/HybridEncrypt;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d4cc.  v0:= new `com.google.crypto.tink.hybrid.b$a`;
  #L42d4d0.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/hybrid/b$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @kind direct;
  #L42d4d6.  return v0 @kind object;
}
procedure `java.lang.Class` `getInputPrimitiveClass`(`com.google.crypto.tink.hybrid.b` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/b;.getInputPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d4e8.  v0:= constclass @type ^`com.google.crypto.tink.HybridEncrypt` @kind object;
  #L42d4ec.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimitiveClass`(`com.google.crypto.tink.hybrid.b` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/b;.getPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d500.  v0:= constclass @type ^`com.google.crypto.tink.HybridEncrypt` @kind object;
  #L42d504.  return v0 @kind object;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.hybrid.b` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/b;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42d518.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/b;.b:(Lcom/google/crypto/tink/PrimitiveSet;)Lcom/google/crypto/tink/HybridEncrypt;` @kind virtual;
  #L42d51e.  v1:= temp @kind object;
  #L42d520.  return v1 @kind object;
}
