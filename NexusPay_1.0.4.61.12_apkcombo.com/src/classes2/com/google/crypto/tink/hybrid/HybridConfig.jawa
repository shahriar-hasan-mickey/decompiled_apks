record `com.google.crypto.tink.hybrid.HybridConfig` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.String` `@@com.google.crypto.tink.hybrid.HybridConfig.ECIES_AEAD_HKDF_PRIVATE_KEY_TYPE_URL` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@com.google.crypto.tink.hybrid.HybridConfig.ECIES_AEAD_HKDF_PUBLIC_KEY_TYPE_URL` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.RegistryConfig` `@@com.google.crypto.tink.hybrid.HybridConfig.LATEST` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.RegistryConfig` `@@com.google.crypto.tink.hybrid.HybridConfig.TINK_1_0_0` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.crypto.tink.proto.RegistryConfig` `@@com.google.crypto.tink.hybrid.HybridConfig.TINK_1_1_0` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/hybrid/HybridConfig;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42d06c.  v0:= new `com.google.crypto.tink.hybrid.a`;
  #L42d070.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/hybrid/a;.<init>:()V` @kind direct;
  #L42d076.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/hybrid/a;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42d07c.  v0:= temp @kind object;
  #L42d07e.  `@@com.google.crypto.tink.hybrid.HybridConfig.ECIES_AEAD_HKDF_PUBLIC_KEY_TYPE_URL` @type ^`java.lang.String` := v0 @kind object;
  #L42d082.  v0:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager`;
  #L42d086.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<init>:()V` @kind direct;
  #L42d08c.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L42d092.  v0:= temp @kind object;
  #L42d094.  `@@com.google.crypto.tink.hybrid.HybridConfig.ECIES_AEAD_HKDF_PRIVATE_KEY_TYPE_URL` @type ^`java.lang.String` := v0 @kind object;
  #L42d098.  call temp:= `getDefaultInstance`() @signature `Lcom/google/crypto/tink/proto/RegistryConfig;.getDefaultInstance:()Lcom/google/crypto/tink/proto/RegistryConfig;` @kind static;
  #L42d09e.  v0:= temp @kind object;
  #L42d0a0.  `@@com.google.crypto.tink.hybrid.HybridConfig.TINK_1_0_0` @type ^`com.google.crypto.tink.proto.RegistryConfig` := v0 @kind object;
  #L42d0a4.  call temp:= `getDefaultInstance`() @signature `Lcom/google/crypto/tink/proto/RegistryConfig;.getDefaultInstance:()Lcom/google/crypto/tink/proto/RegistryConfig;` @kind static;
  #L42d0aa.  v0:= temp @kind object;
  #L42d0ac.  `@@com.google.crypto.tink.hybrid.HybridConfig.TINK_1_1_0` @type ^`com.google.crypto.tink.proto.RegistryConfig` := v0 @kind object;
  #L42d0b0.  call temp:= `getDefaultInstance`() @signature `Lcom/google/crypto/tink/proto/RegistryConfig;.getDefaultInstance:()Lcom/google/crypto/tink/proto/RegistryConfig;` @kind static;
  #L42d0b6.  v0:= temp @kind object;
  #L42d0b8.  `@@com.google.crypto.tink.hybrid.HybridConfig.LATEST` @type ^`com.google.crypto.tink.proto.RegistryConfig` := v0 @kind object;
  #L42d0bc.  call `init`() @signature `Lcom/google/crypto/tink/hybrid/HybridConfig;.init:()V` @kind static;
  #L42d0c2.  return @kind void;
  #L42d0c4.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L42d0c6.  v1:= new `java.lang.ExceptionInInitializerError`;
  #L42d0ca.  call `<init>`(v1, v0) @signature `Ljava/lang/ExceptionInInitializerError;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L42d0d0.  throw v1;
  catch `java.security.GeneralSecurityException` @[L42d0bc..L42d0c2] goto L42d0c4;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.HybridConfig` v0 @kind this) @signature `Lcom/google/crypto/tink/hybrid/HybridConfig;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d0f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42d0fa.  return @kind void;
}
procedure `void` `init`() @signature `Lcom/google/crypto/tink/hybrid/HybridConfig;.init:()V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L42d10c.  call `register`() @signature `Lcom/google/crypto/tink/hybrid/HybridConfig;.register:()V` @kind static;
  #L42d112.  return @kind void;
}
procedure `void` `register`() @signature `Lcom/google/crypto/tink/hybrid/HybridConfig;.register:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42d124.  call `register`() @signature `Lcom/google/crypto/tink/aead/AeadConfig;.register:()V` @kind static;
  #L42d12a.  v0:= 1I;
  #L42d12c.  call `registerPair`(v0) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.registerPair:(Z)V` @kind static;
  #L42d132.  call `register`() @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.register:()V` @kind static;
  #L42d138.  call `a`() @signature `Lcom/google/crypto/tink/hybrid/b;.a:()V` @kind static;
  #L42d13e.  return @kind void;
}
