record `com.google.crypto.tink.prf.PrfSet` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.google.crypto.tink.prf.PrfSet` v0 @kind this) @signature `Lcom/google/crypto/tink/prf/PrfSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431bdc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L431be2.  return @kind void;
}
procedure `byte`[] `computePrimary`(`com.google.crypto.tink.prf.PrfSet` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/google/crypto/tink/prf/PrfSet;.computePrimary:([BI)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431b9c.  call temp:= `getPrfs`(v2) @signature `Lcom/google/crypto/tink/prf/PrfSet;.getPrfs:()Ljava/util/Map;` @kind virtual;
  #L431ba2.  v0:= temp @kind object;
  #L431ba4.  call temp:= `getPrimaryId`(v2) @signature `Lcom/google/crypto/tink/prf/PrfSet;.getPrimaryId:()I` @kind virtual;
  #L431baa.  v1:= temp;
  #L431bac.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L431bb2.  v1:= temp @kind object;
  #L431bb4.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L431bba.  v0:= temp @kind object;
  #L431bbc.  v0:= (`com.google.crypto.tink.prf.Prf`) v0 @kind object;
  #L431bc0.  call temp:= `compute`(v0, v3, v4) @signature `Lcom/google/crypto/tink/prf/Prf;.compute:([BI)[B` @kind interface;
  #L431bc6.  v3:= temp @kind object;
  #L431bc8.  return v3 @kind object;
}
procedure `java.util.Map` `getPrfs`() @signature `Lcom/google/crypto/tink/prf/PrfSet;.getPrfs:()Ljava/util/Map;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getPrimaryId`() @signature `Lcom/google/crypto/tink/prf/PrfSet;.getPrimaryId:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
