record `com.google.crypto.tink.prf.PrfSetWrapper$b` @kind class @AccessFlag  extends `com.google.crypto.tink.prf.PrfSet` @kind class {
  `java.util.Map` `com.google.crypto.tink.prf.PrfSetWrapper$b.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.prf.PrfSetWrapper$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v4 @kind this, `com.google.crypto.tink.PrimitiveSet` v5 @kind object) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4319b4.  call `<init>`(v4) @signature `Lcom/google/crypto/tink/prf/PrfSet;.<init>:()V` @kind direct;
  #L4319ba.  call temp:= `getRawPrimitives`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L4319c0.  v0:= temp @kind object;
  #L4319c2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4319c8.  v0:= temp;
  #L4319ca.  if v0 != 0 then goto L431aba;
  #L4319ce.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L4319d4.  v0:= temp @kind object;
  #L4319d6.  if v0 == 0 then goto L431aaa;
  #L4319da.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L4319e0.  v0:= temp @kind object;
  #L4319e2.  call temp:= `getKeyId`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getKeyId:()I` @kind virtual;
  #L4319e8.  v0:= temp;
  #L4319ea.  v4.`com.google.crypto.tink.prf.PrfSetWrapper$b.b` @type ^`int` := v0;
  #L4319ee.  call temp:= `getRawPrimitives`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L4319f4.  v5:= temp @kind object;
  #L4319f6.  v0:= new `java.util.HashMap`;
  #L4319fa.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L431a00.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L431a06.  v5:= temp @kind object;
  #L431a08.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L431a0e.  v1:= temp;
  #L431a10.  if v1 == 0 then goto L431a9c;
  #L431a14.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L431a1a.  v1:= temp @kind object;
  #L431a1c.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L431a20.  call temp:= `getOutputPrefixType`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L431a26.  v2:= temp @kind object;
  #L431a28.  v3:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L431a2c.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L431a32.  v2:= temp;
  #L431a34.  if v2 == 0 then goto L431a5c;
  #L431a38.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getKeyId:()I` @kind virtual;
  #L431a3e.  v2:= temp;
  #L431a40.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L431a46.  v2:= temp @kind object;
  #L431a48.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L431a4e.  v1:= temp @kind object;
  #L431a50.  v1:= (`com.google.crypto.tink.prf.Prf`) v1 @kind object;
  #L431a54.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L431a5a.  goto L431a08;
  #L431a5c.  v5:= new `java.security.GeneralSecurityException`;
  #L431a60.  v0:= new `java.lang.StringBuilder`;
  #L431a64.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L431a6a.  v2:= "Key " @kind object;
  #L431a6e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431a74.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getKeyId:()I` @kind virtual;
  #L431a7a.  v1:= temp;
  #L431a7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L431a82.  v1:= " has non raw prefix type" @kind object;
  #L431a86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431a8c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L431a92.  v0:= temp @kind object;
  #L431a94.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431a9a.  throw v5;
  #L431a9c.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L431aa2.  v5:= temp @kind object;
  #L431aa4.  v4.`com.google.crypto.tink.prf.PrfSetWrapper$b.a` @type ^`java.util.Map` := v5 @kind object;
  #L431aa8.  return @kind void;
  #L431aaa.  v5:= new `java.security.GeneralSecurityException`;
  #L431aae.  v0:= "Primary key not set." @kind object;
  #L431ab2.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431ab8.  throw v5;
  #L431aba.  v5:= new `java.security.GeneralSecurityException`;
  #L431abe.  v0:= "No primitives provided." @kind object;
  #L431ac2.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431ac8.  throw v5;
}
procedure `void` `<init>`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object, `com.google.crypto.tink.prf.PrfSetWrapper$a` v2 @kind object) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Lcom/google/crypto/tink/prf/PrfSetWrapper$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L431adc.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @kind direct;
  #L431ae2.  return @kind void;
}
procedure `java.util.Map` `getPrfs`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.getPrfs:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43199c.  v0:= v1.`com.google.crypto.tink.prf.PrfSetWrapper$b.a` @type ^`java.util.Map` @kind object;
  #L4319a0.  return v0 @kind object;
}
procedure `int` `getPrimaryId`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.getPrimaryId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431984.  v0:= v1.`com.google.crypto.tink.prf.PrfSetWrapper$b.b` @type ^`int`;
  #L431988.  return v0;
}
