record `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.<init>:(Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48f07c.  v0.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` := v1 @kind object;
  #L48f080.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48f086.  return @kind void;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` `a`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48eec8.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind static;
  #L48eece.  v0:= temp @kind object;
  #L48eed0.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L48eed6.  v1:= temp;
  #L48eed8.  call temp:= `randBytes`(v1) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L48eede.  v1:= temp @kind object;
  #L48eee0.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48eee6.  v1:= temp @kind object;
  #L48eee8.  call temp:= `setKeyValue`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L48eeee.  v0:= temp @kind object;
  #L48eef0.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L48eef6.  v3:= temp @kind object;
  #L48eef8.  call temp:= `setParams`(v0, v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L48eefe.  v3:= temp @kind object;
  #L48ef00.  v0:= v2.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind object;
  #L48ef04.  call temp:= `getVersion`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L48ef0a.  v0:= temp;
  #L48ef0c.  call temp:= `setVersion`(v3, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L48ef12.  v3:= temp @kind object;
  #L48ef14.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48ef1a.  v3:= temp @kind object;
  #L48ef1c.  v3:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey`) v3 @kind object;
  #L48ef20.  return v3 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` `b`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` v3 @kind object, `java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48ef34.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getVersion:()I` @kind virtual;
  #L48ef3a.  v0:= temp;
  #L48ef3c.  v1:= v2.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind object;
  #L48ef40.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L48ef46.  v1:= temp;
  #L48ef48.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L48ef4e.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L48ef54.  v0:= temp;
  #L48ef56.  v0:= new `byte`[v0];
  #L48ef5a.  call temp:= `read`(v4, v0) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L48ef60.  v4:= temp;
  #L48ef62.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L48ef68.  v1:= temp;
  #L48ef6a.  if v4 != v1 then goto L48efb8;
  #L48ef6e.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind static;
  #L48ef74.  v4:= temp @kind object;
  #L48ef76.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L48ef7c.  v0:= temp @kind object;
  #L48ef7e.  call temp:= `setKeyValue`(v4, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L48ef84.  v4:= temp @kind object;
  #L48ef86.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L48ef8c.  v3:= temp @kind object;
  #L48ef8e.  call temp:= `setParams`(v4, v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L48ef94.  v3:= temp @kind object;
  #L48ef96.  v4:= v2.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind object;
  #L48ef9a.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L48efa0.  v4:= temp;
  #L48efa2.  call temp:= `setVersion`(v3, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L48efa8.  v3:= temp @kind object;
  #L48efaa.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48efb0.  v3:= temp @kind object;
  #L48efb2.  v3:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey`) v3 @kind object;
  #L48efb6.  return v3 @kind object;
  #L48efb8.  v3:= new `java.security.GeneralSecurityException`;
  #L48efbc.  v4:= "Not enough pseudorandomness given" @kind object;
  #L48efc0.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48efc6.  throw v3;
  #L48efc8.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L48efca.  v4:= new `java.security.GeneralSecurityException`;
  #L48efce.  v0:= "Reading pseudorandomness failed" @kind object;
  #L48efd2.  call `<init>`(v4, v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L48efd8.  throw v4;
  catch `java.io.IOException` @[L48ef5a..L48efc8] goto L48efc8;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` `c`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48effc.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L48f002.  v0:= temp @kind object;
  #L48f004.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;` @kind static;
  #L48f00a.  v2:= temp @kind object;
  #L48f00c.  return v2 @kind object;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48f03c.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L48f040.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind virtual;
  #L48f046.  v1:= temp @kind object;
  #L48f048.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f098.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L48f09e.  v0:= temp;
  #L48f0a0.  v1:= 16I;
  #L48f0a4.  if v0 < v1 then goto L48f0b8;
  #L48f0a8.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L48f0ae.  v3:= temp @kind object;
  #L48f0b0.  call `b`(v3) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @kind static;
  #L48f0b6.  return @kind void;
  #L48f0b8.  v3:= new `java.security.GeneralSecurityException`;
  #L48f0bc.  v0:= "key_size must be at least 16 bytes" @kind object;
  #L48f0c0.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f0c6.  throw v3;
}
procedure `java.lang.Object` `deriveKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.deriveKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/io/InputStream;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48f05c.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L48f060.  call temp:= `b`(v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind virtual;
  #L48f066.  v1:= temp @kind object;
  #L48f068.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48f020.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;` @kind virtual;
  #L48f026.  v1:= temp @kind object;
  #L48f028.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48f0d8.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L48f0dc.  call `d`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)V` @kind virtual;
  #L48f0e2.  return @kind void;
}
