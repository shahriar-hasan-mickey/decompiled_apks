record `com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48eb88.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesCtrHmacStreamingKey` @kind object;
  #L48eb8c.  v1:= 1I;
  #L48eb8e.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L48eb92.  v2:= new `com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager$a`;
  #L48eb96.  v3:= constclass @type ^`com.google.crypto.tink.StreamingAead` @kind object;
  #L48eb9a.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48eba0.  v3:= 0I;
  #L48eba2.  v1[v3]:= v2 @kind object;
  #L48eba6.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L48ebac.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128CtrHmacSha2561MBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.aes128CtrHmacSha2561MBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48e970.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48e974.  v0:= 16I;
  #L48e978.  v2:= 16I;
  #L48e97c.  v4:= 32I;
  #L48e980.  v5:= 1048576I;
  #L48e984.  v1:= v3 @kind object;
  #L48e986.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48e98c.  v0:= temp @kind object;
  #L48e98e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128CtrHmacSha2564KBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.aes128CtrHmacSha2564KBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48e9a0.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48e9a4.  v0:= 16I;
  #L48e9a8.  v2:= 16I;
  #L48e9ac.  v4:= 32I;
  #L48e9b0.  v5:= 4096I;
  #L48e9b4.  v1:= v3 @kind object;
  #L48e9b6.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48e9bc.  v0:= temp @kind object;
  #L48e9be.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256CtrHmacSha2561MBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.aes256CtrHmacSha2561MBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48e9d0.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48e9d4.  v0:= 32I;
  #L48e9d8.  v2:= 32I;
  #L48e9dc.  v4:= 32I;
  #L48e9e0.  v5:= 1048576I;
  #L48e9e4.  v1:= v3 @kind object;
  #L48e9e6.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48e9ec.  v0:= temp @kind object;
  #L48e9ee.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256CtrHmacSha2564KBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.aes256CtrHmacSha2564KBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48ea00.  v3:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48ea04.  v0:= 32I;
  #L48ea08.  v2:= 32I;
  #L48ea0c.  v4:= 32I;
  #L48ea10.  v5:= 4096I;
  #L48ea14.  v1:= v3 @kind object;
  #L48ea16.  call temp:= `c`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48ea1c.  v0:= temp @kind object;
  #L48ea1e.  return v0 @kind object;
}
procedure `void` `b`(`com.google.crypto.tink.proto.AesCtrHmacStreamingParams` v0 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.b:(Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L48ebc0.  call `e`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.e:(Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;)V` @kind static;
  #L48ebc6.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`int` v1 , `com.google.crypto.tink.proto.HashType` v2 @kind object, `int` v3 , `com.google.crypto.tink.proto.HashType` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L48ea30.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacParams;.newBuilder:()Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind static;
  #L48ea36.  v0:= temp @kind object;
  #L48ea38.  call temp:= `setHash`(v0, v4) @signature `Lcom/google/crypto/tink/proto/HmacParams$Builder;.setHash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind virtual;
  #L48ea3e.  v4:= temp @kind object;
  #L48ea40.  call temp:= `setTagSize`(v4, v5) @signature `Lcom/google/crypto/tink/proto/HmacParams$Builder;.setTagSize:(I)Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind virtual;
  #L48ea46.  v4:= temp @kind object;
  #L48ea48.  call temp:= `build`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48ea4e.  v4:= temp @kind object;
  #L48ea50.  v4:= (`com.google.crypto.tink.proto.HmacParams`) v4 @kind object;
  #L48ea54.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;` @kind static;
  #L48ea5a.  v5:= temp @kind object;
  #L48ea5c.  call temp:= `setCiphertextSegmentSize`(v5, v6) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;.setCiphertextSegmentSize:(I)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;` @kind virtual;
  #L48ea62.  v5:= temp @kind object;
  #L48ea64.  call temp:= `setDerivedKeySize`(v5, v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;.setDerivedKeySize:(I)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;` @kind virtual;
  #L48ea6a.  v3:= temp @kind object;
  #L48ea6c.  call temp:= `setHkdfHashType`(v3, v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;.setHkdfHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;` @kind virtual;
  #L48ea72.  v2:= temp @kind object;
  #L48ea74.  call temp:= `setHmacParams`(v2, v4) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;.setHmacParams:(Lcom/google/crypto/tink/proto/HmacParams;)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams$Builder;` @kind virtual;
  #L48ea7a.  v2:= temp @kind object;
  #L48ea7c.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48ea82.  v2:= temp @kind object;
  #L48ea84.  v2:= (`com.google.crypto.tink.proto.AesCtrHmacStreamingParams`) v2 @kind object;
  #L48ea88.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKeyFormat$Builder;` @kind static;
  #L48ea8e.  v3:= temp @kind object;
  #L48ea90.  call temp:= `setParams`(v3, v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKeyFormat$Builder;` @kind virtual;
  #L48ea96.  v2:= temp @kind object;
  #L48ea98.  call temp:= `setKeySize`(v2, v1) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKeyFormat$Builder;` @kind virtual;
  #L48ea9e.  v1:= temp @kind object;
  #L48eaa0.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48eaa6.  v1:= temp @kind object;
  #L48eaa8.  v1:= (`com.google.crypto.tink.proto.AesCtrHmacStreamingKeyFormat`) v1 @kind object;
  #L48eaac.  v2:= new `com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager`;
  #L48eab0.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.<init>:()V` @kind direct;
  #L48eab6.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L48eabc.  v2:= temp @kind object;
  #L48eabe.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L48eac4.  v1:= temp @kind object;
  #L48eac6.  v3:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48eaca.  call temp:= `create`(v2, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48ead0.  v1:= temp @kind object;
  #L48ead2.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.HmacParams` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48ebfc.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L48ec02.  v0:= temp;
  #L48ec04.  v1:= 10I;
  #L48ec08.  if v0 < v1 then goto L48eca4;
  #L48ec0c.  v0:= `@@com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager$c.a` @type ^`int`[] @kind object;
  #L48ec10.  call temp:= `getHash`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48ec16.  v1:= temp @kind object;
  #L48ec18.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L48ec1e.  v1:= temp;
  #L48ec20.  v0:= v0[v1];
  #L48ec24.  v1:= 1I;
  #L48ec26.  v2:= "tag size too big" @kind object;
  #L48ec2a.  if v0 == v1 then goto L48ec86;
  #L48ec2e.  v1:= 2I;
  #L48ec30.  if v0 == v1 then goto L48ec68;
  #L48ec34.  v1:= 3I;
  #L48ec36.  if v0 != v1 then goto L48ec58;
  #L48ec3a.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L48ec40.  v3:= temp;
  #L48ec42.  v0:= 64I;
  #L48ec46.  if v3 > v0 then goto L48ec4c;
  #L48ec4a.  goto L48ec96;
  #L48ec4c.  v3:= new `java.security.GeneralSecurityException`;
  #L48ec50.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ec56.  throw v3;
  #L48ec58.  v3:= new `java.security.GeneralSecurityException`;
  #L48ec5c.  v0:= "unknown hash type" @kind object;
  #L48ec60.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ec66.  throw v3;
  #L48ec68.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L48ec6e.  v3:= temp;
  #L48ec70.  v0:= 32I;
  #L48ec74.  if v3 > v0 then goto L48ec7a;
  #L48ec78.  goto L48ec96;
  #L48ec7a.  v3:= new `java.security.GeneralSecurityException`;
  #L48ec7e.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ec84.  throw v3;
  #L48ec86.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L48ec8c.  v3:= temp;
  #L48ec8e.  v0:= 20I;
  #L48ec92.  if v3 > v0 then goto L48ec98;
  #L48ec96.  return @kind void;
  #L48ec98.  v3:= new `java.security.GeneralSecurityException`;
  #L48ec9c.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48eca2.  throw v3;
  #L48eca4.  v3:= new `java.security.GeneralSecurityException`;
  #L48eca8.  v0:= "tag size too small" @kind object;
  #L48ecac.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ecb2.  throw v3;
}
procedure `void` `e`(`com.google.crypto.tink.proto.AesCtrHmacStreamingParams` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.e:(Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L48ed74.  call temp:= `getDerivedKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getDerivedKeySize:()I` @kind virtual;
  #L48ed7a.  v0:= temp;
  #L48ed7c.  call `validateAesKeySize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L48ed82.  call temp:= `getHkdfHashType`(v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getHkdfHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48ed88.  v0:= temp @kind object;
  #L48ed8a.  v1:= `@@com.google.crypto.tink.proto.HashType.UNKNOWN_HASH` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48ed8e.  if v0 == v1 then goto L48ee08;
  #L48ed92.  call temp:= `getHmacParams`(v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getHmacParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L48ed98.  v0:= temp @kind object;
  #L48ed9a.  call temp:= `getHash`(v0) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48eda0.  v0:= temp @kind object;
  #L48eda2.  v1:= `@@com.google.crypto.tink.proto.HashType.UNKNOWN_HASH` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48eda6.  if v0 == v1 then goto L48edf8;
  #L48edaa.  call temp:= `getHmacParams`(v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getHmacParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L48edb0.  v0:= temp @kind object;
  #L48edb2.  call `d`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @kind static;
  #L48edb8.  call temp:= `getCiphertextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getCiphertextSegmentSize:()I` @kind virtual;
  #L48edbe.  v0:= temp;
  #L48edc0.  call temp:= `getDerivedKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getDerivedKeySize:()I` @kind virtual;
  #L48edc6.  v1:= temp;
  #L48edc8.  call temp:= `getHmacParams`(v2) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getHmacParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L48edce.  v2:= temp @kind object;
  #L48edd0.  call temp:= `getTagSize`(v2) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L48edd6.  v2:= temp;
  #L48edd8.  v1:= v1 + v2 @kind int;
  #L48edda.  v1:= v1 + 2;
  #L48edde.  v1:= v1 + 7;
  #L48ede2.  if v0 < v1 then goto L48ede8;
  #L48ede6.  return @kind void;
  #L48ede8.  v2:= new `java.security.GeneralSecurityException`;
  #L48edec.  v0:= "ciphertext_segment_size must be at least (derived_key_size + tag_size + NONCE_PREFIX_IN_BYTES + 2)" @kind object;
  #L48edf0.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48edf6.  throw v2;
  #L48edf8.  v2:= new `java.security.GeneralSecurityException`;
  #L48edfc.  v0:= "unknown HMAC hash type" @kind object;
  #L48ee00.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ee06.  throw v2;
  #L48ee08.  v2:= new `java.security.GeneralSecurityException`;
  #L48ee0c.  v0:= "unknown HKDF hash type" @kind object;
  #L48ee10.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ee16.  throw v2;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48ebd8.  v0:= new `com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager`;
  #L48ebdc.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.<init>:()V` @kind direct;
  #L48ebe2.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L48ebe8.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eb70.  v0:= "type.googleapis.com/google.crypto.tink.AesCtrHmacStreamingKey" @kind object;
  #L48eb74.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eb5c.  v0:= 0I;
  #L48eb5e.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48eae4.  v0:= new `com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager$b`;
  #L48eae8.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesCtrHmacStreamingKeyFormat` @kind object;
  #L48eaec.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager$b;.<init>:(Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L48eaf2.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eb28.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L48eb2c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesCtrHmacStreamingKey` `parseKey`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eb04.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L48eb0a.  v0:= temp @kind object;
  #L48eb0c.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;` @kind static;
  #L48eb12.  v2:= temp @kind object;
  #L48eb14.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48eb40.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;` @kind virtual;
  #L48eb46.  v1:= temp @kind object;
  #L48eb48.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesCtrHmacStreamingKey` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48ecc4.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;.getVersion:()I` @kind virtual;
  #L48ecca.  v0:= temp;
  #L48eccc.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L48ecd2.  v1:= temp;
  #L48ecd4.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L48ecda.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48ece0.  v0:= temp @kind object;
  #L48ece2.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L48ece8.  v0:= temp;
  #L48ecea.  v1:= 16I;
  #L48ecee.  if v0 < v1 then goto L48ed36;
  #L48ecf2.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L48ecf8.  v0:= temp @kind object;
  #L48ecfa.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L48ed00.  v0:= temp;
  #L48ed02.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;.getParams:()Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;` @kind virtual;
  #L48ed08.  v1:= temp @kind object;
  #L48ed0a.  call temp:= `getDerivedKeySize`(v1) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;.getDerivedKeySize:()I` @kind virtual;
  #L48ed10.  v1:= temp;
  #L48ed12.  if v0 < v1 then goto L48ed26;
  #L48ed16.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;.getParams:()Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;` @kind virtual;
  #L48ed1c.  v3:= temp @kind object;
  #L48ed1e.  call `e`(v3) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.e:(Lcom/google/crypto/tink/proto/AesCtrHmacStreamingParams;)V` @kind static;
  #L48ed24.  return @kind void;
  #L48ed26.  v3:= new `java.security.GeneralSecurityException`;
  #L48ed2a.  v0:= "key_value must have at least as many bits as derived keys" @kind object;
  #L48ed2e.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ed34.  throw v3;
  #L48ed36.  v3:= new `java.security.GeneralSecurityException`;
  #L48ed3a.  v0:= "key_value must have at least 16 bytes" @kind object;
  #L48ed3e.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ed44.  throw v3;
}
procedure `void` `validateKey`(`com.google.crypto.tink.streamingaead.AesCtrHmacStreamingKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48ed58.  v1:= (`com.google.crypto.tink.proto.AesCtrHmacStreamingKey`) v1 @kind object;
  #L48ed5c.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesCtrHmacStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCtrHmacStreamingKey;)V` @kind virtual;
  #L48ed62.  return @kind void;
}
