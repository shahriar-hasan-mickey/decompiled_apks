record `com.google.crypto.tink.streamingaead.b` @kind class @AccessFlag FINAL extends `java.nio.channels.ReadableByteChannel` @kind interface {
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.streamingaead.b.a` @AccessFlag ;
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.streamingaead.b.b` @AccessFlag ;
  `com.google.crypto.tink.subtle.RewindableReadableByteChannel` `com.google.crypto.tink.streamingaead.b.c` @AccessFlag ;
  `java.util.Deque` `com.google.crypto.tink.streamingaead.b.d` @AccessFlag ;
  `byte`[] `com.google.crypto.tink.streamingaead.b.e` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.b` v2 @kind this, `com.google.crypto.tink.PrimitiveSet` v3 @kind object, `java.nio.channels.ReadableByteChannel` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/nio/channels/ReadableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48f860.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48f866.  v0:= 0I;
  #L48f868.  v2.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L48f86c.  v2.`com.google.crypto.tink.streamingaead.b.b` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L48f870.  v0:= new `java.util.ArrayDeque`;
  #L48f874.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L48f87a.  v2.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` := v0 @kind object;
  #L48f87e.  call temp:= `getRawPrimitives`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L48f884.  v3:= temp @kind object;
  #L48f886.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48f88c.  v3:= temp @kind object;
  #L48f88e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48f894.  v0:= temp;
  #L48f896.  if v0 == 0 then goto L48f8be;
  #L48f89a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48f8a0.  v0:= temp @kind object;
  #L48f8a2.  v0:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v0 @kind object;
  #L48f8a6.  v1:= v2.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` @kind object;
  #L48f8aa.  call temp:= `getPrimitive`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L48f8b0.  v0:= temp @kind object;
  #L48f8b2.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L48f8b6.  call temp:= `add`(v1, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48f8bc.  goto L48f88e;
  #L48f8be.  v3:= new `com.google.crypto.tink.subtle.RewindableReadableByteChannel`;
  #L48f8c2.  call `<init>`(v3, v4) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.<init>:(Ljava/nio/channels/ReadableByteChannel;)V` @kind direct;
  #L48f8c8.  v2.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` := v3 @kind object;
  #L48f8cc.  call temp:= `clone`(v5) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L48f8d2.  v3:= temp @kind object;
  #L48f8d4.  v3:= (`byte`[]) v3 @kind object;
  #L48f8d8.  v2.`com.google.crypto.tink.streamingaead.b.e` @type ^`byte`[] := v3 @kind object;
  #L48f8dc.  return @kind void;
}
procedure `java.nio.channels.ReadableByteChannel` `a`(`com.google.crypto.tink.streamingaead.b` v3 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/b;.a:()Ljava/nio/channels/ReadableByteChannel;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L48f7d8.  @monitorenter v3
  #L48f7da.  v0:= v3.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` @kind object;
  #L48f7de.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L48f7e4.  v0:= temp;
  #L48f7e6.  if v0 != 0 then goto L48f81a;
  #L48f7ea.  v0:= v3.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` @kind object;
  #L48f7ee.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L48f7f4.  v0:= temp @kind object;
  #L48f7f6.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L48f7fa.  v1:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L48f7fe.  v2:= v3.`com.google.crypto.tink.streamingaead.b.e` @type ^`byte`[] @kind object;
  #L48f802.  call temp:= `newDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/StreamingAead;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @kind interface;
  #L48f808.  v0:= temp @kind object;
  #L48f80a.  @monitorexit v3
  #L48f80c.  return v0 @kind object;
  #L48f80e.  v0:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L48f812.  call `rewind`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.rewind:()V` @kind virtual;
  #L48f818.  goto L48f7da;
  #L48f81a.  v0:= new `java.io.IOException`;
  #L48f81e.  v1:= "No matching key found for the ciphertext in the stream." @kind object;
  #L48f822.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f828.  throw v0;
  #L48f82a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f82c.  @monitorexit v3
  #L48f82e.  throw v0;
  catch `java.lang.Throwable` @[L48f7da..L48f7fa] goto L48f82a;
  catch `java.security.GeneralSecurityException` @[L48f7fa..L48f80a] goto L48f80e;
  catch `java.lang.Throwable` @[L48f7fa..L48f80a] goto L48f82a;
  catch `java.lang.Throwable` @[L48f80e..L48f82a] goto L48f82a;
}
procedure `void` `close`(`com.google.crypto.tink.streamingaead.b` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f8f0.  @monitorenter v1
  #L48f8f2.  v0:= v1.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L48f8f6.  call `close`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.close:()V` @kind virtual;
  #L48f8fc.  @monitorexit v1
  #L48f8fe.  return @kind void;
  #L48f900.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f902.  @monitorexit v1
  #L48f904.  throw v0;
  catch `java.lang.Throwable` @[L48f8f2..L48f8fc] goto L48f900;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.streamingaead.b` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/b;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f6cc.  @monitorenter v1
  #L48f6ce.  v0:= v1.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L48f6d2.  call temp:= `isOpen`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.isOpen:()Z` @kind virtual;
  #L48f6d8.  v0:= temp;
  #L48f6da.  @monitorexit v1
  #L48f6dc.  return v0;
  #L48f6de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f6e0.  @monitorexit v1
  #L48f6e2.  throw v0;
  catch `java.lang.Throwable` @[L48f6ce..L48f6da] goto L48f6de;
}
procedure `int` `read`(`com.google.crypto.tink.streamingaead.b` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/b;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48f700.  @monitorenter v3
  #L48f702.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L48f708.  v0:= temp;
  #L48f70a.  v1:= 0I;
  #L48f70c.  if v0 != 0 then goto L48f714;
  #L48f710.  @monitorexit v3
  #L48f712.  return v1;
  #L48f714.  v0:= v3.`com.google.crypto.tink.streamingaead.b.b` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L48f718.  if v0 == 0 then goto L48f72c;
  #L48f71c.  v0:= v3.`com.google.crypto.tink.streamingaead.b.b` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L48f720.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L48f726.  v4:= temp;
  #L48f728.  @monitorexit v3
  #L48f72a.  return v4;
  #L48f72c.  v0:= v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L48f730.  if v0 != 0 then goto L48f740;
  #L48f734.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/b;.a:()Ljava/nio/channels/ReadableByteChannel;` @kind direct;
  #L48f73a.  v0:= temp @kind object;
  #L48f73c.  v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L48f740.  v0:= v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L48f744.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L48f74a.  v0:= temp;
  #L48f74c.  if v0 != 0 then goto L48f754;
  #L48f750.  @monitorexit v3
  #L48f752.  return v1;
  #L48f754.  v2:= v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L48f758.  v3.`com.google.crypto.tink.streamingaead.b.b` @type ^`java.nio.channels.ReadableByteChannel` := v2 @kind object;
  #L48f75c.  v2:= 0I;
  #L48f75e.  v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v2 @kind object;
  #L48f762.  v2:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L48f766.  call `disableRewinding`(v2) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.disableRewinding:()V` @kind virtual;
  #L48f76c.  @monitorexit v3
  #L48f76e.  return v0;
  #L48f770.  v0:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L48f774.  call `rewind`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.rewind:()V` @kind virtual;
  #L48f77a.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/b;.a:()Ljava/nio/channels/ReadableByteChannel;` @kind direct;
  #L48f780.  v0:= temp @kind object;
  #L48f782.  v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L48f786.  goto L48f740;
  #L48f788.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f78a.  @monitorexit v3
  #L48f78c.  throw v4;
  catch `java.lang.Throwable` @[L48f702..L48f70a] goto L48f788;
  catch `java.lang.Throwable` @[L48f714..L48f728] goto L48f788;
  catch `java.lang.Throwable` @[L48f72c..L48f740] goto L48f788;
  catch `java.io.IOException` @[L48f740..L48f74c] goto L48f770;
  catch `java.lang.Throwable` @[L48f740..L48f74c] goto L48f788;
  catch `java.io.IOException` @[L48f754..L48f76c] goto L48f770;
  catch `java.lang.Throwable` @[L48f754..L48f76c] goto L48f788;
  catch `java.lang.Throwable` @[L48f770..L48f786] goto L48f788;
}
