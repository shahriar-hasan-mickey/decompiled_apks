record `com.google.crypto.tink.streamingaead.c` @kind class @AccessFlag FINAL extends `java.nio.channels.SeekableByteChannel` @kind interface {
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.streamingaead.c.a` @AccessFlag ;
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.streamingaead.c.b` @AccessFlag ;
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.streamingaead.c.c` @AccessFlag ;
  `long` `com.google.crypto.tink.streamingaead.c.d` @AccessFlag ;
  `long` `com.google.crypto.tink.streamingaead.c.e` @AccessFlag ;
  `java.util.Deque` `com.google.crypto.tink.streamingaead.c.f` @AccessFlag ;
  `byte`[] `com.google.crypto.tink.streamingaead.c.g` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.c` v2 @kind this, `com.google.crypto.tink.PrimitiveSet` v3 @kind object, `java.nio.channels.SeekableByteChannel` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/c;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/nio/channels/SeekableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48fc10.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48fc16.  v0:= 0I;
  #L48fc18.  v2.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L48fc1c.  v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L48fc20.  v0:= new `java.util.ArrayDeque`;
  #L48fc24.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L48fc2a.  v2.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` := v0 @kind object;
  #L48fc2e.  call temp:= `getRawPrimitives`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L48fc34.  v3:= temp @kind object;
  #L48fc36.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48fc3c.  v3:= temp @kind object;
  #L48fc3e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48fc44.  v0:= temp;
  #L48fc46.  if v0 == 0 then goto L48fc6e;
  #L48fc4a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48fc50.  v0:= temp @kind object;
  #L48fc52.  v0:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v0 @kind object;
  #L48fc56.  v1:= v2.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` @kind object;
  #L48fc5a.  call temp:= `getPrimitive`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L48fc60.  v0:= temp @kind object;
  #L48fc62.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L48fc66.  call temp:= `add`(v1, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48fc6c.  goto L48fc3e;
  #L48fc6e.  v2.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` := v4 @kind object;
  #L48fc72.  v0:= -1L;
  #L48fc76.  v2.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` := v0 @kind wide;
  #L48fc7a.  call temp:= `position`(v4) @signature `Ljava/nio/channels/SeekableByteChannel;.position:()J` @kind interface;
  #L48fc80.  v3:= temp @kind wide;
  #L48fc82.  v2.`com.google.crypto.tink.streamingaead.c.e` @type ^`long` := v3 @kind wide;
  #L48fc86.  call temp:= `clone`(v5) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L48fc8c.  v3:= temp @kind object;
  #L48fc8e.  v3:= (`byte`[]) v3 @kind object;
  #L48fc92.  v2.`com.google.crypto.tink.streamingaead.c.g` @type ^`byte`[] := v3 @kind object;
  #L48fc96.  return @kind void;
}
procedure `java.nio.channels.SeekableByteChannel` `a`(`com.google.crypto.tink.streamingaead.c` v6 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.a:()Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48fa38.  @monitorenter v6
  #L48fa3a.  v0:= v6.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` @kind object;
  #L48fa3e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L48fa44.  v0:= temp;
  #L48fa46.  if v0 != 0 then goto L48fa96;
  #L48fa4a.  v0:= v6.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fa4e.  v1:= v6.`com.google.crypto.tink.streamingaead.c.e` @type ^`long` @kind wide;
  #L48fa52.  call temp:= `position`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L48fa58.  v0:= v6.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` @kind object;
  #L48fa5c.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L48fa62.  v0:= temp @kind object;
  #L48fa64.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L48fa68.  v1:= v6.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fa6c.  v2:= v6.`com.google.crypto.tink.streamingaead.c.g` @type ^`byte`[] @kind object;
  #L48fa70.  call temp:= `newSeekableDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/StreamingAead;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L48fa76.  v0:= temp @kind object;
  #L48fa78.  v1:= v6.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` @kind wide;
  #L48fa7c.  v3:= 0L;
  #L48fa80.  v5:= lcmp(v1, v3);
  #L48fa84.  if v5 < 0 then goto L48fa92;
  #L48fa88.  v1:= v6.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` @kind wide;
  #L48fa8c.  call temp:= `position`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L48fa92.  @monitorexit v6
  #L48fa94.  return v0 @kind object;
  #L48fa96.  v0:= new `java.io.IOException`;
  #L48fa9a.  v1:= "No matching key found for the ciphertext in the stream." @kind object;
  #L48fa9e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48faa4.  throw v0;
  #L48faa6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48faa8.  @monitorexit v6
  #L48faaa.  throw v0;
  catch `java.lang.Throwable` @[L48fa3a..L48fa68] goto L48faa6;
  catch `java.security.GeneralSecurityException` @[L48fa68..L48fa92] goto L48fa3a;
  catch `java.lang.Throwable` @[L48fa68..L48fa92] goto L48faa6;
  catch `java.lang.Throwable` @[L48fa96..L48faa6] goto L48faa6;
}
procedure `void` `close`(`com.google.crypto.tink.streamingaead.c` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48fca8.  @monitorenter v1
  #L48fcaa.  v0:= v1.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fcae.  call `close`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.close:()V` @kind interface;
  #L48fcb4.  @monitorexit v1
  #L48fcb6.  return @kind void;
  #L48fcb8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fcba.  @monitorexit v1
  #L48fcbc.  throw v0;
  catch `java.lang.Throwable` @[L48fcaa..L48fcb4] goto L48fcb8;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.streamingaead.c` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f924.  @monitorenter v1
  #L48f926.  v0:= v1.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48f92a.  call temp:= `isOpen`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.isOpen:()Z` @kind interface;
  #L48f930.  v0:= temp;
  #L48f932.  @monitorexit v1
  #L48f934.  return v0;
  #L48f936.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f938.  @monitorexit v1
  #L48f93a.  throw v0;
  catch `java.lang.Throwable` @[L48f926..L48f932] goto L48f936;
}
procedure `long` `position`(`com.google.crypto.tink.streamingaead.c` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.position:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48fb70.  @monitorenter v2
  #L48fb72.  v0:= v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fb76.  if v0 == 0 then goto L48fb8a;
  #L48fb7a.  v0:= v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fb7e.  call temp:= `position`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.position:()J` @kind interface;
  #L48fb84.  v0:= temp @kind wide;
  #L48fb86.  @monitorexit v2
  #L48fb88.  return v0 @kind wide;
  #L48fb8a.  v0:= v2.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` @kind wide;
  #L48fb8e.  @monitorexit v2
  #L48fb90.  return v0 @kind wide;
  #L48fb92.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fb94.  @monitorexit v2
  #L48fb96.  throw v0;
  catch `java.lang.Throwable` @[L48fb72..L48fb86] goto L48fb92;
  catch `java.lang.Throwable` @[L48fb8a..L48fb8e] goto L48fb92;
}
procedure `java.nio.channels.SeekableByteChannel` `position`(`com.google.crypto.tink.streamingaead.c` v3 @kind this, `long` v4 ) @signature `Lcom/google/crypto/tink/streamingaead/c;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48fadc.  @monitorenter v3
  #L48fade.  v0:= v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fae2.  if v0 == 0 then goto L48faf2;
  #L48fae6.  v0:= v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48faea.  call temp:= `position`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L48faf0.  goto L48fb14;
  #L48faf2.  v0:= 0L;
  #L48faf6.  v2:= lcmp(v4, v0);
  #L48fafa.  if v2 < 0 then goto L48fb18;
  #L48fafe.  v3.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` := v4 @kind wide;
  #L48fb02.  v0:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fb06.  if v0 == 0 then goto L48fb14;
  #L48fb0a.  v0:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fb0e.  call temp:= `position`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L48fb14.  @monitorexit v3
  #L48fb16.  return v3 @kind object;
  #L48fb18.  v4:= new `java.lang.IllegalArgumentException`;
  #L48fb1c.  v5:= "Position must be non-negative" @kind object;
  #L48fb20.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48fb26.  throw v4;
  #L48fb28.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fb2a.  @monitorexit v3
  #L48fb2c.  throw v4;
  catch `java.lang.Throwable` @[L48fade..L48fb14] goto L48fb28;
  catch `java.lang.Throwable` @[L48fb18..L48fb28] goto L48fb28;
}
procedure `int` `read`(`com.google.crypto.tink.streamingaead.c` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/c;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48f958.  @monitorenter v3
  #L48f95a.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L48f960.  v0:= temp;
  #L48f962.  v1:= 0I;
  #L48f964.  if v0 != 0 then goto L48f96c;
  #L48f968.  @monitorexit v3
  #L48f96a.  return v1;
  #L48f96c.  v0:= v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48f970.  if v0 == 0 then goto L48f984;
  #L48f974.  v0:= v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48f978.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L48f97e.  v4:= temp;
  #L48f980.  @monitorexit v3
  #L48f982.  return v4;
  #L48f984.  v0:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48f988.  if v0 != 0 then goto L48f998;
  #L48f98c.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/c;.a:()Ljava/nio/channels/SeekableByteChannel;` @kind direct;
  #L48f992.  v0:= temp @kind object;
  #L48f994.  v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L48f998.  v0:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48f99c.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L48f9a2.  v0:= temp;
  #L48f9a4.  if v0 != 0 then goto L48f9ac;
  #L48f9a8.  @monitorexit v3
  #L48f9aa.  return v1;
  #L48f9ac.  v2:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48f9b0.  v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` := v2 @kind object;
  #L48f9b4.  v2:= 0I;
  #L48f9b6.  v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v2 @kind object;
  #L48f9ba.  @monitorexit v3
  #L48f9bc.  return v0;
  #L48f9be.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/c;.a:()Ljava/nio/channels/SeekableByteChannel;` @kind direct;
  #L48f9c4.  v0:= temp @kind object;
  #L48f9c6.  v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L48f9ca.  goto L48f998;
  #L48f9cc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f9ce.  @monitorexit v3
  #L48f9d0.  throw v4;
  catch `java.lang.Throwable` @[L48f95a..L48f962] goto L48f9cc;
  catch `java.lang.Throwable` @[L48f96c..L48f980] goto L48f9cc;
  catch `java.lang.Throwable` @[L48f984..L48f998] goto L48f9cc;
  catch `java.io.IOException` @[L48f998..L48f9a4] goto L48f9be;
  catch `java.lang.Throwable` @[L48f998..L48f9a4] goto L48f9cc;
  catch `java.io.IOException` @[L48f9ac..L48f9ba] goto L48f9be;
  catch `java.lang.Throwable` @[L48f9ac..L48f9ba] goto L48f9cc;
  catch `java.lang.Throwable` @[L48f9be..L48f9ca] goto L48f9cc;
}
procedure `long` `size`(`com.google.crypto.tink.streamingaead.c` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48fbbc.  @monitorenter v2
  #L48fbbe.  v0:= v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fbc2.  if v0 == 0 then goto L48fbd6;
  #L48fbc6.  v0:= v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L48fbca.  call temp:= `size`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.size:()J` @kind interface;
  #L48fbd0.  v0:= temp @kind wide;
  #L48fbd2.  @monitorexit v2
  #L48fbd4.  return v0 @kind wide;
  #L48fbd6.  v0:= new `java.io.IOException`;
  #L48fbda.  v1:= "Cannot determine size before first read()-call." @kind object;
  #L48fbde.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48fbe4.  throw v0;
  #L48fbe6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48fbe8.  @monitorexit v2
  #L48fbea.  throw v0;
  catch `java.lang.Throwable` @[L48fbbe..L48fbd2] goto L48fbe6;
  catch `java.lang.Throwable` @[L48fbd6..L48fbe6] goto L48fbe6;
}
procedure `java.nio.channels.SeekableByteChannel` `truncate`(`com.google.crypto.tink.streamingaead.c` v0 @kind this, `long` v1 ) @signature `Lcom/google/crypto/tink/streamingaead/c;.truncate:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;

  #L48fb54.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L48fb58.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L48fb5e.  throw v1;
}
procedure `int` `write`(`com.google.crypto.tink.streamingaead.c` v0 @kind this, `java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/c;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;

  #L48fa1c.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L48fa20.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L48fa26.  throw v1;
}
