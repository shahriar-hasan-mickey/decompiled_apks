record `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48f2c0.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` @kind object;
  #L48f2c4.  v1:= 1I;
  #L48f2c6.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L48f2ca.  v2:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$a`;
  #L48f2ce.  v3:= constclass @type ^`com.google.crypto.tink.StreamingAead` @kind object;
  #L48f2d2.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48f2d8.  v3:= 0I;
  #L48f2da.  v1[v3]:= v2 @kind object;
  #L48f2de.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L48f2e4.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmHkdf1MBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes128GcmHkdf1MBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48f0f4.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48f0f8.  v1:= 16I;
  #L48f0fc.  v2:= 1048576I;
  #L48f100.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48f106.  v0:= temp @kind object;
  #L48f108.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmHkdf4KBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes128GcmHkdf4KBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48f11c.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48f120.  v1:= 16I;
  #L48f124.  v2:= 4096I;
  #L48f128.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48f12e.  v0:= temp @kind object;
  #L48f130.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmHkdf1MBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes256GcmHkdf1MBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48f144.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48f148.  v1:= 32I;
  #L48f14c.  v2:= 1048576I;
  #L48f150.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48f156.  v0:= temp @kind object;
  #L48f158.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmHkdf4KBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes256GcmHkdf4KBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48f16c.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48f170.  v1:= 32I;
  #L48f174.  v2:= 4096I;
  #L48f178.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48f17e.  v0:= temp @kind object;
  #L48f180.  return v0 @kind object;
}
procedure `void` `b`(`com.google.crypto.tink.proto.AesGcmHkdfStreamingParams` v0 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L48f2f8.  call `d`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @kind static;
  #L48f2fe.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`int` v1 , `com.google.crypto.tink.proto.HashType` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L48f194.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind static;
  #L48f19a.  v0:= temp @kind object;
  #L48f19c.  call temp:= `setCiphertextSegmentSize`(v0, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;.setCiphertextSegmentSize:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind virtual;
  #L48f1a2.  v4:= temp @kind object;
  #L48f1a4.  call temp:= `setDerivedKeySize`(v4, v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;.setDerivedKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind virtual;
  #L48f1aa.  v3:= temp @kind object;
  #L48f1ac.  call temp:= `setHkdfHashType`(v3, v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;.setHkdfHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind virtual;
  #L48f1b2.  v2:= temp @kind object;
  #L48f1b4.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48f1ba.  v2:= temp @kind object;
  #L48f1bc.  v2:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingParams`) v2 @kind object;
  #L48f1c0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;` @kind static;
  #L48f1c6.  v3:= temp @kind object;
  #L48f1c8.  call temp:= `setKeySize`(v3, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;` @kind virtual;
  #L48f1ce.  v1:= temp @kind object;
  #L48f1d0.  call temp:= `setParams`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;` @kind virtual;
  #L48f1d6.  v1:= temp @kind object;
  #L48f1d8.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L48f1de.  v1:= temp @kind object;
  #L48f1e0.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L48f1e4.  v2:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager`;
  #L48f1e8.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.<init>:()V` @kind direct;
  #L48f1ee.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L48f1f4.  v2:= temp @kind object;
  #L48f1f6.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L48f1fc.  v1:= temp @kind object;
  #L48f1fe.  v3:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L48f202.  call temp:= `create`(v2, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L48f208.  v1:= temp @kind object;
  #L48f20a.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.AesGcmHkdfStreamingParams` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L48f388.  call temp:= `getDerivedKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getDerivedKeySize:()I` @kind virtual;
  #L48f38e.  v0:= temp;
  #L48f390.  call `validateAesKeySize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L48f396.  call temp:= `getHkdfHashType`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getHkdfHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L48f39c.  v0:= temp @kind object;
  #L48f39e.  v1:= `@@com.google.crypto.tink.proto.HashType.UNKNOWN_HASH` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L48f3a2.  if v0 == v1 then goto L48f3d8;
  #L48f3a6.  call temp:= `getCiphertextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getCiphertextSegmentSize:()I` @kind virtual;
  #L48f3ac.  v0:= temp;
  #L48f3ae.  call temp:= `getDerivedKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getDerivedKeySize:()I` @kind virtual;
  #L48f3b4.  v2:= temp;
  #L48f3b6.  v2:= v2 + 7;
  #L48f3ba.  v2:= v2 + 16;
  #L48f3be.  v2:= v2 + 2;
  #L48f3c2.  if v0 < v2 then goto L48f3c8;
  #L48f3c6.  return @kind void;
  #L48f3c8.  v2:= new `java.security.GeneralSecurityException`;
  #L48f3cc.  v0:= "ciphertext_segment_size must be at least (derived_key_size + NONCE_PREFIX_IN_BYTES + TAG_SIZE_IN_BYTES + 2)" @kind object;
  #L48f3d0.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f3d6.  throw v2;
  #L48f3d8.  v2:= new `java.security.GeneralSecurityException`;
  #L48f3dc.  v0:= "unknown HKDF hash type" @kind object;
  #L48f3e0.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f3e6.  throw v2;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48f310.  v0:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager`;
  #L48f314.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.<init>:()V` @kind direct;
  #L48f31a.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L48f320.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f2a8.  v0:= "type.googleapis.com/google.crypto.tink.AesGcmHkdfStreamingKey" @kind object;
  #L48f2ac.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f294.  v0:= 0I;
  #L48f296.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f21c.  v0:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b`;
  #L48f220.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` @kind object;
  #L48f224.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.<init>:(Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L48f22a.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f260.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L48f264.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` `parseKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48f23c.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L48f242.  v0:= temp @kind object;
  #L48f244.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind static;
  #L48f24a.  v2:= temp @kind object;
  #L48f24c.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48f278.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind virtual;
  #L48f27e.  v1:= temp @kind object;
  #L48f280.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f334.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.getVersion:()I` @kind virtual;
  #L48f33a.  v0:= temp;
  #L48f33c.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L48f342.  v1:= temp;
  #L48f344.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L48f34a.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L48f350.  v3:= temp @kind object;
  #L48f352.  call `d`(v3) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @kind static;
  #L48f358.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48f36c.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey`) v1 @kind object;
  #L48f370.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;)V` @kind virtual;
  #L48f376.  return @kind void;
}
