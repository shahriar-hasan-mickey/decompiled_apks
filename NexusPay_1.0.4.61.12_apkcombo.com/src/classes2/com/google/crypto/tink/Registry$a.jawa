record `com.google.crypto.tink.Registry$a` @kind class @AccessFlag  extends `com.google.crypto.tink.Registry$f` @kind interface {
  `com.google.crypto.tink.KeyManager` `com.google.crypto.tink.Registry$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.Registry$a` v0 @kind this, `com.google.crypto.tink.KeyManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry$a;.<init>:(Lcom/google/crypto/tink/KeyManager;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L427440.  v0.`com.google.crypto.tink.Registry$a.a` @type ^`com.google.crypto.tink.KeyManager` := v1 @kind object;
  #L427444.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42744a.  return @kind void;
}
procedure `java.lang.Class` `a`(`com.google.crypto.tink.Registry$a` v1 @kind this) @signature `Lcom/google/crypto/tink/Registry$a;.a:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427404.  v0:= 0I;
  #L427406.  return v0 @kind object;
}
procedure `java.lang.Class` `b`(`com.google.crypto.tink.Registry$a` v1 @kind this) @signature `Lcom/google/crypto/tink/Registry$a;.b:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4273e4.  v0:= v1.`com.google.crypto.tink.Registry$a.a` @type ^`com.google.crypto.tink.KeyManager` @kind object;
  #L4273e8.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4273ee.  v0:= temp @kind object;
  #L4273f0.  return v0 @kind object;
}
procedure `java.util.Set` `c`(`com.google.crypto.tink.Registry$a` v1 @kind this) @signature `Lcom/google/crypto/tink/Registry$a;.c:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427418.  v0:= v1.`com.google.crypto.tink.Registry$a.a` @type ^`com.google.crypto.tink.KeyManager` @kind object;
  #L42741c.  call temp:= `getPrimitiveClass`(v0) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L427422.  v0:= temp @kind object;
  #L427424.  call temp:= `singleton`(v0) @signature `Ljava/util/Collections;.singleton:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L42742a.  v0:= temp @kind object;
  #L42742c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `d`(`com.google.crypto.tink.Registry$a` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry$a;.d:(Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42738c.  v0:= v1.`com.google.crypto.tink.Registry$a.a` @type ^`com.google.crypto.tink.KeyManager` @kind object;
  #L427390.  call temp:= `getPrimitiveClass`(v0) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L427396.  v0:= temp @kind object;
  #L427398.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42739e.  v2:= temp;
  #L4273a0.  if v2 == 0 then goto L4273aa;
  #L4273a4.  v2:= v1.`com.google.crypto.tink.Registry$a.a` @type ^`com.google.crypto.tink.KeyManager` @kind object;
  #L4273a8.  return v2 @kind object;
  #L4273aa.  v2:= new `java.lang.InternalError`;
  #L4273ae.  v0:= "This should never be called, as we always first check supportedPrimitives." @kind object;
  #L4273b2.  call `<init>`(v2, v0) @signature `Ljava/lang/InternalError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4273b8.  throw v2;
}
procedure `com.google.crypto.tink.KeyManager` `e`(`com.google.crypto.tink.Registry$a` v1 @kind this) @signature `Lcom/google/crypto/tink/Registry$a;.e:()Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4273cc.  v0:= v1.`com.google.crypto.tink.Registry$a.a` @type ^`com.google.crypto.tink.KeyManager` @kind object;
  #L4273d0.  return v0 @kind object;
}
