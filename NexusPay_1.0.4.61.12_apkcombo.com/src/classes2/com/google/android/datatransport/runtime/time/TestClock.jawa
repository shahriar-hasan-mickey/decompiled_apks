record `com.google.android.datatransport.runtime.time.TestClock` @kind class @AccessFlag PUBLIC extends `com.google.android.datatransport.runtime.time.Clock` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `com.google.android.datatransport.runtime.time.TestClock.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.time.TestClock` v1 @kind this, `long` v2 ) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L25a0c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L25a0ce.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25a0d2.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L25a0d8.  v1.`com.google.android.datatransport.runtime.time.TestClock.a` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L25a0dc.  return @kind void;
}
procedure `void` `advance`(`com.google.android.datatransport.runtime.time.TestClock` v3 @kind this, `long` v4 ) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.advance:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25a0f0.  v0:= 0L;
  #L25a0f4.  v2:= lcmp(v4, v0);
  #L25a0f8.  if v2 < 0 then goto L25a108;
  #L25a0fc.  v0:= v3.`com.google.android.datatransport.runtime.time.TestClock.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25a100.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25a106.  return @kind void;
  #L25a108.  v4:= new `java.lang.IllegalArgumentException`;
  #L25a10c.  v5:= "cannot advance time backwards." @kind object;
  #L25a110.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25a116.  throw v4;
}
procedure `long` `getTime`(`com.google.android.datatransport.runtime.time.TestClock` v2 @kind this) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.getTime:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25a0a8.  v0:= v2.`com.google.android.datatransport.runtime.time.TestClock.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25a0ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25a0b2.  v0:= temp @kind wide;
  #L25a0b4.  return v0 @kind wide;
}
procedure `void` `tick`(`com.google.android.datatransport.runtime.time.TestClock` v2 @kind this) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.tick:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25a128.  v0:= 1L;
  #L25a12c.  call `advance`(v2, v0) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.advance:(J)V` @kind virtual;
  #L25a132.  return @kind void;
}
