record `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` @kind class @AccessFlag FINAL extends `android.database.sqlite.SQLiteOpenHelper` @kind class {
  `int` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @AccessFlag PRIVATE;
}
global `int` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.c` @AccessFlag STATIC;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L259d74.  call temp:= `a`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/w;.a:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L259d7a.  v0:= temp @kind object;
  #L259d7c.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.d` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v0 @kind object;
  #L259d80.  call temp:= `a`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/x;.a:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L259d86.  v0:= temp @kind object;
  #L259d88.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.e` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v0 @kind object;
  #L259d8c.  call temp:= `a`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/y;.a:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L259d92.  v0:= temp @kind object;
  #L259d94.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.f` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v0 @kind object;
  #L259d98.  call temp:= `a`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/z;.a:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L259d9e.  v0:= temp @kind object;
  #L259da0.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.g` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v0 @kind object;
  #L259da4.  v1:= 4I;
  #L259da6.  v1:= new `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`[v1];
  #L259daa.  v2:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.d` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` @kind object;
  #L259dae.  v3:= 0I;
  #L259db0.  v1[v3]:= v2 @kind object;
  #L259db4.  v2:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.e` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` @kind object;
  #L259db8.  v3:= 1I;
  #L259dba.  v1[v3]:= v2 @kind object;
  #L259dbe.  v2:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.f` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` @kind object;
  #L259dc2.  v3:= 2I;
  #L259dc4.  v1[v3]:= v2 @kind object;
  #L259dc8.  v2:= 3I;
  #L259dca.  v1[v2]:= v0 @kind object;
  #L259dce.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L259dd4.  v0:= temp @kind object;
  #L259dd6.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.h` @type ^`java.util.List` := v0 @kind object;
  #L259dda.  return @kind void;
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.content.Context` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<init>:(Landroid/content/Context;Ljava/lang/String;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L259dec.  v0:= 0I;
  #L259dee.  call `<init>`(v1, v2, v3, v0, v4) @signature `Landroid/database/sqlite/SQLiteOpenHelper;.<init>:(Landroid/content/Context;Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)V` @kind direct;
  #L259df4.  v2:= 0I;
  #L259df6.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @type ^`boolean` := v2 @kind boolean;
  #L259dfa.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.a` @type ^`int` := v4;
  #L259dfe.  return @kind void;
}
procedure `void` `a`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.a:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L259e10.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @type ^`boolean` @kind boolean;
  #L259e14.  if v0 != 0 then goto L259e1e;
  #L259e18.  call `onConfigure`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind virtual;
  #L259e1e.  return @kind void;
}
procedure `void` `b`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.b:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L259e30.  v0:= "CREATE TABLE events (_id INTEGER PRIMARY KEY, context_id INTEGER NOT NULL, transport_name TEXT NOT NULL, timestamp_ms INTEGER NOT NULL, uptime_ms INTEGER NOT NULL, payload BLOB NOT NULL, code INTEGER, num_attempts INTEGER NOT NULL,FOREIGN KEY (context_id) REFERENCES transport_contexts(_id) ON DELETE CASCADE)" @kind object;
  #L259e34.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e3a.  v0:= "CREATE TABLE event_metadata (_id INTEGER PRIMARY KEY, event_id INTEGER NOT NULL, name TEXT NOT NULL, value TEXT NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE)" @kind object;
  #L259e3e.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e44.  v0:= "CREATE TABLE transport_contexts (_id INTEGER PRIMARY KEY, backend_name TEXT NOT NULL, priority INTEGER NOT NULL, next_request_ms INTEGER NOT NULL)" @kind object;
  #L259e48.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e4e.  v0:= "CREATE INDEX events_backend_id on events(context_id)" @kind object;
  #L259e52.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e58.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority on transport_contexts(backend_name, priority)" @kind object;
  #L259e5c.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e62.  return @kind void;
}
procedure `void` `c`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.c:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L259e74.  v0:= "ALTER TABLE transport_contexts ADD COLUMN extras BLOB" @kind object;
  #L259e78.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e7e.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority_extras on transport_contexts(backend_name, priority, extras)" @kind object;
  #L259e82.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e88.  v0:= "DROP INDEX contexts_backend_priority" @kind object;
  #L259e8c.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259e92.  return @kind void;
}
procedure `void` `d`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.d:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L259ea4.  v0:= "ALTER TABLE events ADD COLUMN payload_encoding TEXT" @kind object;
  #L259ea8.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259eae.  return @kind void;
}
procedure `void` `e`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.e:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L259ec0.  v0:= "ALTER TABLE events ADD COLUMN inline BOOLEAN NOT NULL DEFAULT 1" @kind object;
  #L259ec4.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259eca.  v0:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L259ece.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259ed4.  v0:= "CREATE TABLE event_payloads (sequence_num INTEGER NOT NULL, event_id INTEGER NOT NULL, bytes BLOB NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE,PRIMARY KEY (sequence_num, event_id))" @kind object;
  #L259ed8.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259ede.  return @kind void;
}
procedure `void` `f`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object, `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.f:(Landroid/database/sqlite/SQLiteDatabase;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L259f50.  call `a`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.a:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L259f56.  v0:= 0I;
  #L259f58.  call `g`(v1, v2, v0, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.g:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L259f5e.  return @kind void;
}
procedure `void` `g`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v2 @kind this, `android.database.sqlite.SQLiteDatabase` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.g:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L259fe8.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.h` @type ^`java.util.List` @kind object;
  #L259fec.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L259ff2.  v0:= temp;
  #L259ff4.  if v5 > v0 then goto L25a01a;
  #L259ff8.  if v4 >= v5 then goto L25a018;
  #L259ffc.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.h` @type ^`java.util.List` @kind object;
  #L25a000.  call temp:= `get`(v0, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L25a006.  v0:= temp @kind object;
  #L25a008.  v0:= (`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`) v0 @kind object;
  #L25a00c.  call `upgrade`(v0, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind interface;
  #L25a012.  v4:= v4 + 1;
  #L25a016.  goto L259ff8;
  #L25a018.  return @kind void;
  #L25a01a.  v3:= new `java.lang.IllegalArgumentException`;
  #L25a01e.  v0:= new `java.lang.StringBuilder`;
  #L25a022.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25a028.  v1:= "Migration from " @kind object;
  #L25a02c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25a032.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25a038.  v4:= " to " @kind object;
  #L25a03c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25a042.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25a048.  v4:= " was requested, but cannot be performed. Only " @kind object;
  #L25a04c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25a052.  v4:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.h` @type ^`java.util.List` @kind object;
  #L25a056.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L25a05c.  v4:= temp;
  #L25a05e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25a064.  v4:= " migrations are provided" @kind object;
  #L25a068.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25a06e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25a074.  v4:= temp @kind object;
  #L25a076.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25a07c.  throw v3;
}
procedure `void` `onConfigure`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v3 @kind this, `android.database.sqlite.SQLiteDatabase` v4 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L259ef0.  v0:= 1I;
  #L259ef2.  v3.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @type ^`boolean` := v0 @kind boolean;
  #L259ef6.  v1:= 0I;
  #L259ef8.  v1:= new `java.lang.String`[v1];
  #L259efc.  v2:= "PRAGMA busy_timeout=0;" @kind object;
  #L259f00.  call temp:= `rawQuery`(v4, v2, v1) @signature `Landroid/database/sqlite/SQLiteDatabase;.rawQuery:(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;` @kind virtual;
  #L259f06.  v1:= temp @kind object;
  #L259f08.  call `close`(v1) @signature `Landroid/database/Cursor;.close:()V` @kind interface;
  #L259f0e.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L259f12.  v2:= 16I;
  #L259f16.  if v1 < v2 then goto L259f20;
  #L259f1a.  call `setForeignKeyConstraintsEnabled`(v4, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.setForeignKeyConstraintsEnabled:(Z)V` @kind virtual;
  #L259f20.  return @kind void;
}
procedure `void` `onCreate`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259f34.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.a` @type ^`int`;
  #L259f38.  call `f`(v1, v2, v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.f:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L259f3e.  return @kind void;
}
procedure `void` `onDowngrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onDowngrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L259f70.  v2:= "DROP TABLE events" @kind object;
  #L259f74.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259f7a.  v2:= "DROP TABLE event_metadata" @kind object;
  #L259f7e.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259f84.  v2:= "DROP TABLE transport_contexts" @kind object;
  #L259f88.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259f8e.  v2:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L259f92.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L259f98.  call `f`(v0, v1, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.f:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L259f9e.  return @kind void;
}
procedure `void` `onOpen`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onOpen:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;

  #L259fb0.  call `a`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.a:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L259fb6.  return @kind void;
}
procedure `void` `onUpgrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onUpgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L259fc8.  call `a`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.a:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L259fce.  call `g`(v0, v1, v2, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.g:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L259fd4.  return @kind void;
}
