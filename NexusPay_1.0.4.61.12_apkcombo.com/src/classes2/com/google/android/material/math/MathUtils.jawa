record `com.google.android.material.math.MathUtils` @kind class @AccessFlag PUBLIC_FINAL {
}
global `float` `@@com.google.android.material.math.MathUtils.DEFAULT_EPSILON` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.google.android.material.math.MathUtils` v0 @kind this) @signature `Lcom/google/android/material/math/MathUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f17e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f17ea.  return @kind void;
}
procedure `float` `dist`(`float` v0 , `float` v1 , `float` v2 , `float` v3 ) @signature `Lcom/google/android/material/math/MathUtils;.dist:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f1694.  v2:= v2 - v0 @kind float;
  #L3f1696.  v3:= v3 - v1 @kind float;
  #L3f1698.  v0:= (`double`) v2 @kind f2d;
  #L3f169a.  v2:= (`double`) v3 @kind f2d;
  #L3f169c.  call temp:= `hypot`(v0, v2) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L3f16a2.  v0:= temp @kind wide;
  #L3f16a4.  v0:= (`float`) v0 @kind d2f;
  #L3f16a6.  return v0;
}
procedure `float` `distanceToFurthestCorner`(`float` v1 , `float` v2 , `float` v3 , `float` v4 , `float` v5 , `float` v6 ) @signature `Lcom/google/android/material/math/MathUtils;.distanceToFurthestCorner:(FFFFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f16b8.  call temp:= `dist`(v1, v2, v3, v4) @signature `Lcom/google/android/material/math/MathUtils;.dist:(FFFF)F` @kind static;
  #L3f16be.  v0:= temp;
  #L3f16c0.  call temp:= `dist`(v1, v2, v5, v4) @signature `Lcom/google/android/material/math/MathUtils;.dist:(FFFF)F` @kind static;
  #L3f16c6.  v4:= temp;
  #L3f16c8.  call temp:= `dist`(v1, v2, v5, v6) @signature `Lcom/google/android/material/math/MathUtils;.dist:(FFFF)F` @kind static;
  #L3f16ce.  v5:= temp;
  #L3f16d0.  call temp:= `dist`(v1, v2, v3, v6) @signature `Lcom/google/android/material/math/MathUtils;.dist:(FFFF)F` @kind static;
  #L3f16d6.  v1:= temp;
  #L3f16d8.  call temp:= `max`(v0, v4, v5, v1) @signature `Lcom/google/android/material/math/MathUtils;.max:(FFFF)F` @kind static;
  #L3f16de.  v1:= temp;
  #L3f16e0.  return v1;
}
procedure `float` `floorMod`(`float` v3 , `int` v4 ) @signature `Lcom/google/android/material/math/MathUtils;.floorMod:(FI)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f16f4.  v0:= (`float`) v4 @kind i2f;
  #L3f16f6.  v1:= v3 / v0 @kind float;
  #L3f16fa.  v1:= (`int`) v1 @kind f2i;
  #L3f16fc.  call temp:= `signum`(v3) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L3f1702.  v2:= temp;
  #L3f1704.  v2:= v2 * v0 @kind float;
  #L3f1708.  v0:= 0I;
  #L3f170a.  v0:= fcmpg(v2, v0);
  #L3f170e.  if v0 >= 0 then goto L3f1724;
  #L3f1712.  v0:= v1 * v4 @kind int;
  #L3f1716.  v0:= (`float`) v0 @kind i2f;
  #L3f1718.  v0:= fcmpl(v0, v3);
  #L3f171c.  if v0 == 0 then goto L3f1724;
  #L3f1720.  v1:= v1 + -1;
  #L3f1724.  v1:= v1 * v4 @kind int;
  #L3f1728.  v4:= (`float`) v1 @kind i2f;
  #L3f172a.  v3:= v3 - v4 @kind float;
  #L3f172c.  return v3;
}
procedure `int` `floorMod`(`int` v2 , `int` v3 ) @signature `Lcom/google/android/material/math/MathUtils;.floorMod:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f17b4.  v0:= v2 / v3 @kind int;
  #L3f17b8.  v1:= v2 ^~ v3 @kind int;
  #L3f17bc.  if v1 >= 0 then goto L3f17cc;
  #L3f17c0.  v1:= v0 * v3 @kind int;
  #L3f17c4.  if v1 == v2 then goto L3f17cc;
  #L3f17c8.  v0:= v0 + -1;
  #L3f17cc.  v0:= v0 * v3 @kind int;
  #L3f17d0.  v2:= v2 - v0 @kind int;
  #L3f17d2.  return v2;
}
procedure `boolean` `geq`(`float` v0 , `float` v1 , `float` v2 ) @signature `Lcom/google/android/material/math/MathUtils;.geq:(FFF)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f1670.  v0:= v0 + v2 @kind float;
  #L3f1672.  v0:= fcmpl(v0, v1);
  #L3f1676.  if v0 < 0 then goto L3f167e;
  #L3f167a.  v0:= 1I;
  #L3f167c.  goto L3f1680;
  #L3f167e.  v0:= 0I;
  #L3f1680.  return v0;
}
procedure `float` `lerp`(`float` v1 , `float` v2 , `float` v3 ) @signature `Lcom/google/android/material/math/MathUtils;.lerp:(FFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1740.  v0:= 1.0F;
  #L3f1744.  v0:= v0 - v3 @kind float;
  #L3f1746.  v0:= v0 * v1 @kind float;
  #L3f174a.  v3:= v3 * v2 @kind float;
  #L3f174e.  v0:= v0 + v3 @kind float;
  #L3f1750.  return v0;
}
procedure `float` `max`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/google/android/material/math/MathUtils;.max:(FFFF)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f1764.  v0:= fcmpl(v1, v2);
  #L3f1768.  if v0 <= 0 then goto L3f177e;
  #L3f176c.  v0:= fcmpl(v1, v3);
  #L3f1770.  if v0 <= 0 then goto L3f177e;
  #L3f1774.  v0:= fcmpl(v1, v4);
  #L3f1778.  if v0 <= 0 then goto L3f177e;
  #L3f177c.  goto L3f17a0;
  #L3f177e.  v1:= fcmpl(v2, v3);
  #L3f1782.  if v1 <= 0 then goto L3f1792;
  #L3f1786.  v1:= fcmpl(v2, v4);
  #L3f178a.  if v1 <= 0 then goto L3f1792;
  #L3f178e.  v1:= v2;
  #L3f1790.  goto L3f17a0;
  #L3f1792.  v1:= fcmpl(v3, v4);
  #L3f1796.  if v1 <= 0 then goto L3f179e;
  #L3f179a.  v1:= v3;
  #L3f179c.  goto L3f17a0;
  #L3f179e.  v1:= v4;
  #L3f17a0.  return v1;
}
