record `com.dbbl.nexus.pay.utils.TextInputValidator` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.dbbl.nexus.pay.utils.TextInputValidator` v0 @kind this) @signature `Lcom/dbbl/nexus/pay/utils/TextInputValidator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ba968.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ba96e.  return @kind void;
}
procedure `boolean` `isValidBirthDate`(`java.lang.String` v3 @kind object) @signature `Lcom/dbbl/nexus/pay/utils/TextInputValidator;.isValidBirthDate:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1ba88c.  v0:= "dd/MM/yyyy" @kind object;
  #L1ba890.  v1:= 0I;
  #L1ba892.  if v3 == 0 then goto L1ba8c4;
  #L1ba896.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1ba89c.  v2:= temp @kind object;
  #L1ba89e.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1ba8a4.  v2:= temp;
  #L1ba8a6.  if v2 != 0 then goto L1ba8c4;
  #L1ba8aa.  v2:= new `java.text.SimpleDateFormat`;
  #L1ba8ae.  call `<init>`(v2, v0) @signature `Ljava/text/SimpleDateFormat;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ba8b4.  call `setLenient`(v2, v1) @signature `Ljava/text/DateFormat;.setLenient:(Z)V` @kind virtual;
  #L1ba8ba.  call temp:= `parse`(v2, v3) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L1ba8c0.  v3:= 1I;
  #L1ba8c2.  return v3;
  #L1ba8c4.  return v1;
  catch `java.text.ParseException` @[L1ba8aa..L1ba8c0] goto L1ba8c4;
}
procedure `boolean` `isValidName`(`java.lang.String` v0 @kind object) @signature `Lcom/dbbl/nexus/pay/utils/TextInputValidator;.isValidName:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1ba8e8.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L1ba8ee.  v0:= temp;
  #L1ba8f0.  v0:= v0 ^~ 1;
  #L1ba8f4.  return v0;
}
procedure `boolean` `isValidNid`(`java.lang.String` v3 @kind object) @signature `Lcom/dbbl/nexus/pay/utils/TextInputValidator;.isValidNid:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1ba908.  call temp:= `isEmpty`(v3) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L1ba90e.  v0:= temp;
  #L1ba910.  v1:= 0I;
  #L1ba912.  if v0 == 0 then goto L1ba918;
  #L1ba916.  return v1;
  #L1ba918.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1ba91e.  v0:= temp;
  #L1ba920.  v2:= 10I;
  #L1ba924.  if v0 == v2 then goto L1ba94c;
  #L1ba928.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1ba92e.  v0:= temp;
  #L1ba930.  v2:= 13I;
  #L1ba934.  if v0 == v2 then goto L1ba94c;
  #L1ba938.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1ba93e.  v0:= temp;
  #L1ba940.  v2:= 17I;
  #L1ba944.  if v0 != v2 then goto L1ba94a;
  #L1ba948.  goto L1ba94c;
  #L1ba94a.  return v1;
  #L1ba94c.  call temp:= `isDigitsOnly`(v3) @signature `Landroid/text/TextUtils;.isDigitsOnly:(Ljava/lang/CharSequence;)Z` @kind static;
  #L1ba952.  v3:= temp;
  #L1ba954.  return v3;
}
