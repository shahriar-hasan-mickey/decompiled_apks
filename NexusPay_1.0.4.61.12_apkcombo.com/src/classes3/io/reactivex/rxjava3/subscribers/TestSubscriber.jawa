record `io.reactivex.rxjava3.subscribers.TestSubscriber` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.observers.BaseTestConsumer` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.subscribers.TestSubscriber.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.reactivex.rxjava3.subscribers.TestSubscriber.b` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subscribers.TestSubscriber.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.subscribers.TestSubscriber.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L5267f4.  v0:= `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.INSTANCE` @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a` @kind object;
  #L5267f8.  v1:= 9223372036854775807L;
  #L526802.  call `<init>`(v3, v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L526808.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52681c.  v0:= `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.INSTANCE` @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a` @kind object;
  #L526820.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L526826.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L526838.  v0:= 9223372036854775807L;
  #L526842.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L526848.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L52685c.  call `<init>`(v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L526862.  v0:= 0L;
  #L526866.  v2:= lcmp(v5, v0);
  #L52686a.  if v2 < 0 then goto L526890;
  #L52686e.  v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L526872.  v4:= new `java.util.concurrent.atomic.AtomicReference`;
  #L526876.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L52687c.  v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L526880.  v4:= new `java.util.concurrent.atomic.AtomicLong`;
  #L526884.  call `<init>`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L52688a.  v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v4 @kind object;
  #L52688e.  return @kind void;
  #L526890.  v4:= new `java.lang.IllegalArgumentException`;
  #L526894.  v5:= "Negative initial request not allowed" @kind object;
  #L526898.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52689e.  throw v4;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `create`() @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.create:()Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L526788.  v0:= new `io.reactivex.rxjava3.subscribers.TestSubscriber`;
  #L52678c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L526792.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `create`(`long` v1 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.create:(J)Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5267a4.  v0:= new `io.reactivex.rxjava3.subscribers.TestSubscriber`;
  #L5267a8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L5267ae.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `create`(`org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.create:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5267c0.  v0:= new `io.reactivex.rxjava3.subscribers.TestSubscriber`;
  #L5267c4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L5267ca.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L52673c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @kind virtual;
  #L526742.  v0:= temp @kind object;
  #L526744.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `assertSubscribed`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L526758.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52675c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L526762.  v0:= temp @kind object;
  #L526764.  if v0 == 0 then goto L52676a;
  #L526768.  return v1 @kind object;
  #L52676a.  v0:= "Not subscribed!" @kind object;
  #L52676e.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L526774.  v0:= temp @kind object;
  #L526776.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5268b0.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L5268b4.  if v0 != 0 then goto L5268c8;
  #L5268b8.  v0:= 1I;
  #L5268ba.  v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` := v0 @kind boolean;
  #L5268be.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5268c2.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L5268c8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.dispose:()V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L5268dc.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L5268e2.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5266e4.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5266e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5266ee.  v0:= temp @kind object;
  #L5266f0.  if v0 == 0 then goto L5266f8;
  #L5266f4.  v0:= 1I;
  #L5266f6.  goto L5266fa;
  #L5266f8.  v0:= 0I;
  #L5266fa.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52670c.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L526710.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.isDisposed:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L526724.  v0:= v1.`io.reactivex.rxjava3.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L526728.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v4 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5268f4.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L5268f8.  if v0 != 0 then goto L52692a;
  #L5268fc.  v0:= 1I;
  #L5268fe.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L526902.  v0:= v4.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L526906.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52690c.  v0:= temp @kind object;
  #L52690e.  if v0 != 0 then goto L52692a;
  #L526912.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L526916.  v1:= new `java.lang.IllegalStateException`;
  #L52691a.  v2:= "onSubscribe not called in proper order" @kind object;
  #L52691e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L526924.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52692a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L526930.  v0:= temp @kind object;
  #L526932.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L526936.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L52693a.  v2:= 1L;
  #L52693e.  v0:= v0 + v2 @kind long;
  #L526940.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L526944.  v0:= v4.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L526948.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L52694e.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L526952.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L526958.  return @kind void;
  #L52695a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52695c.  v1:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L526960.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L526966.  throw v0;
  catch `java.lang.Throwable` @[L52692a..L52694e] goto L52695a;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L526984.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L526988.  if v0 != 0 then goto L5269ba;
  #L52698c.  v0:= 1I;
  #L52698e.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L526992.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L526996.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52699c.  v0:= temp @kind object;
  #L52699e.  if v0 != 0 then goto L5269ba;
  #L5269a2.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L5269a6.  v1:= new `java.lang.IllegalStateException`;
  #L5269aa.  v2:= "onSubscribe not called in proper order" @kind object;
  #L5269ae.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5269b4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5269ba.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L5269c0.  v0:= temp @kind object;
  #L5269c2.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L5269c6.  if v4 != 0 then goto L5269e4;
  #L5269ca.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L5269ce.  v1:= new `java.lang.NullPointerException`;
  #L5269d2.  v2:= "onError received a null Throwable" @kind object;
  #L5269d6.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5269dc.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5269e2.  goto L5269ee;
  #L5269e4.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L5269e8.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5269ee.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5269f2.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5269f8.  v4:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L5269fc.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L526a02.  return @kind void;
  #L526a04.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L526a06.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L526a0a.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L526a10.  throw v4;
  catch `java.lang.Throwable` @[L5269ba..L5269f8] goto L526a04;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L526a30.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L526a34.  if v0 != 0 then goto L526a66;
  #L526a38.  v0:= 1I;
  #L526a3a.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L526a3e.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L526a42.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L526a48.  v0:= temp @kind object;
  #L526a4a.  if v0 != 0 then goto L526a66;
  #L526a4e.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L526a52.  v1:= new `java.lang.IllegalStateException`;
  #L526a56.  v2:= "onSubscribe not called in proper order" @kind object;
  #L526a5a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L526a60.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L526a66.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L526a6c.  v0:= temp @kind object;
  #L526a6e.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L526a72.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L526a76.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L526a7c.  if v4 != 0 then goto L526a98;
  #L526a80.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L526a84.  v1:= new `java.lang.NullPointerException`;
  #L526a88.  v2:= "onNext received a null value" @kind object;
  #L526a8c.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L526a92.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L526a98.  v0:= v3.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L526a9c.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L526aa2.  return @kind void;
}
procedure `void` `onStart`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L526ab4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L526ac8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L526ace.  v0:= temp @kind object;
  #L526ad0.  v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L526ad4.  if v6 != 0 then goto L526af2;
  #L526ad8.  v6:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L526adc.  v0:= new `java.lang.NullPointerException`;
  #L526ae0.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L526ae4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L526aea.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L526af0.  return @kind void;
  #L526af2.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L526af6.  v1:= 0I;
  #L526af8.  call temp:= `compareAndSet`(v0, v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L526afe.  v0:= temp;
  #L526b00.  if v0 != 0 then goto L526b56;
  #L526b04.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L526b0a.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L526b0e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L526b14.  v0:= temp @kind object;
  #L526b16.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L526b1a.  if v0 == v1 then goto L526b54;
  #L526b1e.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L526b22.  v1:= new `java.lang.IllegalStateException`;
  #L526b26.  v2:= new `java.lang.StringBuilder`;
  #L526b2a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L526b30.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L526b34.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L526b3a.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L526b40.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L526b46.  v6:= temp @kind object;
  #L526b48.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L526b4e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L526b54.  return @kind void;
  #L526b56.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L526b5a.  call `onSubscribe`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L526b60.  v0:= v5.`io.reactivex.rxjava3.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L526b64.  v1:= 0L;
  #L526b68.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L526b6e.  v3:= temp @kind wide;
  #L526b70.  v0:= lcmp(v3, v1);
  #L526b74.  if v0 == 0 then goto L526b7e;
  #L526b78.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L526b7e.  call `onStart`(v5) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.onStart:()V` @kind virtual;
  #L526b84.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L526b98.  v0:= v2.`io.reactivex.rxjava3.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L526b9c.  v1:= v2.`io.reactivex.rxjava3.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L526ba0.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L526ba6.  return @kind void;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber` `requestMore`(`io.reactivex.rxjava3.subscribers.TestSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.requestMore:(J)Lio/reactivex/rxjava3/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L5267dc.  call `request`(v0, v1) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber;.request:(J)V` @kind virtual;
  #L5267e2.  return v0 @kind object;
}
