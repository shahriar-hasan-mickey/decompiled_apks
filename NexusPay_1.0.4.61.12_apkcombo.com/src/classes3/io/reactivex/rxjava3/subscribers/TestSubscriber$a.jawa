record `io.reactivex.rxjava3.subscribers.TestSubscriber$a` @kind class @AccessFlag FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
}
global `io.reactivex.rxjava3.subscribers.TestSubscriber$a`[] `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.rxjava3.subscribers.TestSubscriber$a` `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L526648.  v0:= new `io.reactivex.rxjava3.subscribers.TestSubscriber$a`;
  #L52664c.  v1:= "INSTANCE" @kind object;
  #L526650.  v2:= 0I;
  #L526652.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L526658.  `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.INSTANCE` @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a` := v0 @kind object;
  #L52665c.  v1:= 1I;
  #L52665e.  v1:= new `io.reactivex.rxjava3.subscribers.TestSubscriber$a`[v1];
  #L526662.  v1[v2]:= v0 @kind object;
  #L526666.  `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.$VALUES` @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a`[] := v1 @kind object;
  #L52666a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subscribers.TestSubscriber$a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L52667c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L526682.  return @kind void;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber$a` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.valueOf:(Ljava/lang/String;)Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L526600.  v0:= constclass @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a` @kind object;
  #L526604.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L52660a.  v1:= temp @kind object;
  #L52660c.  v1:= (`io.reactivex.rxjava3.subscribers.TestSubscriber$a`) v1 @kind object;
  #L526610.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.subscribers.TestSubscriber$a`[] `values`() @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.values:()[Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L526624.  v0:= `@@io.reactivex.rxjava3.subscribers.TestSubscriber$a.$VALUES` @type ^`io.reactivex.rxjava3.subscribers.TestSubscriber$a`[] @kind object;
  #L526628.  call temp:= `clone`(v0) @signature `[Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.clone:()Ljava/lang/Object;` @kind virtual;
  #L52662e.  v0:= temp @kind object;
  #L526630.  v0:= (`io.reactivex.rxjava3.subscribers.TestSubscriber$a`[]) v0 @kind object;
  #L526634.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subscribers.TestSubscriber$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L526694.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subscribers.TestSubscriber$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L5266a8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subscribers.TestSubscriber$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L5266bc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subscribers.TestSubscriber$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/subscribers/TestSubscriber$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L5266d0.  return @kind void;
}
