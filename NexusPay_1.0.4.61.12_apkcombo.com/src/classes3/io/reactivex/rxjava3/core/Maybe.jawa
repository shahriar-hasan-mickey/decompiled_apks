record `io.reactivex.rxjava3.core.Maybe` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.rxjava3.core.MaybeSource` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.core.Maybe` v0 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49ff8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49ff92.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Maybe` `amb`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.amb:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49e258.  v0:= "sources is null" @kind object;
  #L49e25c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e262.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb`;
  #L49e266.  v1:= 0I;
  #L49e268.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/rxjava3/core/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L49e26e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e274.  v2:= temp @kind object;
  #L49e276.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `ambArray`(`io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.ambArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49e288.  v0:= "sources is null" @kind object;
  #L49e28c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e292.  v0:= length @variable v2;
  #L49e294.  if v0 != 0 then goto L49e2a2;
  #L49e298.  call temp:= `empty`() @signature `Lio/reactivex/rxjava3/core/Maybe;.empty:()Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e29e.  v2:= temp @kind object;
  #L49e2a0.  return v2 @kind object;
  #L49e2a2.  v0:= length @variable v2;
  #L49e2a4.  v1:= 1I;
  #L49e2a6.  if v0 != v1 then goto L49e2ba;
  #L49e2aa.  v0:= 0I;
  #L49e2ac.  v2:= v2[v0] @kind object;
  #L49e2b0.  call temp:= `wrap`(v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.wrap:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e2b6.  v2:= temp @kind object;
  #L49e2b8.  return v2 @kind object;
  #L49e2ba.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb`;
  #L49e2be.  v1:= 0I;
  #L49e2c0.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/rxjava3/core/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L49e2c6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e2cc.  v2:= temp @kind object;
  #L49e2ce.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concat`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49d734.  v0:= "source1 is null" @kind object;
  #L49d738.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d73e.  v0:= "source2 is null" @kind object;
  #L49d742.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d748.  v0:= 2I;
  #L49d74a.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49d74e.  v1:= 0I;
  #L49d750.  v0[v1]:= v2 @kind object;
  #L49d754.  v2:= 1I;
  #L49d756.  v0[v2]:= v3 @kind object;
  #L49d75a.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d760.  v2:= temp @kind object;
  #L49d762.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concat`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49d774.  v0:= "source1 is null" @kind object;
  #L49d778.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d77e.  v0:= "source2 is null" @kind object;
  #L49d782.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d788.  v0:= "source3 is null" @kind object;
  #L49d78c.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d792.  v0:= 3I;
  #L49d794.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49d798.  v1:= 0I;
  #L49d79a.  v0[v1]:= v2 @kind object;
  #L49d79e.  v2:= 1I;
  #L49d7a0.  v0[v2]:= v3 @kind object;
  #L49d7a4.  v2:= 2I;
  #L49d7a6.  v0[v2]:= v4 @kind object;
  #L49d7aa.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d7b0.  v2:= temp @kind object;
  #L49d7b2.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concat`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49d7c4.  v0:= "source1 is null" @kind object;
  #L49d7c8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d7ce.  v0:= "source2 is null" @kind object;
  #L49d7d2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d7d8.  v0:= "source3 is null" @kind object;
  #L49d7dc.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d7e2.  v0:= "source4 is null" @kind object;
  #L49d7e6.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d7ec.  v0:= 4I;
  #L49d7ee.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49d7f2.  v1:= 0I;
  #L49d7f4.  v0[v1]:= v2 @kind object;
  #L49d7f8.  v2:= 1I;
  #L49d7fa.  v0[v2]:= v3 @kind object;
  #L49d7fe.  v2:= 2I;
  #L49d800.  v0[v2]:= v4 @kind object;
  #L49d804.  v2:= 3I;
  #L49d806.  v0[v2]:= v5 @kind object;
  #L49d80a.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d810.  v2:= temp @kind object;
  #L49d812.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concat`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49d824.  v0:= "sources is null" @kind object;
  #L49d828.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d82e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable`;
  #L49d832.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L49d838.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d83e.  v1:= temp @kind object;
  #L49d840.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49d854.  v0:= 2I;
  #L49d856.  call temp:= `concat`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d85c.  v1:= temp @kind object;
  #L49d85e.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concat`(`org.reactivestreams.Publisher` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49d870.  v0:= "sources is null" @kind object;
  #L49d874.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d87a.  v0:= "prefetch" @kind object;
  #L49d87e.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L49d884.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybePublisher`;
  #L49d888.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49d88e.  v1:= temp @kind object;
  #L49d890.  v2:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L49d894.  call `<init>`(v0, v3, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/internal/util/ErrorMode;I)V` @kind direct;
  #L49d89a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d8a0.  v3:= temp @kind object;
  #L49d8a2.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatArray`(`io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49d8b4.  v0:= "sources is null" @kind object;
  #L49d8b8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d8be.  v0:= length @variable v2;
  #L49d8c0.  if v0 != 0 then goto L49d8ce;
  #L49d8c4.  call temp:= `empty`() @signature `Lio/reactivex/rxjava3/core/Flowable;.empty:()Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d8ca.  v2:= temp @kind object;
  #L49d8cc.  return v2 @kind object;
  #L49d8ce.  v0:= length @variable v2;
  #L49d8d0.  v1:= 1I;
  #L49d8d2.  if v0 != v1 then goto L49d8f0;
  #L49d8d6.  v0:= 0I;
  #L49d8d8.  v2:= v2[v0] @kind object;
  #L49d8dc.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable`;
  #L49d8e0.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49d8e6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d8ec.  v2:= temp @kind object;
  #L49d8ee.  return v2 @kind object;
  #L49d8f0.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray`;
  #L49d8f4.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray;.<init>:([Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49d8fa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d900.  v2:= temp @kind object;
  #L49d902.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatArrayDelayError`(`io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatArrayDelayError:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49d914.  v0:= "sources is null" @kind object;
  #L49d918.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d91e.  v0:= length @variable v2;
  #L49d920.  if v0 != 0 then goto L49d92e;
  #L49d924.  call temp:= `empty`() @signature `Lio/reactivex/rxjava3/core/Flowable;.empty:()Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d92a.  v2:= temp @kind object;
  #L49d92c.  return v2 @kind object;
  #L49d92e.  v0:= length @variable v2;
  #L49d930.  v1:= 1I;
  #L49d932.  if v0 != v1 then goto L49d950;
  #L49d936.  v0:= 0I;
  #L49d938.  v2:= v2[v0] @kind object;
  #L49d93c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable`;
  #L49d940.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49d946.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d94c.  v2:= temp @kind object;
  #L49d94e.  return v2 @kind object;
  #L49d950.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError`;
  #L49d954.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError;.<init>:([Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49d95a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d960.  v2:= temp @kind object;
  #L49d962.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatArrayEager`(`io.reactivex.rxjava3.core.MaybeSource`[] v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatArrayEager:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49d974.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d97a.  v1:= temp @kind object;
  #L49d97c.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49d982.  v0:= temp @kind object;
  #L49d984.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEager:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49d98a.  v1:= temp @kind object;
  #L49d98c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatArrayEagerDelayError`(`io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatArrayEagerDelayError:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49d9a0.  call temp:= `fromArray`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d9a6.  v2:= temp @kind object;
  #L49d9a8.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49d9ae.  v0:= temp @kind object;
  #L49d9b0.  v1:= 1I;
  #L49d9b2.  call temp:= `concatMapEagerDelayError`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEagerDelayError:(Lio/reactivex/rxjava3/functions/Function;Z)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49d9b8.  v2:= temp @kind object;
  #L49d9ba.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatDelayError:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49d9cc.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d9d2.  v1:= temp @kind object;
  #L49d9d4.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49d9da.  v0:= temp @kind object;
  #L49d9dc.  call temp:= `concatMapMaybeDelayError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49d9e2.  v1:= temp @kind object;
  #L49d9e4.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49d9f8.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49d9fe.  v1:= temp @kind object;
  #L49da00.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49da06.  v0:= temp @kind object;
  #L49da08.  call temp:= `concatMapMaybeDelayError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49da0e.  v1:= temp @kind object;
  #L49da10.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49da24.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49da2a.  v2:= temp @kind object;
  #L49da2c.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49da32.  v0:= temp @kind object;
  #L49da34.  v1:= 1I;
  #L49da36.  call temp:= `concatMapMaybeDelayError`(v2, v0, v1, v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/rxjava3/functions/Function;ZI)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49da3c.  v2:= temp @kind object;
  #L49da3e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEager`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEager:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49da50.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49da56.  v2:= temp @kind object;
  #L49da58.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49da5e.  v0:= temp @kind object;
  #L49da60.  v1:= 0I;
  #L49da62.  call temp:= `concatMapEagerDelayError`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEagerDelayError:(Lio/reactivex/rxjava3/functions/Function;Z)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49da68.  v2:= temp @kind object;
  #L49da6a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEager`(`java.lang.Iterable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEager:(Ljava/lang/Iterable;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49da7c.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49da82.  v3:= temp @kind object;
  #L49da84.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49da8a.  v0:= temp @kind object;
  #L49da8c.  v1:= 0I;
  #L49da8e.  v2:= 1I;
  #L49da90.  call temp:= `concatMapEagerDelayError`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEagerDelayError:(Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49da96.  v3:= temp @kind object;
  #L49da98.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEager`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEager:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49daac.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dab2.  v1:= temp @kind object;
  #L49dab4.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49daba.  v0:= temp @kind object;
  #L49dabc.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEager:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49dac2.  v1:= temp @kind object;
  #L49dac4.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEager`(`org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEager:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49dad8.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dade.  v2:= temp @kind object;
  #L49dae0.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49dae6.  v0:= temp @kind object;
  #L49dae8.  v1:= 1I;
  #L49daea.  call temp:= `concatMapEager`(v2, v0, v3, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEager:(Lio/reactivex/rxjava3/functions/Function;II)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49daf0.  v2:= temp @kind object;
  #L49daf2.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEagerDelayError`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEagerDelayError:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49db04.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49db0a.  v2:= temp @kind object;
  #L49db0c.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49db12.  v0:= temp @kind object;
  #L49db14.  v1:= 1I;
  #L49db16.  call temp:= `concatMapEagerDelayError`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEagerDelayError:(Lio/reactivex/rxjava3/functions/Function;Z)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49db1c.  v2:= temp @kind object;
  #L49db1e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEagerDelayError`(`java.lang.Iterable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEagerDelayError:(Ljava/lang/Iterable;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49db30.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49db36.  v2:= temp @kind object;
  #L49db38.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49db3e.  v0:= temp @kind object;
  #L49db40.  v1:= 1I;
  #L49db42.  call temp:= `concatMapEagerDelayError`(v2, v0, v1, v3, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEagerDelayError:(Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49db48.  v2:= temp @kind object;
  #L49db4a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEagerDelayError`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEagerDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49db5c.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49db62.  v2:= temp @kind object;
  #L49db64.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49db6a.  v0:= temp @kind object;
  #L49db6c.  v1:= 1I;
  #L49db6e.  call temp:= `concatMapEagerDelayError`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEagerDelayError:(Lio/reactivex/rxjava3/functions/Function;Z)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49db74.  v2:= temp @kind object;
  #L49db76.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatEagerDelayError`(`org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatEagerDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49db88.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49db8e.  v2:= temp @kind object;
  #L49db90.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49db96.  v0:= temp @kind object;
  #L49db98.  v1:= 1I;
  #L49db9a.  call temp:= `concatMapEagerDelayError`(v2, v0, v1, v3, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.concatMapEagerDelayError:(Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49dba0.  v2:= temp @kind object;
  #L49dba2.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `create`(`io.reactivex.rxjava3.core.MaybeOnSubscribe` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.create:(Lio/reactivex/rxjava3/core/MaybeOnSubscribe;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49e3d4.  v0:= "onSubscribe is null" @kind object;
  #L49e3d8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e3de.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate`;
  #L49e3e2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate;.<init>:(Lio/reactivex/rxjava3/core/MaybeOnSubscribe;)V` @kind direct;
  #L49e3e8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e3ee.  v1:= temp @kind object;
  #L49e3f0.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `defer`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.defer:(Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49e404.  v0:= "supplier is null" @kind object;
  #L49e408.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e40e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer`;
  #L49e412.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDefer;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L49e418.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e41e.  v1:= temp @kind object;
  #L49e420.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `empty`() @signature `Lio/reactivex/rxjava3/core/Maybe;.empty:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49e8d8.  v0:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty.INSTANCE` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty` @kind object;
  #L49e8dc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e8e2.  v0:= temp @kind object;
  #L49e8e4.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `error`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.error:(Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49e8f8.  v0:= "supplier is null" @kind object;
  #L49e8fc.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e902.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable`;
  #L49e906.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeErrorCallable;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L49e90c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e912.  v1:= temp @kind object;
  #L49e914.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.error:(Ljava/lang/Throwable;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49e928.  v0:= "throwable is null" @kind object;
  #L49e92c.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e932.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeError`;
  #L49e936.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeError;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L49e93c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e942.  v1:= temp @kind object;
  #L49e944.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromAction`(`io.reactivex.rxjava3.functions.Action` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromAction:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ea64.  v0:= "action is null" @kind object;
  #L49ea68.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ea6e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction`;
  #L49ea72.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromAction;.<init>:(Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49ea78.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ea7e.  v1:= temp @kind object;
  #L49ea80.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromCallable:(Ljava/util/concurrent/Callable;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ea94.  v0:= "callable is null" @kind object;
  #L49ea98.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ea9e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallable`;
  #L49eaa2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L49eaa8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49eaae.  v1:= temp @kind object;
  #L49eab0.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromCompletable`(`io.reactivex.rxjava3.core.CompletableSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromCompletable:(Lio/reactivex/rxjava3/core/CompletableSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49eac4.  v0:= "completableSource is null" @kind object;
  #L49eac8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eace.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable`;
  #L49ead2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromCompletable;.<init>:(Lio/reactivex/rxjava3/core/CompletableSource;)V` @kind direct;
  #L49ead8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49eade.  v1:= temp @kind object;
  #L49eae0.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromCompletionStage`(`java.util.concurrent.CompletionStage` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromCompletionStage:(Ljava/util/concurrent/CompletionStage;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49eaf4.  v0:= "stage is null" @kind object;
  #L49eaf8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eafe.  v0:= new `io.reactivex.rxjava3.internal.jdk8.MaybeFromCompletionStage`;
  #L49eb02.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFromCompletionStage;.<init>:(Ljava/util/concurrent/CompletionStage;)V` @kind direct;
  #L49eb08.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49eb0e.  v1:= temp @kind object;
  #L49eb10.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromFuture`(`java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49eb24.  v0:= "future is null" @kind object;
  #L49eb28.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eb2e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture`;
  #L49eb32.  v1:= 0L;
  #L49eb36.  v3:= 0I;
  #L49eb38.  call `<init>`(v0, v4, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L49eb3e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49eb44.  v4:= temp @kind object;
  #L49eb46.  return v4 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49eb58.  v0:= "future is null" @kind object;
  #L49eb5c.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eb62.  v0:= "unit is null" @kind object;
  #L49eb66.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eb6c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture`;
  #L49eb70.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L49eb76.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49eb7c.  v1:= temp @kind object;
  #L49eb7e.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromObservable`(`io.reactivex.rxjava3.core.ObservableSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromObservable:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49eb90.  v0:= "source is null" @kind object;
  #L49eb94.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eb9a.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe`;
  #L49eb9e.  v1:= 0L;
  #L49eba2.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableElementAtMaybe;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;J)V` @kind direct;
  #L49eba8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ebae.  v3:= temp @kind object;
  #L49ebb0.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromOptional`(`java.util.Optional` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromOptional:(Ljava/util/Optional;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ebc4.  v0:= "optional is null" @kind object;
  #L49ebc8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ebce.  v0:= `@@io.reactivex.rxjava3.core.a.a` @type ^`io.reactivex.rxjava3.core.a` @kind object;
  #L49ebd2.  call temp:= `map`(v1, v0) @signature `Ljava/util/Optional;.map:(Ljava/util/function/Function;)Ljava/util/Optional;` @kind virtual;
  #L49ebd8.  v1:= temp @kind object;
  #L49ebda.  v0:= `@@io.reactivex.rxjava3.core.g.a` @type ^`io.reactivex.rxjava3.core.g` @kind object;
  #L49ebde.  call temp:= `orElseGet`(v1, v0) @signature `Ljava/util/Optional;.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;` @kind virtual;
  #L49ebe4.  v1:= temp @kind object;
  #L49ebe6.  v1:= (`io.reactivex.rxjava3.core.Maybe`) v1 @kind object;
  #L49ebea.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromPublisher`(`org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49ebfc.  v0:= "source is null" @kind object;
  #L49ec00.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ec06.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybePublisher`;
  #L49ec0a.  v1:= 0L;
  #L49ec0e.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybePublisher;.<init>:(Lorg/reactivestreams/Publisher;J)V` @kind direct;
  #L49ec14.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ec1a.  v3:= temp @kind object;
  #L49ec1c.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromRunnable`(`java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ec30.  v0:= "run is null" @kind object;
  #L49ec34.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ec3a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable`;
  #L49ec3e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L49ec44.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ec4a.  v1:= temp @kind object;
  #L49ec4c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromSingle`(`io.reactivex.rxjava3.core.SingleSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromSingle:(Lio/reactivex/rxjava3/core/SingleSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ec60.  v0:= "single is null" @kind object;
  #L49ec64.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ec6a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle`;
  #L49ec6e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromSingle;.<init>:(Lio/reactivex/rxjava3/core/SingleSource;)V` @kind direct;
  #L49ec74.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ec7a.  v1:= temp @kind object;
  #L49ec7c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `fromSupplier`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.fromSupplier:(Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ec90.  v0:= "supplier is null" @kind object;
  #L49ec94.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ec9a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier`;
  #L49ec9e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromSupplier;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L49eca4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ecaa.  v1:= temp @kind object;
  #L49ecac.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `just`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.just:(Ljava/lang/Object;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49ece4.  v0:= "item is null" @kind object;
  #L49ece8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ecee.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeJust`;
  #L49ecf2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeJust;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L49ecf8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ecfe.  v1:= temp @kind object;
  #L49ed00.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `merge`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49dc68.  v0:= "source1 is null" @kind object;
  #L49dc6c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dc72.  v0:= "source2 is null" @kind object;
  #L49dc76.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dc7c.  v0:= 2I;
  #L49dc7e.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49dc82.  v1:= 0I;
  #L49dc84.  v0[v1]:= v2 @kind object;
  #L49dc88.  v2:= 1I;
  #L49dc8a.  v0[v2]:= v3 @kind object;
  #L49dc8e.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dc94.  v2:= temp @kind object;
  #L49dc96.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `merge`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49dca8.  v0:= "source1 is null" @kind object;
  #L49dcac.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dcb2.  v0:= "source2 is null" @kind object;
  #L49dcb6.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dcbc.  v0:= "source3 is null" @kind object;
  #L49dcc0.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dcc6.  v0:= 3I;
  #L49dcc8.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49dccc.  v1:= 0I;
  #L49dcce.  v0[v1]:= v2 @kind object;
  #L49dcd2.  v2:= 1I;
  #L49dcd4.  v0[v2]:= v3 @kind object;
  #L49dcd8.  v2:= 2I;
  #L49dcda.  v0[v2]:= v4 @kind object;
  #L49dcde.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dce4.  v2:= temp @kind object;
  #L49dce6.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `merge`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49dcf8.  v0:= "source1 is null" @kind object;
  #L49dcfc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dd02.  v0:= "source2 is null" @kind object;
  #L49dd06.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dd0c.  v0:= "source3 is null" @kind object;
  #L49dd10.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dd16.  v0:= "source4 is null" @kind object;
  #L49dd1a.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dd20.  v0:= 4I;
  #L49dd22.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49dd26.  v1:= 0I;
  #L49dd28.  v0[v1]:= v2 @kind object;
  #L49dd2c.  v2:= 1I;
  #L49dd2e.  v0[v2]:= v3 @kind object;
  #L49dd32.  v2:= 2I;
  #L49dd34.  v0[v2]:= v4 @kind object;
  #L49dd38.  v2:= 3I;
  #L49dd3a.  v0[v2]:= v5 @kind object;
  #L49dd3e.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dd44.  v2:= temp @kind object;
  #L49dd46.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `merge`(`java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49dd58.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dd5e.  v3:= temp @kind object;
  #L49dd60.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49dd66.  v0:= temp @kind object;
  #L49dd68.  v1:= 0I;
  #L49dd6a.  v2:= 2147483647I;
  #L49dd70.  call temp:= `flatMapMaybe`(v3, v0, v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.flatMapMaybe:(Lio/reactivex/rxjava3/functions/Function;ZI)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49dd76.  v3:= temp @kind object;
  #L49dd78.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49dd8c.  v0:= 2147483647I;
  #L49dd92.  call temp:= `merge`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dd98.  v1:= temp @kind object;
  #L49dd9a.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49ddac.  v0:= "sources is null" @kind object;
  #L49ddb0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ddb6.  v0:= "maxConcurrency" @kind object;
  #L49ddba.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L49ddc0.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybePublisher`;
  #L49ddc4.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49ddca.  v1:= temp @kind object;
  #L49ddcc.  v2:= 0I;
  #L49ddce.  call `<init>`(v0, v3, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;ZI)V` @kind direct;
  #L49ddd4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49ddda.  v3:= temp @kind object;
  #L49dddc.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `merge`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49eda4.  v0:= "source is null" @kind object;
  #L49eda8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49edae.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten`;
  #L49edb2.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49edb8.  v1:= temp @kind object;
  #L49edba.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49edc0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49edc6.  v2:= temp @kind object;
  #L49edc8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeArray`(`io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49ddf0.  v0:= "sources is null" @kind object;
  #L49ddf4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ddfa.  v0:= length @variable v2;
  #L49ddfc.  if v0 != 0 then goto L49de0a;
  #L49de00.  call temp:= `empty`() @signature `Lio/reactivex/rxjava3/core/Flowable;.empty:()Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49de06.  v2:= temp @kind object;
  #L49de08.  return v2 @kind object;
  #L49de0a.  v0:= length @variable v2;
  #L49de0c.  v1:= 1I;
  #L49de0e.  if v0 != v1 then goto L49de2c;
  #L49de12.  v0:= 0I;
  #L49de14.  v2:= v2[v0] @kind object;
  #L49de18.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable`;
  #L49de1c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49de22.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49de28.  v2:= temp @kind object;
  #L49de2a.  return v2 @kind object;
  #L49de2c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray`;
  #L49de30.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray;.<init>:([Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49de36.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49de3c.  v2:= temp @kind object;
  #L49de3e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeArrayDelayError`(`io.reactivex.rxjava3.core.MaybeSource`[] v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArrayDelayError:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49de50.  v0:= "sources is null" @kind object;
  #L49de54.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49de5a.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49de60.  v0:= temp @kind object;
  #L49de62.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49de68.  v1:= temp @kind object;
  #L49de6a.  v3:= length @variable v3;
  #L49de6c.  v2:= 1I;
  #L49de6e.  call temp:= `max`(v2, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L49de74.  v3:= temp;
  #L49de76.  call temp:= `flatMapMaybe`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.flatMapMaybe:(Lio/reactivex/rxjava3/functions/Function;ZI)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49de7c.  v3:= temp @kind object;
  #L49de7e.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeDelayError`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeDelayError:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49de90.  v0:= "source1 is null" @kind object;
  #L49de94.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49de9a.  v0:= "source2 is null" @kind object;
  #L49de9e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dea4.  v0:= 2I;
  #L49dea6.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49deaa.  v1:= 0I;
  #L49deac.  v0[v1]:= v2 @kind object;
  #L49deb0.  v2:= 1I;
  #L49deb2.  v0[v2]:= v3 @kind object;
  #L49deb6.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArrayDelayError:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49debc.  v2:= temp @kind object;
  #L49debe.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeDelayError`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeDelayError:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49ded0.  v0:= "source1 is null" @kind object;
  #L49ded4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49deda.  v0:= "source2 is null" @kind object;
  #L49dede.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dee4.  v0:= "source3 is null" @kind object;
  #L49dee8.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49deee.  v0:= 3I;
  #L49def0.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49def4.  v1:= 0I;
  #L49def6.  v0[v1]:= v2 @kind object;
  #L49defa.  v2:= 1I;
  #L49defc.  v0[v2]:= v3 @kind object;
  #L49df00.  v2:= 2I;
  #L49df02.  v0[v2]:= v4 @kind object;
  #L49df06.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArrayDelayError:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49df0c.  v2:= temp @kind object;
  #L49df0e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeDelayError`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeDelayError:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49df20.  v0:= "source1 is null" @kind object;
  #L49df24.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49df2a.  v0:= "source2 is null" @kind object;
  #L49df2e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49df34.  v0:= "source3 is null" @kind object;
  #L49df38.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49df3e.  v0:= "source4 is null" @kind object;
  #L49df42.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49df48.  v0:= 4I;
  #L49df4a.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49df4e.  v1:= 0I;
  #L49df50.  v0[v1]:= v2 @kind object;
  #L49df54.  v2:= 1I;
  #L49df56.  v0[v2]:= v3 @kind object;
  #L49df5a.  v2:= 2I;
  #L49df5c.  v0[v2]:= v4 @kind object;
  #L49df60.  v2:= 3I;
  #L49df62.  v0[v2]:= v5 @kind object;
  #L49df66.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeArrayDelayError:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49df6c.  v2:= temp @kind object;
  #L49df6e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeDelayError`(`java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeDelayError:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49df80.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49df86.  v3:= temp @kind object;
  #L49df88.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49df8e.  v0:= temp @kind object;
  #L49df90.  v1:= 1I;
  #L49df92.  v2:= 2147483647I;
  #L49df98.  call temp:= `flatMapMaybe`(v3, v0, v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.flatMapMaybe:(Lio/reactivex/rxjava3/functions/Function;ZI)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49df9e.  v3:= temp @kind object;
  #L49dfa0.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49dfb4.  v0:= 2147483647I;
  #L49dfba.  call temp:= `mergeDelayError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dfc0.  v1:= temp @kind object;
  #L49dfc2.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49dfd4.  v0:= "sources is null" @kind object;
  #L49dfd8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dfde.  v0:= "maxConcurrency" @kind object;
  #L49dfe2.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L49dfe8.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybePublisher`;
  #L49dfec.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49dff2.  v1:= temp @kind object;
  #L49dff4.  v2:= 1I;
  #L49dff6.  call `<init>`(v0, v3, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;ZI)V` @kind direct;
  #L49dffc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e002.  v3:= temp @kind object;
  #L49e004.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `never`() @signature `Lio/reactivex/rxjava3/core/Maybe;.never:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49eddc.  v0:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeNever.INSTANCE` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeNever` @kind object;
  #L49ede0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ede6.  v0:= temp @kind object;
  #L49ede8.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `sequenceEqual`(`io.reactivex.rxjava3.core.MaybeSource` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.sequenceEqual:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49fcb8.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/rxjava3/functions/BiPredicate;` @kind static;
  #L49fcbe.  v0:= temp @kind object;
  #L49fcc0.  call temp:= `sequenceEqual`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.sequenceEqual:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiPredicate;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fcc6.  v1:= temp @kind object;
  #L49fcc8.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `sequenceEqual`(`io.reactivex.rxjava3.core.MaybeSource` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.sequenceEqual:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiPredicate;)Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49fcdc.  v0:= "source1 is null" @kind object;
  #L49fce0.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fce6.  v0:= "source2 is null" @kind object;
  #L49fcea.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fcf0.  v0:= "isEqual is null" @kind object;
  #L49fcf4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fcfa.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle`;
  #L49fcfe.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @kind direct;
  #L49fd04.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fd0a.  v1:= temp @kind object;
  #L49fd0c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `switchOnNext`(`org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.switchOnNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49e1ac.  v0:= "sources is null" @kind object;
  #L49e1b0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e1b6.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybePublisher`;
  #L49e1ba.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49e1c0.  v1:= temp @kind object;
  #L49e1c2.  v2:= 0I;
  #L49e1c4.  call `<init>`(v0, v3, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;Z)V` @kind direct;
  #L49e1ca.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e1d0.  v3:= temp @kind object;
  #L49e1d2.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `switchOnNextDelayError`(`org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49e1e4.  v0:= "sources is null" @kind object;
  #L49e1e8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e1ee.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybePublisher`;
  #L49e1f2.  call temp:= `identity`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.identity:()Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49e1f8.  v1:= temp @kind object;
  #L49e1fa.  v2:= 1I;
  #L49e1fc.  call `<init>`(v0, v3, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;Z)V` @kind direct;
  #L49e202.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e208.  v3:= temp @kind object;
  #L49e20a.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49f3a0.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49f3a6.  v0:= temp @kind object;
  #L49f3a8.  call temp:= `timer`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f3ae.  v1:= temp @kind object;
  #L49f3b0.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timer`(`long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler` v6 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L49f3c4.  v0:= "unit is null" @kind object;
  #L49f3c8.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f3ce.  v0:= "scheduler is null" @kind object;
  #L49f3d2.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f3d8.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer`;
  #L49f3dc.  v1:= 0L;
  #L49f3e0.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L49f3e6.  v3:= temp @kind wide;
  #L49f3e8.  call `<init>`(v0, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimer;.<init>:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L49f3ee.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f3f4.  v3:= temp @kind object;
  #L49f3f6.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `unsafeCreate`(`io.reactivex.rxjava3.core.MaybeSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.unsafeCreate:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49f4b0.  v0:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.core.Maybe` @kind boolean;
  #L49f4b4.  if v0 != 0 then goto L49f4d6;
  #L49f4b8.  v0:= "onSubscribe is null" @kind object;
  #L49f4bc.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f4c2.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsafeCreate`;
  #L49f4c6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f4cc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f4d2.  v1:= temp @kind object;
  #L49f4d4.  return v1 @kind object;
  #L49f4d6.  v1:= new `java.lang.IllegalArgumentException`;
  #L49f4da.  v0:= "unsafeCreate(Maybe) should be upgraded" @kind object;
  #L49f4de.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49f4e4.  throw v1;
}
procedure `io.reactivex.rxjava3.core.Maybe` `using`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.using:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49f528.  v0:= 1I;
  #L49f52a.  call temp:= `using`(v1, v2, v3, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.using:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Consumer;Z)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f530.  v1:= temp @kind object;
  #L49f532.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `using`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.using:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Consumer;Z)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49f544.  v0:= "resourceSupplier is null" @kind object;
  #L49f548.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f54e.  v0:= "sourceSupplier is null" @kind object;
  #L49f552.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f558.  v0:= "resourceCleanup is null" @kind object;
  #L49f55c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f562.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing`;
  #L49f566.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Consumer;Z)V` @kind direct;
  #L49f56c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f572.  v1:= temp @kind object;
  #L49f574.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `wrap`(`io.reactivex.rxjava3.core.MaybeSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.wrap:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49f588.  v0:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.core.Maybe` @kind boolean;
  #L49f58c.  if v0 == 0 then goto L49f59e;
  #L49f590.  v1:= (`io.reactivex.rxjava3.core.Maybe`) v1 @kind object;
  #L49f594.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f59a.  v1:= temp @kind object;
  #L49f59c.  return v1 @kind object;
  #L49f59e.  v0:= "source is null" @kind object;
  #L49f5a2.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f5a8.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsafeCreate`;
  #L49f5ac.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f5b2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f5b8.  v1:= temp @kind object;
  #L49f5ba.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v6 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v7 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v8 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v9 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v10 @kind object, `io.reactivex.rxjava3.functions.Function9` v11 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function9;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f5cc.  v0:= "source1 is null" @kind object;
  #L49f5d0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f5d6.  v0:= "source2 is null" @kind object;
  #L49f5da.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f5e0.  v0:= "source3 is null" @kind object;
  #L49f5e4.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f5ea.  v0:= "source4 is null" @kind object;
  #L49f5ee.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f5f4.  v0:= "source5 is null" @kind object;
  #L49f5f8.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f5fe.  v0:= "source6 is null" @kind object;
  #L49f602.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f608.  v0:= "source7 is null" @kind object;
  #L49f60c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f612.  v0:= "source8 is null" @kind object;
  #L49f616.  call temp:= `requireNonNull`(v9, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f61c.  v0:= "source9 is null" @kind object;
  #L49f620.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f626.  v0:= "zipper is null" @kind object;
  #L49f62a.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f630.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/Function9;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49f636.  v11:= temp @kind object;
  #L49f638.  v0:= 9I;
  #L49f63c.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49f640.  v1:= 0I;
  #L49f642.  v0[v1]:= v2 @kind object;
  #L49f646.  v2:= 1I;
  #L49f648.  v0[v2]:= v3 @kind object;
  #L49f64c.  v2:= 2I;
  #L49f64e.  v0[v2]:= v4 @kind object;
  #L49f652.  v2:= 3I;
  #L49f654.  v0[v2]:= v5 @kind object;
  #L49f658.  v2:= 4I;
  #L49f65a.  v0[v2]:= v6 @kind object;
  #L49f65e.  v2:= 5I;
  #L49f660.  v0[v2]:= v7 @kind object;
  #L49f664.  v2:= 6I;
  #L49f666.  v0[v2]:= v8 @kind object;
  #L49f66a.  v2:= 7I;
  #L49f66c.  v0[v2]:= v9 @kind object;
  #L49f670.  v2:= 8I;
  #L49f674.  v0[v2]:= v10 @kind object;
  #L49f678.  call temp:= `zipArray`(v11, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f67e.  v2:= temp @kind object;
  #L49f680.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v6 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v7 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v8 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v9 @kind object, `io.reactivex.rxjava3.functions.Function8` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function8;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f694.  v0:= "source1 is null" @kind object;
  #L49f698.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f69e.  v0:= "source2 is null" @kind object;
  #L49f6a2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6a8.  v0:= "source3 is null" @kind object;
  #L49f6ac.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6b2.  v0:= "source4 is null" @kind object;
  #L49f6b6.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6bc.  v0:= "source5 is null" @kind object;
  #L49f6c0.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6c6.  v0:= "source6 is null" @kind object;
  #L49f6ca.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6d0.  v0:= "source7 is null" @kind object;
  #L49f6d4.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6da.  v0:= "source8 is null" @kind object;
  #L49f6de.  call temp:= `requireNonNull`(v9, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6e4.  v0:= "zipper is null" @kind object;
  #L49f6e8.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f6ee.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/Function8;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49f6f4.  v10:= temp @kind object;
  #L49f6f6.  v0:= 8I;
  #L49f6fa.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49f6fe.  v1:= 0I;
  #L49f700.  v0[v1]:= v2 @kind object;
  #L49f704.  v2:= 1I;
  #L49f706.  v0[v2]:= v3 @kind object;
  #L49f70a.  v2:= 2I;
  #L49f70c.  v0[v2]:= v4 @kind object;
  #L49f710.  v2:= 3I;
  #L49f712.  v0[v2]:= v5 @kind object;
  #L49f716.  v2:= 4I;
  #L49f718.  v0[v2]:= v6 @kind object;
  #L49f71c.  v2:= 5I;
  #L49f71e.  v0[v2]:= v7 @kind object;
  #L49f722.  v2:= 6I;
  #L49f724.  v0[v2]:= v8 @kind object;
  #L49f728.  v2:= 7I;
  #L49f72a.  v0[v2]:= v9 @kind object;
  #L49f72e.  call temp:= `zipArray`(v10, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f734.  v2:= temp @kind object;
  #L49f736.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v6 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v7 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v8 @kind object, `io.reactivex.rxjava3.functions.Function7` v9 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function7;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f748.  v0:= "source1 is null" @kind object;
  #L49f74c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f752.  v0:= "source2 is null" @kind object;
  #L49f756.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f75c.  v0:= "source3 is null" @kind object;
  #L49f760.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f766.  v0:= "source4 is null" @kind object;
  #L49f76a.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f770.  v0:= "source5 is null" @kind object;
  #L49f774.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f77a.  v0:= "source6 is null" @kind object;
  #L49f77e.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f784.  v0:= "source7 is null" @kind object;
  #L49f788.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f78e.  v0:= "zipper is null" @kind object;
  #L49f792.  call temp:= `requireNonNull`(v9, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f798.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/Function7;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49f79e.  v9:= temp @kind object;
  #L49f7a0.  v0:= 7I;
  #L49f7a2.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49f7a6.  v1:= 0I;
  #L49f7a8.  v0[v1]:= v2 @kind object;
  #L49f7ac.  v2:= 1I;
  #L49f7ae.  v0[v2]:= v3 @kind object;
  #L49f7b2.  v2:= 2I;
  #L49f7b4.  v0[v2]:= v4 @kind object;
  #L49f7b8.  v2:= 3I;
  #L49f7ba.  v0[v2]:= v5 @kind object;
  #L49f7be.  v2:= 4I;
  #L49f7c0.  v0[v2]:= v6 @kind object;
  #L49f7c4.  v2:= 5I;
  #L49f7c6.  v0[v2]:= v7 @kind object;
  #L49f7ca.  v2:= 6I;
  #L49f7cc.  v0[v2]:= v8 @kind object;
  #L49f7d0.  call temp:= `zipArray`(v9, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f7d6.  v2:= temp @kind object;
  #L49f7d8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v6 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v7 @kind object, `io.reactivex.rxjava3.functions.Function6` v8 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function6;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f7ec.  v0:= "source1 is null" @kind object;
  #L49f7f0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f7f6.  v0:= "source2 is null" @kind object;
  #L49f7fa.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f800.  v0:= "source3 is null" @kind object;
  #L49f804.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f80a.  v0:= "source4 is null" @kind object;
  #L49f80e.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f814.  v0:= "source5 is null" @kind object;
  #L49f818.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f81e.  v0:= "source6 is null" @kind object;
  #L49f822.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f828.  v0:= "zipper is null" @kind object;
  #L49f82c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f832.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/Function6;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49f838.  v8:= temp @kind object;
  #L49f83a.  v0:= 6I;
  #L49f83c.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49f840.  v1:= 0I;
  #L49f842.  v0[v1]:= v2 @kind object;
  #L49f846.  v2:= 1I;
  #L49f848.  v0[v2]:= v3 @kind object;
  #L49f84c.  v2:= 2I;
  #L49f84e.  v0[v2]:= v4 @kind object;
  #L49f852.  v2:= 3I;
  #L49f854.  v0[v2]:= v5 @kind object;
  #L49f858.  v2:= 4I;
  #L49f85a.  v0[v2]:= v6 @kind object;
  #L49f85e.  v2:= 5I;
  #L49f860.  v0[v2]:= v7 @kind object;
  #L49f864.  call temp:= `zipArray`(v8, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f86a.  v2:= temp @kind object;
  #L49f86c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v6 @kind object, `io.reactivex.rxjava3.functions.Function5` v7 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function5;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f880.  v0:= "source1 is null" @kind object;
  #L49f884.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f88a.  v0:= "source2 is null" @kind object;
  #L49f88e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f894.  v0:= "source3 is null" @kind object;
  #L49f898.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f89e.  v0:= "source4 is null" @kind object;
  #L49f8a2.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f8a8.  v0:= "source5 is null" @kind object;
  #L49f8ac.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f8b2.  v0:= "zipper is null" @kind object;
  #L49f8b6.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f8bc.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/Function5;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49f8c2.  v7:= temp @kind object;
  #L49f8c4.  v0:= 5I;
  #L49f8c6.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49f8ca.  v1:= 0I;
  #L49f8cc.  v0[v1]:= v2 @kind object;
  #L49f8d0.  v2:= 1I;
  #L49f8d2.  v0[v2]:= v3 @kind object;
  #L49f8d6.  v2:= 2I;
  #L49f8d8.  v0[v2]:= v4 @kind object;
  #L49f8dc.  v2:= 3I;
  #L49f8de.  v0[v2]:= v5 @kind object;
  #L49f8e2.  v2:= 4I;
  #L49f8e4.  v0[v2]:= v6 @kind object;
  #L49f8e8.  call temp:= `zipArray`(v7, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f8ee.  v2:= temp @kind object;
  #L49f8f0.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v5 @kind object, `io.reactivex.rxjava3.functions.Function4` v6 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function4;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f904.  v0:= "source1 is null" @kind object;
  #L49f908.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f90e.  v0:= "source2 is null" @kind object;
  #L49f912.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f918.  v0:= "source3 is null" @kind object;
  #L49f91c.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f922.  v0:= "source4 is null" @kind object;
  #L49f926.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f92c.  v0:= "zipper is null" @kind object;
  #L49f930.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f936.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/Function4;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49f93c.  v6:= temp @kind object;
  #L49f93e.  v0:= 4I;
  #L49f940.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49f944.  v1:= 0I;
  #L49f946.  v0[v1]:= v2 @kind object;
  #L49f94a.  v2:= 1I;
  #L49f94c.  v0[v2]:= v3 @kind object;
  #L49f950.  v2:= 2I;
  #L49f952.  v0[v2]:= v4 @kind object;
  #L49f956.  v2:= 3I;
  #L49f958.  v0[v2]:= v5 @kind object;
  #L49f95c.  call temp:= `zipArray`(v6, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f962.  v2:= temp @kind object;
  #L49f964.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v4 @kind object, `io.reactivex.rxjava3.functions.Function3` v5 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function3;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f978.  v0:= "source1 is null" @kind object;
  #L49f97c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f982.  v0:= "source2 is null" @kind object;
  #L49f986.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f98c.  v0:= "source3 is null" @kind object;
  #L49f990.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f996.  v0:= "zipper is null" @kind object;
  #L49f99a.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f9a0.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/Function3;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49f9a6.  v5:= temp @kind object;
  #L49f9a8.  v0:= 3I;
  #L49f9aa.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49f9ae.  v1:= 0I;
  #L49f9b0.  v0[v1]:= v2 @kind object;
  #L49f9b4.  v2:= 1I;
  #L49f9b6.  v0[v2]:= v3 @kind object;
  #L49f9ba.  v2:= 2I;
  #L49f9bc.  v0[v2]:= v4 @kind object;
  #L49f9c0.  call temp:= `zipArray`(v5, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f9c6.  v2:= temp @kind object;
  #L49f9c8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49f9dc.  v0:= "source1 is null" @kind object;
  #L49f9e0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f9e6.  v0:= "source2 is null" @kind object;
  #L49f9ea.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f9f0.  v0:= "zipper is null" @kind object;
  #L49f9f4.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f9fa.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.toFunction:(Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49fa00.  v4:= temp @kind object;
  #L49fa02.  v0:= 2I;
  #L49fa04.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49fa08.  v1:= 0I;
  #L49fa0a.  v0[v1]:= v2 @kind object;
  #L49fa0e.  v2:= 1I;
  #L49fa10.  v0[v2]:= v3 @kind object;
  #L49fa14.  call temp:= `zipArray`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49fa1a.  v2:= temp @kind object;
  #L49fa1c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zip`(`java.lang.Iterable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Ljava/lang/Iterable;Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49fa30.  v0:= "zipper is null" @kind object;
  #L49fa34.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fa3a.  v0:= "sources is null" @kind object;
  #L49fa3e.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fa44.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable`;
  #L49fa48.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49fa4e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49fa54.  v1:= temp @kind object;
  #L49fa56.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zipArray`(`io.reactivex.rxjava3.functions.Function` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipArray:(Lio/reactivex/rxjava3/functions/Function;[Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49fa68.  v0:= "sources is null" @kind object;
  #L49fa6c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fa72.  v0:= length @variable v2;
  #L49fa74.  if v0 != 0 then goto L49fa82;
  #L49fa78.  call temp:= `empty`() @signature `Lio/reactivex/rxjava3/core/Maybe;.empty:()Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49fa7e.  v1:= temp @kind object;
  #L49fa80.  return v1 @kind object;
  #L49fa82.  v0:= "zipper is null" @kind object;
  #L49fa86.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fa8c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray`;
  #L49fa90.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray;.<init>:([Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49fa96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49fa9c.  v1:= temp @kind object;
  #L49fa9e.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `ambWith`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.ambWith:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49e2e0.  v0:= "other is null" @kind object;
  #L49e2e4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e2ea.  v0:= 2I;
  #L49e2ec.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L49e2f0.  v1:= 0I;
  #L49e2f2.  v0[v1]:= v2 @kind object;
  #L49e2f6.  v1:= 1I;
  #L49e2f8.  v0[v1]:= v3 @kind object;
  #L49e2fc.  call temp:= `ambArray`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.ambArray:([Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e302.  v3:= temp @kind object;
  #L49e304.  return v3 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fe80.  v0:= new `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver`;
  #L49fe84.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L49fe8a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L49fe90.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L49fe96.  v0:= temp @kind object;
  #L49fe98.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49feac.  v0:= "defaultValue is null" @kind object;
  #L49feb0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49feb6.  v0:= new `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver`;
  #L49feba.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L49fec0.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L49fec6.  call temp:= `blockingGet`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49fecc.  v2:= temp @kind object;
  #L49fece.  return v2 @kind object;
}
procedure `void` `blockingSubscribe`(`io.reactivex.rxjava3.core.Maybe` v3 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L49ffa4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49ffaa.  v0:= temp @kind object;
  #L49ffac.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.ERROR_CONSUMER` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L49ffb0.  v2:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49ffb4.  call `blockingSubscribe`(v3, v0, v1, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind virtual;
  #L49ffba.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ffcc.  v0:= "observer is null" @kind object;
  #L49ffd0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ffd6.  v0:= new `io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver`;
  #L49ffda.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingDisposableMultiObserver;.<init>:()V` @kind direct;
  #L49ffe0.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L49ffe6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L49ffec.  call `blockingConsume`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingDisposableMultiObserver;.blockingConsume:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L49fff2.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4a0004.  v0:= `@@io.reactivex.rxjava3.internal.functions.Functions.ERROR_CONSUMER` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4a0008.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4a000c.  call `blockingSubscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind virtual;
  #L4a0012.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4a0024.  v0:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4a0028.  call `blockingSubscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind virtual;
  #L4a002e.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Action` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.blockingSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4a0040.  v0:= "onSuccess is null" @kind object;
  #L4a0044.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a004a.  v0:= "onError is null" @kind object;
  #L4a004e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a0054.  v0:= "onComplete is null" @kind object;
  #L4a0058.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a005e.  v0:= new `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver`;
  #L4a0062.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L4a0068.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L4a006e.  call `blockingConsume`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.blockingConsume:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind virtual;
  #L4a0074.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Maybe` `cache`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.cache:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e318.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache`;
  #L49e31c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49e322.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e328.  v0:= temp @kind object;
  #L49e32a.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `cast`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e33c.  v0:= "clazz is null" @kind object;
  #L49e340.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e346.  call temp:= `castFunction`(v2) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.castFunction:(Ljava/lang/Class;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49e34c.  v2:= temp @kind object;
  #L49e34e.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.map:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e354.  v2:= temp @kind object;
  #L49e356.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `compose`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeTransformer` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.compose:(Lio/reactivex/rxjava3/core/MaybeTransformer;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e368.  v0:= "transformer is null" @kind object;
  #L49e36c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e372.  v2:= temp @kind object;
  #L49e374.  v2:= (`io.reactivex.rxjava3.core.MaybeTransformer`) v2 @kind object;
  #L49e378.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeTransformer;.apply:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/MaybeSource;` @kind interface;
  #L49e37e.  v2:= temp @kind object;
  #L49e380.  call temp:= `wrap`(v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.wrap:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e386.  v2:= temp @kind object;
  #L49e388.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `concatMap`(`io.reactivex.rxjava3.core.Maybe` v0 @kind this, `io.reactivex.rxjava3.functions.Function` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatMap:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49e39c.  call temp:= `flatMap`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMap:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e3a2.  v1:= temp @kind object;
  #L49e3a4.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Completable` `concatMapCompletable`(`io.reactivex.rxjava3.core.Maybe` v0 @kind this, `io.reactivex.rxjava3.functions.Function` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatMapCompletable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49d6c4.  call temp:= `flatMapCompletable`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMapCompletable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Completable;` @kind virtual;
  #L49d6ca.  v1:= temp @kind object;
  #L49d6cc.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `concatMapSingle`(`io.reactivex.rxjava3.core.Maybe` v0 @kind this, `io.reactivex.rxjava3.functions.Function` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatMapSingle:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49e3b8.  call temp:= `flatMapSingle`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMapSingle:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e3be.  v1:= temp @kind object;
  #L49e3c0.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `concatWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.concatWith:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49dbb4.  v0:= "other is null" @kind object;
  #L49dbb8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dbbe.  call temp:= `concat`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.concat:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dbc4.  v2:= temp @kind object;
  #L49dbc6.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `contains`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.contains:(Ljava/lang/Object;)Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fbec.  v0:= "item is null" @kind object;
  #L49fbf0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fbf6.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeContains`;
  #L49fbfa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeContains;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L49fc00.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fc06.  v2:= temp @kind object;
  #L49fc08.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `count`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.count:()Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fc1c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCount`;
  #L49fc20.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCount;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49fc26.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fc2c.  v0:= temp @kind object;
  #L49fc2e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `defaultIfEmpty`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.defaultIfEmpty:(Ljava/lang/Object;)Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fc40.  v0:= "defaultItem is null" @kind object;
  #L49fc44.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fc4a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle`;
  #L49fc4e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L49fc54.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fc5a.  v2:= temp @kind object;
  #L49fc5c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delay`(`io.reactivex.rxjava3.core.Maybe` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49e434.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49e43a.  v4:= temp @kind object;
  #L49e43c.  v5:= 0I;
  #L49e43e.  v0:= v6 @kind object;
  #L49e440.  v1:= v7 @kind wide;
  #L49e442.  v3:= v9 @kind object;
  #L49e444.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e44a.  v7:= temp @kind object;
  #L49e44c.  return v7 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delay`(`io.reactivex.rxjava3.core.Maybe` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.rxjava3.core.Scheduler` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49e48c.  v5:= 0I;
  #L49e48e.  v0:= v6 @kind object;
  #L49e490.  v1:= v7 @kind wide;
  #L49e492.  v3:= v9 @kind object;
  #L49e494.  v4:= v10 @kind object;
  #L49e496.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e49c.  v7:= temp @kind object;
  #L49e49e.  return v7 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delay`(`io.reactivex.rxjava3.core.Maybe` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.rxjava3.core.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L49e4b0.  v0:= "unit is null" @kind object;
  #L49e4b4.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e4ba.  v0:= "scheduler is null" @kind object;
  #L49e4be.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e4c4.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay`;
  #L49e4c8.  v1:= 0L;
  #L49e4cc.  call temp:= `max`(v1, v9) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L49e4d2.  v3:= temp @kind wide;
  #L49e4d4.  v1:= v0 @kind object;
  #L49e4d6.  v2:= v8 @kind object;
  #L49e4d8.  v5:= v11 @kind object;
  #L49e4da.  v6:= v12 @kind object;
  #L49e4dc.  v7:= v13;
  #L49e4de.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelay;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L49e4e4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e4ea.  v9:= temp @kind object;
  #L49e4ec.  return v9 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delay`(`io.reactivex.rxjava3.core.Maybe` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49e460.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49e466.  v4:= temp @kind object;
  #L49e468.  v0:= v6 @kind object;
  #L49e46a.  v1:= v7 @kind wide;
  #L49e46c.  v3:= v9 @kind object;
  #L49e46e.  v5:= v10;
  #L49e470.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e476.  v7:= temp @kind object;
  #L49e478.  return v7 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delay`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.delay:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e500.  v0:= "delayIndicator is null" @kind object;
  #L49e504.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e50a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher`;
  #L49e50e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelayOtherPublisher;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L49e514.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e51a.  v2:= temp @kind object;
  #L49e51c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delaySubscription`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e530.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49e536.  v0:= temp @kind object;
  #L49e538.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e53e.  v2:= temp @kind object;
  #L49e540.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delaySubscription`(`io.reactivex.rxjava3.core.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.rxjava3.core.Scheduler` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49e554.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/rxjava3/core/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e55a.  v1:= temp @kind object;
  #L49e55c.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49e562.  v1:= temp @kind object;
  #L49e564.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `delaySubscription`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e578.  v0:= "subscriptionIndicator is null" @kind object;
  #L49e57c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e582.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher`;
  #L49e586.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L49e58c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e592.  v2:= temp @kind object;
  #L49e594.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `dematerialize`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.dematerialize:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e5a8.  v0:= "selector is null" @kind object;
  #L49e5ac.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e5b2.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize`;
  #L49e5b6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDematerialize;.<init>:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49e5bc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e5c2.  v2:= temp @kind object;
  #L49e5c4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doAfterSuccess`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doAfterSuccess:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e5d8.  v0:= "onAfterSuccess is null" @kind object;
  #L49e5dc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e5e2.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess`;
  #L49e5e6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDoAfterSuccess;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L49e5ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e5f2.  v2:= temp @kind object;
  #L49e5f4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doAfterTerminate`(`io.reactivex.rxjava3.core.Maybe` v9 @kind this, `io.reactivex.rxjava3.functions.Action` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doAfterTerminate:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e608.  v8:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybePeek`;
  #L49e60c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e612.  v2:= temp @kind object;
  #L49e614.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e61a.  v3:= temp @kind object;
  #L49e61c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e622.  v4:= temp @kind object;
  #L49e624.  v5:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49e628.  v0:= "onAfterTerminate is null" @kind object;
  #L49e62c.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e632.  v10:= temp @kind object;
  #L49e634.  v6:= v10 @kind object;
  #L49e636.  v6:= (`io.reactivex.rxjava3.functions.Action`) v6 @kind object;
  #L49e63a.  v7:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49e63e.  v0:= v8 @kind object;
  #L49e640.  v1:= v9 @kind object;
  #L49e642.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e648.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e64e.  v10:= temp @kind object;
  #L49e650.  return v10 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doFinally`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Action` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doFinally:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e664.  v0:= "onFinally is null" @kind object;
  #L49e668.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e66e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally`;
  #L49e672.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDoFinally;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e678.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e67e.  v2:= temp @kind object;
  #L49e680.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnComplete`(`io.reactivex.rxjava3.core.Maybe` v9 @kind this, `io.reactivex.rxjava3.functions.Action` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnComplete:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e694.  v8:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybePeek`;
  #L49e698.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e69e.  v2:= temp @kind object;
  #L49e6a0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e6a6.  v3:= temp @kind object;
  #L49e6a8.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e6ae.  v4:= temp @kind object;
  #L49e6b0.  v0:= "onComplete is null" @kind object;
  #L49e6b4.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e6ba.  v10:= temp @kind object;
  #L49e6bc.  v5:= v10 @kind object;
  #L49e6be.  v5:= (`io.reactivex.rxjava3.functions.Action`) v5 @kind object;
  #L49e6c2.  v7:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49e6c6.  v0:= v8 @kind object;
  #L49e6c8.  v1:= v9 @kind object;
  #L49e6ca.  v6:= v7 @kind object;
  #L49e6cc.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e6d2.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e6d8.  v10:= temp @kind object;
  #L49e6da.  return v10 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnDispose`(`io.reactivex.rxjava3.core.Maybe` v9 @kind this, `io.reactivex.rxjava3.functions.Action` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnDispose:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e6ec.  v8:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybePeek`;
  #L49e6f0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e6f6.  v2:= temp @kind object;
  #L49e6f8.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e6fe.  v3:= temp @kind object;
  #L49e700.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e706.  v4:= temp @kind object;
  #L49e708.  v6:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49e70c.  v0:= "onDispose is null" @kind object;
  #L49e710.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e716.  v10:= temp @kind object;
  #L49e718.  v7:= v10 @kind object;
  #L49e71a.  v7:= (`io.reactivex.rxjava3.functions.Action`) v7 @kind object;
  #L49e71e.  v0:= v8 @kind object;
  #L49e720.  v1:= v9 @kind object;
  #L49e722.  v5:= v6 @kind object;
  #L49e724.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e72a.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e730.  v10:= temp @kind object;
  #L49e732.  return v10 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnError`(`io.reactivex.rxjava3.core.Maybe` v9 @kind this, `io.reactivex.rxjava3.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnError:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e744.  v8:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybePeek`;
  #L49e748.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e74e.  v2:= temp @kind object;
  #L49e750.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e756.  v3:= temp @kind object;
  #L49e758.  v0:= "onError is null" @kind object;
  #L49e75c.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e762.  v10:= temp @kind object;
  #L49e764.  v4:= v10 @kind object;
  #L49e766.  v4:= (`io.reactivex.rxjava3.functions.Consumer`) v4 @kind object;
  #L49e76a.  v7:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49e76e.  v0:= v8 @kind object;
  #L49e770.  v1:= v9 @kind object;
  #L49e772.  v5:= v7 @kind object;
  #L49e774.  v6:= v7 @kind object;
  #L49e776.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e77c.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e782.  v10:= temp @kind object;
  #L49e784.  return v10 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnEvent`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnEvent:(Lio/reactivex/rxjava3/functions/BiConsumer;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e798.  v0:= "onEvent is null" @kind object;
  #L49e79c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e7a2.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent`;
  #L49e7a6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDoOnEvent;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiConsumer;)V` @kind direct;
  #L49e7ac.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e7b2.  v2:= temp @kind object;
  #L49e7b4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnLifecycle`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnLifecycle:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e7c8.  v0:= "onSubscribe is null" @kind object;
  #L49e7cc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e7d2.  v0:= "onDispose is null" @kind object;
  #L49e7d6.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e7dc.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycle`;
  #L49e7e0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDoOnLifecycle;.<init>:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e7e6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e7ec.  v2:= temp @kind object;
  #L49e7ee.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnSubscribe`(`io.reactivex.rxjava3.core.Maybe` v9 @kind this, `io.reactivex.rxjava3.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e800.  v8:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybePeek`;
  #L49e804.  v0:= "onSubscribe is null" @kind object;
  #L49e808.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e80e.  v10:= temp @kind object;
  #L49e810.  v2:= v10 @kind object;
  #L49e812.  v2:= (`io.reactivex.rxjava3.functions.Consumer`) v2 @kind object;
  #L49e816.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e81c.  v3:= temp @kind object;
  #L49e81e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e824.  v4:= temp @kind object;
  #L49e826.  v7:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49e82a.  v0:= v8 @kind object;
  #L49e82c.  v1:= v9 @kind object;
  #L49e82e.  v5:= v7 @kind object;
  #L49e830.  v6:= v7 @kind object;
  #L49e832.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e838.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e83e.  v10:= temp @kind object;
  #L49e840.  return v10 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnSuccess`(`io.reactivex.rxjava3.core.Maybe` v9 @kind this, `io.reactivex.rxjava3.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnSuccess:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49e854.  v8:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybePeek`;
  #L49e858.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e85e.  v2:= temp @kind object;
  #L49e860.  v0:= "onSuccess is null" @kind object;
  #L49e864.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e86a.  v10:= temp @kind object;
  #L49e86c.  v3:= v10 @kind object;
  #L49e86e.  v3:= (`io.reactivex.rxjava3.functions.Consumer`) v3 @kind object;
  #L49e872.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49e878.  v4:= temp @kind object;
  #L49e87a.  v7:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49e87e.  v0:= v8 @kind object;
  #L49e880.  v1:= v9 @kind object;
  #L49e882.  v5:= v7 @kind object;
  #L49e884.  v6:= v7 @kind object;
  #L49e886.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e88c.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e892.  v10:= temp @kind object;
  #L49e894.  return v10 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `doOnTerminate`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Action` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.doOnTerminate:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e8a8.  v0:= "onTerminate is null" @kind object;
  #L49e8ac.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e8b2.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate`;
  #L49e8b6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDoOnTerminate;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49e8bc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e8c2.  v2:= temp @kind object;
  #L49e8c4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `filter`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.filter:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e958.  v0:= "predicate is null" @kind object;
  #L49e95c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e962.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter`;
  #L49e966.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFilter;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L49e96c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e972.  v2:= temp @kind object;
  #L49e974.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `flatMap`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMap:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e988.  v0:= "mapper is null" @kind object;
  #L49e98c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e992.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten`;
  #L49e996.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49e99c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e9a2.  v2:= temp @kind object;
  #L49e9a4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `flatMap`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMap:(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e9b8.  v0:= "mapper is null" @kind object;
  #L49e9bc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e9c2.  v0:= "combiner is null" @kind object;
  #L49e9c6.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e9cc.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector`;
  #L49e9d0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapBiSelector;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L49e9d6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e9dc.  v2:= temp @kind object;
  #L49e9de.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `flatMap`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMap:(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e9f0.  v0:= "onSuccessMapper is null" @kind object;
  #L49e9f4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e9fa.  v0:= "onErrorMapper is null" @kind object;
  #L49e9fe.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ea04.  v0:= "onCompleteSupplier is null" @kind object;
  #L49ea08.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ea0e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification`;
  #L49ea12.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L49ea18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ea1e.  v2:= temp @kind object;
  #L49ea20.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Completable` `flatMapCompletable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMapCompletable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49d6e0.  v0:= "mapper is null" @kind object;
  #L49d6e4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49d6ea.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable`;
  #L49d6ee.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapCompletable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49d6f4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Completable;)Lio/reactivex/rxjava3/core/Completable;` @kind static;
  #L49d6fa.  v2:= temp @kind object;
  #L49d6fc.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Observable` `flatMapObservable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMapObservable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49faec.  v0:= "mapper is null" @kind object;
  #L49faf0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49faf6.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable`;
  #L49fafa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49fb00.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Observable;)Lio/reactivex/rxjava3/core/Observable;` @kind static;
  #L49fb06.  v2:= temp @kind object;
  #L49fb08.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `flatMapPublisher`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMapPublisher:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49dbd8.  v0:= "mapper is null" @kind object;
  #L49dbdc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dbe2.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher`;
  #L49dbe6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49dbec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dbf2.  v2:= temp @kind object;
  #L49dbf4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `flatMapSingle`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flatMapSingle:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ea34.  v0:= "mapper is null" @kind object;
  #L49ea38.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ea3e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle`;
  #L49ea42.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49ea48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ea4e.  v2:= temp @kind object;
  #L49ea50.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `flattenAsFlowable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flattenAsFlowable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49dc08.  v0:= "mapper is null" @kind object;
  #L49dc0c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dc12.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable`;
  #L49dc16.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49dc1c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dc22.  v2:= temp @kind object;
  #L49dc24.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Observable` `flattenAsObservable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flattenAsObservable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fb1c.  v0:= "mapper is null" @kind object;
  #L49fb20.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fb26.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable`;
  #L49fb2a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49fb30.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Observable;)Lio/reactivex/rxjava3/core/Observable;` @kind static;
  #L49fb36.  v2:= temp @kind object;
  #L49fb38.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `flattenStreamAsFlowable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flattenStreamAsFlowable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49dc38.  v0:= "mapper is null" @kind object;
  #L49dc3c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49dc42.  v0:= new `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable`;
  #L49dc46.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable;.<init>:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49dc4c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49dc52.  v2:= temp @kind object;
  #L49dc54.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Observable` `flattenStreamAsObservable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.flattenStreamAsObservable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fb4c.  v0:= "mapper is null" @kind object;
  #L49fb50.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fb56.  v0:= new `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable`;
  #L49fb5a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable;.<init>:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49fb60.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Observable;)Lio/reactivex/rxjava3/core/Observable;` @kind static;
  #L49fb66.  v2:= temp @kind object;
  #L49fb68.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `hide`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.hide:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ecc0.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeHide`;
  #L49ecc4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeHide;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49ecca.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ecd0.  v0:= temp @kind object;
  #L49ecd2.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Completable` `ignoreElement`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.ignoreElement:()Lio/reactivex/rxjava3/core/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49d710.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable`;
  #L49d714.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeIgnoreElementCompletable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49d71a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Completable;)Lio/reactivex/rxjava3/core/Completable;` @kind static;
  #L49d720.  v0:= temp @kind object;
  #L49d722.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `isEmpty`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.isEmpty:()Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fc70.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle`;
  #L49fc74.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeIsEmptySingle;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49fc7a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fc80.  v0:= temp @kind object;
  #L49fc82.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `lift`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeOperator` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.lift:(Lio/reactivex/rxjava3/core/MaybeOperator;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ed14.  v0:= "lift is null" @kind object;
  #L49ed18.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ed1e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeLift`;
  #L49ed22.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeLift;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeOperator;)V` @kind direct;
  #L49ed28.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ed2e.  v2:= temp @kind object;
  #L49ed30.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `map`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.map:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ed44.  v0:= "mapper is null" @kind object;
  #L49ed48.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ed4e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeMap`;
  #L49ed52.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMap;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49ed58.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ed5e.  v2:= temp @kind object;
  #L49ed60.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `mapOptional`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mapOptional:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ed74.  v0:= "mapper is null" @kind object;
  #L49ed78.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ed7e.  v0:= new `io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional`;
  #L49ed82.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeMapOptional;.<init>:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49ed88.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ed8e.  v2:= temp @kind object;
  #L49ed90.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `materialize`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.materialize:()Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fc94.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize`;
  #L49fc98.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMaterialize;.<init>:(Lio/reactivex/rxjava3/core/Maybe;)V` @kind direct;
  #L49fc9e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fca4.  v0:= temp @kind object;
  #L49fca6.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `mergeWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.mergeWith:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e018.  v0:= "other is null" @kind object;
  #L49e01c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e022.  call temp:= `merge`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.merge:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e028.  v2:= temp @kind object;
  #L49e02a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `observeOn`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.observeOn:(Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49edfc.  v0:= "scheduler is null" @kind object;
  #L49ee00.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ee06.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn`;
  #L49ee0a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeObserveOn;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L49ee10.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ee16.  v2:= temp @kind object;
  #L49ee18.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `ofType`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.ofType:(Ljava/lang/Class;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ee2c.  v0:= "clazz is null" @kind object;
  #L49ee30.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ee36.  call temp:= `isInstanceOf`(v2) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/rxjava3/functions/Predicate;` @kind static;
  #L49ee3c.  v0:= temp @kind object;
  #L49ee3e.  call temp:= `filter`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.filter:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49ee44.  v0:= temp @kind object;
  #L49ee46.  call temp:= `cast`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49ee4c.  v2:= temp @kind object;
  #L49ee4e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `onErrorComplete`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorComplete:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ee60.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/rxjava3/functions/Predicate;` @kind static;
  #L49ee66.  v0:= temp @kind object;
  #L49ee68.  call temp:= `onErrorComplete`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorComplete:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49ee6e.  v0:= temp @kind object;
  #L49ee70.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `onErrorComplete`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorComplete:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ee84.  v0:= "predicate is null" @kind object;
  #L49ee88.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ee8e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete`;
  #L49ee92.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L49ee98.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ee9e.  v2:= temp @kind object;
  #L49eea0.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `onErrorResumeNext`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorResumeNext:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49eeb4.  v0:= "fallbackSupplier is null" @kind object;
  #L49eeb8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eebe.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext`;
  #L49eec2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49eec8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49eece.  v2:= temp @kind object;
  #L49eed0.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `onErrorResumeWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorResumeWith:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49eee4.  v0:= "fallback is null" @kind object;
  #L49eee8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49eeee.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49eef4.  v2:= temp @kind object;
  #L49eef6.  call temp:= `onErrorResumeNext`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorResumeNext:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49eefc.  v2:= temp @kind object;
  #L49eefe.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `onErrorReturn`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorReturn:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ef10.  v0:= "itemSupplier is null" @kind object;
  #L49ef14.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ef1a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn`;
  #L49ef1e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorReturn;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L49ef24.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ef2a.  v2:= temp @kind object;
  #L49ef2c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `onErrorReturnItem`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorReturnItem:(Ljava/lang/Object;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ef40.  v0:= "item is null" @kind object;
  #L49ef44.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49ef4a.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/rxjava3/functions/Function;` @kind static;
  #L49ef50.  v2:= temp @kind object;
  #L49ef52.  call temp:= `onErrorReturn`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.onErrorReturn:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49ef58.  v2:= temp @kind object;
  #L49ef5a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `onTerminateDetach`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.onTerminateDetach:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ef6c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach`;
  #L49ef70.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49ef76.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49ef7c.  v0:= temp @kind object;
  #L49ef7e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `repeat`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.repeat:()Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49e03c.  v0:= 9223372036854775807L;
  #L49e046.  call temp:= `repeat`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.repeat:(J)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e04c.  v0:= temp @kind object;
  #L49e04e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `repeat`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.repeat:(J)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e060.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e066.  v0:= temp @kind object;
  #L49e068.  call temp:= `repeat`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.repeat:(J)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e06e.  v2:= temp @kind object;
  #L49e070.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `repeatUntil`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.BooleanSupplier` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.repeatUntil:(Lio/reactivex/rxjava3/functions/BooleanSupplier;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e084.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e08a.  v0:= temp @kind object;
  #L49e08c.  call temp:= `repeatUntil`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.repeatUntil:(Lio/reactivex/rxjava3/functions/BooleanSupplier;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e092.  v2:= temp @kind object;
  #L49e094.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `repeatWhen`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.repeatWhen:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e0a8.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e0ae.  v0:= temp @kind object;
  #L49e0b0.  call temp:= `repeatWhen`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.repeatWhen:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e0b6.  v2:= temp @kind object;
  #L49e0b8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `retry`(`io.reactivex.rxjava3.core.Maybe` v3 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L49ef90.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/rxjava3/functions/Predicate;` @kind static;
  #L49ef96.  v0:= temp @kind object;
  #L49ef98.  v1:= 9223372036854775807L;
  #L49efa2.  call temp:= `retry`(v3, v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(JLio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49efa8.  v0:= temp @kind object;
  #L49efaa.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `retry`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(J)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f00c.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/rxjava3/functions/Predicate;` @kind static;
  #L49f012.  v0:= temp @kind object;
  #L49f014.  call temp:= `retry`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(JLio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f01a.  v2:= temp @kind object;
  #L49f01c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `retry`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `long` v2 , `io.reactivex.rxjava3.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(JLio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f030.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49f036.  v0:= temp @kind object;
  #L49f038.  call temp:= `retry`(v0, v2, v4) @signature `Lio/reactivex/rxjava3/core/Flowable;.retry:(JLio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49f03e.  v2:= temp @kind object;
  #L49f040.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.singleElement:()Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f046.  v2:= temp @kind object;
  #L49f048.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `retry`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.BiPredicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(Lio/reactivex/rxjava3/functions/BiPredicate;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49efbc.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49efc2.  v0:= temp @kind object;
  #L49efc4.  call temp:= `retry`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.retry:(Lio/reactivex/rxjava3/functions/BiPredicate;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49efca.  v2:= temp @kind object;
  #L49efcc.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.singleElement:()Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49efd2.  v2:= temp @kind object;
  #L49efd4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `retry`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `io.reactivex.rxjava3.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49efe8.  v0:= 9223372036854775807L;
  #L49eff2.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(JLio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49eff8.  v3:= temp @kind object;
  #L49effa.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `retryUntil`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `io.reactivex.rxjava3.functions.BooleanSupplier` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.retryUntil:(Lio/reactivex/rxjava3/functions/BooleanSupplier;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49f05c.  v0:= "stop is null" @kind object;
  #L49f060.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f066.  call temp:= `predicateReverseFor`(v3) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.predicateReverseFor:(Lio/reactivex/rxjava3/functions/BooleanSupplier;)Lio/reactivex/rxjava3/functions/Predicate;` @kind static;
  #L49f06c.  v3:= temp @kind object;
  #L49f06e.  v0:= 9223372036854775807L;
  #L49f078.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/rxjava3/core/Maybe;.retry:(JLio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f07e.  v3:= temp @kind object;
  #L49f080.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `retryWhen`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.retryWhen:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f094.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49f09a.  v0:= temp @kind object;
  #L49f09c.  call temp:= `retryWhen`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.retryWhen:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49f0a2.  v2:= temp @kind object;
  #L49f0a4.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.singleElement:()Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f0aa.  v2:= temp @kind object;
  #L49f0ac.  return v2 @kind object;
}
procedure `void` `safeSubscribe`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.safeSubscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4a0088.  v0:= "observer is null" @kind object;
  #L4a008c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a0092.  v0:= new `io.reactivex.rxjava3.internal.observers.SafeMaybeObserver`;
  #L4a0096.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/observers/SafeMaybeObserver;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind direct;
  #L4a009c.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L4a00a2.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Flowable` `startWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.CompletableSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.startWith:(Lio/reactivex/rxjava3/core/CompletableSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e0cc.  v0:= "other is null" @kind object;
  #L49e0d0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e0d6.  call temp:= `wrap`(v2) @signature `Lio/reactivex/rxjava3/core/Completable;.wrap:(Lio/reactivex/rxjava3/core/CompletableSource;)Lio/reactivex/rxjava3/core/Completable;` @kind static;
  #L49e0dc.  v2:= temp @kind object;
  #L49e0de.  call temp:= `toFlowable`(v2) @signature `Lio/reactivex/rxjava3/core/Completable;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e0e4.  v2:= temp @kind object;
  #L49e0e6.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e0ec.  v0:= temp @kind object;
  #L49e0ee.  call temp:= `concat`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e0f4.  v2:= temp @kind object;
  #L49e0f6.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `startWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.startWith:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e108.  v0:= "other is null" @kind object;
  #L49e10c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e112.  call temp:= `wrap`(v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.wrap:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49e118.  v2:= temp @kind object;
  #L49e11a.  call temp:= `toFlowable`(v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e120.  v2:= temp @kind object;
  #L49e122.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e128.  v0:= temp @kind object;
  #L49e12a.  call temp:= `concat`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e130.  v2:= temp @kind object;
  #L49e132.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `startWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.SingleSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.startWith:(Lio/reactivex/rxjava3/core/SingleSource;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e144.  v0:= "other is null" @kind object;
  #L49e148.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e14e.  call temp:= `wrap`(v2) @signature `Lio/reactivex/rxjava3/core/Single;.wrap:(Lio/reactivex/rxjava3/core/SingleSource;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49e154.  v2:= temp @kind object;
  #L49e156.  call temp:= `toFlowable`(v2) @signature `Lio/reactivex/rxjava3/core/Single;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e15c.  v2:= temp @kind object;
  #L49e15e.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e164.  v0:= temp @kind object;
  #L49e166.  call temp:= `concat`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e16c.  v2:= temp @kind object;
  #L49e16e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `startWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.startWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e180.  v0:= "other is null" @kind object;
  #L49e184.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49e18a.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e190.  v0:= temp @kind object;
  #L49e192.  call temp:= `startWith`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.startWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L49e198.  v2:= temp @kind object;
  #L49e19a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Observable` `startWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.startWith:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fb7c.  v0:= "other is null" @kind object;
  #L49fb80.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fb86.  call temp:= `wrap`(v2) @signature `Lio/reactivex/rxjava3/core/Observable;.wrap:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/core/Observable;` @kind static;
  #L49fb8c.  v2:= temp @kind object;
  #L49fb8e.  call temp:= `toObservable`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.toObservable:()Lio/reactivex/rxjava3/core/Observable;` @kind virtual;
  #L49fb94.  v0:= temp @kind object;
  #L49fb96.  call temp:= `concatWith`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Observable;.concatWith:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/core/Observable;` @kind virtual;
  #L49fb9c.  v2:= temp @kind object;
  #L49fb9e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `subscribe`(`io.reactivex.rxjava3.core.Maybe` v3 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:()Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L49fd78.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L49fd7e.  v0:= temp @kind object;
  #L49fd80.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L49fd84.  v2:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49fd88.  call temp:= `subscribe`(v3, v0, v1, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L49fd8e.  v0:= temp @kind object;
  #L49fd90.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `subscribe`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49fda4.  v0:= `@@io.reactivex.rxjava3.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L49fda8.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49fdac.  call temp:= `subscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L49fdb2.  v3:= temp @kind object;
  #L49fdb4.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `subscribe`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fdc8.  v0:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49fdcc.  call temp:= `subscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L49fdd2.  v2:= temp @kind object;
  #L49fdd4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `subscribe`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Action` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fde8.  v0:= "onSuccess is null" @kind object;
  #L49fdec.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fdf2.  v0:= "onError is null" @kind object;
  #L49fdf6.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fdfc.  v0:= "onComplete is null" @kind object;
  #L49fe00.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fe06.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver`;
  #L49fe0a.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L49fe10.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeWith:(Lio/reactivex/rxjava3/core/MaybeObserver;)Lio/reactivex/rxjava3/core/MaybeObserver;` @kind virtual;
  #L49fe16.  v2:= temp @kind object;
  #L49fe18.  v2:= (`io.reactivex.rxjava3.disposables.Disposable`) v2 @kind object;
  #L49fe1c.  return v2 @kind object;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4a00b4.  v0:= "observer is null" @kind object;
  #L4a00b8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a00be.  call temp:= `onSubscribe`(v2, v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/core/MaybeObserver;)Lio/reactivex/rxjava3/core/MaybeObserver;` @kind static;
  #L4a00c4.  v3:= temp @kind object;
  #L4a00c6.  v0:= "The RxJavaPlugins.onSubscribe hook returned a null MaybeObserver. Please check the handler provided to RxJavaPlugins.setOnMaybeSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins" @kind object;
  #L4a00ca.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a00d0.  call `subscribeActual`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L4a00d6.  return @kind void;
  #L4a00d8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a00da.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a00e0.  v0:= new `java.lang.NullPointerException`;
  #L4a00e4.  v1:= "subscribeActual failed" @kind object;
  #L4a00e8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a00ee.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4a00f4.  throw v0;
  #L4a00f6.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L4a00f8.  throw v3;
  catch `java.lang.NullPointerException` @[L4a00d0..L4a00d6] goto L4a00f6;
  catch `java.lang.Throwable` @[L4a00d0..L4a00d6] goto L4a00d8;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.core.MaybeObserver` v0 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.rxjava3.core.Maybe` `subscribeOn`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeOn:(Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f0c0.  v0:= "scheduler is null" @kind object;
  #L49f0c4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f0ca.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn`;
  #L49f0ce.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSubscribeOn;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L49f0d4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f0da.  v2:= temp @kind object;
  #L49f0dc.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.MaybeObserver` `subscribeWith`(`io.reactivex.rxjava3.core.Maybe` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeWith:(Lio/reactivex/rxjava3/core/MaybeObserver;)Lio/reactivex/rxjava3/core/MaybeObserver;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49fad4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L49fada.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `switchIfEmpty`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.switchIfEmpty:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f0f0.  v0:= "other is null" @kind object;
  #L49f0f4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f0fa.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty`;
  #L49f0fe.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmpty;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f104.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f10a.  v2:= temp @kind object;
  #L49f10c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `switchIfEmpty`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.SingleSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.switchIfEmpty:(Lio/reactivex/rxjava3/core/SingleSource;)Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fd20.  v0:= "other is null" @kind object;
  #L49fd24.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fd2a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle`;
  #L49fd2e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/SingleSource;)V` @kind direct;
  #L49fd34.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fd3a.  v2:= temp @kind object;
  #L49fd3c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `takeUntil`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.takeUntil:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f120.  v0:= "other is null" @kind object;
  #L49f124.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f12a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe`;
  #L49f12e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f134.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f13a.  v2:= temp @kind object;
  #L49f13c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `takeUntil`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f150.  v0:= "other is null" @kind object;
  #L49f154.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f15a.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher`;
  #L49f15e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L49f164.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f16a.  v2:= temp @kind object;
  #L49f16c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `test`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.test:()Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fe30.  v0:= new `io.reactivex.rxjava3.observers.TestObserver`;
  #L49fe34.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:()V` @kind direct;
  #L49fe3a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L49fe40.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `test`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/core/Maybe;.test:(Z)Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fe54.  v0:= new `io.reactivex.rxjava3.observers.TestObserver`;
  #L49fe58.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:()V` @kind direct;
  #L49fe5e.  if v2 == 0 then goto L49fe68;
  #L49fe62.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.dispose:()V` @kind virtual;
  #L49fe68.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L49fe6e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeInterval`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeInterval:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49f180.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49f184.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49f18a.  v1:= temp @kind object;
  #L49f18c.  call temp:= `timeInterval`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f192.  v0:= temp @kind object;
  #L49f194.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeInterval`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeInterval:(Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f1a8.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49f1ac.  call temp:= `timeInterval`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f1b2.  v2:= temp @kind object;
  #L49f1b4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeInterval`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeInterval:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f1c8.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49f1ce.  v0:= temp @kind object;
  #L49f1d0.  call temp:= `timeInterval`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f1d6.  v2:= temp @kind object;
  #L49f1d8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeInterval`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.rxjava3.core.Scheduler` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49f1ec.  v0:= "unit is null" @kind object;
  #L49f1f0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f1f6.  v0:= "scheduler is null" @kind object;
  #L49f1fa.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f200.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval`;
  #L49f204.  v1:= 1I;
  #L49f206.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L49f20c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f212.  v3:= temp @kind object;
  #L49f214.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f290.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49f296.  v0:= temp @kind object;
  #L49f298.  call temp:= `timeout`(v1, v2, v4, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f29e.  v2:= temp @kind object;
  #L49f2a0.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v11 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49f2b4.  v0:= "fallback is null" @kind object;
  #L49f2b8.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f2be.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49f2c4.  v5:= temp @kind object;
  #L49f2c6.  v1:= v7 @kind object;
  #L49f2c8.  v2:= v8 @kind wide;
  #L49f2ca.  v4:= v10 @kind object;
  #L49f2cc.  v6:= v11 @kind object;
  #L49f2ce.  call temp:= `timeout`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f2d4.  v8:= temp @kind object;
  #L49f2d6.  return v8 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.rxjava3.core.Scheduler` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L49f2e8.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/rxjava3/core/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f2ee.  v1:= temp @kind object;
  #L49f2f0.  call temp:= `timeout`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f2f6.  v1:= temp @kind object;
  #L49f2f8.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v6 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f30c.  v0:= "fallback is null" @kind object;
  #L49f310.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f316.  call temp:= `timer`(v2, v4, v5) @signature `Lio/reactivex/rxjava3/core/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f31c.  v2:= temp @kind object;
  #L49f31e.  call temp:= `timeout`(v1, v2, v6) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f324.  v2:= temp @kind object;
  #L49f326.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49f228.  v0:= "timeoutIndicator is null" @kind object;
  #L49f22c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f232.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L49f236.  v1:= 0I;
  #L49f238.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f23e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f244.  v3:= temp @kind object;
  #L49f246.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f258.  v0:= "timeoutIndicator is null" @kind object;
  #L49f25c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f262.  v0:= "fallback is null" @kind object;
  #L49f266.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f26c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L49f270.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f276.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f27c.  v2:= temp @kind object;
  #L49f27e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49f338.  v0:= "timeoutIndicator is null" @kind object;
  #L49f33c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f342.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L49f346.  v1:= 0I;
  #L49f348.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f34e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f354.  v3:= temp @kind object;
  #L49f356.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timeout`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f368.  v0:= "timeoutIndicator is null" @kind object;
  #L49f36c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f372.  v0:= "fallback is null" @kind object;
  #L49f376.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f37c.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L49f380.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49f386.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f38c.  v2:= temp @kind object;
  #L49f38e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timestamp`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.timestamp:()Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49f408.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49f40c.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49f412.  v1:= temp @kind object;
  #L49f414.  call temp:= `timestamp`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f41a.  v0:= temp @kind object;
  #L49f41c.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timestamp`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timestamp:(Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f430.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49f434.  call temp:= `timestamp`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f43a.  v2:= temp @kind object;
  #L49f43c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timestamp`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timestamp:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f450.  call temp:= `computation`() @signature `Lio/reactivex/rxjava3/schedulers/Schedulers;.computation:()Lio/reactivex/rxjava3/core/Scheduler;` @kind static;
  #L49f456.  v0:= temp @kind object;
  #L49f458.  call temp:= `timestamp`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L49f45e.  v2:= temp @kind object;
  #L49f460.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `timestamp`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.rxjava3.core.Scheduler` v4 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49f474.  v0:= "unit is null" @kind object;
  #L49f478.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f47e.  v0:= "scheduler is null" @kind object;
  #L49f482.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f488.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval`;
  #L49f48c.  v1:= 0I;
  #L49f48e.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L49f494.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f49a.  v3:= temp @kind object;
  #L49f49c.  return v3 @kind object;
}
procedure `java.lang.Object` `to`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeConverter` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.to:(Lio/reactivex/rxjava3/core/MaybeConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fee0.  v0:= "converter is null" @kind object;
  #L49fee4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49feea.  v2:= temp @kind object;
  #L49feec.  v2:= (`io.reactivex.rxjava3.core.MaybeConverter`) v2 @kind object;
  #L49fef0.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeConverter;.apply:(Lio/reactivex/rxjava3/core/Maybe;)Ljava/lang/Object;` @kind interface;
  #L49fef6.  v2:= temp @kind object;
  #L49fef8.  return v2 @kind object;
}
procedure `java.util.concurrent.CompletionStage` `toCompletionStage`(`io.reactivex.rxjava3.core.Maybe` v3 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.toCompletionStage:()Ljava/util/concurrent/CompletionStage;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L49ff0c.  v0:= new `io.reactivex.rxjava3.internal.jdk8.CompletionStageConsumer`;
  #L49ff10.  v1:= 0I;
  #L49ff12.  v2:= 0I;
  #L49ff14.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/CompletionStageConsumer;.<init>:(ZLjava/lang/Object;)V` @kind direct;
  #L49ff1a.  call temp:= `subscribeWith`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeWith:(Lio/reactivex/rxjava3/core/MaybeObserver;)Lio/reactivex/rxjava3/core/MaybeObserver;` @kind virtual;
  #L49ff20.  v0:= temp @kind object;
  #L49ff22.  v0:= (`java.util.concurrent.CompletionStage`) v0 @kind object;
  #L49ff26.  return v0 @kind object;
}
procedure `java.util.concurrent.CompletionStage` `toCompletionStage`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.toCompletionStage:(Ljava/lang/Object;)Ljava/util/concurrent/CompletionStage;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49ff38.  v0:= new `io.reactivex.rxjava3.internal.jdk8.CompletionStageConsumer`;
  #L49ff3c.  v1:= 1I;
  #L49ff3e.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/CompletionStageConsumer;.<init>:(ZLjava/lang/Object;)V` @kind direct;
  #L49ff44.  call temp:= `subscribeWith`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeWith:(Lio/reactivex/rxjava3/core/MaybeObserver;)Lio/reactivex/rxjava3/core/MaybeObserver;` @kind virtual;
  #L49ff4a.  v3:= temp @kind object;
  #L49ff4c.  v3:= (`java.util.concurrent.CompletionStage`) v3 @kind object;
  #L49ff50.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `toFlowable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49e21c.  v0:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.internal.fuseable.FuseToFlowable` @kind boolean;
  #L49e220.  if v0 == 0 then goto L49e234;
  #L49e224.  v0:= v1 @kind object;
  #L49e226.  v0:= (`io.reactivex.rxjava3.internal.fuseable.FuseToFlowable`) v0 @kind object;
  #L49e22a.  call temp:= `fuseToFlowable`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/FuseToFlowable;.fuseToFlowable:()Lio/reactivex/rxjava3/core/Flowable;` @kind interface;
  #L49e230.  v0:= temp @kind object;
  #L49e232.  return v0 @kind object;
  #L49e234.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable`;
  #L49e238.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49e23e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L49e244.  v0:= temp @kind object;
  #L49e246.  return v0 @kind object;
}
procedure `java.util.concurrent.Future` `toFuture`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.toFuture:()Ljava/util/concurrent/Future;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49ff64.  v0:= new `io.reactivex.rxjava3.internal.observers.FutureMultiObserver`;
  #L49ff68.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.<init>:()V` @kind direct;
  #L49ff6e.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribeWith:(Lio/reactivex/rxjava3/core/MaybeObserver;)Lio/reactivex/rxjava3/core/MaybeObserver;` @kind virtual;
  #L49ff74.  v0:= temp @kind object;
  #L49ff76.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L49ff7a.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Observable` `toObservable`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.toObservable:()Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fbb0.  v0:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.internal.fuseable.FuseToObservable` @kind boolean;
  #L49fbb4.  if v0 == 0 then goto L49fbc8;
  #L49fbb8.  v0:= v1 @kind object;
  #L49fbba.  v0:= (`io.reactivex.rxjava3.internal.fuseable.FuseToObservable`) v0 @kind object;
  #L49fbbe.  call temp:= `fuseToObservable`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/FuseToObservable;.fuseToObservable:()Lio/reactivex/rxjava3/core/Observable;` @kind interface;
  #L49fbc4.  v0:= temp @kind object;
  #L49fbc6.  return v0 @kind object;
  #L49fbc8.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable`;
  #L49fbcc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToObservable;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @kind direct;
  #L49fbd2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Observable;)Lio/reactivex/rxjava3/core/Observable;` @kind static;
  #L49fbd8.  v0:= temp @kind object;
  #L49fbda.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Single` `toSingle`(`io.reactivex.rxjava3.core.Maybe` v2 @kind this) @signature `Lio/reactivex/rxjava3/core/Maybe;.toSingle:()Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49fd50.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle`;
  #L49fd54.  v1:= 0I;
  #L49fd56.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L49fd5c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Single;)Lio/reactivex/rxjava3/core/Single;` @kind static;
  #L49fd62.  v0:= temp @kind object;
  #L49fd64.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `unsubscribeOn`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.unsubscribeOn:(Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49f4f8.  v0:= "scheduler is null" @kind object;
  #L49f4fc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49f502.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn`;
  #L49f506.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L49f50c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Maybe;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49f512.  v2:= temp @kind object;
  #L49f514.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zipWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipWith:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49fab0.  v0:= "other is null" @kind object;
  #L49fab4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49faba.  call temp:= `zip`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/core/Maybe;.zip:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @kind static;
  #L49fac0.  v2:= temp @kind object;
  #L49fac2.  return v2 @kind object;
}
