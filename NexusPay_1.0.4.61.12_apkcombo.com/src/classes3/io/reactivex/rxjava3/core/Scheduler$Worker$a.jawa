record `io.reactivex.rxjava3.core.Scheduler$Worker$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @AccessFlag ;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @AccessFlag ;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.core.Scheduler$Worker$a` v0 @kind this, `io.reactivex.rxjava3.core.Scheduler$Worker` v1 @kind object, `long` v2 , `java.lang.Runnable` v4 @kind object, `long` v5 , `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` v7 @kind object, `long` v8 ) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;JLjava/lang/Runnable;JLio/reactivex/rxjava3/internal/disposables/SequentialDisposable;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a75e4.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v1 @kind object;
  #L4a75e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a75ee.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` := v4 @kind object;
  #L4a75f2.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4a75f6.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @type ^`long` := v8 @kind wide;
  #L4a75fa.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @type ^`long` := v5 @kind wide;
  #L4a75fe.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @type ^`long` := v2 @kind wide;
  #L4a7602.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.core.Scheduler$Worker$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker$a;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a75cc.  v0:= v1.`io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L4a75d0.  return v0 @kind object;
}
procedure `void` `run`(`io.reactivex.rxjava3.core.Scheduler$Worker$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a7614.  v0:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L4a7618.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4a761e.  v0:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a7622.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L4a7628.  v0:= temp;
  #L4a762a.  if v0 != 0 then goto L4a76be;
  #L4a762e.  v0:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a7632.  v1:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a7636.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4a763c.  v0:= temp @kind wide;
  #L4a763e.  v2:= `@@io.reactivex.rxjava3.core.Scheduler.a` @type ^`long` @kind wide;
  #L4a7642.  v4:= v0 + v2 @kind long;
  #L4a7646.  v6:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @type ^`long` @kind wide;
  #L4a764a.  v8:= 1L;
  #L4a764e.  v10:= lcmp(v4, v6);
  #L4a7652.  if v10 < 0 then goto L4a767e;
  #L4a7656.  v4:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L4a765a.  v6:= v6 + v4 @kind long;
  #L4a765c.  v6:= v6 + v2 @kind long;
  #L4a765e.  v2:= lcmp(v0, v6);
  #L4a7662.  if v2 < 0 then goto L4a7668;
  #L4a7666.  goto L4a767e;
  #L4a7668.  v2:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @type ^`long` @kind wide;
  #L4a766c.  v6:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L4a7670.  v6:= v6 + v8 @kind long;
  #L4a7672.  v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` := v6 @kind wide;
  #L4a7676.  v6:= v6 * v4 @kind long;
  #L4a767a.  v2:= v2 + v6 @kind long;
  #L4a767c.  goto L4a769e;
  #L4a767e.  v2:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L4a7682.  v4:= v0 + v2 @kind long;
  #L4a7686.  v6:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L4a768a.  v6:= v6 + v8 @kind long;
  #L4a768c.  v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` := v6 @kind wide;
  #L4a7690.  v2:= v2 * v6 @kind long;
  #L4a7694.  v2:= v4 - v2 @kind long;
  #L4a7698.  v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @type ^`long` := v2 @kind wide;
  #L4a769c.  v2:= v4 @kind wide;
  #L4a769e.  v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @type ^`long` := v0 @kind wide;
  #L4a76a2.  v2:= v2 - v0 @kind long;
  #L4a76a4.  v0:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a76a8.  v1:= v11.`io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a76ac.  v4:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a76b0.  call temp:= `schedule`(v1, v11, v2, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a76b6.  v1:= temp @kind object;
  #L4a76b8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a76be.  return @kind void;
}
