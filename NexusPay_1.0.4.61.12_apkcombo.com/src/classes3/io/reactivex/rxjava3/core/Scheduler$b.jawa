record `io.reactivex.rxjava3.core.Scheduler$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.core.Scheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.core.Scheduler$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.core.Scheduler$b.c` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.core.Scheduler$b` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object) @signature `Lio/reactivex/rxjava3/core/Scheduler$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a7544.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a754a.  v0.`io.reactivex.rxjava3.core.Scheduler$b.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4a754e.  v0.`io.reactivex.rxjava3.core.Scheduler$b.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v2 @kind object;
  #L4a7552.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.core.Scheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7564.  v0:= 1I;
  #L4a7566.  v1.`io.reactivex.rxjava3.core.Scheduler$b.c` @type ^`boolean` := v0 @kind boolean;
  #L4a756a.  v0:= v1.`io.reactivex.rxjava3.core.Scheduler$b.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a756e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a7574.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.core.Scheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$b;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a752c.  v0:= v1.`io.reactivex.rxjava3.core.Scheduler$b.a` @type ^`java.lang.Runnable` @kind object;
  #L4a7530.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.core.Scheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7514.  v0:= v1.`io.reactivex.rxjava3.core.Scheduler$b.c` @type ^`boolean` @kind boolean;
  #L4a7518.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.core.Scheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7588.  v0:= v1.`io.reactivex.rxjava3.core.Scheduler$b.c` @type ^`boolean` @kind boolean;
  #L4a758c.  if v0 != 0 then goto L4a75ac;
  #L4a7590.  v0:= v1.`io.reactivex.rxjava3.core.Scheduler$b.a` @type ^`java.lang.Runnable` @kind object;
  #L4a7594.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4a759a.  goto L4a75ac;
  #L4a759c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a759e.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$b;.dispose:()V` @kind virtual;
  #L4a75a4.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a75aa.  throw v0;
  #L4a75ac.  return @kind void;
  catch `java.lang.Throwable` @[L4a7590..L4a759a] goto L4a759c;
}
