record `io.reactivex.rxjava3.processors.BehaviorProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.BehaviorProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.rxjava3.processors.BehaviorProcessor.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.processors.BehaviorProcessor.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.processors.BehaviorProcessor.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.BehaviorProcessor.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.BehaviorProcessor.g` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.processors.BehaviorProcessor.h` @AccessFlag ;
}
global `java.lang.Object`[] `@@io.reactivex.rxjava3.processors.BehaviorProcessor.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L51e9ec.  v0:= 0I;
  #L51e9ee.  v1:= new `java.lang.Object`[v0];
  #L51e9f2.  `@@io.reactivex.rxjava3.processors.BehaviorProcessor.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L51e9f6.  v1:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v0];
  #L51e9fa.  `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] := v1 @kind object;
  #L51e9fe.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v0];
  #L51ea02.  `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] := v0 @kind object;
  #L51ea06.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L51ea18.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L51ea1e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51ea22.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L51ea28.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L51ea2c.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L51ea30.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L51ea36.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L51ea3a.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L51ea40.  v0:= temp @kind object;
  #L51ea42.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L51ea46.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.c` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L51ea4a.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L51ea50.  v0:= temp @kind object;
  #L51ea52.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L51ea56.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51ea5a.  v1:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L51ea5e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L51ea64.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L51ea68.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51ea6c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L51ea72.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L51ea76.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L51ea88.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L51ea8e.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51ea92.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L51ea98.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.BehaviorProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.create:()Lio/reactivex/rxjava3/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51e900.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor`;
  #L51e904.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L51e90a.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.BehaviorProcessor` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.createDefault:(Ljava/lang/Object;)Lio/reactivex/rxjava3/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51e91c.  v0:= "defaultValue is null" @kind object;
  #L51e920.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51e926.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor`;
  #L51e92a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L51e930.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.BehaviorProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.e:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51e774.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e778.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e77e.  v0:= temp @kind object;
  #L51e780.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L51e784.  v1:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L51e788.  v2:= 0I;
  #L51e78a.  if v0 != v1 then goto L51e790;
  #L51e78e.  return v2;
  #L51e790.  v1:= length @variable v0;
  #L51e792.  v3:= v1 + 1;
  #L51e796.  v3:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v3];
  #L51e79a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51e7a0.  v3[v1]:= v5 @kind object;
  #L51e7a4.  v1:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e7a8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51e7ae.  v0:= temp;
  #L51e7b0.  if v0 == 0 then goto L51e774;
  #L51e7b4.  v5:= 1I;
  #L51e7b6.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.BehaviorProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.f:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51ec0c.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51ec10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51ec16.  v0:= temp @kind object;
  #L51ec18.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L51ec1c.  v1:= length @variable v0;
  #L51ec1e.  if v1 != 0 then goto L51ec24;
  #L51ec22.  return @kind void;
  #L51ec24.  v2:= -1I;
  #L51ec26.  v3:= 0I;
  #L51ec28.  v4:= 0I;
  #L51ec2a.  if v4 >= v1 then goto L51ec40;
  #L51ec2e.  v5:= v0[v4] @kind object;
  #L51ec32.  if v5 != v7 then goto L51ec3a;
  #L51ec36.  v2:= v4;
  #L51ec38.  goto L51ec40;
  #L51ec3a.  v4:= v4 + 1;
  #L51ec3e.  goto L51ec2a;
  #L51ec40.  if v2 >= 0 then goto L51ec46;
  #L51ec44.  return @kind void;
  #L51ec46.  v4:= 1I;
  #L51ec48.  if v1 != v4 then goto L51ec52;
  #L51ec4c.  v1:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L51ec50.  goto L51ec70;
  #L51ec52.  v5:= v1 + -1;
  #L51ec56.  v5:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v5];
  #L51ec5a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51ec60.  v3:= v2 + 1;
  #L51ec64.  v1:= v1 - v2 @kind int;
  #L51ec66.  v1:= v1 - v4 @kind int;
  #L51ec68.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51ec6e.  v1:= v5 @kind object;
  #L51ec70.  v2:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51ec74.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51ec7a.  v0:= temp;
  #L51ec7c.  if v0 == 0 then goto L51ec0c;
  #L51ec80.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51ec94.  v0:= v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L51ec98.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L51ec9e.  v1:= v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L51eca2.  v3:= 1L;
  #L51eca6.  v1:= v1 + v3 @kind long;
  #L51eca8.  v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` := v1 @kind wide;
  #L51ecac.  v1:= v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51ecb0.  call `lazySet`(v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L51ecb6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L51ecbc.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e9b4.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e9b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e9be.  v0:= temp @kind object;
  #L51e9c0.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L51e9c6.  v1:= temp;
  #L51e9c8.  if v1 == 0 then goto L51e9d6;
  #L51e9cc.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L51e9d2.  v0:= temp @kind object;
  #L51e9d4.  return v0 @kind object;
  #L51e9d6.  v0:= 0I;
  #L51e9d8.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e970.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e974.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e97a.  v0:= temp @kind object;
  #L51e97c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L51e982.  v1:= temp;
  #L51e984.  if v1 != 0 then goto L51e9a0;
  #L51e988.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L51e98e.  v1:= temp;
  #L51e990.  if v1 == 0 then goto L51e996;
  #L51e994.  goto L51e9a0;
  #L51e996.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L51e99c.  v0:= temp @kind object;
  #L51e99e.  return v0 @kind object;
  #L51e9a0.  v0:= 0I;
  #L51e9a2.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] `h`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;` @AccessFlag  {
    temp;
    v0;

  #L51e944.  call `g`(v1, v2) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L51e94a.  v2:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e94e.  v0:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L51e952.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51e958.  v2:= temp @kind object;
  #L51e95a.  v2:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v2 @kind object;
  #L51e95e.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51e7c8.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e7cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e7d2.  v0:= temp @kind object;
  #L51e7d4.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L51e7da.  v0:= temp;
  #L51e7dc.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51e7f0.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e7f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e7fa.  v0:= temp @kind object;
  #L51e7fc.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L51e800.  v0:= length @variable v0;
  #L51e802.  if v0 == 0 then goto L51e80a;
  #L51e806.  v0:= 1I;
  #L51e808.  goto L51e80c;
  #L51e80a.  v0:= 0I;
  #L51e80c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51e820.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e824.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e82a.  v0:= temp @kind object;
  #L51e82c.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L51e832.  v0:= temp;
  #L51e834.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e848.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e84c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e852.  v0:= temp @kind object;
  #L51e854.  if v0 == 0 then goto L51e874;
  #L51e858.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L51e85e.  v1:= temp;
  #L51e860.  if v1 != 0 then goto L51e874;
  #L51e864.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L51e86a.  v0:= temp;
  #L51e86c.  if v0 != 0 then goto L51e874;
  #L51e870.  v0:= 1I;
  #L51e872.  goto L51e876;
  #L51e874.  v0:= 0I;
  #L51e876.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51e888.  v0:= "offer called with a null value." @kind object;
  #L51e88c.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51e892.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e896.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e89c.  v0:= temp @kind object;
  #L51e89e.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L51e8a2.  v1:= length @variable v0;
  #L51e8a4.  v2:= 0I;
  #L51e8a6.  v3:= 0I;
  #L51e8a8.  if v3 >= v1 then goto L51e8c4;
  #L51e8ac.  v4:= v0[v3] @kind object;
  #L51e8b0.  call temp:= `d`(v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.d:()Z` @kind virtual;
  #L51e8b6.  v4:= temp;
  #L51e8b8.  if v4 == 0 then goto L51e8be;
  #L51e8bc.  return v2;
  #L51e8be.  v3:= v3 + 1;
  #L51e8c2.  goto L51e8a8;
  #L51e8c4.  call temp:= `next`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L51e8ca.  v7:= temp @kind object;
  #L51e8cc.  call `g`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L51e8d2.  v1:= length @variable v0;
  #L51e8d4.  if v2 >= v1 then goto L51e8ec;
  #L51e8d8.  v3:= v0[v2] @kind object;
  #L51e8dc.  v4:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L51e8e0.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L51e8e6.  v2:= v2 + 1;
  #L51e8ea.  goto L51e8d4;
  #L51e8ec.  v7:= 1I;
  #L51e8ee.  return v7;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v7 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L51eaac.  v0:= v7.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51eab0.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L51eab4.  v2:= 0I;
  #L51eab6.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51eabc.  v0:= temp;
  #L51eabe.  if v0 != 0 then goto L51eac4;
  #L51eac2.  return @kind void;
  #L51eac4.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L51eaca.  v0:= temp @kind object;
  #L51eacc.  call temp:= `h`(v7, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;` @kind virtual;
  #L51ead2.  v1:= temp @kind object;
  #L51ead4.  v2:= length @variable v1;
  #L51ead6.  v3:= 0I;
  #L51ead8.  if v3 >= v2 then goto L51eaf0;
  #L51eadc.  v4:= v1[v3] @kind object;
  #L51eae0.  v5:= v7.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L51eae4.  call `c`(v4, v0, v5) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L51eaea.  v3:= v3 + 1;
  #L51eaee.  goto L51ead8;
  #L51eaf0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51eb04.  v0:= "onError called with a null Throwable." @kind object;
  #L51eb08.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51eb0e.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51eb12.  v1:= 0I;
  #L51eb14.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51eb1a.  v0:= temp;
  #L51eb1c.  if v0 != 0 then goto L51eb28;
  #L51eb20.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L51eb26.  return @kind void;
  #L51eb28.  call temp:= `error`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L51eb2e.  v7:= temp @kind object;
  #L51eb30.  call temp:= `h`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;` @kind virtual;
  #L51eb36.  v0:= temp @kind object;
  #L51eb38.  v1:= length @variable v0;
  #L51eb3a.  v2:= 0I;
  #L51eb3c.  if v2 >= v1 then goto L51eb54;
  #L51eb40.  v3:= v0[v2] @kind object;
  #L51eb44.  v4:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L51eb48.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L51eb4e.  v2:= v2 + 1;
  #L51eb52.  goto L51eb3c;
  #L51eb54.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51eb68.  v0:= "onNext called with a null value." @kind object;
  #L51eb6c.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51eb72.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51eb76.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51eb7c.  v0:= temp @kind object;
  #L51eb7e.  if v0 == 0 then goto L51eb84;
  #L51eb82.  return @kind void;
  #L51eb84.  call temp:= `next`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L51eb8a.  v7:= temp @kind object;
  #L51eb8c.  call `g`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L51eb92.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51eb96.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51eb9c.  v0:= temp @kind object;
  #L51eb9e.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L51eba2.  v1:= length @variable v0;
  #L51eba4.  v2:= 0I;
  #L51eba6.  if v2 >= v1 then goto L51ebbe;
  #L51ebaa.  v3:= v0[v2] @kind object;
  #L51ebae.  v4:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L51ebb2.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L51ebb8.  v2:= v2 + 1;
  #L51ebbc.  goto L51eba6;
  #L51ebbe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51ebd0.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51ebd4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51ebda.  v0:= temp @kind object;
  #L51ebdc.  if v0 == 0 then goto L51ebe8;
  #L51ebe0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51ebe6.  return @kind void;
  #L51ebe8.  v0:= 9223372036854775807L;
  #L51ebf2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51ebf8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L51ecd0.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`;
  #L51ecd4.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/BehaviorProcessor;)V` @kind direct;
  #L51ecda.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L51ece0.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.e:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)Z` @kind virtual;
  #L51ece6.  v1:= temp;
  #L51ece8.  if v1 == 0 then goto L51ed04;
  #L51ecec.  v3:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51ecf0.  if v3 == 0 then goto L51ecfc;
  #L51ecf4.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.f:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L51ecfa.  goto L51ed2a;
  #L51ecfc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.a:()V` @kind virtual;
  #L51ed02.  goto L51ed2a;
  #L51ed04.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51ed08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51ed0e.  v0:= temp @kind object;
  #L51ed10.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L51ed14.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L51ed18.  if v0 != v1 then goto L51ed24;
  #L51ed1c.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L51ed22.  goto L51ed2a;
  #L51ed24.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51ed2a.  return @kind void;
}
