record `io.reactivex.rxjava3.processors.BehaviorProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.processors.BehaviorProcessor` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @AccessFlag ;
  `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.processors.BehaviorProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/BehaviorProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L51e568.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L51e56e.  v0.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L51e572.  v0.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor` := v2 @kind object;
  #L51e576.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51e5b4.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51e5b8.  if v0 == 0 then goto L51e5be;
  #L51e5bc.  return @kind void;
  #L51e5be.  @monitorenter v4
  #L51e5c0.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51e5c4.  if v0 == 0 then goto L51e5cc;
  #L51e5c8.  @monitorexit v4
  #L51e5ca.  return @kind void;
  #L51e5cc.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @type ^`boolean` @kind boolean;
  #L51e5d0.  if v0 == 0 then goto L51e5d8;
  #L51e5d4.  @monitorexit v4
  #L51e5d6.  return @kind void;
  #L51e5d8.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor` @kind object;
  #L51e5dc.  v1:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L51e5e0.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L51e5e6.  v2:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L51e5ea.  v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.h` @type ^`long` := v2 @kind wide;
  #L51e5ee.  v0:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e5f2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e5f8.  v0:= temp @kind object;
  #L51e5fa.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L51e600.  v1:= 1I;
  #L51e602.  if v0 == 0 then goto L51e60a;
  #L51e606.  v2:= 1I;
  #L51e608.  goto L51e60c;
  #L51e60a.  v2:= 0I;
  #L51e60c.  v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @type ^`boolean` := v2 @kind boolean;
  #L51e610.  v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @type ^`boolean` := v1 @kind boolean;
  #L51e614.  @monitorexit v4
  #L51e616.  if v0 == 0 then goto L51e62e;
  #L51e61a.  call temp:= `test`(v4, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L51e620.  v0:= temp;
  #L51e622.  if v0 == 0 then goto L51e628;
  #L51e626.  return @kind void;
  #L51e628.  call `b`(v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.b:()V` @kind virtual;
  #L51e62e.  return @kind void;
  #L51e630.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51e632.  @monitorexit v4
  #L51e634.  throw v0;
  catch `java.lang.Throwable` @[L51e5c0..L51e616] goto L51e630;
  catch `java.lang.Throwable` @[L51e632..L51e634] goto L51e630;
}
procedure `void` `b`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L51e65c.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51e660.  if v0 == 0 then goto L51e666;
  #L51e664.  return @kind void;
  #L51e666.  @monitorenter v2
  #L51e668.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L51e66c.  if v0 != 0 then goto L51e67a;
  #L51e670.  v0:= 0I;
  #L51e672.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @type ^`boolean` := v0 @kind boolean;
  #L51e676.  @monitorexit v2
  #L51e678.  return @kind void;
  #L51e67a.  v1:= 0I;
  #L51e67c.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L51e680.  @monitorexit v2
  #L51e682.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L51e688.  goto L51e65c;
  #L51e68a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51e68c.  @monitorexit v2
  #L51e68e.  throw v0;
  catch `java.lang.Throwable` @[L51e668..L51e682] goto L51e68a;
  catch `java.lang.Throwable` @[L51e68c..L51e68e] goto L51e68a;
}
procedure `void` `c`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L51e6b4.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51e6b8.  if v0 == 0 then goto L51e6be;
  #L51e6bc.  return @kind void;
  #L51e6be.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.f` @type ^`boolean` @kind boolean;
  #L51e6c2.  if v0 != 0 then goto L51e722;
  #L51e6c6.  @monitorenter v3
  #L51e6c8.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51e6cc.  if v0 == 0 then goto L51e6d4;
  #L51e6d0.  @monitorexit v3
  #L51e6d2.  return @kind void;
  #L51e6d4.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.h` @type ^`long` @kind wide;
  #L51e6d8.  v2:= lcmp(v0, v5);
  #L51e6dc.  if v2 != 0 then goto L51e6e4;
  #L51e6e0.  @monitorexit v3
  #L51e6e2.  return @kind void;
  #L51e6e4.  v5:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @type ^`boolean` @kind boolean;
  #L51e6e8.  if v5 == 0 then goto L51e70e;
  #L51e6ec.  v5:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L51e6f0.  if v5 != 0 then goto L51e704;
  #L51e6f4.  v5:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L51e6f8.  v6:= 4I;
  #L51e6fa.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L51e700.  v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v5 @kind object;
  #L51e704.  call `add`(v5, v4) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L51e70a.  @monitorexit v3
  #L51e70c.  return @kind void;
  #L51e70e.  v5:= 1I;
  #L51e710.  v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @type ^`boolean` := v5 @kind boolean;
  #L51e714.  @monitorexit v3
  #L51e716.  v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.f` @type ^`boolean` := v5 @kind boolean;
  #L51e71a.  goto L51e722;
  #L51e71c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51e71e.  @monitorexit v3
  #L51e720.  throw v4;
  #L51e722.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L51e728.  return @kind void;
  catch `java.lang.Throwable` @[L51e6c8..L51e716] goto L51e71c;
  catch `java.lang.Throwable` @[L51e71e..L51e720] goto L51e71c;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51e588.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51e58c.  if v0 != 0 then goto L51e5a0;
  #L51e590.  v0:= 1I;
  #L51e592.  v1.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` := v0 @kind boolean;
  #L51e596.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor` @kind object;
  #L51e59a.  call `f`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.f:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L51e5a0.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51e484.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51e48a.  v0:= temp @kind wide;
  #L51e48c.  v2:= 0L;
  #L51e490.  v4:= lcmp(v0, v2);
  #L51e494.  if v4 != 0 then goto L51e49c;
  #L51e498.  v0:= 1I;
  #L51e49a.  goto L51e49e;
  #L51e49c.  v0:= 0I;
  #L51e49e.  return v0;
}
procedure `void` `request`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51e750.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L51e756.  v0:= temp;
  #L51e758.  if v0 == 0 then goto L51e762;
  #L51e75c.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L51e762.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51e4b0.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L51e4b4.  v1:= 1I;
  #L51e4b6.  if v0 == 0 then goto L51e4bc;
  #L51e4ba.  return v1;
  #L51e4bc.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L51e4c2.  v0:= temp;
  #L51e4c4.  if v0 == 0 then goto L51e4d4;
  #L51e4c8.  v7:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51e4cc.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L51e4d2.  return v1;
  #L51e4d4.  call temp:= `isError`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L51e4da.  v0:= temp;
  #L51e4dc.  if v0 == 0 then goto L51e4f4;
  #L51e4e0.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51e4e4.  call temp:= `getError`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L51e4ea.  v7:= temp @kind object;
  #L51e4ec.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51e4f2.  return v1;
  #L51e4f4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51e4fa.  v2:= temp @kind wide;
  #L51e4fc.  v4:= 0L;
  #L51e500.  v0:= lcmp(v2, v4);
  #L51e504.  if v0 == 0 then goto L51e536;
  #L51e508.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51e50c.  call temp:= `getValue`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L51e512.  v7:= temp @kind object;
  #L51e514.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L51e51a.  v0:= 9223372036854775807L;
  #L51e524.  v7:= lcmp(v2, v0);
  #L51e528.  if v7 == 0 then goto L51e532;
  #L51e52c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L51e532.  v7:= 0I;
  #L51e534.  return v7;
  #L51e536.  call `cancel`(v6) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.cancel:()V` @kind virtual;
  #L51e53c.  v7:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51e540.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L51e544.  v2:= "Could not deliver value due to lack of requests" @kind object;
  #L51e548.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51e54e.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51e554.  return v1;
}
