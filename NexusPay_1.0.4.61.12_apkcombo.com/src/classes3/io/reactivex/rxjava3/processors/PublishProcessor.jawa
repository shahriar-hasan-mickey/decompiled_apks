record `io.reactivex.rxjava3.processors.PublishProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.PublishProcessor.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.PublishProcessor.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.processors.PublishProcessor$a`[] `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.PublishProcessor$a`[] `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L51f9cc.  v0:= 0I;
  #L51f9ce.  v1:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v0];
  #L51f9d2.  `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] := v1 @kind object;
  #L51f9d6.  v0:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v0];
  #L51f9da.  `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] := v0 @kind object;
  #L51f9de.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L51f9f0.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L51f9f6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51f9fa.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51f9fe.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L51fa04.  v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L51fa08.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.PublishProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.create:()Lio/reactivex/rxjava3/processors/PublishProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51f980.  v0:= new `io.reactivex.rxjava3.processors.PublishProcessor`;
  #L51f984.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.<init>:()V` @kind direct;
  #L51f98a.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.e:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51f82c.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f830.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f836.  v0:= temp @kind object;
  #L51f838.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L51f83c.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51f840.  v2:= 0I;
  #L51f842.  if v0 != v1 then goto L51f848;
  #L51f846.  return v2;
  #L51f848.  v1:= length @variable v0;
  #L51f84a.  v3:= v1 + 1;
  #L51f84e.  v3:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v3];
  #L51f852.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51f858.  v3[v1]:= v5 @kind object;
  #L51f85c.  v1:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f860.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51f866.  v0:= temp;
  #L51f868.  if v0 == 0 then goto L51f82c;
  #L51f86c.  v5:= 1I;
  #L51f86e.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.PublishProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.PublishProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.f:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51fb54.  v0:= v6.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fb58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51fb5e.  v0:= temp @kind object;
  #L51fb60.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L51fb64.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51fb68.  if v0 == v1 then goto L51fbd4;
  #L51fb6c.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51fb70.  if v0 != v1 then goto L51fb76;
  #L51fb74.  goto L51fbd4;
  #L51fb76.  v1:= length @variable v0;
  #L51fb78.  v2:= -1I;
  #L51fb7a.  v3:= 0I;
  #L51fb7c.  v4:= 0I;
  #L51fb7e.  if v4 >= v1 then goto L51fb94;
  #L51fb82.  v5:= v0[v4] @kind object;
  #L51fb86.  if v5 != v7 then goto L51fb8e;
  #L51fb8a.  v2:= v4;
  #L51fb8c.  goto L51fb94;
  #L51fb8e.  v4:= v4 + 1;
  #L51fb92.  goto L51fb7e;
  #L51fb94.  if v2 >= 0 then goto L51fb9a;
  #L51fb98.  return @kind void;
  #L51fb9a.  v4:= 1I;
  #L51fb9c.  if v1 != v4 then goto L51fba6;
  #L51fba0.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51fba4.  goto L51fbc4;
  #L51fba6.  v5:= v1 + -1;
  #L51fbaa.  v5:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v5];
  #L51fbae.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51fbb4.  v3:= v2 + 1;
  #L51fbb8.  v1:= v1 - v2 @kind int;
  #L51fbba.  v1:= v1 - v4 @kind int;
  #L51fbbc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51fbc2.  v1:= v5 @kind object;
  #L51fbc4.  v2:= v6.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fbc8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51fbce.  v0:= temp;
  #L51fbd0.  if v0 == 0 then goto L51fb54;
  #L51fbd4.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51f99c.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f9a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f9a6.  v0:= temp @kind object;
  #L51f9a8.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51f9ac.  if v0 != v1 then goto L51f9b6;
  #L51f9b0.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51f9b4.  return v0 @kind object;
  #L51f9b6.  v0:= 0I;
  #L51f9b8.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51f880.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f884.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f88a.  v0:= temp @kind object;
  #L51f88c.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51f890.  if v0 != v1 then goto L51f8a0;
  #L51f894.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51f898.  if v0 != 0 then goto L51f8a0;
  #L51f89c.  v0:= 1I;
  #L51f89e.  goto L51f8a2;
  #L51f8a0.  v0:= 0I;
  #L51f8a2.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.PublishProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51f8b4.  v0:= v1.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f8b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f8be.  v0:= temp @kind object;
  #L51f8c0.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L51f8c4.  v0:= length @variable v0;
  #L51f8c6.  if v0 == 0 then goto L51f8ce;
  #L51f8ca.  v0:= 1I;
  #L51f8cc.  goto L51f8d0;
  #L51f8ce.  v0:= 0I;
  #L51f8d0.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51f8e4.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f8e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f8ee.  v0:= temp @kind object;
  #L51f8f0.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51f8f4.  if v0 != v1 then goto L51f904;
  #L51f8f8.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51f8fc.  if v0 == 0 then goto L51f904;
  #L51f900.  v0:= 1I;
  #L51f902.  goto L51f906;
  #L51f904.  v0:= 0I;
  #L51f906.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.processors.PublishProcessor` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f918.  v0:= "offer called with a null value." @kind object;
  #L51f91c.  call temp:= `nullCheck`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51f922.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f926.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f92c.  v0:= temp @kind object;
  #L51f92e.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L51f932.  v1:= length @variable v0;
  #L51f934.  v2:= 0I;
  #L51f936.  v3:= 0I;
  #L51f938.  if v3 >= v1 then goto L51f954;
  #L51f93c.  v4:= v0[v3] @kind object;
  #L51f940.  call temp:= `b`(v4) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.b:()Z` @kind virtual;
  #L51f946.  v4:= temp;
  #L51f948.  if v4 == 0 then goto L51f94e;
  #L51f94c.  return v2;
  #L51f94e.  v3:= v3 + 1;
  #L51f952.  goto L51f938;
  #L51f954.  v1:= length @variable v0;
  #L51f956.  if v2 >= v1 then goto L51f96a;
  #L51f95a.  v3:= v0[v2] @kind object;
  #L51f95e.  call `e`(v3, v6) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L51f964.  v2:= v2 + 1;
  #L51f968.  goto L51f956;
  #L51f96a.  v6:= 1I;
  #L51f96c.  return v6;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51fa1c.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fa20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51fa26.  v0:= temp @kind object;
  #L51fa28.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51fa2c.  if v0 != v1 then goto L51fa32;
  #L51fa30.  return @kind void;
  #L51fa32.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fa36.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51fa3c.  v0:= temp @kind object;
  #L51fa3e.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L51fa42.  v1:= length @variable v0;
  #L51fa44.  v2:= 0I;
  #L51fa46.  if v2 >= v1 then goto L51fa5a;
  #L51fa4a.  v3:= v0[v2] @kind object;
  #L51fa4e.  call `c`(v3) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.c:()V` @kind virtual;
  #L51fa54.  v2:= v2 + 1;
  #L51fa58.  goto L51fa46;
  #L51fa5a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51fa6c.  v0:= "onError called with a null Throwable." @kind object;
  #L51fa70.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51fa76.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fa7a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51fa80.  v0:= temp @kind object;
  #L51fa82.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51fa86.  if v0 != v1 then goto L51fa92;
  #L51fa8a.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L51fa90.  return @kind void;
  #L51fa92.  v4.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L51fa96.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fa9a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51faa0.  v0:= temp @kind object;
  #L51faa2.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L51faa6.  v1:= length @variable v0;
  #L51faa8.  v2:= 0I;
  #L51faaa.  if v2 >= v1 then goto L51fabe;
  #L51faae.  v3:= v0[v2] @kind object;
  #L51fab2.  call `d`(v3, v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L51fab8.  v2:= v2 + 1;
  #L51fabc.  goto L51faaa;
  #L51fabe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51fad0.  v0:= "onNext called with a null value." @kind object;
  #L51fad4.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51fada.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fade.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51fae4.  v0:= temp @kind object;
  #L51fae6.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L51faea.  v1:= length @variable v0;
  #L51faec.  v2:= 0I;
  #L51faee.  if v2 >= v1 then goto L51fb02;
  #L51faf2.  v3:= v0[v2] @kind object;
  #L51faf6.  call `e`(v3, v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L51fafc.  v2:= v2 + 1;
  #L51fb00.  goto L51faee;
  #L51fb02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51fb14.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51fb18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51fb1e.  v0:= temp @kind object;
  #L51fb20.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L51fb24.  if v0 != v1 then goto L51fb30;
  #L51fb28.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51fb2e.  return @kind void;
  #L51fb30.  v0:= 9223372036854775807L;
  #L51fb3a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51fb40.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L51fbe8.  v0:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`;
  #L51fbec.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/PublishProcessor;)V` @kind direct;
  #L51fbf2.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L51fbf8.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.e:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)Z` @kind virtual;
  #L51fbfe.  v1:= temp;
  #L51fc00.  if v1 == 0 then goto L51fc18;
  #L51fc04.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.a:()Z` @kind virtual;
  #L51fc0a.  v3:= temp;
  #L51fc0c.  if v3 == 0 then goto L51fc2e;
  #L51fc10.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.f:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)V` @kind virtual;
  #L51fc16.  goto L51fc2e;
  #L51fc18.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51fc1c.  if v0 == 0 then goto L51fc28;
  #L51fc20.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51fc26.  goto L51fc2e;
  #L51fc28.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L51fc2e.  return @kind void;
}
