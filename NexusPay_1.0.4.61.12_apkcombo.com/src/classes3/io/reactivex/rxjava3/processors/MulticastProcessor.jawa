record `io.reactivex.rxjava3.processors.MulticastProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.processors.MulticastProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.MulticastProcessor.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.MulticastProcessor.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.MulticastProcessor.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.processors.MulticastProcessor.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.processors.MulticastProcessor.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.MulticastProcessor.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.l` @AccessFlag ;
}
global `io.reactivex.rxjava3.processors.MulticastProcessor$a`[] `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.MulticastProcessor$a`[] `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L51f0ac.  v0:= 0I;
  #L51f0ae.  v1:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v0];
  #L51f0b2.  `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] := v1 @kind object;
  #L51f0b6.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v0];
  #L51f0ba.  `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] := v0 @kind object;
  #L51f0be.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L51f0d0.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L51f0d6.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int` := v2;
  #L51f0da.  v0:= v2 ^> 2;
  #L51f0de.  v2:= v2 - v0 @kind int;
  #L51f0e0.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.f` @type ^`int` := v2;
  #L51f0e4.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L51f0e8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L51f0ee.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L51f0f2.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51f0f6.  v0:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f0fa.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L51f100.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L51f104.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51f108.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L51f10e.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L51f112.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.g` @type ^`boolean` := v3 @kind boolean;
  #L51f116.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:()Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L51efec.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L51eff0.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L51eff6.  v1:= temp;
  #L51eff8.  v2:= 0I;
  #L51effa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L51f000.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`(`int` v2 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:(I)Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L51f038.  v0:= "bufferSize" @kind object;
  #L51f03c.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L51f042.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L51f046.  v1:= 0I;
  #L51f048.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L51f04e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`(`int` v1 , `boolean` v2 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:(IZ)Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51f060.  v0:= "bufferSize" @kind object;
  #L51f064.  call temp:= `verifyPositive`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L51f06a.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L51f06e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L51f074.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`(`boolean` v2 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:(Z)Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L51f014.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L51f018.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L51f01e.  v1:= temp;
  #L51f020.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L51f026.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.MulticastProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.MulticastProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.e:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51eebc.  v0:= v4.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51eec0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51eec6.  v0:= temp @kind object;
  #L51eec8.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L51eecc.  v1:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51eed0.  v2:= 0I;
  #L51eed2.  if v0 != v1 then goto L51eed8;
  #L51eed6.  return v2;
  #L51eed8.  v1:= length @variable v0;
  #L51eeda.  v3:= v1 + 1;
  #L51eede.  v3:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v3];
  #L51eee2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51eee8.  v3[v1]:= v5 @kind object;
  #L51eeec.  v1:= v4.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51eef0.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51eef6.  v0:= temp;
  #L51eef8.  if v0 == 0 then goto L51eebc;
  #L51eefc.  v5:= 1I;
  #L51eefe.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.MulticastProcessor` v21 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L51f128.  v1:= v21 @kind object;
  #L51f12c.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L51f130.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L51f136.  v0:= temp;
  #L51f138.  if v0 == 0 then goto L51f13e;
  #L51f13c.  return @kind void;
  #L51f13e.  v2:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f142.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.k` @type ^`int`;
  #L51f146.  v3:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.f` @type ^`int`;
  #L51f14a.  v4:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int`;
  #L51f14e.  v5:= 1I;
  #L51f150.  v6:= 1I;
  #L51f152.  v7:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L51f156.  if v7 == 0 then goto L51f370;
  #L51f15a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f160.  v8:= temp @kind object;
  #L51f162.  v8:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v8 @kind object;
  #L51f166.  v9:= length @variable v8;
  #L51f168.  if v9 == 0 then goto L51f370;
  #L51f16c.  v9:= length @variable v8;
  #L51f16e.  v10:= -1L;
  #L51f172.  v14:= v10 @kind wide;
  #L51f174.  v13:= 0I;
  #L51f176.  v16:= 0L;
  #L51f17a.  if v13 >= v9 then goto L51f1be;
  #L51f17e.  v12:= v8[v13] @kind object;
  #L51f182.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51f188.  v18:= temp @kind wide;
  #L51f18a.  v20:= lcmp(v18, v16);
  #L51f18e.  if v20 < 0 then goto L51f1b4;
  #L51f192.  v16:= lcmp(v14, v10);
  #L51f196.  if v16 != 0 then goto L51f1a4;
  #L51f19a.  v14:= v12.`io.reactivex.rxjava3.processors.MulticastProcessor$a.c` @type ^`long` @kind wide;
  #L51f19e.  v14:= v18 - v14 @kind long;
  #L51f1a2.  goto L51f1b4;
  #L51f1a4.  v10:= v12.`io.reactivex.rxjava3.processors.MulticastProcessor$a.c` @type ^`long` @kind wide;
  #L51f1a8.  v10:= v18 - v10 @kind long;
  #L51f1ac.  call temp:= `min`(v14, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L51f1b2.  v14:= temp @kind wide;
  #L51f1b4.  v13:= v13 + 1;
  #L51f1b8.  v10:= -1L;
  #L51f1bc.  goto L51f176;
  #L51f1be.  v9:= v0;
  #L51f1c0.  v10:= lcmp(v14, v16);
  #L51f1c4.  if v10 <= 0 then goto L51f2d6;
  #L51f1c8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f1ce.  v0:= temp @kind object;
  #L51f1d0.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L51f1d4.  v11:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f1d8.  if v0 != v11 then goto L51f1e4;
  #L51f1dc.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L51f1e2.  return @kind void;
  #L51f1e4.  if v8 == v0 then goto L51f1ec;
  #L51f1e8.  goto L51f2fa;
  #L51f1ec.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51f1f0.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L51f1f6.  v11:= temp @kind object;
  #L51f1f8.  goto L51f21c;
  #L51f1fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51f1fc.  v11:= v0 @kind object;
  #L51f1fe.  call `throwIfFatal`(v11) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L51f204.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f208.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L51f20e.  v0:= 0I;
  #L51f210.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` := v11 @kind object;
  #L51f214.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v5 @kind boolean;
  #L51f218.  v11:= v0 @kind object;
  #L51f21a.  v0:= 1I;
  #L51f21c.  if v11 != 0 then goto L51f224;
  #L51f220.  v12:= 1I;
  #L51f222.  goto L51f226;
  #L51f224.  v12:= 0I;
  #L51f226.  if v0 == 0 then goto L51f288;
  #L51f22a.  if v12 == 0 then goto L51f288;
  #L51f22e.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L51f232.  if v0 == 0 then goto L51f25e;
  #L51f236.  v3:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f23a.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51f240.  v2:= temp @kind object;
  #L51f242.  v2:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v2 @kind object;
  #L51f246.  v3:= length @variable v2;
  #L51f248.  v12:= 0I;
  #L51f24a.  if v12 >= v3 then goto L51f286;
  #L51f24e.  v4:= v2[v12] @kind object;
  #L51f252.  call `b`(v4, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L51f258.  v12:= v12 + 1;
  #L51f25c.  goto L51f24a;
  #L51f25e.  v0:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f262.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51f268.  v0:= temp @kind object;
  #L51f26a.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L51f26e.  v2:= length @variable v0;
  #L51f270.  v12:= 0I;
  #L51f272.  if v12 >= v2 then goto L51f286;
  #L51f276.  v3:= v0[v12] @kind object;
  #L51f27a.  call `a`(v3) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.a:()V` @kind virtual;
  #L51f280.  v12:= v12 + 1;
  #L51f284.  goto L51f272;
  #L51f286.  return @kind void;
  #L51f288.  if v12 == 0 then goto L51f28e;
  #L51f28c.  goto L51f2d6;
  #L51f28e.  v0:= length @variable v8;
  #L51f290.  v10:= 0I;
  #L51f292.  if v10 >= v0 then goto L51f2a6;
  #L51f296.  v12:= v8[v10] @kind object;
  #L51f29a.  call `c`(v12, v11) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L51f2a0.  v10:= v10 + 1;
  #L51f2a4.  goto L51f292;
  #L51f2a6.  v10:= 1L;
  #L51f2aa.  v14:= v14 - v10 @kind long;
  #L51f2ac.  if v4 == v5 then goto L51f1c0;
  #L51f2b0.  v9:= v9 + 1;
  #L51f2b4.  if v9 != v3 then goto L51f1c0;
  #L51f2b8.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f2bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f2c2.  v0:= temp @kind object;
  #L51f2c4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L51f2c8.  v9:= (`long`) v3 @kind i2l;
  #L51f2ca.  call `request`(v0, v9) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51f2d0.  v9:= 0I;
  #L51f2d2.  goto L51f1c0;
  #L51f2d6.  if v10 != 0 then goto L51f36e;
  #L51f2da.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f2e0.  v0:= temp @kind object;
  #L51f2e2.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L51f2e6.  v10:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f2ea.  if v0 != v10 then goto L51f2f6;
  #L51f2ee.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L51f2f4.  return @kind void;
  #L51f2f6.  if v8 == v0 then goto L51f300;
  #L51f2fa.  v0:= v9;
  #L51f2fc.  goto L51f152;
  #L51f300.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51f304.  if v0 == 0 then goto L51f36e;
  #L51f308.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L51f30e.  v0:= temp;
  #L51f310.  if v0 == 0 then goto L51f36e;
  #L51f314.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L51f318.  if v0 == 0 then goto L51f344;
  #L51f31c.  v3:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f320.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51f326.  v2:= temp @kind object;
  #L51f328.  v2:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v2 @kind object;
  #L51f32c.  v3:= length @variable v2;
  #L51f32e.  v12:= 0I;
  #L51f330.  if v12 >= v3 then goto L51f36c;
  #L51f334.  v4:= v2[v12] @kind object;
  #L51f338.  call `b`(v4, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L51f33e.  v12:= v12 + 1;
  #L51f342.  goto L51f330;
  #L51f344.  v0:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f348.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51f34e.  v0:= temp @kind object;
  #L51f350.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L51f354.  v2:= length @variable v0;
  #L51f356.  v12:= 0I;
  #L51f358.  if v12 >= v2 then goto L51f36c;
  #L51f35c.  v3:= v0[v12] @kind object;
  #L51f360.  call `a`(v3) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.a:()V` @kind virtual;
  #L51f366.  v12:= v12 + 1;
  #L51f36a.  goto L51f358;
  #L51f36c.  return @kind void;
  #L51f36e.  v0:= v9;
  #L51f370.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.k` @type ^`int` := v0;
  #L51f374.  v7:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L51f378.  v6:= -v6 @kind int;
  #L51f37a.  call temp:= `addAndGet`(v7, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L51f380.  v6:= temp;
  #L51f382.  if v6 != 0 then goto L51f152;
  #L51f386.  return @kind void;
  catch `java.lang.Throwable` @[L51f1f0..L51f1f8] goto L51f1fa;
}
procedure `void` `g`(`io.reactivex.rxjava3.processors.MulticastProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.MulticastProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.g:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51f4f0.  v0:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f4f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51f4fa.  v0:= temp @kind object;
  #L51f4fc.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L51f500.  v1:= length @variable v0;
  #L51f502.  if v1 != 0 then goto L51f508;
  #L51f506.  return @kind void;
  #L51f508.  v2:= -1I;
  #L51f50a.  v3:= 0I;
  #L51f50c.  v4:= 0I;
  #L51f50e.  if v4 >= v1 then goto L51f524;
  #L51f512.  v5:= v0[v4] @kind object;
  #L51f516.  if v5 != v7 then goto L51f51e;
  #L51f51a.  v2:= v4;
  #L51f51c.  goto L51f524;
  #L51f51e.  v4:= v4 + 1;
  #L51f522.  goto L51f50e;
  #L51f524.  if v2 >= 0 then goto L51f52a;
  #L51f528.  goto L51f59e;
  #L51f52a.  v4:= 1I;
  #L51f52c.  if v1 != v4 then goto L51f572;
  #L51f530.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.g` @type ^`boolean` @kind boolean;
  #L51f534.  if v1 == 0 then goto L51f55c;
  #L51f538.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f53c.  v2:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f540.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51f546.  v0:= temp;
  #L51f548.  if v0 == 0 then goto L51f4f0;
  #L51f54c.  v7:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f550.  call temp:= `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L51f556.  v6.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v4 @kind boolean;
  #L51f55a.  goto L51f59e;
  #L51f55c.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f560.  v2:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L51f564.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51f56a.  v0:= temp;
  #L51f56c.  if v0 == 0 then goto L51f4f0;
  #L51f570.  goto L51f59e;
  #L51f572.  v5:= v1 + -1;
  #L51f576.  v5:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v5];
  #L51f57a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51f580.  v3:= v2 + 1;
  #L51f584.  v1:= v1 - v2 @kind int;
  #L51f586.  v1:= v1 - v4 @kind int;
  #L51f588.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51f58e.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f592.  call temp:= `compareAndSet`(v1, v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51f598.  v0:= temp;
  #L51f59a.  if v0 == 0 then goto L51f4f0;
  #L51f59e.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51f088.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51f08c.  if v0 == 0 then goto L51f096;
  #L51f090.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L51f094.  goto L51f098;
  #L51f096.  v0:= 0I;
  #L51f098.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51ef10.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51ef14.  if v0 == 0 then goto L51ef24;
  #L51ef18.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L51ef1c.  if v0 != 0 then goto L51ef24;
  #L51ef20.  v0:= 1I;
  #L51ef22.  goto L51ef26;
  #L51ef24.  v0:= 0I;
  #L51ef26.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51ef38.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51ef3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51ef42.  v0:= temp @kind object;
  #L51ef44.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L51ef48.  v0:= length @variable v0;
  #L51ef4a.  if v0 == 0 then goto L51ef52;
  #L51ef4e.  v0:= 1I;
  #L51ef50.  goto L51ef54;
  #L51ef52.  v0:= 0I;
  #L51ef54.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51ef68.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51ef6c.  if v0 == 0 then goto L51ef7c;
  #L51ef70.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L51ef74.  if v0 == 0 then goto L51ef7c;
  #L51ef78.  v0:= 1I;
  #L51ef7a.  goto L51ef7e;
  #L51ef7c.  v0:= 0I;
  #L51ef7e.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.processors.MulticastProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51ef90.  v0:= "offer called with a null value." @kind object;
  #L51ef94.  call temp:= `nullCheck`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51ef9a.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51ef9e.  v1:= 0I;
  #L51efa0.  if v0 == 0 then goto L51efa6;
  #L51efa4.  return v1;
  #L51efa6.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int`;
  #L51efaa.  if v0 != 0 then goto L51efca;
  #L51efae.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L51efb2.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L51efb8.  v3:= temp;
  #L51efba.  if v3 == 0 then goto L51efc8;
  #L51efbe.  call `f`(v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L51efc4.  v3:= 1I;
  #L51efc6.  return v3;
  #L51efc8.  return v1;
  #L51efca.  v3:= new `java.lang.IllegalStateException`;
  #L51efce.  v0:= "offer() should not be called in fusion mode!" @kind object;
  #L51efd2.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51efd8.  throw v3;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51f3a4.  v0:= 1I;
  #L51f3a6.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v0 @kind boolean;
  #L51f3aa.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L51f3b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51f3c4.  v0:= "onError called with a null Throwable." @kind object;
  #L51f3c8.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51f3ce.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51f3d2.  if v0 != 0 then goto L51f3e8;
  #L51f3d6.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L51f3da.  v2:= 1I;
  #L51f3dc.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v2 @kind boolean;
  #L51f3e0.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L51f3e6.  return @kind void;
  #L51f3e8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L51f3ee.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51f400.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51f404.  if v0 == 0 then goto L51f40a;
  #L51f408.  return @kind void;
  #L51f40a.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int`;
  #L51f40e.  if v0 != 0 then goto L51f448;
  #L51f412.  v0:= "onNext called with a null value." @kind object;
  #L51f416.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51f41c.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L51f420.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L51f426.  v2:= temp;
  #L51f428.  if v2 != 0 then goto L51f448;
  #L51f42c.  v2:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f430.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L51f436.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L51f43a.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L51f440.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L51f446.  return @kind void;
  #L51f448.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L51f44e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.MulticastProcessor` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L51f460.  v0:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f464.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L51f46a.  v0:= temp;
  #L51f46c.  if v0 == 0 then goto L51f4dc;
  #L51f470.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L51f474.  if v0 == 0 then goto L51f4be;
  #L51f478.  v0:= v4 @kind object;
  #L51f47a.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L51f47e.  v1:= 3I;
  #L51f480.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L51f486.  v1:= temp;
  #L51f488.  v2:= 1I;
  #L51f48a.  if v1 != v2 then goto L51f4a2;
  #L51f48e.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int` := v1;
  #L51f492.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L51f496.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v2 @kind boolean;
  #L51f49a.  call `f`(v3) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L51f4a0.  return @kind void;
  #L51f4a2.  v2:= 2I;
  #L51f4a4.  if v1 != v2 then goto L51f4be;
  #L51f4a8.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int` := v1;
  #L51f4ac.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L51f4b0.  v0:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L51f4b4.  v0:= (`long`) v0 @kind i2l;
  #L51f4b6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51f4bc.  return @kind void;
  #L51f4be.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L51f4c2.  v1:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L51f4c6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L51f4cc.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L51f4d0.  v0:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L51f4d4.  v0:= (`long`) v0 @kind i2l;
  #L51f4d6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51f4dc.  return @kind void;
}
procedure `void` `start`(`io.reactivex.rxjava3.processors.MulticastProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51f5b0.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f5b4.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.rxjava3.internal.subscriptions.EmptySubscription` @kind object;
  #L51f5b8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L51f5be.  v0:= temp;
  #L51f5c0.  if v0 == 0 then goto L51f5d6;
  #L51f5c4.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L51f5c8.  v1:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L51f5cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L51f5d2.  v2.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L51f5d6.  return @kind void;
}
procedure `void` `startUnbounded`(`io.reactivex.rxjava3.processors.MulticastProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.startUnbounded:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51f5e8.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51f5ec.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.rxjava3.internal.subscriptions.EmptySubscription` @kind object;
  #L51f5f0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L51f5f6.  v0:= temp;
  #L51f5f8.  if v0 == 0 then goto L51f60e;
  #L51f5fc.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L51f600.  v1:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L51f604.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L51f60a.  v2.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L51f60e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.MulticastProcessor` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f620.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`;
  #L51f624.  call `<init>`(v0, v6, v5) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/MulticastProcessor;)V` @kind direct;
  #L51f62a.  call `onSubscribe`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L51f630.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.e:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)Z` @kind virtual;
  #L51f636.  v1:= temp;
  #L51f638.  if v1 == 0 then goto L51f660;
  #L51f63c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51f642.  v1:= temp @kind wide;
  #L51f644.  v3:= -9223372036854775808L;
  #L51f648.  v6:= lcmp(v1, v3);
  #L51f64c.  if v6 != 0 then goto L51f658;
  #L51f650.  call `g`(v5, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.g:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)V` @kind virtual;
  #L51f656.  goto L51f67e;
  #L51f658.  call `f`(v5) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L51f65e.  goto L51f67e;
  #L51f660.  v0:= v5.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L51f664.  if v0 == 0 then goto L51f678;
  #L51f668.  v0:= v5.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L51f66c.  if v0 == 0 then goto L51f678;
  #L51f670.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51f676.  return @kind void;
  #L51f678.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L51f67e.  return @kind void;
}
