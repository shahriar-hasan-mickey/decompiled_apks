record `io.reactivex.rxjava3.processors.PublishProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.processors.PublishProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.processors.PublishProcessor` `io.reactivex.rxjava3.processors.PublishProcessor$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.processors.PublishProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/PublishProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L51f6e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L51f6ee.  v0.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L51f6f2.  v0.`io.reactivex.rxjava3.processors.PublishProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.PublishProcessor` := v2 @kind object;
  #L51f6f6.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f690.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51f696.  v0:= temp @kind wide;
  #L51f698.  v2:= -9223372036854775808L;
  #L51f69c.  v4:= lcmp(v0, v2);
  #L51f6a0.  if v4 != 0 then goto L51f6a8;
  #L51f6a4.  v0:= 1I;
  #L51f6a6.  goto L51f6aa;
  #L51f6a8.  v0:= 0I;
  #L51f6aa.  return v0;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f6bc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51f6c2.  v0:= temp @kind wide;
  #L51f6c4.  v2:= 0L;
  #L51f6c8.  v4:= lcmp(v0, v2);
  #L51f6cc.  if v4 != 0 then goto L51f6d4;
  #L51f6d0.  v0:= 1I;
  #L51f6d2.  goto L51f6d6;
  #L51f6d4.  v0:= 0I;
  #L51f6d6.  return v0;
}
procedure `void` `c`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f738.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51f73e.  v0:= temp @kind wide;
  #L51f740.  v2:= -9223372036854775808L;
  #L51f744.  v4:= lcmp(v0, v2);
  #L51f748.  if v4 == 0 then goto L51f756;
  #L51f74c.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51f750.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L51f756.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f708.  v0:= -9223372036854775808L;
  #L51f70c.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L51f712.  v2:= temp @kind wide;
  #L51f714.  v4:= lcmp(v2, v0);
  #L51f718.  if v4 == 0 then goto L51f726;
  #L51f71c.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.PublishProcessor` @kind object;
  #L51f720.  call `f`(v0, v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.f:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)V` @kind virtual;
  #L51f726.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f768.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51f76e.  v0:= temp @kind wide;
  #L51f770.  v2:= -9223372036854775808L;
  #L51f774.  v4:= lcmp(v0, v2);
  #L51f778.  if v4 == 0 then goto L51f788;
  #L51f77c.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51f780.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51f786.  goto L51f78e;
  #L51f788.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L51f78e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51f7a0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L51f7a6.  v0:= temp @kind wide;
  #L51f7a8.  v2:= -9223372036854775808L;
  #L51f7ac.  v4:= lcmp(v0, v2);
  #L51f7b0.  if v4 != 0 then goto L51f7b6;
  #L51f7b4.  return @kind void;
  #L51f7b6.  v2:= 0L;
  #L51f7ba.  v4:= lcmp(v0, v2);
  #L51f7be.  if v4 == 0 then goto L51f7d8;
  #L51f7c2.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51f7c6.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L51f7cc.  v0:= 1L;
  #L51f7d0.  call temp:= `producedCancel`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L51f7d6.  goto L51f7f6;
  #L51f7d8.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.cancel:()V` @kind virtual;
  #L51f7de.  v6:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51f7e2.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L51f7e6.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L51f7ea.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51f7f0.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51f7f6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51f808.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L51f80e.  v0:= temp;
  #L51f810.  if v0 == 0 then goto L51f81a;
  #L51f814.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L51f81a.  return @kind void;
}
