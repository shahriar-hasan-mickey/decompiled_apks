record `io.reactivex.rxjava3.processors.AsyncProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.AsyncProcessor.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.AsyncProcessor.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.processors.AsyncProcessor.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.processors.AsyncProcessor$a`[] `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.AsyncProcessor$a`[] `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L51e1f0.  v0:= 0I;
  #L51e1f2.  v1:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v0];
  #L51e1f6.  `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] := v1 @kind object;
  #L51e1fa.  v0:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v0];
  #L51e1fe.  `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] := v0 @kind object;
  #L51e202.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L51e214.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L51e21a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51e21e.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e222.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L51e228.  v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L51e22c.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.AsyncProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.create:()Lio/reactivex/rxjava3/processors/AsyncProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51e174.  v0:= new `io.reactivex.rxjava3.processors.AsyncProcessor`;
  #L51e178.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.<init>:()V` @kind direct;
  #L51e17e.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.AsyncProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.AsyncProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.e:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51e054.  v0:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e058.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e05e.  v0:= temp @kind object;
  #L51e060.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L51e064.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e068.  v2:= 0I;
  #L51e06a.  if v0 != v1 then goto L51e070;
  #L51e06e.  return v2;
  #L51e070.  v1:= length @variable v0;
  #L51e072.  v3:= v1 + 1;
  #L51e076.  v3:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v3];
  #L51e07a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51e080.  v3[v1]:= v5 @kind object;
  #L51e084.  v1:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e088.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51e08e.  v0:= temp;
  #L51e090.  if v0 == 0 then goto L51e054;
  #L51e094.  v5:= 1I;
  #L51e096.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.AsyncProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.AsyncProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.f:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L51e394.  v0:= v6.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e398.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e39e.  v0:= temp @kind object;
  #L51e3a0.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L51e3a4.  v1:= length @variable v0;
  #L51e3a6.  if v1 != 0 then goto L51e3ac;
  #L51e3aa.  return @kind void;
  #L51e3ac.  v2:= -1I;
  #L51e3ae.  v3:= 0I;
  #L51e3b0.  v4:= 0I;
  #L51e3b2.  if v4 >= v1 then goto L51e3c8;
  #L51e3b6.  v5:= v0[v4] @kind object;
  #L51e3ba.  if v5 != v7 then goto L51e3c2;
  #L51e3be.  v2:= v4;
  #L51e3c0.  goto L51e3c8;
  #L51e3c2.  v4:= v4 + 1;
  #L51e3c6.  goto L51e3b2;
  #L51e3c8.  if v2 >= 0 then goto L51e3ce;
  #L51e3cc.  return @kind void;
  #L51e3ce.  v4:= 1I;
  #L51e3d0.  if v1 != v4 then goto L51e3da;
  #L51e3d4.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e3d8.  goto L51e3f8;
  #L51e3da.  v5:= v1 + -1;
  #L51e3de.  v5:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v5];
  #L51e3e2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51e3e8.  v3:= v2 + 1;
  #L51e3ec.  v1:= v1 - v2 @kind int;
  #L51e3ee.  v1:= v1 - v4 @kind int;
  #L51e3f0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L51e3f6.  v1:= v5 @kind object;
  #L51e3f8.  v2:= v6.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e3fc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51e402.  v0:= temp;
  #L51e404.  if v0 == 0 then goto L51e394;
  #L51e408.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e1c0.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e1c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e1ca.  v0:= temp @kind object;
  #L51e1cc.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e1d0.  if v0 != v1 then goto L51e1da;
  #L51e1d4.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51e1d8.  goto L51e1dc;
  #L51e1da.  v0:= 0I;
  #L51e1dc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e190.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e194.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e19a.  v0:= temp @kind object;
  #L51e19c.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e1a0.  if v0 != v1 then goto L51e1aa;
  #L51e1a4.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L51e1a8.  goto L51e1ac;
  #L51e1aa.  v0:= 0I;
  #L51e1ac.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e0a8.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e0ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e0b2.  v0:= temp @kind object;
  #L51e0b4.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e0b8.  if v0 != v1 then goto L51e0c8;
  #L51e0bc.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51e0c0.  if v0 != 0 then goto L51e0c8;
  #L51e0c4.  v0:= 1I;
  #L51e0c6.  goto L51e0ca;
  #L51e0c8.  v0:= 0I;
  #L51e0ca.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.AsyncProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51e0dc.  v0:= v1.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e0e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e0e6.  v0:= temp @kind object;
  #L51e0e8.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L51e0ec.  v0:= length @variable v0;
  #L51e0ee.  if v0 == 0 then goto L51e0f6;
  #L51e0f2.  v0:= 1I;
  #L51e0f4.  goto L51e0f8;
  #L51e0f6.  v0:= 0I;
  #L51e0f8.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e10c.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e110.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e116.  v0:= temp @kind object;
  #L51e118.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e11c.  if v0 != v1 then goto L51e12c;
  #L51e120.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51e124.  if v0 == 0 then goto L51e12c;
  #L51e128.  v0:= 1I;
  #L51e12a.  goto L51e12e;
  #L51e12c.  v0:= 0I;
  #L51e12e.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e140.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e144.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e14a.  v0:= temp @kind object;
  #L51e14c.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e150.  if v0 != v1 then goto L51e160;
  #L51e154.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L51e158.  if v0 == 0 then goto L51e160;
  #L51e15c.  v0:= 1I;
  #L51e15e.  goto L51e162;
  #L51e160.  v0:= 0I;
  #L51e162.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.AsyncProcessor` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51e240.  v0:= v5.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e244.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e24a.  v0:= temp @kind object;
  #L51e24c.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e250.  if v0 != v1 then goto L51e256;
  #L51e254.  return @kind void;
  #L51e256.  v0:= v5.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L51e25a.  v2:= v5.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e25e.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51e264.  v1:= temp @kind object;
  #L51e266.  v1:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v1 @kind object;
  #L51e26a.  v2:= 0I;
  #L51e26c.  if v0 != 0 then goto L51e286;
  #L51e270.  v0:= length @variable v1;
  #L51e272.  if v2 >= v0 then goto L51e29c;
  #L51e276.  v3:= v1[v2] @kind object;
  #L51e27a.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L51e280.  v2:= v2 + 1;
  #L51e284.  goto L51e272;
  #L51e286.  v3:= length @variable v1;
  #L51e288.  if v2 >= v3 then goto L51e29c;
  #L51e28c.  v4:= v1[v2] @kind object;
  #L51e290.  call `complete`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L51e296.  v2:= v2 + 1;
  #L51e29a.  goto L51e288;
  #L51e29c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.AsyncProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51e2b0.  v0:= "onError called with a null Throwable." @kind object;
  #L51e2b4.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51e2ba.  v0:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e2be.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e2c4.  v0:= temp @kind object;
  #L51e2c6.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e2ca.  if v0 != v1 then goto L51e2d6;
  #L51e2ce.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L51e2d4.  return @kind void;
  #L51e2d6.  v0:= 0I;
  #L51e2d8.  v4.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v0 @kind object;
  #L51e2dc.  v4.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L51e2e0.  v0:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e2e4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51e2ea.  v0:= temp @kind object;
  #L51e2ec.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L51e2f0.  v1:= length @variable v0;
  #L51e2f2.  v2:= 0I;
  #L51e2f4.  if v2 >= v1 then goto L51e308;
  #L51e2f8.  v3:= v0[v2] @kind object;
  #L51e2fc.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L51e302.  v2:= v2 + 1;
  #L51e306.  goto L51e2f4;
  #L51e308.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e31c.  v0:= "onNext called with a null value." @kind object;
  #L51e320.  call temp:= `nullCheck`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51e326.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e32a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e330.  v0:= temp @kind object;
  #L51e332.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e336.  if v0 != v1 then goto L51e33c;
  #L51e33a.  return @kind void;
  #L51e33c.  v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v3 @kind object;
  #L51e340.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L51e354.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51e358.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51e35e.  v0:= temp @kind object;
  #L51e360.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L51e364.  if v0 != v1 then goto L51e370;
  #L51e368.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51e36e.  return @kind void;
  #L51e370.  v0:= 9223372036854775807L;
  #L51e37a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51e380.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L51e41c.  v0:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`;
  #L51e420.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/AsyncProcessor;)V` @kind direct;
  #L51e426.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L51e42c.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.e:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)Z` @kind virtual;
  #L51e432.  v1:= temp;
  #L51e434.  if v1 == 0 then goto L51e44c;
  #L51e438.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L51e43e.  v3:= temp;
  #L51e440.  if v3 == 0 then goto L51e472;
  #L51e444.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.f:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)V` @kind virtual;
  #L51e44a.  goto L51e472;
  #L51e44c.  v1:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L51e450.  if v1 == 0 then goto L51e45c;
  #L51e454.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51e45a.  goto L51e472;
  #L51e45c.  v3:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L51e460.  if v3 == 0 then goto L51e46c;
  #L51e464.  call `complete`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L51e46a.  goto L51e472;
  #L51e46c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L51e472.  return @kind void;
}
