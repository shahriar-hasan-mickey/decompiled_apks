record `io.reactivex.rxjava3.observers.TestObserver` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.observers.BaseTestConsumer` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.observers.TestObserver.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.observers.TestObserver.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L51c0cc.  v0:= `@@io.reactivex.rxjava3.observers.TestObserver$a.INSTANCE` @type ^`io.reactivex.rxjava3.observers.TestObserver$a` @kind object;
  #L51c0d0.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L51c0d6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L51c0e8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L51c0ee.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51c0f2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L51c0f8.  v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L51c0fc.  v1.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L51c100.  return @kind void;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `create`() @signature `Lio/reactivex/rxjava3/observers/TestObserver;.create:()Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51c094.  v0:= new `io.reactivex.rxjava3.observers.TestObserver`;
  #L51c098.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:()V` @kind direct;
  #L51c09e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `create`(`io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.create:(Lio/reactivex/rxjava3/core/Observer;)Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51c0b0.  v0:= new `io.reactivex.rxjava3.observers.TestObserver`;
  #L51c0b4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L51c0ba.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L51c048.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.assertSubscribed:()Lio/reactivex/rxjava3/observers/TestObserver;` @kind virtual;
  #L51c04e.  v0:= temp @kind object;
  #L51c050.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `assertSubscribed`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.assertSubscribed:()Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L51c064.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c068.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51c06e.  v0:= temp @kind object;
  #L51c070.  if v0 == 0 then goto L51c076;
  #L51c074.  return v1 @kind object;
  #L51c076.  v0:= "Not subscribed!" @kind object;
  #L51c07a.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L51c080.  v0:= temp @kind object;
  #L51c082.  throw v0;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L51c114.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c118.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L51c11e.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L51bff4.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51bff8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51bffe.  v0:= temp @kind object;
  #L51c000.  if v0 == 0 then goto L51c008;
  #L51c004.  v0:= 1I;
  #L51c006.  goto L51c00a;
  #L51c008.  v0:= 0I;
  #L51c00a.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L51c01c.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c020.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51c026.  v0:= temp @kind object;
  #L51c028.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L51c02c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L51c032.  v0:= temp;
  #L51c034.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.observers.TestObserver` v4 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51c130.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L51c134.  if v0 != 0 then goto L51c166;
  #L51c138.  v0:= 1I;
  #L51c13a.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L51c13e.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c142.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51c148.  v0:= temp @kind object;
  #L51c14a.  if v0 != 0 then goto L51c166;
  #L51c14e.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c152.  v1:= new `java.lang.IllegalStateException`;
  #L51c156.  v2:= "onSubscribe not called in proper order" @kind object;
  #L51c15a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51c160.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c166.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L51c16c.  v0:= temp @kind object;
  #L51c16e.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L51c172.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L51c176.  v2:= 1L;
  #L51c17a.  v0:= v0 + v2 @kind long;
  #L51c17c.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L51c180.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L51c184.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L51c18a.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L51c18e.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L51c194.  return @kind void;
  #L51c196.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51c198.  v1:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L51c19c.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L51c1a2.  throw v0;
  catch `java.lang.Throwable` @[L51c166..L51c18a] goto L51c196;
}
procedure `void` `onError`(`io.reactivex.rxjava3.observers.TestObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L51c1c0.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L51c1c4.  if v0 != 0 then goto L51c1f6;
  #L51c1c8.  v0:= 1I;
  #L51c1ca.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L51c1ce.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c1d2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51c1d8.  v0:= temp @kind object;
  #L51c1da.  if v0 != 0 then goto L51c1f6;
  #L51c1de.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c1e2.  v1:= new `java.lang.IllegalStateException`;
  #L51c1e6.  v2:= "onSubscribe not called in proper order" @kind object;
  #L51c1ea.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51c1f0.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c1f6.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L51c1fc.  v0:= temp @kind object;
  #L51c1fe.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L51c202.  if v4 != 0 then goto L51c220;
  #L51c206.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c20a.  v1:= new `java.lang.NullPointerException`;
  #L51c20e.  v2:= "onError received a null Throwable" @kind object;
  #L51c212.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51c218.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c21e.  goto L51c22a;
  #L51c220.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c224.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c22a.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L51c22e.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L51c234.  v4:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L51c238.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L51c23e.  return @kind void;
  #L51c240.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51c242.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L51c246.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L51c24c.  throw v4;
  catch `java.lang.Throwable` @[L51c1f6..L51c234] goto L51c240;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.observers.TestObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L51c26c.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L51c270.  if v0 != 0 then goto L51c2a2;
  #L51c274.  v0:= 1I;
  #L51c276.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L51c27a.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c27e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51c284.  v0:= temp @kind object;
  #L51c286.  if v0 != 0 then goto L51c2a2;
  #L51c28a.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c28e.  v1:= new `java.lang.IllegalStateException`;
  #L51c292.  v2:= "onSubscribe not called in proper order" @kind object;
  #L51c296.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51c29c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c2a2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L51c2a8.  v0:= temp @kind object;
  #L51c2aa.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L51c2ae.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L51c2b2.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c2b8.  if v4 != 0 then goto L51c2d4;
  #L51c2bc.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c2c0.  v1:= new `java.lang.NullPointerException`;
  #L51c2c4.  v2:= "onNext received a null value" @kind object;
  #L51c2c8.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51c2ce.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c2d4.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L51c2d8.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L51c2de.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.observers.TestObserver` v4 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51c2f0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L51c2f6.  v0:= temp @kind object;
  #L51c2f8.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L51c2fc.  if v5 != 0 then goto L51c31a;
  #L51c300.  v5:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c304.  v0:= new `java.lang.NullPointerException`;
  #L51c308.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L51c30c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51c312.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c318.  return @kind void;
  #L51c31a.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c31e.  v1:= 0I;
  #L51c320.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51c326.  v0:= temp;
  #L51c328.  if v0 != 0 then goto L51c37e;
  #L51c32c.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L51c332.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51c336.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51c33c.  v0:= temp @kind object;
  #L51c33e.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L51c342.  if v0 == v1 then goto L51c37c;
  #L51c346.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L51c34a.  v1:= new `java.lang.IllegalStateException`;
  #L51c34e.  v2:= new `java.lang.StringBuilder`;
  #L51c352.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L51c358.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L51c35c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L51c362.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L51c368.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L51c36e.  v5:= temp @kind object;
  #L51c370.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51c376.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51c37c.  return @kind void;
  #L51c37e.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L51c382.  call `onSubscribe`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L51c388.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.observers.TestObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L51c39c.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L51c3a2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onComplete:()V` @kind virtual;
  #L51c3a8.  return @kind void;
}
