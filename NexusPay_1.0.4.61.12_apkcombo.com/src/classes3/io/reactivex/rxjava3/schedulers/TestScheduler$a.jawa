record `io.reactivex.rxjava3.schedulers.TestScheduler$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Scheduler$Worker` @kind class {
  `boolean` `io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.schedulers.TestScheduler` `io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v0 @kind this, `io.reactivex.rxjava3.schedulers.TestScheduler` v1 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L521e00.  v0.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` := v1 @kind object;
  #L521e04.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.<init>:()V` @kind direct;
  #L521e0a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L521e1c.  v0:= 1I;
  #L521e1e.  v1.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` := v0 @kind boolean;
  #L521e22.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L521ce8.  v0:= v1.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L521cec.  return v0;
}
procedure `long` `now`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L521de0.  v0:= v2.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L521de4.  call temp:= `now`(v0, v3) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L521dea.  v0:= temp @kind wide;
  #L521dec.  return v0 @kind wide;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L521d00.  v0:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L521d04.  if v0 == 0 then goto L521d0e;
  #L521d08.  v11:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L521d0c.  return v11 @kind object;
  #L521d0e.  v7:= new `io.reactivex.rxjava3.schedulers.TestScheduler$b`;
  #L521d12.  v2:= 0L;
  #L521d16.  v0:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L521d1a.  v5:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` @kind wide;
  #L521d1e.  v8:= 1L;
  #L521d22.  v8:= v8 + v5 @kind long;
  #L521d24.  v0.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` := v8 @kind wide;
  #L521d28.  v0:= v7 @kind object;
  #L521d2a.  v1:= v10 @kind object;
  #L521d2c.  v4:= v11 @kind object;
  #L521d2e.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L521d34.  v11:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L521d38.  v11:= v11.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L521d3c.  call temp:= `add`(v11, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L521d42.  v11:= new `io.reactivex.rxjava3.schedulers.TestScheduler$a$a`;
  #L521d46.  call `<init>`(v11, v10, v7) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;Lio/reactivex/rxjava3/schedulers/TestScheduler$b;)V` @kind direct;
  #L521d4c.  call temp:= `c`(v11) @signature `Lio/reactivex/rxjava3/disposables/a;.c:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L521d52.  v11:= temp @kind object;
  #L521d54.  return v11 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.schedulers.TestScheduler$a` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L521d68.  v0:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L521d6c.  if v0 == 0 then goto L521d76;
  #L521d70.  v9:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L521d74.  return v9 @kind object;
  #L521d76.  v7:= new `io.reactivex.rxjava3.schedulers.TestScheduler$b`;
  #L521d7a.  v0:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L521d7e.  v0:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L521d82.  call temp:= `toNanos`(v12, v10) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L521d88.  v10:= temp @kind wide;
  #L521d8a.  v2:= v0 + v10 @kind long;
  #L521d8e.  v10:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L521d92.  v5:= v10.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` @kind wide;
  #L521d96.  v11:= 1L;
  #L521d9a.  v11:= v11 + v5 @kind long;
  #L521d9c.  v10.`io.reactivex.rxjava3.schedulers.TestScheduler.c` @type ^`long` := v11 @kind wide;
  #L521da0.  v0:= v7 @kind object;
  #L521da2.  v1:= v8 @kind object;
  #L521da4.  v4:= v9 @kind object;
  #L521da6.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L521dac.  v9:= v8.`io.reactivex.rxjava3.schedulers.TestScheduler$a.b` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler` @kind object;
  #L521db0.  v9:= v9.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L521db4.  call temp:= `add`(v9, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L521dba.  v9:= new `io.reactivex.rxjava3.schedulers.TestScheduler$a$a`;
  #L521dbe.  call `<init>`(v9, v8, v7) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler$a;Lio/reactivex/rxjava3/schedulers/TestScheduler$b;)V` @kind direct;
  #L521dc4.  call temp:= `c`(v9) @signature `Lio/reactivex/rxjava3/disposables/a;.c:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L521dca.  v9:= temp @kind object;
  #L521dcc.  return v9 @kind object;
}
