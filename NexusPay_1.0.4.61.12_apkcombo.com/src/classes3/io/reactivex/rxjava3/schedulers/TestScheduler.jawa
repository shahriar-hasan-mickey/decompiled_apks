record `io.reactivex.rxjava3.schedulers.TestScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler` @kind class {
  `java.util.Queue` `io.reactivex.rxjava3.schedulers.TestScheduler.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.schedulers.TestScheduler.c` @AccessFlag ;
  `long` `io.reactivex.rxjava3.schedulers.TestScheduler.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L521f40.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L521f46.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L521f4a.  v1:= 11I;
  #L521f4e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:(I)V` @kind direct;
  #L521f54.  v2.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` := v0 @kind object;
  #L521f58.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.<init>:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L521f6c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L521f72.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L521f76.  v1:= 11I;
  #L521f7a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:(I)V` @kind direct;
  #L521f80.  v2.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` := v0 @kind object;
  #L521f84.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L521f8a.  v3:= temp @kind wide;
  #L521f8c.  v2.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` := v3 @kind wide;
  #L521f90.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.schedulers.TestScheduler` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.b:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52200c.  v0:= v6.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L522010.  call temp:= `peek`(v0) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L522016.  v0:= temp @kind object;
  #L522018.  v0:= (`io.reactivex.rxjava3.schedulers.TestScheduler$b`) v0 @kind object;
  #L52201c.  if v0 == 0 then goto L522064;
  #L522020.  v1:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler$b.a` @type ^`long` @kind wide;
  #L522024.  v3:= lcmp(v1, v7);
  #L522028.  if v3 <= 0 then goto L52202e;
  #L52202c.  goto L522064;
  #L52202e.  v3:= 0L;
  #L522032.  v5:= lcmp(v1, v3);
  #L522036.  if v5 != 0 then goto L52203e;
  #L52203a.  v1:= v6.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L52203e.  v6.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` := v1 @kind wide;
  #L522042.  v1:= v6.`io.reactivex.rxjava3.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L522046.  call temp:= `remove`(v1, v0) @signature `Ljava/util/Queue;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L52204c.  v1:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler$b.c` @type ^`io.reactivex.rxjava3.schedulers.TestScheduler$a` @kind object;
  #L522050.  v1:= v1.`io.reactivex.rxjava3.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L522054.  if v1 != 0 then goto L52200c;
  #L522058.  v0:= v0.`io.reactivex.rxjava3.schedulers.TestScheduler$b.b` @type ^`java.lang.Runnable` @kind object;
  #L52205c.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L522062.  goto L52200c;
  #L522064.  v6.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` := v7 @kind wide;
  #L522068.  return @kind void;
}
procedure `void` `advanceTimeBy`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L521fa4.  v0:= v2.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L521fa8.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L521fae.  v3:= temp @kind wide;
  #L521fb0.  v0:= v0 + v3 @kind long;
  #L521fb2.  v3:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L521fb6.  call `advanceTimeTo`(v2, v0, v3) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L521fbc.  return @kind void;
}
procedure `void` `advanceTimeTo`(`io.reactivex.rxjava3.schedulers.TestScheduler` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;

  #L521fd0.  call temp:= `toNanos`(v3, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L521fd6.  v1:= temp @kind wide;
  #L521fd8.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.b:(J)V` @kind direct;
  #L521fde.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Scheduler$Worker` `createWorker`(`io.reactivex.rxjava3.schedulers.TestScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L521f00.  v0:= new `io.reactivex.rxjava3.schedulers.TestScheduler$a`;
  #L521f04.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler$a;.<init>:(Lio/reactivex/rxjava3/schedulers/TestScheduler;)V` @kind direct;
  #L521f0a.  return v0 @kind object;
}
procedure `long` `now`(`io.reactivex.rxjava3.schedulers.TestScheduler` v3 @kind this, `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L521f1c.  v0:= v3.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L521f20.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L521f24.  call temp:= `convert`(v4, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L521f2a.  v0:= temp @kind wide;
  #L521f2c.  return v0 @kind wide;
}
procedure `void` `triggerActions`(`io.reactivex.rxjava3.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.triggerActions:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L521ff0.  v0:= v2.`io.reactivex.rxjava3.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L521ff4.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/schedulers/TestScheduler;.b:(J)V` @kind direct;
  #L521ffa.  return @kind void;
}
