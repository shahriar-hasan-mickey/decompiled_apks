record `io.reactivex.rxjava3.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.util.List` `io.reactivex.rxjava3.exceptions.CompositeException.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.rxjava3.exceptions.CompositeException.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.exceptions.CompositeException.c` @AccessFlag PRIVATE;
}
global `long` `@@io.reactivex.rxjava3.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.CompositeException` v3 @kind this, `java.lang.Iterable` v4 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4aab44.  call `<init>`(v3) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L4aab4a.  v0:= new `java.util.LinkedHashSet`;
  #L4aab4e.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L4aab54.  if v4 == 0 then goto L4aabb6;
  #L4aab58.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4aab5e.  v4:= temp @kind object;
  #L4aab60.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aab66.  v1:= temp;
  #L4aab68.  if v1 == 0 then goto L4aabca;
  #L4aab6c.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4aab72.  v1:= temp @kind object;
  #L4aab74.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4aab78.  v2:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.exceptions.CompositeException` @kind boolean;
  #L4aab7c.  if v2 == 0 then goto L4aab94;
  #L4aab80.  v1:= (`io.reactivex.rxjava3.exceptions.CompositeException`) v1 @kind object;
  #L4aab84.  call temp:= `getExceptions`(v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L4aab8a.  v1:= temp @kind object;
  #L4aab8c.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L4aab92.  goto L4aab60;
  #L4aab94.  if v1 == 0 then goto L4aaba0;
  #L4aab98.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4aab9e.  goto L4aab60;
  #L4aaba0.  v1:= new `java.lang.NullPointerException`;
  #L4aaba4.  v2:= "Throwable was null!" @kind object;
  #L4aaba8.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aabae.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4aabb4.  goto L4aab60;
  #L4aabb6.  v4:= new `java.lang.NullPointerException`;
  #L4aabba.  v1:= "errors was null" @kind object;
  #L4aabbe.  call `<init>`(v4, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aabc4.  call temp:= `add`(v0, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4aabca.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L4aabd0.  v4:= temp;
  #L4aabd2.  if v4 != 0 then goto L4aac20;
  #L4aabd6.  v4:= new `java.util.ArrayList`;
  #L4aabda.  call `<init>`(v4, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4aabe0.  call temp:= `unmodifiableList`(v4) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4aabe6.  v4:= temp @kind object;
  #L4aabe8.  v3.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` := v4 @kind object;
  #L4aabec.  v4:= new `java.lang.StringBuilder`;
  #L4aabf0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aabf6.  v0:= v3.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aabfa.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4aac00.  v0:= temp;
  #L4aac02.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aac08.  v0:= " exceptions occurred. " @kind object;
  #L4aac0c.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aac12.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aac18.  v4:= temp @kind object;
  #L4aac1a.  v3.`io.reactivex.rxjava3.exceptions.CompositeException.b` @type ^`java.lang.String` := v4 @kind object;
  #L4aac1e.  return @kind void;
  #L4aac20.  v4:= new `java.lang.IllegalArgumentException`;
  #L4aac24.  v0:= "errors is empty" @kind object;
  #L4aac28.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aac2e.  throw v4;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4aac40.  if v2 != 0 then goto L4aac5c;
  #L4aac44.  v2:= new `java.lang.NullPointerException`;
  #L4aac48.  v0:= "exceptions was null" @kind object;
  #L4aac4c.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aac52.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4aac58.  v2:= temp @kind object;
  #L4aac5a.  goto L4aac64;
  #L4aac5c.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4aac62.  v2:= temp @kind object;
  #L4aac64.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L4aac6a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4aac7c.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aac82.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aac88.  v8:= 10I;
  #L4aac8c.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aac92.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L4aac98.  v0:= temp @kind object;
  #L4aac9a.  v1:= length @variable v0;
  #L4aac9c.  v2:= 0I;
  #L4aac9e.  if v2 >= v1 then goto L4aacc2;
  #L4aaca2.  v3:= v0[v2] @kind object;
  #L4aaca6.  v4:= "\t\tat " @kind object;
  #L4aacaa.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aacb0.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aacb6.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aacbc.  v2:= v2 + 1;
  #L4aacc0.  goto L4aac9e;
  #L4aacc2.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4aacc8.  v8:= temp @kind object;
  #L4aacca.  if v8 == 0 then goto L4aacea;
  #L4aacce.  v8:= "\tCaused by: " @kind object;
  #L4aacd2.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aacd8.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4aacde.  v7:= temp @kind object;
  #L4aace0.  v8:= "" @kind object;
  #L4aace4.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L4aacea.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.exceptions.CompositeException` v7 @kind this, `io.reactivex.rxjava3.exceptions.CompositeException$b` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.b:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4aad18.  v0:= new `java.lang.StringBuilder`;
  #L4aad1c.  v1:= 128I;
  #L4aad20.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4aad26.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aad2c.  v1:= 10I;
  #L4aad30.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aad36.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L4aad3c.  v2:= temp @kind object;
  #L4aad3e.  v3:= length @variable v2;
  #L4aad40.  v4:= 0I;
  #L4aad42.  if v4 >= v3 then goto L4aad66;
  #L4aad46.  v5:= v2[v4] @kind object;
  #L4aad4a.  v6:= "\tat " @kind object;
  #L4aad4e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aad54.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aad5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aad60.  v4:= v4 + 1;
  #L4aad64.  goto L4aad42;
  #L4aad66.  v1:= v7.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aad6a.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4aad70.  v1:= temp @kind object;
  #L4aad72.  v2:= 1I;
  #L4aad74.  v3:= 1I;
  #L4aad76.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aad7c.  v4:= temp;
  #L4aad7e.  if v4 == 0 then goto L4aadb6;
  #L4aad82.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4aad88.  v4:= temp @kind object;
  #L4aad8a.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4aad8e.  v5:= "  ComposedException " @kind object;
  #L4aad92.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aad98.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aad9e.  v5:= " :\n" @kind object;
  #L4aada2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aada8.  v5:= "\t" @kind object;
  #L4aadac.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L4aadb2.  v3:= v3 + v2 @kind int;
  #L4aadb4.  goto L4aad76;
  #L4aadb6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aadbc.  v0:= temp @kind object;
  #L4aadbe.  call `a`(v8, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$b;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L4aadc4.  return @kind void;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.rxjava3.exceptions.CompositeException` v13 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4aa8b8.  @monitorenter v13
  #L4aa8ba.  v0:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L4aa8be.  if v0 != 0 then goto L4aab00;
  #L4aa8c2.  v0:= "line.separator" @kind object;
  #L4aa8c6.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4aa8cc.  v0:= temp @kind object;
  #L4aa8ce.  v1:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aa8d2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4aa8d8.  v1:= temp;
  #L4aa8da.  v2:= 1I;
  #L4aa8dc.  v3:= 0I;
  #L4aa8de.  if v1 <= v2 then goto L4aaaec;
  #L4aa8e2.  v1:= new `java.util.IdentityHashMap`;
  #L4aa8e6.  call `<init>`(v1) @signature `Ljava/util/IdentityHashMap;.<init>:()V` @kind direct;
  #L4aa8ec.  v2:= new `java.lang.StringBuilder`;
  #L4aa8f0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aa8f6.  v4:= "Multiple exceptions (" @kind object;
  #L4aa8fa.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa900.  v4:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aa904.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4aa90a.  v4:= temp;
  #L4aa90c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa912.  v4:= ")" @kind object;
  #L4aa916.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa91c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa922.  v4:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aa926.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4aa92c.  v4:= temp @kind object;
  #L4aa92e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aa934.  v5:= temp;
  #L4aa936.  if v5 == 0 then goto L4aaacc;
  #L4aa93a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4aa940.  v5:= temp @kind object;
  #L4aa942.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4aa946.  v6:= 0I;
  #L4aa948.  if v5 == 0 then goto L4aa92e;
  #L4aa94c.  v7:= 0I;
  #L4aa94e.  if v7 >= v6 then goto L4aa962;
  #L4aa952.  v8:= "  " @kind object;
  #L4aa956.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa95c.  v7:= v7 + 1;
  #L4aa960.  goto L4aa94e;
  #L4aa962.  v7:= "|-- " @kind object;
  #L4aa966.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa96c.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4aa972.  v7:= temp @kind object;
  #L4aa974.  call temp:= `getCanonicalName`(v7) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4aa97a.  v7:= temp @kind object;
  #L4aa97c.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa982.  v7:= ": " @kind object;
  #L4aa986.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa98c.  call temp:= `getMessage`(v5) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4aa992.  v7:= temp @kind object;
  #L4aa994.  if v7 == 0 then goto L4aa9ea;
  #L4aa998.  call temp:= `contains`(v7, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L4aa99e.  v8:= temp;
  #L4aa9a0.  if v8 == 0 then goto L4aa9ea;
  #L4aa9a4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa9aa.  call temp:= `split`(v7, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L4aa9b0.  v7:= temp @kind object;
  #L4aa9b2.  v8:= length @variable v7;
  #L4aa9b4.  v9:= 0I;
  #L4aa9b6.  if v9 >= v8 then goto L4aa9f6;
  #L4aa9ba.  v10:= v7[v9] @kind object;
  #L4aa9be.  v11:= 0I;
  #L4aa9c0.  v12:= v6 + 2;
  #L4aa9c4.  if v11 >= v12 then goto L4aa9d8;
  #L4aa9c8.  v12:= "  " @kind object;
  #L4aa9cc.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa9d2.  v11:= v11 + 1;
  #L4aa9d6.  goto L4aa9c0;
  #L4aa9d8.  call temp:= `append`(v2, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa9de.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa9e4.  v9:= v9 + 1;
  #L4aa9e8.  goto L4aa9b6;
  #L4aa9ea.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa9f0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aa9f6.  v7:= 0I;
  #L4aa9f8.  v8:= v6 + 2;
  #L4aa9fc.  if v7 >= v8 then goto L4aaa10;
  #L4aaa00.  v8:= "  " @kind object;
  #L4aaa04.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa0a.  v7:= v7 + 1;
  #L4aaa0e.  goto L4aa9f8;
  #L4aaa10.  call temp:= `getStackTrace`(v5) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L4aaa16.  v7:= temp @kind object;
  #L4aaa18.  v9:= length @variable v7;
  #L4aaa1a.  if v9 <= 0 then goto L4aaa38;
  #L4aaa1e.  v9:= "at " @kind object;
  #L4aaa22.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa28.  v7:= v7[v3] @kind object;
  #L4aaa2c.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa32.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa38.  call temp:= `containsKey`(v1, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4aaa3e.  v7:= temp;
  #L4aaa40.  if v7 != 0 then goto L4aaa5e;
  #L4aaa44.  v7:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4aaa48.  call temp:= `put`(v1, v5, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4aaa4e.  call temp:= `getCause`(v5) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4aaa54.  v5:= temp @kind object;
  #L4aaa56.  v6:= v6 + 1;
  #L4aaa5a.  goto L4aa948;
  #L4aaa5e.  call temp:= `getCause`(v5) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4aaa64.  v5:= temp @kind object;
  #L4aaa66.  if v5 == 0 then goto L4aa92e;
  #L4aaa6a.  v6:= 0I;
  #L4aaa6c.  if v6 >= v8 then goto L4aaa80;
  #L4aaa70.  v7:= "  " @kind object;
  #L4aaa74.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa7a.  v6:= v6 + 1;
  #L4aaa7e.  goto L4aaa6c;
  #L4aaa80.  v6:= "|-- " @kind object;
  #L4aaa84.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa8a.  v6:= "(cause not expanded again) " @kind object;
  #L4aaa8e.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa94.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4aaa9a.  v6:= temp @kind object;
  #L4aaa9c.  call temp:= `getCanonicalName`(v6) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4aaaa2.  v6:= temp @kind object;
  #L4aaaa4.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaaaa.  v6:= ": " @kind object;
  #L4aaaae.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaab4.  call temp:= `getMessage`(v5) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4aaaba.  v5:= temp @kind object;
  #L4aaabc.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaac2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaac8.  goto L4aa92e;
  #L4aaacc.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$a`;
  #L4aaad0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aaad6.  v1:= temp @kind object;
  #L4aaad8.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L4aaade.  v1:= temp @kind object;
  #L4aaae0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aaae6.  v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4aaaea.  goto L4aab00;
  #L4aaaec.  v0:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aaaf0.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4aaaf6.  v0:= temp @kind object;
  #L4aaaf8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4aaafc.  v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4aab00.  v0:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L4aab04.  @monitorexit v13
  #L4aab06.  return v0 @kind object;
  #L4aab08.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aab0a.  @monitorexit v13
  #L4aab0c.  throw v0;
  catch `java.lang.Throwable` @[L4aa8ba..L4aab04] goto L4aab08;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aab2c.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aab30.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa8a0.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.b` @type ^`java.lang.String` @kind object;
  #L4aa8a4.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aacfc.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L4aad00.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L4aad06.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aadd8.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$c`;
  #L4aaddc.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$c;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L4aade2.  call `b`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.b:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @kind direct;
  #L4aade8.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aadfc.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$d`;
  #L4aae00.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$d;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L4aae06.  call `b`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.b:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @kind direct;
  #L4aae0c.  return @kind void;
}
procedure `int` `size`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aa880.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4aa884.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4aa88a.  v0:= temp;
  #L4aa88c.  return v0;
}
