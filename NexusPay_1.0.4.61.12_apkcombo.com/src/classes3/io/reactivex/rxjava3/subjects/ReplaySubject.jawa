record `io.reactivex.rxjava3.subjects.ReplaySubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `io.reactivex.rxjava3.subjects.ReplaySubject$b` `io.reactivex.rxjava3.subjects.ReplaySubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.ReplaySubject.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.ReplaySubject.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.ReplaySubject$c`[] `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.ReplaySubject$c`[] `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.rxjava3.subjects.ReplaySubject.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5249d4.  v0:= 0I;
  #L5249d6.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v0];
  #L5249da.  `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L5249de.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v0];
  #L5249e2.  `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L5249e6.  v0:= new `java.lang.Object`[v0];
  #L5249ea.  `@@io.reactivex.rxjava3.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] := v0 @kind object;
  #L5249ee.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L524a00.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L524a06.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` := v2 @kind object;
  #L524a0a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L524a0e.  v0:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L524a12.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L524a18.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L524a1c.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.create:()Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L5247c4.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L5247c8.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$g`;
  #L5247cc.  v2:= 16I;
  #L5247d0.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L5247d6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L5247dc.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `create`(`int` v2 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.create:(I)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L5247f0.  v0:= "capacityHint" @kind object;
  #L5247f4.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L5247fa.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L5247fe.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$g`;
  #L524802.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L524808.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L52480e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.createWithSize:(I)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L524820.  v0:= "maxSize" @kind object;
  #L524824.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L52482a.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L52482e.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$e`;
  #L524832.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.<init>:(I)V` @kind direct;
  #L524838.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L52483e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L524850.  v0:= "maxAge" @kind object;
  #L524854.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L52485a.  v0:= "unit is null" @kind object;
  #L52485e.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L524864.  v0:= "scheduler is null" @kind object;
  #L524868.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52486e.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L524872.  v7:= new `io.reactivex.rxjava3.subjects.ReplaySubject$d`;
  #L524876.  v2:= 2147483647I;
  #L52487c.  v1:= v7 @kind object;
  #L52487e.  v3:= v8 @kind wide;
  #L524880.  v5:= v10 @kind object;
  #L524882.  v6:= v11 @kind object;
  #L524884.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L52488a.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L524890.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5248a4.  v0:= "maxSize" @kind object;
  #L5248a8.  call temp:= `verifyPositive`(v12, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L5248ae.  v0:= "maxAge" @kind object;
  #L5248b2.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L5248b8.  v0:= "unit is null" @kind object;
  #L5248bc.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5248c2.  v0:= "scheduler is null" @kind object;
  #L5248c6.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5248cc.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L5248d0.  v7:= new `io.reactivex.rxjava3.subjects.ReplaySubject$d`;
  #L5248d4.  v1:= v7 @kind object;
  #L5248d6.  v2:= v12;
  #L5248d8.  v3:= v8 @kind wide;
  #L5248da.  v5:= v10 @kind object;
  #L5248dc.  v6:= v11 @kind object;
  #L5248de.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L5248e4.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L5248ea.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.subjects.ReplaySubject` v4 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5246c8.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5246cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5246d2.  v0:= temp @kind object;
  #L5246d4.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L5246d8.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L5246dc.  v2:= 0I;
  #L5246de.  if v0 != v1 then goto L5246e4;
  #L5246e2.  return v2;
  #L5246e4.  v1:= length @variable v0;
  #L5246e6.  v3:= v1 + 1;
  #L5246ea.  v3:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v3];
  #L5246ee.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5246f4.  v3[v1]:= v5 @kind object;
  #L5246f8.  v1:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5246fc.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L524702.  v0:= temp;
  #L524704.  if v0 == 0 then goto L5246c8;
  #L524708.  v5:= 1I;
  #L52470a.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.ReplaySubject` v6 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L524b7c.  v0:= v6.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L524b80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L524b86.  v0:= temp @kind object;
  #L524b88.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L524b8c.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L524b90.  if v0 == v1 then goto L524bfc;
  #L524b94.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L524b98.  if v0 != v1 then goto L524b9e;
  #L524b9c.  goto L524bfc;
  #L524b9e.  v1:= length @variable v0;
  #L524ba0.  v2:= -1I;
  #L524ba2.  v3:= 0I;
  #L524ba4.  v4:= 0I;
  #L524ba6.  if v4 >= v1 then goto L524bbc;
  #L524baa.  v5:= v0[v4] @kind object;
  #L524bae.  if v5 != v7 then goto L524bb6;
  #L524bb2.  v2:= v4;
  #L524bb4.  goto L524bbc;
  #L524bb6.  v4:= v4 + 1;
  #L524bba.  goto L524ba6;
  #L524bbc.  if v2 >= 0 then goto L524bc2;
  #L524bc0.  return @kind void;
  #L524bc2.  v4:= 1I;
  #L524bc4.  if v1 != v4 then goto L524bce;
  #L524bc8.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L524bcc.  goto L524bec;
  #L524bce.  v5:= v1 + -1;
  #L524bd2.  v5:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v5];
  #L524bd6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L524bdc.  v3:= v2 + 1;
  #L524be0.  v1:= v1 - v2 @kind int;
  #L524be2.  v1:= v1 - v4 @kind int;
  #L524be4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L524bea.  v1:= v5 @kind object;
  #L524bec.  v2:= v6.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L524bf0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L524bf6.  v0:= temp;
  #L524bf8.  if v0 == 0 then goto L524b7c;
  #L524bfc.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject$c`[] `c`(`io.reactivex.rxjava3.subjects.ReplaySubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.c:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/ReplaySubject$c;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L5248fc.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524900.  v1:= 0I;
  #L524902.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L524908.  v3:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52490c.  v0:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L524910.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L524916.  v3:= temp @kind object;
  #L524918.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v3 @kind object;
  #L52491c.  return v3 @kind object;
}
procedure `void` `cleanupBuffer`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.cleanupBuffer:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524a30.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524a34.  call `c`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.c:()V` @kind interface;
  #L524a3a.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52499c.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L5249a0.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L5249a6.  v0:= temp @kind object;
  #L5249a8.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L5249ae.  v1:= temp;
  #L5249b0.  if v1 == 0 then goto L5249be;
  #L5249b4.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L5249ba.  v0:= temp @kind object;
  #L5249bc.  return v0 @kind object;
  #L5249be.  v0:= 0I;
  #L5249c0.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524930.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524934.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.getValue:()Ljava/lang/Object;` @kind interface;
  #L52493a.  v0:= temp @kind object;
  #L52493c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.rxjava3.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524950.  v0:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] @kind object;
  #L524954.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L52495a.  v0:= temp @kind object;
  #L52495c.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] @kind object;
  #L524960.  if v0 != v1 then goto L52496a;
  #L524964.  v0:= 0I;
  #L524966.  v0:= new `java.lang.Object`[v0];
  #L52496a.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52497c.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524980.  call temp:= `d`(v0, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L524986.  v2:= temp @kind object;
  #L524988.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52471c.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524720.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L524726.  v0:= temp @kind object;
  #L524728.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52472e.  v0:= temp;
  #L524730.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524744.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L524748.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52474e.  v0:= temp @kind object;
  #L524750.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L524754.  v0:= length @variable v0;
  #L524756.  if v0 == 0 then goto L52475e;
  #L52475a.  v0:= 1I;
  #L52475c.  goto L524760;
  #L52475e.  v0:= 0I;
  #L524760.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524774.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524778.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L52477e.  v0:= temp @kind object;
  #L524780.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L524786.  v0:= temp;
  #L524788.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52479c.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L5247a0.  call temp:= `size`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.size:()I` @kind interface;
  #L5247a6.  v0:= temp;
  #L5247a8.  if v0 == 0 then goto L5247b0;
  #L5247ac.  v0:= 1I;
  #L5247ae.  goto L5247b2;
  #L5247b0.  v0:= 0I;
  #L5247b2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.ReplaySubject` v5 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L524a4c.  v0:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L524a50.  if v0 == 0 then goto L524a56;
  #L524a54.  return @kind void;
  #L524a56.  v0:= 1I;
  #L524a58.  v5.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L524a5c.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L524a62.  v0:= temp @kind object;
  #L524a64.  v1:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524a68.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.a:(Ljava/lang/Object;)V` @kind interface;
  #L524a6e.  call temp:= `c`(v5, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.c:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/ReplaySubject$c;` @kind virtual;
  #L524a74.  v0:= temp @kind object;
  #L524a76.  v2:= length @variable v0;
  #L524a78.  v3:= 0I;
  #L524a7a.  if v3 >= v2 then goto L524a8e;
  #L524a7e.  v4:= v0[v3] @kind object;
  #L524a82.  call `b`(v1, v4) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L524a88.  v3:= v3 + 1;
  #L524a8c.  goto L524a7a;
  #L524a8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.ReplaySubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L524aa0.  v0:= "onError called with a null Throwable." @kind object;
  #L524aa4.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L524aaa.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L524aae.  if v0 == 0 then goto L524aba;
  #L524ab2.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L524ab8.  return @kind void;
  #L524aba.  v0:= 1I;
  #L524abc.  v4.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L524ac0.  call temp:= `error`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L524ac6.  v5:= temp @kind object;
  #L524ac8.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524acc.  call `a`(v0, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.a:(Ljava/lang/Object;)V` @kind interface;
  #L524ad2.  call temp:= `c`(v4, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.c:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/ReplaySubject$c;` @kind virtual;
  #L524ad8.  v5:= temp @kind object;
  #L524ada.  v1:= length @variable v5;
  #L524adc.  v2:= 0I;
  #L524ade.  if v2 >= v1 then goto L524af2;
  #L524ae2.  v3:= v5[v2] @kind object;
  #L524ae6.  call `b`(v0, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L524aec.  v2:= v2 + 1;
  #L524af0.  goto L524ade;
  #L524af2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.ReplaySubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L524b04.  v0:= "onNext called with a null value." @kind object;
  #L524b08.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L524b0e.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L524b12.  if v0 == 0 then goto L524b18;
  #L524b16.  return @kind void;
  #L524b18.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524b1c.  call `add`(v0, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.add:(Ljava/lang/Object;)V` @kind interface;
  #L524b22.  v5:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L524b26.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L524b2c.  v5:= temp @kind object;
  #L524b2e.  v5:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v5 @kind object;
  #L524b32.  v1:= length @variable v5;
  #L524b34.  v2:= 0I;
  #L524b36.  if v2 >= v1 then goto L524b4a;
  #L524b3a.  v3:= v5[v2] @kind object;
  #L524b3e.  call `b`(v0, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L524b44.  v2:= v2 + 1;
  #L524b48.  goto L524b36;
  #L524b4a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524b5c.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L524b60.  if v0 == 0 then goto L524b6a;
  #L524b64.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L524b6a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L524c10.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`;
  #L524c14.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/ReplaySubject;)V` @kind direct;
  #L524c1a.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L524c20.  call temp:= `a`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)Z` @kind virtual;
  #L524c26.  v2:= temp;
  #L524c28.  if v2 == 0 then goto L524c3c;
  #L524c2c.  v2:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L524c30.  if v2 == 0 then goto L524c3c;
  #L524c34.  call `b`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind virtual;
  #L524c3a.  return @kind void;
  #L524c3c.  v2:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L524c40.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L524c46.  return @kind void;
}
