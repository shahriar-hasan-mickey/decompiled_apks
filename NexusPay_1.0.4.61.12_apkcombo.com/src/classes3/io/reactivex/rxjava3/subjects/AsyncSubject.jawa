record `io.reactivex.rxjava3.subjects.AsyncSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.AsyncSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.AsyncSubject.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.subjects.AsyncSubject.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.AsyncSubject$a`[] `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.AsyncSubject$a`[] `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L522470.  v0:= 0I;
  #L522472.  v1:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v0];
  #L522476.  `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] := v1 @kind object;
  #L52247a.  v0:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v0];
  #L52247e.  `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] := v0 @kind object;
  #L522482.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L522494.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L52249a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L52249e.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L5224a2.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5224a8.  v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L5224ac.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.AsyncSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.create:()Lio/reactivex/rxjava3/subjects/AsyncSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5223f4.  v0:= new `io.reactivex.rxjava3.subjects.AsyncSubject`;
  #L5223f8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.<init>:()V` @kind direct;
  #L5223fe.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.subjects.AsyncSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.AsyncSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.a:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5222d4.  v0:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5222d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5222de.  v0:= temp @kind object;
  #L5222e0.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L5222e4.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L5222e8.  v2:= 0I;
  #L5222ea.  if v0 != v1 then goto L5222f0;
  #L5222ee.  return v2;
  #L5222f0.  v1:= length @variable v0;
  #L5222f2.  v3:= v1 + 1;
  #L5222f6.  v3:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v3];
  #L5222fa.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L522300.  v3[v1]:= v5 @kind object;
  #L522304.  v1:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522308.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52230e.  v0:= temp;
  #L522310.  if v0 == 0 then goto L5222d4;
  #L522314.  v5:= 1I;
  #L522316.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.AsyncSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.AsyncSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.b:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L522600.  v0:= v6.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522604.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52260a.  v0:= temp @kind object;
  #L52260c.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L522610.  v1:= length @variable v0;
  #L522612.  if v1 != 0 then goto L522618;
  #L522616.  return @kind void;
  #L522618.  v2:= -1I;
  #L52261a.  v3:= 0I;
  #L52261c.  v4:= 0I;
  #L52261e.  if v4 >= v1 then goto L522634;
  #L522622.  v5:= v0[v4] @kind object;
  #L522626.  if v5 != v7 then goto L52262e;
  #L52262a.  v2:= v4;
  #L52262c.  goto L522634;
  #L52262e.  v4:= v4 + 1;
  #L522632.  goto L52261e;
  #L522634.  if v2 >= 0 then goto L52263a;
  #L522638.  return @kind void;
  #L52263a.  v4:= 1I;
  #L52263c.  if v1 != v4 then goto L522646;
  #L522640.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L522644.  goto L522664;
  #L522646.  v5:= v1 + -1;
  #L52264a.  v5:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v5];
  #L52264e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L522654.  v3:= v2 + 1;
  #L522658.  v1:= v1 - v2 @kind int;
  #L52265a.  v1:= v1 - v4 @kind int;
  #L52265c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L522662.  v1:= v5 @kind object;
  #L522664.  v2:= v6.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522668.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52266e.  v0:= temp;
  #L522670.  if v0 == 0 then goto L522600;
  #L522674.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522440.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522444.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52244a.  v0:= temp @kind object;
  #L52244c.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L522450.  if v0 != v1 then goto L52245a;
  #L522454.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L522458.  goto L52245c;
  #L52245a.  v0:= 0I;
  #L52245c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522410.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522414.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52241a.  v0:= temp @kind object;
  #L52241c.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L522420.  if v0 != v1 then goto L52242a;
  #L522424.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L522428.  goto L52242c;
  #L52242a.  v0:= 0I;
  #L52242c.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522328.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52232c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522332.  v0:= temp @kind object;
  #L522334.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L522338.  if v0 != v1 then goto L522348;
  #L52233c.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L522340.  if v0 != 0 then goto L522348;
  #L522344.  v0:= 1I;
  #L522346.  goto L52234a;
  #L522348.  v0:= 0I;
  #L52234a.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.AsyncSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52235c.  v0:= v1.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522360.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522366.  v0:= temp @kind object;
  #L522368.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L52236c.  v0:= length @variable v0;
  #L52236e.  if v0 == 0 then goto L522376;
  #L522372.  v0:= 1I;
  #L522374.  goto L522378;
  #L522376.  v0:= 0I;
  #L522378.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52238c.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522390.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522396.  v0:= temp @kind object;
  #L522398.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L52239c.  if v0 != v1 then goto L5223ac;
  #L5223a0.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L5223a4.  if v0 == 0 then goto L5223ac;
  #L5223a8.  v0:= 1I;
  #L5223aa.  goto L5223ae;
  #L5223ac.  v0:= 0I;
  #L5223ae.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5223c0.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5223c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5223ca.  v0:= temp @kind object;
  #L5223cc.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L5223d0.  if v0 != v1 then goto L5223e0;
  #L5223d4.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L5223d8.  if v0 == 0 then goto L5223e0;
  #L5223dc.  v0:= 1I;
  #L5223de.  goto L5223e2;
  #L5223e0.  v0:= 0I;
  #L5223e2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.AsyncSubject` v5 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5224c0.  v0:= v5.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5224c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5224ca.  v0:= temp @kind object;
  #L5224cc.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L5224d0.  if v0 != v1 then goto L5224d6;
  #L5224d4.  return @kind void;
  #L5224d6.  v0:= v5.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L5224da.  v2:= v5.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5224de.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5224e4.  v1:= temp @kind object;
  #L5224e6.  v1:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v1 @kind object;
  #L5224ea.  v2:= 0I;
  #L5224ec.  if v0 != 0 then goto L522506;
  #L5224f0.  v0:= length @variable v1;
  #L5224f2.  if v2 >= v0 then goto L52251c;
  #L5224f6.  v3:= v1[v2] @kind object;
  #L5224fa.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L522500.  v2:= v2 + 1;
  #L522504.  goto L5224f2;
  #L522506.  v3:= length @variable v1;
  #L522508.  if v2 >= v3 then goto L52251c;
  #L52250c.  v4:= v1[v2] @kind object;
  #L522510.  call `complete`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L522516.  v2:= v2 + 1;
  #L52251a.  goto L522508;
  #L52251c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.AsyncSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L522530.  v0:= "onError called with a null Throwable." @kind object;
  #L522534.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52253a.  v0:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52253e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522544.  v0:= temp @kind object;
  #L522546.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L52254a.  if v0 != v1 then goto L522556;
  #L52254e.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L522554.  return @kind void;
  #L522556.  v0:= 0I;
  #L522558.  v4.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v0 @kind object;
  #L52255c.  v4.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L522560.  v0:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522564.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52256a.  v0:= temp @kind object;
  #L52256c.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L522570.  v1:= length @variable v0;
  #L522572.  v2:= 0I;
  #L522574.  if v2 >= v1 then goto L522588;
  #L522578.  v3:= v0[v2] @kind object;
  #L52257c.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L522582.  v2:= v2 + 1;
  #L522586.  goto L522574;
  #L522588.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52259c.  v0:= "onNext called with a null value." @kind object;
  #L5225a0.  call temp:= `nullCheck`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5225a6.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5225aa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5225b0.  v0:= temp @kind object;
  #L5225b2.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L5225b6.  if v0 != v1 then goto L5225bc;
  #L5225ba.  return @kind void;
  #L5225bc.  v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v3 @kind object;
  #L5225c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5225d4.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5225d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5225de.  v0:= temp @kind object;
  #L5225e0.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L5225e4.  if v0 != v1 then goto L5225ee;
  #L5225e8.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L5225ee.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L522688.  v0:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`;
  #L52268c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/AsyncSubject;)V` @kind direct;
  #L522692.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L522698.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.a:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)Z` @kind virtual;
  #L52269e.  v1:= temp;
  #L5226a0.  if v1 == 0 then goto L5226b8;
  #L5226a4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L5226aa.  v3:= temp;
  #L5226ac.  if v3 == 0 then goto L5226de;
  #L5226b0.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.b:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)V` @kind virtual;
  #L5226b6.  goto L5226de;
  #L5226b8.  v1:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L5226bc.  if v1 == 0 then goto L5226c8;
  #L5226c0.  call `onError`(v3, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5226c6.  goto L5226de;
  #L5226c8.  v3:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L5226cc.  if v3 == 0 then goto L5226d8;
  #L5226d0.  call `complete`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L5226d6.  goto L5226de;
  #L5226d8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L5226de.  return @kind void;
}
