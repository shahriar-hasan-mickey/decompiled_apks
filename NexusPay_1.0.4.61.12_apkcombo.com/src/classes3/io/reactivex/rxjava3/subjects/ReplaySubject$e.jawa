record `io.reactivex.rxjava3.subjects.ReplaySubject$e` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$e.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @AccessFlag ;
  `io.reactivex.rxjava3.subjects.ReplaySubject$a` `io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.subjects.ReplaySubject$a` `io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.subjects.ReplaySubject$e.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.subjects.ReplaySubject$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L5241dc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L5241e2.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject$e.a` @type ^`int` := v2;
  #L5241e6.  v2:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L5241ea.  v0:= 0I;
  #L5241ec.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5241f2.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v2 @kind object;
  #L5241f6.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v2 @kind object;
  #L5241fa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L524248.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L52424c.  call `<init>`(v0, v4) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L524252.  v4:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L524256.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v0 @kind object;
  #L52425a.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int`;
  #L52425e.  v2:= 1I;
  #L524260.  v1:= v1 + v2 @kind int;
  #L524262.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L524266.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52426c.  call `c`(v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.c:()V` @kind virtual;
  #L524272.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.e` @type ^`boolean` := v2 @kind boolean;
  #L524276.  return @kind void;
}
procedure `void` `add`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52420c.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L524210.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L524216.  v3:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L52421a.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v0 @kind object;
  #L52421e.  v1:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int`;
  #L524222.  v1:= v1 + 1;
  #L524226.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L52422a.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L524230.  call `e`(v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.e:()V` @kind virtual;
  #L524236.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v7 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L524288.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L52428e.  v0:= temp;
  #L524290.  if v0 == 0 then goto L524296;
  #L524294.  return @kind void;
  #L524296.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L52429a.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L52429e.  v1:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v1 @kind object;
  #L5242a2.  v2:= 1I;
  #L5242a4.  if v1 != 0 then goto L5242ac;
  #L5242a8.  v1:= v7.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L5242ac.  v3:= 1I;
  #L5242ae.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L5242b2.  v5:= 0I;
  #L5242b4.  if v4 == 0 then goto L5242be;
  #L5242b8.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L5242bc.  return @kind void;
  #L5242be.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5242c4.  v4:= temp @kind object;
  #L5242c6.  v4:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v4 @kind object;
  #L5242ca.  if v4 != 0 then goto L5242f0;
  #L5242ce.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5242d4.  v4:= temp @kind object;
  #L5242d6.  if v4 == 0 then goto L5242dc;
  #L5242da.  goto L5242ae;
  #L5242dc.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L5242e0.  v3:= -v3 @kind int;
  #L5242e2.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L5242e8.  v3:= temp;
  #L5242ea.  if v3 != 0 then goto L5242ae;
  #L5242ee.  return @kind void;
  #L5242f0.  v1:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L5242f4.  v6:= v7.`io.reactivex.rxjava3.subjects.ReplaySubject$e.e` @type ^`boolean` @kind boolean;
  #L5242f8.  if v6 == 0 then goto L524334;
  #L5242fc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L524302.  v6:= temp @kind object;
  #L524304.  if v6 != 0 then goto L524334;
  #L524308.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52430e.  v3:= temp;
  #L524310.  if v3 == 0 then goto L52431c;
  #L524314.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L52431a.  goto L52432a;
  #L52431c.  call temp:= `getError`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L524322.  v1:= temp @kind object;
  #L524324.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52432a.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L52432e.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L524332.  return @kind void;
  #L524334.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52433a.  v1:= v4 @kind object;
  #L52433c.  goto L5242ae;
}
procedure `void` `c`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v3 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52438c.  v0:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L524390.  v1:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L524394.  if v1 == 0 then goto L5243b6;
  #L524398.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L52439c.  v2:= 0I;
  #L52439e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5243a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5243aa.  v0:= temp @kind object;
  #L5243ac.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L5243b2.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v1 @kind object;
  #L5243b6.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L524160.  v0:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L524164.  call temp:= `size`(v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.size:()I` @kind virtual;
  #L52416a.  v1:= temp;
  #L52416c.  v2:= 0I;
  #L52416e.  v3:= 0I;
  #L524170.  if v1 != 0 then goto L524180;
  #L524174.  v0:= length @variable v6;
  #L524176.  if v0 == 0 then goto L5241ca;
  #L52417a.  v6[v3]:= v2 @kind object;
  #L52417e.  goto L5241ca;
  #L524180.  v4:= length @variable v6;
  #L524182.  if v4 >= v1 then goto L5241a2;
  #L524186.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L52418c.  v6:= temp @kind object;
  #L52418e.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L524194.  v6:= temp @kind object;
  #L524196.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L52419c.  v6:= temp @kind object;
  #L52419e.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L5241a2.  if v3 == v1 then goto L5241c0;
  #L5241a6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5241ac.  v0:= temp @kind object;
  #L5241ae.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v0 @kind object;
  #L5241b2.  v4:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L5241b6.  v6[v3]:= v4 @kind object;
  #L5241ba.  v3:= v3 + 1;
  #L5241be.  goto L5241a2;
  #L5241c0.  v0:= length @variable v6;
  #L5241c2.  if v0 <= v1 then goto L5241ca;
  #L5241c6.  v6[v1]:= v2 @kind object;
  #L5241ca.  return v6 @kind object;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L524350.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int`;
  #L524354.  v1:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.a` @type ^`int`;
  #L524358.  if v0 <= v1 then goto L524378;
  #L52435c.  v0:= v0 + -1;
  #L524360.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int` := v0;
  #L524364.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L524368.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52436e.  v0:= temp @kind object;
  #L524370.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v0 @kind object;
  #L524374.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v0 @kind object;
  #L524378.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L524104.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L524108.  v1:= 0I;
  #L52410a.  v2:= v1 @kind object;
  #L52410c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L524112.  v3:= temp @kind object;
  #L524114.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v3 @kind object;
  #L524118.  if v3 != 0 then goto L524148;
  #L52411c.  v0:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L524120.  if v0 != 0 then goto L524126;
  #L524124.  return v1 @kind object;
  #L524126.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52412c.  v1:= temp;
  #L52412e.  if v1 != 0 then goto L524142;
  #L524132.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L524138.  v1:= temp;
  #L52413a.  if v1 == 0 then goto L524140;
  #L52413e.  goto L524142;
  #L524140.  return v0 @kind object;
  #L524142.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L524146.  return v0 @kind object;
  #L524148.  v2:= v0 @kind object;
  #L52414a.  v0:= v3 @kind object;
  #L52414c.  goto L52410c;
}
procedure `int` `size`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v3 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5240a8.  v0:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L5240ac.  v1:= 0I;
  #L5240ae.  v2:= 2147483647I;
  #L5240b4.  if v1 == v2 then goto L5240f2;
  #L5240b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5240be.  v2:= temp @kind object;
  #L5240c0.  v2:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v2 @kind object;
  #L5240c4.  if v2 != 0 then goto L5240ea;
  #L5240c8.  v0:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L5240cc.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L5240d2.  v2:= temp;
  #L5240d4.  if v2 != 0 then goto L5240e4;
  #L5240d8.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L5240de.  v0:= temp;
  #L5240e0.  if v0 == 0 then goto L5240f2;
  #L5240e4.  v1:= v1 + -1;
  #L5240e8.  goto L5240f2;
  #L5240ea.  v1:= v1 + 1;
  #L5240ee.  v0:= v2 @kind object;
  #L5240f0.  goto L5240ae;
  #L5240f2.  return v1;
}
