record `io.reactivex.rxjava3.subjects.BehaviorSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.BehaviorSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.BehaviorSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.rxjava3.subjects.BehaviorSubject.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.subjects.BehaviorSubject.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.subjects.BehaviorSubject.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.BehaviorSubject.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.subjects.BehaviorSubject.g` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L522b28.  v0:= 0I;
  #L522b2a.  v1:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v0];
  #L522b2e.  `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] := v1 @kind object;
  #L522b32.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v0];
  #L522b36.  `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] := v0 @kind object;
  #L522b3a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L522b4c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L522b52.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L522b56.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L522b5c.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L522b60.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L522b66.  v0:= temp @kind object;
  #L522b68.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.d` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L522b6c.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.c` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L522b70.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L522b76.  v0:= temp @kind object;
  #L522b78.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L522b7c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L522b80.  v1:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L522b84.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L522b8a.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L522b8e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L522b92.  call `<init>`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L522b98.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L522b9c.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L522ba0.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L522ba6.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L522baa.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.BehaviorSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.create:()Lio/reactivex/rxjava3/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L522a38.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject`;
  #L522a3c.  v1:= 0I;
  #L522a3e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L522a44.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.BehaviorSubject` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.createDefault:(Ljava/lang/Object;)Lio/reactivex/rxjava3/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L522a58.  v0:= "defaultValue is null" @kind object;
  #L522a5c.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L522a62.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject`;
  #L522a66.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L522a6c.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.BehaviorSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.a:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L522924.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522928.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52292e.  v0:= temp @kind object;
  #L522930.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L522934.  v1:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L522938.  v2:= 0I;
  #L52293a.  if v0 != v1 then goto L522940;
  #L52293e.  return v2;
  #L522940.  v1:= length @variable v0;
  #L522942.  v3:= v1 + 1;
  #L522946.  v3:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v3];
  #L52294a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L522950.  v3[v1]:= v5 @kind object;
  #L522954.  v1:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522958.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52295e.  v0:= temp;
  #L522960.  if v0 == 0 then goto L522924;
  #L522964.  v5:= 1I;
  #L522966.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.BehaviorSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.b:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L522d08.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522d0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522d12.  v0:= temp @kind object;
  #L522d14.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L522d18.  v1:= length @variable v0;
  #L522d1a.  if v1 != 0 then goto L522d20;
  #L522d1e.  return @kind void;
  #L522d20.  v2:= -1I;
  #L522d22.  v3:= 0I;
  #L522d24.  v4:= 0I;
  #L522d26.  if v4 >= v1 then goto L522d3c;
  #L522d2a.  v5:= v0[v4] @kind object;
  #L522d2e.  if v5 != v7 then goto L522d36;
  #L522d32.  v2:= v4;
  #L522d34.  goto L522d3c;
  #L522d36.  v4:= v4 + 1;
  #L522d3a.  goto L522d26;
  #L522d3c.  if v2 >= 0 then goto L522d42;
  #L522d40.  return @kind void;
  #L522d42.  v4:= 1I;
  #L522d44.  if v1 != v4 then goto L522d4e;
  #L522d48.  v1:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L522d4c.  goto L522d6c;
  #L522d4e.  v5:= v1 + -1;
  #L522d52.  v5:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v5];
  #L522d56.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L522d5c.  v3:= v2 + 1;
  #L522d60.  v1:= v1 - v2 @kind int;
  #L522d62.  v1:= v1 - v4 @kind int;
  #L522d64.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L522d6a.  v1:= v5 @kind object;
  #L522d6c.  v2:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522d70.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L522d76.  v0:= temp;
  #L522d78.  if v0 == 0 then goto L522d08;
  #L522d7c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L522d90.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L522d94.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L522d9a.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L522d9e.  v2:= 1L;
  #L522da2.  v0:= v0 + v2 @kind long;
  #L522da4.  v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` := v0 @kind wide;
  #L522da8.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522dac.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L522db2.  v5:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L522db6.  call `unlock`(v5) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L522dbc.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] `d`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.d:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;` @AccessFlag  {
    temp;
    v0;

  #L522a80.  call `c`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L522a86.  v2:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522a8a.  v0:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L522a8e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L522a94.  v2:= temp @kind object;
  #L522a96.  v2:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v2 @kind object;
  #L522a9a.  return v2 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522af0.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522af4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522afa.  v0:= temp @kind object;
  #L522afc.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L522b02.  v1:= temp;
  #L522b04.  if v1 == 0 then goto L522b12;
  #L522b08.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L522b0e.  v0:= temp @kind object;
  #L522b10.  return v0 @kind object;
  #L522b12.  v0:= 0I;
  #L522b14.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522aac.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522ab0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522ab6.  v0:= temp @kind object;
  #L522ab8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L522abe.  v1:= temp;
  #L522ac0.  if v1 != 0 then goto L522adc;
  #L522ac4.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L522aca.  v1:= temp;
  #L522acc.  if v1 == 0 then goto L522ad2;
  #L522ad0.  goto L522adc;
  #L522ad2.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L522ad8.  v0:= temp @kind object;
  #L522ada.  return v0 @kind object;
  #L522adc.  v0:= 0I;
  #L522ade.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L522978.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52297c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522982.  v0:= temp @kind object;
  #L522984.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52298a.  v0:= temp;
  #L52298c.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5229a0.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5229a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5229aa.  v0:= temp @kind object;
  #L5229ac.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L5229b0.  v0:= length @variable v0;
  #L5229b2.  if v0 == 0 then goto L5229ba;
  #L5229b6.  v0:= 1I;
  #L5229b8.  goto L5229bc;
  #L5229ba.  v0:= 0I;
  #L5229bc.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5229d0.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5229d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5229da.  v0:= temp @kind object;
  #L5229dc.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L5229e2.  v0:= temp;
  #L5229e4.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5229f8.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5229fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522a02.  v0:= temp @kind object;
  #L522a04.  if v0 == 0 then goto L522a24;
  #L522a08.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L522a0e.  v1:= temp;
  #L522a10.  if v1 != 0 then goto L522a24;
  #L522a14.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L522a1a.  v0:= temp;
  #L522a1c.  if v0 != 0 then goto L522a24;
  #L522a20.  v0:= 1I;
  #L522a22.  goto L522a26;
  #L522a24.  v0:= 0I;
  #L522a26.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v7 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L522bbc.  v0:= v7.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522bc0.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L522bc4.  v2:= 0I;
  #L522bc6.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L522bcc.  v0:= temp;
  #L522bce.  if v0 != 0 then goto L522bd4;
  #L522bd2.  return @kind void;
  #L522bd4.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L522bda.  v0:= temp @kind object;
  #L522bdc.  call temp:= `d`(v7, v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.d:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;` @kind virtual;
  #L522be2.  v1:= temp @kind object;
  #L522be4.  v2:= length @variable v1;
  #L522be6.  v3:= 0I;
  #L522be8.  if v3 >= v2 then goto L522c00;
  #L522bec.  v4:= v1[v3] @kind object;
  #L522bf0.  v5:= v7.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L522bf4.  call `c`(v4, v0, v5) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L522bfa.  v3:= v3 + 1;
  #L522bfe.  goto L522be8;
  #L522c00.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L522c14.  v0:= "onError called with a null Throwable." @kind object;
  #L522c18.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L522c1e.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522c22.  v1:= 0I;
  #L522c24.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L522c2a.  v0:= temp;
  #L522c2c.  if v0 != 0 then goto L522c38;
  #L522c30.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L522c36.  return @kind void;
  #L522c38.  call temp:= `error`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L522c3e.  v7:= temp @kind object;
  #L522c40.  call temp:= `d`(v6, v7) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.d:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;` @kind virtual;
  #L522c46.  v0:= temp @kind object;
  #L522c48.  v1:= length @variable v0;
  #L522c4a.  v2:= 0I;
  #L522c4c.  if v2 >= v1 then goto L522c64;
  #L522c50.  v3:= v0[v2] @kind object;
  #L522c54.  v4:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L522c58.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L522c5e.  v2:= v2 + 1;
  #L522c62.  goto L522c4c;
  #L522c64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L522c78.  v0:= "onNext called with a null value." @kind object;
  #L522c7c.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L522c82.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522c86.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522c8c.  v0:= temp @kind object;
  #L522c8e.  if v0 == 0 then goto L522c94;
  #L522c92.  return @kind void;
  #L522c94.  call temp:= `next`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L522c9a.  v7:= temp @kind object;
  #L522c9c.  call `c`(v6, v7) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L522ca2.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522ca6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522cac.  v0:= temp @kind object;
  #L522cae.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L522cb2.  v1:= length @variable v0;
  #L522cb4.  v2:= 0I;
  #L522cb6.  if v2 >= v1 then goto L522cce;
  #L522cba.  v3:= v0[v2] @kind object;
  #L522cbe.  v4:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L522cc2.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L522cc8.  v2:= v2 + 1;
  #L522ccc.  goto L522cb6;
  #L522cce.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L522ce0.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522ce4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522cea.  v0:= temp @kind object;
  #L522cec.  if v0 == 0 then goto L522cf6;
  #L522cf0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L522cf6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L522dd0.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`;
  #L522dd4.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/BehaviorSubject;)V` @kind direct;
  #L522dda.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L522de0.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.a:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)Z` @kind virtual;
  #L522de6.  v1:= temp;
  #L522de8.  if v1 == 0 then goto L522e04;
  #L522dec.  v3:= v0.`io.reactivex.rxjava3.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L522df0.  if v3 == 0 then goto L522dfc;
  #L522df4.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.b:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)V` @kind virtual;
  #L522dfa.  goto L522e2a;
  #L522dfc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.a:()V` @kind virtual;
  #L522e02.  goto L522e2a;
  #L522e04.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522e08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522e0e.  v0:= temp @kind object;
  #L522e10.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L522e14.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L522e18.  if v0 != v1 then goto L522e24;
  #L522e1c.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L522e22.  goto L522e2a;
  #L522e24.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L522e2a.  return @kind void;
}
