record `io.reactivex.rxjava3.subjects.UnicastSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.subjects.UnicastSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.UnicastSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.UnicastSubject.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.UnicastSubject.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.UnicastSubject.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` `io.reactivex.rxjava3.subjects.UnicastSubject.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.j` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L52571c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L525722.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L525726.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L52572c.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L525730.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L525734.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52573a.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L52573e.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.d` @type ^`boolean` := v4 @kind boolean;
  #L525742.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L525746.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L52574c.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L525750.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L525754.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L52575a.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L52575e.  v2:= new `io.reactivex.rxjava3.subjects.UnicastSubject$a`;
  #L525762.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)V` @kind direct;
  #L525768.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` := v2 @kind object;
  #L52576c.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:()Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L525618.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L52561c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L525622.  v1:= temp;
  #L525624.  v2:= 0I;
  #L525626.  v3:= 1I;
  #L525628.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L52562e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`int` v3 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(I)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L525668.  v0:= "capacityHint" @kind object;
  #L52566c.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L525672.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L525676.  v1:= 0I;
  #L525678.  v2:= 1I;
  #L52567a.  call `<init>`(v0, v3, v1, v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L525680.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L525694.  v0:= "capacityHint" @kind object;
  #L525698.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L52569e.  v0:= "onTerminate" @kind object;
  #L5256a2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5256a8.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L5256ac.  v1:= 1I;
  #L5256ae.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L5256b4.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5256c8.  v0:= "capacityHint" @kind object;
  #L5256cc.  call temp:= `verifyPositive`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L5256d2.  v0:= "onTerminate" @kind object;
  #L5256d6.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5256dc.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L5256e0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L5256e6.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`boolean` v3 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(Z)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L525640.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L525644.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L52564a.  v1:= temp;
  #L52564c.  v2:= 0I;
  #L52564e.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L525654.  return v0 @kind object;
}
procedure `void` `a`(`io.reactivex.rxjava3.subjects.UnicastSubject` v3 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L525780.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525784.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52578a.  v0:= temp @kind object;
  #L52578c.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L525790.  if v0 == 0 then goto L5257ac;
  #L525794.  v1:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525798.  v2:= 0I;
  #L52579a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5257a0.  v1:= temp;
  #L5257a2.  if v1 == 0 then goto L5257ac;
  #L5257a6.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L5257ac.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.UnicastSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L5257c0.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L5257c4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L5257ca.  v0:= temp;
  #L5257cc.  if v0 == 0 then goto L5257d2;
  #L5257d0.  return @kind void;
  #L5257d2.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5257d6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5257dc.  v0:= temp @kind object;
  #L5257de.  v0:= (`io.reactivex.rxjava3.core.Observer`) v0 @kind object;
  #L5257e2.  v1:= 1I;
  #L5257e4.  if v0 == 0 then goto L525800;
  #L5257e8.  v1:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.j` @type ^`boolean` @kind boolean;
  #L5257ec.  if v1 == 0 then goto L5257f8;
  #L5257f0.  call `c`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.c:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L5257f6.  goto L5257fe;
  #L5257f8.  call `d`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.d:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L5257fe.  return @kind void;
  #L525800.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L525804.  v1:= -v1 @kind int;
  #L525806.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L52580c.  v1:= temp;
  #L52580e.  if v1 != 0 then goto L525814;
  #L525812.  return @kind void;
  #L525814.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525818.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52581e.  v0:= temp @kind object;
  #L525820.  v0:= (`io.reactivex.rxjava3.core.Observer`) v0 @kind object;
  #L525824.  goto L5257e4;
}
procedure `void` `c`(`io.reactivex.rxjava3.subjects.UnicastSubject` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.c:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L525838.  v0:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52583c.  v1:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L525840.  v2:= 1I;
  #L525842.  v1:= v1 ^~ v2 @kind int;
  #L525844.  v3:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L525848.  v4:= 0I;
  #L52584a.  if v3 == 0 then goto L52585a;
  #L52584e.  v7:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525852.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L525858.  return @kind void;
  #L52585a.  v3:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52585e.  if v1 == 0 then goto L525874;
  #L525862.  if v3 == 0 then goto L525874;
  #L525866.  call temp:= `f`(v6, v0, v7) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.f:(Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;Lio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L52586c.  v5:= temp;
  #L52586e.  if v5 == 0 then goto L525874;
  #L525872.  return @kind void;
  #L525874.  call `onNext`(v7, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52587a.  if v3 == 0 then goto L525886;
  #L52587e.  call `e`(v6, v7) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L525884.  return @kind void;
  #L525886.  v3:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L52588a.  v2:= -v2 @kind int;
  #L52588c.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L525892.  v2:= temp;
  #L525894.  if v2 != 0 then goto L525844;
  #L525898.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.subjects.UnicastSubject` v9 @kind this, `io.reactivex.rxjava3.core.Observer` v10 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.d:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5258ac.  v0:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L5258b0.  v1:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L5258b4.  v2:= 1I;
  #L5258b6.  v1:= v1 ^~ v2 @kind int;
  #L5258b8.  v3:= 1I;
  #L5258ba.  v4:= 1I;
  #L5258bc.  v5:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L5258c0.  if v5 == 0 then goto L5258d8;
  #L5258c4.  v10:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5258c8.  v1:= 0I;
  #L5258ca.  call `lazySet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L5258d0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L5258d6.  return @kind void;
  #L5258d8.  v5:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L5258dc.  v6:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L5258e0.  call temp:= `poll`(v6) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L5258e6.  v6:= temp @kind object;
  #L5258e8.  v7:= 0I;
  #L5258ea.  if v6 != 0 then goto L5258f2;
  #L5258ee.  v8:= 1I;
  #L5258f0.  goto L5258f4;
  #L5258f2.  v8:= 0I;
  #L5258f4.  if v5 == 0 then goto L52591c;
  #L5258f8.  if v1 == 0 then goto L525910;
  #L5258fc.  if v3 == 0 then goto L525910;
  #L525900.  call temp:= `f`(v9, v0, v10) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.f:(Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;Lio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L525906.  v3:= temp;
  #L525908.  if v3 == 0 then goto L52590e;
  #L52590c.  return @kind void;
  #L52590e.  v3:= 0I;
  #L525910.  if v8 == 0 then goto L52591c;
  #L525914.  call `e`(v9, v10) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L52591a.  return @kind void;
  #L52591c.  if v8 == 0 then goto L525934;
  #L525920.  v5:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L525924.  v4:= -v4 @kind int;
  #L525926.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L52592c.  v4:= temp;
  #L52592e.  if v4 != 0 then goto L5258bc;
  #L525932.  return @kind void;
  #L525934.  call `onNext`(v10, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52593a.  goto L5258bc;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.UnicastSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L52594c.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525950.  v1:= 0I;
  #L525952.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L525958.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L52595c.  if v0 == 0 then goto L525968;
  #L525960.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L525966.  goto L52596e;
  #L525968.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L52596e.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.subjects.UnicastSubject` v3 @kind this, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v4 @kind object, `io.reactivex.rxjava3.core.Observer` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.f:(Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;Lio/reactivex/rxjava3/core/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L525568.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L52556c.  if v0 == 0 then goto L52558c;
  #L525570.  v1:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525574.  v2:= 0I;
  #L525576.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52557c.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L525582.  call `onError`(v5, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L525588.  v4:= 1I;
  #L52558a.  return v4;
  #L52558c.  v4:= 0I;
  #L52558e.  return v4;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5256f8.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L5256fc.  if v0 == 0 then goto L525706;
  #L525700.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L525704.  return v0 @kind object;
  #L525706.  v0:= 0I;
  #L525708.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5255a0.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L5255a4.  if v0 == 0 then goto L5255b4;
  #L5255a8.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L5255ac.  if v0 != 0 then goto L5255b4;
  #L5255b0.  v0:= 1I;
  #L5255b2.  goto L5255b6;
  #L5255b4.  v0:= 0I;
  #L5255b6.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5255c8.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5255cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5255d2.  v0:= temp @kind object;
  #L5255d4.  if v0 == 0 then goto L5255dc;
  #L5255d8.  v0:= 1I;
  #L5255da.  goto L5255de;
  #L5255dc.  v0:= 0I;
  #L5255de.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5255f0.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L5255f4.  if v0 == 0 then goto L525604;
  #L5255f8.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L5255fc.  if v0 == 0 then goto L525604;
  #L525600.  v0:= 1I;
  #L525602.  goto L525606;
  #L525604.  v0:= 0I;
  #L525606.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L525980.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L525984.  if v0 != 0 then goto L5259a4;
  #L525988.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52598c.  if v0 == 0 then goto L525992;
  #L525990.  goto L5259a4;
  #L525992.  v0:= 1I;
  #L525994.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` := v0 @kind boolean;
  #L525998.  call `a`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.a:()V` @kind virtual;
  #L52599e.  call `b`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.b:()V` @kind virtual;
  #L5259a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5259b8.  v0:= "onError called with a null Throwable." @kind object;
  #L5259bc.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5259c2.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L5259c6.  if v0 != 0 then goto L5259ec;
  #L5259ca.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L5259ce.  if v0 == 0 then goto L5259d4;
  #L5259d2.  goto L5259ec;
  #L5259d4.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L5259d8.  v2:= 1I;
  #L5259da.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` := v2 @kind boolean;
  #L5259de.  call `a`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.a:()V` @kind virtual;
  #L5259e4.  call `b`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.b:()V` @kind virtual;
  #L5259ea.  return @kind void;
  #L5259ec.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5259f2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L525a04.  v0:= "onNext called with a null value." @kind object;
  #L525a08.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L525a0e.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L525a12.  if v0 != 0 then goto L525a30;
  #L525a16.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L525a1a.  if v0 == 0 then goto L525a20;
  #L525a1e.  goto L525a30;
  #L525a20.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L525a24.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L525a2a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.b:()V` @kind virtual;
  #L525a30.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L525a44.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L525a48.  if v0 != 0 then goto L525a54;
  #L525a4c.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L525a50.  if v0 == 0 then goto L525a5a;
  #L525a54.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L525a5a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.UnicastSubject` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L525a6c.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L525a70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L525a76.  v0:= temp;
  #L525a78.  if v0 != 0 then goto L525ac2;
  #L525a7c.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L525a80.  v1:= 0I;
  #L525a82.  v2:= 1I;
  #L525a84.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L525a8a.  v0:= temp;
  #L525a8c.  if v0 == 0 then goto L525ac2;
  #L525a90.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L525a94.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L525a9a.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525a9e.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L525aa4.  v4:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L525aa8.  if v4 == 0 then goto L525aba;
  #L525aac.  v4:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525ab0.  v0:= 0I;
  #L525ab2.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L525ab8.  return @kind void;
  #L525aba.  call `b`(v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.b:()V` @kind virtual;
  #L525ac0.  goto L525ad6;
  #L525ac2.  v0:= new `java.lang.IllegalStateException`;
  #L525ac6.  v1:= "Only a single observer allowed." @kind object;
  #L525aca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L525ad0.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L525ad6.  return @kind void;
}
