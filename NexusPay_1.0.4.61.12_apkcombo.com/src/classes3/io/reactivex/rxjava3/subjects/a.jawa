record `io.reactivex.rxjava3.subjects.a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class, `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `io.reactivex.rxjava3.subjects.Subject` `io.reactivex.rxjava3.subjects.a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.a.b` @AccessFlag ;
  `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.rxjava3.subjects.a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.subjects.a.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.a` v0 @kind this, `io.reactivex.rxjava3.subjects.Subject` v1 @kind object) @signature `Lio/reactivex/rxjava3/subjects/a;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L524cf8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L524cfe.  v0.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` := v1 @kind object;
  #L524d02.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.subjects.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L524d14.  @monitorenter v2
  #L524d16.  v0:= v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L524d1a.  if v0 != 0 then goto L524d28;
  #L524d1e.  v0:= 0I;
  #L524d20.  v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L524d24.  @monitorexit v2
  #L524d26.  return @kind void;
  #L524d28.  v1:= 0I;
  #L524d2a.  v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L524d2e.  @monitorexit v2
  #L524d30.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L524d36.  goto L524d14;
  #L524d38.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L524d3a.  @monitorexit v2
  #L524d3c.  throw v0;
  catch `java.lang.Throwable` @[L524d16..L524d30] goto L524d38;
  catch `java.lang.Throwable` @[L524d3a..L524d3c] goto L524d38;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/a;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524cd8.  v0:= v1.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524cdc.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/rxjava3/subjects/Subject;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L524ce2.  v0:= temp @kind object;
  #L524ce4.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/a;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524c58.  v0:= v1.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524c5c.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/Subject;.hasComplete:()Z` @kind virtual;
  #L524c62.  v0:= temp;
  #L524c64.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/a;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524c78.  v0:= v1.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524c7c.  call temp:= `hasObservers`(v0) @signature `Lio/reactivex/rxjava3/subjects/Subject;.hasObservers:()Z` @kind virtual;
  #L524c82.  v0:= temp;
  #L524c84.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/a;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524c98.  v0:= v1.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524c9c.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/rxjava3/subjects/Subject;.hasThrowable:()Z` @kind virtual;
  #L524ca2.  v0:= temp;
  #L524ca4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524d64.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524d68.  if v0 == 0 then goto L524d6e;
  #L524d6c.  return @kind void;
  #L524d6e.  @monitorenter v2
  #L524d70.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524d74.  if v0 == 0 then goto L524d7c;
  #L524d78.  @monitorexit v2
  #L524d7a.  return @kind void;
  #L524d7c.  v0:= 1I;
  #L524d7e.  v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` := v0 @kind boolean;
  #L524d82.  v1:= v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` @kind boolean;
  #L524d86.  if v1 == 0 then goto L524db4;
  #L524d8a.  v0:= v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L524d8e.  if v0 != 0 then goto L524da2;
  #L524d92.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L524d96.  v1:= 4I;
  #L524d98.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L524d9e.  v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L524da2.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L524da8.  v1:= temp @kind object;
  #L524daa.  call `add`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L524db0.  @monitorexit v2
  #L524db2.  return @kind void;
  #L524db4.  v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L524db8.  @monitorexit v2
  #L524dba.  v0:= v2.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524dbe.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L524dc4.  return @kind void;
  #L524dc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L524dc8.  @monitorexit v2
  #L524dca.  throw v0;
  catch `java.lang.Throwable` @[L524d70..L524dba] goto L524dc6;
  catch `java.lang.Throwable` @[L524dc8..L524dca] goto L524dc6;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524df0.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524df4.  if v0 == 0 then goto L524e00;
  #L524df8.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L524dfe.  return @kind void;
  #L524e00.  @monitorenter v2
  #L524e02.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524e06.  v1:= 1I;
  #L524e08.  if v0 == 0 then goto L524e0e;
  #L524e0c.  goto L524e4c;
  #L524e0e.  v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` := v1 @kind boolean;
  #L524e12.  v0:= v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` @kind boolean;
  #L524e16.  if v0 == 0 then goto L524e44;
  #L524e1a.  v0:= v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L524e1e.  if v0 != 0 then goto L524e32;
  #L524e22.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L524e26.  v1:= 4I;
  #L524e28.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L524e2e.  v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L524e32.  call temp:= `error`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L524e38.  v3:= temp @kind object;
  #L524e3a.  call `setFirst`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L524e40.  @monitorexit v2
  #L524e42.  return @kind void;
  #L524e44.  v0:= 0I;
  #L524e46.  v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` := v1 @kind boolean;
  #L524e4a.  v1:= 0I;
  #L524e4c.  @monitorexit v2
  #L524e4e.  if v1 == 0 then goto L524e5a;
  #L524e52.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L524e58.  return @kind void;
  #L524e5a.  v0:= v2.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524e5e.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L524e64.  return @kind void;
  #L524e66.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L524e68.  @monitorexit v2
  #L524e6a.  throw v3;
  catch `java.lang.Throwable` @[L524e02..L524e4e] goto L524e66;
  catch `java.lang.Throwable` @[L524e68..L524e6a] goto L524e66;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524e90.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524e94.  if v0 == 0 then goto L524e9a;
  #L524e98.  return @kind void;
  #L524e9a.  @monitorenter v2
  #L524e9c.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524ea0.  if v0 == 0 then goto L524ea8;
  #L524ea4.  @monitorexit v2
  #L524ea6.  return @kind void;
  #L524ea8.  v0:= v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` @kind boolean;
  #L524eac.  if v0 == 0 then goto L524eda;
  #L524eb0.  v0:= v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L524eb4.  if v0 != 0 then goto L524ec8;
  #L524eb8.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L524ebc.  v1:= 4I;
  #L524ebe.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L524ec4.  v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L524ec8.  call temp:= `next`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L524ece.  v3:= temp @kind object;
  #L524ed0.  call `add`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L524ed6.  @monitorexit v2
  #L524ed8.  return @kind void;
  #L524eda.  v0:= 1I;
  #L524edc.  v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L524ee0.  @monitorexit v2
  #L524ee2.  v0:= v2.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524ee6.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L524eec.  call `a`(v2) @signature `Lio/reactivex/rxjava3/subjects/a;.a:()V` @kind virtual;
  #L524ef2.  return @kind void;
  #L524ef4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L524ef6.  @monitorexit v2
  #L524ef8.  throw v3;
  catch `java.lang.Throwable` @[L524e9c..L524ee2] goto L524ef4;
  catch `java.lang.Throwable` @[L524ef6..L524ef8] goto L524ef4;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524f20.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524f24.  v1:= 1I;
  #L524f26.  if v0 != 0 then goto L524f7a;
  #L524f2a.  @monitorenter v2
  #L524f2c.  v0:= v2.`io.reactivex.rxjava3.subjects.a.d` @type ^`boolean` @kind boolean;
  #L524f30.  if v0 == 0 then goto L524f36;
  #L524f34.  goto L524f70;
  #L524f36.  v0:= v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` @kind boolean;
  #L524f3a.  if v0 == 0 then goto L524f68;
  #L524f3e.  v0:= v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L524f42.  if v0 != 0 then goto L524f56;
  #L524f46.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L524f4a.  v1:= 4I;
  #L524f4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L524f52.  v2.`io.reactivex.rxjava3.subjects.a.c` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L524f56.  call temp:= `disposable`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.disposable:(Lio/reactivex/rxjava3/disposables/Disposable;)Ljava/lang/Object;` @kind static;
  #L524f5c.  v3:= temp @kind object;
  #L524f5e.  call `add`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L524f64.  @monitorexit v2
  #L524f66.  return @kind void;
  #L524f68.  v2.`io.reactivex.rxjava3.subjects.a.b` @type ^`boolean` := v1 @kind boolean;
  #L524f6c.  v0:= 0I;
  #L524f6e.  v1:= 0I;
  #L524f70.  @monitorexit v2
  #L524f72.  goto L524f7a;
  #L524f74.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L524f76.  @monitorexit v2
  #L524f78.  throw v3;
  #L524f7a.  if v1 == 0 then goto L524f86;
  #L524f7e.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L524f84.  goto L524f96;
  #L524f86.  v0:= v2.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524f8a.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L524f90.  call `a`(v2) @signature `Lio/reactivex/rxjava3/subjects/a;.a:()V` @kind virtual;
  #L524f96.  return @kind void;
  catch `java.lang.Throwable` @[L524f2c..L524f78] goto L524f74;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/a;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L524fb4.  v0:= v1.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524fb8.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L524fbe.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.rxjava3.subjects.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524cb8.  v0:= v1.`io.reactivex.rxjava3.subjects.a.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L524cbc.  call temp:= `acceptFull`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/rxjava3/core/Observer;)Z` @kind static;
  #L524cc2.  v2:= temp;
  #L524cc4.  return v2;
}
