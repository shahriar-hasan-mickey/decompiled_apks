record `io.reactivex.rxjava3.subjects.CompletableSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Completable` @kind class, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.CompletableSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.CompletableSubject.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.CompletableSubject.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.CompletableSubject$a`[] `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.CompletableSubject$a`[] `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L522fe8.  v0:= 0I;
  #L522fea.  v1:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v0];
  #L522fee.  `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] := v1 @kind object;
  #L522ff2.  v0:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v0];
  #L522ff6.  `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] := v0 @kind object;
  #L522ffa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L52300c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Completable;.<init>:()V` @kind direct;
  #L523012.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L523016.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L52301c.  v2.`io.reactivex.rxjava3.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L523020.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L523024.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L523028.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52302e.  v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L523032.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.CompletableSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.create:()Lio/reactivex/rxjava3/subjects/CompletableSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L522f9c.  v0:= new `io.reactivex.rxjava3.subjects.CompletableSubject`;
  #L522fa0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.<init>:()V` @kind direct;
  #L522fa6.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.subjects.CompletableSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.CompletableSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.e:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L522eb0.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522eb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522eba.  v0:= temp @kind object;
  #L522ebc.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L522ec0.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L522ec4.  v2:= 0I;
  #L522ec6.  if v0 != v1 then goto L522ecc;
  #L522eca.  return v2;
  #L522ecc.  v1:= length @variable v0;
  #L522ece.  v3:= v1 + 1;
  #L522ed2.  v3:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v3];
  #L522ed6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L522edc.  v3[v1]:= v5 @kind object;
  #L522ee0.  v1:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522ee4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L522eea.  v0:= temp;
  #L522eec.  if v0 == 0 then goto L522eb0;
  #L522ef0.  v5:= 1I;
  #L522ef2.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.subjects.CompletableSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.CompletableSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.f:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52312c.  v0:= v6.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523130.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523136.  v0:= temp @kind object;
  #L523138.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L52313c.  v1:= length @variable v0;
  #L52313e.  if v1 != 0 then goto L523144;
  #L523142.  return @kind void;
  #L523144.  v2:= -1I;
  #L523146.  v3:= 0I;
  #L523148.  v4:= 0I;
  #L52314a.  if v4 >= v1 then goto L523160;
  #L52314e.  v5:= v0[v4] @kind object;
  #L523152.  if v5 != v7 then goto L52315a;
  #L523156.  v2:= v4;
  #L523158.  goto L523160;
  #L52315a.  v4:= v4 + 1;
  #L52315e.  goto L52314a;
  #L523160.  if v2 >= 0 then goto L523166;
  #L523164.  return @kind void;
  #L523166.  v4:= 1I;
  #L523168.  if v1 != v4 then goto L523172;
  #L52316c.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L523170.  goto L523190;
  #L523172.  v5:= v1 + -1;
  #L523176.  v5:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v5];
  #L52317a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L523180.  v3:= v2 + 1;
  #L523184.  v1:= v1 - v2 @kind int;
  #L523186.  v1:= v1 - v4 @kind int;
  #L523188.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52318e.  v1:= v5 @kind object;
  #L523190.  v2:= v6.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523194.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52319a.  v0:= temp;
  #L52319c.  if v0 == 0 then goto L52312c;
  #L5231a0.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522fb8.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522fbc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522fc2.  v0:= temp @kind object;
  #L522fc4.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L522fc8.  if v0 != v1 then goto L522fd2;
  #L522fcc.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L522fd0.  return v0 @kind object;
  #L522fd2.  v0:= 0I;
  #L522fd4.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522f04.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522f08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522f0e.  v0:= temp @kind object;
  #L522f10.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L522f14.  if v0 != v1 then goto L522f24;
  #L522f18.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L522f1c.  if v0 != 0 then goto L522f24;
  #L522f20.  v0:= 1I;
  #L522f22.  goto L522f26;
  #L522f24.  v0:= 0I;
  #L522f26.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.CompletableSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L522f38.  v0:= v1.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522f3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522f42.  v0:= temp @kind object;
  #L522f44.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L522f48.  v0:= length @variable v0;
  #L522f4a.  if v0 == 0 then goto L522f52;
  #L522f4e.  v0:= 1I;
  #L522f50.  goto L522f54;
  #L522f52.  v0:= 0I;
  #L522f54.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L522f68.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L522f6c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L522f72.  v0:= temp @kind object;
  #L522f74.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L522f78.  if v0 != v1 then goto L522f88;
  #L522f7c.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L522f80.  if v0 == 0 then goto L522f88;
  #L522f84.  v0:= 1I;
  #L522f86.  goto L522f8a;
  #L522f88.  v0:= 0I;
  #L522f8a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.CompletableSubject` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L523044.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L523048.  v1:= 0I;
  #L52304a.  v2:= 1I;
  #L52304c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L523052.  v0:= temp;
  #L523054.  if v0 == 0 then goto L523086;
  #L523058.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52305c.  v2:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L523060.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L523066.  v0:= temp @kind object;
  #L523068.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L52306c.  v2:= length @variable v0;
  #L52306e.  if v1 >= v2 then goto L523086;
  #L523072.  v3:= v0[v1] @kind object;
  #L523076.  v3:= v3.`io.reactivex.rxjava3.subjects.CompletableSubject$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L52307a.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L523080.  v1:= v1 + 1;
  #L523084.  goto L52306e;
  #L523086.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.CompletableSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L523098.  v0:= "onError called with a null Throwable." @kind object;
  #L52309c.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5230a2.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5230a6.  v1:= 0I;
  #L5230a8.  v2:= 1I;
  #L5230aa.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L5230b0.  v0:= temp;
  #L5230b2.  if v0 == 0 then goto L5230e8;
  #L5230b6.  v4.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L5230ba.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5230be.  v2:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L5230c2.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5230c8.  v0:= temp @kind object;
  #L5230ca.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L5230ce.  v2:= length @variable v0;
  #L5230d0.  if v1 >= v2 then goto L5230ee;
  #L5230d4.  v3:= v0[v1] @kind object;
  #L5230d8.  v3:= v3.`io.reactivex.rxjava3.subjects.CompletableSubject$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L5230dc.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5230e2.  v1:= v1 + 1;
  #L5230e6.  goto L5230d0;
  #L5230e8.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5230ee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L523100.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523104.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52310a.  v0:= temp @kind object;
  #L52310c.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L523110.  if v0 != v1 then goto L52311a;
  #L523114.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L52311a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L5231b4.  v0:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`;
  #L5231b8.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/subjects/CompletableSubject;)V` @kind direct;
  #L5231be.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L5231c4.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.e:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)Z` @kind virtual;
  #L5231ca.  v1:= temp;
  #L5231cc.  if v1 == 0 then goto L5231e4;
  #L5231d0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject$a;.isDisposed:()Z` @kind virtual;
  #L5231d6.  v3:= temp;
  #L5231d8.  if v3 == 0 then goto L5231fa;
  #L5231dc.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.f:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)V` @kind virtual;
  #L5231e2.  goto L5231fa;
  #L5231e4.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L5231e8.  if v0 == 0 then goto L5231f4;
  #L5231ec.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5231f2.  goto L5231fa;
  #L5231f4.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L5231fa.  return @kind void;
}
