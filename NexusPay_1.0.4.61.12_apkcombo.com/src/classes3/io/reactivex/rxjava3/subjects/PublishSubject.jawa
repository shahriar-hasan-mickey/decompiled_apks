record `io.reactivex.rxjava3.subjects.PublishSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.PublishSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.PublishSubject.b` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.PublishSubject$a`[] `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.PublishSubject$a`[] `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5238dc.  v0:= 0I;
  #L5238de.  v1:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v0];
  #L5238e2.  `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] := v1 @kind object;
  #L5238e6.  v0:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v0];
  #L5238ea.  `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] := v0 @kind object;
  #L5238ee.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L523900.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L523906.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L52390a.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L52390e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L523914.  v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L523918.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.PublishSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.create:()Lio/reactivex/rxjava3/subjects/PublishSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L523890.  v0:= new `io.reactivex.rxjava3.subjects.PublishSubject`;
  #L523894.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.<init>:()V` @kind direct;
  #L52389a.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.PublishSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.a:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5237a4.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5237a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5237ae.  v0:= temp @kind object;
  #L5237b0.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L5237b4.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L5237b8.  v2:= 0I;
  #L5237ba.  if v0 != v1 then goto L5237c0;
  #L5237be.  return v2;
  #L5237c0.  v1:= length @variable v0;
  #L5237c2.  v3:= v1 + 1;
  #L5237c6.  v3:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v3];
  #L5237ca.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5237d0.  v3[v1]:= v5 @kind object;
  #L5237d4.  v1:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5237d8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5237de.  v0:= temp;
  #L5237e0.  if v0 == 0 then goto L5237a4;
  #L5237e4.  v5:= 1I;
  #L5237e6.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.PublishSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.PublishSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.b:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L523a50.  v0:= v6.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523a54.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523a5a.  v0:= temp @kind object;
  #L523a5c.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L523a60.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L523a64.  if v0 == v1 then goto L523ad0;
  #L523a68.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L523a6c.  if v0 != v1 then goto L523a72;
  #L523a70.  goto L523ad0;
  #L523a72.  v1:= length @variable v0;
  #L523a74.  v2:= -1I;
  #L523a76.  v3:= 0I;
  #L523a78.  v4:= 0I;
  #L523a7a.  if v4 >= v1 then goto L523a90;
  #L523a7e.  v5:= v0[v4] @kind object;
  #L523a82.  if v5 != v7 then goto L523a8a;
  #L523a86.  v2:= v4;
  #L523a88.  goto L523a90;
  #L523a8a.  v4:= v4 + 1;
  #L523a8e.  goto L523a7a;
  #L523a90.  if v2 >= 0 then goto L523a96;
  #L523a94.  return @kind void;
  #L523a96.  v4:= 1I;
  #L523a98.  if v1 != v4 then goto L523aa2;
  #L523a9c.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L523aa0.  goto L523ac0;
  #L523aa2.  v5:= v1 + -1;
  #L523aa6.  v5:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v5];
  #L523aaa.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L523ab0.  v3:= v2 + 1;
  #L523ab4.  v1:= v1 - v2 @kind int;
  #L523ab6.  v1:= v1 - v4 @kind int;
  #L523ab8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L523abe.  v1:= v5 @kind object;
  #L523ac0.  v2:= v6.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523ac4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L523aca.  v0:= temp;
  #L523acc.  if v0 == 0 then goto L523a50;
  #L523ad0.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5238ac.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5238b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5238b6.  v0:= temp @kind object;
  #L5238b8.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L5238bc.  if v0 != v1 then goto L5238c6;
  #L5238c0.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L5238c4.  return v0 @kind object;
  #L5238c6.  v0:= 0I;
  #L5238c8.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5237f8.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5237fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523802.  v0:= temp @kind object;
  #L523804.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L523808.  if v0 != v1 then goto L523818;
  #L52380c.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L523810.  if v0 != 0 then goto L523818;
  #L523814.  v0:= 1I;
  #L523816.  goto L52381a;
  #L523818.  v0:= 0I;
  #L52381a.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.PublishSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52382c.  v0:= v1.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523830.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523836.  v0:= temp @kind object;
  #L523838.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L52383c.  v0:= length @variable v0;
  #L52383e.  if v0 == 0 then goto L523846;
  #L523842.  v0:= 1I;
  #L523844.  goto L523848;
  #L523846.  v0:= 0I;
  #L523848.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52385c.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523860.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523866.  v0:= temp @kind object;
  #L523868.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L52386c.  if v0 != v1 then goto L52387c;
  #L523870.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L523874.  if v0 == 0 then goto L52387c;
  #L523878.  v0:= 1I;
  #L52387a.  goto L52387e;
  #L52387c.  v0:= 0I;
  #L52387e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52392c.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523930.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523936.  v0:= temp @kind object;
  #L523938.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L52393c.  if v0 != v1 then goto L523942;
  #L523940.  return @kind void;
  #L523942.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523946.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52394c.  v0:= temp @kind object;
  #L52394e.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L523952.  v1:= length @variable v0;
  #L523954.  v2:= 0I;
  #L523956.  if v2 >= v1 then goto L52396a;
  #L52395a.  v3:= v0[v2] @kind object;
  #L52395e.  call `a`(v3) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.a:()V` @kind virtual;
  #L523964.  v2:= v2 + 1;
  #L523968.  goto L523956;
  #L52396a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52397c.  v0:= "onError called with a null Throwable." @kind object;
  #L523980.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L523986.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52398a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523990.  v0:= temp @kind object;
  #L523992.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L523996.  if v0 != v1 then goto L5239a2;
  #L52399a.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5239a0.  return @kind void;
  #L5239a2.  v4.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L5239a6.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5239aa.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5239b0.  v0:= temp @kind object;
  #L5239b2.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L5239b6.  v1:= length @variable v0;
  #L5239b8.  v2:= 0I;
  #L5239ba.  if v2 >= v1 then goto L5239ce;
  #L5239be.  v3:= v0[v2] @kind object;
  #L5239c2.  call `b`(v3, v5) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5239c8.  v2:= v2 + 1;
  #L5239cc.  goto L5239ba;
  #L5239ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5239e0.  v0:= "onNext called with a null value." @kind object;
  #L5239e4.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5239ea.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5239ee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5239f4.  v0:= temp @kind object;
  #L5239f6.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L5239fa.  v1:= length @variable v0;
  #L5239fc.  v2:= 0I;
  #L5239fe.  if v2 >= v1 then goto L523a12;
  #L523a02.  v3:= v0[v2] @kind object;
  #L523a06.  call `c`(v3, v5) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L523a0c.  v2:= v2 + 1;
  #L523a10.  goto L5239fe;
  #L523a12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L523a24.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523a28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523a2e.  v0:= temp @kind object;
  #L523a30.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L523a34.  if v0 != v1 then goto L523a3e;
  #L523a38.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L523a3e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L523ae4.  v0:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`;
  #L523ae8.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/PublishSubject;)V` @kind direct;
  #L523aee.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L523af4.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.a:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)Z` @kind virtual;
  #L523afa.  v1:= temp;
  #L523afc.  if v1 == 0 then goto L523b14;
  #L523b00.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.isDisposed:()Z` @kind virtual;
  #L523b06.  v3:= temp;
  #L523b08.  if v3 == 0 then goto L523b2a;
  #L523b0c.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.b:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)V` @kind virtual;
  #L523b12.  goto L523b2a;
  #L523b14.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L523b18.  if v0 == 0 then goto L523b24;
  #L523b1c.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L523b22.  goto L523b2a;
  #L523b24.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L523b2a.  return @kind void;
}
