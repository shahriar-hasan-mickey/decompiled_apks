record `io.reactivex.rxjava3.subjects.ReplaySubject$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$d.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @AccessFlag ;
  `io.reactivex.rxjava3.subjects.ReplaySubject$f` `io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.subjects.ReplaySubject$f` `io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.subjects.ReplaySubject$d.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.subjects.ReplaySubject$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L523d98.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L523d9e.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.a` @type ^`int` := v1;
  #L523da2.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` := v2 @kind wide;
  #L523da6.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L523daa.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` := v5 @kind object;
  #L523dae.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L523db2.  v2:= 0I;
  #L523db4.  v3:= 0L;
  #L523db8.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L523dbe.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v1 @kind object;
  #L523dc2.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v1 @kind object;
  #L523dc6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L523e24.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L523e28.  v1:= 9223372036854775807L;
  #L523e32.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L523e38.  v4:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L523e3c.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L523e40.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L523e44.  v2:= 1I;
  #L523e46.  v1:= v1 + v2 @kind int;
  #L523e48.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L523e4c.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L523e52.  call `h`(v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.h:()V` @kind virtual;
  #L523e58.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.h` @type ^`boolean` := v2 @kind boolean;
  #L523e5c.  return @kind void;
}
procedure `void` `add`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L523dd8.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L523ddc.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L523de0.  v2:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L523de4.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L523dea.  v1:= temp @kind wide;
  #L523dec.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L523df2.  v4:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L523df6.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L523dfa.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L523dfe.  v1:= v1 + 1;
  #L523e02.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L523e06.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L523e0c.  call `g`(v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.g:()V` @kind virtual;
  #L523e12.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v7 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.b:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L523e70.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L523e76.  v0:= temp;
  #L523e78.  if v0 == 0 then goto L523e7e;
  #L523e7c.  return @kind void;
  #L523e7e.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L523e82.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L523e86.  v1:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v1 @kind object;
  #L523e8a.  v2:= 1I;
  #L523e8c.  if v1 != 0 then goto L523e98;
  #L523e90.  call temp:= `e`(v7) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.e:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @kind virtual;
  #L523e96.  v1:= temp @kind object;
  #L523e98.  v3:= 1I;
  #L523e9a.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L523e9e.  v5:= 0I;
  #L523ea0.  if v4 == 0 then goto L523eaa;
  #L523ea4.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L523ea8.  return @kind void;
  #L523eaa.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523eb0.  v4:= temp @kind object;
  #L523eb2.  v4:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v4 @kind object;
  #L523eb6.  if v4 != 0 then goto L523ece;
  #L523eba.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L523ebe.  v3:= -v3 @kind int;
  #L523ec0.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L523ec6.  v3:= temp;
  #L523ec8.  if v3 != 0 then goto L523e9a;
  #L523ecc.  return @kind void;
  #L523ece.  v1:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L523ed2.  v6:= v7.`io.reactivex.rxjava3.subjects.ReplaySubject$d.h` @type ^`boolean` @kind boolean;
  #L523ed6.  if v6 == 0 then goto L523f12;
  #L523eda.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523ee0.  v6:= temp @kind object;
  #L523ee2.  if v6 != 0 then goto L523f12;
  #L523ee6.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L523eec.  v3:= temp;
  #L523eee.  if v3 == 0 then goto L523efa;
  #L523ef2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L523ef8.  goto L523f08;
  #L523efa.  call temp:= `getError`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L523f00.  v1:= temp @kind object;
  #L523f02.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L523f08.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L523f0c.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L523f10.  return @kind void;
  #L523f12.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L523f18.  v1:= v4 @kind object;
  #L523f1a.  goto L523e9a;
}
procedure `void` `c`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v5 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L524068.  v0:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L52406c.  v1:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L524070.  if v1 == 0 then goto L524096;
  #L524074.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L524078.  v2:= 0I;
  #L52407a.  v3:= 0L;
  #L52407e.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L524084.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52408a.  v0:= temp @kind object;
  #L52408c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L524092.  v5.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v1 @kind object;
  #L524096.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L523d18.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.e:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @kind virtual;
  #L523d1e.  v0:= temp @kind object;
  #L523d20.  call temp:= `f`(v5, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.f:(Lio/reactivex/rxjava3/subjects/ReplaySubject$f;)I` @kind virtual;
  #L523d26.  v1:= temp;
  #L523d28.  v2:= 0I;
  #L523d2a.  v3:= 0I;
  #L523d2c.  if v1 != 0 then goto L523d3c;
  #L523d30.  v0:= length @variable v6;
  #L523d32.  if v0 == 0 then goto L523d86;
  #L523d36.  v6[v3]:= v2 @kind object;
  #L523d3a.  goto L523d86;
  #L523d3c.  v4:= length @variable v6;
  #L523d3e.  if v4 >= v1 then goto L523d5e;
  #L523d42.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L523d48.  v6:= temp @kind object;
  #L523d4a.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L523d50.  v6:= temp @kind object;
  #L523d52.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L523d58.  v6:= temp @kind object;
  #L523d5a.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L523d5e.  if v3 == v1 then goto L523d7c;
  #L523d62.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523d68.  v0:= temp @kind object;
  #L523d6a.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v0 @kind object;
  #L523d6e.  v4:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L523d72.  v6[v3]:= v4 @kind object;
  #L523d76.  v3:= v3 + 1;
  #L523d7a.  goto L523d5e;
  #L523d7c.  v0:= length @variable v6;
  #L523d7e.  if v0 <= v1 then goto L523d86;
  #L523d82.  v6[v1]:= v2 @kind object;
  #L523d86.  return v6 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject$f` `e`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.e:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L523c38.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L523c3c.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L523c40.  v2:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L523c44.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L523c4a.  v1:= temp @kind wide;
  #L523c4c.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L523c50.  v1:= v1 - v3 @kind long;
  #L523c52.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523c58.  v3:= temp @kind object;
  #L523c5a.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L523c5e.  v7:= v3 @kind object;
  #L523c60.  v3:= v0 @kind object;
  #L523c62.  v0:= v7 @kind object;
  #L523c64.  if v0 == 0 then goto L523c84;
  #L523c68.  v4:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L523c6c.  v6:= lcmp(v4, v1);
  #L523c70.  if v6 <= 0 then goto L523c76;
  #L523c74.  goto L523c84;
  #L523c76.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523c7c.  v3:= temp @kind object;
  #L523c7e.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L523c82.  goto L523c5e;
  #L523c84.  return v3 @kind object;
}
procedure `int` `f`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v2 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$f` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.f:(Lio/reactivex/rxjava3/subjects/ReplaySubject$f;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L523be0.  v0:= 0I;
  #L523be2.  v1:= 2147483647I;
  #L523be8.  if v0 == v1 then goto L523c26;
  #L523bec.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523bf2.  v1:= temp @kind object;
  #L523bf4.  v1:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v1 @kind object;
  #L523bf8.  if v1 != 0 then goto L523c1e;
  #L523bfc.  v3:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L523c00.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L523c06.  v1:= temp;
  #L523c08.  if v1 != 0 then goto L523c18;
  #L523c0c.  call temp:= `isError`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L523c12.  v3:= temp;
  #L523c14.  if v3 == 0 then goto L523c26;
  #L523c18.  v0:= v0 + -1;
  #L523c1c.  goto L523c26;
  #L523c1e.  v0:= v0 + 1;
  #L523c22.  v3:= v1 @kind object;
  #L523c24.  goto L523be2;
  #L523c26.  return v0;
}
procedure `void` `g`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L523f2c.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L523f30.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.a` @type ^`int`;
  #L523f34.  v2:= 1I;
  #L523f36.  if v0 <= v1 then goto L523f54;
  #L523f3a.  v0:= v0 - v2 @kind int;
  #L523f3c.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v0;
  #L523f40.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L523f44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523f4a.  v0:= temp @kind object;
  #L523f4c.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v0 @kind object;
  #L523f50.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L523f54.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L523f58.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L523f5c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L523f62.  v0:= temp @kind wide;
  #L523f64.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L523f68.  v0:= v0 - v3 @kind long;
  #L523f6a.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L523f6e.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L523f72.  if v4 > v2 then goto L523f7c;
  #L523f76.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v3 @kind object;
  #L523f7a.  goto L523f98;
  #L523f7c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523f82.  v4:= temp @kind object;
  #L523f84.  v4:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v4 @kind object;
  #L523f88.  v5:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L523f8c.  v7:= lcmp(v5, v0);
  #L523f90.  if v7 <= 0 then goto L523f9a;
  #L523f94.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v3 @kind object;
  #L523f98.  return @kind void;
  #L523f9a.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L523f9e.  v3:= v3 - v2 @kind int;
  #L523fa0.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v3;
  #L523fa4.  v3:= v4 @kind object;
  #L523fa6.  goto L523f6e;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L523c98.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L523c9c.  v1:= 0I;
  #L523c9e.  v2:= v1 @kind object;
  #L523ca0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523ca6.  v3:= temp @kind object;
  #L523ca8.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L523cac.  if v3 != 0 then goto L523d00;
  #L523cb0.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L523cb4.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L523cb8.  call temp:= `now`(v3, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L523cbe.  v3:= temp @kind wide;
  #L523cc0.  v5:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L523cc4.  v3:= v3 - v5 @kind long;
  #L523cc6.  v5:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L523cca.  v7:= lcmp(v5, v3);
  #L523cce.  if v7 >= 0 then goto L523cd4;
  #L523cd2.  return v1 @kind object;
  #L523cd4.  v0:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L523cd8.  if v0 != 0 then goto L523cde;
  #L523cdc.  return v1 @kind object;
  #L523cde.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L523ce4.  v1:= temp;
  #L523ce6.  if v1 != 0 then goto L523cfa;
  #L523cea.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L523cf0.  v1:= temp;
  #L523cf2.  if v1 == 0 then goto L523cf8;
  #L523cf6.  goto L523cfa;
  #L523cf8.  return v0 @kind object;
  #L523cfa.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L523cfe.  return v0 @kind object;
  #L523d00.  v2:= v0 @kind object;
  #L523d02.  v0:= v3 @kind object;
  #L523d04.  goto L523ca0;
}
procedure `void` `h`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v10 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L523fb8.  v0:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L523fbc.  v1:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L523fc0.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L523fc6.  v0:= temp @kind wide;
  #L523fc8.  v2:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L523fcc.  v0:= v0 - v2 @kind long;
  #L523fce.  v2:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L523fd2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523fd8.  v3:= temp @kind object;
  #L523fda.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L523fde.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523fe4.  v4:= temp @kind object;
  #L523fe6.  v5:= 0L;
  #L523fea.  v7:= 0I;
  #L523fec.  if v4 != 0 then goto L52401c;
  #L523ff0.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L523ff4.  if v0 == 0 then goto L524016;
  #L523ff8.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L523ffc.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L524002.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L524008.  v1:= temp @kind object;
  #L52400a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L524010.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L524014.  goto L524052;
  #L524016.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v2 @kind object;
  #L52401a.  goto L524052;
  #L52401c.  v8:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L524020.  v4:= lcmp(v8, v0);
  #L524024.  if v4 <= 0 then goto L524054;
  #L524028.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L52402c.  if v0 == 0 then goto L52404e;
  #L524030.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L524034.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L52403a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L524040.  v1:= temp @kind object;
  #L524042.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L524048.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L52404c.  goto L524052;
  #L52404e.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v2 @kind object;
  #L524052.  return @kind void;
  #L524054.  v2:= v3 @kind object;
  #L524056.  goto L523fd2;
}
procedure `int` `size`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L523bbc.  call temp:= `e`(v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.e:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @kind virtual;
  #L523bc2.  v0:= temp @kind object;
  #L523bc4.  call temp:= `f`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.f:(Lio/reactivex/rxjava3/subjects/ReplaySubject$f;)I` @kind virtual;
  #L523bca.  v0:= temp;
  #L523bcc.  return v0;
}
