record `io.reactivex.rxjava3.subjects.MaybeSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.MaybeSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.MaybeSubject.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.subjects.MaybeSubject.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.MaybeSubject.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.MaybeSubject$a`[] `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.MaybeSubject$a`[] `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L523424.  v0:= 0I;
  #L523426.  v1:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v0];
  #L52342a.  `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] := v1 @kind object;
  #L52342e.  v0:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v0];
  #L523432.  `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] := v0 @kind object;
  #L523436.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L523448.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L52344e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L523452.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L523458.  v2.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L52345c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L523460.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L523464.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52346a.  v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L52346e.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.MaybeSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.create:()Lio/reactivex/rxjava3/subjects/MaybeSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5233a8.  v0:= new `io.reactivex.rxjava3.subjects.MaybeSubject`;
  #L5233ac.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.<init>:()V` @kind direct;
  #L5233b2.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.MaybeSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.a:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L523280.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523284.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52328a.  v0:= temp @kind object;
  #L52328c.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L523290.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L523294.  v2:= 0I;
  #L523296.  if v0 != v1 then goto L52329c;
  #L52329a.  return v2;
  #L52329c.  v1:= length @variable v0;
  #L52329e.  v3:= v1 + 1;
  #L5232a2.  v3:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v3];
  #L5232a6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5232ac.  v3[v1]:= v5 @kind object;
  #L5232b0.  v1:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5232b4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5232ba.  v0:= temp;
  #L5232bc.  if v0 == 0 then goto L523280;
  #L5232c0.  v5:= 1I;
  #L5232c2.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.MaybeSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.MaybeSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.b:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5235cc.  v0:= v6.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5235d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5235d6.  v0:= temp @kind object;
  #L5235d8.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L5235dc.  v1:= length @variable v0;
  #L5235de.  if v1 != 0 then goto L5235e4;
  #L5235e2.  return @kind void;
  #L5235e4.  v2:= -1I;
  #L5235e6.  v3:= 0I;
  #L5235e8.  v4:= 0I;
  #L5235ea.  if v4 >= v1 then goto L523600;
  #L5235ee.  v5:= v0[v4] @kind object;
  #L5235f2.  if v5 != v7 then goto L5235fa;
  #L5235f6.  v2:= v4;
  #L5235f8.  goto L523600;
  #L5235fa.  v4:= v4 + 1;
  #L5235fe.  goto L5235ea;
  #L523600.  if v2 >= 0 then goto L523606;
  #L523604.  return @kind void;
  #L523606.  v4:= 1I;
  #L523608.  if v1 != v4 then goto L523612;
  #L52360c.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L523610.  goto L523630;
  #L523612.  v5:= v1 + -1;
  #L523616.  v5:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v5];
  #L52361a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L523620.  v3:= v2 + 1;
  #L523624.  v1:= v1 - v2 @kind int;
  #L523626.  v1:= v1 - v4 @kind int;
  #L523628.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52362e.  v1:= v5 @kind object;
  #L523630.  v2:= v6.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523634.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52363a.  v0:= temp;
  #L52363c.  if v0 == 0 then goto L5235cc;
  #L523640.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5233f4.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5233f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5233fe.  v0:= temp @kind object;
  #L523400.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L523404.  if v0 != v1 then goto L52340e;
  #L523408.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L52340c.  return v0 @kind object;
  #L52340e.  v0:= 0I;
  #L523410.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5233c4.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5233c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5233ce.  v0:= temp @kind object;
  #L5233d0.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L5233d4.  if v0 != v1 then goto L5233de;
  #L5233d8.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L5233dc.  return v0 @kind object;
  #L5233de.  v0:= 0I;
  #L5233e0.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5232d4.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5232d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5232de.  v0:= temp @kind object;
  #L5232e0.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L5232e4.  if v0 != v1 then goto L5232fc;
  #L5232e8.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L5232ec.  if v0 != 0 then goto L5232fc;
  #L5232f0.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L5232f4.  if v0 != 0 then goto L5232fc;
  #L5232f8.  v0:= 1I;
  #L5232fa.  goto L5232fe;
  #L5232fc.  v0:= 0I;
  #L5232fe.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.MaybeSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L523310.  v0:= v1.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523314.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52331a.  v0:= temp @kind object;
  #L52331c.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L523320.  v0:= length @variable v0;
  #L523322.  if v0 == 0 then goto L52332a;
  #L523326.  v0:= 1I;
  #L523328.  goto L52332c;
  #L52332a.  v0:= 0I;
  #L52332c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L523340.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523344.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52334a.  v0:= temp @kind object;
  #L52334c.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L523350.  if v0 != v1 then goto L523360;
  #L523354.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L523358.  if v0 == 0 then goto L523360;
  #L52335c.  v0:= 1I;
  #L52335e.  goto L523362;
  #L523360.  v0:= 0I;
  #L523362.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L523374.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523378.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52337e.  v0:= temp @kind object;
  #L523380.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L523384.  if v0 != v1 then goto L523394;
  #L523388.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L52338c.  if v0 == 0 then goto L523394;
  #L523390.  v0:= 1I;
  #L523392.  goto L523396;
  #L523394.  v0:= 0I;
  #L523396.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L523480.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L523484.  v1:= 0I;
  #L523486.  v2:= 1I;
  #L523488.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L52348e.  v0:= temp;
  #L523490.  if v0 == 0 then goto L5234c2;
  #L523494.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523498.  v2:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L52349c.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5234a2.  v0:= temp @kind object;
  #L5234a4.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L5234a8.  v2:= length @variable v0;
  #L5234aa.  if v1 >= v2 then goto L5234c2;
  #L5234ae.  v3:= v0[v1] @kind object;
  #L5234b2.  v3:= v3.`io.reactivex.rxjava3.subjects.MaybeSubject$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L5234b6.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L5234bc.  v1:= v1 + 1;
  #L5234c0.  goto L5234aa;
  #L5234c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5234d4.  v0:= "onError called with a null Throwable." @kind object;
  #L5234d8.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5234de.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5234e2.  v1:= 0I;
  #L5234e4.  v2:= 1I;
  #L5234e6.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L5234ec.  v0:= temp;
  #L5234ee.  if v0 == 0 then goto L523524;
  #L5234f2.  v4.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L5234f6.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5234fa.  v2:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L5234fe.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L523504.  v0:= temp @kind object;
  #L523506.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L52350a.  v2:= length @variable v0;
  #L52350c.  if v1 >= v2 then goto L52352a;
  #L523510.  v3:= v0[v1] @kind object;
  #L523514.  v3:= v3.`io.reactivex.rxjava3.subjects.MaybeSubject$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L523518.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52351e.  v1:= v1 + 1;
  #L523522.  goto L52350c;
  #L523524.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52352a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52353c.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L523540.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L523546.  v0:= temp @kind object;
  #L523548.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L52354c.  if v0 != v1 then goto L523556;
  #L523550.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L523556.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L523568.  v0:= "onSuccess called with a null value." @kind object;
  #L52356c.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L523572.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L523576.  v1:= 0I;
  #L523578.  v2:= 1I;
  #L52357a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L523580.  v0:= temp;
  #L523582.  if v0 == 0 then goto L5235b8;
  #L523586.  v4.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` := v5 @kind object;
  #L52358a.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52358e.  v2:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L523592.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L523598.  v0:= temp @kind object;
  #L52359a.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L52359e.  v2:= length @variable v0;
  #L5235a0.  if v1 >= v2 then goto L5235b8;
  #L5235a4.  v3:= v0[v1] @kind object;
  #L5235a8.  v3:= v3.`io.reactivex.rxjava3.subjects.MaybeSubject$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L5235ac.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L5235b2.  v1:= v1 + 1;
  #L5235b6.  goto L5235a0;
  #L5235b8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L523654.  v0:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`;
  #L523658.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/subjects/MaybeSubject;)V` @kind direct;
  #L52365e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L523664.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.a:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)Z` @kind virtual;
  #L52366a.  v1:= temp;
  #L52366c.  if v1 == 0 then goto L523684;
  #L523670.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject$a;.isDisposed:()Z` @kind virtual;
  #L523676.  v3:= temp;
  #L523678.  if v3 == 0 then goto L5236aa;
  #L52367c.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.b:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)V` @kind virtual;
  #L523682.  goto L5236aa;
  #L523684.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L523688.  if v0 == 0 then goto L523694;
  #L52368c.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L523692.  goto L5236aa;
  #L523694.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L523698.  if v0 != 0 then goto L5236a4;
  #L52369c.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L5236a2.  goto L5236aa;
  #L5236a4.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L5236aa.  return @kind void;
}
