record `io.reactivex.rxjava3.subjects.SingleSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Single` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.SingleSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.SingleSubject.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.subjects.SingleSubject.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.SingleSubject.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.SingleSubject$a`[] `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.SingleSubject$a`[] `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5251ac.  v0:= 0I;
  #L5251ae.  v1:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v0];
  #L5251b2.  `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] := v1 @kind object;
  #L5251b6.  v0:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v0];
  #L5251ba.  `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] := v0 @kind object;
  #L5251be.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5251d0.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Single;.<init>:()V` @kind direct;
  #L5251d6.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L5251da.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L5251e0.  v2.`io.reactivex.rxjava3.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L5251e4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L5251e8.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L5251ec.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5251f2.  v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L5251f6.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.SingleSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.create:()Lio/reactivex/rxjava3/subjects/SingleSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L525130.  v0:= new `io.reactivex.rxjava3.subjects.SingleSubject`;
  #L525134.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.<init>:()V` @kind direct;
  #L52513a.  return v0 @kind object;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.subjects.SingleSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.SingleSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.c:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L525044.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525048.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52504e.  v0:= temp @kind object;
  #L525050.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L525054.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L525058.  v2:= 0I;
  #L52505a.  if v0 != v1 then goto L525060;
  #L52505e.  return v2;
  #L525060.  v1:= length @variable v0;
  #L525062.  v3:= v1 + 1;
  #L525066.  v3:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v3];
  #L52506a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L525070.  v3[v1]:= v5 @kind object;
  #L525074.  v1:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525078.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52507e.  v0:= temp;
  #L525080.  if v0 == 0 then goto L525044;
  #L525084.  v5:= 1I;
  #L525086.  return v5;
}
procedure `void` `d`(`io.reactivex.rxjava3.subjects.SingleSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.SingleSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.d:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L525300.  v0:= v6.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525304.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52530a.  v0:= temp @kind object;
  #L52530c.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L525310.  v1:= length @variable v0;
  #L525312.  if v1 != 0 then goto L525318;
  #L525316.  return @kind void;
  #L525318.  v2:= -1I;
  #L52531a.  v3:= 0I;
  #L52531c.  v4:= 0I;
  #L52531e.  if v4 >= v1 then goto L525334;
  #L525322.  v5:= v0[v4] @kind object;
  #L525326.  if v5 != v7 then goto L52532e;
  #L52532a.  v2:= v4;
  #L52532c.  goto L525334;
  #L52532e.  v4:= v4 + 1;
  #L525332.  goto L52531e;
  #L525334.  if v2 >= 0 then goto L52533a;
  #L525338.  return @kind void;
  #L52533a.  v4:= 1I;
  #L52533c.  if v1 != v4 then goto L525346;
  #L525340.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L525344.  goto L525364;
  #L525346.  v5:= v1 + -1;
  #L52534a.  v5:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v5];
  #L52534e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L525354.  v3:= v2 + 1;
  #L525358.  v1:= v1 - v2 @kind int;
  #L52535a.  v1:= v1 - v4 @kind int;
  #L52535c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L525362.  v1:= v5 @kind object;
  #L525364.  v2:= v6.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525368.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52536e.  v0:= temp;
  #L525370.  if v0 == 0 then goto L525300;
  #L525374.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52517c.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525180.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L525186.  v0:= temp @kind object;
  #L525188.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L52518c.  if v0 != v1 then goto L525196;
  #L525190.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L525194.  return v0 @kind object;
  #L525196.  v0:= 0I;
  #L525198.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52514c.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525150.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L525156.  v0:= temp @kind object;
  #L525158.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L52515c.  if v0 != v1 then goto L525166;
  #L525160.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L525164.  return v0 @kind object;
  #L525166.  v0:= 0I;
  #L525168.  return v0 @kind object;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.SingleSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L525098.  v0:= v1.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52509c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5250a2.  v0:= temp @kind object;
  #L5250a4.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L5250a8.  v0:= length @variable v0;
  #L5250aa.  if v0 == 0 then goto L5250b2;
  #L5250ae.  v0:= 1I;
  #L5250b0.  goto L5250b4;
  #L5250b2.  v0:= 0I;
  #L5250b4.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5250c8.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5250cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5250d2.  v0:= temp @kind object;
  #L5250d4.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L5250d8.  if v0 != v1 then goto L5250e8;
  #L5250dc.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L5250e0.  if v0 == 0 then goto L5250e8;
  #L5250e4.  v0:= 1I;
  #L5250e6.  goto L5250ea;
  #L5250e8.  v0:= 0I;
  #L5250ea.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5250fc.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525100.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L525106.  v0:= temp @kind object;
  #L525108.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L52510c.  if v0 != v1 then goto L52511c;
  #L525110.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L525114.  if v0 == 0 then goto L52511c;
  #L525118.  v0:= 1I;
  #L52511a.  goto L52511e;
  #L52511c.  v0:= 0I;
  #L52511e.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.SingleSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L525208.  v0:= "onError called with a null Throwable." @kind object;
  #L52520c.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L525212.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L525216.  v1:= 0I;
  #L525218.  v2:= 1I;
  #L52521a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L525220.  v0:= temp;
  #L525222.  if v0 == 0 then goto L525258;
  #L525226.  v4.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L52522a.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52522e.  v2:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L525232.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L525238.  v0:= temp @kind object;
  #L52523a.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L52523e.  v2:= length @variable v0;
  #L525240.  if v1 >= v2 then goto L52525e;
  #L525244.  v3:= v0[v1] @kind object;
  #L525248.  v3:= v3.`io.reactivex.rxjava3.subjects.SingleSubject$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L52524c.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L525252.  v1:= v1 + 1;
  #L525256.  goto L525240;
  #L525258.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52525e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L525270.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L525274.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52527a.  v0:= temp @kind object;
  #L52527c.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L525280.  if v0 != v1 then goto L52528a;
  #L525284.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L52528a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.subjects.SingleSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52529c.  v0:= "onSuccess called with a null value." @kind object;
  #L5252a0.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5252a6.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5252aa.  v1:= 0I;
  #L5252ac.  v2:= 1I;
  #L5252ae.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L5252b4.  v0:= temp;
  #L5252b6.  if v0 == 0 then goto L5252ec;
  #L5252ba.  v4.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` := v5 @kind object;
  #L5252be.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5252c2.  v2:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L5252c6.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5252cc.  v0:= temp @kind object;
  #L5252ce.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L5252d2.  v2:= length @variable v0;
  #L5252d4.  if v1 >= v2 then goto L5252ec;
  #L5252d8.  v3:= v0[v1] @kind object;
  #L5252dc.  v3:= v3.`io.reactivex.rxjava3.subjects.SingleSubject$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L5252e0.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L5252e6.  v1:= v1 + 1;
  #L5252ea.  goto L5252d4;
  #L5252ec.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L525388.  v0:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`;
  #L52538c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/subjects/SingleSubject;)V` @kind direct;
  #L525392.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L525398.  call temp:= `c`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.c:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)Z` @kind virtual;
  #L52539e.  v1:= temp;
  #L5253a0.  if v1 == 0 then goto L5253b8;
  #L5253a4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject$a;.isDisposed:()Z` @kind virtual;
  #L5253aa.  v3:= temp;
  #L5253ac.  if v3 == 0 then goto L5253d2;
  #L5253b0.  call `d`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.d:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)V` @kind virtual;
  #L5253b6.  goto L5253d2;
  #L5253b8.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L5253bc.  if v0 == 0 then goto L5253c8;
  #L5253c0.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5253c6.  goto L5253d2;
  #L5253c8.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L5253cc.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L5253d2.  return @kind void;
}
