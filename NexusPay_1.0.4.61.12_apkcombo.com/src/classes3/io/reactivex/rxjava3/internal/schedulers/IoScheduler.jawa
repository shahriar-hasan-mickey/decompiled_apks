record `io.reactivex.rxjava3.internal.schedulers.IoScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.rxjava3.internal.schedulers.IoScheduler.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.KEEP_ALIVE_TIME_DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.e` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50c5e4.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L50c5e8.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.g` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L50c5ec.  v0:= "rx3.io-keep-alive-time" @kind object;
  #L50c5f0.  v1:= 60L;
  #L50c5f4.  call temp:= `getLong`(v0, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L50c5fa.  v0:= temp @kind object;
  #L50c5fc.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L50c602.  v0:= temp @kind wide;
  #L50c604.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.f` @type ^`long` := v0 @kind wide;
  #L50c608.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$c`;
  #L50c60c.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L50c610.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L50c614.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c61a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50c620.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.h` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$c` := v0 @kind object;
  #L50c624.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L50c62a.  v0:= "rx3.io-priority" @kind object;
  #L50c62e.  v1:= 5I;
  #L50c630.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L50c636.  v0:= temp @kind object;
  #L50c638.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L50c63e.  v0:= temp;
  #L50c640.  v1:= 10I;
  #L50c644.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L50c64a.  v0:= temp;
  #L50c64c.  v1:= 1I;
  #L50c64e.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L50c654.  v0:= temp;
  #L50c656.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L50c65a.  v2:= "RxCachedThreadScheduler" @kind object;
  #L50c65e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L50c664.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L50c668.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L50c66c.  v2:= "RxCachedWorkerPoolEvictor" @kind object;
  #L50c670.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L50c676.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.e` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L50c67a.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`;
  #L50c67e.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` @kind object;
  #L50c682.  v2:= 0L;
  #L50c686.  v4:= 0I;
  #L50c688.  call `<init>`(v0, v2, v4, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50c68e.  `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` := v0 @kind object;
  #L50c692.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L50c698.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50c6ac.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` @kind object;
  #L50c6b0.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50c6b6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50c6c8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L50c6ce.  v1.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L50c6d2.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L50c6d6.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` @kind object;
  #L50c6da.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50c6e0.  v1.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L50c6e4.  call `start`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.start:()V` @kind virtual;
  #L50c6ea.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Scheduler$Worker` `createWorker`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50c5b8.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$b`;
  #L50c5bc.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c5c0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50c5c6.  v1:= temp @kind object;
  #L50c5c8.  v1:= (`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`) v1 @kind object;
  #L50c5cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$b;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;)V` @kind direct;
  #L50c5d2.  return v0 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50c6fc.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c700.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` @kind object;
  #L50c704.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50c70a.  v0:= temp @kind object;
  #L50c70c.  v0:= (`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L50c710.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` @kind object;
  #L50c714.  if v0 == v1 then goto L50c71e;
  #L50c718.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L50c71e.  return @kind void;
}
procedure `int` `size`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50c588.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c58c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50c592.  v0:= temp @kind object;
  #L50c594.  v0:= (`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L50c598.  v0:= v0.`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L50c59c.  call temp:= `size`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L50c5a2.  v0:= temp;
  #L50c5a4.  return v0;
}
procedure `void` `start`(`io.reactivex.rxjava3.internal.schedulers.IoScheduler` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50c730.  v0:= new `io.reactivex.rxjava3.internal.schedulers.IoScheduler$a`;
  #L50c734.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.f` @type ^`long` @kind wide;
  #L50c738.  v3:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L50c73c.  v4:= v5.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L50c740.  call `<init>`(v0, v1, v3, v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50c746.  v1:= v5.`io.reactivex.rxjava3.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c74a.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.rxjava3.internal.schedulers.IoScheduler$a` @kind object;
  #L50c74e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50c754.  v1:= temp;
  #L50c756.  if v1 != 0 then goto L50c760;
  #L50c75a.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L50c760.  return @kind void;
}
