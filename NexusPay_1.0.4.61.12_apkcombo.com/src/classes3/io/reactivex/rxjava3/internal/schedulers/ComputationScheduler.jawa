record `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler` @kind class, `io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport` @kind interface {
  `java.util.concurrent.ThreadFactory` `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.e` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c` `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50b2e0.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L50b2e6.  v0:= temp @kind object;
  #L50b2e8.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L50b2ee.  v0:= temp;
  #L50b2f0.  v1:= "rx3.computation-threads" @kind object;
  #L50b2f4.  v2:= 0I;
  #L50b2f6.  call temp:= `getInteger`(v1, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L50b2fc.  v1:= temp @kind object;
  #L50b2fe.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L50b304.  v1:= temp;
  #L50b306.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.b:(II)I` @kind static;
  #L50b30c.  v0:= temp;
  #L50b30e.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.f` @type ^`int` := v0;
  #L50b312.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`;
  #L50b316.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L50b31a.  v3:= "RxComputationShutdown" @kind object;
  #L50b31e.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b324.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50b32a.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.g` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c` := v0 @kind object;
  #L50b32e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L50b334.  v0:= "rx3.computation-priority" @kind object;
  #L50b338.  v1:= 5I;
  #L50b33a.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L50b340.  v0:= temp @kind object;
  #L50b342.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L50b348.  v0:= temp;
  #L50b34a.  v1:= 10I;
  #L50b34e.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L50b354.  v0:= temp;
  #L50b356.  v1:= 1I;
  #L50b358.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L50b35e.  v0:= temp;
  #L50b360.  v3:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L50b364.  v4:= "RxComputationThreadPool" @kind object;
  #L50b368.  call `<init>`(v3, v4, v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L50b36e.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` := v3 @kind object;
  #L50b372.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`;
  #L50b376.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50b37c.  `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` := v0 @kind object;
  #L50b380.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L50b386.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50b398.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.rxjava3.internal.schedulers.RxThreadFactory` @kind object;
  #L50b39c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50b3a2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50b3b4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.<init>:()V` @kind direct;
  #L50b3ba.  v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L50b3be.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L50b3c2.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind object;
  #L50b3c6.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50b3cc.  v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L50b3d0.  call `start`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.start:()V` @kind virtual;
  #L50b3d6.  return @kind void;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.b:(II)I` @AccessFlag STATIC {
    temp;

  #L50b21c.  if v1 <= 0 then goto L50b228;
  #L50b220.  if v1 <= v0 then goto L50b226;
  #L50b224.  goto L50b228;
  #L50b226.  v0:= v1;
  #L50b228.  return v0;
}
procedure `io.reactivex.rxjava3.core.Scheduler$Worker` `createWorker`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50b23c.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$a`;
  #L50b240.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50b244.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50b24a.  v1:= temp @kind object;
  #L50b24c.  v1:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v1 @kind object;
  #L50b250.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L50b256.  v1:= temp @kind object;
  #L50b258.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$a;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;)V` @kind direct;
  #L50b25e.  return v0 @kind object;
}
procedure `void` `createWorkers`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.createWorkers:(ILio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b3e8.  v0:= "number > 0 required" @kind object;
  #L50b3ec.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L50b3f2.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50b3f6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50b3fc.  v0:= temp @kind object;
  #L50b3fe.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L50b402.  call `createWorkers`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.createWorkers:(ILio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @kind virtual;
  #L50b408.  return @kind void;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `scheduleDirect`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b270.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50b274.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50b27a.  v0:= temp @kind object;
  #L50b27c.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L50b280.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L50b286.  v0:= temp @kind object;
  #L50b288.  call temp:= `scheduleDirect`(v0, v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L50b28e.  v2:= temp @kind object;
  #L50b290.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L50b2a4.  v0:= v8.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50b2a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50b2ae.  v0:= temp @kind object;
  #L50b2b0.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L50b2b4.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L50b2ba.  v1:= temp @kind object;
  #L50b2bc.  v2:= v9 @kind object;
  #L50b2be.  v3:= v10 @kind wide;
  #L50b2c0.  v5:= v12 @kind wide;
  #L50b2c2.  v7:= v14 @kind object;
  #L50b2c4.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L50b2ca.  v9:= temp @kind object;
  #L50b2cc.  return v9 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50b41c.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50b420.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind object;
  #L50b424.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50b42a.  v0:= temp @kind object;
  #L50b42c.  v0:= (`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L50b430.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind object;
  #L50b434.  if v0 == v1 then goto L50b43e;
  #L50b438.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L50b43e.  return @kind void;
}
procedure `void` `start`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50b450.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b`;
  #L50b454.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.f` @type ^`int`;
  #L50b458.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L50b45c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50b462.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50b466.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.d` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind object;
  #L50b46a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50b470.  v1:= temp;
  #L50b472.  if v1 != 0 then goto L50b47c;
  #L50b476.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L50b47c.  return @kind void;
}
