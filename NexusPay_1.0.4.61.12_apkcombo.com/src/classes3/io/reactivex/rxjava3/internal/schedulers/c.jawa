record `io.reactivex.rxjava3.internal.schedulers.c` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.c.c` @AccessFlag FINAL;
  `java.util.concurrent.ExecutorService` `io.reactivex.rxjava3.internal.schedulers.c.d` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.internal.schedulers.c.e` @AccessFlag ;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.c.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L50c0b4.  v0:= new `java.util.concurrent.FutureTask`;
  #L50c0b8.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L50c0bc.  v2:= 0I;
  #L50c0be.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L50c0c4.  `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L50c0c8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.c` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<init>:(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50c0dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50c0e2.  v0.`io.reactivex.rxjava3.internal.schedulers.c.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L50c0e6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L50c0ea.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50c0f0.  v0.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L50c0f4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L50c0f8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50c0fe.  v0.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L50c102.  v0.`io.reactivex.rxjava3.internal.schedulers.c.d` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L50c106.  return @kind void;
}
procedure `java.lang.Void` `a`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.a:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50c058.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50c05e.  v0:= temp @kind object;
  #L50c060.  v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L50c064.  v0:= 0I;
  #L50c066.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.a` @type ^`java.lang.Runnable` @kind object;
  #L50c06a.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L50c070.  v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L50c074.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L50c078.  call temp:= `submit`(v1, v2) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L50c07e.  v1:= temp @kind object;
  #L50c080.  call `c`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.c:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L50c086.  return v0 @kind object;
  #L50c088.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50c08a.  v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L50c08e.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50c094.  throw v1;
  catch `java.lang.Throwable` @[L50c066..L50c086] goto L50c088;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.b:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L50c1a4.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c1a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50c1ae.  v0:= temp @kind object;
  #L50c1b0.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L50c1b4.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50c1b8.  if v0 != v1 then goto L50c1da;
  #L50c1bc.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L50c1c0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50c1c6.  v1:= temp @kind object;
  #L50c1c8.  if v0 == v1 then goto L50c1d0;
  #L50c1cc.  v0:= 1I;
  #L50c1ce.  goto L50c1d2;
  #L50c1d0.  v0:= 0I;
  #L50c1d2.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50c1d8.  return @kind void;
  #L50c1da.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c1de.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50c1e4.  v0:= temp;
  #L50c1e6.  if v0 == 0 then goto L50c1a4;
  #L50c1ea.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.c:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L50c1fc.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c200.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50c206.  v0:= temp @kind object;
  #L50c208.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L50c20c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50c210.  if v0 != v1 then goto L50c232;
  #L50c214.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L50c218.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50c21e.  v1:= temp @kind object;
  #L50c220.  if v0 == v1 then goto L50c228;
  #L50c224.  v0:= 1I;
  #L50c226.  goto L50c22a;
  #L50c228.  v0:= 0I;
  #L50c22a.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50c230.  return @kind void;
  #L50c232.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c236.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50c23c.  v0:= temp;
  #L50c23e.  if v0 == 0 then goto L50c1fc;
  #L50c242.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.rxjava3.internal.schedulers.c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L50c03c.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.a:()Ljava/lang/Void;` @kind virtual;
  #L50c042.  v0:= temp @kind object;
  #L50c044.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50c118.  v0:= v5.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c11c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50c120.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50c126.  v0:= temp @kind object;
  #L50c128.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L50c12c.  v1:= 1I;
  #L50c12e.  v2:= 0I;
  #L50c130.  if v0 == 0 then goto L50c158;
  #L50c134.  v3:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50c138.  if v0 == v3 then goto L50c158;
  #L50c13c.  v3:= v5.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L50c140.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50c146.  v4:= temp @kind object;
  #L50c148.  if v3 == v4 then goto L50c150;
  #L50c14c.  v3:= 1I;
  #L50c14e.  goto L50c152;
  #L50c150.  v3:= 0I;
  #L50c152.  call temp:= `cancel`(v0, v3) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50c158.  v0:= v5.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c15c.  v3:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50c160.  call temp:= `getAndSet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50c166.  v0:= temp @kind object;
  #L50c168.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L50c16c.  if v0 == 0 then goto L50c192;
  #L50c170.  v3:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50c174.  if v0 == v3 then goto L50c192;
  #L50c178.  v3:= v5.`io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L50c17c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50c182.  v4:= temp @kind object;
  #L50c184.  if v3 == v4 then goto L50c18a;
  #L50c188.  goto L50c18c;
  #L50c18a.  v1:= 0I;
  #L50c18c.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50c192.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50c010.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50c014.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50c01a.  v0:= temp @kind object;
  #L50c01c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50c020.  if v0 != v1 then goto L50c028;
  #L50c024.  v0:= 1I;
  #L50c026.  goto L50c02a;
  #L50c028.  v0:= 0I;
  #L50c02a.  return v0;
}
