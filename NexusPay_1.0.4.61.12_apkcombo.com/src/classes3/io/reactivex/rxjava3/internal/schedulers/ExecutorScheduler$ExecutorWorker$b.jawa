record `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.DisposableContainer` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.rxjava3.disposables.DisposableContainer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50b790.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L50b796.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L50b79a.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @type ^`io.reactivex.rxjava3.disposables.DisposableContainer` := v2 @kind object;
  #L50b79e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L50b7b0.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @type ^`io.reactivex.rxjava3.disposables.DisposableContainer` @kind object;
  #L50b7b4.  if v0 == 0 then goto L50b7be;
  #L50b7b8.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L50b7be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50b7d0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50b7d6.  v0:= temp;
  #L50b7d8.  v1:= 2I;
  #L50b7da.  if v0 < v1 then goto L50b7e0;
  #L50b7de.  goto L50b82c;
  #L50b7e0.  v1:= 4I;
  #L50b7e2.  if v0 != 0 then goto L50b7fc;
  #L50b7e6.  v0:= 0I;
  #L50b7e8.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L50b7ee.  v0:= temp;
  #L50b7f0.  if v0 == 0 then goto L50b7d0;
  #L50b7f4.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L50b7fa.  goto L50b82c;
  #L50b7fc.  v0:= 1I;
  #L50b7fe.  v2:= 3I;
  #L50b800.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L50b806.  v0:= temp;
  #L50b808.  if v0 == 0 then goto L50b7d0;
  #L50b80c.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` @kind object;
  #L50b810.  if v0 == 0 then goto L50b820;
  #L50b814.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L50b81a.  v0:= 0I;
  #L50b81c.  v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L50b820.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L50b826.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L50b82c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50b768.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50b76e.  v0:= temp;
  #L50b770.  v1:= 2I;
  #L50b772.  if v0 < v1 then goto L50b77a;
  #L50b776.  v0:= 1I;
  #L50b778.  goto L50b77c;
  #L50b77a.  v0:= 0I;
  #L50b77c.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50b840.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50b846.  v0:= temp;
  #L50b848.  if v0 != 0 then goto L50b8f0;
  #L50b84c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50b852.  v0:= temp @kind object;
  #L50b854.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L50b858.  v0:= 0I;
  #L50b85a.  v1:= 1I;
  #L50b85c.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L50b862.  v0:= temp;
  #L50b864.  v2:= 0I;
  #L50b866.  if v0 == 0 then goto L50b8ec;
  #L50b86a.  v0:= 3I;
  #L50b86c.  v3:= 2I;
  #L50b86e.  v4:= v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @type ^`java.lang.Runnable` @kind object;
  #L50b872.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L50b878.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L50b87c.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L50b882.  v1:= temp;
  #L50b884.  if v1 == 0 then goto L50b890;
  #L50b888.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L50b88e.  goto L50b8f0;
  #L50b890.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50b896.  v1:= temp;
  #L50b898.  if v1 != v0 then goto L50b8a4;
  #L50b89c.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L50b8a2.  goto L50b890;
  #L50b8a4.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L50b8aa.  goto L50b8f0;
  #L50b8ac.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50b8ae.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50b8b4.  throw v4;
  #L50b8b6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50b8b8.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L50b8bc.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L50b8c2.  v1:= temp;
  #L50b8c4.  if v1 != 0 then goto L50b8e4;
  #L50b8c8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50b8ce.  v1:= temp;
  #L50b8d0.  if v1 != v0 then goto L50b8dc;
  #L50b8d4.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L50b8da.  goto L50b8c8;
  #L50b8dc.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L50b8e2.  goto L50b8ea;
  #L50b8e4.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L50b8ea.  throw v4;
  #L50b8ec.  v5.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L50b8f0.  return @kind void;
  catch `java.lang.Throwable` @[L50b86e..L50b878] goto L50b8ac;
  catch `java.lang.Throwable` @[L50b8ae..L50b8b6] goto L50b8b6;
}
