record `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport` @kind interface {
  `int` `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`[] `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` v3 @kind this, `int` v4 , `java.util.concurrent.ThreadFactory` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L50b124.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50b12a.  v3.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.a` @type ^`int` := v4;
  #L50b12e.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`[v4];
  #L50b132.  v3.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`[] := v0 @kind object;
  #L50b136.  v0:= 0I;
  #L50b138.  if v0 >= v4 then goto L50b154;
  #L50b13c.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L50b140.  v2:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`;
  #L50b144.  call `<init>`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50b14a.  v1[v0]:= v2 @kind object;
  #L50b14e.  v0:= v0 + 1;
  #L50b152.  goto L50b138;
  #L50b154.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c` `a`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50b0e8.  v0:= v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.a` @type ^`int`;
  #L50b0ec.  if v0 != 0 then goto L50b0f6;
  #L50b0f0.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.g` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c` @kind object;
  #L50b0f4.  return v0 @kind object;
  #L50b0f6.  v1:= v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L50b0fa.  v2:= v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.c` @type ^`long` @kind wide;
  #L50b0fe.  v4:= 1L;
  #L50b102.  v4:= v4 + v2 @kind long;
  #L50b104.  v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.c` @type ^`long` := v4 @kind wide;
  #L50b108.  v4:= (`long`) v0 @kind i2l;
  #L50b10a.  v2:= v2 %% v4 @kind long;
  #L50b10c.  v0:= (`int`) v2 @kind l2i;
  #L50b10e.  v0:= v1[v0] @kind object;
  #L50b112.  return v0 @kind object;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50b1d4.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L50b1d8.  v1:= length @variable v0;
  #L50b1da.  v2:= 0I;
  #L50b1dc.  if v2 >= v1 then goto L50b1f0;
  #L50b1e0.  v3:= v0[v2] @kind object;
  #L50b1e4.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L50b1ea.  v2:= v2 + 1;
  #L50b1ee.  goto L50b1dc;
  #L50b1f0.  return @kind void;
}
procedure `void` `createWorkers`(`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b` v6 @kind this, `int` v7 , `io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$b;.createWorkers:(ILio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50b168.  v0:= v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.a` @type ^`int`;
  #L50b16c.  v1:= 0I;
  #L50b16e.  if v0 != 0 then goto L50b186;
  #L50b172.  if v1 >= v7 then goto L50b1c2;
  #L50b176.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.g` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c` @kind object;
  #L50b17a.  call `onWorker`(v8, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;.onWorker:(ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind interface;
  #L50b180.  v1:= v1 + 1;
  #L50b184.  goto L50b172;
  #L50b186.  v2:= v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.c` @type ^`long` @kind wide;
  #L50b18a.  v3:= (`int`) v2 @kind l2i;
  #L50b18c.  v3:= v3 %% v0 @kind int;
  #L50b18e.  v2:= 0I;
  #L50b190.  if v2 >= v7 then goto L50b1bc;
  #L50b194.  v4:= new `io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$a`;
  #L50b198.  v5:= v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L50b19c.  v5:= v5[v3] @kind object;
  #L50b1a0.  call `<init>`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$a;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$c;)V` @kind direct;
  #L50b1a6.  call `onWorker`(v8, v2, v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;.onWorker:(ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind interface;
  #L50b1ac.  v3:= v3 + 1;
  #L50b1b0.  if v3 != v0 then goto L50b1b6;
  #L50b1b4.  v3:= 0I;
  #L50b1b6.  v2:= v2 + 1;
  #L50b1ba.  goto L50b190;
  #L50b1bc.  v7:= (`long`) v3 @kind i2l;
  #L50b1be.  v6.`io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$b.c` @type ^`long` := v7 @kind wide;
  #L50b1c2.  return @kind void;
}
