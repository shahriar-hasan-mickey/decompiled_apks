record `io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.lang.Runnable` @kind interface, `java.util.concurrent.Callable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.a` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L50cd6c.  v0:= new `java.lang.Object`;
  #L50cd70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50cd76.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` := v0 @kind object;
  #L50cd7a.  v0:= new `java.lang.Object`;
  #L50cd7e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50cd84.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` := v0 @kind object;
  #L50cd88.  v0:= new `java.lang.Object`;
  #L50cd8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50cd92.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` := v0 @kind object;
  #L50cd96.  v0:= new `java.lang.Object`;
  #L50cd9a.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50cda0.  `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` := v0 @kind object;
  #L50cda4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v1 @kind this, `java.lang.Runnable` v2 @kind object, `io.reactivex.rxjava3.disposables.DisposableContainer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50cdb8.  v0:= 3I;
  #L50cdba.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L50cdc0.  v1.`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` := v2 @kind object;
  #L50cdc4.  v2:= 0I;
  #L50cdc6.  call `lazySet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L50cdcc.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50cd50.  call `run`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.run:()V` @kind virtual;
  #L50cd56.  v0:= 0I;
  #L50cd58.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50cde0.  v0:= 1I;
  #L50cde2.  call temp:= `get`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50cde8.  v1:= temp @kind object;
  #L50cdea.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50cdee.  v3:= 0I;
  #L50cdf0.  if v1 == v2 then goto L50ce4a;
  #L50cdf4.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L50cdf8.  if v1 == v2 then goto L50ce4a;
  #L50cdfc.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L50ce00.  if v1 != v2 then goto L50ce06;
  #L50ce04.  goto L50ce4a;
  #L50ce06.  v2:= 2I;
  #L50ce08.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50ce0e.  v2:= temp @kind object;
  #L50ce10.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50ce16.  v4:= temp @kind object;
  #L50ce18.  if v2 == v4 then goto L50ce20;
  #L50ce1c.  v2:= 1I;
  #L50ce1e.  goto L50ce22;
  #L50ce20.  v2:= 0I;
  #L50ce22.  if v2 == 0 then goto L50ce2c;
  #L50ce26.  v4:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L50ce2a.  goto L50ce30;
  #L50ce2c.  v4:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L50ce30.  call temp:= `compareAndSet`(v5, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50ce36.  v0:= temp;
  #L50ce38.  if v0 == 0 then goto L50cde0;
  #L50ce3c.  if v1 == 0 then goto L50ce4a;
  #L50ce40.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L50ce44.  call temp:= `cancel`(v1, v2) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50ce4a.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50ce50.  v0:= temp @kind object;
  #L50ce52.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50ce56.  if v0 == v1 then goto L50ce7e;
  #L50ce5a.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L50ce5e.  if v0 == v1 then goto L50ce7e;
  #L50ce62.  if v0 != 0 then goto L50ce68;
  #L50ce66.  goto L50ce7e;
  #L50ce68.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50ce6e.  v1:= temp;
  #L50ce70.  if v1 == 0 then goto L50ce4a;
  #L50ce74.  v0:= (`io.reactivex.rxjava3.disposables.DisposableContainer`) v0 @kind object;
  #L50ce78.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L50ce7e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50cd20.  v0:= 0I;
  #L50cd22.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50cd28.  v1:= temp @kind object;
  #L50cd2a.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L50cd2e.  if v1 == v2 then goto L50cd3a;
  #L50cd32.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50cd36.  if v1 != v2 then goto L50cd3c;
  #L50cd3a.  v0:= 1I;
  #L50cd3c.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50ce90.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50ce96.  v0:= temp @kind object;
  #L50ce98.  v1:= 2I;
  #L50ce9a.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L50cea0.  v0:= 0I;
  #L50cea2.  v2:= 1I;
  #L50cea4.  v3:= 0I;
  #L50cea6.  v4:= v5.`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L50ceaa.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L50ceb0.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L50ceb6.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50cebc.  v0:= temp @kind object;
  #L50cebe.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L50cec2.  if v0 == v1 then goto L50cee4;
  #L50cec6.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50ceca.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50ced0.  v1:= temp;
  #L50ced2.  if v1 == 0 then goto L50cee4;
  #L50ced6.  if v0 == 0 then goto L50cee4;
  #L50ceda.  v0:= (`io.reactivex.rxjava3.disposables.DisposableContainer`) v0 @kind object;
  #L50cede.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L50cee4.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50ceea.  v0:= temp @kind object;
  #L50ceec.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L50cef0.  if v0 == v1 then goto L50cf0c;
  #L50cef4.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L50cef8.  if v0 == v1 then goto L50cf0c;
  #L50cefc.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50cf00.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50cf06.  v0:= temp;
  #L50cf08.  if v0 == 0 then goto L50cee4;
  #L50cf0c.  return @kind void;
  #L50cf0e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50cf10.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50cf16.  throw v4;
  #L50cf18.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50cf1a.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L50cf20.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50cf26.  v0:= temp @kind object;
  #L50cf28.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L50cf2c.  if v0 == v1 then goto L50cf4e;
  #L50cf30.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50cf34.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50cf3a.  v1:= temp;
  #L50cf3c.  if v1 == 0 then goto L50cf4e;
  #L50cf40.  if v0 == 0 then goto L50cf4e;
  #L50cf44.  v0:= (`io.reactivex.rxjava3.disposables.DisposableContainer`) v0 @kind object;
  #L50cf48.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/DisposableContainer;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind interface;
  #L50cf4e.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50cf54.  v0:= temp @kind object;
  #L50cf56.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L50cf5a.  if v0 == v1 then goto L50cf78;
  #L50cf5e.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L50cf62.  if v0 == v1 then goto L50cf78;
  #L50cf66.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50cf6a.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50cf70.  v0:= temp;
  #L50cf72.  if v0 != 0 then goto L50cf78;
  #L50cf76.  goto L50cf4e;
  #L50cf78.  throw v4;
  catch `java.lang.Throwable` @[L50cea6..L50ceb0] goto L50cf0e;
  catch `java.lang.Throwable` @[L50cf10..L50cf18] goto L50cf18;
}
procedure `void` `setFuture`(`io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable` v3 @kind this, `java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50cfa4.  v0:= 1I;
  #L50cfa6.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50cfac.  v1:= temp @kind object;
  #L50cfae.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L50cfb2.  if v1 != v2 then goto L50cfb8;
  #L50cfb6.  return @kind void;
  #L50cfb8.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L50cfbc.  if v1 != v2 then goto L50cfca;
  #L50cfc0.  v0:= 0I;
  #L50cfc2.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50cfc8.  return @kind void;
  #L50cfca.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L50cfce.  if v1 != v2 then goto L50cfda;
  #L50cfd2.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50cfd8.  return @kind void;
  #L50cfda.  call temp:= `compareAndSet`(v3, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50cfe0.  v0:= temp;
  #L50cfe2.  if v0 == 0 then goto L50cfa4;
  #L50cfe6.  return @kind void;
}
