record `io.reactivex.rxjava3.internal.schedulers.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.a.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.internal.schedulers.a.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L50aec4.  v0:= new `java.util.concurrent.FutureTask`;
  #L50aec8.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L50aecc.  v2:= 0I;
  #L50aece.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L50aed4.  `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L50aed8.  v0:= new `java.util.concurrent.FutureTask`;
  #L50aedc.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L50aee0.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L50aee6.  `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L50aeea.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.a` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50aefc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50af02.  v0.`io.reactivex.rxjava3.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L50af06.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L50af18.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50af1e.  v0:= temp @kind object;
  #L50af20.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L50af24.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50af28.  if v0 == v1 then goto L50af60;
  #L50af2c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50af30.  if v0 == v1 then goto L50af60;
  #L50af34.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50af3a.  v1:= temp;
  #L50af3c.  if v1 == 0 then goto L50af60;
  #L50af40.  if v0 == 0 then goto L50af60;
  #L50af44.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L50af48.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50af4e.  v2:= temp @kind object;
  #L50af50.  if v1 == v2 then goto L50af58;
  #L50af54.  v1:= 1I;
  #L50af56.  goto L50af5a;
  #L50af58.  v1:= 0I;
  #L50af5a.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50af60.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.internal.schedulers.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50aeac.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` @kind object;
  #L50aeb0.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50ae74.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50ae7a.  v0:= temp @kind object;
  #L50ae7c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L50ae80.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50ae84.  if v0 == v1 then goto L50ae96;
  #L50ae88.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50ae8c.  if v0 != v1 then goto L50ae92;
  #L50ae90.  goto L50ae96;
  #L50ae92.  v0:= 0I;
  #L50ae94.  goto L50ae98;
  #L50ae96.  v0:= 1I;
  #L50ae98.  return v0;
}
procedure `void` `setFuture`(`io.reactivex.rxjava3.internal.schedulers.a` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50af74.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50af7a.  v0:= temp @kind object;
  #L50af7c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L50af80.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50af84.  if v0 != v1 then goto L50af8a;
  #L50af88.  goto L50afbc;
  #L50af8a.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50af8e.  if v0 != v1 then goto L50afb0;
  #L50af92.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L50af96.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L50af9c.  v1:= temp @kind object;
  #L50af9e.  if v0 == v1 then goto L50afa6;
  #L50afa2.  v0:= 1I;
  #L50afa4.  goto L50afa8;
  #L50afa6.  v0:= 0I;
  #L50afa8.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L50afae.  goto L50afbc;
  #L50afb0.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50afb6.  v0:= temp;
  #L50afb8.  if v0 == 0 then goto L50af74;
  #L50afbc.  return @kind void;
}
