record `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Scheduler$Worker` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.util.concurrent.PriorityBlockingQueue` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L50de40.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.<init>:()V` @kind direct;
  #L50de46.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L50de4a.  call `<init>`(v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L50de50.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` := v0 @kind object;
  #L50de54.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L50de58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L50de5e.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L50de62.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L50de66.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L50de6c.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L50de70.  return @kind void;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `a`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag  {
    temp;
    v0;

  #L50dd18.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L50dd1c.  if v0 == 0 then goto L50dd26;
  #L50dd20.  v2:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L50dd24.  return v2 @kind object;
  #L50dd26.  v0:= new `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b`;
  #L50dd2a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L50dd30.  v3:= temp @kind object;
  #L50dd32.  v4:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50dd36.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L50dd3c.  v4:= temp;
  #L50dd3e.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$b;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @kind direct;
  #L50dd44.  v2:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L50dd48.  call temp:= `add`(v2, v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L50dd4e.  v2:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50dd52.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L50dd58.  v2:= temp;
  #L50dd5a.  if v2 != 0 then goto L50ddb8;
  #L50dd5e.  v2:= 1I;
  #L50dd60.  v3:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L50dd64.  if v3 == 0 then goto L50dd78;
  #L50dd68.  v2:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L50dd6c.  call `clear`(v2) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.clear:()V` @kind virtual;
  #L50dd72.  v2:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L50dd76.  return v2 @kind object;
  #L50dd78.  v3:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L50dd7c.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L50dd82.  v3:= temp @kind object;
  #L50dd84.  v3:= (`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b`) v3 @kind object;
  #L50dd88.  if v3 != 0 then goto L50dda4;
  #L50dd8c.  v3:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50dd90.  v2:= -v2 @kind int;
  #L50dd92.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L50dd98.  v2:= temp;
  #L50dd9a.  if v2 != 0 then goto L50dd60;
  #L50dd9e.  v2:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L50dda2.  return v2 @kind object;
  #L50dda4.  v4:= v3.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b.d` @type ^`boolean` @kind boolean;
  #L50dda8.  if v4 != 0 then goto L50dd60;
  #L50ddac.  v3:= v3.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$b.a` @type ^`java.lang.Runnable` @kind object;
  #L50ddb0.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L50ddb6.  goto L50dd60;
  #L50ddb8.  v2:= new `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c$a`;
  #L50ddbc.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c$a;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$b;)V` @kind direct;
  #L50ddc2.  call temp:= `c`(v2) @signature `Lio/reactivex/rxjava3/disposables/a;.c:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L50ddc8.  v2:= temp @kind object;
  #L50ddca.  return v2 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50de84.  v0:= 1I;
  #L50de86.  v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` := v0 @kind boolean;
  #L50de8a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50dd00.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L50dd04.  return v0;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50dddc.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L50dde0.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L50dde6.  v0:= temp @kind wide;
  #L50dde8.  call temp:= `a`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L50ddee.  v3:= temp @kind object;
  #L50ddf0.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50de04.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L50de08.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L50de0e.  v0:= temp @kind wide;
  #L50de10.  call temp:= `toMillis`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L50de16.  v4:= temp @kind wide;
  #L50de18.  v0:= v0 + v4 @kind long;
  #L50de1a.  v4:= new `io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler$a`;
  #L50de1e.  call `<init>`(v4, v3, v2, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;J)V` @kind direct;
  #L50de24.  call temp:= `a`(v2, v4, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L50de2a.  v3:= temp @kind object;
  #L50de2c.  return v3 @kind object;
}
