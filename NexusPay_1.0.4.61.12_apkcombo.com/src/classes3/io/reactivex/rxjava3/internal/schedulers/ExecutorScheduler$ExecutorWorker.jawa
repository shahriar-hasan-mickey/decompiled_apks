record `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Scheduler$Worker` @kind class, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @AccessFlag FINAL;
  `java.util.concurrent.Executor` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object, `boolean` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.<init>:(Ljava/util/concurrent/Executor;ZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50bb08.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.<init>:()V` @kind direct;
  #L50bb0e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L50bb12.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L50bb18.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L50bb1c.  v0:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L50bb20.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L50bb26.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v0 @kind object;
  #L50bb2a.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L50bb2e.  v2:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L50bb32.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L50bb38.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` := v2 @kind object;
  #L50bb3c.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @type ^`boolean` := v3 @kind boolean;
  #L50bb40.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @type ^`boolean` := v4 @kind boolean;
  #L50bb44.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L50bbc4.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L50bbc8.  v1:= 1I;
  #L50bbca.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50bbce.  if v2 == 0 then goto L50bbda;
  #L50bbd2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L50bbd8.  return @kind void;
  #L50bbda.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L50bbe0.  v2:= temp @kind object;
  #L50bbe2.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L50bbe6.  if v2 != 0 then goto L50bc0e;
  #L50bbea.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50bbee.  if v2 == 0 then goto L50bbfa;
  #L50bbf2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L50bbf8.  return @kind void;
  #L50bbfa.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50bbfe.  v1:= -v1 @kind int;
  #L50bc00.  call temp:= `addAndGet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L50bc06.  v1:= temp;
  #L50bc08.  if v1 != 0 then goto L50bbca;
  #L50bc0c.  return @kind void;
  #L50bc0e.  call `run`(v2) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L50bc14.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50bc18.  if v2 == 0 then goto L50bbda;
  #L50bc1c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L50bc22.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L50bc34.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L50bc38.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50bc3c.  if v1 == 0 then goto L50bc48;
  #L50bc40.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L50bc46.  return @kind void;
  #L50bc48.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L50bc4e.  v1:= temp @kind object;
  #L50bc50.  v1:= (`java.lang.Runnable`) v1 @kind object;
  #L50bc54.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L50bc5a.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50bc5e.  if v1 == 0 then goto L50bc6a;
  #L50bc62.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L50bc68.  return @kind void;
  #L50bc6a.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50bc6e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L50bc74.  v0:= temp;
  #L50bc76.  if v0 == 0 then goto L50bc84;
  #L50bc7a.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L50bc7e.  call `execute`(v0, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L50bc84.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50bb58.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50bb5c.  if v0 != 0 then goto L50bb8a;
  #L50bb60.  v0:= 1I;
  #L50bb62.  v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` := v0 @kind boolean;
  #L50bb66.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L50bb6a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L50bb70.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50bb74.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L50bb7a.  v0:= temp;
  #L50bb7c.  if v0 != 0 then goto L50bb8a;
  #L50bb80.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L50bb84.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L50bb8a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b96c.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50b970.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50bb9c.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @type ^`boolean` @kind boolean;
  #L50bba0.  if v0 == 0 then goto L50bbac;
  #L50bba4.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.b:()V` @kind virtual;
  #L50bbaa.  goto L50bbb2;
  #L50bbac.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.a:()V` @kind virtual;
  #L50bbb2.  return @kind void;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50b984.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50b988.  if v0 == 0 then goto L50b992;
  #L50b98c.  v3:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L50b990.  return v3 @kind object;
  #L50b992.  call temp:= `onSchedule`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L50b998.  v3:= temp @kind object;
  #L50b99a.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @type ^`boolean` @kind boolean;
  #L50b99e.  if v0 == 0 then goto L50b9bc;
  #L50b9a2.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$b`;
  #L50b9a6.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L50b9aa.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @kind direct;
  #L50b9b0.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L50b9b4.  call temp:= `add`(v3, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L50b9ba.  goto L50b9c6;
  #L50b9bc.  v0:= new `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$a`;
  #L50b9c0.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$a;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L50b9c6.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L50b9ca.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L50b9d0.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50b9d4.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L50b9da.  v3:= temp;
  #L50b9dc.  if v3 != 0 then goto L50ba0a;
  #L50b9e0.  v3:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L50b9e4.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L50b9ea.  goto L50ba0a;
  #L50b9ec.  v3:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L50b9ee.  v0:= 1I;
  #L50b9f0.  v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` := v0 @kind boolean;
  #L50b9f4.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L50b9f8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L50b9fe.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50ba04.  v3:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L50ba08.  return v3 @kind object;
  #L50ba0a.  return v0 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L50b9e0..L50b9ea] goto L50b9ec;
}
procedure `io.reactivex.rxjava3.disposables.Disposable` `schedule`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker` v4 @kind this, `java.lang.Runnable` v5 @kind object, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50ba2c.  v0:= 0L;
  #L50ba30.  v2:= lcmp(v6, v0);
  #L50ba34.  if v2 > 0 then goto L50ba42;
  #L50ba38.  call temp:= `schedule`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L50ba3e.  v5:= temp @kind object;
  #L50ba40.  return v5 @kind object;
  #L50ba42.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` @kind boolean;
  #L50ba46.  if v0 == 0 then goto L50ba50;
  #L50ba4a.  v5:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L50ba4e.  return v5 @kind object;
  #L50ba50.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L50ba54.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L50ba5a.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L50ba5e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind direct;
  #L50ba64.  call temp:= `onSchedule`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L50ba6a.  v5:= temp @kind object;
  #L50ba6c.  v2:= new `io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable`;
  #L50ba70.  v3:= new `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$c`;
  #L50ba74.  call `<init>`(v3, v4, v1, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker$c;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$ExecutorWorker;Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;Ljava/lang/Runnable;)V` @kind direct;
  #L50ba7a.  v5:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L50ba7e.  call `<init>`(v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/disposables/DisposableContainer;)V` @kind direct;
  #L50ba84.  v5:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.g` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L50ba88.  call temp:= `add`(v5, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L50ba8e.  v5:= v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L50ba92.  v3:= instanceof @variable v5 @type ^`java.util.concurrent.ScheduledExecutorService` @kind boolean;
  #L50ba96.  if v3 == 0 then goto L50bac2;
  #L50ba9a.  v5:= (`java.util.concurrent.ScheduledExecutorService`) v5 @kind object;
  #L50ba9e.  call temp:= `schedule`(v5, v2, v6, v8) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L50baa4.  v5:= temp @kind object;
  #L50baa6.  call `setFuture`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L50baac.  goto L50bade;
  #L50baae.  v5:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L50bab0.  v6:= 1I;
  #L50bab2.  v4.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`boolean` := v6 @kind boolean;
  #L50bab6.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50babc.  v5:= `@@io.reactivex.rxjava3.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.rxjava3.internal.disposables.EmptyDisposable` @kind object;
  #L50bac0.  return v5 @kind object;
  #L50bac2.  v5:= `@@io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L50bac6.  call temp:= `scheduleDirect`(v5, v2, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L50bacc.  v5:= temp @kind object;
  #L50bace.  v6:= new `io.reactivex.rxjava3.internal.schedulers.b`;
  #L50bad2.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.<init>:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind direct;
  #L50bad8.  call `setFuture`(v2, v6) @signature `Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L50bade.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L50bae4.  return v1 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L50ba9a..L50baac] goto L50baae;
}
