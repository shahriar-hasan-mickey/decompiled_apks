record `io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory` @kind class @AccessFlag PUBLIC_FINAL {
}
global `boolean` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @AccessFlag STATIC_FINAL;
global `java.util.Map` `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50d188.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L50d18c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50d192.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L50d196.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L50d19a.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L50d1a0.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` := v0 @kind object;
  #L50d1a4.  v0:= new `io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory$b`;
  #L50d1a8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory$b;.<init>:()V` @kind direct;
  #L50d1ae.  v1:= 1I;
  #L50d1b0.  v2:= "rx3.purge-enabled" @kind object;
  #L50d1b4.  call temp:= `a`(v1, v2, v1, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.a:(ZLjava/lang/String;ZZLio/reactivex/rxjava3/functions/Function;)Z` @kind static;
  #L50d1ba.  v2:= temp;
  #L50d1bc.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` := v2 @kind boolean;
  #L50d1c0.  v3:= "rx3.purge-period-seconds" @kind object;
  #L50d1c4.  call temp:= `b`(v2, v3, v1, v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.b:(ZLjava/lang/String;IILio/reactivex/rxjava3/functions/Function;)I` @kind static;
  #L50d1ca.  v0:= temp;
  #L50d1cc.  `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @type ^`int` := v0;
  #L50d1d0.  call `start`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.start:()V` @kind static;
  #L50d1d6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L50d1e8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50d1ee.  v0:= new `java.lang.IllegalStateException`;
  #L50d1f2.  v1:= "No instances!" @kind object;
  #L50d1f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50d1fc.  throw v0;
}
procedure `boolean` `a`(`boolean` v0 , `java.lang.String` v1 @kind object, `boolean` v2 , `boolean` v3 , `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.a:(ZLjava/lang/String;ZZLio/reactivex/rxjava3/functions/Function;)Z` @AccessFlag STATIC {
    temp;

  #L50d0cc.  if v0 == 0 then goto L50d0fa;
  #L50d0d0.  call temp:= `apply`(v4, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50d0d6.  v0:= temp @kind object;
  #L50d0d8.  v0:= (`java.lang.String`) v0 @kind object;
  #L50d0dc.  if v0 != 0 then goto L50d0e2;
  #L50d0e0.  return v2;
  #L50d0e2.  v1:= "true" @kind object;
  #L50d0e6.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50d0ec.  v0:= temp;
  #L50d0ee.  return v0;
  #L50d0f0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50d0f2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50d0f8.  return v2;
  #L50d0fa.  return v3;
  catch `java.lang.Throwable` @[L50d0d0..L50d0ee] goto L50d0f0;
}
procedure `int` `b`(`boolean` v0 , `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.b:(ZLjava/lang/String;IILio/reactivex/rxjava3/functions/Function;)I` @AccessFlag STATIC {
    temp;

  #L50d118.  if v0 == 0 then goto L50d142;
  #L50d11c.  call temp:= `apply`(v4, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50d122.  v0:= temp @kind object;
  #L50d124.  v0:= (`java.lang.String`) v0 @kind object;
  #L50d128.  if v0 != 0 then goto L50d12e;
  #L50d12c.  return v2;
  #L50d12e.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L50d134.  v0:= temp;
  #L50d136.  return v0;
  #L50d138.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50d13a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50d140.  return v2;
  #L50d142.  return v3;
  catch `java.lang.Throwable` @[L50d11c..L50d136] goto L50d138;
}
procedure `void` `c`(`boolean` v1 , `java.util.concurrent.ScheduledExecutorService` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L50d264.  if v1 == 0 then goto L50d280;
  #L50d268.  v1:= instanceof @variable v2 @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind boolean;
  #L50d26c.  if v1 == 0 then goto L50d280;
  #L50d270.  v1:= v2 @kind object;
  #L50d272.  v1:= (`java.util.concurrent.ScheduledThreadPoolExecutor`) v1 @kind object;
  #L50d276.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L50d27a.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50d280.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `create`(`java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50d160.  v0:= 1I;
  #L50d162.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L50d168.  v1:= temp @kind object;
  #L50d16a.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` @kind boolean;
  #L50d16e.  call `c`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @kind static;
  #L50d174.  return v1 @kind object;
}
procedure `void` `d`(`boolean` v10 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.d:(Z)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L50d294.  if v10 == 0 then goto L50d2fc;
  #L50d298.  v10:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50d29c.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50d2a2.  v10:= temp @kind object;
  #L50d2a4.  v10:= (`java.util.concurrent.ScheduledExecutorService`) v10 @kind object;
  #L50d2a8.  if v10 == 0 then goto L50d2ae;
  #L50d2ac.  return @kind void;
  #L50d2ae.  v0:= 1I;
  #L50d2b0.  v1:= new `io.reactivex.rxjava3.internal.schedulers.RxThreadFactory`;
  #L50d2b4.  v2:= "RxSchedulerPurge" @kind object;
  #L50d2b8.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50d2be.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L50d2c4.  v3:= temp @kind object;
  #L50d2c6.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50d2ca.  call temp:= `compareAndSet`(v0, v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50d2d0.  v10:= temp;
  #L50d2d2.  if v10 == 0 then goto L50d2f4;
  #L50d2d6.  v4:= new `io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory$a`;
  #L50d2da.  call `<init>`(v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory$a;.<init>:()V` @kind direct;
  #L50d2e0.  v10:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @type ^`int`;
  #L50d2e4.  v5:= (`long`) v10 @kind i2l;
  #L50d2e6.  v7:= (`long`) v10 @kind i2l;
  #L50d2e8.  v9:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L50d2ec.  call temp:= `scheduleAtFixedRate`(v3, v4, v5, v7, v9) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L50d2f2.  return @kind void;
  #L50d2f4.  call temp:= `shutdownNow`(v3) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L50d2fa.  goto L50d298;
  #L50d2fc.  return @kind void;
}
procedure `void` `shutdown`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.shutdown:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50d210.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50d214.  v1:= 0I;
  #L50d216.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50d21c.  v0:= temp @kind object;
  #L50d21e.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L50d222.  if v0 == 0 then goto L50d22c;
  #L50d226.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L50d22c.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L50d230.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L50d236.  return @kind void;
}
procedure `void` `start`() @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.start:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50d248.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` @kind boolean;
  #L50d24c.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerPoolFactory;.d:(Z)V` @kind static;
  #L50d252.  return @kind void;
}
