record `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50b5b4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50b5ba.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L50b5be.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L50b5c4.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L50b5c8.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L50b5cc.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L50b5d2.  v0.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L50b5d6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b5e8.  v0:= 0I;
  #L50b5ea.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50b5f0.  v0:= temp @kind object;
  #L50b5f2.  if v0 == 0 then goto L50b60a;
  #L50b5f6.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L50b5fa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L50b600.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L50b604.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L50b60a.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b58c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50b592.  v0:= temp @kind object;
  #L50b594.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L50b598.  if v0 == 0 then goto L50b59e;
  #L50b59c.  goto L50b5a2;
  #L50b59e.  v0:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L50b5a2.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b568.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50b56e.  v0:= temp @kind object;
  #L50b570.  if v0 != 0 then goto L50b578;
  #L50b574.  v0:= 1I;
  #L50b576.  goto L50b57a;
  #L50b578.  v0:= 0I;
  #L50b57a.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/ExecutorScheduler$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50b61c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50b622.  v0:= temp @kind object;
  #L50b624.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L50b628.  if v0 == 0 then goto L50b68a;
  #L50b62c.  v1:= 0I;
  #L50b62e.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L50b634.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50b63a.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L50b63e.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L50b642.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50b648.  v0:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L50b64c.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L50b650.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50b656.  goto L50b68a;
  #L50b658.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50b65a.  goto L50b682;
  #L50b65c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50b65e.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50b664.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L50b668.  v2:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L50b66c.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50b672.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L50b676.  v2:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L50b67a.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50b680.  throw v0;
  #L50b682.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50b688.  throw v0;
  #L50b68a.  return @kind void;
  catch `java.lang.Throwable` @[L50b62e..L50b634] goto L50b65c;
  catch `java.lang.Throwable` @[L50b634..L50b682] goto L50b658;
}
