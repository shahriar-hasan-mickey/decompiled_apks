record `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v0 @kind this, `boolean` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L51046c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L510472.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` := v1 @kind boolean;
  #L510476.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L51047a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L510480.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L510484.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L510488.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L51048e.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L510492.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L510496.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L51049c.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L5104a0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L5104dc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L5104e2.  v0:= temp;
  #L5104e4.  if v0 == 0 then goto L5104ea;
  #L5104e8.  return @kind void;
  #L5104ea.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L5104f0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5104b4.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L5104b8.  if v0 != 0 then goto L5104c8;
  #L5104bc.  v0:= 1I;
  #L5104be.  v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` := v0 @kind boolean;
  #L5104c2.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L5104c8.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v19 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L510504.  v0:= v19 @kind object;
  #L510508.  v1:= 0I;
  #L51050a.  v2:= 0L;
  #L51050e.  v4:= 1I;
  #L510510.  v7:= v1 @kind object;
  #L510512.  v5:= v2 @kind wide;
  #L510514.  v8:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L510518.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51051e.  v8:= temp @kind object;
  #L510520.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L510524.  if v8 == 0 then goto L510538;
  #L510528.  v8:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L51052c.  call temp:= `getAndSet`(v8, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L510532.  v8:= temp @kind object;
  #L510534.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L510538.  v9:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L51053c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L510542.  v9:= temp @kind wide;
  #L510544.  v11:= lcmp(v9, v2);
  #L510548.  if v11 == 0 then goto L510558;
  #L51054c.  v9:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L510550.  call temp:= `getAndSet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L510556.  v9:= temp @kind wide;
  #L510558.  v11:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L51055c.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L510562.  v11:= temp @kind wide;
  #L510564.  v13:= lcmp(v11, v2);
  #L510568.  if v13 == 0 then goto L510578;
  #L51056c.  v11:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L510570.  call temp:= `getAndSet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L510576.  v11:= temp @kind wide;
  #L510578.  v13:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L51057c.  v14:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L510580.  if v14 == 0 then goto L51059e;
  #L510584.  if v13 == 0 then goto L510592;
  #L510588.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51058e.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L510592.  if v8 == 0 then goto L51061e;
  #L510596.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51059c.  goto L51061e;
  #L51059e.  v14:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L5105a2.  v16:= 9223372036854775807L;
  #L5105ac.  v18:= lcmp(v14, v16);
  #L5105b0.  if v18 == 0 then goto L5105da;
  #L5105b4.  call temp:= `addCap`(v14, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L5105ba.  v14:= temp @kind wide;
  #L5105bc.  v18:= lcmp(v14, v16);
  #L5105c0.  if v18 == 0 then goto L5105d6;
  #L5105c4.  v14:= v14 - v11 @kind long;
  #L5105c6.  v11:= lcmp(v14, v2);
  #L5105ca.  if v11 >= 0 then goto L5105d6;
  #L5105ce.  call `reportMoreProduced`(v14) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L5105d4.  v14:= v2 @kind wide;
  #L5105d6.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v14 @kind wide;
  #L5105da.  if v8 == 0 then goto L510608;
  #L5105de.  if v13 == 0 then goto L5105f0;
  #L5105e2.  v9:= v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L5105e6.  if v9 == 0 then goto L5105f0;
  #L5105ea.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L5105f0.  v0.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v8 @kind object;
  #L5105f4.  v9:= lcmp(v14, v2);
  #L5105f8.  if v9 == 0 then goto L51061e;
  #L5105fc.  call temp:= `addCap`(v5, v14) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L510602.  v5:= temp @kind wide;
  #L510604.  v7:= v8 @kind object;
  #L510606.  goto L51061e;
  #L510608.  if v13 == 0 then goto L51061e;
  #L51060c.  v8:= lcmp(v9, v2);
  #L510610.  if v8 == 0 then goto L51061e;
  #L510614.  call temp:= `addCap`(v5, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L51061a.  v5:= temp @kind wide;
  #L51061c.  v7:= v13 @kind object;
  #L51061e.  v4:= -v4 @kind int;
  #L510620.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L510626.  v4:= temp;
  #L510628.  if v4 != 0 then goto L510514;
  #L51062c.  v1:= lcmp(v5, v2);
  #L510630.  if v1 == 0 then goto L51063a;
  #L510634.  call `request`(v7, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51063a.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L51043c.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L510440.  return v0;
}
procedure `boolean` `isUnbounded`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L510454.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L510458.  return v0;
}
procedure `void` `produced`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51064c.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L510650.  if v0 == 0 then goto L510656;
  #L510654.  return @kind void;
  #L510656.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L51065c.  v0:= temp;
  #L51065e.  if v0 != 0 then goto L5106b8;
  #L510662.  v0:= 0I;
  #L510664.  v1:= 1I;
  #L510666.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L51066c.  v0:= temp;
  #L51066e.  if v0 == 0 then goto L5106b8;
  #L510672.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L510676.  v2:= 9223372036854775807L;
  #L510680.  v4:= lcmp(v0, v2);
  #L510684.  if v4 == 0 then goto L5106a2;
  #L510688.  v0:= v0 - v6 @kind long;
  #L51068a.  v6:= 0L;
  #L51068e.  v2:= lcmp(v0, v6);
  #L510692.  if v2 >= 0 then goto L51069e;
  #L510696.  call `reportMoreProduced`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L51069c.  v0:= v6 @kind wide;
  #L51069e.  v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v0 @kind wide;
  #L5106a2.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L5106a8.  v6:= temp;
  #L5106aa.  if v6 != 0 then goto L5106b0;
  #L5106ae.  return @kind void;
  #L5106b0.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L5106b6.  return @kind void;
  #L5106b8.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L5106bc.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L5106c2.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L5106c8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5106dc.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L5106e2.  v0:= temp;
  #L5106e4.  if v0 == 0 then goto L51076e;
  #L5106e8.  v0:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L5106ec.  if v0 == 0 then goto L5106f2;
  #L5106f0.  return @kind void;
  #L5106f2.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5106f8.  v0:= temp;
  #L5106fa.  if v0 != 0 then goto L51075e;
  #L5106fe.  v0:= 0I;
  #L510700.  v1:= 1I;
  #L510702.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L510708.  v0:= temp;
  #L51070a.  if v0 == 0 then goto L51075e;
  #L51070e.  v2:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L510712.  v4:= 9223372036854775807L;
  #L51071c.  v0:= lcmp(v2, v4);
  #L510720.  if v0 == 0 then goto L51073c;
  #L510724.  call temp:= `addCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L51072a.  v2:= temp @kind wide;
  #L51072c.  v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v2 @kind wide;
  #L510730.  v0:= lcmp(v2, v4);
  #L510734.  if v0 != 0 then goto L51073c;
  #L510738.  v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` := v1 @kind boolean;
  #L51073c.  v0:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L510740.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L510746.  v1:= temp;
  #L510748.  if v1 == 0 then goto L510752;
  #L51074c.  call `d`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L510752.  if v0 == 0 then goto L51075c;
  #L510756.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L51075c.  return @kind void;
  #L51075e.  v0:= v6.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L510762.  call temp:= `add`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L510768.  call `c`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L51076e.  return @kind void;
}
procedure `void` `setSubscription`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L510780.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L510784.  if v0 == 0 then goto L510790;
  #L510788.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51078e.  return @kind void;
  #L510790.  v0:= "s is null" @kind object;
  #L510794.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51079a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5107a0.  v0:= temp;
  #L5107a2.  if v0 != 0 then goto L5107fa;
  #L5107a6.  v0:= 0I;
  #L5107a8.  v1:= 1I;
  #L5107aa.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L5107b0.  v0:= temp;
  #L5107b2.  if v0 == 0 then goto L5107fa;
  #L5107b6.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5107ba.  if v0 == 0 then goto L5107cc;
  #L5107be.  v1:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L5107c2.  if v1 == 0 then goto L5107cc;
  #L5107c6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L5107cc.  v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L5107d0.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L5107d4.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L5107da.  v2:= temp;
  #L5107dc.  if v2 == 0 then goto L5107e6;
  #L5107e0.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L5107e6.  v2:= 0L;
  #L5107ea.  v4:= lcmp(v0, v2);
  #L5107ee.  if v4 == 0 then goto L5107f8;
  #L5107f2.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L5107f8.  return @kind void;
  #L5107fa.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5107fe.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L510804.  v6:= temp @kind object;
  #L510806.  v6:= (`org.reactivestreams.Subscription`) v6 @kind object;
  #L51080a.  if v6 == 0 then goto L51081c;
  #L51080e.  v0:= v5.`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L510812.  if v0 == 0 then goto L51081c;
  #L510816.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51081c.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L510822.  return @kind void;
}
