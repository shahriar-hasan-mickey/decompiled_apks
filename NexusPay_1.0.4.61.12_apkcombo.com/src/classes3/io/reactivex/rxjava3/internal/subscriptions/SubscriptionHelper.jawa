record `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `org.reactivestreams.Subscription` @kind interface {
}
global `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L510aac.  v0:= new `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`;
  #L510ab0.  v1:= "CANCELLED" @kind object;
  #L510ab4.  v2:= 0I;
  #L510ab6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L510abc.  `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` := v0 @kind object;
  #L510ac0.  v1:= 1I;
  #L510ac2.  v1:= new `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[v1];
  #L510ac6.  v1[v2]:= v0 @kind object;
  #L510aca.  `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] := v1 @kind object;
  #L510ace.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L510ae0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L510ae6.  return @kind void;
}
procedure `boolean` `cancel`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L510834.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51083a.  v0:= temp @kind object;
  #L51083c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L510840.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L510844.  if v0 == v1 then goto L51086a;
  #L510848.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L51084e.  v2:= temp @kind object;
  #L510850.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L510854.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L510858.  if v2 == v0 then goto L51086a;
  #L51085c.  if v2 == 0 then goto L510866;
  #L510860.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L510866.  v2:= 1I;
  #L510868.  return v2;
  #L51086a.  v2:= 0I;
  #L51086c.  return v2;
}
procedure `void` `deferredRequest`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L510b0c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L510b12.  v0:= temp @kind object;
  #L510b14.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L510b18.  if v0 == 0 then goto L510b24;
  #L510b1c.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L510b22.  goto L510b60;
  #L510b24.  call temp:= `validate`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L510b2a.  v0:= temp;
  #L510b2c.  if v0 == 0 then goto L510b60;
  #L510b30.  call temp:= `add`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L510b36.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L510b3c.  v2:= temp @kind object;
  #L510b3e.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L510b42.  if v2 == 0 then goto L510b60;
  #L510b46.  v4:= 0L;
  #L510b4a.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L510b50.  v0:= temp @kind wide;
  #L510b52.  v3:= lcmp(v0, v4);
  #L510b56.  if v3 == 0 then goto L510b60;
  #L510b5a.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L510b60.  return @kind void;
}
procedure `boolean` `deferredSetOnce`(`java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L510880.  call temp:= `setOnce`(v3, v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L510886.  v3:= temp;
  #L510888.  if v3 == 0 then goto L5108aa;
  #L51088c.  v0:= 0L;
  #L510890.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L510896.  v3:= temp @kind wide;
  #L510898.  v2:= lcmp(v3, v0);
  #L51089c.  if v2 == 0 then goto L5108a6;
  #L5108a0.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L5108a6.  v3:= 1I;
  #L5108a8.  return v3;
  #L5108aa.  v3:= 0I;
  #L5108ac.  return v3;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L5108c0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5108c6.  v0:= temp @kind object;
  #L5108c8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L5108cc.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L5108d0.  if v0 != v1 then goto L5108e2;
  #L5108d4.  if v3 == 0 then goto L5108de;
  #L5108d8.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L5108de.  v2:= 0I;
  #L5108e0.  return v2;
  #L5108e2.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5108e8.  v0:= temp;
  #L5108ea.  if v0 == 0 then goto L5108c0;
  #L5108ee.  v2:= 1I;
  #L5108f0.  return v2;
}
procedure `void` `reportMoreProduced`(`long` v3 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L510b74.  v0:= new `io.reactivex.rxjava3.exceptions.ProtocolViolationException`;
  #L510b78.  v1:= new `java.lang.StringBuilder`;
  #L510b7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L510b82.  v2:= "More produced than requested: " @kind object;
  #L510b86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L510b8c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L510b92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L510b98.  v3:= temp @kind object;
  #L510b9a.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510ba0.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L510ba6.  return @kind void;
}
procedure `void` `reportSubscriptionSet`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L510bb8.  v0:= new `io.reactivex.rxjava3.exceptions.ProtocolViolationException`;
  #L510bbc.  v1:= "Subscription already set!" @kind object;
  #L510bc0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510bc6.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L510bcc.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L510904.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L51090a.  v0:= temp @kind object;
  #L51090c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L510910.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L510914.  if v0 != v1 then goto L510926;
  #L510918.  if v3 == 0 then goto L510922;
  #L51091c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L510922.  v2:= 0I;
  #L510924.  return v2;
  #L510926.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L51092c.  v1:= temp;
  #L51092e.  if v1 == 0 then goto L510904;
  #L510932.  if v0 == 0 then goto L51093c;
  #L510936.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51093c.  v2:= 1I;
  #L51093e.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L510950.  v0:= "s is null" @kind object;
  #L510954.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L51095a.  v0:= 0I;
  #L51095c.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L510962.  v0:= temp;
  #L510964.  if v0 != 0 then goto L510988;
  #L510968.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L51096e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L510974.  v1:= temp @kind object;
  #L510976.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L51097a.  if v1 == v2 then goto L510984;
  #L51097e.  call `reportSubscriptionSet`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L510984.  v1:= 0I;
  #L510986.  return v1;
  #L510988.  v1:= 1I;
  #L51098a.  return v1;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v0 @kind object, `org.reactivestreams.Subscription` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L51099c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L5109a2.  v0:= temp;
  #L5109a4.  if v0 == 0 then goto L5109b2;
  #L5109a8.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L5109ae.  v0:= 1I;
  #L5109b0.  return v0;
  #L5109b2.  v0:= 0I;
  #L5109b4.  return v0;
}
procedure `boolean` `validate`(`long` v3 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L5109c8.  v0:= 0L;
  #L5109cc.  v2:= lcmp(v3, v0);
  #L5109d0.  if v2 > 0 then goto L510a0a;
  #L5109d4.  v0:= new `java.lang.IllegalArgumentException`;
  #L5109d8.  v1:= new `java.lang.StringBuilder`;
  #L5109dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5109e2.  v2:= "n > 0 required but it was " @kind object;
  #L5109e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5109ec.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L5109f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5109f8.  v3:= temp @kind object;
  #L5109fa.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510a00.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L510a06.  v3:= 0I;
  #L510a08.  return v3;
  #L510a0a.  v3:= 1I;
  #L510a0c.  return v3;
}
procedure `boolean` `validate`(`org.reactivestreams.Subscription` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L510a20.  v0:= 0I;
  #L510a22.  if v2 != 0 then goto L510a3c;
  #L510a26.  v1:= new `java.lang.NullPointerException`;
  #L510a2a.  v2:= "next is null" @kind object;
  #L510a2e.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510a34.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L510a3a.  return v0;
  #L510a3c.  if v1 == 0 then goto L510a4e;
  #L510a40.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L510a46.  call `reportSubscriptionSet`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L510a4c.  return v0;
  #L510a4e.  v1:= 1I;
  #L510a50.  return v1;
}
procedure `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L510a64.  v0:= constclass @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L510a68.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L510a6e.  v1:= temp @kind object;
  #L510a70.  v1:= (`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`) v1 @kind object;
  #L510a74.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] `values`() @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.values:()[Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L510a88.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[] @kind object;
  #L510a8c.  call temp:= `clone`(v0) @signature `[Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L510a92.  v0:= temp @kind object;
  #L510a94.  v0:= (`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper`[]) v0 @kind object;
  #L510a98.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L510af8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L510be0.  return @kind void;
}
