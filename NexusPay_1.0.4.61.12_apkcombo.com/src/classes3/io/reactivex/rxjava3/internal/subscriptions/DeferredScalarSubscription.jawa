record `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50ff74.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L50ff7a.  v0.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L50ff7e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ff90.  v0:= 4I;
  #L50ff92.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L50ff98.  v0:= 0I;
  #L50ff9a.  v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L50ff9e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50ffb0.  v0:= 32I;
  #L50ffb4.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L50ffba.  v0:= 0I;
  #L50ffbc.  v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L50ffc0.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L50ffd4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50ffda.  v0:= temp;
  #L50ffdc.  v1:= 8I;
  #L50ffe0.  v2:= 4I;
  #L50ffe2.  if v0 != v1 then goto L510012;
  #L50ffe6.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L50ffea.  v0:= 16I;
  #L50ffee.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L50fff4.  v0:= v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50fff8.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L50fffe.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L510004.  v4:= temp;
  #L510006.  if v4 == v2 then goto L510010;
  #L51000a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L510010.  return @kind void;
  #L510012.  v1:= v0 ^& -3;
  #L510016.  if v1 == 0 then goto L51001c;
  #L51001a.  return @kind void;
  #L51001c.  v1:= 2I;
  #L51001e.  if v0 != v1 then goto L510048;
  #L510022.  v0:= 3I;
  #L510024.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L51002a.  v0:= v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51002e.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L510034.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L51003a.  v4:= temp;
  #L51003c.  if v4 == v2 then goto L510046;
  #L510040.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L510046.  return @kind void;
  #L510048.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L51004c.  v0:= 0I;
  #L51004e.  v1:= 1I;
  #L510050.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L510056.  v0:= temp;
  #L510058.  if v0 == 0 then goto L51005e;
  #L51005c.  return @kind void;
  #L51005e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L510064.  v0:= temp;
  #L510066.  if v0 != v2 then goto L50ffdc;
  #L51006a.  v4:= 0I;
  #L51006c.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L510070.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50fe9c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50fea2.  v0:= temp;
  #L50fea4.  v1:= 4I;
  #L50fea6.  if v0 != v1 then goto L50feae;
  #L50feaa.  v0:= 1I;
  #L50feac.  goto L50feb0;
  #L50feae.  v0:= 0I;
  #L50feb0.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50fec4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50feca.  v0:= temp;
  #L50fecc.  v1:= 16I;
  #L50fed0.  if v0 == v1 then goto L50fed8;
  #L50fed4.  v0:= 1I;
  #L50fed6.  goto L50feda;
  #L50fed8.  v0:= 0I;
  #L50feda.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L50ff3c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50ff42.  v0:= temp;
  #L50ff44.  v1:= 0I;
  #L50ff46.  v2:= 16I;
  #L50ff4a.  if v0 != v2 then goto L50ff62;
  #L50ff4e.  v0:= 32I;
  #L50ff52.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L50ff58.  v0:= v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L50ff5c.  v3.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L50ff60.  return v0 @kind object;
  #L50ff62.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L510084.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L51008a.  v2:= temp;
  #L51008c.  if v2 == 0 then goto L5100f4;
  #L510090.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L510096.  v2:= temp;
  #L510098.  v3:= v2 ^& -2;
  #L51009c.  if v3 == 0 then goto L5100a2;
  #L5100a0.  return @kind void;
  #L5100a2.  v3:= 1I;
  #L5100a4.  if v2 != v3 then goto L5100e4;
  #L5100a8.  v2:= 3I;
  #L5100aa.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L5100b0.  v2:= temp;
  #L5100b2.  if v2 == 0 then goto L5100e2;
  #L5100b6.  v2:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L5100ba.  if v2 == 0 then goto L5100e2;
  #L5100be.  v3:= 0I;
  #L5100c0.  v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L5100c4.  v3:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5100c8.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5100ce.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5100d4.  v2:= temp;
  #L5100d6.  v0:= 4I;
  #L5100d8.  if v2 == v0 then goto L5100e2;
  #L5100dc.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L5100e2.  return @kind void;
  #L5100e4.  v2:= 0I;
  #L5100e6.  v3:= 2I;
  #L5100e8.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L5100ee.  v2:= temp;
  #L5100f0.  if v2 == 0 then goto L510090;
  #L5100f4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50ff14.  v0:= 2I;
  #L50ff16.  v2:= v2 ^& v0 @kind int;
  #L50ff18.  if v2 == 0 then goto L50ff28;
  #L50ff1c.  v2:= 8I;
  #L50ff20.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L50ff26.  return v0;
  #L50ff28.  v2:= 0I;
  #L50ff2a.  return v2;
}
procedure `boolean` `tryCancel`(`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50feec.  v0:= 4I;
  #L50feee.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L50fef4.  v1:= temp;
  #L50fef6.  if v1 == v0 then goto L50fefe;
  #L50fefa.  v0:= 1I;
  #L50fefc.  goto L50ff00;
  #L50fefe.  v0:= 0I;
  #L50ff00.  return v0;
}
