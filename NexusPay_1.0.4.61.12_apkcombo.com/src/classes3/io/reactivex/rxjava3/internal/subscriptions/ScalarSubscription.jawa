record `io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L510390.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L510396.  v0.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L51039a.  v0.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` := v2 @kind object;
  #L51039e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5103b0.  v0:= 2I;
  #L5103b2.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L5103b8.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5103cc.  v0:= 1I;
  #L5103ce.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L5103d4.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5102bc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5102c2.  v0:= temp;
  #L5102c4.  v1:= 2I;
  #L5102c6.  if v0 != v1 then goto L5102ce;
  #L5102ca.  v0:= 1I;
  #L5102cc.  goto L5102d0;
  #L5102ce.  v0:= 0I;
  #L5102d0.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5102e4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5102ea.  v0:= temp;
  #L5102ec.  if v0 == 0 then goto L5102f4;
  #L5102f0.  v0:= 1I;
  #L5102f2.  goto L5102f6;
  #L5102f4.  v0:= 0I;
  #L5102f6.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L510308.  v2:= new `java.lang.UnsupportedOperationException`;
  #L51030c.  v0:= "Should not be called!" @kind object;
  #L510310.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510316.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L510328.  v1:= new `java.lang.UnsupportedOperationException`;
  #L51032c.  v2:= "Should not be called!" @kind object;
  #L510330.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510336.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L510360.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L510366.  v0:= temp;
  #L510368.  if v0 != 0 then goto L51037a;
  #L51036c.  v0:= 1I;
  #L51036e.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L510374.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L510378.  return v0 @kind object;
  #L51037a.  v0:= 0I;
  #L51037c.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5103e8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L5103ee.  v2:= temp;
  #L5103f0.  if v2 != 0 then goto L5103f6;
  #L5103f4.  return @kind void;
  #L5103f6.  v2:= 0I;
  #L5103f8.  v3:= 1I;
  #L5103fa.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L510400.  v2:= temp;
  #L510402.  if v2 == 0 then goto L510428;
  #L510406.  v2:= v1.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L51040a.  v3:= v1.`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L51040e.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L510414.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L51041a.  v3:= temp;
  #L51041c.  v0:= 2I;
  #L51041e.  if v3 == v0 then goto L510428;
  #L510422.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L510428.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.subscriptions.ScalarSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscriptions/ScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L510348.  v1:= v1 ^& 1;
  #L51034c.  return v1;
}
