record `io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.jdk8.b` @kind class {
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver` v0 @kind this, `boolean` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableSingleStageObserver;.<init>:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b048c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/b;.<init>:()V` @kind direct;
  #L4b0492.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver.c` @type ^`boolean` := v1 @kind boolean;
  #L4b0496.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver.d` @type ^`java.lang.Object` := v2 @kind object;
  #L4b049a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableSingleStageObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b04ac.  call temp:= `isDone`(v1) @signature `Ljava/util/concurrent/CompletableFuture;.isDone:()Z` @kind virtual;
  #L4b04b2.  v0:= temp;
  #L4b04b4.  if v0 != 0 then goto L4b04f2;
  #L4b04b8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.b.b` @type ^`java.lang.Object` @kind object;
  #L4b04bc.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/b;.clear:()V` @kind virtual;
  #L4b04c2.  if v0 == 0 then goto L4b04ce;
  #L4b04c6.  call temp:= `complete`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/b;.complete:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b04cc.  goto L4b04f2;
  #L4b04ce.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver.c` @type ^`boolean` @kind boolean;
  #L4b04d2.  if v0 == 0 then goto L4b04e2;
  #L4b04d6.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver.d` @type ^`java.lang.Object` @kind object;
  #L4b04da.  call temp:= `complete`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/b;.complete:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b04e0.  goto L4b04f2;
  #L4b04e2.  v0:= new `java.util.NoSuchElementException`;
  #L4b04e6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4b04ec.  call temp:= `completeExceptionally`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/b;.completeExceptionally:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b04f2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.ObservableSingleStageObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableSingleStageObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0504.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.b.b` @type ^`java.lang.Object` @kind object;
  #L4b0508.  if v0 == 0 then goto L4b0528;
  #L4b050c.  v2:= 0I;
  #L4b050e.  v1.`io.reactivex.rxjava3.internal.jdk8.b.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4b0512.  v2:= new `java.lang.IllegalArgumentException`;
  #L4b0516.  v0:= "Sequence contains more than one element!" @kind object;
  #L4b051a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b0520.  call temp:= `completeExceptionally`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/b;.completeExceptionally:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b0526.  goto L4b052c;
  #L4b0528.  v1.`io.reactivex.rxjava3.internal.jdk8.b.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4b052c.  return @kind void;
}
