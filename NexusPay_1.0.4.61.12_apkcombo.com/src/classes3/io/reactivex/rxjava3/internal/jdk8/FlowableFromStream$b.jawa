record `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.util.Iterator` v2 @kind object, `java.lang.AutoCloseable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;Ljava/lang/AutoCloseable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ae3a0.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.<init>:(Ljava/util/Iterator;Ljava/lang/AutoCloseable;)V` @kind direct;
  #L4ae3a6.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4ae3aa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$b;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4ae3bc.  v0:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @type ^`java.util.Iterator` @kind object;
  #L4ae3c0.  v1:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4ae3c4.  v2:= 0L;
  #L4ae3c8.  v4:= v2 @kind wide;
  #L4ae3ca.  v6:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` @kind boolean;
  #L4ae3ce.  if v6 == 0 then goto L4ae3da;
  #L4ae3d2.  call `clear`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.clear:()V` @kind virtual;
  #L4ae3d8.  goto L4ae44a;
  #L4ae3da.  v6:= 1I;
  #L4ae3dc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ae3e2.  v7:= temp @kind object;
  #L4ae3e4.  v8:= "The Stream's Iterator returned a null value" @kind object;
  #L4ae3e8.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ae3ee.  v7:= temp @kind object;
  #L4ae3f0.  call temp:= `tryOnNext`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4ae3f6.  v7:= temp;
  #L4ae3f8.  if v7 == 0 then goto L4ae402;
  #L4ae3fc.  v7:= 1L;
  #L4ae400.  v4:= v4 + v7 @kind long;
  #L4ae402.  v7:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` @kind boolean;
  #L4ae406.  if v7 == 0 then goto L4ae40c;
  #L4ae40a.  goto L4ae3ca;
  #L4ae40c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae412.  v7:= temp;
  #L4ae414.  if v7 != 0 then goto L4ae424;
  #L4ae418.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ae41e.  v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` := v6 @kind boolean;
  #L4ae422.  goto L4ae3ca;
  #L4ae424.  v6:= lcmp(v4, v10);
  #L4ae428.  if v6 == 0 then goto L4ae42e;
  #L4ae42c.  goto L4ae3ca;
  #L4ae42e.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ae434.  v10:= temp @kind wide;
  #L4ae436.  v6:= lcmp(v4, v10);
  #L4ae43a.  if v6 != 0 then goto L4ae3ca;
  #L4ae43e.  call temp:= `compareAndSet`(v9, v10, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4ae444.  v10:= temp;
  #L4ae446.  if v10 == 0 then goto L4ae44c;
  #L4ae44a.  return @kind void;
  #L4ae44c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ae452.  v10:= temp @kind wide;
  #L4ae454.  goto L4ae3ca;
  #L4ae456.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae458.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ae45e.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ae464.  v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` := v6 @kind boolean;
  #L4ae468.  goto L4ae3ca;
  #L4ae46a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae46c.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ae472.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ae478.  v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` := v6 @kind boolean;
  #L4ae47c.  goto L4ae3ca;
  catch `java.lang.Throwable` @[L4ae3dc..L4ae3f0] goto L4ae46a;
  catch `java.lang.Throwable` @[L4ae40c..L4ae422] goto L4ae456;
}
