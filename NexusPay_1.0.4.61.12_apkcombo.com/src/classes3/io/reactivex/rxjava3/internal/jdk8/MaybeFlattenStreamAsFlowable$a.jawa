record `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @AccessFlag VOLATILE;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aed14.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4aed1a.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4aed1e.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4aed22.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4aed26.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4aed2c.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4aed30.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aed44.  v0:= 1I;
  #L4aed46.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4aed4a.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4aed4e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4aed54.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @type ^`boolean` @kind boolean;
  #L4aed58.  if v0 != 0 then goto L4aed62;
  #L4aed5c.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @kind virtual;
  #L4aed62.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aed74.  v0:= 0I;
  #L4aed76.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L4aed7a.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @type ^`java.lang.AutoCloseable` @kind object;
  #L4aed7e.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L4aed82.  call `e`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.e:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L4aed88.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4aedd4.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4aedda.  v0:= temp;
  #L4aeddc.  if v0 == 0 then goto L4aede2;
  #L4aede0.  return @kind void;
  #L4aede2.  v0:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4aede6.  v1:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.j` @type ^`long` @kind wide;
  #L4aedea.  v3:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4aedee.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4aedf4.  v3:= temp @kind wide;
  #L4aedf6.  v5:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4aedfa.  v6:= 1I;
  #L4aedfc.  v7:= 1I;
  #L4aedfe.  v8:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L4aee02.  if v8 == 0 then goto L4aee0e;
  #L4aee06.  call `clear`(v10) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @kind virtual;
  #L4aee0c.  goto L4aeea8;
  #L4aee0e.  v8:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @type ^`boolean` @kind boolean;
  #L4aee12.  if v8 == 0 then goto L4aee2a;
  #L4aee16.  if v5 == 0 then goto L4aeea8;
  #L4aee1a.  v3:= 0I;
  #L4aee1c.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4aee22.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4aee28.  goto L4aeea8;
  #L4aee2a.  if v5 == 0 then goto L4aeea8;
  #L4aee2e.  v8:= lcmp(v1, v3);
  #L4aee32.  if v8 == 0 then goto L4aeea8;
  #L4aee36.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4aee3c.  v8:= temp @kind object;
  #L4aee3e.  v9:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L4aee42.  if v9 == 0 then goto L4aee48;
  #L4aee46.  goto L4aedfe;
  #L4aee48.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4aee4e.  v8:= 1L;
  #L4aee52.  v1:= v1 + v8 @kind long;
  #L4aee54.  v8:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L4aee58.  if v8 == 0 then goto L4aee5e;
  #L4aee5c.  goto L4aedfe;
  #L4aee5e.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aee64.  v8:= temp;
  #L4aee66.  v9:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L4aee6a.  if v9 == 0 then goto L4aee70;
  #L4aee6e.  goto L4aedfe;
  #L4aee70.  if v8 != 0 then goto L4aedfe;
  #L4aee74.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4aee7a.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v6 @kind boolean;
  #L4aee7e.  goto L4aedfe;
  #L4aee80.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aee82.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4aee88.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aee8e.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v6 @kind boolean;
  #L4aee92.  goto L4aedfe;
  #L4aee94.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aee96.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4aee9c.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aeea2.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v6 @kind boolean;
  #L4aeea6.  goto L4aedfe;
  #L4aeea8.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.j` @type ^`long` := v1 @kind wide;
  #L4aeeac.  v3:= -v7 @kind int;
  #L4aeeae.  call temp:= `addAndGet`(v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4aeeb4.  v7:= temp;
  #L4aeeb6.  if v7 != 0 then goto L4aeebc;
  #L4aeeba.  return @kind void;
  #L4aeebc.  v3:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4aeec0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4aeec6.  v3:= temp @kind wide;
  #L4aeec8.  if v5 != 0 then goto L4aedfe;
  #L4aeecc.  v5:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4aeed0.  goto L4aedfe;
  catch `java.lang.Throwable` @[L4aee36..L4aee3e] goto L4aee94;
  catch `java.lang.Throwable` @[L4aee5e..L4aee66] goto L4aee80;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v0 @kind this, `java.lang.AutoCloseable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.e:(Ljava/lang/AutoCloseable;)V` @AccessFlag  {
    temp;

  #L4aed9c.  if v1 == 0 then goto L4aedb6;
  #L4aeda0.  call `close`(v1) @signature `Ljava/lang/AutoCloseable;.close:()V` @kind interface;
  #L4aeda6.  goto L4aedb6;
  #L4aeda8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aedaa.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4aedb0.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4aedb6.  return @kind void;
  catch `java.lang.Throwable` @[L4aeda0..L4aeda6] goto L4aeda8;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4aec6c.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4aec70.  if v0 == 0 then goto L4aec94;
  #L4aec74.  v1:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @type ^`boolean` @kind boolean;
  #L4aec78.  v2:= 0I;
  #L4aec7a.  if v1 != 0 then goto L4aec80;
  #L4aec7e.  return v2;
  #L4aec80.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aec86.  v0:= temp;
  #L4aec88.  if v0 == 0 then goto L4aec8e;
  #L4aec8c.  return v2;
  #L4aec8e.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @kind virtual;
  #L4aec94.  v0:= 1I;
  #L4aec96.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aeefc.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4aef00.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4aef06.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aef18.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4aef1c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aef22.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aef34.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4aef38.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4aef3e.  v0:= temp;
  #L4aef40.  if v0 == 0 then goto L4aef52;
  #L4aef44.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4aef48.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4aef4c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4aef52.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aef64.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4aef68.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4aef6e.  v3:= temp @kind object;
  #L4aef70.  v0:= "The mapper returned a null Stream" @kind object;
  #L4aef74.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4aef7a.  v3:= temp @kind object;
  #L4aef7c.  v3:= (`java.util.stream.Stream`) v3 @kind object;
  #L4aef80.  call temp:= `iterator`(v3) @signature `Ljava/util/stream/Stream;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4aef86.  v0:= temp @kind object;
  #L4aef88.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aef8e.  v1:= temp;
  #L4aef90.  if v1 != 0 then goto L4aefa6;
  #L4aef94.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4aef98.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4aef9e.  call `e`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.e:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L4aefa4.  return @kind void;
  #L4aefa6.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L4aefaa.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @type ^`java.lang.AutoCloseable` := v3 @kind object;
  #L4aefae.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @kind virtual;
  #L4aefb4.  return @kind void;
  #L4aefb6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aefb8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4aefbe.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4aefc2.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aefc8.  return @kind void;
  catch `java.lang.Throwable` @[L4aef64..L4aefae] goto L4aefb6;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4aeccc.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4aecd0.  v1:= 0I;
  #L4aecd2.  if v0 == 0 then goto L4aed02;
  #L4aecd6.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @type ^`boolean` @kind boolean;
  #L4aecda.  if v2 == 0 then goto L4aecf2;
  #L4aecde.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aece4.  v2:= temp;
  #L4aece6.  if v2 != 0 then goto L4aecf8;
  #L4aecea.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @kind virtual;
  #L4aecf0.  return v1 @kind object;
  #L4aecf2.  v1:= 1I;
  #L4aecf4.  v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4aecf8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4aecfe.  v0:= temp @kind object;
  #L4aed00.  return v0 @kind object;
  #L4aed02.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aefe8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4aefee.  v0:= temp;
  #L4aeff0.  if v0 == 0 then goto L4af004;
  #L4aeff4.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4aeff8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4aeffe.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @kind virtual;
  #L4af004.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aeca8.  v0:= 2I;
  #L4aecaa.  v2:= v2 ^& v0 @kind int;
  #L4aecac.  if v2 == 0 then goto L4aecb8;
  #L4aecb0.  v2:= 1I;
  #L4aecb2.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4aecb6.  return v0;
  #L4aecb8.  v2:= 0I;
  #L4aecba.  return v2;
}
