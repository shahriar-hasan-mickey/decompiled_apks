record `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @AccessFlag VOLATILE;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4af124.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4af12a.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4af12e.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4af132.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v0 @kind this, `java.lang.AutoCloseable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.a:(Ljava/lang/AutoCloseable;)V` @AccessFlag  {
    temp;

  #L4af16c.  if v1 == 0 then goto L4af186;
  #L4af170.  call `close`(v1) @signature `Ljava/lang/AutoCloseable;.close:()V` @kind interface;
  #L4af176.  goto L4af186;
  #L4af178.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af17a.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af180.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4af186.  return @kind void;
  catch `java.lang.Throwable` @[L4af170..L4af176] goto L4af178;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af144.  v0:= 0I;
  #L4af146.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L4af14a.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @type ^`java.lang.AutoCloseable` @kind object;
  #L4af14e.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L4af152.  call `a`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.a:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L4af158.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af1a4.  v0:= 1I;
  #L4af1a6.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4af1aa.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4af1ae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4af1b4.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @type ^`boolean` @kind boolean;
  #L4af1b8.  if v0 != 0 then goto L4af1c2;
  #L4af1bc.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.e:()V` @kind virtual;
  #L4af1c2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4af1d4.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4af1da.  v0:= temp;
  #L4af1dc.  if v0 == 0 then goto L4af1e2;
  #L4af1e0.  return @kind void;
  #L4af1e2.  v0:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4af1e6.  v1:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4af1ea.  v2:= 1I;
  #L4af1ec.  v3:= 1I;
  #L4af1ee.  v4:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L4af1f2.  if v4 == 0 then goto L4af1fe;
  #L4af1f6.  call `clear`(v6) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @kind virtual;
  #L4af1fc.  goto L4af214;
  #L4af1fe.  v4:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @type ^`boolean` @kind boolean;
  #L4af202.  if v4 == 0 then goto L4af224;
  #L4af206.  v4:= 0I;
  #L4af208.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4af20e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4af214.  v3:= -v3 @kind int;
  #L4af216.  call temp:= `addAndGet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4af21c.  v3:= temp;
  #L4af21e.  if v3 != 0 then goto L4af1ee;
  #L4af222.  return @kind void;
  #L4af224.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4af22a.  v4:= temp @kind object;
  #L4af22c.  v5:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L4af230.  if v5 == 0 then goto L4af236;
  #L4af234.  goto L4af1ee;
  #L4af236.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4af23c.  v4:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L4af240.  if v4 == 0 then goto L4af246;
  #L4af244.  goto L4af1ee;
  #L4af246.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4af24c.  v4:= temp;
  #L4af24e.  v5:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L4af252.  if v5 == 0 then goto L4af258;
  #L4af256.  goto L4af1ee;
  #L4af258.  if v4 != 0 then goto L4af1ee;
  #L4af25c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4af262.  v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4af266.  goto L4af1ee;
  #L4af268.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af26a.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af270.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af276.  v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4af27a.  goto L4af1ee;
  #L4af27c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af27e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af284.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af28a.  v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4af28e.  goto L4af1ee;
  catch `java.lang.Throwable` @[L4af224..L4af22c] goto L4af27c;
  catch `java.lang.Throwable` @[L4af246..L4af24e] goto L4af268;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af064.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L4af068.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4af07c.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4af080.  if v0 == 0 then goto L4af0a4;
  #L4af084.  v1:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @type ^`boolean` @kind boolean;
  #L4af088.  v2:= 0I;
  #L4af08a.  if v1 != 0 then goto L4af090;
  #L4af08e.  return v2;
  #L4af090.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4af096.  v0:= temp;
  #L4af098.  if v0 == 0 then goto L4af09e;
  #L4af09c.  return v2;
  #L4af09e.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @kind virtual;
  #L4af0a4.  v0:= 1I;
  #L4af0a6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af2b8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4af2bc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4af2c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af2d4.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4af2d8.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af2de.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af2f0.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4af2f4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4af2fa.  v0:= temp;
  #L4af2fc.  if v0 == 0 then goto L4af30e;
  #L4af300.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4af304.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4af308.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4af30e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af320.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4af324.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4af32a.  v3:= temp @kind object;
  #L4af32c.  v0:= "The mapper returned a null Stream" @kind object;
  #L4af330.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4af336.  v3:= temp @kind object;
  #L4af338.  v3:= (`java.util.stream.Stream`) v3 @kind object;
  #L4af33c.  call temp:= `iterator`(v3) @signature `Ljava/util/stream/Stream;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4af342.  v0:= temp @kind object;
  #L4af344.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4af34a.  v1:= temp;
  #L4af34c.  if v1 != 0 then goto L4af362;
  #L4af350.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4af354.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4af35a.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.a:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L4af360.  return @kind void;
  #L4af362.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L4af366.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @type ^`java.lang.AutoCloseable` := v3 @kind object;
  #L4af36a.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.e:()V` @kind virtual;
  #L4af370.  return @kind void;
  #L4af372.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af374.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af37a.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4af37e.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af384.  return @kind void;
  catch `java.lang.Throwable` @[L4af320..L4af36a] goto L4af372;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4af0dc.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4af0e0.  v1:= 0I;
  #L4af0e2.  if v0 == 0 then goto L4af112;
  #L4af0e6.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @type ^`boolean` @kind boolean;
  #L4af0ea.  if v2 == 0 then goto L4af102;
  #L4af0ee.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4af0f4.  v2:= temp;
  #L4af0f6.  if v2 != 0 then goto L4af108;
  #L4af0fa.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @kind virtual;
  #L4af100.  return v1 @kind object;
  #L4af102.  v1:= 1I;
  #L4af104.  v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @type ^`boolean` := v1 @kind boolean;
  #L4af108.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4af10e.  v0:= temp @kind object;
  #L4af110.  return v0 @kind object;
  #L4af112.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af0b8.  v0:= 2I;
  #L4af0ba.  v2:= v2 ^& v0 @kind int;
  #L4af0bc.  if v2 == 0 then goto L4af0c8;
  #L4af0c0.  v2:= 1I;
  #L4af0c2.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4af0c6.  return v0;
  #L4af0c8.  v2:= 0I;
  #L4af0ca.  return v2;
}
