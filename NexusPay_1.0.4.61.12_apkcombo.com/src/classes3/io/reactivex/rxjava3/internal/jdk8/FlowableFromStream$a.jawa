record `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind interface {
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @AccessFlag ;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v0 @kind this, `java.util.Iterator` v1 @kind object, `java.lang.AutoCloseable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.<init>:(Ljava/util/Iterator;Ljava/lang/AutoCloseable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ae2f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ae2fe.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L4ae302.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.b` @type ^`java.lang.AutoCloseable` := v2 @kind object;
  #L4ae306.  return @kind void;
}
procedure `void` `a`(`long` v0 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.a:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae318.  v0:= 1I;
  #L4ae31a.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4ae31e.  v0:= 1L;
  #L4ae322.  call `request`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.request:(J)V` @kind virtual;
  #L4ae328.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae33c.  v0:= 0I;
  #L4ae33e.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L4ae342.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.b` @type ^`java.lang.AutoCloseable` @kind object;
  #L4ae346.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.b` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L4ae34a.  if v1 == 0 then goto L4ae354;
  #L4ae34e.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream;.e:(Ljava/lang/AutoCloseable;)V` @kind static;
  #L4ae354.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae1f4.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @type ^`java.util.Iterator` @kind object;
  #L4ae1f8.  if v0 == 0 then goto L4ae21e;
  #L4ae1fc.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L4ae200.  if v1 == 0 then goto L4ae21a;
  #L4ae204.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae20a.  v0:= temp;
  #L4ae20c.  if v0 == 0 then goto L4ae212;
  #L4ae210.  goto L4ae21a;
  #L4ae212.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.clear:()V` @kind virtual;
  #L4ae218.  goto L4ae21e;
  #L4ae21a.  v0:= 0I;
  #L4ae21c.  return v0;
  #L4ae21e.  v0:= 1I;
  #L4ae220.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4ae234.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4ae238.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4ae23e.  throw v1;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4ae250.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4ae254.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4ae25a.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ae29c.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @type ^`java.util.Iterator` @kind object;
  #L4ae2a0.  v1:= 0I;
  #L4ae2a2.  if v0 != 0 then goto L4ae2a8;
  #L4ae2a6.  return v1 @kind object;
  #L4ae2a8.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L4ae2ac.  if v2 != 0 then goto L4ae2b8;
  #L4ae2b0.  v0:= 1I;
  #L4ae2b2.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4ae2b6.  goto L4ae2cc;
  #L4ae2b8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae2be.  v0:= temp;
  #L4ae2c0.  if v0 != 0 then goto L4ae2cc;
  #L4ae2c4.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.clear:()V` @kind virtual;
  #L4ae2ca.  return v1 @kind object;
  #L4ae2cc.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @type ^`java.util.Iterator` @kind object;
  #L4ae2d0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ae2d6.  v0:= temp @kind object;
  #L4ae2d8.  v1:= "The Stream's Iterator.next() returned a null value" @kind object;
  #L4ae2dc.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ae2e2.  v0:= temp @kind object;
  #L4ae2e4.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ae368.  call temp:= `validate`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ae36e.  v0:= temp;
  #L4ae370.  if v0 == 0 then goto L4ae38e;
  #L4ae374.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ae37a.  v0:= temp @kind wide;
  #L4ae37c.  v2:= 0L;
  #L4ae380.  v4:= lcmp(v0, v2);
  #L4ae384.  if v4 != 0 then goto L4ae38e;
  #L4ae388.  call `a`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.a:(J)V` @kind virtual;
  #L4ae38e.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ae26c.  v0:= 1I;
  #L4ae26e.  v4:= v4 ^& v0 @kind int;
  #L4ae270.  if v4 == 0 then goto L4ae286;
  #L4ae274.  v1:= 9223372036854775807L;
  #L4ae27e.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4ae284.  return v0;
  #L4ae286.  v4:= 0I;
  #L4ae288.  return v4;
}
