record `io.reactivex.rxjava3.internal.jdk8.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.CompletableFuture` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.jdk8.a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.jdk8.a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4aebac.  call `<init>`(v1) @signature `Ljava/util/concurrent/CompletableFuture;.<init>:()V` @kind direct;
  #L4aebb2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4aebb6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4aebbc.  v1.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4aebc0.  return @kind void;
}
procedure `void` `afterSubscribe`(`org.reactivestreams.Subscription` v0 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.afterSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.jdk8.a` v0 @kind this, `boolean` v1 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancel:(Z)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4aeb4c.  call `cancelUpstream`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @kind virtual;
  #L4aeb52.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/CompletableFuture;.cancel:(Z)Z` @kind super;
  #L4aeb58.  v1:= temp;
  #L4aeb5a.  return v1;
}
procedure `void` `cancelUpstream`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4aebd4.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4aebd8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4aebde.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.clear:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L4aebf0.  v0:= 0I;
  #L4aebf2.  v2.`io.reactivex.rxjava3.internal.jdk8.a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4aebf6.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4aebfa.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4aebfe.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4aec04.  return @kind void;
}
procedure `boolean` `complete`(`io.reactivex.rxjava3.internal.jdk8.a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.complete:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4aeb6c.  call `cancelUpstream`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @kind virtual;
  #L4aeb72.  call temp:= `complete`(v0, v1) @signature `Ljava/util/concurrent/CompletableFuture;.complete:(Ljava/lang/Object;)Z` @kind super;
  #L4aeb78.  v1:= temp;
  #L4aeb7a.  return v1;
}
procedure `boolean` `completeExceptionally`(`io.reactivex.rxjava3.internal.jdk8.a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.completeExceptionally:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4aeb8c.  call `cancelUpstream`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @kind virtual;
  #L4aeb92.  call temp:= `completeExceptionally`(v0, v1) @signature `Ljava/util/concurrent/CompletableFuture;.completeExceptionally:(Ljava/lang/Throwable;)Z` @kind super;
  #L4aeb98.  v1:= temp;
  #L4aeb9a.  return v1;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4aec18.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.clear:()V` @kind virtual;
  #L4aec1e.  call temp:= `completeExceptionally`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.completeExceptionally:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4aec24.  v0:= temp;
  #L4aec26.  if v0 != 0 then goto L4aec30;
  #L4aec2a.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4aec30.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4aec44.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4aec48.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4aec4e.  v0:= temp;
  #L4aec50.  if v0 == 0 then goto L4aec5a;
  #L4aec54.  call `afterSubscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.afterSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4aec5a.  return @kind void;
}
