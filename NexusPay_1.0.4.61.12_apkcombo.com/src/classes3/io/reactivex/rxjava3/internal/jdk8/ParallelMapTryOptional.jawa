record `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b1468.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4b146e.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L4b1472.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b1476.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4b147a.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1448.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4b144c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4b1452.  v0:= temp;
  #L4b1454.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b148c.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4b1492.  v0:= temp;
  #L4b1494.  if v0 != 0 then goto L4b149a;
  #L4b1498.  return @kind void;
  #L4b149a.  v0:= length @variable v8;
  #L4b149c.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4b14a0.  v2:= 0I;
  #L4b14a2.  if v2 >= v0 then goto L4b14ea;
  #L4b14a6.  v3:= v8[v2] @kind object;
  #L4b14aa.  v4:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4b14ae.  if v4 == 0 then goto L4b14ce;
  #L4b14b2.  v4:= new `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b`;
  #L4b14b6.  v3:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L4b14ba.  v5:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b14be.  v6:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4b14c2.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4b14c8.  v1[v2]:= v4 @kind object;
  #L4b14cc.  goto L4b14e4;
  #L4b14ce.  v4:= new `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c`;
  #L4b14d2.  v5:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b14d6.  v6:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4b14da.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4b14e0.  v1[v2]:= v4 @kind object;
  #L4b14e4.  v2:= v2 + 1;
  #L4b14e8.  goto L4b14a2;
  #L4b14ea.  v8:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4b14ee.  call `subscribe`(v8, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b14f4.  return @kind void;
}
