record `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @AccessFlag ;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4adb00.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4adb06.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4adb0a.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4adb0e.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int` := v3;
  #L4adb12.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4adb16.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4adb1c.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4adb20.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4adb24.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4adb2a.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4adb2e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4adb68.  v0:= 0I;
  #L4adb6a.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @type ^`java.util.Iterator` := v0 @kind object;
  #L4adb6e.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @type ^`java.lang.AutoCloseable` @kind object;
  #L4adb72.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L4adb76.  if v1 == 0 then goto L4adb80;
  #L4adb7a.  call `close`(v1) @signature `Ljava/lang/AutoCloseable;.close:()V` @kind interface;
  #L4adb80.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4adb94.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.a:()V` @kind virtual;
  #L4adb9a.  goto L4adbaa;
  #L4adb9c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adb9e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4adba4.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4adbaa.  return @kind void;
  catch `java.lang.Throwable` @[L4adb94..L4adb9a] goto L4adb9c;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4adbc8.  v1:= v17 @kind object;
  #L4adbcc.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4adbd2.  v0:= temp;
  #L4adbd4.  if v0 == 0 then goto L4adbda;
  #L4adbd8.  return @kind void;
  #L4adbda.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4adbde.  v3:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4adbe2.  v4:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4adbe6.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @type ^`java.util.Iterator` @kind object;
  #L4adbea.  v5:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4adbee.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4adbf4.  v5:= temp @kind wide;
  #L4adbf6.  v7:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.l` @type ^`long` @kind wide;
  #L4adbfa.  v9:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L4adbfe.  v10:= v9 ^> 2;
  #L4adc02.  v9:= v9 - v10 @kind int;
  #L4adc04.  v10:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int`;
  #L4adc08.  v11:= 0I;
  #L4adc0a.  v12:= 1I;
  #L4adc0c.  if v10 == v12 then goto L4adc14;
  #L4adc10.  v10:= 1I;
  #L4adc12.  goto L4adc16;
  #L4adc14.  v10:= 0I;
  #L4adc16.  v13:= v7 @kind wide;
  #L4adc18.  v8:= 1I;
  #L4adc1a.  v6:= v5 @kind wide;
  #L4adc1c.  v5:= v0 @kind object;
  #L4adc1e.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` @kind boolean;
  #L4adc22.  if v0 == 0 then goto L4adc36;
  #L4adc26.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4adc2c.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.b:()V` @kind virtual;
  #L4adc32.  goto L4add90;
  #L4adc36.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` @kind boolean;
  #L4adc3a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4adc40.  v15:= temp @kind object;
  #L4adc42.  if v15 == 0 then goto L4adc60;
  #L4adc46.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4adc4c.  v0:= temp @kind object;
  #L4adc4e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4adc52.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4adc58.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v12 @kind boolean;
  #L4adc5c.  goto L4add88;
  #L4adc60.  if v5 != 0 then goto L4add14;
  #L4adc64.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4adc6a.  v15:= temp @kind object;
  #L4adc6c.  if v15 != 0 then goto L4adc76;
  #L4adc70.  v16:= 1I;
  #L4adc74.  goto L4adc7a;
  #L4adc76.  v16:= 0I;
  #L4adc7a.  if v0 == 0 then goto L4adc8e;
  #L4adc7e.  if v16 == 0 then goto L4adc8e;
  #L4adc82.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4adc88.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v12 @kind boolean;
  #L4adc8c.  goto L4add14;
  #L4adc8e.  if v16 != 0 then goto L4add14;
  #L4adc92.  if v10 == 0 then goto L4adcb4;
  #L4adc96.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @type ^`int`;
  #L4adc9a.  v0:= v0 + v12 @kind int;
  #L4adc9c.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @type ^`int` := v0;
  #L4adca0.  if v0 != v9 then goto L4adcb4;
  #L4adca4.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @type ^`int` := v11;
  #L4adca8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4adcac.  v11:= (`long`) v9 @kind i2l;
  #L4adcae.  call `request`(v0, v11) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4adcb4.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4adcb8.  call temp:= `apply`(v0, v15) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4adcbe.  v0:= temp @kind object;
  #L4adcc0.  v11:= "The mapper returned a null Stream" @kind object;
  #L4adcc4.  call temp:= `requireNonNull`(v0, v11) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4adcca.  v0:= temp @kind object;
  #L4adccc.  v0:= (`java.util.stream.Stream`) v0 @kind object;
  #L4adcd0.  call temp:= `iterator`(v0) @signature `Ljava/util/stream/Stream;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4adcd6.  v5:= temp @kind object;
  #L4adcd8.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4adcde.  v11:= temp;
  #L4adce0.  if v11 == 0 then goto L4adcee;
  #L4adce4.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @type ^`java.util.Iterator` := v5 @kind object;
  #L4adce8.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L4adcec.  goto L4add88;
  #L4adcee.  v5:= 0I;
  #L4adcf0.  goto L4add88;
  #L4adcf2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adcf4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4adcfa.  call `d`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L4add00.  goto L4add88;
  #L4add02.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4add04.  v11:= v0 @kind object;
  #L4add06.  call `throwIfFatal`(v11) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4add0c.  call `d`(v1, v2, v11) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L4add12.  goto L4add88;
  #L4add14.  if v5 == 0 then goto L4add90;
  #L4add18.  v0:= lcmp(v13, v6);
  #L4add1c.  if v0 == 0 then goto L4add90;
  #L4add20.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4add26.  v0:= temp @kind object;
  #L4add28.  v11:= "The Stream.Iterator returned a null value" @kind object;
  #L4add2c.  call temp:= `requireNonNull`(v0, v11) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4add32.  v0:= temp @kind object;
  #L4add34.  v11:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` @kind boolean;
  #L4add38.  if v11 != 0 then goto L4add88;
  #L4add3c.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4add42.  v11:= 1L;
  #L4add46.  v13:= v13 + v11 @kind long;
  #L4add48.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` @kind boolean;
  #L4add4c.  if v0 != 0 then goto L4add88;
  #L4add50.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4add56.  v0:= temp;
  #L4add58.  if v0 != 0 then goto L4add88;
  #L4add5c.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.a:()V` @kind virtual;
  #L4add62.  goto L4adcee;
  #L4add64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4add66.  v5:= 0I;
  #L4add68.  goto L4add6c;
  #L4add6a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4add6c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4add72.  call `d`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L4add78.  goto L4add88;
  #L4add7a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4add7c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4add82.  call `d`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L4add88.  v11:= 0I;
  #L4add8a.  v12:= 1I;
  #L4add8c.  goto L4adc1e;
  #L4add90.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.l` @type ^`long` := v13 @kind wide;
  #L4add94.  v0:= -v8 @kind int;
  #L4add96.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4add9c.  v8:= temp;
  #L4add9e.  if v8 != 0 then goto L4adda4;
  #L4adda2.  return @kind void;
  #L4adda4.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4adda8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4addae.  v6:= temp @kind wide;
  #L4addb0.  goto L4add88;
  catch `java.lang.Throwable` @[L4adc64..L4adc6c] goto L4add02;
  catch `java.lang.Throwable` @[L4adcb4..L4adcec] goto L4adcf2;
  catch `java.lang.Throwable` @[L4add20..L4add34] goto L4add7a;
  catch `java.lang.Throwable` @[L4add50..L4add58] goto L4add6a;
  catch `java.lang.Throwable` @[L4add5c..L4add62] goto L4add64;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4adb40.  v0:= 1I;
  #L4adb42.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4adb46.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4adb4a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4adb50.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L4adb56.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4adf84.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4adf88.  v1:= 0I;
  #L4adf8a.  call temp:= `compareAndSet`(v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4adf90.  v0:= temp;
  #L4adf92.  if v0 == 0 then goto L4adfae;
  #L4adf96.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4adf9a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4adfa0.  v0:= 1I;
  #L4adfa2.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4adfa6.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4adfac.  goto L4adfb4;
  #L4adfae.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4adfb4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4addfc.  v0:= 1I;
  #L4addfe.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4ade02.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L4ade08.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ade1c.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ade20.  v1:= 0I;
  #L4ade22.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ade28.  v0:= temp;
  #L4ade2a.  if v0 == 0 then goto L4ade3c;
  #L4ade2e.  v3:= 1I;
  #L4ade30.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` := v3 @kind boolean;
  #L4ade34.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L4ade3a.  goto L4ade42;
  #L4ade3c.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ade42.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ade54.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int`;
  #L4ade58.  v1:= 2I;
  #L4ade5a.  if v0 == v1 then goto L4ade8e;
  #L4ade5e.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ade62.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ade68.  v3:= temp;
  #L4ade6a.  if v3 != 0 then goto L4ade8e;
  #L4ade6e.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ade72.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ade78.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4ade7c.  v0:= "Queue full?!" @kind object;
  #L4ade80.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ade86.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ade8c.  return @kind void;
  #L4ade8e.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L4ade94.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4adea8.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4adeac.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4adeb2.  v0:= temp;
  #L4adeb4.  if v0 == 0 then goto L4adf40;
  #L4adeb8.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4adebc.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4adec0.  if v0 == 0 then goto L4adf18;
  #L4adec4.  v0:= v4 @kind object;
  #L4adec6.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4adeca.  v1:= 7I;
  #L4adecc.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4aded2.  v1:= temp;
  #L4aded4.  v2:= 1I;
  #L4aded6.  if v1 != v2 then goto L4adef2;
  #L4adeda.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int` := v1;
  #L4adede.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4adee2.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4adee6.  v4:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4adeea.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4adef0.  return @kind void;
  #L4adef2.  v2:= 2I;
  #L4adef4.  if v1 != v2 then goto L4adf18;
  #L4adef8.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int` := v1;
  #L4adefc.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4adf00.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4adf04.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4adf0a.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L4adf0e.  v0:= (`long`) v0 @kind i2l;
  #L4adf10.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4adf16.  return @kind void;
  #L4adf18.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4adf1c.  v1:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L4adf20.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4adf26.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4adf2a.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4adf2e.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4adf34.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L4adf38.  v0:= (`long`) v0 @kind i2l;
  #L4adf3a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4adf40.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4adf54.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4adf5a.  v0:= temp;
  #L4adf5c.  if v0 == 0 then goto L4adf70;
  #L4adf60.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4adf64.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4adf6a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L4adf70.  return @kind void;
}
