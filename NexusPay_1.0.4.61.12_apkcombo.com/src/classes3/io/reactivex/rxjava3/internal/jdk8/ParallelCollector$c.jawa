record `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class {
  `java.lang.Object` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b0a34.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b0a3a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4b0a3e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b0a44.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4b0a48.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b09d4.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b09d8.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L4b09de.  v0:= temp;
  #L4b09e0.  v1:= 2I;
  #L4b09e2.  if v0 != v1 then goto L4b09ea;
  #L4b09e6.  v0:= 1I;
  #L4b09e8.  goto L4b09ec;
  #L4b09ea.  v0:= 0I;
  #L4b09ec.  return v0;
}
procedure `int` `b`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.b:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b0a00.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b0a06.  v0:= temp;
  #L4b0a08.  v1:= 2I;
  #L4b0a0a.  if v0 < v1 then goto L4b0a12;
  #L4b0a0e.  v0:= -1I;
  #L4b0a10.  return v0;
  #L4b0a12.  v1:= v0 + 1;
  #L4b0a16.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4b0a1c.  v1:= temp;
  #L4b0a1e.  if v1 == 0 then goto L4b0a00;
  #L4b0a22.  return v0;
}
