record `io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b03a0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4b03a6.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b03aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b03bc.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4b03c0.  if v0 == 0 then goto L4b03c6;
  #L4b03c4.  return @kind void;
  #L4b03c6.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L4b03ca.  if v0 == 0 then goto L4b03dc;
  #L4b03ce.  v2:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b03d2.  v0:= 0I;
  #L4b03d4.  call `onNext`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b03da.  return @kind void;
  #L4b03dc.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b03e0.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b03e6.  v2:= temp @kind object;
  #L4b03e8.  v0:= "The mapper returned a null Optional" @kind object;
  #L4b03ec.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b03f2.  v2:= temp @kind object;
  #L4b03f4.  v2:= (`java.util.Optional`) v2 @kind object;
  #L4b03f8.  call temp:= `isPresent`(v2) @signature `Ljava/util/Optional;.isPresent:()Z` @kind virtual;
  #L4b03fe.  v0:= temp;
  #L4b0400.  if v0 == 0 then goto L4b0416;
  #L4b0404.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b0408.  call temp:= `get`(v2) @signature `Ljava/util/Optional;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b040e.  v2:= temp @kind object;
  #L4b0410.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b0416.  return @kind void;
  #L4b0418.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b041a.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0420.  return @kind void;
  catch `java.lang.Throwable` @[L4b03dc..L4b03f8] goto L4b0418;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b0348.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4b034c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b0352.  v0:= temp @kind object;
  #L4b0354.  if v0 != 0 then goto L4b035c;
  #L4b0358.  v0:= 0I;
  #L4b035a.  return v0 @kind object;
  #L4b035c.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b0360.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b0366.  v0:= temp @kind object;
  #L4b0368.  v1:= "The mapper returned a null Optional" @kind object;
  #L4b036c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b0372.  v0:= temp @kind object;
  #L4b0374.  v0:= (`java.util.Optional`) v0 @kind object;
  #L4b0378.  call temp:= `isPresent`(v0) @signature `Ljava/util/Optional;.isPresent:()Z` @kind virtual;
  #L4b037e.  v1:= temp;
  #L4b0380.  if v1 == 0 then goto L4b0348;
  #L4b0384.  call temp:= `get`(v0) @signature `Ljava/util/Optional;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b038a.  v0:= temp @kind object;
  #L4b038c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4b032c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4b0332.  v1:= temp;
  #L4b0334.  return v1;
}
