record `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @AccessFlag ;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object, `java.lang.AutoCloseable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Iterator;Ljava/lang/AutoCloseable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0098.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b009e.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b00a2.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4b00a6.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @type ^`java.lang.AutoCloseable` := v3 @kind object;
  #L4b00aa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b0108.  v0:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.f` @type ^`boolean` @kind boolean;
  #L4b010c.  if v0 == 0 then goto L4b0112;
  #L4b0110.  return @kind void;
  #L4b0112.  v0:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L4b0116.  v1:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b011a.  v2:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L4b011e.  if v2 == 0 then goto L4b012a;
  #L4b0122.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @kind virtual;
  #L4b0128.  return @kind void;
  #L4b012a.  v2:= 1I;
  #L4b012c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b0132.  v3:= temp @kind object;
  #L4b0134.  v4:= "The Stream's Iterator.next returned a null value" @kind object;
  #L4b0138.  call temp:= `requireNonNull`(v3, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b013e.  v3:= temp @kind object;
  #L4b0140.  v4:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L4b0144.  if v4 == 0 then goto L4b014a;
  #L4b0148.  goto L4b011a;
  #L4b014a.  call `onNext`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b0150.  v3:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L4b0154.  if v3 == 0 then goto L4b015a;
  #L4b0158.  goto L4b011a;
  #L4b015a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b0160.  v3:= temp;
  #L4b0162.  if v3 == 0 then goto L4b0168;
  #L4b0166.  goto L4b011a;
  #L4b0168.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b016e.  v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4b0172.  goto L4b011a;
  #L4b0174.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0176.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b017c.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b0182.  v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4b0186.  goto L4b011a;
  #L4b0188.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b018a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0190.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b0196.  v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4b019a.  goto L4b011a;
  catch `java.lang.Throwable` @[L4b012c..L4b0140] goto L4b0188;
  catch `java.lang.Throwable` @[L4b015a..L4b0162] goto L4b0174;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b00bc.  v0:= 0I;
  #L4b00be.  v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` := v0 @kind object;
  #L4b00c2.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @type ^`java.lang.AutoCloseable` @kind object;
  #L4b00c6.  v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L4b00ca.  if v1 == 0 then goto L4b00d4;
  #L4b00ce.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream;.a:(Ljava/lang/AutoCloseable;)V` @kind static;
  #L4b00d4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b00e8.  v0:= 1I;
  #L4b00ea.  v1.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4b00ee.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.a:()V` @kind virtual;
  #L4b00f4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aff88.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L4aff8c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4affa0.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L4affa4.  if v0 == 0 then goto L4affca;
  #L4affa8.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @type ^`boolean` @kind boolean;
  #L4affac.  if v1 == 0 then goto L4affc6;
  #L4affb0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4affb6.  v0:= temp;
  #L4affb8.  if v0 == 0 then goto L4affbe;
  #L4affbc.  goto L4affc6;
  #L4affbe.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @kind virtual;
  #L4affc4.  goto L4affca;
  #L4affc6.  v0:= 0I;
  #L4affc8.  return v0;
  #L4affca.  v0:= 1I;
  #L4affcc.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4affe0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4affe4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4affea.  throw v1;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4afffc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b0000.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4b0006.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b003c.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L4b0040.  v1:= 0I;
  #L4b0042.  if v0 != 0 then goto L4b0048;
  #L4b0046.  return v1 @kind object;
  #L4b0048.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @type ^`boolean` @kind boolean;
  #L4b004c.  if v2 != 0 then goto L4b0058;
  #L4b0050.  v0:= 1I;
  #L4b0052.  v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4b0056.  goto L4b006c;
  #L4b0058.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b005e.  v0:= temp;
  #L4b0060.  if v0 != 0 then goto L4b006c;
  #L4b0064.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @kind virtual;
  #L4b006a.  return v1 @kind object;
  #L4b006c.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L4b0070.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b0076.  v0:= temp @kind object;
  #L4b0078.  v1:= "The Stream's Iterator.next() returned a null value" @kind object;
  #L4b007c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b0082.  v0:= temp @kind object;
  #L4b0084.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0018.  v0:= 1I;
  #L4b001a.  v2:= v2 ^& v0 @kind int;
  #L4b001c.  if v2 == 0 then goto L4b0026;
  #L4b0020.  v1.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4b0024.  return v0;
  #L4b0026.  v2:= 0I;
  #L4b0028.  return v2;
}
