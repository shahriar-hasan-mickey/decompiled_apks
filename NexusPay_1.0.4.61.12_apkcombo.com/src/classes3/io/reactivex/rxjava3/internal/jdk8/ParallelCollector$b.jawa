record `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class {
  `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[] `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @AccessFlag FINAL;
  `java.util.function.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object, `int` v7 , `java.util.stream.Collector` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/stream/Collector;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b0804.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4b080a.  v6:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b080e.  call `<init>`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b0814.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v6 @kind object;
  #L4b0818.  v6:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4b081c.  call `<init>`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b0822.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v6 @kind object;
  #L4b0826.  v6:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b082a.  call `<init>`(v6) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b0830.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v6 @kind object;
  #L4b0834.  call temp:= `finisher`(v8) @signature `Ljava/util/stream/Collector;.finisher:()Ljava/util/function/Function;` @kind interface;
  #L4b083a.  v6:= temp @kind object;
  #L4b083c.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.e` @type ^`java.util.function.Function` := v6 @kind object;
  #L4b0840.  v6:= new `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[v7];
  #L4b0844.  v0:= 0I;
  #L4b0846.  if v0 >= v7 then goto L4b087e;
  #L4b084a.  v1:= new `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`;
  #L4b084e.  call temp:= `supplier`(v8) @signature `Ljava/util/stream/Collector;.supplier:()Ljava/util/function/Supplier;` @kind interface;
  #L4b0854.  v2:= temp @kind object;
  #L4b0856.  call temp:= `get`(v2) @signature `Ljava/util/function/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b085c.  v2:= temp @kind object;
  #L4b085e.  call temp:= `accumulator`(v8) @signature `Ljava/util/stream/Collector;.accumulator:()Ljava/util/function/BiConsumer;` @kind interface;
  #L4b0864.  v3:= temp @kind object;
  #L4b0866.  call temp:= `combiner`(v8) @signature `Ljava/util/stream/Collector;.combiner:()Ljava/util/function/BinaryOperator;` @kind interface;
  #L4b086c.  v4:= temp @kind object;
  #L4b086e.  call `<init>`(v1, v5, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$a;.<init>:(Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;Ljava/lang/Object;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;)V` @kind direct;
  #L4b0874.  v6[v0]:= v1 @kind object;
  #L4b0878.  v0:= v0 + 1;
  #L4b087c.  goto L4b0846;
  #L4b087e.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.a` @type ^`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[] := v6 @kind object;
  #L4b0882.  v6:= v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b0886.  call `lazySet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b088c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b0988.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b098c.  v1:= 0I;
  #L4b098e.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b0994.  v0:= temp;
  #L4b0996.  if v0 == 0 then goto L4b09ac;
  #L4b099a.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.cancel:()V` @kind virtual;
  #L4b09a0.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b09a4.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b09aa.  goto L4b09c2;
  #L4b09ac.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b09b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b09b6.  v0:= temp @kind object;
  #L4b09b8.  if v3 == v0 then goto L4b09c2;
  #L4b09bc.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b09c2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b08a0.  v0:= v4.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.a` @type ^`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[] @kind object;
  #L4b08a4.  v1:= length @variable v0;
  #L4b08a6.  v2:= 0I;
  #L4b08a8.  if v2 >= v1 then goto L4b08bc;
  #L4b08ac.  v3:= v0[v2] @kind object;
  #L4b08b0.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$a;.a:()V` @kind virtual;
  #L4b08b6.  v2:= v2 + 1;
  #L4b08ba.  goto L4b08a8;
  #L4b08bc.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` `e`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.e:(Ljava/lang/Object;)Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4b0780.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b0784.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b078a.  v0:= temp @kind object;
  #L4b078c.  v0:= (`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c`) v0 @kind object;
  #L4b0790.  v1:= 0I;
  #L4b0792.  if v0 != 0 then goto L4b07b2;
  #L4b0796.  v0:= new `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c`;
  #L4b079a.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.<init>:()V` @kind direct;
  #L4b07a0.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b07a4.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b07aa.  v2:= temp;
  #L4b07ac.  if v2 != 0 then goto L4b07b2;
  #L4b07b0.  goto L4b0780;
  #L4b07b2.  call temp:= `b`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.b:()I` @kind virtual;
  #L4b07b8.  v2:= temp;
  #L4b07ba.  if v2 >= 0 then goto L4b07ca;
  #L4b07be.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b07c2.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b07c8.  goto L4b0780;
  #L4b07ca.  if v2 != 0 then goto L4b07d4;
  #L4b07ce.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @type ^`java.lang.Object` := v4 @kind object;
  #L4b07d2.  goto L4b07d8;
  #L4b07d4.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.b` @type ^`java.lang.Object` := v4 @kind object;
  #L4b07d8.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.a:()Z` @kind virtual;
  #L4b07de.  v4:= temp;
  #L4b07e0.  if v4 == 0 then goto L4b07f0;
  #L4b07e4.  v4:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b07e8.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b07ee.  return v0 @kind object;
  #L4b07f0.  return v1 @kind object;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.function.BinaryOperator` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.f:(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)V` @AccessFlag  {
    temp;
    v0;

  #L4b08d0.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.e:(Ljava/lang/Object;)Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;` @kind virtual;
  #L4b08d6.  v2:= temp @kind object;
  #L4b08d8.  if v2 == 0 then goto L4b08fe;
  #L4b08dc.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @type ^`java.lang.Object` @kind object;
  #L4b08e0.  v2:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.b` @type ^`java.lang.Object` @kind object;
  #L4b08e4.  call temp:= `apply`(v3, v0, v2) @signature `Ljava/util/function/BinaryOperator;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b08ea.  v2:= temp @kind object;
  #L4b08ec.  goto L4b08d0;
  #L4b08ee.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b08f0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b08f6.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b08fc.  return @kind void;
  #L4b08fe.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b0902.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4b0908.  v2:= temp;
  #L4b090a.  if v2 != 0 then goto L4b095c;
  #L4b090e.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b0912.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b0918.  v2:= temp @kind object;
  #L4b091a.  v2:= (`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c`) v2 @kind object;
  #L4b091e.  v3:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b0922.  v0:= 0I;
  #L4b0924.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4b092a.  v3:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.e` @type ^`java.util.function.Function` @kind object;
  #L4b092e.  v2:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @type ^`java.lang.Object` @kind object;
  #L4b0932.  call temp:= `apply`(v3, v2) @signature `Ljava/util/function/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b0938.  v2:= temp @kind object;
  #L4b093a.  v3:= "The finisher returned a null value" @kind object;
  #L4b093e.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b0944.  v2:= temp @kind object;
  #L4b0946.  call `complete`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4b094c.  goto L4b095c;
  #L4b094e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0950.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0956.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b095c.  return @kind void;
  catch `java.lang.Throwable` @[L4b08dc..L4b08ec] goto L4b08ee;
  catch `java.lang.Throwable` @[L4b092a..L4b0946] goto L4b094e;
}
