record `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b10f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b10fa.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4b10fe.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b1102.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4b1106.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1118.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b111c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1122.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1134.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L4b1138.  if v0 == 0 then goto L4b113e;
  #L4b113c.  return @kind void;
  #L4b113e.  v0:= 1I;
  #L4b1140.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4b1144.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4b1148.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b114e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1160.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L4b1164.  if v0 == 0 then goto L4b1170;
  #L4b1168.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b116e.  return @kind void;
  #L4b1170.  v0:= 1I;
  #L4b1172.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4b1176.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4b117a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b1180.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b1194.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b119a.  v3:= temp;
  #L4b119c.  if v3 != 0 then goto L4b11b6;
  #L4b11a0.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L4b11a4.  if v3 != 0 then goto L4b11b6;
  #L4b11a8.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b11ac.  v0:= 1L;
  #L4b11b0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b11b6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b11c8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b11cc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b11d2.  v0:= temp;
  #L4b11d4.  if v0 == 0 then goto L4b11e6;
  #L4b11d8.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4b11dc.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4b11e0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b11e6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b11f8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b11fc.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b1202.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4b0fdc.  v0:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L4b0fe0.  v1:= 0I;
  #L4b0fe2.  if v0 == 0 then goto L4b0fe8;
  #L4b0fe6.  return v1;
  #L4b0fe8.  v2:= 0L;
  #L4b0fec.  v0:= 1I;
  #L4b0fee.  v4:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b0ff2.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b0ff8.  v4:= temp @kind object;
  #L4b0ffa.  v5:= "The mapper returned a null Optional" @kind object;
  #L4b0ffe.  call temp:= `requireNonNull`(v4, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b1004.  v4:= temp @kind object;
  #L4b1006.  v4:= (`java.util.Optional`) v4 @kind object;
  #L4b100a.  call temp:= `isPresent`(v4) @signature `Ljava/util/Optional;.isPresent:()Z` @kind virtual;
  #L4b1010.  v10:= temp;
  #L4b1012.  if v10 == 0 then goto L4b1030;
  #L4b1016.  v10:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4b101a.  call temp:= `get`(v4) @signature `Ljava/util/Optional;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b1020.  v2:= temp @kind object;
  #L4b1022.  call temp:= `tryOnNext`(v10, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4b1028.  v10:= temp;
  #L4b102a.  if v10 == 0 then goto L4b1030;
  #L4b102e.  v1:= 1I;
  #L4b1030.  return v1;
  #L4b1032.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1034.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b103a.  v5:= 2I;
  #L4b103c.  v6:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4b1040.  v7:= 1L;
  #L4b1044.  v2:= v2 + v7 @kind long;
  #L4b1046.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4b104c.  v7:= temp @kind object;
  #L4b104e.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b1054.  v6:= temp @kind object;
  #L4b1056.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4b105a.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b1060.  v6:= temp @kind object;
  #L4b1062.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4b1066.  v7:= `@@io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$a.a` @type ^`int`[] @kind object;
  #L4b106a.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4b1070.  v6:= temp;
  #L4b1072.  v6:= v7[v6];
  #L4b1076.  if v6 == v0 then goto L4b0fec;
  #L4b107a.  if v6 == v5 then goto L4b109e;
  #L4b107e.  v10:= 3I;
  #L4b1080.  if v6 == v10 then goto L4b1092;
  #L4b1084.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @kind virtual;
  #L4b108a.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b1090.  return v1;
  #L4b1092.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @kind virtual;
  #L4b1098.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onComplete:()V` @kind virtual;
  #L4b109e.  return v1;
  #L4b10a0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b10a2.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b10a8.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @kind virtual;
  #L4b10ae.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4b10b2.  v3:= new `java.lang.Throwable`[v5];
  #L4b10b6.  v3[v1]:= v4 @kind object;
  #L4b10ba.  v3[v0]:= v10 @kind object;
  #L4b10be.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4b10c4.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b10ca.  return v1;
  catch `java.lang.Throwable` @[L4b0fee..L4b100a] goto L4b1032;
  catch `java.lang.Throwable` @[L4b103c..L4b1066] goto L4b10a0;
}
