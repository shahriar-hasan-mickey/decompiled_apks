record `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b1328.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b132e.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b1332.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b1336.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4b133a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b134c.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1350.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1356.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1368.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.e` @type ^`boolean` @kind boolean;
  #L4b136c.  if v0 == 0 then goto L4b1372;
  #L4b1370.  return @kind void;
  #L4b1372.  v0:= 1I;
  #L4b1374.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4b1378.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b137c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b1382.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1394.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.e` @type ^`boolean` @kind boolean;
  #L4b1398.  if v0 == 0 then goto L4b13a4;
  #L4b139c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b13a2.  return @kind void;
  #L4b13a4.  v0:= 1I;
  #L4b13a6.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4b13aa.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b13ae.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b13b4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b13c8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b13ce.  v3:= temp;
  #L4b13d0.  if v3 != 0 then goto L4b13ea;
  #L4b13d4.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.e` @type ^`boolean` @kind boolean;
  #L4b13d8.  if v3 != 0 then goto L4b13ea;
  #L4b13dc.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b13e0.  v0:= 1L;
  #L4b13e4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b13ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b13fc.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1400.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b1406.  v0:= temp;
  #L4b1408.  if v0 == 0 then goto L4b141a;
  #L4b140c.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4b1410.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b1414.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b141a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b142c.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1430.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b1436.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4b1214.  v0:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.e` @type ^`boolean` @kind boolean;
  #L4b1218.  v1:= 0I;
  #L4b121a.  if v0 == 0 then goto L4b1220;
  #L4b121e.  return v1;
  #L4b1220.  v2:= 0L;
  #L4b1224.  v0:= 1I;
  #L4b1226.  v4:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b122a.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b1230.  v4:= temp @kind object;
  #L4b1232.  v5:= "The mapper returned a null Optional" @kind object;
  #L4b1236.  call temp:= `requireNonNull`(v4, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b123c.  v4:= temp @kind object;
  #L4b123e.  v4:= (`java.util.Optional`) v4 @kind object;
  #L4b1242.  call temp:= `isPresent`(v4) @signature `Ljava/util/Optional;.isPresent:()Z` @kind virtual;
  #L4b1248.  v10:= temp;
  #L4b124a.  if v10 == 0 then goto L4b1262;
  #L4b124e.  v10:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b1252.  call temp:= `get`(v4) @signature `Ljava/util/Optional;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b1258.  v1:= temp @kind object;
  #L4b125a.  call `onNext`(v10, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b1260.  return v0;
  #L4b1262.  return v1;
  #L4b1264.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b1266.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b126c.  v5:= 2I;
  #L4b126e.  v6:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4b1272.  v7:= 1L;
  #L4b1276.  v2:= v2 + v7 @kind long;
  #L4b1278.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4b127e.  v7:= temp @kind object;
  #L4b1280.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b1286.  v6:= temp @kind object;
  #L4b1288.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4b128c.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b1292.  v6:= temp @kind object;
  #L4b1294.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4b1298.  v7:= `@@io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$a.a` @type ^`int`[] @kind object;
  #L4b129c.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4b12a2.  v6:= temp;
  #L4b12a4.  v6:= v7[v6];
  #L4b12a8.  if v6 == v0 then goto L4b1224;
  #L4b12ac.  if v6 == v5 then goto L4b12d0;
  #L4b12b0.  v10:= 3I;
  #L4b12b2.  if v6 == v10 then goto L4b12c4;
  #L4b12b6.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.cancel:()V` @kind virtual;
  #L4b12bc.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b12c2.  return v1;
  #L4b12c4.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.cancel:()V` @kind virtual;
  #L4b12ca.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.onComplete:()V` @kind virtual;
  #L4b12d0.  return v1;
  #L4b12d2.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b12d4.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b12da.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.cancel:()V` @kind virtual;
  #L4b12e0.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4b12e4.  v3:= new `java.lang.Throwable`[v5];
  #L4b12e8.  v3[v1]:= v4 @kind object;
  #L4b12ec.  v3[v0]:= v10 @kind object;
  #L4b12f0.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4b12f6.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b12fc.  return v1;
  catch `java.lang.Throwable` @[L4b1226..L4b1242] goto L4b1264;
  catch `java.lang.Throwable` @[L4b126e..L4b1298] goto L4b12d2;
}
