record `io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelFlatMapStream;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b0af8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4b0afe.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L4b0b02.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b0b06.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.c` @type ^`int` := v3;
  #L4b0b0a.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelFlatMapStream;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0ad8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4b0adc.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4b0ae2.  v0:= temp;
  #L4b0ae4.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream` v6 @kind this, `org.reactivestreams.Subscriber`[] v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelFlatMapStream;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b0b1c.  call temp:= `validate`(v6, v7) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4b0b22.  v0:= temp;
  #L4b0b24.  if v0 != 0 then goto L4b0b2a;
  #L4b0b28.  return @kind void;
  #L4b0b2a.  v0:= length @variable v7;
  #L4b0b2c.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4b0b30.  v2:= 0I;
  #L4b0b32.  if v2 >= v0 then goto L4b0b54;
  #L4b0b36.  v3:= v7[v2] @kind object;
  #L4b0b3a.  v4:= v6.`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b0b3e.  v5:= v6.`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.c` @type ^`int`;
  #L4b0b42.  call temp:= `subscribe`(v3, v4, v5) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)Lorg/reactivestreams/Subscriber;` @kind static;
  #L4b0b48.  v3:= temp @kind object;
  #L4b0b4a.  v1[v2]:= v3 @kind object;
  #L4b0b4e.  v2:= v2 + 1;
  #L4b0b52.  goto L4b0b32;
  #L4b0b54.  v7:= v6.`io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4b0b58.  call `subscribe`(v7, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b0b5e.  return @kind void;
}
