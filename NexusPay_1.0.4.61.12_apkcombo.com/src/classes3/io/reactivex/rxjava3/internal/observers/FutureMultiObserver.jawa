record `io.reactivex.rxjava3.internal.observers.FutureMultiObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b2f38.  v0:= 1I;
  #L4b2f3a.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4b2f40.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b2f44.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b2f4a.  v1.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b2f4e.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2d88.  v3:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2d8c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2d92.  v3:= temp @kind object;
  #L4b2d94.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4b2d98.  if v3 == v2 then goto L4b2dca;
  #L4b2d9c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b2da0.  if v3 != v0 then goto L4b2da6;
  #L4b2da4.  goto L4b2dca;
  #L4b2da6.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2daa.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2db0.  v0:= temp;
  #L4b2db2.  if v0 == 0 then goto L4b2d88;
  #L4b2db6.  if v3 == 0 then goto L4b2dc0;
  #L4b2dba.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b2dc0.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4b2dc6.  v3:= 1I;
  #L4b2dc8.  return v3;
  #L4b2dca.  v3:= 0I;
  #L4b2dcc.  return v3;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4b2f60.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b2e54.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4b2e5a.  v0:= temp @kind wide;
  #L4b2e5c.  v2:= 0L;
  #L4b2e60.  v4:= lcmp(v0, v2);
  #L4b2e64.  if v4 == 0 then goto L4b2e74;
  #L4b2e68.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b2e6e.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L4b2e74.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isCancelled:()Z` @kind virtual;
  #L4b2e7a.  v0:= temp;
  #L4b2e7c.  if v0 != 0 then goto L4b2e9a;
  #L4b2e80.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L4b2e84.  if v0 != 0 then goto L4b2e8e;
  #L4b2e88.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L4b2e8c.  return v0 @kind object;
  #L4b2e8e.  v1:= new `java.util.concurrent.ExecutionException`;
  #L4b2e92.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4b2e98.  throw v1;
  #L4b2e9a.  v0:= new `java.util.concurrent.CancellationException`;
  #L4b2e9e.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L4b2ea4.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b2eb8.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4b2ebe.  v0:= temp @kind wide;
  #L4b2ec0.  v2:= 0L;
  #L4b2ec4.  v4:= lcmp(v0, v2);
  #L4b2ec8.  if v4 == 0 then goto L4b2ef4;
  #L4b2ecc.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b2ed2.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4b2ed8.  v0:= temp;
  #L4b2eda.  if v0 == 0 then goto L4b2ee0;
  #L4b2ede.  goto L4b2ef4;
  #L4b2ee0.  v0:= new `java.util.concurrent.TimeoutException`;
  #L4b2ee4.  call temp:= `timeoutMessage`(v6, v8) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L4b2eea.  v6:= temp @kind object;
  #L4b2eec.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b2ef2.  throw v0;
  #L4b2ef4.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isCancelled:()Z` @kind virtual;
  #L4b2efa.  v6:= temp;
  #L4b2efc.  if v6 != 0 then goto L4b2f1a;
  #L4b2f00.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L4b2f04.  if v6 != 0 then goto L4b2f0e;
  #L4b2f08.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L4b2f0c.  return v6 @kind object;
  #L4b2f0e.  v7:= new `java.util.concurrent.ExecutionException`;
  #L4b2f12.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4b2f18.  throw v7;
  #L4b2f1a.  v6:= new `java.util.concurrent.CancellationException`;
  #L4b2f1e.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L4b2f24.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2de0.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2de4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2dea.  v0:= temp @kind object;
  #L4b2dec.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b2df0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b2df6.  v0:= temp;
  #L4b2df8.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2e0c.  call temp:= `isDone`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isDone:()Z` @kind virtual;
  #L4b2e12.  v0:= temp;
  #L4b2e14.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b2e28.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4b2e2e.  v0:= temp @kind wide;
  #L4b2e30.  v2:= 0L;
  #L4b2e34.  v4:= lcmp(v0, v2);
  #L4b2e38.  if v4 != 0 then goto L4b2e40;
  #L4b2e3c.  v0:= 1I;
  #L4b2e3e.  goto L4b2e42;
  #L4b2e40.  v0:= 0I;
  #L4b2e42.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2f74.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2f78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2f7e.  v0:= temp @kind object;
  #L4b2f80.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b2f84.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b2f88.  if v0 != v1 then goto L4b2f8e;
  #L4b2f8c.  return @kind void;
  #L4b2f8e.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2f92.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2f98.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4b2f9e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2fb0.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2fb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b2fba.  v0:= temp @kind object;
  #L4b2fbc.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b2fc0.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b2fc4.  if v0 != v1 then goto L4b2fd0;
  #L4b2fc8.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b2fce.  return @kind void;
  #L4b2fd0.  v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4b2fd4.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b2fd8.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b2fde.  v0:= temp;
  #L4b2fe0.  if v0 == 0 then goto L4b2fb0;
  #L4b2fe4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4b2fea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b2ffc.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b3000.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b3006.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3018.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b301c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3022.  v0:= temp @kind object;
  #L4b3024.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b3028.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b302c.  if v0 != v1 then goto L4b3032;
  #L4b3030.  return @kind void;
  #L4b3032.  v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @type ^`java.lang.Object` := v3 @kind object;
  #L4b3036.  v3:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b303a.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b3040.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4b3046.  return @kind void;
}
