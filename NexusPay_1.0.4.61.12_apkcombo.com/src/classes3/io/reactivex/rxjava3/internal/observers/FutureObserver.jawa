record `io.reactivex.rxjava3.internal.observers.FutureObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.observers.FutureObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.observers.FutureObserver.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.observers.FutureObserver.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b3208.  v0:= 1I;
  #L4b320a.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4b3210.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b3214.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b321a.  v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b321e.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3058.  v3:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b305c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3062.  v3:= temp @kind object;
  #L4b3064.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4b3068.  if v3 == v2 then goto L4b309a;
  #L4b306c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b3070.  if v3 != v0 then goto L4b3076;
  #L4b3074.  goto L4b309a;
  #L4b3076.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b307a.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b3080.  v0:= temp;
  #L4b3082.  if v0 == 0 then goto L4b3058;
  #L4b3086.  if v3 == 0 then goto L4b3090;
  #L4b308a.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b3090.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4b3096.  v3:= 1I;
  #L4b3098.  return v3;
  #L4b309a.  v3:= 0I;
  #L4b309c.  return v3;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4b3230.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b3124.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4b312a.  v0:= temp @kind wide;
  #L4b312c.  v2:= 0L;
  #L4b3130.  v4:= lcmp(v0, v2);
  #L4b3134.  if v4 == 0 then goto L4b3144;
  #L4b3138.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b313e.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L4b3144.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isCancelled:()Z` @kind virtual;
  #L4b314a.  v0:= temp;
  #L4b314c.  if v0 != 0 then goto L4b316a;
  #L4b3150.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L4b3154.  if v0 != 0 then goto L4b315e;
  #L4b3158.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L4b315c.  return v0 @kind object;
  #L4b315e.  v1:= new `java.util.concurrent.ExecutionException`;
  #L4b3162.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4b3168.  throw v1;
  #L4b316a.  v0:= new `java.util.concurrent.CancellationException`;
  #L4b316e.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L4b3174.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b3188.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4b318e.  v0:= temp @kind wide;
  #L4b3190.  v2:= 0L;
  #L4b3194.  v4:= lcmp(v0, v2);
  #L4b3198.  if v4 == 0 then goto L4b31c4;
  #L4b319c.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b31a2.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4b31a8.  v0:= temp;
  #L4b31aa.  if v0 == 0 then goto L4b31b0;
  #L4b31ae.  goto L4b31c4;
  #L4b31b0.  v0:= new `java.util.concurrent.TimeoutException`;
  #L4b31b4.  call temp:= `timeoutMessage`(v6, v8) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L4b31ba.  v6:= temp @kind object;
  #L4b31bc.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b31c2.  throw v0;
  #L4b31c4.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isCancelled:()Z` @kind virtual;
  #L4b31ca.  v6:= temp;
  #L4b31cc.  if v6 != 0 then goto L4b31ea;
  #L4b31d0.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L4b31d4.  if v6 != 0 then goto L4b31de;
  #L4b31d8.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L4b31dc.  return v6 @kind object;
  #L4b31de.  v7:= new `java.util.concurrent.ExecutionException`;
  #L4b31e2.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4b31e8.  throw v7;
  #L4b31ea.  v6:= new `java.util.concurrent.CancellationException`;
  #L4b31ee.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L4b31f4.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b30b0.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b30b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b30ba.  v0:= temp @kind object;
  #L4b30bc.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b30c0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b30c6.  v0:= temp;
  #L4b30c8.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b30dc.  call temp:= `isDone`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isDone:()Z` @kind virtual;
  #L4b30e2.  v0:= temp;
  #L4b30e4.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b30f8.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4b30fe.  v0:= temp @kind wide;
  #L4b3100.  v2:= 0L;
  #L4b3104.  v4:= lcmp(v0, v2);
  #L4b3108.  if v4 != 0 then goto L4b3110;
  #L4b310c.  v0:= 1I;
  #L4b310e.  goto L4b3112;
  #L4b3110.  v0:= 0I;
  #L4b3112.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3244.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L4b3248.  if v0 != 0 then goto L4b3262;
  #L4b324c.  v0:= new `java.util.NoSuchElementException`;
  #L4b3250.  v1:= "The source is empty" @kind object;
  #L4b3254.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b325a.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b3260.  return @kind void;
  #L4b3262.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b3266.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b326c.  v0:= temp @kind object;
  #L4b326e.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b3272.  if v0 == v2 then goto L4b3296;
  #L4b3276.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b327a.  if v0 != v1 then goto L4b3280;
  #L4b327e.  goto L4b3296;
  #L4b3280.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b3284.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b328a.  v0:= temp;
  #L4b328c.  if v0 == 0 then goto L4b3296;
  #L4b3290.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4b3296.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b32a8.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L4b32ac.  if v0 != 0 then goto L4b32e8;
  #L4b32b0.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b32b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b32ba.  v0:= temp @kind object;
  #L4b32bc.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b32c0.  if v0 == v2 then goto L4b32e8;
  #L4b32c4.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b32c8.  if v0 == v1 then goto L4b32e8;
  #L4b32cc.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b32d0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b32d6.  v0:= temp;
  #L4b32d8.  if v0 == 0 then goto L4b32e8;
  #L4b32dc.  v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4b32e0.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4b32e6.  return @kind void;
  #L4b32e8.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b32ee.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3300.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L4b3304.  if v0 == 0 then goto L4b3334;
  #L4b3308.  v2:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b330c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3312.  v2:= temp @kind object;
  #L4b3314.  v2:= (`io.reactivex.rxjava3.disposables.Disposable`) v2 @kind object;
  #L4b3318.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b331e.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L4b3322.  v0:= "More than one element received" @kind object;
  #L4b3326.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b332c.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b3332.  return @kind void;
  #L4b3334.  v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` := v2 @kind object;
  #L4b3338.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b334c.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b3350.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b3356.  return @kind void;
}
