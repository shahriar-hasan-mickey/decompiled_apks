record `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @AccessFlag PROTECTED;
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.rxjava3.internal.fuseable.QueueDisposable` `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @AccessFlag PROTECTED;
  `int` `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @AccessFlag PROTECTED;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.upstream` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b1908.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b190e.  v0.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b1912.  return @kind void;
}
procedure `void` `afterDownstream`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.afterDownstream:()V` @AccessFlag PROTECTED {
    temp;

  #L4b1924.  return @kind void;
}
procedure `boolean` `beforeDownstream`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.beforeDownstream:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4b183c.  v0:= 1I;
  #L4b183e.  return v0;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1938.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4b193c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b1942.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1954.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b1958.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b195e.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4b1970.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b1976.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b197a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b1980.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b1986.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1850.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b1854.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4b185a.  v0:= temp;
  #L4b185c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1870.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4b1874.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4b187a.  v0:= temp;
  #L4b187c.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b1890.  v2:= new `java.lang.UnsupportedOperationException`;
  #L4b1894.  v0:= "Should not be called!" @kind object;
  #L4b1898.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b189e.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4b18b0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4b18b4.  v2:= "Should not be called!" @kind object;
  #L4b18b8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b18be.  throw v1;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1998.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4b199c.  if v0 == 0 then goto L4b19a2;
  #L4b19a0.  return @kind void;
  #L4b19a2.  v0:= 1I;
  #L4b19a4.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4b19a8.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b19ac.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b19b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b19c4.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4b19c8.  if v0 == 0 then goto L4b19d4;
  #L4b19cc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b19d2.  return @kind void;
  #L4b19d4.  v0:= 1I;
  #L4b19d6.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4b19da.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b19de.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b19e4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b19f8.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b19fc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b1a02.  v0:= temp;
  #L4b1a04.  if v0 == 0 then goto L4b1a38;
  #L4b1a08.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b1a0c.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4b1a10.  if v0 == 0 then goto L4b1a1c;
  #L4b1a14.  v2:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v2 @kind object;
  #L4b1a18.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` := v2 @kind object;
  #L4b1a1c.  call temp:= `beforeDownstream`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.beforeDownstream:()Z` @kind virtual;
  #L4b1a22.  v2:= temp;
  #L4b1a24.  if v2 == 0 then goto L4b1a38;
  #L4b1a28.  v2:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b1a2c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b1a32.  call `afterDownstream`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.afterDownstream:()V` @kind virtual;
  #L4b1a38.  return @kind void;
}
procedure `int` `transitiveBoundaryFusion`(`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L4b18d0.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4b18d4.  if v0 == 0 then goto L4b18f2;
  #L4b18d8.  v1:= v3 ^& 4;
  #L4b18dc.  if v1 != 0 then goto L4b18f2;
  #L4b18e0.  call temp:= `requestFusion`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4b18e6.  v3:= temp;
  #L4b18e8.  if v3 == 0 then goto L4b18f0;
  #L4b18ec.  v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int` := v3;
  #L4b18f0.  return v3;
  #L4b18f2.  v3:= 0I;
  #L4b18f4.  return v3;
}
