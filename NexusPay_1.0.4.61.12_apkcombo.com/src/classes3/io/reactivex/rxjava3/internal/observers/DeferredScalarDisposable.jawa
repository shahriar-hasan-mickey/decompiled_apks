record `io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b27c0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4b27c6.  v0.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b27ca.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b27dc.  v0:= 32I;
  #L4b27e0.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b27e6.  v0:= 0I;
  #L4b27e8.  v1.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4b27ec.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b2800.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b2806.  v0:= temp;
  #L4b2808.  v0:= v0 ^& 54;
  #L4b280c.  if v0 == 0 then goto L4b2812;
  #L4b2810.  return @kind void;
  #L4b2812.  v0:= 2I;
  #L4b2814.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b281a.  v0:= v1.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b281e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b2824.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4b2838.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b283e.  v0:= temp;
  #L4b2840.  v1:= v0 ^& 54;
  #L4b2844.  if v1 == 0 then goto L4b284a;
  #L4b2848.  return @kind void;
  #L4b284a.  v1:= v3.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b284e.  v2:= 8I;
  #L4b2852.  if v0 != v2 then goto L4b286e;
  #L4b2856.  v3.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4b285a.  v4:= 16I;
  #L4b285e.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b2864.  v4:= 0I;
  #L4b2866.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b286c.  goto L4b287c;
  #L4b286e.  v0:= 2I;
  #L4b2870.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b2876.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b287c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b2882.  v4:= temp;
  #L4b2884.  v0:= 4I;
  #L4b2886.  if v4 == v0 then goto L4b2890;
  #L4b288a.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b2890.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b28a4.  v0:= 4I;
  #L4b28a6.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4b28ac.  v0:= 0I;
  #L4b28ae.  v1.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4b28b2.  return @kind void;
}
procedure `void` `error`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b28c4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b28ca.  v0:= temp;
  #L4b28cc.  v0:= v0 ^& 54;
  #L4b28d0.  if v0 == 0 then goto L4b28dc;
  #L4b28d4.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b28da.  return @kind void;
  #L4b28dc.  v0:= 2I;
  #L4b28de.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b28e4.  v0:= v1.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b28e8.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b28ee.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4b26e8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b26ee.  v0:= temp;
  #L4b26f0.  v1:= 4I;
  #L4b26f2.  if v0 != v1 then goto L4b26fa;
  #L4b26f6.  v0:= 1I;
  #L4b26f8.  goto L4b26fc;
  #L4b26fa.  v0:= 0I;
  #L4b26fc.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4b2710.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b2716.  v0:= temp;
  #L4b2718.  v1:= 16I;
  #L4b271c.  if v0 == v1 then goto L4b2724;
  #L4b2720.  v0:= 1I;
  #L4b2722.  goto L4b2726;
  #L4b2724.  v0:= 0I;
  #L4b2726.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4b2788.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b278e.  v0:= temp;
  #L4b2790.  v1:= 0I;
  #L4b2792.  v2:= 16I;
  #L4b2796.  if v0 != v2 then goto L4b27ae;
  #L4b279a.  v0:= v3.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L4b279e.  v3.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4b27a2.  v1:= 32I;
  #L4b27a6.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b27ac.  return v0 @kind object;
  #L4b27ae.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b2760.  v0:= 2I;
  #L4b2762.  v2:= v2 ^& v0 @kind int;
  #L4b2764.  if v2 == 0 then goto L4b2774;
  #L4b2768.  v2:= 8I;
  #L4b276c.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b2772.  return v0;
  #L4b2774.  v2:= 0I;
  #L4b2776.  return v2;
}
procedure `boolean` `tryDispose`(`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.tryDispose:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4b2738.  v0:= 4I;
  #L4b273a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4b2740.  v1:= temp;
  #L4b2742.  if v1 == v0 then goto L4b274a;
  #L4b2746.  v0:= 1I;
  #L4b2748.  goto L4b274c;
  #L4b274a.  v0:= 0I;
  #L4b274c.  return v0;
}
