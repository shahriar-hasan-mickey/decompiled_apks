record `io.reactivex.rxjava3.internal.observers.QueueDrainObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.rxjava3.internal.observers.b` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.internal.util.ObservableQueueDrain` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @AccessFlag PROTECTED_VOLATILE;
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.error` @AccessFlag PROTECTED;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b3770.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/b;.<init>:()V` @kind direct;
  #L4b3776.  v0.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b377a.  v0.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L4b377e.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4b3790.  return @kind void;
}
procedure `boolean` `cancelled`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b36e0.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4b36e4.  return v0;
}
procedure `boolean` `done`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b36f8.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4b36fc.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b3710.  v0:= v1.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b3714.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b371a.  v0:= temp;
  #L4b371c.  if v0 != 0 then goto L4b3724;
  #L4b3720.  v0:= 1I;
  #L4b3722.  goto L4b3726;
  #L4b3724.  v0:= 0I;
  #L4b3726.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b3758.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4b375c.  return v0 @kind object;
}
procedure `void` `fastPathEmit`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.rxjava3.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b37a4.  v0:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b37a8.  v1:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b37ac.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b37b0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b37b6.  v2:= temp;
  #L4b37b8.  if v2 != 0 then goto L4b37e6;
  #L4b37bc.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b37c0.  v3:= 0I;
  #L4b37c2.  v4:= 1I;
  #L4b37c4.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4b37ca.  v2:= temp;
  #L4b37cc.  if v2 == 0 then goto L4b37e6;
  #L4b37d0.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L4b37d6.  v6:= -1I;
  #L4b37d8.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L4b37de.  v6:= temp;
  #L4b37e0.  if v6 != 0 then goto L4b37fa;
  #L4b37e4.  return @kind void;
  #L4b37e6.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b37ec.  call temp:= `enter`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4b37f2.  v6:= temp;
  #L4b37f4.  if v6 != 0 then goto L4b37fa;
  #L4b37f8.  return @kind void;
  #L4b37fa.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4b3800.  return @kind void;
}
procedure `void` `fastPathOrderedEmit`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.rxjava3.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b3814.  v0:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b3818.  v1:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b381c.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b3820.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b3826.  v2:= temp;
  #L4b3828.  if v2 != 0 then goto L4b386a;
  #L4b382c.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b3830.  v3:= 0I;
  #L4b3832.  v4:= 1I;
  #L4b3834.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4b383a.  v2:= temp;
  #L4b383c.  if v2 == 0 then goto L4b386a;
  #L4b3840.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4b3846.  v2:= temp;
  #L4b3848.  if v2 == 0 then goto L4b3862;
  #L4b384c.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L4b3852.  v6:= -1I;
  #L4b3854.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L4b385a.  v6:= temp;
  #L4b385c.  if v6 != 0 then goto L4b387e;
  #L4b3860.  return @kind void;
  #L4b3862.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b3868.  goto L4b387e;
  #L4b386a.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b3870.  call temp:= `enter`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4b3876.  v6:= temp;
  #L4b3878.  if v6 != 0 then goto L4b387e;
  #L4b387c.  return @kind void;
  #L4b387e.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4b3884.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4b3738.  v0:= v1.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b373c.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b3742.  v2:= temp;
  #L4b3744.  return v2;
}
