record `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `java.util.concurrent.Future` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50ed1c.  v0:= 1I;
  #L50ed1e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L50ed24.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L50ed28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50ed2e.  v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L50ed32.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L50ed44.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50eb88.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50eb8c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50eb92.  v3:= temp @kind object;
  #L50eb94.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L50eb98.  if v3 == v2 then goto L50ebca;
  #L50eb9c.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50eba0.  if v3 != v0 then goto L50eba6;
  #L50eba4.  goto L50ebca;
  #L50eba6.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50ebaa.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50ebb0.  v0:= temp;
  #L50ebb2.  if v0 == 0 then goto L50eb88;
  #L50ebb6.  if v3 == 0 then goto L50ebc0;
  #L50ebba.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50ebc0.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L50ebc6.  v3:= 1I;
  #L50ebc8.  return v3;
  #L50ebca.  v3:= 0I;
  #L50ebcc.  return v3;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50ec38.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L50ec3e.  v0:= temp @kind wide;
  #L50ec40.  v2:= 0L;
  #L50ec44.  v4:= lcmp(v0, v2);
  #L50ec48.  if v4 == 0 then goto L50ec58;
  #L50ec4c.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L50ec52.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L50ec58.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isCancelled:()Z` @kind virtual;
  #L50ec5e.  v0:= temp;
  #L50ec60.  if v0 != 0 then goto L50ec7e;
  #L50ec64.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` @kind object;
  #L50ec68.  if v0 != 0 then goto L50ec72;
  #L50ec6c.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L50ec70.  return v0 @kind object;
  #L50ec72.  v1:= new `java.util.concurrent.ExecutionException`;
  #L50ec76.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L50ec7c.  throw v1;
  #L50ec7e.  v0:= new `java.util.concurrent.CancellationException`;
  #L50ec82.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L50ec88.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50ec9c.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L50eca2.  v0:= temp @kind wide;
  #L50eca4.  v2:= 0L;
  #L50eca8.  v4:= lcmp(v0, v2);
  #L50ecac.  if v4 == 0 then goto L50ecd8;
  #L50ecb0.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L50ecb6.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L50ecbc.  v0:= temp;
  #L50ecbe.  if v0 == 0 then goto L50ecc4;
  #L50ecc2.  goto L50ecd8;
  #L50ecc4.  v0:= new `java.util.concurrent.TimeoutException`;
  #L50ecc8.  call temp:= `timeoutMessage`(v6, v8) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L50ecce.  v6:= temp @kind object;
  #L50ecd0.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ecd6.  throw v0;
  #L50ecd8.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isCancelled:()Z` @kind virtual;
  #L50ecde.  v6:= temp;
  #L50ece0.  if v6 != 0 then goto L50ecfe;
  #L50ece4.  v6:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` @kind object;
  #L50ece8.  if v6 != 0 then goto L50ecf2;
  #L50ecec.  v6:= v5.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L50ecf0.  return v6 @kind object;
  #L50ecf2.  v7:= new `java.util.concurrent.ExecutionException`;
  #L50ecf6.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L50ecfc.  throw v7;
  #L50ecfe.  v6:= new `java.util.concurrent.CancellationException`;
  #L50ed02.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L50ed08.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50ebe0.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50ebe4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50ebea.  v0:= temp @kind object;
  #L50ebec.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50ebf0.  if v0 != v1 then goto L50ebf8;
  #L50ebf4.  v0:= 1I;
  #L50ebf6.  goto L50ebfa;
  #L50ebf8.  v0:= 0I;
  #L50ebfa.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50ec0c.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L50ec12.  v0:= temp @kind wide;
  #L50ec14.  v2:= 0L;
  #L50ec18.  v4:= lcmp(v0, v2);
  #L50ec1c.  if v4 != 0 then goto L50ec24;
  #L50ec20.  v0:= 1I;
  #L50ec22.  goto L50ec26;
  #L50ec24.  v0:= 0I;
  #L50ec26.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50ed58.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L50ed5c.  if v0 != 0 then goto L50ed76;
  #L50ed60.  v0:= new `java.util.NoSuchElementException`;
  #L50ed64.  v1:= "The source is empty" @kind object;
  #L50ed68.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ed6e.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50ed74.  return @kind void;
  #L50ed76.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50ed7a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50ed80.  v0:= temp @kind object;
  #L50ed82.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L50ed86.  if v0 == v2 then goto L50edaa;
  #L50ed8a.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50ed8e.  if v0 != v1 then goto L50ed94;
  #L50ed92.  goto L50edaa;
  #L50ed94.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50ed98.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50ed9e.  v0:= temp;
  #L50eda0.  if v0 == 0 then goto L50edaa;
  #L50eda4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L50edaa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50edbc.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` @kind object;
  #L50edc0.  if v0 != 0 then goto L50edfc;
  #L50edc4.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50edc8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50edce.  v0:= temp @kind object;
  #L50edd0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L50edd4.  if v0 == v2 then goto L50edfc;
  #L50edd8.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50eddc.  if v0 == v1 then goto L50edfc;
  #L50ede0.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50ede4.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50edea.  v0:= temp;
  #L50edec.  if v0 == 0 then goto L50edfc;
  #L50edf0.  v2.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L50edf4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L50edfa.  return @kind void;
  #L50edfc.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50ee02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ee14.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L50ee18.  if v0 == 0 then goto L50ee48;
  #L50ee1c.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50ee20.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50ee26.  v2:= temp @kind object;
  #L50ee28.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L50ee2c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50ee32.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L50ee36.  v0:= "More than one element received" @kind object;
  #L50ee3a.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ee40.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50ee46.  return @kind void;
  #L50ee48.  v1.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.a` @type ^`java.lang.Object` := v2 @kind object;
  #L50ee4c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50ee60.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50ee64.  v1:= 9223372036854775807L;
  #L50ee6e.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L50ee74.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.FutureSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/FutureSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L50ee88.  return @kind void;
}
