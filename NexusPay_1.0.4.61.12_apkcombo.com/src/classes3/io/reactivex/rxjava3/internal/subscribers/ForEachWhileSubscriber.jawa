record `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v0 @kind this, `io.reactivex.rxjava3.functions.Predicate` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50ea1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50ea22.  v0.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v1 @kind object;
  #L50ea26.  v0.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L50ea2a.  v0.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` := v3 @kind object;
  #L50ea2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L50ea40.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L50ea46.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50e9f4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50e9fa.  v0:= temp @kind object;
  #L50e9fc.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50ea00.  if v0 != v1 then goto L50ea08;
  #L50ea04.  v0:= 1I;
  #L50ea06.  goto L50ea0a;
  #L50ea08.  v0:= 0I;
  #L50ea0a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ea58.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L50ea5c.  if v0 == 0 then goto L50ea62;
  #L50ea60.  return @kind void;
  #L50ea62.  v0:= 1I;
  #L50ea64.  v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L50ea68.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L50ea6c.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L50ea72.  goto L50ea82;
  #L50ea74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50ea76.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50ea7c.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50ea82.  return @kind void;
  catch `java.lang.Throwable` @[L50ea68..L50ea72] goto L50ea74;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50eaa0.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L50eaa4.  if v0 == 0 then goto L50eab0;
  #L50eaa8.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50eaae.  return @kind void;
  #L50eab0.  v0:= 1I;
  #L50eab2.  v5.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L50eab6.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50eaba.  call `accept`(v1, v6) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50eac0.  goto L50eaea;
  #L50eac2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50eac4.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50eaca.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L50eace.  v3:= 2I;
  #L50ead0.  v3:= new `java.lang.Throwable`[v3];
  #L50ead4.  v4:= 0I;
  #L50ead6.  v3[v4]:= v6 @kind object;
  #L50eada.  v3[v0]:= v1 @kind object;
  #L50eade.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L50eae4.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50eaea.  return @kind void;
  catch `java.lang.Throwable` @[L50eab6..L50eac0] goto L50eac2;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50eb08.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L50eb0c.  if v0 == 0 then goto L50eb12;
  #L50eb10.  return @kind void;
  #L50eb12.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L50eb16.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L50eb1c.  v2:= temp;
  #L50eb1e.  if v2 != 0 then goto L50eb2e;
  #L50eb22.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L50eb28.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @kind virtual;
  #L50eb2e.  return @kind void;
  #L50eb30.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50eb32.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50eb38.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L50eb3e.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50eb44.  return @kind void;
  catch `java.lang.Throwable` @[L50eb12..L50eb1e] goto L50eb30;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/ForEachWhileSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50eb64.  v0:= 9223372036854775807L;
  #L50eb6e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L50eb74.  return @kind void;
}
