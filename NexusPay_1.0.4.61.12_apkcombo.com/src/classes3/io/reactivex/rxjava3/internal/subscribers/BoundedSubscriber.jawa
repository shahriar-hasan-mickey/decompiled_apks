record `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.e` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v0 @kind this, `io.reactivex.rxjava3.functions.Consumer` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50e700.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50e706.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v1 @kind object;
  #L50e70a.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L50e70e.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` := v3 @kind object;
  #L50e712.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` := v4 @kind object;
  #L50e716.  v1:= v5 ^> 2;
  #L50e71a.  v5:= v5 - v1 @kind int;
  #L50e71c.  v0.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @type ^`int` := v5;
  #L50e720.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L50e734.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L50e73a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L50e74c.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.cancel:()V` @kind virtual;
  #L50e752.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50e6b4.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50e6b8.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50e6bc.  if v0 == v1 then goto L50e6c4;
  #L50e6c0.  v0:= 1I;
  #L50e6c2.  goto L50e6c6;
  #L50e6c4.  v0:= 0I;
  #L50e6c6.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50e6d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50e6de.  v0:= temp @kind object;
  #L50e6e0.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50e6e4.  if v0 != v1 then goto L50e6ec;
  #L50e6e8.  v0:= 1I;
  #L50e6ea.  goto L50e6ee;
  #L50e6ec.  v0:= 0I;
  #L50e6ee.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50e764.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50e76a.  v0:= temp @kind object;
  #L50e76c.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50e770.  if v0 == v1 then goto L50e794;
  #L50e774.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50e77a.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L50e77e.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L50e784.  goto L50e794;
  #L50e786.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50e788.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50e78e.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50e794.  return @kind void;
  catch `java.lang.Throwable` @[L50e77a..L50e784] goto L50e786;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50e7b4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50e7ba.  v0:= temp @kind object;
  #L50e7bc.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50e7c0.  if v0 == v1 then goto L50e802;
  #L50e7c4.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50e7ca.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50e7ce.  call `accept`(v0, v5) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50e7d4.  goto L50e808;
  #L50e7d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50e7d8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50e7de.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L50e7e2.  v2:= 2I;
  #L50e7e4.  v2:= new `java.lang.Throwable`[v2];
  #L50e7e8.  v3:= 0I;
  #L50e7ea.  v2[v3]:= v5 @kind object;
  #L50e7ee.  v5:= 1I;
  #L50e7f0.  v2[v5]:= v0 @kind object;
  #L50e7f4.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L50e7fa.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50e800.  goto L50e808;
  #L50e802.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50e808.  return @kind void;
  catch `java.lang.Throwable` @[L50e7ca..L50e7d4] goto L50e7d6;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50e828.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @kind virtual;
  #L50e82e.  v0:= temp;
  #L50e830.  if v0 != 0 then goto L50e894;
  #L50e834.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50e838.  call `accept`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50e83e.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.e` @type ^`int`;
  #L50e842.  v3:= v3 + 1;
  #L50e846.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @type ^`int`;
  #L50e84a.  if v3 != v0 then goto L50e86e;
  #L50e84e.  v3:= 0I;
  #L50e850.  v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.e` @type ^`int` := v3;
  #L50e854.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50e85a.  v3:= temp @kind object;
  #L50e85c.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L50e860.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.f` @type ^`int`;
  #L50e864.  v0:= (`long`) v0 @kind i2l;
  #L50e866.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50e86c.  goto L50e894;
  #L50e86e.  v2.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.e` @type ^`int` := v3;
  #L50e872.  goto L50e894;
  #L50e874.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50e876.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50e87c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50e882.  v0:= temp @kind object;
  #L50e884.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L50e888.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50e88e.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50e894.  return @kind void;
  catch `java.lang.Throwable` @[L50e834..L50e872] goto L50e874;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e8b4.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L50e8ba.  v0:= temp;
  #L50e8bc.  if v0 == 0 then goto L50e8e0;
  #L50e8c0.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50e8c4.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50e8ca.  goto L50e8e0;
  #L50e8cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50e8ce.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50e8d4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50e8da.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50e8e0.  return @kind void;
  catch `java.lang.Throwable` @[L50e8c0..L50e8ca] goto L50e8cc;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e900.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50e906.  v0:= temp @kind object;
  #L50e908.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L50e90c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50e912.  return @kind void;
}
