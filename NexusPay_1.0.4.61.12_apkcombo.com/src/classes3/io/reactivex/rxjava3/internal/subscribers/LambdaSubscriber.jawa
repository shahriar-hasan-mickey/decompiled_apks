record `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v0 @kind this, `io.reactivex.rxjava3.functions.Consumer` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50f0b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50f0ba.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v1 @kind object;
  #L50f0be.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L50f0c2.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` := v3 @kind object;
  #L50f0c6.  v0.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` := v4 @kind object;
  #L50f0ca.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L50f0dc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L50f0e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L50f0f4.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.cancel:()V` @kind virtual;
  #L50f0fa.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50f068.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50f06c.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50f070.  if v0 == v1 then goto L50f078;
  #L50f074.  v0:= 1I;
  #L50f076.  goto L50f07a;
  #L50f078.  v0:= 0I;
  #L50f07a.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50f08c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50f092.  v0:= temp @kind object;
  #L50f094.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50f098.  if v0 != v1 then goto L50f0a0;
  #L50f09c.  v0:= 1I;
  #L50f09e.  goto L50f0a2;
  #L50f0a0.  v0:= 0I;
  #L50f0a2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50f10c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50f112.  v0:= temp @kind object;
  #L50f114.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50f118.  if v0 == v1 then goto L50f13c;
  #L50f11c.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50f122.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L50f126.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L50f12c.  goto L50f13c;
  #L50f12e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50f130.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50f136.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50f13c.  return @kind void;
  catch `java.lang.Throwable` @[L50f122..L50f12c] goto L50f12e;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50f15c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50f162.  v0:= temp @kind object;
  #L50f164.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L50f168.  if v0 == v1 then goto L50f1aa;
  #L50f16c.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L50f172.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50f176.  call `accept`(v0, v5) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50f17c.  goto L50f1b0;
  #L50f17e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50f180.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50f186.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L50f18a.  v2:= 2I;
  #L50f18c.  v2:= new `java.lang.Throwable`[v2];
  #L50f190.  v3:= 0I;
  #L50f192.  v2[v3]:= v5 @kind object;
  #L50f196.  v5:= 1I;
  #L50f198.  v2[v5]:= v0 @kind object;
  #L50f19c.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L50f1a2.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50f1a8.  goto L50f1b0;
  #L50f1aa.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50f1b0.  return @kind void;
  catch `java.lang.Throwable` @[L50f172..L50f17c] goto L50f17e;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50f1d0.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @kind virtual;
  #L50f1d6.  v0:= temp;
  #L50f1d8.  if v0 != 0 then goto L50f208;
  #L50f1dc.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50f1e0.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50f1e6.  goto L50f208;
  #L50f1e8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50f1ea.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50f1f0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50f1f6.  v0:= temp @kind object;
  #L50f1f8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L50f1fc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50f202.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50f208.  return @kind void;
  catch `java.lang.Throwable` @[L50f1dc..L50f1e6] goto L50f1e8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50f228.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L50f22e.  v0:= temp;
  #L50f230.  if v0 == 0 then goto L50f254;
  #L50f234.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L50f238.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50f23e.  goto L50f254;
  #L50f240.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50f242.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50f248.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50f24e.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50f254.  return @kind void;
  catch `java.lang.Throwable` @[L50f234..L50f23e] goto L50f240;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50f274.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50f27a.  v0:= temp @kind object;
  #L50f27c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L50f280.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50f286.  return @kind void;
}
