record `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.produced` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @AccessFlag PROTECTED;
  `java.lang.Object` `io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50f60c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L50f612.  v0.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L50f616.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50f628.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50f62c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50f632.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.complete:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L50f644.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` @kind wide;
  #L50f648.  v2:= 0L;
  #L50f64c.  v4:= lcmp(v0, v2);
  #L50f650.  if v4 == 0 then goto L50f65a;
  #L50f654.  call temp:= `produced`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L50f65a.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50f660.  v0:= temp @kind wide;
  #L50f662.  v4:= -9223372036854775808L;
  #L50f666.  v6:= v0 ^& v4 @kind long;
  #L50f66a.  v8:= lcmp(v6, v2);
  #L50f66e.  if v8 == 0 then goto L50f67a;
  #L50f672.  call `onDrop`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @kind virtual;
  #L50f678.  return @kind void;
  #L50f67a.  v6:= 9223372036854775807L;
  #L50f684.  v0:= v0 ^& v6 @kind long;
  #L50f686.  v6:= lcmp(v0, v2);
  #L50f68a.  if v6 == 0 then goto L50f6b4;
  #L50f68e.  v0:= -4.9E-324D;
  #L50f698.  call `lazySet`(v9, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L50f69e.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50f6a2.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L50f6a8.  v10:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50f6ac.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L50f6b2.  return @kind void;
  #L50f6b4.  v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v10 @kind object;
  #L50f6b8.  call temp:= `compareAndSet`(v9, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L50f6be.  v0:= temp;
  #L50f6c0.  if v0 == 0 then goto L50f6c6;
  #L50f6c4.  return @kind void;
  #L50f6c6.  v0:= 0I;
  #L50f6c8.  v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L50f6cc.  goto L50f65a;
}
procedure `void` `onDrop`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L50f6e0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50f6f4.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50f6f8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L50f6fe.  v0:= temp;
  #L50f700.  if v0 == 0 then goto L50f712;
  #L50f704.  v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L50f708.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50f70c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L50f712.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/SinglePostCompleteSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L50f724.  call temp:= `validate`(v10) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L50f72a.  v0:= temp;
  #L50f72c.  if v0 == 0 then goto L50f79a;
  #L50f730.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50f736.  v0:= temp @kind wide;
  #L50f738.  v2:= -9223372036854775808L;
  #L50f73c.  v4:= v0 ^& v2 @kind long;
  #L50f740.  v6:= 0L;
  #L50f744.  v8:= lcmp(v4, v6);
  #L50f748.  if v8 == 0 then goto L50f77c;
  #L50f74c.  v10:= -4.9E-324D;
  #L50f756.  call temp:= `compareAndSet`(v9, v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L50f75c.  v10:= temp;
  #L50f75e.  if v10 == 0 then goto L50f79a;
  #L50f762.  v10:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50f766.  v11:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L50f76a.  call `onNext`(v10, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L50f770.  v10:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50f774.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L50f77a.  goto L50f79a;
  #L50f77c.  call temp:= `addCap`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L50f782.  v2:= temp @kind wide;
  #L50f784.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L50f78a.  v0:= temp;
  #L50f78c.  if v0 == 0 then goto L50f730;
  #L50f790.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50f794.  call `request`(v0, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50f79a.  return @kind void;
}
