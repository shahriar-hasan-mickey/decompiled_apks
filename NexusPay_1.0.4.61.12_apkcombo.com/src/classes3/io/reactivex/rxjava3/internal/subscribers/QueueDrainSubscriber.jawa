record `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.rxjava3.internal.subscribers.d` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.internal.util.QueueDrain` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @AccessFlag PROTECTED_VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.error` @AccessFlag PROTECTED;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50f450.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/d;.<init>:()V` @kind direct;
  #L50f456.  v0.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L50f45a.  v0.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L50f45e.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L50f330.  v1:= 0I;
  #L50f332.  return v1;
}
procedure `boolean` `cancelled`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50f344.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L50f348.  return v0;
}
procedure `boolean` `done`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50f35c.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L50f360.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50f374.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50f378.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L50f37e.  v0:= temp;
  #L50f380.  if v0 != 0 then goto L50f388;
  #L50f384.  v0:= 1I;
  #L50f386.  goto L50f38a;
  #L50f388.  v0:= 0I;
  #L50f38a.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50f3f8.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L50f3fc.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L50f39c.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50f3a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50f3a6.  v0:= temp;
  #L50f3a8.  v1:= 1I;
  #L50f3aa.  v2:= 0I;
  #L50f3ac.  if v0 != 0 then goto L50f3c2;
  #L50f3b0.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50f3b4.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L50f3ba.  v0:= temp;
  #L50f3bc.  if v0 == 0 then goto L50f3c2;
  #L50f3c0.  goto L50f3c4;
  #L50f3c2.  v1:= 0I;
  #L50f3c4.  return v1;
}
procedure `void` `fastPathEmitMax`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.rxjava3.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50f470.  v0:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50f474.  v1:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L50f478.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L50f47e.  v2:= temp;
  #L50f480.  if v2 == 0 then goto L50f4f0;
  #L50f484.  v2:= v7.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50f488.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50f48e.  v2:= temp @kind wide;
  #L50f490.  v4:= 0L;
  #L50f494.  v6:= lcmp(v2, v4);
  #L50f498.  if v6 == 0 then goto L50f4d4;
  #L50f49c.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L50f4a2.  v8:= temp;
  #L50f4a4.  if v8 == 0 then goto L50f4c4;
  #L50f4a8.  v4:= 9223372036854775807L;
  #L50f4b2.  v8:= lcmp(v2, v4);
  #L50f4b6.  if v8 == 0 then goto L50f4c4;
  #L50f4ba.  v2:= 1L;
  #L50f4be.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L50f4c4.  v8:= -1I;
  #L50f4c6.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L50f4cc.  v8:= temp;
  #L50f4ce.  if v8 != 0 then goto L50f504;
  #L50f4d2.  return @kind void;
  #L50f4d4.  call `dispose`(v10) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L50f4da.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L50f4de.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L50f4e2.  call `<init>`(v8, v9) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50f4e8.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L50f4ee.  return @kind void;
  #L50f4f0.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L50f4f6.  call temp:= `enter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L50f4fc.  v8:= temp;
  #L50f4fe.  if v8 != 0 then goto L50f504;
  #L50f502.  return @kind void;
  #L50f504.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L50f50a.  return @kind void;
}
procedure `void` `fastPathOrderedEmitMax`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.rxjava3.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50f51c.  v0:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50f520.  v1:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L50f524.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L50f52a.  v2:= temp;
  #L50f52c.  if v2 == 0 then goto L50f5b6;
  #L50f530.  v2:= v7.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50f534.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50f53a.  v2:= temp @kind wide;
  #L50f53c.  v4:= 0L;
  #L50f540.  v6:= lcmp(v2, v4);
  #L50f544.  if v6 == 0 then goto L50f594;
  #L50f548.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L50f54e.  v4:= temp;
  #L50f550.  if v4 == 0 then goto L50f58c;
  #L50f554.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L50f55a.  v8:= temp;
  #L50f55c.  if v8 == 0 then goto L50f57c;
  #L50f560.  v4:= 9223372036854775807L;
  #L50f56a.  v8:= lcmp(v2, v4);
  #L50f56e.  if v8 == 0 then goto L50f57c;
  #L50f572.  v2:= 1L;
  #L50f576.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L50f57c.  v8:= -1I;
  #L50f57e.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L50f584.  v8:= temp;
  #L50f586.  if v8 != 0 then goto L50f5ca;
  #L50f58a.  return @kind void;
  #L50f58c.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L50f592.  goto L50f5ca;
  #L50f594.  v8:= 1I;
  #L50f596.  v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v8 @kind boolean;
  #L50f59a.  call `dispose`(v10) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L50f5a0.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L50f5a4.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L50f5a8.  call `<init>`(v8, v9) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50f5ae.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L50f5b4.  return @kind void;
  #L50f5b6.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L50f5bc.  call temp:= `enter`(v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L50f5c2.  v8:= temp;
  #L50f5c4.  if v8 != 0 then goto L50f5ca;
  #L50f5c8.  return @kind void;
  #L50f5ca.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L50f5d0.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50f3d8.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50f3dc.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L50f3e2.  v2:= temp;
  #L50f3e4.  return v2;
}
procedure `long` `produced`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50f410.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50f414.  v2:= -v2 @kind long;
  #L50f416.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L50f41c.  v2:= temp @kind wide;
  #L50f41e.  return v2 @kind wide;
}
procedure `long` `requested`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50f430.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50f434.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50f43a.  v0:= temp @kind wide;
  #L50f43c.  return v0 @kind wide;
}
procedure `void` `requested`(`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50f5e4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L50f5ea.  v0:= temp;
  #L50f5ec.  if v0 == 0 then goto L50f5fa;
  #L50f5f0.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50f5f4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L50f5fa.  return @kind void;
}
