record `io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind interface {
  `int` `io.reactivex.rxjava3.internal.queue.SpscArrayQueue.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.queue.SpscArrayQueue.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.queue.SpscArrayQueue.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.queue.SpscArrayQueue.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.queue.SpscArrayQueue.e` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.queue.SpscArrayQueue.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.queue.SpscArrayQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L50a75c.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L50a760.  v1:= 4096I;
  #L50a764.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L50a76a.  v0:= temp @kind object;
  #L50a76c.  `@@io.reactivex.rxjava3.internal.queue.SpscArrayQueue.f` @type ^`java.lang.Integer` := v0 @kind object;
  #L50a770.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50a784.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/rxjava3/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L50a78a.  v0:= temp;
  #L50a78c.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L50a792.  call temp:= `length`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L50a798.  v0:= temp;
  #L50a79a.  v0:= v0 + -1;
  #L50a79e.  v1.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.a` @type ^`int` := v0;
  #L50a7a2.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L50a7a6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L50a7ac.  v1.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L50a7b0.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L50a7b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L50a7ba.  v1.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L50a7be.  v2:= v2 / 4;
  #L50a7c2.  v0:= `@@io.reactivex.rxjava3.internal.queue.SpscArrayQueue.f` @type ^`java.lang.Integer` @kind object;
  #L50a7c6.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L50a7cc.  v0:= temp;
  #L50a7ce.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L50a7d4.  v2:= temp;
  #L50a7d6.  v1.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.e` @type ^`int` := v2;
  #L50a7da.  return @kind void;
}
procedure `int` `a`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.a:(J)I` @AccessFlag  {
    temp;

  #L50a6c4.  v2:= (`int`) v1 @kind l2i;
  #L50a6c6.  v1:= v0.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.a` @type ^`int`;
  #L50a6ca.  v1:= v1 ^& v2 @kind int;
  #L50a6cc.  return v1;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50a7ec.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L50a7f2.  v0:= temp @kind object;
  #L50a7f4.  if v0 != 0 then goto L50a7ec;
  #L50a7f8.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L50a7fe.  v0:= temp;
  #L50a800.  if v0 != 0 then goto L50a806;
  #L50a804.  goto L50a7ec;
  #L50a806.  return @kind void;
}
procedure `int` `e`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.e:(JI)I` @AccessFlag  {
    temp;

  #L50a6e0.  v2:= (`int`) v1 @kind l2i;
  #L50a6e2.  v1:= v2 ^& v3 @kind int;
  #L50a6e6.  return v1;
}
procedure `java.lang.Object` `f`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L50a6f8.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L50a6fe.  v1:= temp @kind object;
  #L50a700.  return v1 @kind object;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.g:(J)V` @AccessFlag  {
    temp;
    v0;

  #L50a818.  v0:= v1.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50a81c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L50a822.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;

  #L50a834.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L50a83a.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.i:(J)V` @AccessFlag  {
    temp;
    v0;

  #L50a84c.  v0:= v1.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50a850.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L50a856.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50a5cc.  v0:= v5.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50a5d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50a5d6.  v0:= temp @kind wide;
  #L50a5d8.  v2:= v5.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50a5dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50a5e2.  v2:= temp @kind wide;
  #L50a5e4.  v4:= lcmp(v0, v2);
  #L50a5e8.  if v4 != 0 then goto L50a5f0;
  #L50a5ec.  v0:= 1I;
  #L50a5ee.  goto L50a5f2;
  #L50a5f0.  v0:= 0I;
  #L50a5f2.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50a604.  if v8 == 0 then goto L50a674;
  #L50a608.  v0:= v7.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.a` @type ^`int`;
  #L50a60c.  v1:= v7.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50a610.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50a616.  v1:= temp @kind wide;
  #L50a618.  call temp:= `e`(v7, v1, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.e:(JI)I` @kind virtual;
  #L50a61e.  v3:= temp;
  #L50a620.  v4:= v7.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.c` @type ^`long` @kind wide;
  #L50a624.  v6:= lcmp(v1, v4);
  #L50a628.  if v6 < 0 then goto L50a65e;
  #L50a62c.  v4:= v7.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.e` @type ^`int`;
  #L50a630.  v4:= (`long`) v4 @kind i2l;
  #L50a632.  v4:= v4 + v1 @kind long;
  #L50a634.  call temp:= `e`(v7, v4, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.e:(JI)I` @kind virtual;
  #L50a63a.  v0:= temp;
  #L50a63c.  call temp:= `f`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L50a642.  v0:= temp @kind object;
  #L50a644.  if v0 != 0 then goto L50a64e;
  #L50a648.  v7.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.c` @type ^`long` := v4 @kind wide;
  #L50a64c.  goto L50a65e;
  #L50a64e.  call temp:= `f`(v7, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L50a654.  v0:= temp @kind object;
  #L50a656.  if v0 == 0 then goto L50a65e;
  #L50a65a.  v8:= 0I;
  #L50a65c.  return v8;
  #L50a65e.  call `h`(v7, v3, v8) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @kind virtual;
  #L50a664.  v3:= 1L;
  #L50a668.  v1:= v1 + v3 @kind long;
  #L50a66a.  call `i`(v7, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.i:(J)V` @kind virtual;
  #L50a670.  v8:= 1I;
  #L50a672.  return v8;
  #L50a674.  v8:= new `java.lang.NullPointerException`;
  #L50a678.  v0:= "Null is not a valid element" @kind object;
  #L50a67c.  call `<init>`(v8, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a682.  throw v8;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L50a694.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L50a69a.  v1:= temp;
  #L50a69c.  if v1 == 0 then goto L50a6b0;
  #L50a6a0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L50a6a6.  v1:= temp;
  #L50a6a8.  if v1 == 0 then goto L50a6b0;
  #L50a6ac.  v1:= 1I;
  #L50a6ae.  goto L50a6b2;
  #L50a6b0.  v1:= 0I;
  #L50a6b2.  return v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50a714.  v0:= v7.`io.reactivex.rxjava3.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50a718.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L50a71e.  v0:= temp @kind wide;
  #L50a720.  call temp:= `a`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.a:(J)I` @kind virtual;
  #L50a726.  v2:= temp;
  #L50a728.  call temp:= `f`(v7, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L50a72e.  v3:= temp @kind object;
  #L50a730.  v4:= 0I;
  #L50a732.  if v3 != 0 then goto L50a738;
  #L50a736.  return v4 @kind object;
  #L50a738.  v5:= 1L;
  #L50a73c.  v0:= v0 + v5 @kind long;
  #L50a73e.  call `g`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.g:(J)V` @kind virtual;
  #L50a744.  call `h`(v7, v2, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @kind virtual;
  #L50a74a.  return v3 @kind object;
}
