record `io.reactivex.rxjava3.internal.util.HalfSerializer` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.HalfSerializer` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L511c10.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L511c16.  v0:= new `java.lang.IllegalStateException`;
  #L511c1a.  v1:= "No instances!" @kind object;
  #L511c1e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L511c24.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.core.Observer` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L511c38.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L511c3e.  v1:= temp;
  #L511c40.  if v1 != 0 then goto L511c4a;
  #L511c44.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L511c4a.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.Subscriber` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L511c5c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L511c62.  v1:= temp;
  #L511c64.  if v1 != 0 then goto L511c6e;
  #L511c68.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L511c6e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.core.Observer` v0 @kind object, `java.lang.Throwable` v1 @kind object, `java.util.concurrent.atomic.AtomicInteger` v2 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L511c80.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L511c86.  v1:= temp;
  #L511c88.  if v1 == 0 then goto L511c9e;
  #L511c8c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L511c92.  v1:= temp;
  #L511c94.  if v1 != 0 then goto L511c9e;
  #L511c98.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L511c9e.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.Subscriber` v0 @kind object, `java.lang.Throwable` v1 @kind object, `java.util.concurrent.atomic.AtomicInteger` v2 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L511cb0.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L511cb6.  v1:= temp;
  #L511cb8.  if v1 == 0 then goto L511cce;
  #L511cbc.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L511cc2.  v1:= temp;
  #L511cc4.  if v1 != 0 then goto L511cce;
  #L511cc8.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L511cce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.core.Observer` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L511ce0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L511ce6.  v0:= temp;
  #L511ce8.  if v0 != 0 then goto L511d14;
  #L511cec.  v0:= 0I;
  #L511cee.  v1:= 1I;
  #L511cf0.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L511cf6.  v0:= temp;
  #L511cf8.  if v0 == 0 then goto L511d14;
  #L511cfc.  call `onNext`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L511d02.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L511d08.  v3:= temp;
  #L511d0a.  if v3 == 0 then goto L511d14;
  #L511d0e.  call `tryTerminateConsumer`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L511d14.  return @kind void;
}
procedure `boolean` `onNext`(`org.reactivestreams.Subscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `java.util.concurrent.atomic.AtomicInteger` v5 @kind object, `io.reactivex.rxjava3.internal.util.AtomicThrowable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L511bc8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L511bce.  v0:= temp;
  #L511bd0.  v1:= 0I;
  #L511bd2.  if v0 != 0 then goto L511bfe;
  #L511bd6.  v0:= 1I;
  #L511bd8.  call temp:= `compareAndSet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L511bde.  v2:= temp;
  #L511be0.  if v2 == 0 then goto L511bfe;
  #L511be4.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L511bea.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L511bf0.  v4:= temp;
  #L511bf2.  if v4 != 0 then goto L511bf8;
  #L511bf6.  return v0;
  #L511bf8.  call `tryTerminateConsumer`(v6, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L511bfe.  return v1;
}
