record `io.reactivex.rxjava3.internal.util.QueueDrain` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `boolean` `accept`(`org.reactivestreams.Subscriber` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `cancelled`() @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.cancelled:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `done`() @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.done:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `enter`() @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.enter:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Throwable` `error`() @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `leave`(`int` v0 ) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.leave:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `produced`(`long` v0 ) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.produced:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `requested`() @signature `Lio/reactivex/rxjava3/internal/util/QueueDrain;.requested:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
