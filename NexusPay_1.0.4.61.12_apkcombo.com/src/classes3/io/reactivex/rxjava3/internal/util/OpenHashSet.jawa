record `io.reactivex.rxjava3.internal.util.OpenHashSet` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `io.reactivex.rxjava3.internal.util.OpenHashSet.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.util.OpenHashSet.b` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.util.OpenHashSet.c` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.util.OpenHashSet.d` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.util.OpenHashSet.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5127e8.  v0:= 16I;
  #L5127ec.  v1:= 0.75F;
  #L5127f0.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L5127f6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L512808.  v0:= 0.75F;
  #L51280c.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L512812.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L512824.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L51282a.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.a` @type ^`float` := v3;
  #L51282e.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/rxjava3/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L512834.  v2:= temp;
  #L512836.  v0:= v2 + -1;
  #L51283a.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int` := v0;
  #L51283e.  v0:= (`float`) v2 @kind i2f;
  #L512840.  v3:= v3 * v0 @kind float;
  #L512844.  v3:= (`int`) v3 @kind f2i;
  #L512846.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.d` @type ^`int` := v3;
  #L51284a.  v2:= new `java.lang.Object`[v2];
  #L51284e.  v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L512852.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L512794.  v0:= -1640531527I;
  #L51279a.  v1:= v1 * v0 @kind int;
  #L51279e.  v0:= v1 ^>> 16;
  #L5127a2.  v1:= v1 ^~ v0 @kind int;
  #L5127a4.  return v1;
}
procedure `boolean` `add`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L512638.  v0:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L51263c.  v1:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int`;
  #L512640.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L512646.  v2:= temp;
  #L512648.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L51264e.  v2:= temp;
  #L512650.  v2:= v2 ^& v1 @kind int;
  #L512652.  v3:= v0[v2] @kind object;
  #L512656.  v4:= 1I;
  #L512658.  if v3 == 0 then goto L512688;
  #L51265c.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L512662.  v3:= temp;
  #L512664.  v5:= 0I;
  #L512666.  if v3 == 0 then goto L51266c;
  #L51266a.  return v5;
  #L51266c.  v2:= v2 + v4 @kind int;
  #L51266e.  v2:= v2 ^& v1 @kind int;
  #L512670.  v3:= v0[v2] @kind object;
  #L512674.  if v3 != 0 then goto L51267a;
  #L512678.  goto L512688;
  #L51267a.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L512680.  v3:= temp;
  #L512682.  if v3 == 0 then goto L51266c;
  #L512686.  return v5;
  #L512688.  v0[v2]:= v7 @kind object;
  #L51268c.  v7:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L512690.  v7:= v7 + v4 @kind int;
  #L512692.  v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int` := v7;
  #L512696.  v0:= v6.`io.reactivex.rxjava3.internal.util.OpenHashSet.d` @type ^`int`;
  #L51269a.  if v7 < v0 then goto L5126a4;
  #L51269e.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.b:()V` @kind virtual;
  #L5126a4.  return v4;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L512864.  v0:= v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L512868.  v1:= length @variable v0;
  #L51286a.  v2:= v1 ^< 1;
  #L51286e.  v3:= v2 + -1;
  #L512872.  v4:= new `java.lang.Object`[v2];
  #L512876.  v5:= v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L51287a.  v6:= v5 + -1;
  #L51287e.  if v5 == 0 then goto L5128c8;
  #L512882.  v1:= v1 + -1;
  #L512886.  v5:= v0[v1] @kind object;
  #L51288a.  if v5 != 0 then goto L512890;
  #L51288e.  goto L512882;
  #L512890.  v5:= v0[v1] @kind object;
  #L512894.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L51289a.  v5:= temp;
  #L51289c.  call temp:= `a`(v5) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L5128a2.  v5:= temp;
  #L5128a4.  v5:= v5 ^& v3 @kind int;
  #L5128a6.  v7:= v4[v5] @kind object;
  #L5128aa.  if v7 == 0 then goto L5128bc;
  #L5128ae.  v5:= v5 + 1;
  #L5128b2.  v5:= v5 ^& v3 @kind int;
  #L5128b4.  v7:= v4[v5] @kind object;
  #L5128b8.  if v7 != 0 then goto L5128ae;
  #L5128bc.  v7:= v0[v1] @kind object;
  #L5128c0.  v4[v5]:= v7 @kind object;
  #L5128c4.  v5:= v6;
  #L5128c6.  goto L51287a;
  #L5128c8.  v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int` := v3;
  #L5128cc.  v0:= (`float`) v2 @kind i2f;
  #L5128ce.  v1:= v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.a` @type ^`float`;
  #L5128d2.  v0:= v0 * v1 @kind float;
  #L5128d6.  v0:= (`int`) v0 @kind f2i;
  #L5128d8.  v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.d` @type ^`int` := v0;
  #L5128dc.  v8.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L5128e0.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51272c.  v0:= v4.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L512730.  v1:= 1I;
  #L512732.  v0:= v0 - v1 @kind int;
  #L512734.  v4.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int` := v0;
  #L512738.  v0:= v5 + 1;
  #L51273c.  v0:= v0 ^& v7 @kind int;
  #L51273e.  v2:= v6[v0] @kind object;
  #L512742.  if v2 != 0 then goto L51274e;
  #L512746.  v7:= 0I;
  #L512748.  v6[v5]:= v7 @kind object;
  #L51274c.  return v1;
  #L51274e.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L512754.  v3:= temp;
  #L512756.  call temp:= `a`(v3) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L51275c.  v3:= temp;
  #L51275e.  v3:= v3 ^& v7 @kind int;
  #L512760.  if v5 > v0 then goto L51276e;
  #L512764.  if v5 >= v3 then goto L512776;
  #L512768.  if v3 <= v0 then goto L51277e;
  #L51276c.  goto L512776;
  #L51276e.  if v5 < v3 then goto L51277e;
  #L512772.  if v3 <= v0 then goto L51277e;
  #L512776.  v6[v5]:= v2 @kind object;
  #L51277a.  v5:= v0;
  #L51277c.  goto L512738;
  #L51277e.  v0:= v0 + 1;
  #L512782.  goto L51273c;
}
procedure `java.lang.Object`[] `keys`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.keys:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5127d0.  v0:= v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L5127d4.  return v0 @kind object;
}
procedure `boolean` `remove`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5126b8.  v0:= v5.`io.reactivex.rxjava3.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L5126bc.  v1:= v5.`io.reactivex.rxjava3.internal.util.OpenHashSet.b` @type ^`int`;
  #L5126c0.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L5126c6.  v2:= temp;
  #L5126c8.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L5126ce.  v2:= temp;
  #L5126d0.  v2:= v2 ^& v1 @kind int;
  #L5126d2.  v3:= v0[v2] @kind object;
  #L5126d6.  v4:= 0I;
  #L5126d8.  if v3 != 0 then goto L5126de;
  #L5126dc.  return v4;
  #L5126de.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L5126e4.  v3:= temp;
  #L5126e6.  if v3 == 0 then goto L5126f4;
  #L5126ea.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L5126f0.  v6:= temp;
  #L5126f2.  return v6;
  #L5126f4.  v2:= v2 + 1;
  #L5126f8.  v2:= v2 ^& v1 @kind int;
  #L5126fa.  v3:= v0[v2] @kind object;
  #L5126fe.  if v3 != 0 then goto L512704;
  #L512702.  return v4;
  #L512704.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L51270a.  v3:= temp;
  #L51270c.  if v3 == 0 then goto L5126f4;
  #L512710.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L512716.  v6:= temp;
  #L512718.  return v6;
}
procedure `int` `size`(`io.reactivex.rxjava3.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/OpenHashSet;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5127b8.  v0:= v1.`io.reactivex.rxjava3.internal.util.OpenHashSet.c` @type ^`int`;
  #L5127bc.  return v0;
}
