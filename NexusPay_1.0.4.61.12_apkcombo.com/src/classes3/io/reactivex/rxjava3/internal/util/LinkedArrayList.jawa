record `io.reactivex.rxjava3.internal.util.LinkedArrayList` @kind class @AccessFlag PUBLIC {
  `int` `io.reactivex.rxjava3.internal.util.LinkedArrayList.a` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.util.LinkedArrayList.b` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.util.LinkedArrayList.c` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.util.LinkedArrayList.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.LinkedArrayList` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/util/LinkedArrayList;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L511ea0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L511ea6.  v0.`io.reactivex.rxjava3.internal.util.LinkedArrayList.a` @type ^`int` := v1;
  #L511eaa.  return @kind void;
}
procedure `void` `add`(`io.reactivex.rxjava3.internal.util.LinkedArrayList` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/util/LinkedArrayList;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L511ebc.  v0:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int`;
  #L511ec0.  v1:= 0I;
  #L511ec2.  v2:= 1I;
  #L511ec4.  if v0 != 0 then goto L511ee8;
  #L511ec8.  v0:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.a` @type ^`int`;
  #L511ecc.  v0:= v0 + v2 @kind int;
  #L511ece.  v0:= new `java.lang.Object`[v0];
  #L511ed2.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L511ed6.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L511eda.  v0[v1]:= v5 @kind object;
  #L511ede.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.e` @type ^`int` := v2;
  #L511ee2.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int` := v2;
  #L511ee6.  goto L511f34;
  #L511ee8.  v0:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.e` @type ^`int`;
  #L511eec.  v3:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.a` @type ^`int`;
  #L511ef0.  if v0 != v3 then goto L511f1c;
  #L511ef4.  v0:= v3 + 1;
  #L511ef8.  v0:= new `java.lang.Object`[v0];
  #L511efc.  v0[v1]:= v5 @kind object;
  #L511f00.  v5:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.c` @type ^`java.lang.Object`[] @kind object;
  #L511f04.  v5[v3]:= v0 @kind object;
  #L511f08.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L511f0c.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.e` @type ^`int` := v2;
  #L511f10.  v5:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int`;
  #L511f14.  v5:= v5 + v2 @kind int;
  #L511f16.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int` := v5;
  #L511f1a.  goto L511f34;
  #L511f1c.  v1:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.c` @type ^`java.lang.Object`[] @kind object;
  #L511f20.  v1[v0]:= v5 @kind object;
  #L511f24.  v0:= v0 + v2 @kind int;
  #L511f26.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.e` @type ^`int` := v0;
  #L511f2a.  v5:= v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int`;
  #L511f2e.  v5:= v5 + v2 @kind int;
  #L511f30.  v4.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int` := v5;
  #L511f34.  return @kind void;
}
procedure `java.lang.Object`[] `head`(`io.reactivex.rxjava3.internal.util.LinkedArrayList` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/LinkedArrayList;.head:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L511e24.  v0:= v1.`io.reactivex.rxjava3.internal.util.LinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L511e28.  return v0 @kind object;
}
procedure `int` `size`(`io.reactivex.rxjava3.internal.util.LinkedArrayList` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/LinkedArrayList;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L511e0c.  v0:= v1.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int`;
  #L511e10.  return v0;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.util.LinkedArrayList` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/LinkedArrayList;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L511e3c.  v0:= v8.`io.reactivex.rxjava3.internal.util.LinkedArrayList.a` @type ^`int`;
  #L511e40.  v1:= v8.`io.reactivex.rxjava3.internal.util.LinkedArrayList.d` @type ^`int`;
  #L511e44.  v2:= new `java.util.ArrayList`;
  #L511e48.  v3:= v1 + 1;
  #L511e4c.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L511e52.  call temp:= `head`(v8) @signature `Lio/reactivex/rxjava3/internal/util/LinkedArrayList;.head:()[Ljava/lang/Object;` @kind virtual;
  #L511e58.  v3:= temp @kind object;
  #L511e5a.  v4:= 0I;
  #L511e5c.  v5:= 0I;
  #L511e5e.  v6:= 0I;
  #L511e60.  if v5 >= v1 then goto L511e84;
  #L511e64.  v7:= v3[v6] @kind object;
  #L511e68.  call temp:= `add`(v2, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L511e6e.  v5:= v5 + 1;
  #L511e72.  v6:= v6 + 1;
  #L511e76.  if v6 != v0 then goto L511e60;
  #L511e7a.  v3:= v3[v0] @kind object;
  #L511e7e.  v3:= (`java.lang.Object`[]) v3 @kind object;
  #L511e82.  goto L511e5e;
  #L511e84.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L511e8a.  v0:= temp @kind object;
  #L511e8c.  return v0 @kind object;
}
