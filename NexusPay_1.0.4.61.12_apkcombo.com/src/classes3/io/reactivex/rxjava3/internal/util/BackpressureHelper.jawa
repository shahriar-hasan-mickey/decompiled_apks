record `io.reactivex.rxjava3.internal.util.BackpressureHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.util.BackpressureHelper` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5112f8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5112fe.  v0:= new `java.lang.IllegalStateException`;
  #L511302.  v1:= "No instances!" @kind object;
  #L511306.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51130c.  throw v0;
}
procedure `long` `add`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5110e8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L5110ee.  v0:= temp @kind wide;
  #L5110f0.  v2:= 9223372036854775807L;
  #L5110fa.  v4:= lcmp(v0, v2);
  #L5110fe.  if v4 != 0 then goto L511104;
  #L511102.  return v2 @kind wide;
  #L511104.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L51110a.  v2:= temp @kind wide;
  #L51110c.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L511112.  v2:= temp;
  #L511114.  if v2 == 0 then goto L5110e8;
  #L511118.  return v0 @kind wide;
}
procedure `long` `addCancel`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L51112c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L511132.  v0:= temp @kind wide;
  #L511134.  v2:= -9223372036854775808L;
  #L511138.  v4:= lcmp(v0, v2);
  #L51113c.  if v4 != 0 then goto L511142;
  #L511140.  return v2 @kind wide;
  #L511142.  v2:= 9223372036854775807L;
  #L51114c.  v4:= lcmp(v0, v2);
  #L511150.  if v4 != 0 then goto L511156;
  #L511154.  return v2 @kind wide;
  #L511156.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L51115c.  v2:= temp @kind wide;
  #L51115e.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L511164.  v2:= temp;
  #L511166.  if v2 == 0 then goto L51112c;
  #L51116a.  return v0 @kind wide;
}
procedure `long` `addCap`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51117c.  v1:= v1 + v3 @kind long;
  #L51117e.  v3:= 0L;
  #L511182.  v0:= lcmp(v1, v3);
  #L511186.  if v0 >= 0 then goto L511194;
  #L51118a.  v1:= 9223372036854775807L;
  #L511194.  return v1 @kind wide;
}
procedure `long` `multiplyCap`(`long` v7 , `long` v9 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L5111a8.  v0:= v7 * v9 @kind long;
  #L5111ac.  v2:= v7 ^| v9 @kind long;
  #L5111b0.  v4:= 31I;
  #L5111b4.  v2:= v2 ^>> v4 @kind long;
  #L5111b6.  v4:= 0L;
  #L5111ba.  v6:= lcmp(v2, v4);
  #L5111be.  if v6 == 0 then goto L5111da;
  #L5111c2.  v7:= v0 / v7 @kind long;
  #L5111c6.  v2:= lcmp(v7, v9);
  #L5111ca.  if v2 == 0 then goto L5111da;
  #L5111ce.  v7:= 9223372036854775807L;
  #L5111d8.  return v7 @kind wide;
  #L5111da.  return v0 @kind wide;
}
procedure `long` `produced`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5111ec.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L5111f2.  v0:= temp @kind wide;
  #L5111f4.  v2:= 9223372036854775807L;
  #L5111fe.  v4:= lcmp(v0, v2);
  #L511202.  if v4 != 0 then goto L511208;
  #L511206.  return v2 @kind wide;
  #L511208.  v2:= v0 - v10 @kind long;
  #L51120c.  v4:= 0L;
  #L511210.  v6:= lcmp(v2, v4);
  #L511214.  if v6 >= 0 then goto L51124c;
  #L511218.  v6:= new `java.lang.IllegalStateException`;
  #L51121c.  v7:= new `java.lang.StringBuilder`;
  #L511220.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L511226.  v8:= "More produced than requested: " @kind object;
  #L51122a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L511230.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L511236.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L51123c.  v2:= temp @kind object;
  #L51123e.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L511244.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L51124a.  v2:= v4 @kind wide;
  #L51124c.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L511252.  v0:= temp;
  #L511254.  if v0 == 0 then goto L5111ec;
  #L511258.  return v2 @kind wide;
}
procedure `long` `producedCancel`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L51126c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L511272.  v0:= temp @kind wide;
  #L511274.  v2:= -9223372036854775808L;
  #L511278.  v4:= lcmp(v0, v2);
  #L51127c.  if v4 != 0 then goto L511282;
  #L511280.  return v2 @kind wide;
  #L511282.  v2:= 9223372036854775807L;
  #L51128c.  v4:= lcmp(v0, v2);
  #L511290.  if v4 != 0 then goto L511296;
  #L511294.  return v2 @kind wide;
  #L511296.  v2:= v0 - v10 @kind long;
  #L51129a.  v4:= 0L;
  #L51129e.  v6:= lcmp(v2, v4);
  #L5112a2.  if v6 >= 0 then goto L5112da;
  #L5112a6.  v6:= new `java.lang.IllegalStateException`;
  #L5112aa.  v7:= new `java.lang.StringBuilder`;
  #L5112ae.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5112b4.  v8:= "More produced than requested: " @kind object;
  #L5112b8.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5112be.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L5112c4.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5112ca.  v2:= temp @kind object;
  #L5112cc.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5112d2.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5112d8.  v2:= v4 @kind wide;
  #L5112da.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L5112e0.  v0:= temp;
  #L5112e2.  if v0 == 0 then goto L51126c;
  #L5112e6.  return v2 @kind wide;
}
