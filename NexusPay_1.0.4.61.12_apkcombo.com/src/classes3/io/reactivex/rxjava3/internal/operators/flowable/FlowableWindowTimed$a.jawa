record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d83a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d83a6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d83aa.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4d83ae.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4d83b4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4d83b8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` := v2 @kind wide;
  #L4d83bc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4d83c0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int` := v5;
  #L4d83c4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d83c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d83ce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d83d2.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d83d6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d83dc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4d83e0.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4d83e4.  v2:= 1I;
  #L4d83e6.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4d83ec.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4d83f0.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `b`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4d8404.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8408.  v1:= 0I;
  #L4d840a.  v2:= 1I;
  #L4d840c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d8412.  v0:= temp;
  #L4d8414.  if v0 == 0 then goto L4d841e;
  #L4d8418.  call `d`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L4d841e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L4d84f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d84fc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d8502.  v0:= temp;
  #L4d8504.  if v0 != 0 then goto L4d8524;
  #L4d8508.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.a:()V` @kind virtual;
  #L4d850e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8512.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d8518.  v0:= 1I;
  #L4d851a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4d851e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4d8524.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4d8430.  v0:= 1I;
  #L4d8432.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4d8436.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4d843c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4d8450.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4d8454.  v1:= 1I;
  #L4d8456.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4d845a.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4d8460.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4d8474.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d8478.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d847e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4d8484.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4d8498.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d849c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d84a2.  v0:= temp;
  #L4d84a4.  if v0 == 0 then goto L4d84bc;
  #L4d84a8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d84ac.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d84b0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d84b6.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.b:()V` @kind virtual;
  #L4d84bc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4d84d0.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d84d6.  v0:= temp;
  #L4d84d8.  if v0 == 0 then goto L4d84e6;
  #L4d84dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d84e0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d84e6.  return @kind void;
}
