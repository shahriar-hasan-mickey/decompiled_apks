record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @AccessFlag ;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d723c.  v0:= 1I;
  #L4d723e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4d7244.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d7248.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` := v3 @kind wide;
  #L4d724c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` := v5 @kind wide;
  #L4d7250.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d7254.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d725a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4d725e.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d7262.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d7268.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4d726c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.f` @type ^`int` := v7;
  #L4d7270.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d7284.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d7288.  v1:= 0I;
  #L4d728a.  v2:= 1I;
  #L4d728c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d7292.  v0:= temp;
  #L4d7294.  if v0 == 0 then goto L4d729e;
  #L4d7298.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.run:()V` @kind virtual;
  #L4d729e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d72b0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d72b4.  if v0 == 0 then goto L4d72c4;
  #L4d72b8.  v1:= 0I;
  #L4d72ba.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v1 @kind object;
  #L4d72be.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d72c4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d72c8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d72ce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d72e0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d72e4.  if v0 == 0 then goto L4d72f4;
  #L4d72e8.  v1:= 0I;
  #L4d72ea.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v1 @kind object;
  #L4d72ee.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d72f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d72f8.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d72fe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d7310.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` @kind wide;
  #L4d7314.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d7318.  v3:= 0L;
  #L4d731c.  v5:= 0I;
  #L4d731e.  v6:= lcmp(v0, v3);
  #L4d7322.  if v6 != 0 then goto L4d7352;
  #L4d7326.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d732c.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.f` @type ^`int`;
  #L4d7330.  call temp:= `create`(v2, v9) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d7336.  v2:= temp @kind object;
  #L4d7338.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4d733c.  v6:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d7340.  call `<init>`(v6, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d7346.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d734a.  call `onNext`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d7350.  goto L4d7354;
  #L4d7352.  v6:= v5 @kind object;
  #L4d7354.  v7:= 1L;
  #L4d7358.  v0:= v0 + v7 @kind long;
  #L4d735a.  if v2 == 0 then goto L4d7364;
  #L4d735e.  call `onNext`(v2, v10) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4d7364.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4d7368.  v10:= lcmp(v0, v7);
  #L4d736c.  if v10 != 0 then goto L4d737a;
  #L4d7370.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v5 @kind object;
  #L4d7374.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d737a.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4d737e.  v10:= lcmp(v0, v7);
  #L4d7382.  if v10 != 0 then goto L4d738c;
  #L4d7386.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v3 @kind wide;
  #L4d738a.  goto L4d7390;
  #L4d738c.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v0 @kind wide;
  #L4d7390.  if v6 == 0 then goto L4d73aa;
  #L4d7394.  call temp:= `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d739a.  v10:= temp;
  #L4d739c.  if v10 == 0 then goto L4d73aa;
  #L4d73a0.  v10:= v6.`io.reactivex.rxjava3.internal.operators.flowable.b.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4d73a4.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d73aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d73bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d73c0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d73c6.  v0:= temp;
  #L4d73c8.  if v0 == 0 then goto L4d73da;
  #L4d73cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d73d0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d73d4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d73da.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d73ec.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d73f2.  v0:= temp;
  #L4d73f4.  if v0 == 0 then goto L4d746a;
  #L4d73f8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d73fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d7402.  v0:= temp;
  #L4d7404.  if v0 != 0 then goto L4d7454;
  #L4d7408.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d740c.  v1:= 0I;
  #L4d740e.  v2:= 1I;
  #L4d7410.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d7416.  v0:= temp;
  #L4d7418.  if v0 == 0 then goto L4d7454;
  #L4d741c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4d7420.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4d7426.  v0:= temp @kind wide;
  #L4d7428.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4d742c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L4d7430.  v2:= v2 - v4 @kind long;
  #L4d7432.  v4:= 1L;
  #L4d7436.  v7:= v7 - v4 @kind long;
  #L4d7438.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4d743e.  v7:= temp @kind wide;
  #L4d7440.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4d7446.  v7:= temp @kind wide;
  #L4d7448.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d744c.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d7452.  goto L4d746a;
  #L4d7454.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L4d7458.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4d745e.  v7:= temp @kind wide;
  #L4d7460.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7464.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d746a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d747c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d7482.  v0:= temp;
  #L4d7484.  if v0 != 0 then goto L4d7492;
  #L4d7488.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d748c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d7492.  return @kind void;
}
