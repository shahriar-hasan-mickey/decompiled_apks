record `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscArrayQueue` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.<init>:(ILio/reactivex/rxjava3/internal/queue/SpscArrayQueue;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L504304.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L50430a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L50430e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L504314.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L504318.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.a` @type ^`int` := v2;
  #L50431c.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` := v3 @kind object;
  #L504320.  v3:= v2 ^> 2;
  #L504324.  v2:= v2 - v3 @kind int;
  #L504326.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.b` @type ^`int` := v2;
  #L50432a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v4 @kind object;
  #L50432e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.a:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L50446c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L504472.  v0:= temp;
  #L504474.  if v0 != 0 then goto L504482;
  #L504478.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L50447c.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L504482.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L504340.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L504344.  if v0 != 0 then goto L504378;
  #L504348.  v0:= 1I;
  #L50434a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L50434e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L504352.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L504358.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L50435c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L504362.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L504368.  v0:= temp;
  #L50436a.  if v0 != 0 then goto L504378;
  #L50436e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L504372.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L504378.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50438c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L504390.  if v0 == 0 then goto L504396;
  #L504394.  return @kind void;
  #L504396.  v0:= 1I;
  #L504398.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` := v0 @kind boolean;
  #L50439c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L5043a2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5043b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L5043b8.  if v0 == 0 then goto L5043c4;
  #L5043bc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5043c2.  return @kind void;
  #L5043c4.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L5043c8.  v2:= 1I;
  #L5043ca.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` := v2 @kind boolean;
  #L5043ce.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L5043d4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5043e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L5043ec.  if v0 == 0 then goto L5043f2;
  #L5043f0.  return @kind void;
  #L5043f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L5043f6.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L5043fc.  v2:= temp;
  #L5043fe.  if v2 != 0 then goto L504422;
  #L504402.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L504406.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50440c.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L504410.  v0:= "Queue is full?!" @kind object;
  #L504414.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50441a.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L504420.  return @kind void;
  #L504422.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L504428.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50443c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L504442.  v0:= temp;
  #L504444.  if v0 == 0 then goto L504458;
  #L504448.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50444c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L504452.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L504458.  return @kind void;
}
