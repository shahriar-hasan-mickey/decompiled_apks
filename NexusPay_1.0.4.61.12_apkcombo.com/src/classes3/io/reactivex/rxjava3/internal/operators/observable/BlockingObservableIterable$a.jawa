record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `java.util.Iterator` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4e69a8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e69ae.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4e69b2.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4e69b8.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4e69bc.  v2:= new `java.util.concurrent.locks.ReentrantLock`;
  #L4e69c0.  call `<init>`(v2) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L4e69c6.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` := v2 @kind object;
  #L4e69ca.  call temp:= `newCondition`(v2) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L4e69d0.  v2:= temp @kind object;
  #L4e69d2.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` := v2 @kind object;
  #L4e69d6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e6aa8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4e6aac.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4e6ab2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4e6ab6.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L4e6abc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4e6ac0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4e6ac6.  return @kind void;
  #L4e6ac8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e6aca.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4e6ace.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4e6ad4.  throw v0;
  catch `java.lang.Throwable` @[L4e6ab2..L4e6abc] goto L4e6ac8;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4e69e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e69ee.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4e69f4.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e6850.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @kind virtual;
  #L4e6856.  v0:= temp;
  #L4e6858.  v1:= 0I;
  #L4e685a.  if v0 == 0 then goto L4e6872;
  #L4e685e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` @kind object;
  #L4e6862.  if v0 != 0 then goto L4e6868;
  #L4e6866.  return v1;
  #L4e6868.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e686e.  v0:= temp @kind object;
  #L4e6870.  throw v0;
  #L4e6872.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L4e6876.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e687a.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4e6880.  v2:= temp;
  #L4e6882.  if v0 == 0 then goto L4e689e;
  #L4e6886.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` @kind object;
  #L4e688a.  if v0 != 0 then goto L4e6894;
  #L4e688e.  if v2 == 0 then goto L4e689e;
  #L4e6892.  return v1;
  #L4e6894.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e689a.  v0:= temp @kind object;
  #L4e689c.  throw v0;
  #L4e689e.  if v2 == 0 then goto L4e6914;
  #L4e68a2.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4e68a8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4e68ac.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4e68b2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L4e68b6.  if v0 != 0 then goto L4e68e2;
  #L4e68ba.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e68be.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4e68c4.  v0:= temp;
  #L4e68c6.  if v0 == 0 then goto L4e68e2;
  #L4e68ca.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @kind virtual;
  #L4e68d0.  v0:= temp;
  #L4e68d2.  if v0 != 0 then goto L4e68e2;
  #L4e68d6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4e68da.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L4e68e0.  goto L4e68b2;
  #L4e68e2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4e68e6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4e68ec.  goto L4e6850;
  #L4e68ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e68f0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4e68f4.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4e68fa.  throw v0;
  #L4e68fc.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4e68fe.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e6904.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4e690a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e6910.  v0:= temp @kind object;
  #L4e6912.  throw v0;
  #L4e6914.  v0:= 1I;
  #L4e6916.  return v0;
  catch `java.lang.InterruptedException` @[L4e68a2..L4e68b2] goto L4e68fc;
  catch `java.lang.Throwable` @[L4e68b2..L4e68e0] goto L4e68ee;
  catch `java.lang.InterruptedException` @[L4e68e2..L4e68fc] goto L4e68fc;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6948.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e694e.  v0:= temp @kind object;
  #L4e6950.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e6954.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e695a.  v0:= temp;
  #L4e695c.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6970.  call temp:= `hasNext`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @kind virtual;
  #L4e6976.  v0:= temp;
  #L4e6978.  if v0 == 0 then goto L4e698a;
  #L4e697c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e6980.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4e6986.  v0:= temp @kind object;
  #L4e6988.  return v0 @kind object;
  #L4e698a.  v0:= new `java.util.NoSuchElementException`;
  #L4e698e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4e6994.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6a08.  v0:= 1I;
  #L4e6a0a.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4e6a0e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4e6a14.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e6a28.  v0.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4e6a2c.  v1:= 1I;
  #L4e6a2e.  v0.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v1 @kind boolean;
  #L4e6a32.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4e6a38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6a4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e6a50.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e6a56.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L4e6a5c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e6a70.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e6a76.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e6a88.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4e6a8c.  v1:= "remove" @kind object;
  #L4e6a90.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e6a96.  throw v0;
}
