record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.<init>:(Lorg/reactivestreams/Subscriber;IILio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b983c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b9842.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b9846.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int` := v2;
  #L4b984a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int` := v3;
  #L4b984e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4b9852.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9864.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b9868.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b986e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9880.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L4b9884.  if v0 == 0 then goto L4b988a;
  #L4b9888.  return @kind void;
  #L4b988a.  v0:= 1I;
  #L4b988c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L4b9890.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L4b9894.  v1:= 0I;
  #L4b9896.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v1 @kind object;
  #L4b989a.  if v0 == 0 then goto L4b98a8;
  #L4b989e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b98a2.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b98a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b98ac.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b98b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b98c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L4b98c8.  if v0 == 0 then goto L4b98d4;
  #L4b98cc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b98d2.  return @kind void;
  #L4b98d4.  v0:= 1I;
  #L4b98d6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L4b98da.  v0:= 0I;
  #L4b98dc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L4b98e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b98e4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b98ea.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b98fc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L4b9900.  if v0 == 0 then goto L4b9906;
  #L4b9904.  return @kind void;
  #L4b9906.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L4b990a.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int`;
  #L4b990e.  v2:= v1 + 1;
  #L4b9912.  if v1 != 0 then goto L4b994e;
  #L4b9916.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b991a.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b9920.  v0:= temp @kind object;
  #L4b9922.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4b9926.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b992c.  v0:= temp @kind object;
  #L4b992e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b9932.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L4b9936.  goto L4b994e;
  #L4b9938.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b993a.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b9940.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @kind virtual;
  #L4b9946.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b994c.  return @kind void;
  #L4b994e.  if v0 == 0 then goto L4b9978;
  #L4b9952.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b9958.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4b995e.  v4:= temp;
  #L4b9960.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L4b9964.  if v4 != v1 then goto L4b9978;
  #L4b9968.  v4:= 0I;
  #L4b996a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v4 @kind object;
  #L4b996e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b9972.  call `onNext`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b9978.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L4b997c.  if v2 != v4 then goto L4b9982;
  #L4b9980.  v2:= 0I;
  #L4b9982.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int` := v2;
  #L4b9986.  return @kind void;
  catch `java.lang.Throwable` @[L4b9916..L4b9932] goto L4b9938;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b99a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b99a8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b99ae.  v0:= temp;
  #L4b99b0.  if v0 == 0 then goto L4b99c2;
  #L4b99b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4b99b8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b99bc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b99c2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b99d4.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4b99da.  v0:= temp;
  #L4b99dc.  if v0 == 0 then goto L4b9a50;
  #L4b99e0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b99e6.  v0:= temp;
  #L4b99e8.  if v0 != 0 then goto L4b9a38;
  #L4b99ec.  v0:= 0I;
  #L4b99ee.  v1:= 1I;
  #L4b99f0.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4b99f6.  v0:= temp;
  #L4b99f8.  if v0 == 0 then goto L4b9a38;
  #L4b99fc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L4b9a00.  v0:= (`long`) v0 @kind i2l;
  #L4b9a02.  call temp:= `multiplyCap`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4b9a08.  v0:= temp @kind wide;
  #L4b9a0a.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L4b9a0e.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L4b9a12.  v2:= v2 - v3 @kind int;
  #L4b9a14.  v2:= (`long`) v2 @kind i2l;
  #L4b9a16.  v4:= 1L;
  #L4b9a1a.  v7:= v7 - v4 @kind long;
  #L4b9a1c.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4b9a22.  v7:= temp @kind wide;
  #L4b9a24.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b9a28.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4b9a2e.  v7:= temp @kind wide;
  #L4b9a30.  call `request`(v2, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b9a36.  goto L4b9a50;
  #L4b9a38.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b9a3c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L4b9a40.  v1:= (`long`) v1 @kind i2l;
  #L4b9a42.  call temp:= `multiplyCap`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4b9a48.  v7:= temp @kind wide;
  #L4b9a4a.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b9a50.  return @kind void;
}
