record `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v4 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;ILio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9930.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f9936.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4f993a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4f993e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v4 @kind object;
  #L4f9942.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v5 @kind object;
  #L4f9946.  v1:= 2I;
  #L4f9948.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[v1];
  #L4f994c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] := v3 @kind object;
  #L4f9950.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L4f9954.  v5:= 0I;
  #L4f9956.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L4f995c.  v3[v5]:= v4 @kind object;
  #L4f9960.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L4f9964.  v5:= 1I;
  #L4f9966.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L4f996c.  v3[v5]:= v4 @kind object;
  #L4f9970.  v2:= new `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable`;
  #L4f9974.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L4f997a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L4f997e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4f9990.  v0:= 1I;
  #L4f9992.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4f9996.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f999c.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f99a2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4f9a0c.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f9a12.  v0:= temp;
  #L4f9a14.  if v0 == 0 then goto L4f9a1a;
  #L4f9a18.  return @kind void;
  #L4f9a1a.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4f9a1e.  v1:= 0I;
  #L4f9a20.  v2:= v0[v1] @kind object;
  #L4f9a24.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f9a28.  v4:= 1I;
  #L4f9a2a.  v0:= v0[v4] @kind object;
  #L4f9a2e.  v5:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f9a32.  v6:= 1I;
  #L4f9a34.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4f9a38.  if v7 == 0 then goto L4f9a4a;
  #L4f9a3c.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f9a42.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f9a48.  return @kind void;
  #L4f9a4a.  v7:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L4f9a4e.  if v7 == 0 then goto L4f9a6c;
  #L4f9a52.  v8:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4f9a56.  if v8 == 0 then goto L4f9a6c;
  #L4f9a5a.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9a60.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f9a64.  call `onError`(v0, v8) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f9a6a.  return @kind void;
  #L4f9a6c.  v8:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L4f9a70.  if v8 == 0 then goto L4f9a8e;
  #L4f9a74.  v9:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4f9a78.  if v9 == 0 then goto L4f9a8e;
  #L4f9a7c.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9a82.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f9a86.  call `onError`(v0, v9) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f9a8c.  return @kind void;
  #L4f9a8e.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4f9a92.  if v9 != 0 then goto L4f9aa2;
  #L4f9a96.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f9a9c.  v9:= temp @kind object;
  #L4f9a9e.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L4f9aa2.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4f9aa6.  if v9 != 0 then goto L4f9aae;
  #L4f9aaa.  v9:= 1I;
  #L4f9aac.  goto L4f9ab0;
  #L4f9aae.  v9:= 0I;
  #L4f9ab0.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4f9ab4.  if v10 != 0 then goto L4f9ac4;
  #L4f9ab8.  call temp:= `poll`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f9abe.  v10:= temp @kind object;
  #L4f9ac0.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L4f9ac4.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4f9ac8.  if v10 != 0 then goto L4f9ad0;
  #L4f9acc.  v10:= 1I;
  #L4f9ace.  goto L4f9ad2;
  #L4f9ad0.  v10:= 0I;
  #L4f9ad2.  if v7 == 0 then goto L4f9af2;
  #L4f9ad6.  if v8 == 0 then goto L4f9af2;
  #L4f9ada.  if v9 == 0 then goto L4f9af2;
  #L4f9ade.  if v10 == 0 then goto L4f9af2;
  #L4f9ae2.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f9ae6.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4f9aea.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f9af0.  return @kind void;
  #L4f9af2.  if v7 == 0 then goto L4f9b14;
  #L4f9af6.  if v8 == 0 then goto L4f9b14;
  #L4f9afa.  if v9 == v10 then goto L4f9b14;
  #L4f9afe.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9b04.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f9b08.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4f9b0c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f9b12.  return @kind void;
  #L4f9b14.  if v9 != 0 then goto L4f9b70;
  #L4f9b18.  if v10 != 0 then goto L4f9b70;
  #L4f9b1c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4f9b20.  v8:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4f9b24.  v11:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4f9b28.  call temp:= `test`(v7, v8, v11) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4f9b2e.  v7:= temp;
  #L4f9b30.  if v7 != 0 then goto L4f9b4a;
  #L4f9b34.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9b3a.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f9b3e.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4f9b42.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f9b48.  return @kind void;
  #L4f9b4a.  v7:= 0I;
  #L4f9b4c.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L4f9b50.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4f9b54.  goto L4f9b70;
  #L4f9b56.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f9b58.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f9b5e.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9b64.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f9b68.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f9b6e.  return @kind void;
  #L4f9b70.  if v9 != 0 then goto L4f9b78;
  #L4f9b74.  if v10 == 0 then goto L4f9a34;
  #L4f9b78.  v6:= -v6 @kind int;
  #L4f9b7a.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f9b80.  v6:= temp;
  #L4f9b82.  if v6 != 0 then goto L4f9a34;
  #L4f9b86.  return @kind void;
  catch `java.lang.Throwable` @[L4f9b1c..L4f9b30] goto L4f9b56;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.c:(Lio/reactivex/rxjava3/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L4f9910.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4f9914.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f991a.  v2:= temp;
  #L4f991c.  return v2;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f9ba4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4f9ba8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f9bac.  v2:= 0I;
  #L4f9bae.  v2:= v0[v2] @kind object;
  #L4f9bb2.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f9bb8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f9bbc.  v2:= 1I;
  #L4f9bbe.  v0:= v0[v2] @kind object;
  #L4f9bc2.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f9bc8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f99b4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4f99b8.  if v0 != 0 then goto L4f99fa;
  #L4f99bc.  v0:= 1I;
  #L4f99be.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4f99c2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4f99c6.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L4f99cc.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f99d2.  v1:= temp;
  #L4f99d4.  if v1 != 0 then goto L4f99fa;
  #L4f99d8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4f99dc.  v2:= 0I;
  #L4f99de.  v2:= v1[v2] @kind object;
  #L4f99e2.  v2:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f99e6.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f99ec.  v0:= v1[v0] @kind object;
  #L4f99f0.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f99f4.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f99fa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f98f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4f98fc.  return v0;
}
