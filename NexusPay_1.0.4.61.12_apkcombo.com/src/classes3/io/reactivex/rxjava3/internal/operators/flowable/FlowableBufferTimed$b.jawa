record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @AccessFlag ;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.rxjava3.core.Scheduler` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Supplier;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4bab10.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4bab14.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4bab1a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4bab20.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4bab24.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4bab2a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4bab2e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4bab32.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` := v4 @kind wide;
  #L4bab36.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4bab3a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.core.Scheduler` := v7 @kind object;
  #L4bab3e.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4baac4.  v1:= v0.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4baac8.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4baace.  v1:= 1I;
  #L4baad0.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4baaa4.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4baaa8.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L4baaae.  v1:= temp;
  #L4baab0.  return v1;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bab50.  v0:= 1I;
  #L4bab52.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4bab56.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bab5a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bab60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bab64.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4bab6a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4bab7c.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L4bab82.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4baae4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4baae8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4baaee.  v0:= temp @kind object;
  #L4baaf0.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4baaf4.  if v0 != v1 then goto L4baafc;
  #L4baaf8.  v0:= 1I;
  #L4baafa.  goto L4baafe;
  #L4baafc.  v0:= 0I;
  #L4baafe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bab94.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bab98.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4bab9e.  @monitorenter v4
  #L4baba0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L4baba4.  if v0 != 0 then goto L4babac;
  #L4baba8.  @monitorexit v4
  #L4babaa.  return @kind void;
  #L4babac.  v1:= 0I;
  #L4babae.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v1 @kind object;
  #L4babb2.  @monitorexit v4
  #L4babb4.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4babb8.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4babbe.  v0:= 1I;
  #L4babc0.  v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4babc4.  call temp:= `enter`(v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4babca.  v0:= temp;
  #L4babcc.  if v0 == 0 then goto L4babe0;
  #L4babd0.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4babd4.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4babd8.  v3:= 0I;
  #L4babda.  call `drainMaxLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L4babe0.  return @kind void;
  #L4babe2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4babe4.  @monitorexit v4
  #L4babe6.  throw v0;
  catch `java.lang.Throwable` @[L4baba0..L4babb4] goto L4babe2;
  catch `java.lang.Throwable` @[L4babe4..L4babe6] goto L4babe2;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bac0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bac10.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4bac16.  @monitorenter v1
  #L4bac18.  v0:= 0I;
  #L4bac1a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4bac1e.  @monitorexit v1
  #L4bac20.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bac24.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bac2a.  return @kind void;
  #L4bac2c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bac2e.  @monitorexit v1
  #L4bac30.  throw v2;
  catch `java.lang.Throwable` @[L4bac1a..L4bac20] goto L4bac2c;
  catch `java.lang.Throwable` @[L4bac2e..L4bac30] goto L4bac2c;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bac58.  @monitorenter v1
  #L4bac5a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L4bac5e.  if v0 == 0 then goto L4bac68;
  #L4bac62.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bac68.  @monitorexit v1
  #L4bac6a.  return @kind void;
  #L4bac6c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bac6e.  @monitorexit v1
  #L4bac70.  throw v2;
  catch `java.lang.Throwable` @[L4bac5a..L4bac70] goto L4bac6c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v9 @kind this, `org.reactivestreams.Subscription` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4bac90.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bac94.  call temp:= `validate`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4bac9a.  v0:= temp;
  #L4bac9c.  if v0 == 0 then goto L4bad30;
  #L4baca0.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` := v10 @kind object;
  #L4baca4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4baca8.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bacae.  v0:= temp @kind object;
  #L4bacb0.  v1:= "The supplied buffer is null" @kind object;
  #L4bacb4.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bacba.  v0:= temp @kind object;
  #L4bacbc.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4bacc0.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4bacc4.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bacc8.  call `onSubscribe`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bacce.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4bacd2.  if v0 != 0 then goto L4bad30;
  #L4bacd6.  v0:= 9223372036854775807L;
  #L4bace0.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bace6.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4bacea.  v6:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` @kind wide;
  #L4bacee.  v8:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4bacf2.  v3:= v9 @kind object;
  #L4bacf4.  v4:= v6 @kind wide;
  #L4bacf6.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4bacfc.  v10:= temp @kind object;
  #L4bacfe.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bad02.  v1:= 0I;
  #L4bad04.  call temp:= `compareAndSet`(v0, v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4bad0a.  v0:= temp;
  #L4bad0c.  if v0 != 0 then goto L4bad30;
  #L4bad10.  call `dispose`(v10) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bad16.  goto L4bad30;
  #L4bad18.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bad1a.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bad20.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L4bad26.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bad2a.  call `error`(v10, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4bad30.  return @kind void;
  catch `java.lang.Throwable` @[L4baca4..L4bacc0] goto L4bad18;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4bad50.  call `requested`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4bad56.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bad68.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4bad6c.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bad72.  v0:= temp @kind object;
  #L4bad74.  v1:= "The supplied buffer is null" @kind object;
  #L4bad78.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bad7e.  v0:= temp @kind object;
  #L4bad80.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4bad84.  @monitorenter v2
  #L4bad86.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L4bad8a.  if v1 != 0 then goto L4bad92;
  #L4bad8e.  @monitorexit v2
  #L4bad90.  return @kind void;
  #L4bad92.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4bad96.  @monitorexit v2
  #L4bad98.  v0:= 0I;
  #L4bad9a.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4bada0.  return @kind void;
  #L4bada2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bada4.  @monitorexit v2
  #L4bada6.  throw v0;
  #L4bada8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4badaa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4badb0.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L4badb6.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4badba.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4badc0.  return @kind void;
  catch `java.lang.Throwable` @[L4bad68..L4bad84] goto L4bada8;
  catch `java.lang.Throwable` @[L4bad86..L4bad98] goto L4bada2;
  catch `java.lang.Throwable` @[L4bada4..L4bada6] goto L4bada2;
}
