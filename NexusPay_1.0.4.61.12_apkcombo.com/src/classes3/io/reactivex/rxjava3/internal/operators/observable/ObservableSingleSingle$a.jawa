record `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9f98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f9f9e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4f9fa2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4f9fa6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9fb8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9fbc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f9fc2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9f78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9f7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4f9f82.  v0:= temp;
  #L4f9f84.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f9fd4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L4f9fd8.  if v0 == 0 then goto L4f9fde;
  #L4f9fdc.  return @kind void;
  #L4f9fde.  v0:= 1I;
  #L4f9fe0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4f9fe4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L4f9fe8.  v1:= 0I;
  #L4f9fea.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L4f9fee.  if v0 != 0 then goto L4f9ff6;
  #L4f9ff2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L4f9ff6.  if v0 == 0 then goto L4fa006;
  #L4f9ffa.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f9ffe.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4fa004.  goto L4fa01a;
  #L4fa006.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4fa00a.  v1:= new `java.util.NoSuchElementException`;
  #L4fa00e.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4fa014.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fa01a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fa02c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L4fa030.  if v0 == 0 then goto L4fa03c;
  #L4fa034.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fa03a.  return @kind void;
  #L4fa03c.  v0:= 1I;
  #L4fa03e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4fa042.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4fa046.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fa04c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fa060.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L4fa064.  if v0 == 0 then goto L4fa06a;
  #L4fa068.  return @kind void;
  #L4fa06a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L4fa06e.  if v0 == 0 then goto L4fa09c;
  #L4fa072.  v3:= 1I;
  #L4fa074.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4fa078.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fa07c.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fa082.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4fa086.  v0:= new `java.lang.IllegalArgumentException`;
  #L4fa08a.  v1:= "Sequence contains more than one element!" @kind object;
  #L4fa08e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fa094.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fa09a.  return @kind void;
  #L4fa09c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4fa0a0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fa0b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fa0b8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fa0be.  v0:= temp;
  #L4fa0c0.  if v0 == 0 then goto L4fa0d2;
  #L4fa0c4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fa0c8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4fa0cc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fa0d2.  return @kind void;
}
