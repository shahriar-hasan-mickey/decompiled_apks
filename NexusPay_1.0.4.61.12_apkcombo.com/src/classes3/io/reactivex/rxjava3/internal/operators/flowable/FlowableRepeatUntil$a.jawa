record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BooleanSupplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BooleanSupplier` v2 @kind object, `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BooleanSupplier;Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ceb98.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ceb9e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4ceba2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L4ceba6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L4cebaa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.rxjava3.functions.BooleanSupplier` := v2 @kind object;
  #L4cebae.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cec78.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cec7e.  v0:= temp;
  #L4cec80.  if v0 != 0 then goto L4cecce;
  #L4cec84.  v0:= 1I;
  #L4cec86.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4cec8a.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L4cec90.  v1:= temp;
  #L4cec92.  if v1 == 0 then goto L4cec98;
  #L4cec96.  return @kind void;
  #L4cec98.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` @kind wide;
  #L4cec9c.  v3:= 0L;
  #L4ceca0.  v5:= lcmp(v1, v3);
  #L4ceca4.  if v5 == 0 then goto L4cecb6;
  #L4ceca8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` := v3 @kind wide;
  #L4cecac.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4cecb0.  call `produced`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4cecb6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4cecba.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4cecc0.  v0:= -v0 @kind int;
  #L4cecc2.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cecc8.  v0:= temp;
  #L4cecca.  if v0 != 0 then goto L4cec86;
  #L4cecce.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cebc0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.rxjava3.functions.BooleanSupplier` @kind object;
  #L4cebc4.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/rxjava3/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L4cebca.  v0:= temp;
  #L4cebcc.  if v0 == 0 then goto L4cebdc;
  #L4cebd0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cebd4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cebda.  goto L4cebe2;
  #L4cebdc.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @kind virtual;
  #L4cebe2.  return @kind void;
  #L4cebe4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cebe6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cebec.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cebf0.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cebf6.  return @kind void;
  catch `java.lang.Throwable` @[L4cebc0..L4cebcc] goto L4cebe4;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cec14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cec18.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cec1e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cec30.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` @kind wide;
  #L4cec34.  v2:= 1L;
  #L4cec38.  v0:= v0 + v2 @kind long;
  #L4cec3a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` := v0 @kind wide;
  #L4cec3e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cec42.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cec48.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cec5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4cec60.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4cec66.  return @kind void;
}
