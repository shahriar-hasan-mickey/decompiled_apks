record `io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNext$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4eded8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4edede.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4edee2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edef4.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4edef8.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4edefe.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L4edf02.  if v0 != 0 then goto L4edf1a;
  #L4edf06.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4edf0a.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4edf10.  goto L4edf1a;
  #L4edf12.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4edf14.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4edf1a.  return @kind void;
  catch `java.lang.Throwable` @[L4edf06..L4edf10] goto L4edf12;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNext$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4edeac.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4edeb0.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4edeb6.  v0:= temp @kind object;
  #L4edeb8.  if v0 == 0 then goto L4edec6;
  #L4edebc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4edec0.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4edec6.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNext$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4ede90.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4ede96.  v1:= temp;
  #L4ede98.  return v1;
}
