record `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap;.<init>:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c99a0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4c99a6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c99aa.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4c99bc.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4c99c0.  if v0 == 0 then goto L4c99e2;
  #L4c99c4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4c99c8.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a`;
  #L4c99cc.  v4:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v4 @kind object;
  #L4c99d0.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c99d4.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4c99da.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4c99e0.  goto L4c99fa;
  #L4c99e2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4c99e6.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$b`;
  #L4c99ea.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c99ee.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4c99f4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4c99fa.  return @kind void;
}
