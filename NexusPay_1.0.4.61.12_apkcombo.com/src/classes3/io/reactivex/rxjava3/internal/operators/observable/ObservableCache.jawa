record `io.reactivex.rxjava3.internal.operators.observable.ObservableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.observable.a` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e9bd4.  v0:= 0I;
  #L4e9bd6.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v0];
  #L4e9bda.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] := v1 @kind object;
  #L4e9bde.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v0];
  #L4e9be2.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] := v0 @kind object;
  #L4e9be6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.rxjava3.core.Observable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/rxjava3/core/Observable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4e9bf8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/a;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind direct;
  #L4e9bfe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @type ^`int` := v2;
  #L4e9c02.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4e9c06.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4e9c0c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4e9c10.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b`;
  #L4e9c14.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$b;.<init>:(I)V` @kind direct;
  #L4e9c1a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4e9c1e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4e9c22.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e9c26.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4e9c2a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4e9c30.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e9c34.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e9c48.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9c4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e9c52.  v0:= temp @kind object;
  #L4e9c54.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L4e9c58.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4e9c5c.  if v0 != v1 then goto L4e9c62;
  #L4e9c60.  return @kind void;
  #L4e9c62.  v1:= length @variable v0;
  #L4e9c64.  v2:= v1 + 1;
  #L4e9c68.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v2];
  #L4e9c6c.  v3:= 0I;
  #L4e9c6e.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e9c74.  v2[v1]:= v5 @kind object;
  #L4e9c78.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9c7c.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e9c82.  v0:= temp;
  #L4e9c84.  if v0 == 0 then goto L4e9c48;
  #L4e9c88.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e9dc8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9dcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e9dd2.  v0:= temp @kind object;
  #L4e9dd4.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L4e9dd8.  v1:= length @variable v0;
  #L4e9dda.  if v1 != 0 then goto L4e9de0;
  #L4e9dde.  return @kind void;
  #L4e9de0.  v2:= -1I;
  #L4e9de2.  v3:= 0I;
  #L4e9de4.  v4:= 0I;
  #L4e9de6.  if v4 >= v1 then goto L4e9dfc;
  #L4e9dea.  v5:= v0[v4] @kind object;
  #L4e9dee.  if v5 != v7 then goto L4e9df6;
  #L4e9df2.  v2:= v4;
  #L4e9df4.  goto L4e9dfc;
  #L4e9df6.  v4:= v4 + 1;
  #L4e9dfa.  goto L4e9de6;
  #L4e9dfc.  if v2 >= 0 then goto L4e9e02;
  #L4e9e00.  return @kind void;
  #L4e9e02.  v4:= 1I;
  #L4e9e04.  if v1 != v4 then goto L4e9e0e;
  #L4e9e08.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4e9e0c.  goto L4e9e2c;
  #L4e9e0e.  v5:= v1 + -1;
  #L4e9e12.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v5];
  #L4e9e16.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e9e1c.  v3:= v2 + 1;
  #L4e9e20.  v1:= v1 - v2 @kind int;
  #L4e9e22.  v1:= v1 - v4 @kind int;
  #L4e9e24.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4e9e2a.  v1:= v5 @kind object;
  #L4e9e2c.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9e30.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e9e36.  v0:= temp;
  #L4e9e38.  if v0 == 0 then goto L4e9dc8;
  #L4e9e3c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v14 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a` v15 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4e9e50.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e9e56.  v0:= temp;
  #L4e9e58.  if v0 == 0 then goto L4e9e5e;
  #L4e9e5c.  return @kind void;
  #L4e9e5e.  v0:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.e` @type ^`long` @kind wide;
  #L4e9e62.  v2:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.d` @type ^`int`;
  #L4e9e66.  v3:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4e9e6a.  v4:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e9e6e.  v5:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @type ^`int`;
  #L4e9e72.  v6:= 1I;
  #L4e9e74.  v7:= 1I;
  #L4e9e76.  v8:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.f` @type ^`boolean` @kind boolean;
  #L4e9e7a.  v9:= 0I;
  #L4e9e7c.  if v8 == 0 then goto L4e9e86;
  #L4e9e80.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v9 @kind object;
  #L4e9e84.  return @kind void;
  #L4e9e86.  v8:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @type ^`boolean` @kind boolean;
  #L4e9e8a.  v10:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @type ^`long` @kind wide;
  #L4e9e8e.  v12:= 0I;
  #L4e9e90.  v13:= lcmp(v10, v0);
  #L4e9e94.  if v13 != 0 then goto L4e9e9c;
  #L4e9e98.  v10:= 1I;
  #L4e9e9a.  goto L4e9e9e;
  #L4e9e9c.  v10:= 0I;
  #L4e9e9e.  if v8 == 0 then goto L4e9ec2;
  #L4e9ea2.  if v10 == 0 then goto L4e9ec2;
  #L4e9ea6.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v9 @kind object;
  #L4e9eaa.  v15:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.h` @type ^`java.lang.Throwable` @kind object;
  #L4e9eae.  if v15 == 0 then goto L4e9eba;
  #L4e9eb2.  call `onError`(v4, v15) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e9eb8.  goto L4e9ec0;
  #L4e9eba.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4e9ec0.  return @kind void;
  #L4e9ec2.  if v10 != 0 then goto L4e9eea;
  #L4e9ec6.  if v2 != v5 then goto L4e9ed2;
  #L4e9eca.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4e9ece.  v3:= v2 @kind object;
  #L4e9ed0.  v2:= 0I;
  #L4e9ed2.  v8:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4e9ed6.  v8:= v8[v2] @kind object;
  #L4e9eda.  call `onNext`(v4, v8) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e9ee0.  v2:= v2 + v6 @kind int;
  #L4e9ee2.  v8:= 1L;
  #L4e9ee6.  v0:= v0 + v8 @kind long;
  #L4e9ee8.  goto L4e9e76;
  #L4e9eea.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.e` @type ^`long` := v0 @kind wide;
  #L4e9eee.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.d` @type ^`int` := v2;
  #L4e9ef2.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v3 @kind object;
  #L4e9ef6.  v7:= -v7 @kind int;
  #L4e9ef8.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e9efe.  v7:= temp;
  #L4e9f00.  if v7 != 0 then goto L4e9e76;
  #L4e9f04.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e9c9c.  v0:= 1I;
  #L4e9c9e.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @type ^`boolean` := v0 @kind boolean;
  #L4e9ca2.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9ca6.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4e9caa.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e9cb0.  v0:= temp @kind object;
  #L4e9cb2.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L4e9cb6.  v1:= length @variable v0;
  #L4e9cb8.  v2:= 0I;
  #L4e9cba.  if v2 >= v1 then goto L4e9cce;
  #L4e9cbe.  v3:= v0[v2] @kind object;
  #L4e9cc2.  call `c`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4e9cc8.  v2:= v2 + 1;
  #L4e9ccc.  goto L4e9cba;
  #L4e9cce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e9ce0.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.h` @type ^`java.lang.Throwable` := v4 @kind object;
  #L4e9ce4.  v4:= 1I;
  #L4e9ce6.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @type ^`boolean` := v4 @kind boolean;
  #L4e9cea.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9cee.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4e9cf2.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e9cf8.  v4:= temp @kind object;
  #L4e9cfa.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v4 @kind object;
  #L4e9cfe.  v0:= length @variable v4;
  #L4e9d00.  v1:= 0I;
  #L4e9d02.  if v1 >= v0 then goto L4e9d16;
  #L4e9d06.  v2:= v4[v1] @kind object;
  #L4e9d0a.  call `c`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4e9d10.  v1:= v1 + 1;
  #L4e9d14.  goto L4e9d02;
  #L4e9d16.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e9d28.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @type ^`int`;
  #L4e9d2c.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @type ^`int`;
  #L4e9d30.  v2:= 0I;
  #L4e9d32.  v3:= 1I;
  #L4e9d34.  if v0 != v1 then goto L4e9d5c;
  #L4e9d38.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b`;
  #L4e9d3c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$b;.<init>:(I)V` @kind direct;
  #L4e9d42.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4e9d46.  v0[v2]:= v6 @kind object;
  #L4e9d4a.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @type ^`int` := v3;
  #L4e9d4e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4e9d52.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4e9d56.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4e9d5a.  goto L4e9d6e;
  #L4e9d5c.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4e9d60.  v1:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4e9d64.  v1[v0]:= v6 @kind object;
  #L4e9d68.  v0:= v0 + v3 @kind int;
  #L4e9d6a.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @type ^`int` := v0;
  #L4e9d6e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @type ^`long` @kind wide;
  #L4e9d72.  v3:= 1L;
  #L4e9d76.  v0:= v0 + v3 @kind long;
  #L4e9d78.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @type ^`long` := v0 @kind wide;
  #L4e9d7c.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9d80.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e9d86.  v6:= temp @kind object;
  #L4e9d88.  v6:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v6 @kind object;
  #L4e9d8c.  v0:= length @variable v6;
  #L4e9d8e.  if v2 >= v0 then goto L4e9da2;
  #L4e9d92.  v1:= v6[v2] @kind object;
  #L4e9d96.  call `c`(v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4e9d9c.  v2:= v2 + 1;
  #L4e9da0.  goto L4e9d8e;
  #L4e9da2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e9db4.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4e9f18.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`;
  #L4e9f1c.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;)V` @kind direct;
  #L4e9f22.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e9f28.  call `a`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4e9f2e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4e9f32.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4e9f38.  v4:= temp;
  #L4e9f3a.  if v4 != 0 then goto L4e9f5e;
  #L4e9f3e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4e9f42.  v1:= 0I;
  #L4e9f44.  v2:= 1I;
  #L4e9f46.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4e9f4c.  v4:= temp;
  #L4e9f4e.  if v4 == 0 then goto L4e9f5e;
  #L4e9f52.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.a.source` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4e9f56.  call `subscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e9f5c.  goto L4e9f64;
  #L4e9f5e.  call `c`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4e9f64.  return @kind void;
}
