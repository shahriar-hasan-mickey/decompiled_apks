record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0c78.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4c0c7e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4c0c82.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0c94.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c0c98.  if v0 == 0 then goto L4c0c9e;
  #L4c0c9c.  return @kind void;
  #L4c0c9e.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c0ca2.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c0ca8.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4c0cac.  if v0 != 0 then goto L4c0cc4;
  #L4c0cb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c0cb4.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c0cba.  goto L4c0cc4;
  #L4c0cbc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0cbe.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c0cc4.  return @kind void;
  catch `java.lang.Throwable` @[L4c0cb0..L4c0cba] goto L4c0cbc;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c0c4c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c0c50.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c0c56.  v0:= temp @kind object;
  #L4c0c58.  if v0 == 0 then goto L4c0c66;
  #L4c0c5c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c0c60.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c0c66.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoAfterNext$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c0c30.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c0c36.  v1:= temp;
  #L4c0c38.  return v1;
}
