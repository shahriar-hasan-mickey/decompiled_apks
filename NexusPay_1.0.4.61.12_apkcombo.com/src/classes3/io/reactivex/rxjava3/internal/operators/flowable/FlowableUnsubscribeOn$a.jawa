record `io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d6700.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d6706.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d670a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4d670e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d6720.  v0:= 0I;
  #L4d6722.  v1:= 1I;
  #L4d6724.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d672a.  v0:= temp;
  #L4d672c.  if v0 == 0 then goto L4d6744;
  #L4d6730.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d6734.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a$a`;
  #L4d6738.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;)V` @kind direct;
  #L4d673e.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d6744.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6758.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d675e.  v0:= temp;
  #L4d6760.  if v0 != 0 then goto L4d676e;
  #L4d6764.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6768.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d676e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6780.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d6786.  v0:= temp;
  #L4d6788.  if v0 == 0 then goto L4d6794;
  #L4d678c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d6792.  return @kind void;
  #L4d6794.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6798.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d679e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d67b0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d67b6.  v0:= temp;
  #L4d67b8.  if v0 != 0 then goto L4d67c6;
  #L4d67bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d67c0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d67c6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d67d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d67dc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d67e2.  v0:= temp;
  #L4d67e4.  if v0 == 0 then goto L4d67f6;
  #L4d67e8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d67ec.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d67f0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d67f6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUnsubscribeOn$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6808.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d680c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d6812.  return @kind void;
}
