record `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f46b0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f46b6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f46ba.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f46be.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f46c4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4f46c8.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a`;
  #L4f46cc.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;)V` @kind direct;
  #L4f46d2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` := v1 @kind object;
  #L4f46d6.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4f46da.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4f46e0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4f46e4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4f4744.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f474a.  v0:= temp;
  #L4f474c.  if v0 != 0 then goto L4f4756;
  #L4f4750.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4f4756.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f4768.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f476c.  v1:= 1I;
  #L4f476e.  v2:= 1I;
  #L4f4770.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.g` @type ^`boolean` @kind boolean;
  #L4f4774.  v4:= 0I;
  #L4f4776.  if v3 == 0 then goto L4f4784;
  #L4f477a.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4f477e.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4f4782.  return @kind void;
  #L4f4784.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4788.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f478e.  v3:= temp @kind object;
  #L4f4790.  if v3 == 0 then goto L4f47a8;
  #L4f4794.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4f4798.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4f479c.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f47a0.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f47a6.  return @kind void;
  #L4f47a8.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int`;
  #L4f47ac.  v5:= 2I;
  #L4f47ae.  if v3 != v1 then goto L4f47c6;
  #L4f47b2.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` @kind object;
  #L4f47b6.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4f47ba.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v5;
  #L4f47be.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f47c4.  v3:= 2I;
  #L4f47c6.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4f47ca.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4f47ce.  if v7 == 0 then goto L4f47dc;
  #L4f47d2.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4f47d8.  v7:= temp @kind object;
  #L4f47da.  goto L4f47de;
  #L4f47dc.  v7:= v4 @kind object;
  #L4f47de.  if v7 != 0 then goto L4f47e6;
  #L4f47e2.  v8:= 1I;
  #L4f47e4.  goto L4f47e8;
  #L4f47e6.  v8:= 0I;
  #L4f47e8.  if v6 == 0 then goto L4f4800;
  #L4f47ec.  if v8 == 0 then goto L4f4800;
  #L4f47f0.  if v3 != v5 then goto L4f4800;
  #L4f47f4.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4f47f8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f47fe.  return @kind void;
  #L4f4800.  if v8 == 0 then goto L4f4814;
  #L4f4804.  v2:= -v2 @kind int;
  #L4f4806.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f480c.  v2:= temp;
  #L4f480e.  if v2 != 0 then goto L4f4770;
  #L4f4812.  return @kind void;
  #L4f4814.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f481a.  goto L4f4770;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f4680.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4f4684.  if v0 != 0 then goto L4f469e;
  #L4f4688.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f468c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4f4692.  v1:= temp;
  #L4f4694.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f469a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4f469e.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4f48f8.  v0:= 2I;
  #L4f48fa.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v0;
  #L4f48fe.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4f4904.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f46f8.  v0:= 1I;
  #L4f46fa.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4f46fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4702.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4708.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` @kind object;
  #L4f470c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4712.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4716.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4f471c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f4722.  v0:= temp;
  #L4f4724.  if v0 != 0 then goto L4f4732;
  #L4f4728.  v0:= 0I;
  #L4f472a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4f472e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v0 @kind object;
  #L4f4732.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4f4918.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f491c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4f4922.  v2:= temp;
  #L4f4924.  if v2 == 0 then goto L4f4938;
  #L4f4928.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f492c.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4932.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4f4938.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f494c.  v0:= 0I;
  #L4f494e.  v1:= 1I;
  #L4f4950.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f4956.  v0:= temp;
  #L4f4958.  if v0 == 0 then goto L4f496e;
  #L4f495c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f4960.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f4966.  v3:= 2I;
  #L4f4968.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v3;
  #L4f496c.  goto L4f4984;
  #L4f496e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v3 @kind object;
  #L4f4972.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v1;
  #L4f4976.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f497c.  v3:= temp;
  #L4f497e.  if v3 == 0 then goto L4f4984;
  #L4f4982.  return @kind void;
  #L4f4984.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4f498a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4654.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4658.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f465e.  v0:= temp @kind object;
  #L4f4660.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4f4664.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f466a.  v0:= temp;
  #L4f466c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f482c.  v0:= 1I;
  #L4f482e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4f4832.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4f4838.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f484c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4850.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4f4856.  v2:= temp;
  #L4f4858.  if v2 == 0 then goto L4f486c;
  #L4f485c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` @kind object;
  #L4f4860.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4866.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4f486c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f4880.  v0:= 0I;
  #L4f4882.  v1:= 1I;
  #L4f4884.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f488a.  v0:= temp;
  #L4f488c.  if v0 == 0 then goto L4f48a8;
  #L4f4890.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f4894.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f489a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f48a0.  v3:= temp;
  #L4f48a2.  if v3 != 0 then goto L4f48c4;
  #L4f48a6.  return @kind void;
  #L4f48a8.  call temp:= `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4f48ae.  v0:= temp @kind object;
  #L4f48b0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4f48b6.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f48bc.  v3:= temp;
  #L4f48be.  if v3 == 0 then goto L4f48c4;
  #L4f48c2.  return @kind void;
  #L4f48c4.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4f48ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f48dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f48e0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f48e6.  return @kind void;
}
