record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b9a8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b9a92.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` := v1 @kind object;
  #L4b9a96.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4b9aa8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b9aae.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9a64.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9a6a.  v0:= temp @kind object;
  #L4b9a6c.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b9a70.  if v0 != v1 then goto L4b9a78;
  #L4b9a74.  v0:= 1I;
  #L4b9a76.  goto L4b9a7a;
  #L4b9a78.  v0:= 0I;
  #L4b9a7a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9ac0.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b9ac4.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4b9aca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L4b9ace.  call `e`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;)V` @kind virtual;
  #L4b9ad4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9ae8.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b9aec.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4b9af2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L4b9af6.  call `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L4b9afc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9b10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L4b9b14.  call `d`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L4b9b1a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9b2c.  v0:= 9223372036854775807L;
  #L4b9b36.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4b9b3c.  return @kind void;
}
