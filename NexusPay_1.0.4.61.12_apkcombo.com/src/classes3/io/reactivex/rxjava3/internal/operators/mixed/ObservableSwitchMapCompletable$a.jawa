record `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e5954.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`;
  #L4e5958.  v1:= 0I;
  #L4e595a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;)V` @kind direct;
  #L4e5960.  `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` := v0 @kind object;
  #L4e5964.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e5978.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e597e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4e5982.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e5986.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4e598a.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e598e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e5994.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e5998.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e599c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e59a2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e59a6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e59e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e59e8.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L4e59ec.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e59f2.  v0:= temp @kind object;
  #L4e59f4.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`) v0 @kind object;
  #L4e59f8.  if v0 == 0 then goto L4e5a0a;
  #L4e59fc.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L4e5a00.  if v0 == v1 then goto L4e5a0a;
  #L4e5a04.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e5a0a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.b:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e5a1c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5a20.  v1:= 0I;
  #L4e5a22.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e5a28.  v3:= temp;
  #L4e5a2a.  if v3 == 0 then goto L4e5a44;
  #L4e5a2e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4e5a32.  if v3 == 0 then goto L4e5a44;
  #L4e5a36.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5a3a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e5a3e.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e5a44.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e5a58.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5a5c.  v1:= 0I;
  #L4e5a5e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e5a64.  v3:= temp;
  #L4e5a66.  if v3 == 0 then goto L4e5aba;
  #L4e5a6a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5a6e.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e5a74.  v3:= temp;
  #L4e5a76.  if v3 == 0 then goto L4e5ac0;
  #L4e5a7a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4e5a7e.  if v3 == 0 then goto L4e5a9a;
  #L4e5a82.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4e5a86.  if v3 == 0 then goto L4e5ac0;
  #L4e5a8a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5a8e.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e5a92.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e5a98.  goto L4e5ac0;
  #L4e5a9a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5a9e.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e5aa4.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4e5aaa.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5aae.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e5ab2.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e5ab8.  goto L4e5ac0;
  #L4e5aba.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e5ac0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e59b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e59bc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e59c2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4e59c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e59cc.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e59d2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e5928.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e592c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5932.  v0:= temp @kind object;
  #L4e5934.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L4e5938.  if v0 != v1 then goto L4e5940;
  #L4e593c.  v0:= 1I;
  #L4e593e.  goto L4e5942;
  #L4e5940.  v0:= 0I;
  #L4e5942.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e5ad4.  v0:= 1I;
  #L4e5ad6.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4e5ada.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5ade.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5ae4.  v0:= temp @kind object;
  #L4e5ae6.  if v0 != 0 then goto L4e5af8;
  #L4e5aea.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5aee.  v1:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e5af2.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e5af8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5b0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5b10.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e5b16.  v2:= temp;
  #L4e5b18.  if v2 == 0 then goto L4e5b40;
  #L4e5b1c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4e5b20.  if v2 == 0 then goto L4e5b2c;
  #L4e5b24.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onComplete:()V` @kind virtual;
  #L4e5b2a.  goto L4e5b40;
  #L4e5b2c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4e5b32.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5b36.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e5b3a.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e5b40.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e5b54.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e5b58.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e5b5e.  v4:= temp @kind object;
  #L4e5b60.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L4e5b64.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e5b6a.  v4:= temp @kind object;
  #L4e5b6c.  v4:= (`io.reactivex.rxjava3.core.CompletableSource`) v4 @kind object;
  #L4e5b70.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`;
  #L4e5b74.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;)V` @kind direct;
  #L4e5b7a.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5b7e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5b84.  v1:= temp @kind object;
  #L4e5b86.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`) v1 @kind object;
  #L4e5b8a.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L4e5b8e.  if v1 != v2 then goto L4e5b94;
  #L4e5b92.  goto L4e5bb4;
  #L4e5b94.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5b98.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e5b9e.  v2:= temp;
  #L4e5ba0.  if v2 == 0 then goto L4e5b7a;
  #L4e5ba4.  if v1 == 0 then goto L4e5bae;
  #L4e5ba8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e5bae.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4e5bb4.  return @kind void;
  #L4e5bb6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e5bb8.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e5bbe.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5bc2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e5bc8.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e5bce.  return @kind void;
  catch `java.lang.Throwable` @[L4e5b54..L4e5b70] goto L4e5bb6;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5bec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5bf0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e5bf6.  v0:= temp;
  #L4e5bf8.  if v0 == 0 then goto L4e5c0a;
  #L4e5bfc.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4e5c00.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e5c04.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e5c0a.  return @kind void;
}
