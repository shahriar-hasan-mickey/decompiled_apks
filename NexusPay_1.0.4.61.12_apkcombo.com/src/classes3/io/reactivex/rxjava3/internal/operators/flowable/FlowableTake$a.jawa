record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d3d74.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d3d7a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d3d7e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v2 @kind wide;
  #L4d3d82.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4d3d88.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3d9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3da0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d3da6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d3db8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4d3dbc.  v2:= 0L;
  #L4d3dc0.  v4:= lcmp(v0, v2);
  #L4d3dc4.  if v4 <= 0 then goto L4d3dd6;
  #L4d3dc8.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v2 @kind wide;
  #L4d3dcc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3dd0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d3dd6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d3de8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4d3dec.  v2:= 0L;
  #L4d3df0.  v4:= lcmp(v0, v2);
  #L4d3df4.  if v4 <= 0 then goto L4d3e08;
  #L4d3df8.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v2 @kind wide;
  #L4d3dfc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3e00.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d3e06.  goto L4d3e0e;
  #L4d3e08.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d3e0e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d3e20.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4d3e24.  v2:= 0L;
  #L4d3e28.  v4:= lcmp(v0, v2);
  #L4d3e2c.  if v4 <= 0 then goto L4d3e60;
  #L4d3e30.  v4:= 1L;
  #L4d3e34.  v0:= v0 - v4 @kind long;
  #L4d3e36.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v0 @kind wide;
  #L4d3e3a.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3e3e.  call `onNext`(v4, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d3e44.  v7:= lcmp(v0, v2);
  #L4d3e48.  if v7 != 0 then goto L4d3e60;
  #L4d3e4c.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3e50.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d3e56.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3e5a.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d3e60.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d3e74.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3e78.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d3e7e.  v0:= temp;
  #L4d3e80.  if v0 == 0 then goto L4d3eb4;
  #L4d3e84.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L4d3e88.  v2:= 0L;
  #L4d3e8c.  v4:= lcmp(v0, v2);
  #L4d3e90.  if v4 != 0 then goto L4d3ea6;
  #L4d3e94.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d3e9a.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3e9e.  call `complete`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4d3ea4.  goto L4d3eb4;
  #L4d3ea6.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L4d3eaa.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3eae.  call `onSubscribe`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d3eb4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTake$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d3ec8.  call temp:= `validate`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d3ece.  v0:= temp;
  #L4d3ed0.  if v0 == 0 then goto L4d3f0c;
  #L4d3ed4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d3eda.  v0:= temp @kind wide;
  #L4d3edc.  v2:= 0L;
  #L4d3ee0.  v4:= lcmp(v0, v2);
  #L4d3ee4.  if v4 != 0 then goto L4d3eea;
  #L4d3ee8.  goto L4d3f0c;
  #L4d3eea.  call temp:= `min`(v0, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4d3ef0.  v2:= temp @kind wide;
  #L4d3ef2.  v4:= v0 - v2 @kind long;
  #L4d3ef6.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d3efc.  v0:= temp;
  #L4d3efe.  if v0 == 0 then goto L4d3ed4;
  #L4d3f02.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTake$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3f06.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d3f0c.  return @kind void;
}
