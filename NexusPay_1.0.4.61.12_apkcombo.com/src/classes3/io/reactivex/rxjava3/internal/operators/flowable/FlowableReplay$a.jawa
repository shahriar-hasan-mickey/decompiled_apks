record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4cf134.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cf13a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.a` @type ^`boolean` := v4 @kind boolean;
  #L4cf13e.  v4:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L4cf142.  v0:= 0I;
  #L4cf144.  v1:= 0L;
  #L4cf148.  call `<init>`(v4, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4cf14e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` := v4 @kind object;
  #L4cf152.  call `set`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf158.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cf1e0.  call temp:= `error`(v6) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4cf1e6.  v6:= temp @kind object;
  #L4cf1e8.  v0:= 1I;
  #L4cf1ea.  call temp:= `e`(v5, v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @kind virtual;
  #L4cf1f0.  v6:= temp @kind object;
  #L4cf1f2.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L4cf1f6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` @kind wide;
  #L4cf1fa.  v3:= 1L;
  #L4cf1fe.  v1:= v1 + v3 @kind long;
  #L4cf200.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` := v1 @kind wide;
  #L4cf204.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4cf20a.  call `d`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L4cf210.  call `l`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.l:()V` @kind virtual;
  #L4cf216.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cf228.  call temp:= `next`(v6) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4cf22e.  v6:= temp @kind object;
  #L4cf230.  v0:= 0I;
  #L4cf232.  call temp:= `e`(v5, v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @kind virtual;
  #L4cf238.  v6:= temp @kind object;
  #L4cf23a.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L4cf23e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` @kind wide;
  #L4cf242.  v3:= 1L;
  #L4cf246.  v1:= v1 + v3 @kind long;
  #L4cf248.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` := v1 @kind wide;
  #L4cf24c.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4cf252.  call `d`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L4cf258.  call `k`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.k:()V` @kind virtual;
  #L4cf25e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v13 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4cf2c0.  @monitorenter v14
  #L4cf2c2.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` @kind boolean;
  #L4cf2c6.  v1:= 1I;
  #L4cf2c8.  if v0 == 0 then goto L4cf2d4;
  #L4cf2cc.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v1 @kind boolean;
  #L4cf2d0.  @monitorexit v14
  #L4cf2d2.  return @kind void;
  #L4cf2d4.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v1 @kind boolean;
  #L4cf2d8.  @monitorexit v14
  #L4cf2da.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cf2e0.  v2:= temp @kind wide;
  #L4cf2e2.  v4:= 9223372036854775807L;
  #L4cf2ec.  v0:= 0I;
  #L4cf2ee.  v6:= lcmp(v2, v4);
  #L4cf2f2.  if v6 != 0 then goto L4cf2fa;
  #L4cf2f6.  v4:= 1I;
  #L4cf2f8.  goto L4cf2fc;
  #L4cf2fa.  v4:= 0I;
  #L4cf2fc.  call temp:= `a`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.a:()Ljava/lang/Object;` @kind virtual;
  #L4cf302.  v5:= temp @kind object;
  #L4cf304.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v5 @kind object;
  #L4cf308.  v6:= 0L;
  #L4cf30c.  if v5 != 0 then goto L4cf32a;
  #L4cf310.  call temp:= `f`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;` @kind virtual;
  #L4cf316.  v5:= temp @kind object;
  #L4cf318.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4cf31c.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cf320.  v9:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.b` @type ^`long` @kind wide;
  #L4cf324.  call temp:= `add`(v8, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cf32a.  v8:= v6 @kind wide;
  #L4cf32c.  v10:= 0I;
  #L4cf32e.  v11:= lcmp(v2, v6);
  #L4cf332.  if v11 == 0 then goto L4cf3c4;
  #L4cf336.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L4cf33c.  v12:= temp;
  #L4cf33e.  if v12 == 0 then goto L4cf348;
  #L4cf342.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L4cf346.  return @kind void;
  #L4cf348.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf34e.  v12:= temp @kind object;
  #L4cf350.  v12:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v12 @kind object;
  #L4cf354.  if v12 == 0 then goto L4cf3c4;
  #L4cf358.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L4cf35c.  call temp:= `g`(v13, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cf362.  v5:= temp @kind object;
  #L4cf364.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cf368.  call temp:= `accept`(v5, v11) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L4cf36e.  v11:= temp;
  #L4cf370.  if v11 == 0 then goto L4cf37a;
  #L4cf374.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L4cf378.  return @kind void;
  #L4cf37a.  v10:= 1L;
  #L4cf37e.  v8:= v8 + v10 @kind long;
  #L4cf380.  v2:= v2 - v10 @kind long;
  #L4cf382.  v5:= v12 @kind object;
  #L4cf384.  goto L4cf32c;
  #L4cf386.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf388.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf38e.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L4cf392.  call `dispose`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.dispose:()V` @kind virtual;
  #L4cf398.  call temp:= `isError`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4cf39e.  v1:= temp;
  #L4cf3a0.  if v1 != 0 then goto L4cf3bc;
  #L4cf3a4.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4cf3aa.  v1:= temp;
  #L4cf3ac.  if v1 != 0 then goto L4cf3bc;
  #L4cf3b0.  v14:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cf3b4.  call `onError`(v14, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cf3ba.  goto L4cf3c2;
  #L4cf3bc.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cf3c2.  return @kind void;
  #L4cf3c4.  if v11 != 0 then goto L4cf3da;
  #L4cf3c8.  call temp:= `isDisposed`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L4cf3ce.  v2:= temp;
  #L4cf3d0.  if v2 == 0 then goto L4cf3da;
  #L4cf3d4.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v10 @kind object;
  #L4cf3d8.  return @kind void;
  #L4cf3da.  v2:= lcmp(v8, v6);
  #L4cf3de.  if v2 == 0 then goto L4cf3f0;
  #L4cf3e2.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4cf3e6.  if v4 != 0 then goto L4cf3f0;
  #L4cf3ea.  call temp:= `b`(v14, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.b:(J)J` @kind virtual;
  #L4cf3f0.  @monitorenter v14
  #L4cf3f2.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` @kind boolean;
  #L4cf3f6.  if v2 != 0 then goto L4cf402;
  #L4cf3fa.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4cf3fe.  @monitorexit v14
  #L4cf400.  return @kind void;
  #L4cf402.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v0 @kind boolean;
  #L4cf406.  @monitorexit v14
  #L4cf408.  goto L4cf2da;
  #L4cf40c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf40e.  @monitorexit v14
  #L4cf410.  throw v0;
  #L4cf412.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cf414.  @monitorexit v14
  #L4cf416.  throw v0;
  catch `java.lang.Throwable` @[L4cf2c2..L4cf2da] goto L4cf412;
  catch `java.lang.Throwable` @[L4cf364..L4cf378] goto L4cf386;
  catch `java.lang.Throwable` @[L4cf3f2..L4cf410] goto L4cf40c;
  catch `java.lang.Throwable` @[L4cf414..L4cf416] goto L4cf412;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cf198.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4cf19e.  v0:= temp @kind object;
  #L4cf1a0.  v1:= 1I;
  #L4cf1a2.  call temp:= `e`(v6, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @kind virtual;
  #L4cf1a8.  v0:= temp @kind object;
  #L4cf1aa.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L4cf1ae.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` @kind wide;
  #L4cf1b2.  v4:= 1L;
  #L4cf1b6.  v2:= v2 + v4 @kind long;
  #L4cf1b8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.d` @type ^`long` := v2 @kind wide;
  #L4cf1bc.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4cf1c2.  call `d`(v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L4cf1c8.  call `l`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.l:()V` @kind virtual;
  #L4cf1ce.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L4cf16c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` @kind object;
  #L4cf170.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf176.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` := v2 @kind object;
  #L4cf17a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L4cf17e.  v2:= v2 + 1;
  #L4cf182.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v2;
  #L4cf186.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4cf10c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;` @AccessFlag  {
    temp;
    v0;

  #L4cf0ec.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf0f2.  v0:= temp @kind object;
  #L4cf0f4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L4cf0f8.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4cf120.  return v1 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.h:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4cf270.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf276.  v0:= temp @kind object;
  #L4cf278.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L4cf27c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf282.  v0:= temp @kind object;
  #L4cf284.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L4cf288.  if v0 == 0 then goto L4cf2a0;
  #L4cf28c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L4cf290.  v1:= v1 + -1;
  #L4cf294.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v1;
  #L4cf298.  call `i`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L4cf29e.  return @kind void;
  #L4cf2a0.  v0:= new `java.lang.IllegalStateException`;
  #L4cf2a4.  v1:= "Empty list!" @kind object;
  #L4cf2a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cf2ae.  throw v0;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cf454.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.a` @type ^`boolean` @kind boolean;
  #L4cf458.  if v0 == 0 then goto L4cf47c;
  #L4cf45c.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L4cf460.  v1:= 0I;
  #L4cf462.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.b` @type ^`long` @kind wide;
  #L4cf466.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4cf46c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf472.  v5:= temp @kind object;
  #L4cf474.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf47a.  v5:= v0 @kind object;
  #L4cf47c.  call `set`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf482.  return @kind void;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.j:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cf494.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf49a.  v0:= temp @kind object;
  #L4cf49c.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v0 @kind object;
  #L4cf4a0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L4cf4a4.  if v1 == 0 then goto L4cf4cc;
  #L4cf4a8.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`;
  #L4cf4ac.  v2:= 0I;
  #L4cf4ae.  v3:= 0L;
  #L4cf4b2.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4cf4b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf4be.  v0:= temp @kind object;
  #L4cf4c0.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf4c6.  call `set`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf4cc.  return @kind void;
}
procedure `void` `k`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.k:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.l:()V` @AccessFlag  {
    temp;

  #L4cf4e0.  call `j`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.j:()V` @kind virtual;
  #L4cf4e6.  return @kind void;
}
