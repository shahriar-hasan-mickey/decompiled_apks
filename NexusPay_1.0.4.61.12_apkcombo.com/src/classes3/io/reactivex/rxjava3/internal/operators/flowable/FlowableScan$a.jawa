record `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d12d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d12da.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d12de.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4d12e2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d12f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d12f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d12fe.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1310.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L4d1314.  if v0 == 0 then goto L4d131a;
  #L4d1318.  return @kind void;
  #L4d131a.  v0:= 1I;
  #L4d131c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4d1320.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1324.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d132a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d133c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L4d1340.  if v0 == 0 then goto L4d134c;
  #L4d1344.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d134a.  return @kind void;
  #L4d134c.  v0:= 1I;
  #L4d134e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4d1352.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1356.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d135c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d1370.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L4d1374.  if v0 == 0 then goto L4d137a;
  #L4d1378.  return @kind void;
  #L4d137a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d137e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` @kind object;
  #L4d1382.  if v1 != 0 then goto L4d1392;
  #L4d1386.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L4d138a.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d1390.  goto L4d13b4;
  #L4d1392.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d1396.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d139c.  v4:= temp @kind object;
  #L4d139e.  v1:= "The value returned by the accumulator is null" @kind object;
  #L4d13a2.  call temp:= `requireNonNull`(v4, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d13a8.  v4:= temp @kind object;
  #L4d13aa.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L4d13ae.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d13b4.  return @kind void;
  #L4d13b6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d13b8.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d13be.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d13c2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d13c8.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d13ce.  return @kind void;
  catch `java.lang.Throwable` @[L4d1392..L4d13aa] goto L4d13b6;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d13ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d13f0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d13f6.  v0:= temp;
  #L4d13f8.  if v0 == 0 then goto L4d140a;
  #L4d13fc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d1400.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1404.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d140a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d141c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1420.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1426.  return @kind void;
}
