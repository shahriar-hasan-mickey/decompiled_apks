record `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d4f08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d4f0e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d4f12.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.b` @type ^`long` := v2 @kind wide;
  #L4d4f16.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4d4f1a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4d4f1e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.e` @type ^`boolean` := v6 @kind boolean;
  #L4d4f22.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d4f26.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d4f2c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d4f30.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d4f34.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d4f3a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d4f3e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4d4f94.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d4f9a.  v0:= temp;
  #L4d4f9c.  if v0 == 0 then goto L4d4fa2;
  #L4d4fa0.  return @kind void;
  #L4d4fa2.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d4fa6.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d4faa.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4fae.  v3:= 1I;
  #L4d4fb0.  v4:= 1I;
  #L4d4fb2.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L4d4fb6.  v6:= 0I;
  #L4d4fb8.  if v5 == 0 then goto L4d4fc4;
  #L4d4fbc.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d4fc2.  return @kind void;
  #L4d4fc4.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @type ^`boolean` @kind boolean;
  #L4d4fc8.  if v5 == 0 then goto L4d4ff0;
  #L4d4fcc.  v7:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4d4fd0.  if v7 == 0 then goto L4d4ff0;
  #L4d4fd4.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d4fda.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4d4fde.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d4fe4.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d4fe8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d4fee.  return @kind void;
  #L4d4ff0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d4ff6.  v7:= temp @kind object;
  #L4d4ff8.  v8:= 0I;
  #L4d4ffa.  if v7 != 0 then goto L4d5002;
  #L4d4ffe.  v7:= 1I;
  #L4d5000.  goto L4d5004;
  #L4d5002.  v7:= 0I;
  #L4d5004.  v9:= 1L;
  #L4d5008.  if v5 == 0 then goto L4d5076;
  #L4d500c.  if v7 != 0 then goto L4d505e;
  #L4d5010.  v3:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.e` @type ^`boolean` @kind boolean;
  #L4d5014.  if v3 == 0 then goto L4d505e;
  #L4d5018.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d501e.  v0:= temp @kind object;
  #L4d5020.  v3:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` @kind wide;
  #L4d5024.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d502a.  v5:= temp @kind wide;
  #L4d502c.  v1:= lcmp(v3, v5);
  #L4d5030.  if v1 == 0 then goto L4d5048;
  #L4d5034.  v3:= v3 + v9 @kind long;
  #L4d5036.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` := v3 @kind wide;
  #L4d503a.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d5040.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d5046.  goto L4d506a;
  #L4d5048.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d504c.  v1:= "Could not emit final value due to lack of requests" @kind object;
  #L4d5050.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d5056.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d505c.  goto L4d506a;
  #L4d505e.  call `lazySet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d5064.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d506a.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d506e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5074.  return @kind void;
  #L4d5076.  if v7 == 0 then goto L4d508c;
  #L4d507a.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` @kind boolean;
  #L4d507e.  if v5 == 0 then goto L4d509e;
  #L4d5082.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @type ^`boolean` := v8 @kind boolean;
  #L4d5086.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` := v8 @kind boolean;
  #L4d508a.  goto L4d509e;
  #L4d508c.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @type ^`boolean` @kind boolean;
  #L4d5090.  if v5 == 0 then goto L4d50ae;
  #L4d5094.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` @kind boolean;
  #L4d5098.  if v5 == 0 then goto L4d509e;
  #L4d509c.  goto L4d50ae;
  #L4d509e.  v4:= -v4 @kind int;
  #L4d50a0.  call temp:= `addAndGet`(v14, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d50a6.  v4:= temp;
  #L4d50a8.  if v4 != 0 then goto L4d4fb2;
  #L4d50ac.  return @kind void;
  #L4d50ae.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d50b4.  v5:= temp @kind object;
  #L4d50b6.  v6:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` @kind wide;
  #L4d50ba.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d50c0.  v11:= temp @kind wide;
  #L4d50c2.  v13:= lcmp(v6, v11);
  #L4d50c6.  if v13 == 0 then goto L4d50f4;
  #L4d50ca.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d50d0.  v6:= v6 + v9 @kind long;
  #L4d50d2.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.m` @type ^`long` := v6 @kind wide;
  #L4d50d6.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` := v8 @kind boolean;
  #L4d50da.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.n` @type ^`boolean` := v3 @kind boolean;
  #L4d50de.  v5:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d50e2.  v6:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.b` @type ^`long` @kind wide;
  #L4d50e6.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d50ea.  call temp:= `schedule`(v5, v14, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d50f0.  goto L4d4fb2;
  #L4d50f4.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d50f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d50fe.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d5102.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L4d5106.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d510c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5112.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5116.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d511c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d4f50.  v0:= 1I;
  #L4d4f52.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4d4f56.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4f5a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d4f60.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d4f64.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d4f6a.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d4f70.  v0:= temp;
  #L4d4f72.  if v0 != 0 then goto L4d4f82;
  #L4d4f76.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d4f7a.  v1:= 0I;
  #L4d4f7c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d4f82.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5130.  v0:= 1I;
  #L4d5132.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4d5136.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4d513c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4d5150.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.j` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4d5154.  v1:= 1I;
  #L4d5156.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4d515a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4d5160.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5174.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5178.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4d517e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4d5184.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d5198.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d519c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d51a2.  v0:= temp;
  #L4d51a4.  if v0 == 0 then goto L4d51c6;
  #L4d51a8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d51ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d51b0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d51b6.  v0:= 9223372036854775807L;
  #L4d51c0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d51c6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d51d8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d51de.  v0:= temp;
  #L4d51e0.  if v0 == 0 then goto L4d51ee;
  #L4d51e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d51e8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d51ee.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5200.  v0:= 1I;
  #L4d5202.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4d5206.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleLatest$a;.a:()V` @kind virtual;
  #L4d520c.  return @kind void;
}
