record `io.reactivex.rxjava3.internal.operators.flowable.b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `io.reactivex.rxjava3.processors.FlowableProcessor` `io.reactivex.rxjava3.internal.operators.flowable.b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.b.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.b` v0 @kind this, `io.reactivex.rxjava3.processors.FlowableProcessor` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d834c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4d8352.  v0.`io.reactivex.rxjava3.internal.operators.flowable.b.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` := v1 @kind object;
  #L4d8356.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d835a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d8360.  v0.`io.reactivex.rxjava3.internal.operators.flowable.b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4d8364.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4d8310.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8314.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d831a.  v0:= temp;
  #L4d831c.  v1:= 1I;
  #L4d831e.  v2:= 0I;
  #L4d8320.  if v0 != 0 then goto L4d8336;
  #L4d8324.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8328.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d832e.  v0:= temp;
  #L4d8330.  if v0 == 0 then goto L4d8336;
  #L4d8334.  goto L4d8338;
  #L4d8336.  v1:= 0I;
  #L4d8338.  return v1;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4d8378.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.b.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4d837c.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d8382.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8386.  v0:= 1I;
  #L4d8388.  call `set`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L4d838e.  return @kind void;
}
