record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v0 @kind this, `long` v1 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d5420.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d5426.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` := v1 @kind wide;
  #L4d542a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` := v3 @kind object;
  #L4d542e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4d5440.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d5446.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d53f8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d53fe.  v0:= temp @kind object;
  #L4d5400.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d5404.  if v0 != v1 then goto L4d540c;
  #L4d5408.  v0:= 1I;
  #L4d540a.  goto L4d540e;
  #L4d540c.  v0:= 0I;
  #L4d540e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d5458.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d545e.  v0:= temp @kind object;
  #L4d5460.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d5464.  if v0 == v1 then goto L4d547c;
  #L4d5468.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d546e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L4d5472.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L4d5476.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L4d547c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d5490.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d5496.  v0:= temp @kind object;
  #L4d5498.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d549c.  if v0 == v1 then goto L4d54b6;
  #L4d54a0.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d54a6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L4d54aa.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L4d54ae.  call `a`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;.a:(JLjava/lang/Throwable;)V` @kind interface;
  #L4d54b4.  goto L4d54bc;
  #L4d54b6.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d54bc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d54d0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d54d6.  v3:= temp @kind object;
  #L4d54d8.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4d54dc.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d54e0.  if v3 == v0 then goto L4d5502;
  #L4d54e4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d54ea.  v3:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d54ee.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d54f4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L4d54f8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L4d54fc.  call `b`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L4d5502.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d5514.  v0:= 9223372036854775807L;
  #L4d551e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4d5524.  return @kind void;
}
