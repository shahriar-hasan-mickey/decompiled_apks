record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L502fe4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L502fea.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L502fee.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L502ff2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503004.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L503008.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50300e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503020.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L503024.  if v0 == 0 then goto L50302a;
  #L503028.  return @kind void;
  #L50302a.  v0:= 1I;
  #L50302c.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L503030.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L503034.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L50303a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50304c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L503050.  if v0 == 0 then goto L50305c;
  #L503054.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50305a.  return @kind void;
  #L50305c.  v0:= 1I;
  #L50305e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L503062.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L503066.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L50306c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503080.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L503084.  if v0 == 0 then goto L50308a;
  #L503088.  return @kind void;
  #L50308a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L50308e.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L503094.  v2:= temp @kind object;
  #L503096.  v0:= "The mapper returned a null value" @kind object;
  #L50309a.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5030a0.  v2:= temp @kind object;
  #L5030a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L5030a6.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5030ac.  return @kind void;
  #L5030ae.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5030b0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5030b6.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L5030bc.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5030c2.  return @kind void;
  catch `java.lang.Throwable` @[L50308a..L5030a2] goto L5030ae;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5030e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5030e4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L5030ea.  v0:= temp;
  #L5030ec.  if v0 == 0 then goto L5030fe;
  #L5030f0.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L5030f4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L5030f8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L5030fe.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503110.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L503114.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50311a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L502f80.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L502f84.  v1:= 0I;
  #L502f86.  if v0 == 0 then goto L502f8c;
  #L502f8a.  return v1;
  #L502f8c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L502f90.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L502f96.  v3:= temp @kind object;
  #L502f98.  v0:= "The mapper returned a null value" @kind object;
  #L502f9c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L502fa2.  v3:= temp @kind object;
  #L502fa4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L502fa8.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L502fae.  v3:= temp;
  #L502fb0.  return v3;
  #L502fb2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502fb4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L502fba.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L502fc0.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L502fc6.  return v1;
  catch `java.lang.Throwable` @[L502f8c..L502fa4] goto L502fb2;
}
