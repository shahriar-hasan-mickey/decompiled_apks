record `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4dce2c.  v0:= 2I;
  #L4dce2e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4dce34.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v2 @kind object;
  #L4dce38.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4dce3c.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b`;
  #L4dce40.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L4dce46.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L4dce4a.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b`;
  #L4dce4e.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L4dce54.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L4dce58.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4dce94.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4dce9a.  v0:= temp;
  #L4dce9c.  if v0 != 0 then goto L4dcf0c;
  #L4dcea0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dcea4.  v0:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L4dcea8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dceac.  v1:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L4dceb0.  if v0 == 0 then goto L4dceec;
  #L4dceb4.  if v1 == 0 then goto L4dceec;
  #L4dceb8.  v2:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4dcebc.  call temp:= `test`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4dcec2.  v0:= temp;
  #L4dcec4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4dcec8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4dcece.  v0:= temp @kind object;
  #L4dced0.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4dced6.  goto L4dcf0c;
  #L4dced8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dceda.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dcee0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4dcee4.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dceea.  return @kind void;
  #L4dceec.  v2:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4dcef0.  if v0 != 0 then goto L4dcefc;
  #L4dcef4.  if v1 != 0 then goto L4dcefc;
  #L4dcef8.  v0:= 1I;
  #L4dcefa.  goto L4dcefe;
  #L4dcefc.  v0:= 0I;
  #L4dcefe.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4dcf04.  v0:= temp @kind object;
  #L4dcf06.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4dcf0c.  return @kind void;
  catch `java.lang.Throwable` @[L4dceb8..L4dcec4] goto L4dced8;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4dcf2c.  v0:= 0I;
  #L4dcf2e.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4dcf34.  v0:= temp;
  #L4dcf36.  if v0 <= 0 then goto L4dcf60;
  #L4dcf3a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dcf3e.  if v2 != v0 then goto L4dcf4e;
  #L4dcf42.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dcf46.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4dcf4c.  goto L4dcf54;
  #L4dcf4e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4dcf54.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4dcf58.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dcf5e.  goto L4dcf66;
  #L4dcf60.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dcf66.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.c:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag  {
    temp;
    v0;

  #L4dcf78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dcf7c.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4dcf82.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dcf86.  call `subscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4dcf8c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dce6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dce70.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4dce76.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dce7a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L4dce80.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dce00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L4dce04.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dce0a.  v0:= temp @kind object;
  #L4dce0c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4dce10.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4dce16.  v0:= temp;
  #L4dce18.  return v0;
}
