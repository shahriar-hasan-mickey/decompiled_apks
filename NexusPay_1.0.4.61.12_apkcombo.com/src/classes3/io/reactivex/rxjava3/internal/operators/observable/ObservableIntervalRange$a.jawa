record `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f3238.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f323e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f3242.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @type ^`long` := v2 @kind wide;
  #L4f3246.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.b` @type ^`long` := v4 @kind wide;
  #L4f324a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4f32dc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f32e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4f325c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f3262.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f3210.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f3216.  v0:= temp @kind object;
  #L4f3218.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4f321c.  if v0 != v1 then goto L4f3224;
  #L4f3220.  v0:= 1I;
  #L4f3222.  goto L4f3226;
  #L4f3224.  v0:= 0I;
  #L4f3226.  return v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f3274.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.isDisposed:()Z` @kind virtual;
  #L4f327a.  v0:= temp;
  #L4f327c.  if v0 != 0 then goto L4f32ca;
  #L4f3280.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @type ^`long` @kind wide;
  #L4f3284.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f3288.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4f328e.  v3:= temp @kind object;
  #L4f3290.  call `onNext`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f3296.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.b` @type ^`long` @kind wide;
  #L4f329a.  v4:= lcmp(v0, v2);
  #L4f329e.  if v4 != 0 then goto L4f32c0;
  #L4f32a2.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.isDisposed:()Z` @kind virtual;
  #L4f32a8.  v0:= temp;
  #L4f32aa.  if v0 != 0 then goto L4f32b8;
  #L4f32ae.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f32b2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f32b8.  call temp:= `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f32be.  return @kind void;
  #L4f32c0.  v2:= 1L;
  #L4f32c4.  v0:= v0 + v2 @kind long;
  #L4f32c6.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a.c` @type ^`long` := v0 @kind wide;
  #L4f32ca.  return @kind void;
}
