record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$c;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cddcc.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.<init>:(JJ)V` @kind direct;
  #L4cddd2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cddd6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4cdde8.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L4cddec.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cddf0.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L4cddf4.  v5:= lcmp(v3, v0);
  #L4cddf8.  if v5 == 0 then goto L4cde1c;
  #L4cddfc.  v5:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cde00.  if v5 == 0 then goto L4cde06;
  #L4cde04.  return @kind void;
  #L4cde06.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cde0c.  v5:= temp @kind object;
  #L4cde0e.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cde14.  v5:= 1L;
  #L4cde18.  v3:= v3 + v5 @kind long;
  #L4cde1a.  goto L4cddf4;
  #L4cde1c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cde20.  if v0 == 0 then goto L4cde26;
  #L4cde24.  return @kind void;
  #L4cde26.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cde2c.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` v11 @kind this, `long` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$c;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4cde40.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L4cde44.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L4cde48.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cde4c.  v5:= 0L;
  #L4cde50.  v7:= v5 @kind wide;
  #L4cde52.  v9:= lcmp(v7, v12);
  #L4cde56.  if v9 == 0 then goto L4cde84;
  #L4cde5a.  v9:= lcmp(v2, v0);
  #L4cde5e.  if v9 == 0 then goto L4cde84;
  #L4cde62.  v9:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cde66.  if v9 == 0 then goto L4cde6c;
  #L4cde6a.  return @kind void;
  #L4cde6c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cde72.  v9:= temp @kind object;
  #L4cde74.  call `onNext`(v4, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cde7a.  v9:= 1L;
  #L4cde7e.  v7:= v7 + v9 @kind long;
  #L4cde80.  v2:= v2 + v9 @kind long;
  #L4cde82.  goto L4cde52;
  #L4cde84.  v12:= lcmp(v2, v0);
  #L4cde88.  if v12 != 0 then goto L4cde9c;
  #L4cde8c.  v12:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cde90.  if v12 != 0 then goto L4cde9a;
  #L4cde94.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cde9a.  return @kind void;
  #L4cde9c.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cdea2.  v12:= temp @kind wide;
  #L4cdea4.  v9:= lcmp(v7, v12);
  #L4cdea8.  if v9 != 0 then goto L4cde52;
  #L4cdeac.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v2 @kind wide;
  #L4cdeb0.  v12:= -v7 @kind long;
  #L4cdeb2.  call temp:= `addAndGet`(v11, v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4cdeb8.  v12:= temp @kind wide;
  #L4cdeba.  v7:= lcmp(v12, v5);
  #L4cdebe.  if v7 != 0 then goto L4cde50;
  #L4cdec2.  return @kind void;
}
