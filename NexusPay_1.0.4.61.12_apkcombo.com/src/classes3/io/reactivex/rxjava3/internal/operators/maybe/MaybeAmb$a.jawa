record `io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.disposables.CompositeDisposable` v2 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeAmb$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/disposables/CompositeDisposable;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4da530.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4da536.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4da53a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4da53e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L4da542.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeAmb$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4da554.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4da558.  v1:= 0I;
  #L4da55a.  v2:= 1I;
  #L4da55c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4da562.  v0:= temp;
  #L4da564.  if v0 == 0 then goto L4da58a;
  #L4da568.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da56c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4da570.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4da576.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da57a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4da580.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4da584.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4da58a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeAmb$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4da59c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4da5a0.  v1:= 0I;
  #L4da5a2.  v2:= 1I;
  #L4da5a4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4da5aa.  v0:= temp;
  #L4da5ac.  if v0 == 0 then goto L4da5d4;
  #L4da5b0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da5b4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4da5b8.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4da5be.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da5c2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4da5c8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4da5cc.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4da5d2.  goto L4da5da;
  #L4da5d4.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4da5da.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeAmb$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da5ec.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4da5f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da5f4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4da5fa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeAmb$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4da60c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4da610.  v1:= 0I;
  #L4da612.  v2:= 1I;
  #L4da614.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4da61a.  v0:= temp;
  #L4da61c.  if v0 == 0 then goto L4da642;
  #L4da620.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da624.  v1:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4da628.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4da62e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4da632.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4da638.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4da63c.  call `onSuccess`(v0, v4) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4da642.  return @kind void;
}
