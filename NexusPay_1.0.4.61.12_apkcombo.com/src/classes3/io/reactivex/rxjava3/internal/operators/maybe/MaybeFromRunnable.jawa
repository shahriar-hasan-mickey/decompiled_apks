record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.functions.Supplier` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4de938.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4de93e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4de942.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromRunnable;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de918.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4de91c.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4de922.  v0:= 0I;
  #L4de924.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromRunnable;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4de954.  call temp:= `b`() @signature `Lio/reactivex/rxjava3/disposables/a;.b:()Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4de95a.  v0:= temp @kind object;
  #L4de95c.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4de962.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4de968.  v1:= temp;
  #L4de96a.  if v1 != 0 then goto L4de9ae;
  #L4de96e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L4de972.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4de978.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4de97e.  v0:= temp;
  #L4de980.  if v0 != 0 then goto L4de9ae;
  #L4de984.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4de98a.  goto L4de9ae;
  #L4de98c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4de98e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4de994.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4de99a.  v0:= temp;
  #L4de99c.  if v0 != 0 then goto L4de9a8;
  #L4de9a0.  call `onError`(v3, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4de9a6.  goto L4de9ae;
  #L4de9a8.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4de9ae.  return @kind void;
  catch `java.lang.Throwable` @[L4de96e..L4de978] goto L4de98c;
}
