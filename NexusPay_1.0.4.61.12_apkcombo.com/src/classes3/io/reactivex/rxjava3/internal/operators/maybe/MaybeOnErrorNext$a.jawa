record `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e0000.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e0006.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4e000a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e000e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4e0020.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0026.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dffd8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dffde.  v0:= temp @kind object;
  #L4dffe0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4dffe4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4dffea.  v0:= temp;
  #L4dffec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0038.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e003c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e0042.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e0054.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e0058.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e005e.  v0:= temp @kind object;
  #L4e0060.  v1:= "The resumeFunction returned a null MaybeSource" @kind object;
  #L4e0064.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e006a.  v0:= temp @kind object;
  #L4e006c.  v0:= (`io.reactivex.rxjava3.core.MaybeSource`) v0 @kind object;
  #L4e0070.  v6:= 0I;
  #L4e0072.  call temp:= `replace`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e0078.  v6:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a$a`;
  #L4e007c.  v1:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0080.  call `<init>`(v6, v1, v5) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4e0086.  call `subscribe`(v0, v6) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4e008c.  return @kind void;
  #L4e008e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e0090.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e0096.  v1:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e009a.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4e009e.  v3:= 2I;
  #L4e00a0.  v3:= new `java.lang.Throwable`[v3];
  #L4e00a4.  v4:= 0I;
  #L4e00a6.  v3[v4]:= v6 @kind object;
  #L4e00aa.  v6:= 1I;
  #L4e00ac.  v3[v6]:= v0 @kind object;
  #L4e00b0.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4e00b6.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e00bc.  return @kind void;
  catch `java.lang.Throwable` @[L4e0054..L4e0070] goto L4e008e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e00dc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e00e2.  v1:= temp;
  #L4e00e4.  if v1 == 0 then goto L4e00f2;
  #L4e00e8.  v1:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e00ec.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e00f2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorNext$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0104.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0108.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e010e.  return @kind void;
}
