record `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.subjects.Subject` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.subjects.Subject` v2 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/Subject;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f84c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f84ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f84d2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` := v2 @kind object;
  #L4f84d6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4f84da.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4f84de.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f84e4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4f84e8.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4f84ec.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4f84f2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4f84f6.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a`;
  #L4f84fa.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;)V` @kind direct;
  #L4f8500.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` := v1 @kind object;
  #L4f8504.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f8508.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f850e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4f8512.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f854c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8550.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f8556.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f855a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f855e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f8564.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f8578.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f857c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f8582.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8586.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f858a.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f8590.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L4f85a4.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @kind virtual;
  #L4f85aa.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4f8654.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f8658.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f865e.  v0:= temp;
  #L4f8660.  if v0 != 0 then goto L4f869a;
  #L4f8664.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @kind virtual;
  #L4f866a.  v0:= temp;
  #L4f866c.  if v0 == 0 then goto L4f8672;
  #L4f8670.  return @kind void;
  #L4f8672.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` @kind boolean;
  #L4f8676.  if v0 != 0 then goto L4f868a;
  #L4f867a.  v0:= 1I;
  #L4f867c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4f8680.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f8684.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f868a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f868e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f8694.  v0:= temp;
  #L4f8696.  if v0 != 0 then goto L4f8664;
  #L4f869a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8524.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8528.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f852e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L4f8532.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f8538.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f849c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f84a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f84a6.  v0:= temp @kind object;
  #L4f84a8.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4f84ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f84b2.  v0:= temp;
  #L4f84b4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f85bc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L4f85c0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f85c6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f85ca.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f85ce.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f85d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f85e8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f85ec.  v1:= 0I;
  #L4f85ee.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f85f4.  v0:= 0I;
  #L4f85f6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4f85fa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L4f85fe.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f8604.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8618.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f861c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f8620.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f8626.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8638.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f863c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f8642.  return @kind void;
}
