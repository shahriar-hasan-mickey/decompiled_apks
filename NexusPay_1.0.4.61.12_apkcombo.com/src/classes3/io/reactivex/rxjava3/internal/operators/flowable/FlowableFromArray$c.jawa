record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription` @kind class {
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c54e4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L4c54ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4c54ee.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c5500.  v0:= 1I;
  #L4c5502.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` := v0 @kind boolean;
  #L4c5506.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c5518.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L4c551c.  v0:= length @variable v0;
  #L4c551e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v0;
  #L4c5522.  return @kind void;
}
procedure `void` `e`(`long` v0 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.e:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4c5468.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L4c546c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L4c5470.  v1:= length @variable v1;
  #L4c5472.  if v0 != v1 then goto L4c547a;
  #L4c5476.  v0:= 1I;
  #L4c5478.  goto L4c547c;
  #L4c547a.  v0:= 0I;
  #L4c547c.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4c54a8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L4c54ac.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L4c54b0.  v2:= length @variable v1;
  #L4c54b2.  if v0 != v2 then goto L4c54ba;
  #L4c54b6.  v0:= 0I;
  #L4c54b8.  return v0 @kind object;
  #L4c54ba.  v2:= v0 + 1;
  #L4c54be.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L4c54c2.  v0:= v1[v0] @kind object;
  #L4c54c6.  v1:= "array element is null" @kind object;
  #L4c54ca.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c54d0.  v0:= temp @kind object;
  #L4c54d2.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c5534.  call temp:= `validate`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c553a.  v0:= temp;
  #L4c553c.  if v0 == 0 then goto L4c5574;
  #L4c5540.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c5546.  v0:= temp @kind wide;
  #L4c5548.  v2:= 0L;
  #L4c554c.  v4:= lcmp(v0, v2);
  #L4c5550.  if v4 != 0 then goto L4c5574;
  #L4c5554.  v0:= 9223372036854775807L;
  #L4c555e.  v2:= lcmp(v6, v0);
  #L4c5562.  if v2 != 0 then goto L4c556e;
  #L4c5566.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.a:()V` @kind virtual;
  #L4c556c.  goto L4c5574;
  #L4c556e.  call `e`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.e:(J)V` @kind virtual;
  #L4c5574.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4c5490.  v1:= v1 ^& 1;
  #L4c5494.  return v1;
}
