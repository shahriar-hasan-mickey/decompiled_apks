record `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f8a3c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind direct;
  #L4f8a42.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4f8a46.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f8a4c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4f8a50.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4f8a64.  v0:= 1I;
  #L4f8a66.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4f8a6a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f8a6e.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f8a74.  v0:= temp;
  #L4f8a76.  if v0 != 0 then goto L4f8a8a;
  #L4f8a7a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @kind virtual;
  #L4f8a80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8a84.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f8a8a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4f8a9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f8aa0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f8aa6.  v0:= temp;
  #L4f8aa8.  if v0 != 0 then goto L4f8ad6;
  #L4f8aac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` @kind boolean;
  #L4f8ab0.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @kind virtual;
  #L4f8ab6.  if v0 == 0 then goto L4f8ac6;
  #L4f8aba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8abe.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f8ac4.  return @kind void;
  #L4f8ac6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f8aca.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f8ad0.  v0:= temp;
  #L4f8ad2.  if v0 != 0 then goto L4f8aac;
  #L4f8ad6.  return @kind void;
}
