record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d23e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d23ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4d23f2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2404.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2408.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d240e.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d2412.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d2416.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d23c4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d23c8.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d23cc.  if v0 != v1 then goto L4d23d4;
  #L4d23d0.  v0:= 1I;
  #L4d23d2.  goto L4d23d6;
  #L4d23d4.  v0:= 0I;
  #L4d23d6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2428.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4d242c.  if v0 == 0 then goto L4d2432;
  #L4d2430.  return @kind void;
  #L4d2432.  v0:= 1I;
  #L4d2434.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4d2438.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d243c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d2440.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4d2444.  v1:= 0I;
  #L4d2446.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L4d244a.  if v0 != 0 then goto L4d245a;
  #L4d244e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d2452.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4d2458.  goto L4d2464;
  #L4d245a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d245e.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d2464.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2478.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4d247c.  if v0 == 0 then goto L4d2488;
  #L4d2480.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d2486.  return @kind void;
  #L4d2488.  v0:= 1I;
  #L4d248a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4d248e.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d2492.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d2496.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d249a.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d24a0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d24b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4d24b8.  if v0 == 0 then goto L4d24be;
  #L4d24bc.  return @kind void;
  #L4d24be.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4d24c2.  if v0 == 0 then goto L4d24f8;
  #L4d24c6.  v3:= 1I;
  #L4d24c8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4d24cc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d24d0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d24d6.  v3:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d24da.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d24de.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d24e2.  v0:= new `java.lang.IllegalArgumentException`;
  #L4d24e6.  v1:= "Sequence contains more than one element!" @kind object;
  #L4d24ea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d24f0.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d24f6.  return @kind void;
  #L4d24f8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4d24fc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2510.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2514.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d251a.  v0:= temp;
  #L4d251c.  if v0 == 0 then goto L4d253e;
  #L4d2520.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d2524.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d2528.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4d252e.  v0:= 9223372036854775807L;
  #L4d2538.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d253e.  return @kind void;
}
