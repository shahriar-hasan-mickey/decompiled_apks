record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4bb4a4.  v0:= 0I;
  #L4bb4a6.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v0];
  #L4bb4aa.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] := v1 @kind object;
  #L4bb4ae.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v0];
  #L4bb4b2.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] := v0 @kind object;
  #L4bb4b6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/rxjava3/core/Flowable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bb4c8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4bb4ce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @type ^`int` := v2;
  #L4bb4d2.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4bb4d6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4bb4dc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4bb4e0.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b`;
  #L4bb4e4.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$b;.<init>:(I)V` @kind direct;
  #L4bb4ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L4bb4ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L4bb4f2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4bb4f6.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L4bb4fa.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4bb500.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4bb504.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bb518.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bb51c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bb522.  v0:= temp @kind object;
  #L4bb524.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L4bb528.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L4bb52c.  if v0 != v1 then goto L4bb532;
  #L4bb530.  return @kind void;
  #L4bb532.  v1:= length @variable v0;
  #L4bb534.  v2:= v1 + 1;
  #L4bb538.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v2];
  #L4bb53c.  v3:= 0I;
  #L4bb53e.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4bb544.  v2[v1]:= v5 @kind object;
  #L4bb548.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bb54c.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4bb552.  v0:= temp;
  #L4bb554.  if v0 == 0 then goto L4bb518;
  #L4bb558.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bb6b8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bb6bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bb6c2.  v0:= temp @kind object;
  #L4bb6c4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L4bb6c8.  v1:= length @variable v0;
  #L4bb6ca.  if v1 != 0 then goto L4bb6d0;
  #L4bb6ce.  return @kind void;
  #L4bb6d0.  v2:= -1I;
  #L4bb6d2.  v3:= 0I;
  #L4bb6d4.  v4:= 0I;
  #L4bb6d6.  if v4 >= v1 then goto L4bb6ec;
  #L4bb6da.  v5:= v0[v4] @kind object;
  #L4bb6de.  if v5 != v7 then goto L4bb6e6;
  #L4bb6e2.  v2:= v4;
  #L4bb6e4.  goto L4bb6ec;
  #L4bb6e6.  v4:= v4 + 1;
  #L4bb6ea.  goto L4bb6d6;
  #L4bb6ec.  if v2 >= 0 then goto L4bb6f2;
  #L4bb6f0.  return @kind void;
  #L4bb6f2.  v4:= 1I;
  #L4bb6f4.  if v1 != v4 then goto L4bb6fe;
  #L4bb6f8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L4bb6fc.  goto L4bb71c;
  #L4bb6fe.  v5:= v1 + -1;
  #L4bb702.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[v5];
  #L4bb706.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4bb70c.  v3:= v2 + 1;
  #L4bb710.  v1:= v1 - v2 @kind int;
  #L4bb712.  v1:= v1 - v4 @kind int;
  #L4bb714.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4bb71a.  v1:= v5 @kind object;
  #L4bb71c.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bb720.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4bb726.  v0:= temp;
  #L4bb728.  if v0 == 0 then goto L4bb6b8;
  #L4bb72c.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v18 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v19 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4bb740.  v0:= v18 @kind object;
  #L4bb744.  v1:= v19 @kind object;
  #L4bb748.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bb74e.  v2:= temp;
  #L4bb750.  if v2 == 0 then goto L4bb756;
  #L4bb754.  return @kind void;
  #L4bb756.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.f` @type ^`long` @kind wide;
  #L4bb75a.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.e` @type ^`int`;
  #L4bb75e.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L4bb762.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bb766.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bb76a.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @type ^`int`;
  #L4bb76e.  v9:= 1I;
  #L4bb770.  v10:= 1I;
  #L4bb772.  v11:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` @kind boolean;
  #L4bb776.  v12:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @type ^`long` @kind wide;
  #L4bb77a.  v14:= 0I;
  #L4bb77c.  v15:= lcmp(v12, v2);
  #L4bb780.  if v15 != 0 then goto L4bb788;
  #L4bb784.  v12:= 1I;
  #L4bb786.  goto L4bb78a;
  #L4bb788.  v12:= 0I;
  #L4bb78a.  v13:= 0I;
  #L4bb78c.  if v11 == 0 then goto L4bb7b0;
  #L4bb790.  if v12 == 0 then goto L4bb7b0;
  #L4bb794.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v13 @kind object;
  #L4bb798.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.i` @type ^`java.lang.Throwable` @kind object;
  #L4bb79c.  if v1 == 0 then goto L4bb7a8;
  #L4bb7a0.  call `onError`(v7, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bb7a6.  goto L4bb7ae;
  #L4bb7a8.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4bb7ae.  return @kind void;
  #L4bb7b0.  if v12 != 0 then goto L4bb7fa;
  #L4bb7b4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4bb7ba.  v11:= temp @kind wide;
  #L4bb7bc.  v15:= -9223372036854775808L;
  #L4bb7c0.  v17:= lcmp(v11, v15);
  #L4bb7c4.  if v17 != 0 then goto L4bb7ce;
  #L4bb7c8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v13 @kind object;
  #L4bb7cc.  return @kind void;
  #L4bb7ce.  v13:= lcmp(v11, v2);
  #L4bb7d2.  if v13 == 0 then goto L4bb7fa;
  #L4bb7d6.  if v4 != v8 then goto L4bb7e2;
  #L4bb7da.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L4bb7de.  v5:= v4 @kind object;
  #L4bb7e0.  v4:= 0I;
  #L4bb7e2.  v11:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4bb7e6.  v11:= v11[v4] @kind object;
  #L4bb7ea.  call `onNext`(v7, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bb7f0.  v4:= v4 + v9 @kind int;
  #L4bb7f2.  v11:= 1L;
  #L4bb7f6.  v2:= v2 + v11 @kind long;
  #L4bb7f8.  goto L4bb772;
  #L4bb7fa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.f` @type ^`long` := v2 @kind wide;
  #L4bb7fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.e` @type ^`int` := v4;
  #L4bb802.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v5 @kind object;
  #L4bb806.  v10:= -v10 @kind int;
  #L4bb808.  call temp:= `addAndGet`(v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bb80e.  v10:= temp;
  #L4bb810.  if v10 != 0 then goto L4bb772;
  #L4bb814.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bb56c.  v0:= 1I;
  #L4bb56e.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` := v0 @kind boolean;
  #L4bb572.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bb576.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L4bb57a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4bb580.  v0:= temp @kind object;
  #L4bb582.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L4bb586.  v1:= length @variable v0;
  #L4bb588.  v2:= 0I;
  #L4bb58a.  if v2 >= v1 then goto L4bb59e;
  #L4bb58e.  v3:= v0[v2] @kind object;
  #L4bb592.  call `g`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L4bb598.  v2:= v2 + 1;
  #L4bb59c.  goto L4bb58a;
  #L4bb59e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bb5b0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` @kind boolean;
  #L4bb5b4.  if v0 == 0 then goto L4bb5c0;
  #L4bb5b8.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bb5be.  return @kind void;
  #L4bb5c0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.i` @type ^`java.lang.Throwable` := v4 @kind object;
  #L4bb5c4.  v4:= 1I;
  #L4bb5c6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.j` @type ^`boolean` := v4 @kind boolean;
  #L4bb5ca.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bb5ce.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L4bb5d2.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4bb5d8.  v4:= temp @kind object;
  #L4bb5da.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v4 @kind object;
  #L4bb5de.  v0:= length @variable v4;
  #L4bb5e0.  v1:= 0I;
  #L4bb5e2.  if v1 >= v0 then goto L4bb5f6;
  #L4bb5e6.  v2:= v4[v1] @kind object;
  #L4bb5ea.  call `g`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L4bb5f0.  v1:= v1 + 1;
  #L4bb5f4.  goto L4bb5e2;
  #L4bb5f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bb608.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @type ^`int`;
  #L4bb60c.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.c` @type ^`int`;
  #L4bb610.  v2:= 0I;
  #L4bb612.  v3:= 1I;
  #L4bb614.  if v0 != v1 then goto L4bb63c;
  #L4bb618.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b`;
  #L4bb61c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$b;.<init>:(I)V` @kind direct;
  #L4bb622.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4bb626.  v0[v2]:= v6 @kind object;
  #L4bb62a.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @type ^`int` := v3;
  #L4bb62e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L4bb632.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L4bb636.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L4bb63a.  goto L4bb64e;
  #L4bb63c.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L4bb640.  v1:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4bb644.  v1[v0]:= v6 @kind object;
  #L4bb648.  v0:= v0 + v3 @kind int;
  #L4bb64a.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.h` @type ^`int` := v0;
  #L4bb64e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @type ^`long` @kind wide;
  #L4bb652.  v3:= 1L;
  #L4bb656.  v0:= v0 + v3 @kind long;
  #L4bb658.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.e` @type ^`long` := v0 @kind wide;
  #L4bb65c.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bb660.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bb666.  v6:= temp @kind object;
  #L4bb668.  v6:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`[]) v6 @kind object;
  #L4bb66c.  v0:= length @variable v6;
  #L4bb66e.  if v2 >= v0 then goto L4bb682;
  #L4bb672.  v1:= v6[v2] @kind object;
  #L4bb676.  call `g`(v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L4bb67c.  v2:= v2 + 1;
  #L4bb680.  goto L4bb66e;
  #L4bb682.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb694.  v0:= 9223372036854775807L;
  #L4bb69e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bb6a4.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4bb828.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a`;
  #L4bb82c.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;)V` @kind direct;
  #L4bb832.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bb838.  call `e`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L4bb83e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4bb842.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4bb848.  v4:= temp;
  #L4bb84a.  if v4 != 0 then goto L4bb86e;
  #L4bb84e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4bb852.  v1:= 0I;
  #L4bb854.  v2:= 1I;
  #L4bb856.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4bb85c.  v4:= temp;
  #L4bb85e.  if v4 == 0 then goto L4bb86e;
  #L4bb862.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4bb866.  call `subscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4bb86c.  goto L4bb874;
  #L4bb86e.  call `g`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L4bb874.  return @kind void;
}
