record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.m` @AccessFlag FINAL;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @AccessFlag FINAL;
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ff4e0.  v0:= new `java.lang.Object`;
  #L4ff4e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ff4ea.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @type ^`java.lang.Object` := v0 @kind object;
  #L4ff4ee.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ff500.  v0:= v6 @kind object;
  #L4ff502.  v1:= v7 @kind object;
  #L4ff504.  v2:= v8 @kind wide;
  #L4ff506.  v4:= v10 @kind object;
  #L4ff508.  v5:= v12;
  #L4ff50a.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4ff510.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.m` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4ff514.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4ff518.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4ff51e.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4ff522.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c$a`;
  #L4ff526.  call `<init>`(v7, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;)V` @kind direct;
  #L4ff52c.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @type ^`java.lang.Runnable` := v7 @kind object;
  #L4ff530.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ff544.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ff548.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4ff54e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4ff560.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ff564.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ff56a.  v0:= temp;
  #L4ff56c.  if v0 != 0 then goto L4ff5e2;
  #L4ff570.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ff574.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff57a.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ff57e.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @type ^`java.lang.Runnable` @kind object;
  #L4ff582.  call temp:= `create`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ff588.  v0:= temp @kind object;
  #L4ff58a.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v0 @kind object;
  #L4ff58e.  v1:= 1L;
  #L4ff592.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v1 @kind wide;
  #L4ff596.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ff59a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ff5a0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ff5a4.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ff5aa.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ff5ae.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.m` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4ff5b2.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ff5b6.  v8:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff5ba.  v3:= v9 @kind object;
  #L4ff5bc.  v4:= v6 @kind wide;
  #L4ff5be.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ff5c4.  v2:= temp @kind object;
  #L4ff5c6.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ff5cc.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4ff5d2.  v0:= temp;
  #L4ff5d4.  if v0 == 0 then goto L4ff5e2;
  #L4ff5d8.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4ff5dc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff5e2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4ff5f4.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff5fa.  v0:= temp;
  #L4ff5fc.  if v0 == 0 then goto L4ff602;
  #L4ff600.  return @kind void;
  #L4ff602.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ff606.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ff60a.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4ff60e.  v3:= 1I;
  #L4ff610.  v4:= 1I;
  #L4ff612.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` @kind boolean;
  #L4ff616.  v6:= 0I;
  #L4ff618.  if v5 == 0 then goto L4ff62c;
  #L4ff61c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ff622.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ff626.  v2:= v6 @kind object;
  #L4ff628.  goto L4ff716;
  #L4ff62c.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L4ff630.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ff636.  v7:= temp @kind object;
  #L4ff638.  if v7 != 0 then goto L4ff640;
  #L4ff63c.  v8:= 1I;
  #L4ff63e.  goto L4ff642;
  #L4ff640.  v8:= 0I;
  #L4ff642.  if v5 == 0 then goto L4ff680;
  #L4ff646.  if v8 == 0 then goto L4ff680;
  #L4ff64a.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4ff64e.  if v5 == 0 then goto L4ff664;
  #L4ff652.  if v2 == 0 then goto L4ff65c;
  #L4ff656.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ff65c.  call `onError`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ff662.  goto L4ff674;
  #L4ff664.  if v2 == 0 then goto L4ff66e;
  #L4ff668.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff66e.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ff674.  call `a`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.a:()V` @kind virtual;
  #L4ff67a.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4ff67e.  goto L4ff612;
  #L4ff680.  if v8 != 0 then goto L4ff716;
  #L4ff684.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @type ^`java.lang.Object` @kind object;
  #L4ff688.  if v7 != v5 then goto L4ff708;
  #L4ff68c.  if v2 == 0 then goto L4ff69c;
  #L4ff690.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff696.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ff69a.  v2:= v6 @kind object;
  #L4ff69c.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ff6a0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ff6a6.  v5:= temp;
  #L4ff6a8.  if v5 == 0 then goto L4ff6b8;
  #L4ff6ac.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ff6b0.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4ff6b6.  goto L4ff612;
  #L4ff6b8.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4ff6bc.  v7:= 1L;
  #L4ff6c0.  v5:= v5 + v7 @kind long;
  #L4ff6c2.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v5 @kind wide;
  #L4ff6c6.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ff6ca.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff6d0.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ff6d4.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.p` @type ^`java.lang.Runnable` @kind object;
  #L4ff6d8.  call temp:= `create`(v2, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ff6de.  v2:= temp @kind object;
  #L4ff6e0.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v2 @kind object;
  #L4ff6e4.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ff6e8.  call `<init>`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ff6ee.  call `onNext`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ff6f4.  call temp:= `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4ff6fa.  v5:= temp;
  #L4ff6fc.  if v5 == 0 then goto L4ff612;
  #L4ff700.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff706.  goto L4ff612;
  #L4ff708.  if v2 == 0 then goto L4ff612;
  #L4ff70c.  call `onNext`(v2, v7) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ff712.  goto L4ff612;
  #L4ff716.  v4:= -v4 @kind int;
  #L4ff718.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ff71e.  v4:= temp;
  #L4ff720.  if v4 != 0 then goto L4ff612;
  #L4ff724.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ff738.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ff73c.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$c.q` @type ^`java.lang.Object` @kind object;
  #L4ff740.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff746.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$c;.c:()V` @kind virtual;
  #L4ff74c.  return @kind void;
}
