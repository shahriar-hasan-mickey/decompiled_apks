record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f7adc.  call `<init>`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.<init>:(Z)V` @kind direct;
  #L4f7ae2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` := v5 @kind object;
  #L4f7ae6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.g` @type ^`int` := v1;
  #L4f7aea.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` := v2 @kind wide;
  #L4f7aee.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4f7af2.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f7a8c.  v0:= new `io.reactivex.rxjava3.schedulers.Timed`;
  #L4f7a90.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f7a94.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f7a98.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f7a9e.  v1:= temp @kind wide;
  #L4f7aa0.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f7aa4.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4f7aaa.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.f:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f79f0.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f79f4.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f79f8.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f79fe.  v0:= temp @kind wide;
  #L4f7a00.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` @kind wide;
  #L4f7a04.  v0:= v0 - v2 @kind long;
  #L4f7a06.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7a0c.  v2:= temp @kind object;
  #L4f7a0e.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4f7a12.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7a18.  v3:= temp @kind object;
  #L4f7a1a.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4f7a1e.  v7:= v3 @kind object;
  #L4f7a20.  v3:= v2 @kind object;
  #L4f7a22.  v2:= v7 @kind object;
  #L4f7a24.  if v2 != 0 then goto L4f7a2a;
  #L4f7a28.  goto L4f7a7a;
  #L4f7a2a.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7a2e.  v4:= (`io.reactivex.rxjava3.schedulers.Timed`) v4 @kind object;
  #L4f7a32.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4f7a38.  v5:= temp @kind object;
  #L4f7a3a.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f7a40.  v5:= temp;
  #L4f7a42.  if v5 != 0 then goto L4f7a7a;
  #L4f7a46.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4f7a4c.  v5:= temp @kind object;
  #L4f7a4e.  call temp:= `isError`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f7a54.  v5:= temp;
  #L4f7a56.  if v5 == 0 then goto L4f7a5c;
  #L4f7a5a.  goto L4f7a7a;
  #L4f7a5c.  call temp:= `time`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4f7a62.  v4:= temp @kind wide;
  #L4f7a64.  v6:= lcmp(v4, v0);
  #L4f7a68.  if v6 > 0 then goto L4f7a7a;
  #L4f7a6c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7a72.  v3:= temp @kind object;
  #L4f7a74.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4f7a78.  goto L4f7a1e;
  #L4f7a7a.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4f7abc.  v1:= (`io.reactivex.rxjava3.schedulers.Timed`) v1 @kind object;
  #L4f7ac0.  call temp:= `value`(v1) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4f7ac6.  v1:= temp @kind object;
  #L4f7ac8.  return v1 @kind object;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4f7b04.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f7b08.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f7b0c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f7b12.  v0:= temp @kind wide;
  #L4f7b14.  v2:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` @kind wide;
  #L4f7b18.  v0:= v0 - v2 @kind long;
  #L4f7b1a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7b20.  v2:= temp @kind object;
  #L4f7b22.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4f7b26.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7b2c.  v3:= temp @kind object;
  #L4f7b2e.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4f7b32.  v4:= 0I;
  #L4f7b34.  v9:= v3 @kind object;
  #L4f7b36.  v3:= v2 @kind object;
  #L4f7b38.  v2:= v9 @kind object;
  #L4f7b3a.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4f7b3e.  v6:= 1I;
  #L4f7b40.  if v5 <= v6 then goto L4f7b9a;
  #L4f7b44.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.g` @type ^`int`;
  #L4f7b48.  if v5 <= v7 then goto L4f7b66;
  #L4f7b4c.  v4:= v4 + 1;
  #L4f7b50.  v5:= v5 + -1;
  #L4f7b54.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v5;
  #L4f7b58.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7b5e.  v3:= temp @kind object;
  #L4f7b60.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4f7b64.  goto L4f7b34;
  #L4f7b66.  v5:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7b6a.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L4f7b6e.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4f7b74.  v7:= temp @kind wide;
  #L4f7b76.  v5:= lcmp(v7, v0);
  #L4f7b7a.  if v5 > 0 then goto L4f7b9a;
  #L4f7b7e.  v4:= v4 + 1;
  #L4f7b82.  v3:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4f7b86.  v3:= v3 - v6 @kind int;
  #L4f7b88.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L4f7b8c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7b92.  v3:= temp @kind object;
  #L4f7b94.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4f7b98.  goto L4f7b34;
  #L4f7b9a.  if v4 == 0 then goto L4f7ba4;
  #L4f7b9e.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4f7ba4.  return @kind void;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4f7bb8.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f7bbc.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f7bc0.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f7bc6.  v0:= temp @kind wide;
  #L4f7bc8.  v2:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` @kind wide;
  #L4f7bcc.  v0:= v0 - v2 @kind long;
  #L4f7bce.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7bd4.  v2:= temp @kind object;
  #L4f7bd6.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4f7bda.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7be0.  v3:= temp @kind object;
  #L4f7be2.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4f7be6.  v4:= 0I;
  #L4f7be8.  v9:= v3 @kind object;
  #L4f7bea.  v3:= v2 @kind object;
  #L4f7bec.  v2:= v9 @kind object;
  #L4f7bee.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4f7bf2.  v6:= 1I;
  #L4f7bf4.  if v5 <= v6 then goto L4f7c2c;
  #L4f7bf8.  v5:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7bfc.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L4f7c00.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4f7c06.  v7:= temp @kind wide;
  #L4f7c08.  v5:= lcmp(v7, v0);
  #L4f7c0c.  if v5 > 0 then goto L4f7c2c;
  #L4f7c10.  v4:= v4 + 1;
  #L4f7c14.  v3:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4f7c18.  v3:= v3 - v6 @kind int;
  #L4f7c1a.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L4f7c1e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7c24.  v3:= temp @kind object;
  #L4f7c26.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4f7c2a.  goto L4f7be8;
  #L4f7c2c.  if v4 == 0 then goto L4f7c36;
  #L4f7c30.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4f7c36.  return @kind void;
}
