record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4efd3c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4efd42.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4efd46.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4efd4a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4efd4e.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4efd52.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4efd58.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4efd5c.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4efd60.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4efd66.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4efd6a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4efd6e.  v2:= 1I;
  #L4efd70.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4efd76.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4efd7a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4efd7e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4efd84.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4efd88.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4efd9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efda0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efda6.  v0:= temp @kind object;
  #L4efda8.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4efdac.  if v0 == 0 then goto L4efdb6;
  #L4efdb0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4efdb6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4efe00.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4efe06.  v0:= temp;
  #L4efe08.  if v0 != 0 then goto L4efe12;
  #L4efe0c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4efe12.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4efe24.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4efe28.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4efe2c.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efe30.  v3:= 1I;
  #L4efe32.  v4:= 1I;
  #L4efe34.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4efe38.  if v5 == 0 then goto L4efe44;
  #L4efe3c.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L4efe42.  return @kind void;
  #L4efe44.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4efe48.  if v5 != 0 then goto L4efe72;
  #L4efe4c.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4efe50.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efe56.  v5:= temp @kind object;
  #L4efe58.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4efe5c.  if v5 == 0 then goto L4efe72;
  #L4efe60.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L4efe66.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4efe6a.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4efe70.  return @kind void;
  #L4efe72.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4efe78.  v5:= temp;
  #L4efe7a.  v6:= 0I;
  #L4efe7c.  if v5 != 0 then goto L4efe84;
  #L4efe80.  v5:= 1I;
  #L4efe82.  goto L4efe86;
  #L4efe84.  v5:= 0I;
  #L4efe86.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efe8c.  v7:= temp @kind object;
  #L4efe8e.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4efe92.  if v7 == 0 then goto L4efea0;
  #L4efe96.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4efe9c.  v7:= temp @kind object;
  #L4efe9e.  goto L4efea2;
  #L4efea0.  v7:= 0I;
  #L4efea2.  if v7 != 0 then goto L4efea8;
  #L4efea6.  v6:= 1I;
  #L4efea8.  if v5 == 0 then goto L4efebc;
  #L4efeac.  if v6 == 0 then goto L4efebc;
  #L4efeb0.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4efeb4.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4efeba.  return @kind void;
  #L4efebc.  if v6 == 0 then goto L4efed0;
  #L4efec0.  v4:= -v4 @kind int;
  #L4efec2.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4efec8.  v4:= temp;
  #L4efeca.  if v4 != 0 then goto L4efe34;
  #L4efece.  return @kind void;
  #L4efed0.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4efed6.  goto L4efe34;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4efcdc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efce0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efce6.  v0:= temp @kind object;
  #L4efce8.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4efcec.  if v0 == 0 then goto L4efcf2;
  #L4efcf0.  return v0 @kind object;
  #L4efcf2.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4efcf6.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4efcfc.  v1:= temp;
  #L4efcfe.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4efd04.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efd08.  v2:= 0I;
  #L4efd0a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4efd10.  v1:= temp;
  #L4efd12.  if v1 == 0 then goto L4efd18;
  #L4efd16.  return v0 @kind object;
  #L4efd18.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efd1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efd22.  v0:= temp @kind object;
  #L4efd24.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4efd28.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efdc8.  v0:= 1I;
  #L4efdca.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4efdce.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4efdd2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4efdd8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4efddc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4efde2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4efde6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4efdec.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4efee8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4efeec.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4efef2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4efef8.  v3:= temp;
  #L4efefa.  if v3 != 0 then goto L4eff6a;
  #L4efefe.  v3:= 0I;
  #L4eff00.  v0:= 1I;
  #L4eff02.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4eff08.  v1:= temp;
  #L4eff0a.  if v1 == 0 then goto L4eff6a;
  #L4eff0e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4eff12.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eff18.  v1:= temp;
  #L4eff1a.  if v1 != 0 then goto L4eff20;
  #L4eff1e.  v3:= 1I;
  #L4eff20.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eff24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eff2a.  v0:= temp @kind object;
  #L4eff2c.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4eff30.  if v3 == 0 then goto L4eff54;
  #L4eff34.  if v0 == 0 then goto L4eff44;
  #L4eff38.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4eff3e.  v3:= temp;
  #L4eff40.  if v3 == 0 then goto L4eff54;
  #L4eff44.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eff48.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eff4c.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eff52.  return @kind void;
  #L4eff54.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eff5a.  v3:= temp;
  #L4eff5c.  if v3 != 0 then goto L4eff62;
  #L4eff60.  return @kind void;
  #L4eff62.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4eff68.  goto L4eff7a;
  #L4eff6a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4eff6e.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eff74.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4eff7a.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4eff8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4eff90.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4eff96.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eff9a.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4effa0.  v2:= temp;
  #L4effa2.  if v2 == 0 then goto L4effd2;
  #L4effa6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4effaa.  if v2 != 0 then goto L4effc2;
  #L4effae.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4effb2.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4effb8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4effbc.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4effc2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4effc6.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4effcc.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4effd2.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.g:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4effe4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4effe8.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4effee.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4efff4.  v3:= temp;
  #L4efff6.  if v3 != 0 then goto L4f0068;
  #L4efffa.  v3:= 0I;
  #L4efffc.  v0:= 1I;
  #L4efffe.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f0004.  v1:= temp;
  #L4f0006.  if v1 == 0 then goto L4f0068;
  #L4f000a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f000e.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f0014.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f0018.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f001e.  v4:= temp;
  #L4f0020.  if v4 != 0 then goto L4f0026;
  #L4f0024.  v3:= 1I;
  #L4f0026.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f002a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0030.  v4:= temp @kind object;
  #L4f0032.  v4:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L4f0036.  if v3 == 0 then goto L4f005a;
  #L4f003a.  if v4 == 0 then goto L4f004a;
  #L4f003e.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4f0044.  v3:= temp;
  #L4f0046.  if v3 == 0 then goto L4f005a;
  #L4f004a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f004e.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f0052.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f0058.  return @kind void;
  #L4f005a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f0060.  v3:= temp;
  #L4f0062.  if v3 != 0 then goto L4f0092;
  #L4f0066.  return @kind void;
  #L4f0068.  call temp:= `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4f006e.  v3:= temp @kind object;
  #L4f0070.  @monitorenter v3
  #L4f0072.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f0078.  @monitorexit v3
  #L4f007a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f007e.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f0084.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f008a.  v3:= temp;
  #L4f008c.  if v3 == 0 then goto L4f0092;
  #L4f0090.  return @kind void;
  #L4f0092.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4f0098.  return @kind void;
  #L4f009a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f009c.  @monitorexit v3
  #L4f009e.  throw v4;
  catch `java.lang.Throwable` @[L4f0072..L4f007a] goto L4f009a;
  catch `java.lang.Throwable` @[L4f009c..L4f009e] goto L4f009a;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efcc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4efcc8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f00c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f00c8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f00ce.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4f00d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f00e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f00ec.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f00f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f00f6.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4f00fc.  v2:= temp;
  #L4f00fe.  if v2 == 0 then goto L4f011a;
  #L4f0102.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4f0106.  if v2 != 0 then goto L4f0114;
  #L4f010a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f010e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f0114.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4f011a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f012c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f0130.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f0136.  v3:= temp @kind object;
  #L4f0138.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4f013c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f0142.  v3:= temp @kind object;
  #L4f0144.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L4f0148.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f014c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f0152.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a`;
  #L4f0156.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;)V` @kind direct;
  #L4f015c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4f0160.  if v1 != 0 then goto L4f017a;
  #L4f0164.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f0168.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f016e.  v1:= temp;
  #L4f0170.  if v1 == 0 then goto L4f017a;
  #L4f0174.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4f017a.  return @kind void;
  #L4f017c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f017e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f0184.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f0188.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f018e.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f0194.  return @kind void;
  catch `java.lang.Throwable` @[L4f012c..L4f0148] goto L4f017c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f01b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f01b8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f01be.  v0:= temp;
  #L4f01c0.  if v0 == 0 then goto L4f01d2;
  #L4f01c4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f01c8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f01cc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f01d2.  return @kind void;
}
