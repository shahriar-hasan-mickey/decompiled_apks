record `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d686c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d6872.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d6876.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4d687a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L4d687e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` := v4 @kind boolean;
  #L4d6882.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d68e0.  v0:= 0I;
  #L4d68e2.  v1:= 1I;
  #L4d68e4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d68ea.  v0:= temp;
  #L4d68ec.  if v0 == 0 then goto L4d690e;
  #L4d68f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4d68f4.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4d68f8.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d68fe.  goto L4d690e;
  #L4d6900.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d6902.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d6908.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d690e.  return @kind void;
  catch `java.lang.Throwable` @[L4d68f0..L4d68fe] goto L4d6900;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6894.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4d6898.  if v0 == 0 then goto L4d68b6;
  #L4d689c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4d68a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d68a6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d68ac.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d68b0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d68b4.  goto L4d68ce;
  #L4d68b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d68ba.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d68c0.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d68c4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d68c8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4d68ce.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d692c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4d6930.  if v0 == 0 then goto L4d697e;
  #L4d6934.  v0:= 0I;
  #L4d6936.  v1:= 1I;
  #L4d6938.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d693e.  v0:= temp;
  #L4d6940.  if v0 == 0 then goto L4d6968;
  #L4d6944.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4d6948.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4d694c.  call `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d6952.  goto L4d6968;
  #L4d6954.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d6956.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d695c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6960.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6966.  return @kind void;
  #L4d6968.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d696c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d6972.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6976.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d697c.  goto L4d6998;
  #L4d697e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6982.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d6988.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d698c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d6992.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4d6998.  return @kind void;
  catch `java.lang.Throwable` @[L4d6944..L4d6952] goto L4d6954;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d69b8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4d69bc.  if v0 == 0 then goto L4d6a28;
  #L4d69c0.  v0:= 0I;
  #L4d69c2.  v1:= 0I;
  #L4d69c4.  v2:= 1I;
  #L4d69c6.  call temp:= `compareAndSet`(v6, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d69cc.  v3:= temp;
  #L4d69ce.  if v3 == 0 then goto L4d69ea;
  #L4d69d2.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4d69d6.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4d69da.  call `accept`(v3, v4) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d69e0.  goto L4d69ea;
  #L4d69e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d69e4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d69ea.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d69ee.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d69f4.  if v0 == 0 then goto L4d6a1c;
  #L4d69f8.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d69fc.  v4:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4d6a00.  v5:= 2I;
  #L4d6a02.  v5:= new `java.lang.Throwable`[v5];
  #L4d6a06.  v5[v1]:= v7 @kind object;
  #L4d6a0a.  v5[v2]:= v0 @kind object;
  #L4d6a0e.  call `<init>`(v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4d6a14.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6a1a.  goto L4d6a42;
  #L4d6a1c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6a20.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6a26.  goto L4d6a42;
  #L4d6a28.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6a2c.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6a32.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d6a36.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d6a3c.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L4d6a42.  return @kind void;
  catch `java.lang.Throwable` @[L4d69d2..L4d69e0] goto L4d69e2;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6a60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6a64.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d6a6a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6a7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d6a80.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d6a86.  v0:= temp;
  #L4d6a88.  if v0 == 0 then goto L4d6a9a;
  #L4d6a8c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d6a90.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6a94.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d6a9a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableUsing$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6aac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d6ab0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d6ab6.  return @kind void;
}
