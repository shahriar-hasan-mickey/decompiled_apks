record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription` @kind class {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.<init>:(JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cdc14.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L4cdc1a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v1 @kind wide;
  #L4cdc1e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` := v3 @kind wide;
  #L4cdc22.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4cdc34.  v0:= 1I;
  #L4cdc36.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4cdc3a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4cdc4c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L4cdc50.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v0 @kind wide;
  #L4cdc54.  return @kind void;
}
procedure `java.lang.Long` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.e:()Ljava/lang/Long;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cdbc0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L4cdbc4.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L4cdbc8.  v4:= lcmp(v0, v2);
  #L4cdbcc.  if v4 != 0 then goto L4cdbd4;
  #L4cdbd0.  v0:= 0I;
  #L4cdbd2.  return v0 @kind object;
  #L4cdbd4.  v2:= 1L;
  #L4cdbd8.  v2:= v2 + v0 @kind long;
  #L4cdbda.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v2 @kind wide;
  #L4cdbde.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cdbe4.  v0:= temp @kind object;
  #L4cdbe6.  return v0 @kind object;
}
procedure `void` `f`(`long` v0 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.f:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cdb80.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L4cdb84.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L4cdb88.  v4:= lcmp(v0, v2);
  #L4cdb8c.  if v4 != 0 then goto L4cdb94;
  #L4cdb90.  v0:= 1I;
  #L4cdb92.  goto L4cdb96;
  #L4cdb94.  v0:= 0I;
  #L4cdb96.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4cdbf8.  call temp:= `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.e:()Ljava/lang/Long;` @kind virtual;
  #L4cdbfe.  v0:= temp @kind object;
  #L4cdc00.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cdc68.  call temp:= `validate`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4cdc6e.  v0:= temp;
  #L4cdc70.  if v0 == 0 then goto L4cdca8;
  #L4cdc74.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cdc7a.  v0:= temp @kind wide;
  #L4cdc7c.  v2:= 0L;
  #L4cdc80.  v4:= lcmp(v0, v2);
  #L4cdc84.  if v4 != 0 then goto L4cdca8;
  #L4cdc88.  v0:= 9223372036854775807L;
  #L4cdc92.  v2:= lcmp(v6, v0);
  #L4cdc96.  if v2 != 0 then goto L4cdca2;
  #L4cdc9a.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.a:()V` @kind virtual;
  #L4cdca0.  goto L4cdca8;
  #L4cdca2.  call `f`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.f:(J)V` @kind virtual;
  #L4cdca8.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4cdba8.  v1:= v1 ^& 1;
  #L4cdbac.  return v1;
}
