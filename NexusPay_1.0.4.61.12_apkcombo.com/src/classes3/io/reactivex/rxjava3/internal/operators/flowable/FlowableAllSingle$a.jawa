record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b8758.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b875e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4b8762.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4b8766.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8778.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b877c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b8782.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b8786.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4b878a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b8734.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b8738.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b873c.  if v0 != v1 then goto L4b8744;
  #L4b8740.  v0:= 1I;
  #L4b8742.  goto L4b8746;
  #L4b8744.  v0:= 0I;
  #L4b8746.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b879c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L4b87a0.  if v0 == 0 then goto L4b87a6;
  #L4b87a4.  return @kind void;
  #L4b87a6.  v0:= 1I;
  #L4b87a8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4b87ac.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b87b0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4b87b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4b87b8.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4b87bc.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4b87c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b87d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L4b87d8.  if v0 == 0 then goto L4b87e4;
  #L4b87dc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b87e2.  return @kind void;
  #L4b87e4.  v0:= 1I;
  #L4b87e6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4b87ea.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b87ee.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4b87f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4b87f6.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b87fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8810.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L4b8814.  if v0 == 0 then goto L4b881a;
  #L4b8818.  return @kind void;
  #L4b881a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4b881e.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4b8824.  v2:= temp;
  #L4b8826.  if v2 != 0 then goto L4b8850;
  #L4b882a.  v2:= 1I;
  #L4b882c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4b8830.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b8834.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b883a.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b883e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4b8842.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4b8846.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4b884a.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4b8850.  return @kind void;
  #L4b8852.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b8854.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b885a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b885e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b8864.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b8868.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4b886c.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b8872.  return @kind void;
  catch `java.lang.Throwable` @[L4b881a..L4b8826] goto L4b8852;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAllSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b8890.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b8894.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b889a.  v0:= temp;
  #L4b889c.  if v0 == 0 then goto L4b88be;
  #L4b88a0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4b88a4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4b88a8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b88ae.  v0:= 9223372036854775807L;
  #L4b88b8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b88be.  return @kind void;
}
