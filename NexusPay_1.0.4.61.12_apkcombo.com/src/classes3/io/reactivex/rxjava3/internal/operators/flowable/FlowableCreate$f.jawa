record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4beebc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4beec2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4beec6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4beecc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4beed0.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4beed4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4beeda.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4beede.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.c:()V` @AccessFlag  {
    temp;

  #L4bf07c.  call `f`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L4bf082.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bf094.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bf098.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bf09e.  v0:= temp;
  #L4bf0a0.  if v0 != 0 then goto L4bf0b0;
  #L4bf0a4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bf0a8.  v1:= 0I;
  #L4bf0aa.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4bf0b0.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.e:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bee80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L4bee84.  if v0 != 0 then goto L4beea8;
  #L4bee88.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bee8e.  v0:= temp;
  #L4bee90.  if v0 == 0 then goto L4bee96;
  #L4bee94.  goto L4beea8;
  #L4bee96.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4bee9a.  v2:= 1I;
  #L4bee9c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v2 @kind boolean;
  #L4beea0.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L4beea6.  return v2;
  #L4beea8.  v2:= 0I;
  #L4beeaa.  return v2;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4beef0.  v0:= v17 @kind object;
  #L4beef4.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4beef8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4beefe.  v1:= temp;
  #L4bef00.  if v1 == 0 then goto L4bef06;
  #L4bef04.  return @kind void;
  #L4bef06.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bef0a.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bef0e.  v3:= 1I;
  #L4bef10.  v4:= 1I;
  #L4bef12.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4bef18.  v5:= temp @kind wide;
  #L4bef1a.  v7:= 0L;
  #L4bef1e.  v9:= v7 @kind wide;
  #L4bef20.  v11:= 0I;
  #L4bef22.  v12:= 0I;
  #L4bef24.  v13:= lcmp(v9, v5);
  #L4bef28.  if v13 == 0 then goto L4bef8e;
  #L4bef2c.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bef32.  v14:= temp;
  #L4bef34.  if v14 == 0 then goto L4bef40;
  #L4bef38.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4bef3e.  return @kind void;
  #L4bef40.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L4bef44.  call temp:= `getAndSet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4bef4a.  v15:= temp @kind object;
  #L4bef4c.  if v15 != 0 then goto L4bef56;
  #L4bef50.  v16:= 1I;
  #L4bef54.  goto L4bef5a;
  #L4bef56.  v16:= 0I;
  #L4bef5a.  if v14 == 0 then goto L4bef7a;
  #L4bef5e.  if v16 == 0 then goto L4bef7a;
  #L4bef62.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L4bef66.  if v1 == 0 then goto L4bef72;
  #L4bef6a.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bef70.  goto L4bef78;
  #L4bef72.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L4bef78.  return @kind void;
  #L4bef7a.  if v16 == 0 then goto L4bef80;
  #L4bef7e.  goto L4bef8e;
  #L4bef80.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bef86.  v11:= 1L;
  #L4bef8a.  v9:= v9 + v11 @kind long;
  #L4bef8c.  goto L4bef20;
  #L4bef8e.  if v13 != 0 then goto L4befd8;
  #L4bef92.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bef98.  v5:= temp;
  #L4bef9a.  if v5 == 0 then goto L4befa6;
  #L4bef9e.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4befa4.  return @kind void;
  #L4befa6.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L4befaa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4befb0.  v6:= temp @kind object;
  #L4befb2.  if v6 != 0 then goto L4befb8;
  #L4befb6.  v11:= 1I;
  #L4befb8.  if v5 == 0 then goto L4befd8;
  #L4befbc.  if v11 == 0 then goto L4befd8;
  #L4befc0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L4befc4.  if v1 == 0 then goto L4befd0;
  #L4befc8.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4befce.  goto L4befd6;
  #L4befd0.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L4befd6.  return @kind void;
  #L4befd8.  v5:= lcmp(v9, v7);
  #L4befdc.  if v5 == 0 then goto L4befe6;
  #L4befe0.  call temp:= `produced`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4befe6.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4befea.  v4:= -v4 @kind int;
  #L4befec.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4beff2.  v4:= temp;
  #L4beff4.  if v4 != 0 then goto L4bef12;
  #L4beff8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf00c.  v0:= 1I;
  #L4bf00e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v0 @kind boolean;
  #L4bf012.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L4bf018.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf02c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L4bf030.  if v0 != 0 then goto L4bf06a;
  #L4bf034.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bf03a.  v0:= temp;
  #L4bf03c.  if v0 == 0 then goto L4bf042;
  #L4bf040.  goto L4bf06a;
  #L4bf042.  if v2 != 0 then goto L4bf05a;
  #L4bf046.  v2:= "onNext called with a null value." @kind object;
  #L4bf04a.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4bf050.  v2:= temp @kind object;
  #L4bf052.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bf058.  return @kind void;
  #L4bf05a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bf05e.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4bf064.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$f;.f:()V` @kind virtual;
  #L4bf06a.  return @kind void;
}
