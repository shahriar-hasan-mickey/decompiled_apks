record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.functions.Consumer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ce5d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ce5de.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` := v1 @kind object;
  #L4ce5e2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce5f4.  call temp:= `replace`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ce5fa.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L4ce5fe.  @monitorenter v2
  #L4ce600.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.e` @type ^`boolean` @kind boolean;
  #L4ce604.  if v0 == 0 then goto L4ce616;
  #L4ce608.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L4ce60c.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L4ce610.  call `reset`(v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.reset:()V` @kind virtual;
  #L4ce616.  @monitorexit v2
  #L4ce618.  return @kind void;
  #L4ce61a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ce61c.  @monitorexit v2
  #L4ce61e.  throw v0;
  catch `java.lang.Throwable` @[L4ce600..L4ce61e] goto L4ce61a;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ce63c.  v1:= (`io.reactivex.rxjava3.disposables.Disposable`) v1 @kind object;
  #L4ce640.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4ce646.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce658.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L4ce65c.  call `g`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4ce662.  return @kind void;
}
