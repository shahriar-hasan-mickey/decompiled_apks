record `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e3548.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e354e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4e3552.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e3556.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int` := v3;
  #L4e355a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4e355e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4e3562.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4e3568.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4e356c.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e3570.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e3576.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e357a.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a`;
  #L4e357e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;)V` @kind direct;
  #L4e3584.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` := v1 @kind object;
  #L4e3588.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4e358c.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4e3592.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4e3596.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4e35fc.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e3602.  v0:= temp;
  #L4e3604.  if v0 == 0 then goto L4e360a;
  #L4e3608.  return @kind void;
  #L4e360a.  v0:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e360e.  v1:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3612.  v2:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e3616.  v3:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e361a.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e361e.  v5:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int`;
  #L4e3622.  v6:= v5 ^> 1;
  #L4e3626.  v5:= v5 - v6 @kind int;
  #L4e3628.  v6:= 1I;
  #L4e362a.  v7:= 1I;
  #L4e362c.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4e3630.  v9:= 0I;
  #L4e3632.  if v8 == 0 then goto L4e3644;
  #L4e3636.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e363c.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4e3640.  goto L4e3758;
  #L4e3644.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int`;
  #L4e3648.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e364e.  v10:= temp @kind object;
  #L4e3650.  if v10 == 0 then goto L4e367a;
  #L4e3654.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3658.  if v1 == v10 then goto L4e3668;
  #L4e365c.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3660.  if v1 != v10 then goto L4e367a;
  #L4e3664.  if v8 != 0 then goto L4e367a;
  #L4e3668.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e366e.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4e3672.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e3678.  return @kind void;
  #L4e367a.  v10:= 0I;
  #L4e367c.  if v8 != 0 then goto L4e371e;
  #L4e3680.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` @kind boolean;
  #L4e3684.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e368a.  v9:= temp @kind object;
  #L4e368c.  if v9 != 0 then goto L4e3694;
  #L4e3690.  v11:= 1I;
  #L4e3692.  goto L4e3696;
  #L4e3694.  v11:= 0I;
  #L4e3696.  if v8 == 0 then goto L4e36a6;
  #L4e369a.  if v11 == 0 then goto L4e36a6;
  #L4e369e.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e36a4.  return @kind void;
  #L4e36a6.  if v11 == 0 then goto L4e36ac;
  #L4e36aa.  goto L4e3758;
  #L4e36ac.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int`;
  #L4e36b0.  v8:= v8 + v6 @kind int;
  #L4e36b2.  if v8 != v5 then goto L4e36c8;
  #L4e36b6.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int` := v10;
  #L4e36ba.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e36be.  v10:= (`long`) v5 @kind i2l;
  #L4e36c0.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e36c6.  goto L4e36cc;
  #L4e36c8.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int` := v8;
  #L4e36cc.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e36d0.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e36d6.  v8:= temp @kind object;
  #L4e36d8.  v9:= "The mapper returned a null SingleSource" @kind object;
  #L4e36dc.  call temp:= `requireNonNull`(v8, v9) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e36e2.  v8:= temp @kind object;
  #L4e36e4.  v8:= (`io.reactivex.rxjava3.core.SingleSource`) v8 @kind object;
  #L4e36e8.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v6;
  #L4e36ec.  v9:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L4e36f0.  call `subscribe`(v8, v9) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4e36f6.  goto L4e3758;
  #L4e36f8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e36fa.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e3700.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3704.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e370a.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e3710.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e3716.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e371c.  return @kind void;
  #L4e371e.  v11:= 2I;
  #L4e3720.  if v8 != v11 then goto L4e3758;
  #L4e3724.  v11:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.l` @type ^`long` @kind wide;
  #L4e3728.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4e372e.  v13:= temp @kind wide;
  #L4e3730.  v8:= lcmp(v11, v13);
  #L4e3734.  if v8 == 0 then goto L4e3758;
  #L4e3738.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` @kind object;
  #L4e373c.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4e3740.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e3746.  v8:= 1L;
  #L4e374a.  v11:= v11 + v8 @kind long;
  #L4e374c.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.l` @type ^`long` := v11 @kind wide;
  #L4e3750.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v10;
  #L4e3754.  goto L4e362c;
  #L4e3758.  v7:= -v7 @kind int;
  #L4e375a.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e3760.  v7:= temp;
  #L4e3762.  if v7 != 0 then goto L4e362c;
  #L4e3766.  return @kind void;
  catch `java.lang.Throwable` @[L4e36cc..L4e36e8] goto L4e36f8;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e3784.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3788.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e378e.  v2:= temp;
  #L4e3790.  if v2 == 0 then goto L4e37b6;
  #L4e3794.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3798.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e379c.  if v2 == v0 then goto L4e37aa;
  #L4e37a0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e37a4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e37aa.  v2:= 0I;
  #L4e37ac.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v2;
  #L4e37b0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e37b6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4e37c8.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v1 @kind object;
  #L4e37cc.  v1:= 2I;
  #L4e37ce.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v1;
  #L4e37d2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e37d8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e35a8.  v0:= 1I;
  #L4e35aa.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4e35ae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e35b2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e35b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L4e35bc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4e35c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e35c6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e35cc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e35d2.  v0:= temp;
  #L4e35d4.  if v0 != 0 then goto L4e35e8;
  #L4e35d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e35dc.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e35e2.  v0:= 0I;
  #L4e35e4.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v0 @kind object;
  #L4e35e8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e37ec.  v0:= 1I;
  #L4e37ee.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4e37f2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e37f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e380c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3810.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e3816.  v2:= temp;
  #L4e3818.  if v2 == 0 then goto L4e383e;
  #L4e381c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3820.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3824.  if v2 != v0 then goto L4e3832;
  #L4e3828.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L4e382c.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4e3832.  v2:= 1I;
  #L4e3834.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4e3838.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e383e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e3850.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e3854.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e385a.  v2:= temp;
  #L4e385c.  if v2 != 0 then goto L4e3880;
  #L4e3860.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3864.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e386a.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4e386e.  v0:= "queue full?!" @kind object;
  #L4e3872.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e3878.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e387e.  return @kind void;
  #L4e3880.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e3886.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e3898.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e389c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4e38a2.  v0:= temp;
  #L4e38a4.  if v0 == 0 then goto L4e38c2;
  #L4e38a8.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4e38ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e38b0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4e38b6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int`;
  #L4e38ba.  v0:= (`long`) v0 @kind i2l;
  #L4e38bc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e38c2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e38d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e38d8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4e38de.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e38e4.  return @kind void;
}
