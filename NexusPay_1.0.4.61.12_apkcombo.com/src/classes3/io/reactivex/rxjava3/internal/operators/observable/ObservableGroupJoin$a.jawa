record `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f1eec.  v0:= 1I;
  #L4f1eee.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f1ef4.  v0:= temp @kind object;
  #L4f1ef6.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f1efa.  v0:= 2I;
  #L4f1efc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f1f02.  v0:= temp @kind object;
  #L4f1f04.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f1f08.  v0:= 3I;
  #L4f1f0a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f1f10.  v0:= temp @kind object;
  #L4f1f12.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f1f16.  v0:= 4I;
  #L4f1f18.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f1f1e.  v0:= temp @kind object;
  #L4f1f20.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f1f24.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f1f38.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f1f3e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4f1f42.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4f1f46.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4f1f4c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4f1f50.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f1f54.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4f1f5a.  v0:= temp;
  #L4f1f5c.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f1f62.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4f1f66.  v2:= new `java.util.LinkedHashMap`;
  #L4f1f6a.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4f1f70.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L4f1f74.  v2:= new `java.util.LinkedHashMap`;
  #L4f1f78.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4f1f7e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L4f1f82.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f1f86.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f1f8c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f1f90.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4f1f94.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4f1f98.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L4f1f9c.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4f1fa0.  v3:= 2I;
  #L4f1fa2.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4f1fa8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4f1fac.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f24b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f24b8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4f24be.  v0:= temp;
  #L4f24c0.  if v0 == 0 then goto L4f24d6;
  #L4f24c4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f24c8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f24ce.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4f24d4.  goto L4f24dc;
  #L4f24d6.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f24dc.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f24f0.  @monitorenter v1
  #L4f24f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f24f6.  if v2 == 0 then goto L4f2500;
  #L4f24fa.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4f24fe.  goto L4f2504;
  #L4f2500.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4f2504.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f250a.  @monitorexit v1
  #L4f250c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4f2512.  return @kind void;
  #L4f2514.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f2516.  @monitorexit v1
  #L4f2518.  throw v2;
  catch `java.lang.Throwable` @[L4f24f2..L4f250c] goto L4f2514;
  catch `java.lang.Throwable` @[L4f2516..L4f2518] goto L4f2514;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f2458.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f245c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4f2462.  v0:= temp;
  #L4f2464.  if v0 == 0 then goto L4f2470;
  #L4f2468.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4f246e.  goto L4f2476;
  #L4f2470.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f2476.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f2488.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f248c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f2492.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f2496.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f249c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4f24a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1fdc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L4f1fe0.  if v0 == 0 then goto L4f1fe6;
  #L4f1fe4.  return @kind void;
  #L4f1fe6.  v0:= 1I;
  #L4f1fe8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4f1fec.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4f1ff2.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f1ff8.  v0:= temp;
  #L4f1ffa.  if v0 != 0 then goto L4f2008;
  #L4f1ffe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f2002.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f2008.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f2408.  @monitorenter v1
  #L4f240a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f240e.  if v2 == 0 then goto L4f2418;
  #L4f2412.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4f2416.  goto L4f241c;
  #L4f2418.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4f241c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f2422.  @monitorexit v1
  #L4f2424.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4f242a.  return @kind void;
  #L4f242c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f242e.  @monitorexit v1
  #L4f2430.  throw v2;
  catch `java.lang.Throwable` @[L4f240a..L4f2424] goto L4f242c;
  catch `java.lang.Throwable` @[L4f242e..L4f2430] goto L4f242c;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L4f1fc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f1fc4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f1fca.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f201c.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f2022.  v0:= temp;
  #L4f2024.  if v0 == 0 then goto L4f202a;
  #L4f2028.  return @kind void;
  #L4f202a.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f202e.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f2032.  v2:= 1I;
  #L4f2034.  v3:= 1I;
  #L4f2036.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L4f203a.  if v4 == 0 then goto L4f2046;
  #L4f203e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f2044.  return @kind void;
  #L4f2046.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f204a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2050.  v4:= temp @kind object;
  #L4f2052.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4f2056.  if v4 == 0 then goto L4f206e;
  #L4f205a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f2060.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4f2066.  call `h`(v9, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f206c.  return @kind void;
  #L4f206e.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f2072.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f2078.  v4:= temp;
  #L4f207a.  v5:= 0I;
  #L4f207c.  if v4 != 0 then goto L4f2084;
  #L4f2080.  v4:= 1I;
  #L4f2082.  goto L4f2086;
  #L4f2084.  v4:= 0I;
  #L4f2086.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f208c.  v6:= temp @kind object;
  #L4f208e.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L4f2092.  if v6 != 0 then goto L4f209a;
  #L4f2096.  v7:= 1I;
  #L4f2098.  goto L4f209c;
  #L4f209a.  v7:= 0I;
  #L4f209c.  if v4 == 0 then goto L4f20fe;
  #L4f20a0.  if v7 == 0 then goto L4f20fe;
  #L4f20a4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f20a8.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f20ae.  v0:= temp @kind object;
  #L4f20b0.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f20b6.  v0:= temp @kind object;
  #L4f20b8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f20be.  v2:= temp;
  #L4f20c0.  if v2 == 0 then goto L4f20d8;
  #L4f20c4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f20ca.  v2:= temp @kind object;
  #L4f20cc.  v2:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v2 @kind object;
  #L4f20d0.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4f20d6.  goto L4f20b8;
  #L4f20d8.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f20dc.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f20e2.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f20e6.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f20ec.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f20f0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f20f6.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f20fc.  return @kind void;
  #L4f20fe.  if v7 == 0 then goto L4f2112;
  #L4f2102.  v3:= -v3 @kind int;
  #L4f2104.  call temp:= `addAndGet`(v9, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f210a.  v3:= temp;
  #L4f210c.  if v3 != 0 then goto L4f2036;
  #L4f2110.  return @kind void;
  #L4f2112.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f2118.  v4:= temp @kind object;
  #L4f211a.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4f211e.  if v6 != v7 then goto L4f2208;
  #L4f2122.  call temp:= `create`() @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:()Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4f2128.  v5:= temp @kind object;
  #L4f212a.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int`;
  #L4f212e.  v7:= v6 + 1;
  #L4f2132.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int` := v7;
  #L4f2136.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f213a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f2140.  v8:= temp @kind object;
  #L4f2142.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f2148.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f214c.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f2152.  v7:= temp @kind object;
  #L4f2154.  v8:= "The leftEnd returned a null ObservableSource" @kind object;
  #L4f2158.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f215e.  v7:= temp @kind object;
  #L4f2160.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4f2164.  v8:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4f2168.  call `<init>`(v8, v9, v2, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4f216e.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f2172.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f2178.  call `subscribe`(v7, v8) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f217e.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2182.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2188.  v6:= temp @kind object;
  #L4f218a.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4f218e.  if v6 == 0 then goto L4f21a6;
  #L4f2192.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f2198.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4f219e.  call `h`(v9, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f21a4.  return @kind void;
  #L4f21a6.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4f21aa.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f21b0.  v4:= temp @kind object;
  #L4f21b2.  v6:= "The resultSelector returned a null value" @kind object;
  #L4f21b6.  call temp:= `requireNonNull`(v4, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f21bc.  v4:= temp @kind object;
  #L4f21be.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f21c4.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f21c8.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f21ce.  v4:= temp @kind object;
  #L4f21d0.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f21d6.  v4:= temp @kind object;
  #L4f21d8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f21de.  v6:= temp;
  #L4f21e0.  if v6 == 0 then goto L4f2036;
  #L4f21e4.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f21ea.  v6:= temp @kind object;
  #L4f21ec.  call `onNext`(v5, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4f21f2.  goto L4f21d8;
  #L4f21f4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f21f6.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f21fc.  return @kind void;
  #L4f21fe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f2200.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f2206.  return @kind void;
  #L4f2208.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4f220c.  if v6 != v7 then goto L4f22ca;
  #L4f2210.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int`;
  #L4f2214.  v7:= v6 + 1;
  #L4f2218.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int` := v7;
  #L4f221c.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f2220.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f2226.  v8:= temp @kind object;
  #L4f2228.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f222e.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f2232.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f2238.  v7:= temp @kind object;
  #L4f223a.  v8:= "The rightEnd returned a null ObservableSource" @kind object;
  #L4f223e.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f2244.  v7:= temp @kind object;
  #L4f2246.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4f224a.  v8:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4f224e.  call `<init>`(v8, v9, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4f2254.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f2258.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f225e.  call `subscribe`(v7, v8) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f2264.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2268.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f226e.  v5:= temp @kind object;
  #L4f2270.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4f2274.  if v5 == 0 then goto L4f228c;
  #L4f2278.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f227e.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4f2284.  call `h`(v9, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f228a.  return @kind void;
  #L4f228c.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f2290.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f2296.  v5:= temp @kind object;
  #L4f2298.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f229e.  v5:= temp @kind object;
  #L4f22a0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f22a6.  v6:= temp;
  #L4f22a8.  if v6 == 0 then goto L4f2036;
  #L4f22ac.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f22b2.  v6:= temp @kind object;
  #L4f22b4.  v6:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v6 @kind object;
  #L4f22b8.  call `onNext`(v6, v4) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4f22be.  goto L4f22a0;
  #L4f22c0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f22c2.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f22c8.  return @kind void;
  #L4f22ca.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4f22ce.  if v6 != v5 then goto L4f230a;
  #L4f22d2.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4f22d6.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f22da.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4f22de.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f22e4.  v6:= temp @kind object;
  #L4f22e6.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f22ec.  v5:= temp @kind object;
  #L4f22ee.  v5:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v5 @kind object;
  #L4f22f2.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f22f6.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f22fc.  if v5 == 0 then goto L4f2036;
  #L4f2300.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4f2306.  goto L4f2036;
  #L4f230a.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4f230e.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f2312.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4f2316.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f231c.  v6:= temp @kind object;
  #L4f231e.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f2324.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f2328.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f232e.  goto L4f2036;
  catch `java.lang.Throwable` @[L4f2148..L4f2164] goto L4f21fe;
  catch `java.lang.Throwable` @[L4f21a6..L4f21be] goto L4f21f4;
  catch `java.lang.Throwable` @[L4f222e..L4f224a] goto L4f22c0;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f2368.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f236c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4f2372.  v0:= temp @kind object;
  #L4f2374.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f2378.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f237e.  v1:= temp @kind object;
  #L4f2380.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f2386.  v1:= temp @kind object;
  #L4f2388.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f238e.  v2:= temp;
  #L4f2390.  if v2 == 0 then goto L4f23a8;
  #L4f2394.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f239a.  v2:= temp @kind object;
  #L4f239c.  v2:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v2 @kind object;
  #L4f23a0.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f23a6.  goto L4f2388;
  #L4f23a8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f23ac.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f23b2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f23b6.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f23bc.  call `onError`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f23c2.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.rxjava3.core.Observer` v3 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4f23d4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f23da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f23de.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4f23e4.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f23ea.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4f23f0.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f23f6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1ed4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L4f1ed8.  return v0;
}
