record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c0a4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4c0a52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c0a56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.c` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4c0a5a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c0a6c.  v0:= instanceof @variable v5 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4c0a70.  if v0 == 0 then goto L4c0a96;
  #L4c0a74.  v5:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v5 @kind object;
  #L4c0a78.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4c0a7c.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a`;
  #L4c0a80.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c0a84.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.c` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c0a88.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @kind direct;
  #L4c0a8e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4c0a94.  goto L4c0ab2;
  #L4c0a96.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4c0a9a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b`;
  #L4c0a9e.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c0aa2.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.c` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c0aa6.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @kind direct;
  #L4c0aac.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4c0ab2.  return @kind void;
}
