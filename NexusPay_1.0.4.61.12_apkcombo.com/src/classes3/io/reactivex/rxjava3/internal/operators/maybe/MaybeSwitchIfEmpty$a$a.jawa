record `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmpty$a$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e075c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e0762.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4e0766.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4e076a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmpty$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e077c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0780.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e0786.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmpty$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0798.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e079c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e07a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmpty$a$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e07b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e07b8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e07be.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmpty$a$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e07d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$a$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e07d4.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e07da.  return @kind void;
}
