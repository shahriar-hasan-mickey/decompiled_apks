record `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4e76a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e76a6.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4e76aa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e76b0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4e76b4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4e76b8.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[v3];
  #L4e76bc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] := v2 @kind object;
  #L4e76c0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v7 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.a:([Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e7720.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L4e7724.  v1:= length @variable v0;
  #L4e7726.  v2:= 0I;
  #L4e7728.  v3:= 0I;
  #L4e772a.  if v3 >= v1 then goto L4e7748;
  #L4e772e.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`;
  #L4e7732.  v5:= v3 + 1;
  #L4e7736.  v6:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e773a.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;ILio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4e7740.  v0[v3]:= v4 @kind object;
  #L4e7744.  v3:= v5;
  #L4e7746.  goto L4e772a;
  #L4e7748.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e774c.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4e7752.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e7756.  call `onSubscribe`(v3, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e775c.  if v2 >= v1 then goto L4e7786;
  #L4e7760.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e7764.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4e776a.  v3:= temp;
  #L4e776c.  if v3 == 0 then goto L4e7772;
  #L4e7770.  return @kind void;
  #L4e7772.  v3:= v8[v2] @kind object;
  #L4e7776.  v4:= v0[v2] @kind object;
  #L4e777a.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e7780.  v2:= v2 + 1;
  #L4e7784.  goto L4e775c;
  #L4e7786.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e7648.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e764c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4e7652.  v0:= temp;
  #L4e7654.  v1:= 0I;
  #L4e7656.  if v0 != 0 then goto L4e768e;
  #L4e765a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e765e.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4e7664.  v0:= temp;
  #L4e7666.  if v0 == 0 then goto L4e768e;
  #L4e766a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L4e766e.  v2:= length @variable v0;
  #L4e7670.  if v1 >= v2 then goto L4e768a;
  #L4e7674.  v3:= v1 + 1;
  #L4e7678.  if v3 == v5 then goto L4e7686;
  #L4e767c.  v1:= v0[v1] @kind object;
  #L4e7680.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L4e7686.  v1:= v3;
  #L4e7688.  goto L4e7670;
  #L4e768a.  v5:= 1I;
  #L4e768c.  return v5;
  #L4e768e.  return v1;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e76d4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e76d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4e76de.  v0:= temp;
  #L4e76e0.  v1:= -1I;
  #L4e76e2.  if v0 == v1 then goto L4e770c;
  #L4e76e6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e76ea.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4e76f0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L4e76f4.  v1:= length @variable v0;
  #L4e76f6.  v2:= 0I;
  #L4e76f8.  if v2 >= v1 then goto L4e770c;
  #L4e76fc.  v3:= v0[v2] @kind object;
  #L4e7700.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L4e7706.  v2:= v2 + 1;
  #L4e770a.  goto L4e76f8;
  #L4e770c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e761c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e7620.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4e7626.  v0:= temp;
  #L4e7628.  v1:= -1I;
  #L4e762a.  if v0 != v1 then goto L4e7632;
  #L4e762e.  v0:= 1I;
  #L4e7630.  goto L4e7634;
  #L4e7632.  v0:= 0I;
  #L4e7634.  return v0;
}
