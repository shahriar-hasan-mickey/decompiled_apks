record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4bcf00.  v0:= 0I;
  #L4bcf02.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4bcf08.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` := v2 @kind object;
  #L4bcf0c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bcf20.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` @kind wide;
  #L4bcf24.  v2:= 0L;
  #L4bcf28.  v4:= lcmp(v0, v2);
  #L4bcf2c.  if v4 == 0 then goto L4bcf3a;
  #L4bcf30.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` := v2 @kind wide;
  #L4bcf34.  call `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4bcf3a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind object;
  #L4bcf3e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;.b:()V` @kind interface;
  #L4bcf44.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bcf58.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` @kind wide;
  #L4bcf5c.  v2:= 0L;
  #L4bcf60.  v4:= lcmp(v0, v2);
  #L4bcf64.  if v4 == 0 then goto L4bcf72;
  #L4bcf68.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` := v2 @kind wide;
  #L4bcf6c.  call `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4bcf72.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind object;
  #L4bcf76.  call `a`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bcf7c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bcf90.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` @kind wide;
  #L4bcf94.  v2:= 1L;
  #L4bcf98.  v0:= v0 + v2 @kind long;
  #L4bcf9a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` := v0 @kind wide;
  #L4bcf9e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind object;
  #L4bcfa2.  call `c`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;.c:(Ljava/lang/Object;)V` @kind interface;
  #L4bcfa8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L4bcfbc.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4bcfc2.  return @kind void;
}
