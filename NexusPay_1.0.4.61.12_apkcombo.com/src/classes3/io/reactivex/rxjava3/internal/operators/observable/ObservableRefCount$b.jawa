record `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v2 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f6774.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f677a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f677e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` := v2 @kind object;
  #L4f6782.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v3 @kind object;
  #L4f6786.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6798.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f679c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f67a2.  v0:= 0I;
  #L4f67a4.  v1:= 1I;
  #L4f67a6.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f67ac.  v0:= temp;
  #L4f67ae.  if v0 == 0 then goto L4f67c0;
  #L4f67b2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4f67b6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f67ba.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4f67c0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6754.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f6758.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4f675e.  v0:= temp;
  #L4f6760.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f67d4.  v0:= 0I;
  #L4f67d6.  v1:= 1I;
  #L4f67d8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f67de.  v0:= temp;
  #L4f67e0.  if v0 == 0 then goto L4f67fc;
  #L4f67e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4f67e8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f67ec.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4f67f2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f67f6.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f67fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6810.  v0:= 0I;
  #L4f6812.  v1:= 1I;
  #L4f6814.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f681a.  v0:= temp;
  #L4f681c.  if v0 == 0 then goto L4f683a;
  #L4f6820.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4f6824.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f6828.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4f682e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f6832.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f6838.  goto L4f6840;
  #L4f683a.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f6840.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6854.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f6858.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f685e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6870.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f6874.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f687a.  v0:= temp;
  #L4f687c.  if v0 == 0 then goto L4f688e;
  #L4f6880.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f6884.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f6888.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f688e.  return @kind void;
}
