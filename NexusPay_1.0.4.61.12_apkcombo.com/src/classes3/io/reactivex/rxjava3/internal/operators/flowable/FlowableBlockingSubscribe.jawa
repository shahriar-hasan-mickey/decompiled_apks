record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingSubscribe` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingSubscribe` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b91fc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b9202.  v0:= new `java.lang.IllegalStateException`;
  #L4b9206.  v1:= "No instances!" @kind object;
  #L4b920a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b9210.  throw v0;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b9224.  v0:= new `io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver`;
  #L4b9228.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/BlockingIgnoringReceiver;.<init>:()V` @kind direct;
  #L4b922e.  v1:= new `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber`;
  #L4b9232.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4b9238.  v2:= temp @kind object;
  #L4b923a.  v3:= `@@io.reactivex.rxjava3.internal.functions.Functions.REQUEST_MAX` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4b923e.  call `<init>`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L4b9244.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4b924a.  call `awaitForComplete`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind static;
  #L4b9250.  v4:= v0.`io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver.error` @type ^`java.lang.Throwable` @kind object;
  #L4b9254.  if v4 != 0 then goto L4b925a;
  #L4b9258.  return @kind void;
  #L4b925a.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b9260.  v4:= temp @kind object;
  #L4b9262.  throw v4;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object, `io.reactivex.rxjava3.functions.Action` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4b9274.  v0:= "onNext is null" @kind object;
  #L4b9278.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b927e.  v0:= "onError is null" @kind object;
  #L4b9282.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b9288.  v0:= "onComplete is null" @kind object;
  #L4b928c.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b9292.  v0:= new `io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber`;
  #L4b9296.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.REQUEST_MAX` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4b929a.  call `<init>`(v0, v3, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L4b92a0.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4b92a6.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.rxjava3.functions.Consumer` v8 @kind object, `io.reactivex.rxjava3.functions.Consumer` v9 @kind object, `io.reactivex.rxjava3.functions.Action` v10 @kind object, `int` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b92b8.  v0:= "onNext is null" @kind object;
  #L4b92bc.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b92c2.  v0:= "onError is null" @kind object;
  #L4b92c6.  call temp:= `requireNonNull`(v9, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b92cc.  v0:= "onComplete is null" @kind object;
  #L4b92d0.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b92d6.  v0:= "number > 0 required" @kind object;
  #L4b92da.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4b92e0.  v0:= new `io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber`;
  #L4b92e4.  call temp:= `boundedConsumer`(v11) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.boundedConsumer:(I)Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4b92ea.  v5:= temp @kind object;
  #L4b92ec.  v1:= v0 @kind object;
  #L4b92ee.  v2:= v8 @kind object;
  #L4b92f0.  v3:= v9 @kind object;
  #L4b92f2.  v4:= v10 @kind object;
  #L4b92f4.  v6:= v11;
  #L4b92f6.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscribers/BoundedSubscriber;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;I)V` @kind direct;
  #L4b92fc.  call `subscribe`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4b9302.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4b9314.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L4b9318.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L4b931e.  v1:= new `io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber`;
  #L4b9322.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L4b9328.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4b932e.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L4b9334.  v3:= temp;
  #L4b9336.  if v3 == 0 then goto L4b933c;
  #L4b933a.  goto L4b9396;
  #L4b933c.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b9342.  v3:= temp @kind object;
  #L4b9344.  if v3 != 0 then goto L4b9364;
  #L4b9348.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L4b934e.  v3:= temp;
  #L4b9350.  if v3 == 0 then goto L4b9356;
  #L4b9354.  goto L4b9396;
  #L4b9356.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b935c.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4b9362.  v3:= temp @kind object;
  #L4b9364.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @kind virtual;
  #L4b936a.  v2:= temp;
  #L4b936c.  if v2 == 0 then goto L4b9372;
  #L4b9370.  goto L4b9396;
  #L4b9372.  v2:= `@@io.reactivex.rxjava3.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L4b9376.  if v3 == v2 then goto L4b9396;
  #L4b937a.  call temp:= `acceptFull`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L4b9380.  v3:= temp;
  #L4b9382.  if v3 == 0 then goto L4b932e;
  #L4b9386.  goto L4b9396;
  #L4b9388.  v3:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b938a.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BlockingSubscriber;.cancel:()V` @kind virtual;
  #L4b9390.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b9396.  return @kind void;
  catch `java.lang.InterruptedException` @[L4b932e..L4b9382] goto L4b9388;
}
