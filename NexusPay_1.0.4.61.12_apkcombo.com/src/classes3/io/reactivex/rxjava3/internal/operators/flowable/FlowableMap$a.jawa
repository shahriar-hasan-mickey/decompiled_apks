record `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c964c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L4c9652.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c9656.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9668.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c966c.  if v0 == 0 then goto L4c9672;
  #L4c9670.  return @kind void;
  #L4c9672.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c9676.  if v0 == 0 then goto L4c9688;
  #L4c967a.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c967e.  v0:= 0I;
  #L4c9680.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c9686.  return @kind void;
  #L4c9688.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c968c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c9692.  v2:= temp @kind object;
  #L4c9694.  v0:= "The mapper function returned a null value." @kind object;
  #L4c9698.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c969e.  v2:= temp @kind object;
  #L4c96a0.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c96a4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c96aa.  return @kind void;
  #L4c96ac.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c96ae.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c96b4.  return @kind void;
  catch `java.lang.Throwable` @[L4c9688..L4c96a0] goto L4c96ac;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c960c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c9610.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c9616.  v0:= temp @kind object;
  #L4c9618.  if v0 == 0 then goto L4c9636;
  #L4c961c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c9620.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c9626.  v0:= temp @kind object;
  #L4c9628.  v1:= "The mapper function returned a null value." @kind object;
  #L4c962c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c9632.  v0:= temp @kind object;
  #L4c9634.  goto L4c9638;
  #L4c9636.  v0:= 0I;
  #L4c9638.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c95f0.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c95f6.  v1:= temp;
  #L4c95f8.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c9580.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c9584.  v1:= 1I;
  #L4c9586.  if v0 == 0 then goto L4c958c;
  #L4c958a.  return v1;
  #L4c958c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c9590.  if v0 == 0 then goto L4c95a2;
  #L4c9594.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c9598.  v0:= 0I;
  #L4c959a.  call temp:= `tryOnNext`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c95a0.  return v1;
  #L4c95a2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c95a6.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c95ac.  v3:= temp @kind object;
  #L4c95ae.  v0:= "The mapper function returned a null value." @kind object;
  #L4c95b2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c95b8.  v3:= temp @kind object;
  #L4c95ba.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c95be.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c95c4.  v3:= temp;
  #L4c95c6.  return v3;
  #L4c95c8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c95ca.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c95d0.  return v1;
  catch `java.lang.Throwable` @[L4c95a2..L4c95ba] goto L4c95c8;
}
