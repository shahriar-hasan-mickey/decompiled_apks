record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.observers.DisposableObserver` @kind class, `java.util.Iterator` @kind interface {
  `io.reactivex.rxjava3.core.Notification` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @AccessFlag ;
  `java.util.concurrent.Semaphore` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e6c44.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4e6c4a.  v0:= new `java.util.concurrent.Semaphore`;
  #L4e6c4e.  v1:= 0I;
  #L4e6c50.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L4e6c56.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L4e6c5a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e6c5e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e6c64.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4e6c68.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v1 @kind this, `io.reactivex.rxjava3.core.Notification` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6ca8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e6cac.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e6cb2.  v2:= temp @kind object;
  #L4e6cb4.  if v2 != 0 then goto L4e6cbc;
  #L4e6cb8.  v2:= 1I;
  #L4e6cba.  goto L4e6cbe;
  #L4e6cbc.  v2:= 0I;
  #L4e6cbe.  if v2 == 0 then goto L4e6ccc;
  #L4e6cc2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4e6cc6.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L4e6ccc.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e6b40.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4e6b44.  if v0 == 0 then goto L4e6b6c;
  #L4e6b48.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4e6b4e.  v0:= temp;
  #L4e6b50.  if v0 != 0 then goto L4e6b56;
  #L4e6b54.  goto L4e6b6c;
  #L4e6b56.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4e6b5a.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4e6b60.  v0:= temp @kind object;
  #L4e6b62.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e6b68.  v0:= temp @kind object;
  #L4e6b6a.  throw v0;
  #L4e6b6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4e6b70.  if v0 != 0 then goto L4e6bd8;
  #L4e6b74.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4e6b7a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.e` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4e6b7e.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L4e6b84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e6b88.  v1:= 0I;
  #L4e6b8a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e6b90.  v0:= temp @kind object;
  #L4e6b92.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4e6b96.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v0 @kind object;
  #L4e6b9a.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4e6ba0.  v1:= temp;
  #L4e6ba2.  if v1 != 0 then goto L4e6ba8;
  #L4e6ba6.  goto L4e6bd8;
  #L4e6ba8.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4e6bae.  v0:= temp @kind object;
  #L4e6bb0.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e6bb6.  v0:= temp @kind object;
  #L4e6bb8.  throw v0;
  #L4e6bba.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4e6bbc.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4e6bc2.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/rxjava3/core/Notification;` @kind static;
  #L4e6bc8.  v1:= temp @kind object;
  #L4e6bca.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L4e6bce.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e6bd4.  v0:= temp @kind object;
  #L4e6bd6.  throw v0;
  #L4e6bd8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4e6bdc.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4e6be2.  v0:= temp;
  #L4e6be4.  return v0;
  catch `java.lang.InterruptedException` @[L4e6b74..L4e6b84] goto L4e6bba;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e6c08.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @kind virtual;
  #L4e6c0e.  v0:= temp;
  #L4e6c10.  if v0 == 0 then goto L4e6c28;
  #L4e6c14.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4e6c18.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4e6c1e.  v0:= temp @kind object;
  #L4e6c20.  v1:= 0I;
  #L4e6c22.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L4e6c26.  return v0 @kind object;
  #L4e6c28.  v0:= new `java.util.NoSuchElementException`;
  #L4e6c2c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4e6c32.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4e6c7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e6c90.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e6c96.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e6ce0.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L4e6ce4.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L4e6cea.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e6cfc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4e6d00.  v1:= "Read-only iterator." @kind object;
  #L4e6d04.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e6d0a.  throw v0;
}
