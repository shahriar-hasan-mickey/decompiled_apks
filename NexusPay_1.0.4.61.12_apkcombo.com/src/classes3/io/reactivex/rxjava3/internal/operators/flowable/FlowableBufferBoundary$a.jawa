record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.l` @AccessFlag ;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b9b50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b9b56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b9b5a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4b9b5e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4b9b62.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4b9b66.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4b9b6a.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4b9b70.  v2:= temp;
  #L4b9b72.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4b9b78.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L4b9b7c.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4b9b80.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4b9b86.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4b9b8a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b9b8e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b9b94.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4b9b98.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b9b9c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b9ba2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b9ba6.  v1:= new `java.util.LinkedHashMap`;
  #L4b9baa.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4b9bb0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v1 @kind object;
  #L4b9bb4.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b9bb8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b9bbe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b9bc2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4b9bd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b9bd8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b9bde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b9be2.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b9be8.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b9bee.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4b9c70.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b9c74.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b9c7a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b9c7e.  call temp:= `size`(v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4b9c84.  v4:= temp;
  #L4b9c86.  v0:= 1I;
  #L4b9c88.  if v4 != 0 then goto L4b9c9a;
  #L4b9c8c.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b9c90.  call temp:= `cancel`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b9c96.  v4:= 1I;
  #L4b9c98.  goto L4b9c9c;
  #L4b9c9a.  v4:= 0I;
  #L4b9c9c.  @monitorenter v3
  #L4b9c9e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4b9ca2.  if v1 != 0 then goto L4b9caa;
  #L4b9ca6.  @monitorexit v3
  #L4b9ca8.  return @kind void;
  #L4b9caa.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b9cae.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4b9cb2.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4b9cb8.  v5:= temp @kind object;
  #L4b9cba.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b9cc0.  v5:= temp @kind object;
  #L4b9cc2.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b9cc8.  @monitorexit v3
  #L4b9cca.  if v4 == 0 then goto L4b9cd2;
  #L4b9cce.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4b9cd2.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4b9cd8.  return @kind void;
  #L4b9cda.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b9cdc.  @monitorexit v3
  #L4b9cde.  throw v4;
  catch `java.lang.Throwable` @[L4b9c9e..L4b9cca] goto L4b9cda;
  catch `java.lang.Throwable` @[L4b9cdc..L4b9cde] goto L4b9cda;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4b9d04.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b9d0a.  v0:= temp;
  #L4b9d0c.  if v0 == 0 then goto L4b9d12;
  #L4b9d10.  return @kind void;
  #L4b9d12.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.n` @type ^`long` @kind wide;
  #L4b9d16.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b9d1a.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b9d1e.  v4:= 1I;
  #L4b9d20.  v5:= 1I;
  #L4b9d22.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b9d26.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4b9d2c.  v6:= temp @kind wide;
  #L4b9d2e.  v8:= lcmp(v0, v6);
  #L4b9d32.  if v8 == 0 then goto L4b9daa;
  #L4b9d36.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` @kind boolean;
  #L4b9d3a.  if v9 == 0 then goto L4b9d46;
  #L4b9d3e.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b9d44.  return @kind void;
  #L4b9d46.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` @kind boolean;
  #L4b9d4a.  if v9 == 0 then goto L4b9d70;
  #L4b9d4e.  v10:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9d52.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9d58.  v10:= temp @kind object;
  #L4b9d5a.  if v10 == 0 then goto L4b9d70;
  #L4b9d5e.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b9d64.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9d68.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b9d6e.  return @kind void;
  #L4b9d70.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b9d76.  v10:= temp @kind object;
  #L4b9d78.  v10:= (`java.util.Collection`) v10 @kind object;
  #L4b9d7c.  if v10 != 0 then goto L4b9d84;
  #L4b9d80.  v11:= 1I;
  #L4b9d82.  goto L4b9d86;
  #L4b9d84.  v11:= 0I;
  #L4b9d86.  if v9 == 0 then goto L4b9d96;
  #L4b9d8a.  if v11 == 0 then goto L4b9d96;
  #L4b9d8e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b9d94.  return @kind void;
  #L4b9d96.  if v11 == 0 then goto L4b9d9c;
  #L4b9d9a.  goto L4b9daa;
  #L4b9d9c.  call `onNext`(v2, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b9da2.  v8:= 1L;
  #L4b9da6.  v0:= v0 + v8 @kind long;
  #L4b9da8.  goto L4b9d2e;
  #L4b9daa.  if v8 != 0 then goto L4b9dfc;
  #L4b9dae.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` @kind boolean;
  #L4b9db2.  if v6 == 0 then goto L4b9dbe;
  #L4b9db6.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b9dbc.  return @kind void;
  #L4b9dbe.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` @kind boolean;
  #L4b9dc2.  if v6 == 0 then goto L4b9dfc;
  #L4b9dc6.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9dca.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b9dd0.  v6:= temp @kind object;
  #L4b9dd2.  if v6 == 0 then goto L4b9de8;
  #L4b9dd6.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b9ddc.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9de0.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4b9de6.  return @kind void;
  #L4b9de8.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4b9dee.  v6:= temp;
  #L4b9df0.  if v6 == 0 then goto L4b9dfc;
  #L4b9df4.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b9dfa.  return @kind void;
  #L4b9dfc.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.n` @type ^`long` := v0 @kind wide;
  #L4b9e00.  v5:= -v5 @kind int;
  #L4b9e02.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b9e08.  v5:= temp;
  #L4b9e0a.  if v5 != 0 then goto L4b9d22;
  #L4b9e0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9c00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b9c04.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b9c0a.  v0:= temp;
  #L4b9c0c.  if v0 == 0 then goto L4b9c48;
  #L4b9c10.  v0:= 1I;
  #L4b9c12.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4b9c16.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b9c1a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4b9c20.  @monitorenter v1
  #L4b9c22.  v0:= 0I;
  #L4b9c24.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v0 @kind object;
  #L4b9c28.  @monitorexit v1
  #L4b9c2a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b9c30.  v0:= temp;
  #L4b9c32.  if v0 == 0 then goto L4b9c48;
  #L4b9c36.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b9c3a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b9c40.  goto L4b9c48;
  #L4b9c42.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b9c44.  @monitorexit v1
  #L4b9c46.  throw v0;
  #L4b9c48.  return @kind void;
  catch `java.lang.Throwable` @[L4b9c24..L4b9c2a] goto L4b9c42;
  catch `java.lang.Throwable` @[L4b9c44..L4b9c46] goto L4b9c42;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b9fc0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b9fc4.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b9fca.  v0:= temp @kind object;
  #L4b9fcc.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L4b9fd0.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b9fd6.  v0:= temp @kind object;
  #L4b9fd8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b9fdc.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b9fe0.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b9fe6.  v6:= temp @kind object;
  #L4b9fe8.  v1:= "The bufferClose returned a null Publisher" @kind object;
  #L4b9fec.  call temp:= `requireNonNull`(v6, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b9ff2.  v6:= temp @kind object;
  #L4b9ff4.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L4b9ff8.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.l` @type ^`long` @kind wide;
  #L4b9ffc.  v3:= 1L;
  #L4ba000.  v3:= v3 + v1 @kind long;
  #L4ba002.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.l` @type ^`long` := v3 @kind wide;
  #L4ba006.  @monitorenter v5
  #L4ba008.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4ba00c.  if v3 != 0 then goto L4ba014;
  #L4ba010.  @monitorexit v5
  #L4ba012.  return @kind void;
  #L4ba014.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4ba01a.  v4:= temp @kind object;
  #L4ba01c.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ba022.  @monitorexit v5
  #L4ba024.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b`;
  #L4ba028.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;J)V` @kind direct;
  #L4ba02e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ba032.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ba038.  call `subscribe`(v6, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4ba03e.  return @kind void;
  #L4ba040.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba042.  @monitorexit v5
  #L4ba044.  throw v6;
  #L4ba046.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba048.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba04e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ba052.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ba058.  call `onError`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ba05e.  return @kind void;
  catch `java.lang.Throwable` @[L4b9fc0..L4b9ff8] goto L4ba046;
  catch `java.lang.Throwable` @[L4ba008..L4ba024] goto L4ba040;
  catch `java.lang.Throwable` @[L4ba042..L4ba044] goto L4ba040;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4ba090.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ba094.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ba09a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ba09e.  call temp:= `size`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4ba0a4.  v2:= temp;
  #L4ba0a6.  if v2 != 0 then goto L4ba0c0;
  #L4ba0aa.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ba0ae.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ba0b4.  v2:= 1I;
  #L4ba0b6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4ba0ba.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4ba0c0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b9e20.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b9e24.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4b9e2a.  @monitorenter v3
  #L4b9e2c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4b9e30.  if v0 != 0 then goto L4b9e38;
  #L4b9e34.  @monitorexit v3
  #L4b9e36.  return @kind void;
  #L4b9e38.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4b9e3e.  v0:= temp @kind object;
  #L4b9e40.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b9e46.  v0:= temp @kind object;
  #L4b9e48.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b9e4e.  v1:= temp;
  #L4b9e50.  if v1 == 0 then goto L4b9e6c;
  #L4b9e54.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b9e5a.  v1:= temp @kind object;
  #L4b9e5c.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b9e60.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b9e64.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b9e6a.  goto L4b9e48;
  #L4b9e6c.  v0:= 0I;
  #L4b9e6e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v0 @kind object;
  #L4b9e72.  @monitorexit v3
  #L4b9e74.  v0:= 1I;
  #L4b9e76.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4b9e7a.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4b9e80.  return @kind void;
  #L4b9e82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b9e84.  @monitorexit v3
  #L4b9e86.  throw v0;
  catch `java.lang.Throwable` @[L4b9e2c..L4b9e74] goto L4b9e82;
  catch `java.lang.Throwable` @[L4b9e84..L4b9e86] goto L4b9e82;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9eac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b9eb0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b9eb6.  v2:= temp;
  #L4b9eb8.  if v2 == 0 then goto L4b9ee4;
  #L4b9ebc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b9ec0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4b9ec6.  @monitorenter v1
  #L4b9ec8.  v2:= 0I;
  #L4b9eca.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v2 @kind object;
  #L4b9ece.  @monitorexit v1
  #L4b9ed0.  v2:= 1I;
  #L4b9ed2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4b9ed6.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4b9edc.  goto L4b9ee4;
  #L4b9ede.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b9ee0.  @monitorexit v1
  #L4b9ee2.  throw v2;
  #L4b9ee4.  return @kind void;
  catch `java.lang.Throwable` @[L4b9eca..L4b9ed0] goto L4b9ede;
  catch `java.lang.Throwable` @[L4b9ee0..L4b9ee2] goto L4b9ede;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9f0c.  @monitorenter v2
  #L4b9f0e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4b9f12.  if v0 != 0 then goto L4b9f1a;
  #L4b9f16.  @monitorexit v2
  #L4b9f18.  return @kind void;
  #L4b9f1a.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4b9f20.  v0:= temp @kind object;
  #L4b9f22.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b9f28.  v0:= temp @kind object;
  #L4b9f2a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b9f30.  v1:= temp;
  #L4b9f32.  if v1 == 0 then goto L4b9f4a;
  #L4b9f36.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b9f3c.  v1:= temp @kind object;
  #L4b9f3e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b9f42.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b9f48.  goto L4b9f2a;
  #L4b9f4a.  @monitorexit v2
  #L4b9f4c.  return @kind void;
  #L4b9f4e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b9f50.  @monitorexit v2
  #L4b9f52.  throw v3;
  catch `java.lang.Throwable` @[L4b9f0e..L4b9f52] goto L4b9f4e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9f70.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b9f74.  call temp:= `setOnce`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b9f7a.  v0:= temp;
  #L4b9f7c.  if v0 == 0 then goto L4b9fae;
  #L4b9f80.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a$a`;
  #L4b9f84.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;)V` @kind direct;
  #L4b9f8a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b9f8e.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b9f94.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4b9f98.  call `subscribe`(v1, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4b9f9e.  v0:= 9223372036854775807L;
  #L4b9fa8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b9fae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba0d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ba0d8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ba0de.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4ba0e4.  return @kind void;
}
