record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.rxjava3.core.Scheduler` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d42a8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d42ae.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d42b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d42b8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4d42bc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d42c0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` := v3 @kind wide;
  #L4d42c4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` := v5 @kind wide;
  #L4d42c8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L4d42cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v8 @kind object;
  #L4d42d0.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4d42d4.  call `<init>`(v2, v9) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4d42da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4d42de.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` := v10 @kind boolean;
  #L4d42e2.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d4238.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L4d423c.  v1:= 1I;
  #L4d423e.  if v0 == 0 then goto L4d424e;
  #L4d4242.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d4246.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4d424c.  return v1;
  #L4d424e.  if v5 == 0 then goto L4d426e;
  #L4d4252.  if v3 == 0 then goto L4d4294;
  #L4d4256.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L4d425a.  if v3 == 0 then goto L4d4266;
  #L4d425e.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d4264.  goto L4d426c;
  #L4d4266.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d426c.  return v1;
  #L4d426e.  v5:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L4d4272.  if v5 == 0 then goto L4d4288;
  #L4d4276.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d427a.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4d4280.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d4286.  return v1;
  #L4d4288.  if v3 == 0 then goto L4d4294;
  #L4d428c.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d4292.  return v1;
  #L4d4294.  v3:= 0I;
  #L4d4296.  return v3;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4d4334.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d433a.  v0:= temp;
  #L4d433c.  if v0 == 0 then goto L4d4342;
  #L4d4340.  return @kind void;
  #L4d4342.  v0:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4346.  v1:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d434a.  v2:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L4d434e.  v3:= 1I;
  #L4d4350.  v4:= 1I;
  #L4d4352.  v5:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` @kind boolean;
  #L4d4356.  if v5 == 0 then goto L4d43da;
  #L4d435a.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4d4360.  v5:= temp;
  #L4d4362.  call temp:= `a`(v13, v5, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L4d4368.  v5:= temp;
  #L4d436a.  if v5 == 0 then goto L4d4370;
  #L4d436e.  return @kind void;
  #L4d4370.  v5:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d4374.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d437a.  v5:= temp @kind wide;
  #L4d437c.  v7:= 0L;
  #L4d4380.  v9:= v7 @kind wide;
  #L4d4382.  call temp:= `peek`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4d4388.  v11:= temp @kind object;
  #L4d438a.  if v11 != 0 then goto L4d4392;
  #L4d438e.  v11:= 1I;
  #L4d4390.  goto L4d4394;
  #L4d4392.  v11:= 0I;
  #L4d4394.  call temp:= `a`(v13, v11, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L4d439a.  v11:= temp;
  #L4d439c.  if v11 == 0 then goto L4d43a2;
  #L4d43a0.  return @kind void;
  #L4d43a2.  v11:= lcmp(v5, v9);
  #L4d43a6.  if v11 != 0 then goto L4d43be;
  #L4d43aa.  v5:= lcmp(v9, v7);
  #L4d43ae.  if v5 == 0 then goto L4d43da;
  #L4d43b2.  v5:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d43b6.  call temp:= `produced`(v5, v9) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d43bc.  goto L4d43da;
  #L4d43be.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d43c4.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d43ca.  v11:= temp @kind object;
  #L4d43cc.  call `onNext`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d43d2.  v11:= 1L;
  #L4d43d6.  v9:= v9 + v11 @kind long;
  #L4d43d8.  goto L4d4382;
  #L4d43da.  v4:= -v4 @kind int;
  #L4d43dc.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d43e2.  v4:= temp;
  #L4d43e4.  if v4 != 0 then goto L4d4352;
  #L4d43e8.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v11 @kind this, `long` v12 , `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4d4524.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` @kind wide;
  #L4d4528.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` @kind wide;
  #L4d452c.  v4:= 1I;
  #L4d452e.  v5:= 9223372036854775807L;
  #L4d4538.  v7:= lcmp(v2, v5);
  #L4d453c.  if v7 != 0 then goto L4d4544;
  #L4d4540.  v5:= 1I;
  #L4d4542.  goto L4d4546;
  #L4d4544.  v5:= 0I;
  #L4d4546.  call temp:= `isEmpty`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4d454c.  v6:= temp;
  #L4d454e.  if v6 != 0 then goto L4d4598;
  #L4d4552.  call temp:= `peek`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4d4558.  v6:= temp @kind object;
  #L4d455a.  v6:= (`java.lang.Long`) v6 @kind object;
  #L4d455e.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4d4564.  v6:= temp @kind wide;
  #L4d4566.  v8:= v12 - v0 @kind long;
  #L4d456a.  v10:= lcmp(v6, v8);
  #L4d456e.  if v10 < 0 then goto L4d458a;
  #L4d4572.  if v5 != 0 then goto L4d4598;
  #L4d4576.  call temp:= `size`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.size:()I` @kind virtual;
  #L4d457c.  v6:= temp;
  #L4d457e.  v6:= v6 ^> v4 @kind int;
  #L4d4580.  v6:= (`long`) v6 @kind i2l;
  #L4d4582.  v8:= lcmp(v6, v2);
  #L4d4586.  if v8 <= 0 then goto L4d4598;
  #L4d458a.  call temp:= `poll`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d4590.  call temp:= `poll`(v14) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d4596.  goto L4d4546;
  #L4d4598.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d42f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L4d42f8.  if v0 != 0 then goto L4d4322;
  #L4d42fc.  v0:= 1I;
  #L4d42fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4d4302.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4306.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d430c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d4312.  v0:= temp;
  #L4d4314.  if v0 != 0 then goto L4d4322;
  #L4d4318.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d431c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4d4322.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d43fc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d4400.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d4404.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4d440a.  v0:= temp @kind wide;
  #L4d440c.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d4410.  call `c`(v3, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4d4416.  v0:= 1I;
  #L4d4418.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4d441c.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L4d4422.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d4434.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L4d4438.  if v0 == 0 then goto L4d4456;
  #L4d443c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d4440.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d4444.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4d444a.  v0:= temp @kind wide;
  #L4d444c.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d4450.  call `c`(v3, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4d4456.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` := v4 @kind object;
  #L4d445a.  v4:= 1I;
  #L4d445c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4d4460.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L4d4466.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d4478.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d447c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d4480.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d4484.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4d448a.  v1:= temp @kind wide;
  #L4d448c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4d4492.  v3:= temp @kind object;
  #L4d4494.  call temp:= `offer`(v0, v3, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d449a.  call `c`(v4, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4d44a0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d44b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d44b8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d44be.  v0:= temp;
  #L4d44c0.  if v0 == 0 then goto L4d44e2;
  #L4d44c4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d44c8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d44cc.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d44d2.  v0:= 9223372036854775807L;
  #L4d44dc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d44e2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d44f4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d44fa.  v0:= temp;
  #L4d44fc.  if v0 == 0 then goto L4d4510;
  #L4d4500.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d4504.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d450a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L4d4510.  return @kind void;
}
