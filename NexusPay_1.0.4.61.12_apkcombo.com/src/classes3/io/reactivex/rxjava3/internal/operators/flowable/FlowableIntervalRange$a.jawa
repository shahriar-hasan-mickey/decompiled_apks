record `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c8718.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c871e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c8722.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c8728.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c872c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4c8730.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` := v3 @kind wide;
  #L4c8734.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.b` @type ^`long` := v5 @kind wide;
  #L4c8738.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8884.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8888.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c888e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c874c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8750.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c8756.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8768.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c876e.  v0:= temp;
  #L4c8770.  if v0 == 0 then goto L4c877a;
  #L4c8774.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c877a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c878c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8790.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c8796.  v0:= temp @kind object;
  #L4c8798.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4c879c.  if v0 == v1 then goto L4c8872;
  #L4c87a0.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c87a6.  v0:= temp @kind wide;
  #L4c87a8.  v2:= 0L;
  #L4c87ac.  v4:= lcmp(v0, v2);
  #L4c87b0.  if v4 == 0 then goto L4c8824;
  #L4c87b4.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` @kind wide;
  #L4c87b8.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c87bc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4c87c2.  v5:= temp @kind object;
  #L4c87c4.  call `onNext`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c87ca.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.b` @type ^`long` @kind wide;
  #L4c87ce.  v6:= lcmp(v2, v4);
  #L4c87d2.  if v6 != 0 then goto L4c8800;
  #L4c87d6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c87da.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c87e0.  v0:= temp @kind object;
  #L4c87e2.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4c87e6.  if v0 == v1 then goto L4c87f4;
  #L4c87ea.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c87ee.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c87f4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c87f8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c87fe.  return @kind void;
  #L4c8800.  v4:= 1L;
  #L4c8804.  v2:= v2 + v4 @kind long;
  #L4c8806.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` := v2 @kind wide;
  #L4c880a.  v2:= 9223372036854775807L;
  #L4c8814.  v4:= lcmp(v0, v2);
  #L4c8818.  if v4 == 0 then goto L4c8872;
  #L4c881c.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4c8822.  goto L4c8872;
  #L4c8824.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c8828.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c882c.  v2:= new `java.lang.StringBuilder`;
  #L4c8830.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c8836.  v3:= "Can't deliver value " @kind object;
  #L4c883a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8840.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.c` @type ^`long` @kind wide;
  #L4c8844.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c884a.  v3:= " due to lack of requests" @kind object;
  #L4c884e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c8854.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c885a.  v2:= temp @kind object;
  #L4c885c.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c8862.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8868.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c886c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c8872.  return @kind void;
}
