record `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fae18.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`;
  #L4fae1c.  v1:= 0I;
  #L4fae1e.  v2:= -1L;
  #L4fae22.  v4:= 1I;
  #L4fae24.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L4fae2a.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` := v0 @kind object;
  #L4fae2e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4fae34.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4fae48.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4fae4e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fae52.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fae58.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4fae5c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4fae60.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4fae64.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int` := v4;
  #L4fae68.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L4fae6c.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4fae70.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4fae76.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4fae7a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4faec8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4faecc.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L4faed0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4faed6.  v0:= temp @kind object;
  #L4faed8.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L4faedc.  if v0 == 0 then goto L4faee6;
  #L4faee0.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4faee6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4faef8.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4faefe.  v0:= temp;
  #L4faf00.  if v0 == 0 then goto L4faf06;
  #L4faf04.  return @kind void;
  #L4faf06.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4faf0a.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4faf0e.  v2:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4faf12.  v3:= 1I;
  #L4faf14.  v4:= 1I;
  #L4faf16.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4faf1a.  if v5 == 0 then goto L4faf20;
  #L4faf1e.  return @kind void;
  #L4faf20.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L4faf24.  v6:= 0I;
  #L4faf26.  if v5 == 0 then goto L4faf94;
  #L4faf2a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4faf30.  v5:= temp @kind object;
  #L4faf32.  if v5 != 0 then goto L4faf3a;
  #L4faf36.  v5:= 1I;
  #L4faf38.  goto L4faf3c;
  #L4faf3a.  v5:= 0I;
  #L4faf3c.  if v2 == 0 then goto L4faf68;
  #L4faf40.  if v5 == 0 then goto L4faf94;
  #L4faf44.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4faf48.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4faf4e.  v1:= temp @kind object;
  #L4faf50.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4faf54.  if v1 == 0 then goto L4faf60;
  #L4faf58.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4faf5e.  goto L4faf66;
  #L4faf60.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4faf66.  return @kind void;
  #L4faf68.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4faf6c.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4faf72.  v7:= temp @kind object;
  #L4faf74.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L4faf78.  if v7 == 0 then goto L4faf88;
  #L4faf7c.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4faf80.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4faf86.  return @kind void;
  #L4faf88.  if v5 == 0 then goto L4faf94;
  #L4faf8c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4faf92.  return @kind void;
  #L4faf94.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4faf9a.  v5:= temp @kind object;
  #L4faf9c.  v5:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v5 @kind object;
  #L4fafa0.  if v5 == 0 then goto L4fb066;
  #L4fafa4.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4fafa8.  if v7 == 0 then goto L4fb066;
  #L4fafac.  v8:= 0I;
  #L4fafae.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4fafb2.  if v9 == 0 then goto L4fafb8;
  #L4fafb6.  return @kind void;
  #L4fafb8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fafbe.  v9:= temp @kind object;
  #L4fafc0.  if v5 == v9 then goto L4fafc8;
  #L4fafc4.  v8:= 1I;
  #L4fafc6.  goto L4fb056;
  #L4fafc8.  if v2 != 0 then goto L4fafec;
  #L4fafcc.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fafd0.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fafd6.  v9:= temp @kind object;
  #L4fafd8.  v9:= (`java.lang.Throwable`) v9 @kind object;
  #L4fafdc.  if v9 == 0 then goto L4fafec;
  #L4fafe0.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fafe4.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4fafea.  return @kind void;
  #L4fafec.  v9:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L4faff0.  v10:= 0I;
  #L4faff2.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4faff8.  v11:= temp @kind object;
  #L4faffa.  goto L4fb038;
  #L4faffc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4faffe.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4fb004.  v11:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fb008.  call temp:= `tryAddThrowableOrReport`(v11, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fb00e.  call temp:= `compareAndSet`(v1, v5, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4fb014.  if v2 != 0 then goto L4fb02e;
  #L4fb018.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L4fb01e.  v8:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fb022.  call `dispose`(v8) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fb028.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v3 @kind boolean;
  #L4fb02c.  goto L4fb034;
  #L4fb02e.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4fb034.  v11:= v10 @kind object;
  #L4fb036.  v8:= 1I;
  #L4fb038.  if v11 != 0 then goto L4fb040;
  #L4fb03c.  v12:= 1I;
  #L4fb03e.  goto L4fb042;
  #L4fb040.  v12:= 0I;
  #L4fb042.  if v9 == 0 then goto L4fb052;
  #L4fb046.  if v12 == 0 then goto L4fb052;
  #L4fb04a.  call temp:= `compareAndSet`(v1, v5, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4fb050.  goto L4fafc4;
  #L4fb052.  if v12 == 0 then goto L4fb05e;
  #L4fb056.  if v8 == 0 then goto L4fb066;
  #L4fb05a.  goto L4faf16;
  #L4fb05e.  call `onNext`(v0, v11) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fb064.  goto L4fafae;
  #L4fb066.  v4:= -v4 @kind int;
  #L4fb068.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4fb06e.  v4:= temp;
  #L4fb070.  if v4 != 0 then goto L4faf16;
  #L4fb074.  return @kind void;
  catch `java.lang.Throwable` @[L4faff2..L4faffa] goto L4faffc;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fb094.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4fb098.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L4fb09c.  v4:= lcmp(v0, v2);
  #L4fb0a0.  if v4 != 0 then goto L4fb0d8;
  #L4fb0a4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fb0a8.  call temp:= `tryAddThrowable`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fb0ae.  v0:= temp;
  #L4fb0b0.  if v0 == 0 then goto L4fb0d8;
  #L4fb0b4.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4fb0b8.  v0:= 1I;
  #L4fb0ba.  if v7 != 0 then goto L4fb0cc;
  #L4fb0be.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fb0c2.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fb0c8.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4fb0cc.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4fb0d0.  call `b`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4fb0d6.  goto L4fb0de;
  #L4fb0d8.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fb0de.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fae8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4fae90.  if v0 != 0 then goto L4faeb4;
  #L4fae94.  v0:= 1I;
  #L4fae96.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4fae9a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fae9e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4faea4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L4faeaa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4faeae.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4faeb4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fae00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4fae04.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb0f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L4fb0f4.  if v0 != 0 then goto L4fb104;
  #L4fb0f8.  v0:= 1I;
  #L4fb0fa.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4fb0fe.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4fb104.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb118.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L4fb11c.  if v0 != 0 then goto L4fb14c;
  #L4fb120.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fb124.  call temp:= `tryAddThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fb12a.  v0:= temp;
  #L4fb12c.  if v0 == 0 then goto L4fb14c;
  #L4fb130.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4fb134.  if v2 != 0 then goto L4fb13e;
  #L4fb138.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L4fb13e.  v2:= 1I;
  #L4fb140.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v2 @kind boolean;
  #L4fb144.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4fb14a.  goto L4fb152;
  #L4fb14c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fb152.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fb164.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L4fb168.  v2:= 1L;
  #L4fb16c.  v0:= v0 + v2 @kind long;
  #L4fb16e.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` := v0 @kind wide;
  #L4fb172.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fb176.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fb17c.  v2:= temp @kind object;
  #L4fb17e.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v2 @kind object;
  #L4fb182.  if v2 == 0 then goto L4fb18c;
  #L4fb186.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L4fb18c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4fb190.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4fb196.  v5:= temp @kind object;
  #L4fb198.  v2:= "The ObservableSource returned is null" @kind object;
  #L4fb19c.  call temp:= `requireNonNull`(v5, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4fb1a2.  v5:= temp @kind object;
  #L4fb1a4.  v5:= (`io.reactivex.rxjava3.core.ObservableSource`) v5 @kind object;
  #L4fb1a8.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`;
  #L4fb1ac.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int`;
  #L4fb1b0.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L4fb1b6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fb1ba.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fb1c0.  v0:= temp @kind object;
  #L4fb1c2.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L4fb1c6.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L4fb1ca.  if v0 != v1 then goto L4fb1d0;
  #L4fb1ce.  goto L4fb1e6;
  #L4fb1d0.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fb1d4.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4fb1da.  v0:= temp;
  #L4fb1dc.  if v0 == 0 then goto L4fb1b6;
  #L4fb1e0.  call `subscribe`(v5, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4fb1e6.  return @kind void;
  #L4fb1e8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fb1ea.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4fb1f0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fb1f4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fb1fa.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fb200.  return @kind void;
  catch `java.lang.Throwable` @[L4fb18c..L4fb1a8] goto L4fb1e8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb220.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fb224.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fb22a.  v0:= temp;
  #L4fb22c.  if v0 == 0 then goto L4fb23e;
  #L4fb230.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fb234.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fb238.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fb23e.  return @kind void;
}
