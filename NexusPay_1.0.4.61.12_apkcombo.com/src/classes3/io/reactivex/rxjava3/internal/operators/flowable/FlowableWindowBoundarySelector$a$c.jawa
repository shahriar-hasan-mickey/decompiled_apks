record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d7b14.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d7b1a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` := v1 @kind object;
  #L4d7b1e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @AccessFlag  {
    temp;

  #L4d7b30.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d7b36.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7b48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind object;
  #L4d7b4c.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.e:()V` @kind virtual;
  #L4d7b52.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7b64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind object;
  #L4d7b68.  call `f`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.f:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d7b6e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7b80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind object;
  #L4d7b84.  call `d`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L4d7b8a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d7b9c.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d7ba2.  v0:= temp;
  #L4d7ba4.  if v0 == 0 then goto L4d7bb8;
  #L4d7ba8.  v0:= 9223372036854775807L;
  #L4d7bb2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d7bb8.  return @kind void;
}
