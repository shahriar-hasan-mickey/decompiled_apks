record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0a00.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4c0a06.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c0a0a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4c0a0e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c0a20.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c0a26.  v3:= temp;
  #L4c0a28.  if v3 != 0 then goto L4c0a3a;
  #L4c0a2c.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0a30.  v0:= 1L;
  #L4c0a34.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c0a3a.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c0984.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c0988.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c098e.  v0:= temp @kind object;
  #L4c0990.  if v0 != 0 then goto L4c0998;
  #L4c0994.  v0:= 0I;
  #L4c0996.  return v0 @kind object;
  #L4c0998.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c099c.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c09a2.  v1:= temp @kind object;
  #L4c09a4.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L4c09a8.  v3:= 1I;
  #L4c09aa.  if v2 != 0 then goto L4c09b8;
  #L4c09ae.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v3 @kind boolean;
  #L4c09b2.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c09b6.  return v0 @kind object;
  #L4c09b8.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c09bc.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L4c09c0.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4c09c6.  v2:= temp;
  #L4c09c8.  if v2 != 0 then goto L4c09d2;
  #L4c09cc.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c09d0.  return v0 @kind object;
  #L4c09d2.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c09d6.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4c09da.  if v0 == v3 then goto L4c0984;
  #L4c09de.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c09e2.  v1:= 1L;
  #L4c09e6.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c09ec.  goto L4c0984;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c0968.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c096e.  v1:= temp;
  #L4c0970.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c08dc.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c08e0.  v1:= 0I;
  #L4c08e2.  if v0 == 0 then goto L4c08e8;
  #L4c08e6.  return v1;
  #L4c08e8.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4c08ec.  v2:= 1I;
  #L4c08ee.  if v0 == 0 then goto L4c08fe;
  #L4c08f2.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c08f6.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c08fc.  return v2;
  #L4c08fe.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c0902.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0908.  v0:= temp @kind object;
  #L4c090a.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L4c090e.  if v3 == 0 then goto L4c092c;
  #L4c0912.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c0916.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L4c091a.  call temp:= `test`(v3, v4, v0) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4c0920.  v3:= temp;
  #L4c0922.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4c0926.  if v3 == 0 then goto L4c0934;
  #L4c092a.  return v1;
  #L4c092c.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v2 @kind boolean;
  #L4c0930.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4c0934.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c0938.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c093e.  return v2;
  #L4c0940.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0942.  call `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c0948.  return v2;
  catch `java.lang.Throwable` @[L4c08fe..L4c0934] goto L4c0940;
}
