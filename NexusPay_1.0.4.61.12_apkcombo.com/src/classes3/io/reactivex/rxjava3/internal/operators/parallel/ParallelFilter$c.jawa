record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L501730.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L501736.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L50173a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50174c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L501750.  if v0 != 0 then goto L501764;
  #L501754.  v0:= 1I;
  #L501756.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L50175a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50175e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L501764.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501778.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L50177c.  if v0 == 0 then goto L501788;
  #L501780.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L501786.  return @kind void;
  #L501788.  v0:= 1I;
  #L50178a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L50178e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L501792.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L501798.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5017ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5017b0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L5017b6.  v0:= temp;
  #L5017b8.  if v0 == 0 then goto L5017ca;
  #L5017bc.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L5017c0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5017c4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L5017ca.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5016d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L5016d8.  v1:= 0I;
  #L5016da.  if v0 != 0 then goto L501710;
  #L5016de.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L5016e2.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L5016e8.  v0:= temp;
  #L5016ea.  if v0 == 0 then goto L501710;
  #L5016ee.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5016f2.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5016f8.  v3:= 1I;
  #L5016fa.  return v3;
  #L5016fc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5016fe.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L501704.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @kind virtual;
  #L50170a.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L501710.  return v1;
  catch `java.lang.Throwable` @[L5016de..L5016ea] goto L5016fc;
}
