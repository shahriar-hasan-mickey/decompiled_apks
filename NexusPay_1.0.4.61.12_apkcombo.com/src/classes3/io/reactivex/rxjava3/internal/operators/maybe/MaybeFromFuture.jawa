record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class {
  `java.util.concurrent.Future` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4de838.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4de83e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L4de842.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` := v2 @kind wide;
  #L4de846.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4de84a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture` v6 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromFuture;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4de85c.  call temp:= `b`() @signature `Lio/reactivex/rxjava3/disposables/a;.b:()Lio/reactivex/rxjava3/disposables/Disposable;` @kind static;
  #L4de862.  v0:= temp @kind object;
  #L4de864.  call `onSubscribe`(v7, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4de86a.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4de870.  v1:= temp;
  #L4de872.  if v1 != 0 then goto L4de8f8;
  #L4de876.  v1:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` @kind wide;
  #L4de87a.  v3:= 0L;
  #L4de87e.  v5:= lcmp(v1, v3);
  #L4de882.  if v5 > 0 then goto L4de894;
  #L4de886.  v1:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` @kind object;
  #L4de88a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L4de890.  v1:= temp @kind object;
  #L4de892.  goto L4de8a8;
  #L4de894.  v1:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` @kind object;
  #L4de898.  v2:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` @kind wide;
  #L4de89c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromFuture.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4de8a0.  call temp:= `get`(v1, v2, v4) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L4de8a6.  v1:= temp @kind object;
  #L4de8a8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4de8ae.  v0:= temp;
  #L4de8b0.  if v0 != 0 then goto L4de8f8;
  #L4de8b4.  if v1 != 0 then goto L4de8c0;
  #L4de8b8.  call `onComplete`(v7) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4de8be.  goto L4de8f8;
  #L4de8c0.  call `onSuccess`(v7, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4de8c6.  goto L4de8f8;
  #L4de8c8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4de8ca.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4de8d0.  v2:= instanceof @variable v1 @type ^`java.util.concurrent.ExecutionException` @kind boolean;
  #L4de8d4.  if v2 == 0 then goto L4de8e0;
  #L4de8d8.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4de8de.  v1:= temp @kind object;
  #L4de8e0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4de8e6.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4de8ec.  v0:= temp;
  #L4de8ee.  if v0 != 0 then goto L4de8f8;
  #L4de8f2.  call `onError`(v7, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4de8f8.  return @kind void;
  catch `java.lang.Throwable` @[L4de876..L4de8a8] goto L4de8c8;
}
