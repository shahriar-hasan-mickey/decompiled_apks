record `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.rxjava3.core.Scheduler` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4f32f4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4f32fa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` := v5 @kind wide;
  #L4f32fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` := v7 @kind wide;
  #L4f3302.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` := v9 @kind object;
  #L4f3306.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.a` @type ^`io.reactivex.rxjava3.core.Scheduler` := v10 @kind object;
  #L4f330a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.b` @type ^`long` := v1 @kind wide;
  #L4f330e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.c` @type ^`long` := v3 @kind wide;
  #L4f3312.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange` v8 @kind this, `io.reactivex.rxjava3.core.Observer` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f3324.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a`;
  #L4f3328.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.b` @type ^`long` @kind wide;
  #L4f332c.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.c` @type ^`long` @kind wide;
  #L4f3330.  v0:= v7 @kind object;
  #L4f3332.  v1:= v9 @kind object;
  #L4f3334.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJ)V` @kind direct;
  #L4f333a.  call `onSubscribe`(v9, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f3340.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.a` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f3344.  v9:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L4f3348.  if v9 == 0 then goto L4f3370;
  #L4f334c.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4f3352.  v0:= temp @kind object;
  #L4f3354.  call `a`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4f335a.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` @kind wide;
  #L4f335e.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` @kind wide;
  #L4f3362.  v6:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f3366.  v1:= v7 @kind object;
  #L4f3368.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4f336e.  goto L4f338c;
  #L4f3370.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` @kind wide;
  #L4f3374.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` @kind wide;
  #L4f3378.  v6:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f337c.  v1:= v7 @kind object;
  #L4f337e.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4f3384.  v9:= temp @kind object;
  #L4f3386.  call `a`(v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4f338c.  return @kind void;
}
