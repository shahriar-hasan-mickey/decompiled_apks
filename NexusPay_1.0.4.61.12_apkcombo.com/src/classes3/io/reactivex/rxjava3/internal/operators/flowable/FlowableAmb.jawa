record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.b` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b8cec.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4b8cf2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.b` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L4b8cf6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.c` @type ^`java.lang.Iterable` := v2 @kind object;
  #L4b8cfa.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b8d0c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.b` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L4b8d10.  v1:= 0I;
  #L4b8d12.  if v0 != 0 then goto L4b8d92;
  #L4b8d16.  v0:= 8I;
  #L4b8d1a.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L4b8d1e.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb.c` @type ^`java.lang.Iterable` @kind object;
  #L4b8d22.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b8d28.  v2:= temp @kind object;
  #L4b8d2a.  v3:= 0I;
  #L4b8d2c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b8d32.  v4:= temp;
  #L4b8d34.  if v4 == 0 then goto L4b8d94;
  #L4b8d38.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b8d3e.  v4:= temp @kind object;
  #L4b8d40.  v4:= (`org.reactivestreams.Publisher`) v4 @kind object;
  #L4b8d44.  if v4 != 0 then goto L4b8d5e;
  #L4b8d48.  v0:= new `java.lang.NullPointerException`;
  #L4b8d4c.  v1:= "One of the sources is null" @kind object;
  #L4b8d50.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b8d56.  call `error`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4b8d5c.  return @kind void;
  #L4b8d5e.  v5:= length @variable v0;
  #L4b8d60.  if v3 != v5 then goto L4b8d76;
  #L4b8d64.  v5:= v3 ^> 2;
  #L4b8d68.  v5:= v5 + v3 @kind int;
  #L4b8d6a.  v5:= new `org.reactivestreams.Publisher`[v5];
  #L4b8d6e.  call `arraycopy`(v0, v1, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4b8d74.  v0:= v5 @kind object;
  #L4b8d76.  v5:= v3 + 1;
  #L4b8d7a.  v0[v3]:= v4 @kind object;
  #L4b8d7e.  v3:= v5;
  #L4b8d80.  goto L4b8d2c;
  #L4b8d82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b8d84.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b8d8a.  call `error`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4b8d90.  return @kind void;
  #L4b8d92.  v3:= length @variable v0;
  #L4b8d94.  if v3 != 0 then goto L4b8da0;
  #L4b8d98.  call `complete`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4b8d9e.  return @kind void;
  #L4b8da0.  v2:= 1I;
  #L4b8da2.  if v3 != v2 then goto L4b8db2;
  #L4b8da6.  v0:= v0[v1] @kind object;
  #L4b8daa.  call `subscribe`(v0, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4b8db0.  return @kind void;
  #L4b8db2.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a`;
  #L4b8db6.  call `<init>`(v1, v7, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L4b8dbc.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.a:([Lorg/reactivestreams/Publisher;)V` @kind virtual;
  #L4b8dc2.  return @kind void;
  catch `java.lang.Throwable` @[L4b8d1e..L4b8d7e] goto L4b8d82;
}
