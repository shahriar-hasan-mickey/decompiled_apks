record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4cc088.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cc08e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4cc092.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cc098.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4cc09c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cc0a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cc0a6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4cc0aa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4cc0ae.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `java.util.concurrent.atomic.AtomicReference` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4cc038.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L4cc03c.  v1:= 0I;
  #L4cc03e.  v2:= 1I;
  #L4cc040.  if v0 == 0 then goto L4cc04c;
  #L4cc044.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cc04a.  return v2;
  #L4cc04c.  if v4 == 0 then goto L4cc072;
  #L4cc050.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` @kind object;
  #L4cc054.  if v4 == 0 then goto L4cc066;
  #L4cc058.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cc05e.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cc064.  return v2;
  #L4cc066.  if v5 == 0 then goto L4cc072;
  #L4cc06a.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cc070.  return v2;
  #L4cc072.  v4:= 0I;
  #L4cc074.  return v4;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4cc104.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cc10a.  v0:= temp;
  #L4cc10c.  if v0 == 0 then goto L4cc112;
  #L4cc110.  return @kind void;
  #L4cc112.  v0:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cc116.  v1:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cc11a.  v2:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc11e.  v3:= 1I;
  #L4cc120.  v4:= 1I;
  #L4cc122.  v5:= 0L;
  #L4cc126.  v7:= v5 @kind wide;
  #L4cc128.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cc12e.  v9:= temp @kind wide;
  #L4cc130.  v11:= 0I;
  #L4cc132.  v12:= lcmp(v7, v9);
  #L4cc136.  if v12 == 0 then goto L4cc174;
  #L4cc13a.  v9:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L4cc13e.  v10:= 0I;
  #L4cc140.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cc146.  v10:= temp @kind object;
  #L4cc148.  if v10 != 0 then goto L4cc150;
  #L4cc14c.  v12:= 1I;
  #L4cc14e.  goto L4cc152;
  #L4cc150.  v12:= 0I;
  #L4cc152.  call temp:= `a`(v13, v9, v12, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L4cc158.  v9:= temp;
  #L4cc15a.  if v9 == 0 then goto L4cc160;
  #L4cc15e.  return @kind void;
  #L4cc160.  if v12 == 0 then goto L4cc166;
  #L4cc164.  goto L4cc174;
  #L4cc166.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cc16c.  v9:= 1L;
  #L4cc170.  v7:= v7 + v9 @kind long;
  #L4cc172.  goto L4cc128;
  #L4cc174.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cc17a.  v9:= temp @kind wide;
  #L4cc17c.  v12:= lcmp(v7, v9);
  #L4cc180.  if v12 != 0 then goto L4cc1a4;
  #L4cc184.  v9:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L4cc188.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cc18e.  v10:= temp @kind object;
  #L4cc190.  if v10 != 0 then goto L4cc196;
  #L4cc194.  v11:= 1I;
  #L4cc196.  call temp:= `a`(v13, v9, v11, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L4cc19c.  v9:= temp;
  #L4cc19e.  if v9 == 0 then goto L4cc1a4;
  #L4cc1a2.  return @kind void;
  #L4cc1a4.  v9:= lcmp(v7, v5);
  #L4cc1a8.  if v9 == 0 then goto L4cc1b2;
  #L4cc1ac.  call temp:= `produced`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cc1b2.  v4:= -v4 @kind int;
  #L4cc1b4.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cc1ba.  v4:= temp;
  #L4cc1bc.  if v4 != 0 then goto L4cc122;
  #L4cc1c0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cc0c0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L4cc0c4.  if v0 != 0 then goto L4cc0f0;
  #L4cc0c8.  v0:= 1I;
  #L4cc0ca.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4cc0ce.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cc0d2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cc0d8.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cc0de.  v0:= temp;
  #L4cc0e0.  if v0 != 0 then goto L4cc0f0;
  #L4cc0e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc0e8.  v1:= 0I;
  #L4cc0ea.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cc0f0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cc1d4.  v0:= 1I;
  #L4cc1d6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4cc1da.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L4cc1e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4cc1f4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4cc1f8.  v1:= 1I;
  #L4cc1fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4cc1fe.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L4cc204.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cc218.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc21c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4cc222.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L4cc228.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cc23c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cc240.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cc246.  v0:= temp;
  #L4cc248.  if v0 == 0 then goto L4cc26a;
  #L4cc24c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4cc250.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cc254.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cc25a.  v0:= 9223372036854775807L;
  #L4cc264.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cc26a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cc27c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4cc282.  v0:= temp;
  #L4cc284.  if v0 == 0 then goto L4cc298;
  #L4cc288.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cc28c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cc292.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L4cc298.  return @kind void;
}
