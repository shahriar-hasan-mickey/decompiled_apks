record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;ILio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1d98.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d1d9e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4d1da2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4d1da6.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L4d1daa.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L4d1db0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L4d1db4.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L4d1db8.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L4d1dbe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L4d1dc2.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d1dc6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d1dcc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4d1dd0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d20cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d20d0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d20d6.  v2:= temp;
  #L4d20d8.  if v2 == 0 then goto L4d20e2;
  #L4d20dc.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @kind virtual;
  #L4d20e2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4d1de4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1de8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4d1dee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1df2.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d1df8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1dfc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4d1e02.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1e06.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d1e0c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.c:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;

  #L4d20f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d20f8.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d20fe.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d2102.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d2108.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1e20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1e24.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4d1e2a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1e2e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L4d1e34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1e38.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4d1e3e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d1e44.  v0:= temp;
  #L4d1e46.  if v0 != 0 then goto L4d1e5e;
  #L4d1e4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1e4e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d1e54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1e58.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d1e5e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4d1e70.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d1e76.  v0:= temp;
  #L4d1e78.  if v0 == 0 then goto L4d1e7e;
  #L4d1e7c.  return @kind void;
  #L4d1e7e.  v0:= 1I;
  #L4d1e80.  v1:= 1I;
  #L4d1e82.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1e86.  v2:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d1e8a.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1e8e.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d1e92.  if v2 == 0 then goto L4d2040;
  #L4d1e96.  if v3 == 0 then goto L4d2040;
  #L4d1e9a.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L4d1ea0.  v4:= temp;
  #L4d1ea2.  if v4 == 0 then goto L4d1ebc;
  #L4d1ea6.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1eaa.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d1eb0.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1eb4.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d1eba.  return @kind void;
  #L4d1ebc.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1ec0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d1ec6.  v4:= temp @kind object;
  #L4d1ec8.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4d1ecc.  if v4 == 0 then goto L4d1ee6;
  #L4d1ed0.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4d1ed6.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1eda.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d1ede.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4d1ee4.  return @kind void;
  #L4d1ee6.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1eea.  v4:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L4d1eee.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` @kind object;
  #L4d1ef2.  if v5 != 0 then goto L4d1f2c;
  #L4d1ef6.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d1efc.  v5:= temp @kind object;
  #L4d1efe.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v5 @kind object;
  #L4d1f02.  goto L4d1f2c;
  #L4d1f04.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1f06.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1f0c.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4d1f12.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1f16.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d1f1c.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1f20.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d1f24.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4d1f2a.  return @kind void;
  #L4d1f2c.  v6:= 0I;
  #L4d1f2e.  if v5 != 0 then goto L4d1f36;
  #L4d1f32.  v7:= 1I;
  #L4d1f34.  goto L4d1f38;
  #L4d1f36.  v7:= 0I;
  #L4d1f38.  v8:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1f3c.  v8:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L4d1f40.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` @kind object;
  #L4d1f44.  if v9 != 0 then goto L4d1f7e;
  #L4d1f48.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d1f4e.  v9:= temp @kind object;
  #L4d1f50.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v9 @kind object;
  #L4d1f54.  goto L4d1f7e;
  #L4d1f56.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1f58.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1f5e.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4d1f64.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1f68.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d1f6e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1f72.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d1f76.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4d1f7c.  return @kind void;
  #L4d1f7e.  if v9 != 0 then goto L4d1f84;
  #L4d1f82.  v6:= 1I;
  #L4d1f84.  if v4 == 0 then goto L4d1fa4;
  #L4d1f88.  if v8 == 0 then goto L4d1fa4;
  #L4d1f8c.  if v7 == 0 then goto L4d1fa4;
  #L4d1f90.  if v6 == 0 then goto L4d1fa4;
  #L4d1f94.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d1f98.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4d1f9c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d1fa2.  return @kind void;
  #L4d1fa4.  if v4 == 0 then goto L4d1fc6;
  #L4d1fa8.  if v8 == 0 then goto L4d1fc6;
  #L4d1fac.  if v7 == v6 then goto L4d1fc6;
  #L4d1fb0.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4d1fb6.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d1fba.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4d1fbe.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d1fc4.  return @kind void;
  #L4d1fc6.  if v7 != 0 then goto L4d208c;
  #L4d1fca.  if v6 == 0 then goto L4d1fd0;
  #L4d1fce.  goto L4d208c;
  #L4d1fd0.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4d1fd4.  call temp:= `test`(v4, v5, v9) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4d1fda.  v4:= temp;
  #L4d1fdc.  if v4 != 0 then goto L4d1ff6;
  #L4d1fe0.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4d1fe6.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d1fea.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4d1fee.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d1ff4.  return @kind void;
  #L4d1ff6.  v4:= 0I;
  #L4d1ff8.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4d1ffc.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v4 @kind object;
  #L4d2000.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d2004.  call `c`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L4d200a.  v4:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d200e.  call `c`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L4d2014.  goto L4d1e9a;
  #L4d2018.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d201a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d2020.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4d2026.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d202a.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d2030.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d2034.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d2038.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4d203e.  return @kind void;
  #L4d2040.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L4d2046.  v2:= temp;
  #L4d2048.  if v2 == 0 then goto L4d2062;
  #L4d204c.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d2050.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d2056.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d205a.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L4d2060.  return @kind void;
  #L4d2062.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d2066.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d206c.  v2:= temp @kind object;
  #L4d206e.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L4d2072.  if v2 == 0 then goto L4d208c;
  #L4d2076.  call `b`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L4d207c.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d2080.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d2084.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind virtual;
  #L4d208a.  return @kind void;
  #L4d208c.  v1:= -v1 @kind int;
  #L4d208e.  call temp:= `addAndGet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d2094.  v1:= temp;
  #L4d2096.  if v1 != 0 then goto L4d1e82;
  #L4d209a.  return @kind void;
  catch `java.lang.Throwable` @[L4d1ef6..L4d1efe] goto L4d1f04;
  catch `java.lang.Throwable` @[L4d1f48..L4d1f50] goto L4d1f56;
  catch `java.lang.Throwable` @[L4d1fd0..L4d1fdc] goto L4d2018;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d1d6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L4d1d70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d1d76.  v0:= temp @kind object;
  #L4d1d78.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d1d7c.  if v0 != v1 then goto L4d1d84;
  #L4d1d80.  v0:= 1I;
  #L4d1d82.  goto L4d1d86;
  #L4d1d84.  v0:= 0I;
  #L4d1d86.  return v0;
}
