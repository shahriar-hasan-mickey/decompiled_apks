record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;Lorg/reactivestreams/Publisher;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d3270.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d3276.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d327a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v2 @kind object;
  #L4d327e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L4d3282.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d3286.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d328c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d3290.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d3294.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d329a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d329e.  v1:= v4 ^~ 1;
  #L4d32a2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4d32a6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this, `long` v3 , `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d3404.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` @kind boolean;
  #L4d3408.  if v0 != 0 then goto L4d3438;
  #L4d340c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4d3412.  v0:= temp @kind object;
  #L4d3414.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d341a.  v1:= temp @kind object;
  #L4d341c.  if v0 != v1 then goto L4d3422;
  #L4d3420.  goto L4d3438;
  #L4d3422.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d3426.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a$a`;
  #L4d342a.  call `<init>`(v1, v5, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a$a;.<init>:(Lorg/reactivestreams/Subscription;J)V` @kind direct;
  #L4d3430.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d3436.  goto L4d343e;
  #L4d3438.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d343e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d32b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d32bc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d32c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d32c6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d32cc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d32e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d32e4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d32ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d32ee.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d32f4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3308.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d330c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d3312.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d3316.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d331c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3330.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3334.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d333a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d334c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3350.  call temp:= `setOnce`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d3356.  v0:= temp;
  #L4d3358.  if v0 == 0 then goto L4d337a;
  #L4d335c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d3360.  v1:= 0L;
  #L4d3364.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d336a.  v3:= temp @kind wide;
  #L4d336c.  v0:= lcmp(v3, v1);
  #L4d3370.  if v0 == 0 then goto L4d337a;
  #L4d3374.  call `a`(v5, v3, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4d337a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d338c.  call temp:= `validate`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d3392.  v0:= temp;
  #L4d3394.  if v0 == 0 then goto L4d33f0;
  #L4d3398.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d339c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d33a2.  v0:= temp @kind object;
  #L4d33a4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4d33a8.  if v0 == 0 then goto L4d33b4;
  #L4d33ac.  call `a`(v4, v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4d33b2.  goto L4d33f0;
  #L4d33b4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d33b8.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d33be.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d33c2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d33c8.  v5:= temp @kind object;
  #L4d33ca.  v5:= (`org.reactivestreams.Subscription`) v5 @kind object;
  #L4d33ce.  if v5 == 0 then goto L4d33f0;
  #L4d33d2.  v6:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d33d6.  v0:= 0L;
  #L4d33da.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d33e0.  v2:= temp @kind wide;
  #L4d33e2.  v6:= lcmp(v2, v0);
  #L4d33e6.  if v6 == 0 then goto L4d33f0;
  #L4d33ea.  call `a`(v4, v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4d33f0.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d3450.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4d3456.  v0:= temp @kind object;
  #L4d3458.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d345e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4d3462.  v1:= 0I;
  #L4d3464.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4d3468.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d346e.  return @kind void;
}
