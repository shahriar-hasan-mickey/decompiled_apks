record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4fe278.  v0:= new `java.lang.Object`;
  #L4fe27c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fe282.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` := v0 @kind object;
  #L4fe286.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fe298.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4fe29e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fe2a2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`int` := v2;
  #L4fe2a6.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a`;
  #L4fe2aa.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;)V` @kind direct;
  #L4fe2b0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` := v1 @kind object;
  #L4fe2b4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fe2b8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fe2be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4fe2c2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4fe2c6.  v2:= 1I;
  #L4fe2c8.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4fe2ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4fe2d2.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4fe2d6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4fe2dc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L4fe2e0.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4fe2e4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4fe2ea.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4fe2ee.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4fe2f2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4fe2f8.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4fe2fc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4fe35c.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4fe362.  v0:= temp;
  #L4fe364.  if v0 == 0 then goto L4fe36a;
  #L4fe368.  return @kind void;
  #L4fe36a.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fe36e.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4fe372.  v2:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fe376.  v3:= 1I;
  #L4fe378.  v4:= 1I;
  #L4fe37a.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4fe37e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4fe384.  v5:= temp;
  #L4fe386.  v6:= 0I;
  #L4fe388.  if v5 != 0 then goto L4fe398;
  #L4fe38c.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4fe392.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4fe396.  return @kind void;
  #L4fe398.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4fe39c.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` @kind boolean;
  #L4fe3a0.  if v7 == 0 then goto L4fe3d4;
  #L4fe3a4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fe3aa.  v8:= temp @kind object;
  #L4fe3ac.  if v8 == 0 then goto L4fe3d4;
  #L4fe3b0.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4fe3b6.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4fe3bc.  v1:= temp @kind object;
  #L4fe3be.  if v5 == 0 then goto L4fe3cc;
  #L4fe3c2.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4fe3c6.  call `onError`(v5, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fe3cc.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fe3d2.  return @kind void;
  #L4fe3d4.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4fe3da.  v8:= temp @kind object;
  #L4fe3dc.  if v8 != 0 then goto L4fe3e4;
  #L4fe3e0.  v9:= 1I;
  #L4fe3e2.  goto L4fe3e6;
  #L4fe3e4.  v9:= 0I;
  #L4fe3e6.  if v7 == 0 then goto L4fe426;
  #L4fe3ea.  if v9 == 0 then goto L4fe426;
  #L4fe3ee.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4fe3f4.  v1:= temp @kind object;
  #L4fe3f6.  if v1 != 0 then goto L4fe410;
  #L4fe3fa.  if v5 == 0 then goto L4fe408;
  #L4fe3fe.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4fe402.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fe408.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fe40e.  goto L4fe424;
  #L4fe410.  if v5 == 0 then goto L4fe41e;
  #L4fe414.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4fe418.  call `onError`(v5, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fe41e.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fe424.  return @kind void;
  #L4fe426.  if v9 == 0 then goto L4fe43a;
  #L4fe42a.  v4:= -v4 @kind int;
  #L4fe42c.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4fe432.  v4:= temp;
  #L4fe434.  if v4 != 0 then goto L4fe37a;
  #L4fe438.  return @kind void;
  #L4fe43a.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` @kind object;
  #L4fe43e.  if v8 == v7 then goto L4fe44a;
  #L4fe442.  call `onNext`(v5, v8) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4fe448.  goto L4fe37a;
  #L4fe44a.  if v5 == 0 then goto L4fe458;
  #L4fe44e.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4fe452.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fe458.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe45c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fe462.  v5:= temp;
  #L4fe464.  if v5 != 0 then goto L4fe37a;
  #L4fe468.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`int`;
  #L4fe46c.  call temp:= `create`(v5, v10) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4fe472.  v5:= temp @kind object;
  #L4fe474.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v5 @kind object;
  #L4fe478.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4fe47c.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4fe482.  v6:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4fe486.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4fe48c.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fe492.  call temp:= `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4fe498.  v6:= temp;
  #L4fe49a.  if v6 == 0 then goto L4fe37a;
  #L4fe49e.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fe4a4.  goto L4fe37a;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4fe4b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe4bc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fe4c2.  v0:= 1I;
  #L4fe4c4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4fe4c8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4fe4ce.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4fe4e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe4e4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fe4ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fe4ee.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fe4f4.  v2:= temp;
  #L4fe4f6.  if v2 == 0 then goto L4fe506;
  #L4fe4fa.  v2:= 1I;
  #L4fe4fc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4fe500.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4fe506.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4fe518.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4fe51c.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` @kind object;
  #L4fe520.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fe526.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4fe52c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fe310.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe314.  v1:= 0I;
  #L4fe316.  v2:= 1I;
  #L4fe318.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4fe31e.  v0:= temp;
  #L4fe320.  if v0 == 0 then goto L4fe348;
  #L4fe324.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L4fe328.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4fe32e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4fe332.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4fe338.  v0:= temp;
  #L4fe33a.  if v0 != 0 then goto L4fe348;
  #L4fe33e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe342.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fe348.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe258.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe25c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fe262.  v0:= temp;
  #L4fe264.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe540.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L4fe544.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4fe54a.  v0:= 1I;
  #L4fe54c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4fe550.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4fe556.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe568.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L4fe56c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4fe572.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fe576.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fe57c.  v2:= temp;
  #L4fe57e.  if v2 == 0 then goto L4fe58e;
  #L4fe582.  v2:= 1I;
  #L4fe584.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4fe588.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4fe58e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe5a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4fe5a4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fe5aa.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4fe5b0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe5c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe5c8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fe5ce.  v2:= temp;
  #L4fe5d0.  if v2 == 0 then goto L4fe5da;
  #L4fe5d4.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @kind virtual;
  #L4fe5da.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe5ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4fe5f0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4fe5f6.  v0:= temp;
  #L4fe5f8.  if v0 != 0 then goto L4fe606;
  #L4fe5fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe600.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fe606.  return @kind void;
}
