record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind interface {
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cffb8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4cffbe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4cfffc.  call temp:= `error`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4d0002.  v1:= temp @kind object;
  #L4d0004.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d000a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L4d000e.  v1:= v1 + 1;
  #L4d0012.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int` := v1;
  #L4d0016.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4d0028.  call temp:= `next`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4d002e.  v1:= temp @kind object;
  #L4d0030.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d0036.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L4d003a.  v1:= v1 + 1;
  #L4d003e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int` := v1;
  #L4d0042.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v14 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v15 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4d0054.  @monitorenter v15
  #L4d0056.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` @kind boolean;
  #L4d005a.  v1:= 1I;
  #L4d005c.  if v0 == 0 then goto L4d0068;
  #L4d0060.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v1 @kind boolean;
  #L4d0064.  @monitorexit v15
  #L4d0066.  return @kind void;
  #L4d0068.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v1 @kind boolean;
  #L4d006c.  @monitorexit v15
  #L4d006e.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0072.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L4d0078.  v1:= temp;
  #L4d007a.  if v1 == 0 then goto L4d0080;
  #L4d007e.  return @kind void;
  #L4d0080.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L4d0084.  call temp:= `a`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.a:()Ljava/lang/Object;` @kind virtual;
  #L4d008a.  v2:= temp @kind object;
  #L4d008c.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L4d0090.  v3:= 0I;
  #L4d0092.  if v2 == 0 then goto L4d00a0;
  #L4d0096.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4d009c.  v2:= temp;
  #L4d009e.  goto L4d00a2;
  #L4d00a0.  v2:= 0I;
  #L4d00a2.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d00a8.  v4:= temp @kind wide;
  #L4d00aa.  v6:= 0L;
  #L4d00ae.  v8:= v4 @kind wide;
  #L4d00b0.  v10:= v6 @kind wide;
  #L4d00b2.  v12:= lcmp(v8, v6);
  #L4d00b6.  if v12 == 0 then goto L4d0126;
  #L4d00ba.  if v2 >= v1 then goto L4d0126;
  #L4d00be.  call temp:= `get`(v14, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4d00c4.  v12:= temp @kind object;
  #L4d00c6.  call temp:= `accept`(v12, v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L4d00cc.  v12:= temp;
  #L4d00ce.  if v12 == 0 then goto L4d00d4;
  #L4d00d2.  return @kind void;
  #L4d00d4.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L4d00da.  v12:= temp;
  #L4d00dc.  if v12 == 0 then goto L4d00e2;
  #L4d00e0.  return @kind void;
  #L4d00e2.  v2:= v2 + 1;
  #L4d00e6.  v12:= 1L;
  #L4d00ea.  v8:= v8 - v12 @kind long;
  #L4d00ec.  v10:= v10 + v12 @kind long;
  #L4d00ee.  goto L4d00b2;
  #L4d00f0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d00f2.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d00f8.  call `dispose`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.dispose:()V` @kind virtual;
  #L4d00fe.  call temp:= `isError`(v12) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4d0104.  v15:= temp;
  #L4d0106.  if v15 != 0 then goto L4d011e;
  #L4d010a.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4d0110.  v15:= temp;
  #L4d0112.  if v15 != 0 then goto L4d011e;
  #L4d0116.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d011c.  goto L4d0124;
  #L4d011e.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d0124.  return @kind void;
  #L4d0126.  v1:= lcmp(v10, v6);
  #L4d012a.  if v1 == 0 then goto L4d0152;
  #L4d012e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4d0134.  v1:= temp @kind object;
  #L4d0136.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4d013a.  v1:= 9223372036854775807L;
  #L4d0144.  v6:= lcmp(v4, v1);
  #L4d0148.  if v6 == 0 then goto L4d0152;
  #L4d014c.  call temp:= `b`(v15, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.b:(J)J` @kind virtual;
  #L4d0152.  @monitorenter v15
  #L4d0154.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` @kind boolean;
  #L4d0158.  if v1 != 0 then goto L4d0164;
  #L4d015c.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v3 @kind boolean;
  #L4d0160.  @monitorexit v15
  #L4d0162.  return @kind void;
  #L4d0164.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v3 @kind boolean;
  #L4d0168.  @monitorexit v15
  #L4d016a.  goto L4d0072;
  #L4d016c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d016e.  @monitorexit v15
  #L4d0170.  throw v0;
  #L4d0172.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d0174.  @monitorexit v15
  #L4d0176.  throw v0;
  catch `java.lang.Throwable` @[L4d0056..L4d006e] goto L4d0172;
  catch `java.lang.Throwable` @[L4d00c6..L4d00ce] goto L4d00f0;
  catch `java.lang.Throwable` @[L4d0154..L4d0170] goto L4d016c;
  catch `java.lang.Throwable` @[L4d0174..L4d0176] goto L4d0172;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cffd0.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4cffd6.  v0:= temp @kind object;
  #L4cffd8.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cffde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L4cffe2.  v0:= v0 + 1;
  #L4cffe6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int` := v0;
  #L4cffea.  return @kind void;
}
