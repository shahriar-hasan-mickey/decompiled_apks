record `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$d` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fd054.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4fd05a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fd05e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` := v2 @kind wide;
  #L4fd062.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4fd066.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4fd06a.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4fd06e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4fd074.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4fd078.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fd07c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fd082.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4fd086.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fd1e4.  v0:= 9223372036854775807L;
  #L4fd1ee.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4fd1f4.  v4:= temp;
  #L4fd1f6.  if v4 == 0 then goto L4fd232;
  #L4fd1fa.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fd1fe.  call temp:= `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fd204.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd208.  v5:= new `java.util.concurrent.TimeoutException`;
  #L4fd20c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L4fd210.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4fd214.  call temp:= `timeoutMessage`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L4fd21a.  v0:= temp @kind object;
  #L4fd21c.  call `<init>`(v5, v0) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fd222.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fd228.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fd22c.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fd232.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fd244.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fd248.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fd24c.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$e`;
  #L4fd250.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$e;.<init>:(JLio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$d;)V` @kind direct;
  #L4fd256.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L4fd25a.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4fd25e.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4fd264.  v5:= temp @kind object;
  #L4fd266.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4fd26c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd098.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fd09c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fd0a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fd0a6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fd0ac.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd028.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fd02c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fd032.  v0:= temp @kind object;
  #L4fd034.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4fd038.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fd03e.  v0:= temp;
  #L4fd040.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fd0c0.  v0:= 9223372036854775807L;
  #L4fd0ca.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4fd0d0.  v2:= temp @kind wide;
  #L4fd0d2.  v4:= lcmp(v2, v0);
  #L4fd0d6.  if v4 == 0 then goto L4fd0f8;
  #L4fd0da.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fd0de.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4fd0e4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd0e8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fd0ee.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fd0f2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fd0f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fd10c.  v0:= 9223372036854775807L;
  #L4fd116.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4fd11c.  v2:= temp @kind wide;
  #L4fd11e.  v4:= lcmp(v2, v0);
  #L4fd122.  if v4 == 0 then goto L4fd146;
  #L4fd126.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fd12a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4fd130.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd134.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fd13a.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fd13e.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fd144.  goto L4fd14c;
  #L4fd146.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fd14c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fd160.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4fd166.  v0:= temp @kind wide;
  #L4fd168.  v2:= 9223372036854775807L;
  #L4fd172.  v4:= lcmp(v0, v2);
  #L4fd176.  if v4 == 0 then goto L4fd1b4;
  #L4fd17a.  v2:= 1L;
  #L4fd17e.  v2:= v2 + v0 @kind long;
  #L4fd180.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4fd186.  v0:= temp;
  #L4fd188.  if v0 != 0 then goto L4fd18e;
  #L4fd18c.  goto L4fd1b4;
  #L4fd18e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fd192.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fd198.  v0:= temp @kind object;
  #L4fd19a.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4fd19e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fd1a4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd1a8.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fd1ae.  call `c`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.c:(J)V` @kind virtual;
  #L4fd1b4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd1c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fd1cc.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fd1d2.  return @kind void;
}
