record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4cdf50.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4cdf56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.b` @type ^`int` := v1;
  #L4cdf5a.  v1:= v1 + v2 @kind int;
  #L4cdf5c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.c` @type ^`int` := v1;
  #L4cdf60.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cdf74.  v0:= instanceof @variable v5 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4cdf78.  if v0 == 0 then goto L4cdf9c;
  #L4cdf7c.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b`;
  #L4cdf80.  v1:= v5 @kind object;
  #L4cdf82.  v1:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v1 @kind object;
  #L4cdf86.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.b` @type ^`int`;
  #L4cdf8a.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.c` @type ^`int`;
  #L4cdf8e.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;II)V` @kind direct;
  #L4cdf94.  call `onSubscribe`(v5, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cdf9a.  goto L4cdfb4;
  #L4cdf9c.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c`;
  #L4cdfa0.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.b` @type ^`int`;
  #L4cdfa4.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.c` @type ^`int`;
  #L4cdfa8.  call `<init>`(v0, v5, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L4cdfae.  call `onSubscribe`(v5, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cdfb4.  return @kind void;
}
