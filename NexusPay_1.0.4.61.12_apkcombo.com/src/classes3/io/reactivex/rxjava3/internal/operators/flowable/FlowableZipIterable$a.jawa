record `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4da194.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4da19a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4da19e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4da1a2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4da1a6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4da1d4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4da1da.  v0:= 1I;
  #L4da1dc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4da1e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4da1e4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4da1ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4da1ee.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4da1f4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da1b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4da1bc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4da1c2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da208.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4da20c.  if v0 == 0 then goto L4da212;
  #L4da210.  return @kind void;
  #L4da212.  v0:= 1I;
  #L4da214.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4da218.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4da21c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4da222.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da234.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4da238.  if v0 == 0 then goto L4da244;
  #L4da23c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4da242.  return @kind void;
  #L4da244.  v0:= 1I;
  #L4da246.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4da24a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4da24e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4da254.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4da268.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4da26c.  if v0 == 0 then goto L4da272;
  #L4da270.  return @kind void;
  #L4da272.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4da276.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4da27c.  v0:= temp @kind object;
  #L4da27e.  v1:= "The iterator returned a null value" @kind object;
  #L4da282.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4da288.  v0:= temp @kind object;
  #L4da28a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4da28e.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4da294.  v3:= temp @kind object;
  #L4da296.  v0:= "The zipper function returned a null value" @kind object;
  #L4da29a.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4da2a0.  v3:= temp @kind object;
  #L4da2a2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4da2a6.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4da2ac.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4da2b0.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4da2b6.  v3:= temp;
  #L4da2b8.  if v3 != 0 then goto L4da2d6;
  #L4da2bc.  v3:= 1I;
  #L4da2be.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4da2c2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4da2c6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4da2cc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4da2d0.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4da2d6.  return @kind void;
  #L4da2d8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4da2da.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4da2e0.  return @kind void;
  #L4da2e2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4da2e4.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4da2ea.  return @kind void;
  #L4da2ec.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4da2ee.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4da2f4.  return @kind void;
  catch `java.lang.Throwable` @[L4da272..L4da28a] goto L4da2ec;
  catch `java.lang.Throwable` @[L4da28a..L4da2a2] goto L4da2e2;
  catch `java.lang.Throwable` @[L4da2ac..L4da2b8] goto L4da2d8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da328.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4da32c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4da332.  v0:= temp;
  #L4da334.  if v0 == 0 then goto L4da346;
  #L4da338.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4da33c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4da340.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4da346.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da358.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4da35c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4da362.  return @kind void;
}
