record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.rxjava3.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4eb088.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4eb08e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4eb092.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4eb096.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int` := v3;
  #L4eb09a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int` := v4;
  #L4eb09e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v5 @kind object;
  #L4eb0a2.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4eb0a6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4eb0ac.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4eb0b0.  v1:= new `java.util.ArrayDeque`;
  #L4eb0b4.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4eb0ba.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4eb0be.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4eb10c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` @kind object;
  #L4eb110.  if v0 == 0 then goto L4eb11a;
  #L4eb114.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4eb11a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L4eb11e.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4eb124.  v0:= temp @kind object;
  #L4eb126.  v0:= (`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver`) v0 @kind object;
  #L4eb12a.  if v0 != 0 then goto L4eb130;
  #L4eb12e.  return @kind void;
  #L4eb130.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4eb136.  goto L4eb11a;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4eb42c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eb432.  v0:= temp;
  #L4eb434.  if v0 != 0 then goto L4eb454;
  #L4eb438.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eb43c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb442.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb448.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eb44e.  v0:= temp;
  #L4eb450.  if v0 != 0 then goto L4eb438;
  #L4eb454.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb0d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4eb0d4.  if v0 == 0 then goto L4eb0da;
  #L4eb0d8.  return @kind void;
  #L4eb0da.  v0:= 1I;
  #L4eb0dc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4eb0e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eb0e4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eb0ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb0ee.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4eb0f4.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.b:()V` @kind virtual;
  #L4eb0fa.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4eb148.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eb14e.  v0:= temp;
  #L4eb150.  if v0 == 0 then goto L4eb156;
  #L4eb154.  return @kind void;
  #L4eb156.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eb15a.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L4eb15e.  v2:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb162.  v3:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb166.  v4:= 1I;
  #L4eb168.  v5:= 1I;
  #L4eb16a.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4eb16e.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int`;
  #L4eb172.  if v6 == v7 then goto L4eb246;
  #L4eb176.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4eb17a.  if v7 == 0 then goto L4eb18c;
  #L4eb17e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb184.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb18a.  return @kind void;
  #L4eb18c.  v7:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb190.  if v3 != v7 then goto L4eb1c4;
  #L4eb194.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb198.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eb19e.  v7:= temp @kind object;
  #L4eb1a0.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L4eb1a4.  if v7 == 0 then goto L4eb1c4;
  #L4eb1a8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb1ae.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb1b4.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb1b8.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb1bc.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb1c2.  return @kind void;
  #L4eb1c4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4eb1ca.  v7:= temp @kind object;
  #L4eb1cc.  if v7 != 0 then goto L4eb1d2;
  #L4eb1d0.  goto L4eb246;
  #L4eb1d2.  v8:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4eb1d6.  call temp:= `apply`(v8, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eb1dc.  v7:= temp @kind object;
  #L4eb1de.  v8:= "The mapper returned a null ObservableSource" @kind object;
  #L4eb1e2.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb1e8.  v7:= temp @kind object;
  #L4eb1ea.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4eb1ee.  v8:= new `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver`;
  #L4eb1f2.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L4eb1f6.  call `<init>`(v8, v13, v9) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.<init>:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserverSupport;I)V` @kind direct;
  #L4eb1fc.  call temp:= `offer`(v1, v8) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4eb202.  call `subscribe`(v7, v8) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4eb208.  v6:= v6 + 1;
  #L4eb20c.  goto L4eb16e;
  #L4eb20e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eb210.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eb216.  v2:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eb21a.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eb220.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb226.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb22c.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb230.  call temp:= `tryAddThrowableOrReport`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eb236.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb23a.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb23e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb244.  return @kind void;
  #L4eb246.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4eb24a.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4eb24e.  if v6 == 0 then goto L4eb260;
  #L4eb252.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb258.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb25e.  return @kind void;
  #L4eb260.  v6:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb264.  if v3 != v6 then goto L4eb298;
  #L4eb268.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb26c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eb272.  v6:= temp @kind object;
  #L4eb274.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4eb278.  if v6 == 0 then goto L4eb298;
  #L4eb27c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb282.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb288.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb28c.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb290.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb296.  return @kind void;
  #L4eb298.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` @kind object;
  #L4eb29c.  v7:= 0I;
  #L4eb29e.  if v6 != 0 then goto L4eb336;
  #L4eb2a2.  v6:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb2a6.  if v3 != v6 then goto L4eb2d6;
  #L4eb2aa.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb2ae.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eb2b4.  v6:= temp @kind object;
  #L4eb2b6.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4eb2ba.  if v6 == 0 then goto L4eb2d6;
  #L4eb2be.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb2c4.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb2ca.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb2ce.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb2d4.  return @kind void;
  #L4eb2d6.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4eb2da.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4eb2e0.  v8:= temp @kind object;
  #L4eb2e2.  v8:= (`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver`) v8 @kind object;
  #L4eb2e6.  if v8 != 0 then goto L4eb2ee;
  #L4eb2ea.  v9:= 1I;
  #L4eb2ec.  goto L4eb2f0;
  #L4eb2ee.  v9:= 0I;
  #L4eb2f0.  if v6 == 0 then goto L4eb32c;
  #L4eb2f4.  if v9 == 0 then goto L4eb32c;
  #L4eb2f8.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb2fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eb302.  v1:= temp @kind object;
  #L4eb304.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4eb308.  if v1 == 0 then goto L4eb324;
  #L4eb30c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb312.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb318.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb31c.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb322.  goto L4eb32a;
  #L4eb324.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4eb32a.  return @kind void;
  #L4eb32c.  if v9 != 0 then goto L4eb334;
  #L4eb330.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` := v8 @kind object;
  #L4eb334.  v6:= v8 @kind object;
  #L4eb336.  if v6 == 0 then goto L4eb3f4;
  #L4eb33a.  call temp:= `queue`(v6) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4eb340.  v8:= temp @kind object;
  #L4eb342.  v9:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4eb346.  if v9 == 0 then goto L4eb358;
  #L4eb34a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb350.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb356.  return @kind void;
  #L4eb358.  call temp:= `isDone`(v6) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.isDone:()Z` @kind virtual;
  #L4eb35e.  v9:= temp;
  #L4eb360.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb364.  if v3 != v10 then goto L4eb394;
  #L4eb368.  v10:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb36c.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eb372.  v10:= temp @kind object;
  #L4eb374.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L4eb378.  if v10 == 0 then goto L4eb394;
  #L4eb37c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb382.  call `a`(v13) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4eb388.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb38c.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb392.  return @kind void;
  #L4eb394.  v10:= 0I;
  #L4eb396.  call temp:= `poll`(v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4eb39c.  v11:= temp @kind object;
  #L4eb39e.  if v11 != 0 then goto L4eb3a6;
  #L4eb3a2.  v12:= 1I;
  #L4eb3a4.  goto L4eb3a8;
  #L4eb3a6.  v12:= 0I;
  #L4eb3a8.  if v9 == 0 then goto L4eb3c2;
  #L4eb3ac.  if v12 == 0 then goto L4eb3c2;
  #L4eb3b0.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L4eb3b4.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4eb3b8.  v6:= v6 - v4 @kind int;
  #L4eb3ba.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4eb3be.  goto L4eb16a;
  #L4eb3c2.  if v12 == 0 then goto L4eb3c8;
  #L4eb3c6.  goto L4eb3f4;
  #L4eb3c8.  call `onNext`(v2, v11) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4eb3ce.  goto L4eb342;
  #L4eb3d0.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eb3d2.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eb3d8.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb3dc.  call temp:= `tryAddThrowableOrReport`(v7, v6) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eb3e2.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L4eb3e6.  v6:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4eb3ea.  v6:= v6 - v4 @kind int;
  #L4eb3ec.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4eb3f0.  goto L4eb16a;
  #L4eb3f4.  v5:= -v5 @kind int;
  #L4eb3f6.  call temp:= `addAndGet`(v13, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4eb3fc.  v5:= temp;
  #L4eb3fe.  if v5 != 0 then goto L4eb16a;
  #L4eb402.  return @kind void;
  catch `java.lang.Throwable` @[L4eb1c4..L4eb1ee] goto L4eb20e;
  catch `java.lang.Throwable` @[L4eb396..L4eb39e] goto L4eb3d0;
}
procedure `void` `innerComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.innerComplete:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;)V` @AccessFlag PUBLIC {
    temp;

  #L4eb468.  call `setDone`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L4eb46e.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4eb474.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.innerError:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb488.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb48c.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eb492.  v3:= temp;
  #L4eb494.  if v3 == 0 then goto L4eb4ba;
  #L4eb498.  v3:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb49c.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb4a0.  if v3 != v0 then goto L4eb4ae;
  #L4eb4a4.  v3:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eb4a8.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eb4ae.  call `setDone`(v2) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L4eb4b4.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4eb4ba.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.internal.observers.InnerQueuedObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.innerNext:(Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4eb4cc.  call temp:= `queue`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4eb4d2.  v1:= temp @kind object;
  #L4eb4d4.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4eb4da.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4eb4e0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb070.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4eb074.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb4f4.  v0:= 1I;
  #L4eb4f6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4eb4fa.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4eb500.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb514.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb518.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eb51e.  v2:= temp;
  #L4eb520.  if v2 == 0 then goto L4eb530;
  #L4eb524.  v2:= 1I;
  #L4eb526.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4eb52a.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4eb530.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb544.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int`;
  #L4eb548.  if v0 != 0 then goto L4eb556;
  #L4eb54c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eb550.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4eb556.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4eb55c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eb570.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eb574.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4eb57a.  v0:= temp;
  #L4eb57c.  if v0 == 0 then goto L4eb5f4;
  #L4eb580.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4eb584.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4eb588.  if v0 == 0 then goto L4eb5d8;
  #L4eb58c.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4eb590.  v0:= 3I;
  #L4eb592.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4eb598.  v0:= temp;
  #L4eb59a.  v1:= 1I;
  #L4eb59c.  if v0 != v1 then goto L4eb5be;
  #L4eb5a0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L4eb5a4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb5a8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v1 @kind boolean;
  #L4eb5ac.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb5b0.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb5b6.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4eb5bc.  return @kind void;
  #L4eb5be.  v1:= 2I;
  #L4eb5c0.  if v0 != v1 then goto L4eb5d8;
  #L4eb5c4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L4eb5c8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb5cc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb5d0.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb5d6.  return @kind void;
  #L4eb5d8.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4eb5dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L4eb5e0.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4eb5e6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb5ea.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb5ee.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb5f4.  return @kind void;
}
