record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4dd874.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4dd87a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4dd87e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4dd882.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4dd886.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4dd88c.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4dd890.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd8a4.  v0:= 1I;
  #L4dd8a6.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4dd8aa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dd8ae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dd8b4.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dd8b8.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4dd8bc.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd8d0.  v0:= 0I;
  #L4dd8d2.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L4dd8d6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4dd8e8.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4dd8ee.  v0:= temp;
  #L4dd8f0.  if v0 == 0 then goto L4dd8f6;
  #L4dd8f4.  return @kind void;
  #L4dd8f6.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4dd8fa.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4dd8fe.  v2:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L4dd902.  if v2 == 0 then goto L4dd91a;
  #L4dd906.  if v1 == 0 then goto L4dd91a;
  #L4dd90a.  v1:= 0I;
  #L4dd90c.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4dd912.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4dd918.  return @kind void;
  #L4dd91a.  v2:= 1I;
  #L4dd91c.  if v1 == 0 then goto L4dd9ce;
  #L4dd920.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dd924.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4dd92a.  v3:= temp @kind wide;
  #L4dd92c.  v5:= 9223372036854775807L;
  #L4dd936.  v7:= lcmp(v3, v5);
  #L4dd93a.  if v7 != 0 then goto L4dd946;
  #L4dd93e.  call `e`(v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L4dd944.  return @kind void;
  #L4dd946.  v5:= 0L;
  #L4dd94a.  v7:= v5 @kind wide;
  #L4dd94c.  v9:= lcmp(v7, v3);
  #L4dd950.  if v9 == 0 then goto L4dd9bc;
  #L4dd954.  v9:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4dd958.  if v9 == 0 then goto L4dd95e;
  #L4dd95c.  return @kind void;
  #L4dd95e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4dd964.  v9:= temp @kind object;
  #L4dd966.  v10:= "The iterator returned a null value" @kind object;
  #L4dd96a.  call temp:= `requireNonNull`(v9, v10) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4dd970.  v9:= temp @kind object;
  #L4dd972.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4dd978.  v9:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4dd97c.  if v9 == 0 then goto L4dd982;
  #L4dd980.  return @kind void;
  #L4dd982.  v9:= 1L;
  #L4dd986.  v7:= v7 + v9 @kind long;
  #L4dd988.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4dd98e.  v9:= temp;
  #L4dd990.  if v9 != 0 then goto L4dd94c;
  #L4dd994.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4dd99a.  return @kind void;
  #L4dd99c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd99e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd9a4.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dd9aa.  return @kind void;
  #L4dd9ac.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dd9ae.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dd9b4.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dd9ba.  return @kind void;
  #L4dd9bc.  v3:= lcmp(v7, v5);
  #L4dd9c0.  if v3 == 0 then goto L4dd9ce;
  #L4dd9c4.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dd9c8.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4dd9ce.  v2:= -v2 @kind int;
  #L4dd9d0.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4dd9d6.  v2:= temp;
  #L4dd9d8.  if v2 != 0 then goto L4dd9de;
  #L4dd9dc.  return @kind void;
  #L4dd9de.  if v1 != 0 then goto L4dd91c;
  #L4dd9e2.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4dd9e6.  goto L4dd91c;
  catch `java.lang.Throwable` @[L4dd95e..L4dd972] goto L4dd9ac;
  catch `java.lang.Throwable` @[L4dd988..L4dd990] goto L4dd99c;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L4dda10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4dda14.  if v0 == 0 then goto L4dda1a;
  #L4dda18.  return @kind void;
  #L4dda1a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4dda20.  v0:= temp @kind object;
  #L4dda22.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4dda28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4dda2c.  if v0 == 0 then goto L4dda32;
  #L4dda30.  return @kind void;
  #L4dda32.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4dda38.  v0:= temp;
  #L4dda3a.  if v0 != 0 then goto L4dda10;
  #L4dda3e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4dda44.  return @kind void;
  #L4dda46.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dda48.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dda4e.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dda54.  return @kind void;
  #L4dda56.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dda58.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dda5e.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dda64.  return @kind void;
  catch `java.lang.Throwable` @[L4dda1a..L4dda22] goto L4dda56;
  catch `java.lang.Throwable` @[L4dda32..L4dda3a] goto L4dda46;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd7ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4dd7f0.  if v0 != 0 then goto L4dd7f8;
  #L4dd7f4.  v0:= 1I;
  #L4dd7f6.  goto L4dd7fa;
  #L4dd7f8.  v0:= 0I;
  #L4dd7fa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dda90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4dda94.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4dda9a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddaac.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ddab0.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ddab4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddab8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ddabe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddad0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ddad4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ddada.  v0:= temp;
  #L4ddadc.  if v0 == 0 then goto L4ddaee;
  #L4ddae0.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ddae4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddae8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ddaee.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddb00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ddb04.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ddb0a.  v2:= temp @kind object;
  #L4ddb0c.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L4ddb10.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ddb16.  v2:= temp @kind object;
  #L4ddb18.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ddb1e.  v0:= temp;
  #L4ddb20.  if v0 != 0 then goto L4ddb30;
  #L4ddb24.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddb28.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ddb2e.  return @kind void;
  #L4ddb30.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L4ddb34.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L4ddb3a.  return @kind void;
  #L4ddb3c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ddb3e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ddb44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ddb48.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ddb4e.  return @kind void;
  catch `java.lang.Throwable` @[L4ddb00..L4ddb20] goto L4ddb3c;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dd830.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4dd834.  v1:= 0I;
  #L4dd836.  if v0 == 0 then goto L4dd860;
  #L4dd83a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4dd840.  v2:= temp @kind object;
  #L4dd842.  v3:= "The iterator returned a null value" @kind object;
  #L4dd846.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4dd84c.  v2:= temp @kind object;
  #L4dd84e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4dd854.  v0:= temp;
  #L4dd856.  if v0 != 0 then goto L4dd85e;
  #L4dd85a.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L4dd85e.  return v2 @kind object;
  #L4dd860.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddb6c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ddb72.  v0:= temp;
  #L4ddb74.  if v0 == 0 then goto L4ddb88;
  #L4ddb78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ddb7c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ddb82.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L4ddb88.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dd80c.  v0:= 2I;
  #L4dd80e.  v2:= v2 ^& v0 @kind int;
  #L4dd810.  if v2 == 0 then goto L4dd81c;
  #L4dd814.  v2:= 1I;
  #L4dd816.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4dd81a.  return v0;
  #L4dd81c.  v2:= 0I;
  #L4dd81e.  return v2;
}
