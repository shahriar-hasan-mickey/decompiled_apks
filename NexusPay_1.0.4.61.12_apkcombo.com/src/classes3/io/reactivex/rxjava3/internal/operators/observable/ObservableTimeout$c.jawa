record `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$d` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fca70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4fca76.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fca7a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4fca7e.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4fca82.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4fca88.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4fca8c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fca90.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fca96.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4fca9a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.a:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fcc9c.  v0:= 9223372036854775807L;
  #L4fcca6.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4fccac.  v3:= temp;
  #L4fccae.  if v3 == 0 then goto L4fccc8;
  #L4fccb2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fccb6.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fccbc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fccc0.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fccc6.  goto L4fccce;
  #L4fccc8.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fccce.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fcc54.  v0:= 9223372036854775807L;
  #L4fcc5e.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4fcc64.  v3:= temp;
  #L4fcc66.  if v3 == 0 then goto L4fcc88;
  #L4fcc6a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fcc6e.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fcc74.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fcc78.  v4:= new `java.util.concurrent.TimeoutException`;
  #L4fcc7c.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4fcc82.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fcc88.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v3 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.c:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4fcce0.  if v4 == 0 then goto L4fcd08;
  #L4fcce4.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a`;
  #L4fcce8.  v1:= 0L;
  #L4fccec.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$d;)V` @kind direct;
  #L4fccf2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fccf6.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4fccfc.  v1:= temp;
  #L4fccfe.  if v1 == 0 then goto L4fcd08;
  #L4fcd02.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4fcd08.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fcaac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fcab0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fcab6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fcaba.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4fcac0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fca44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fca48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fca4e.  v0:= temp @kind object;
  #L4fca50.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4fca54.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fca5a.  v0:= temp;
  #L4fca5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fcad4.  v0:= 9223372036854775807L;
  #L4fcade.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4fcae4.  v2:= temp @kind wide;
  #L4fcae6.  v4:= lcmp(v2, v0);
  #L4fcaea.  if v4 == 0 then goto L4fcb02;
  #L4fcaee.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fcaf2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4fcaf8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fcafc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fcb02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fcb14.  v0:= 9223372036854775807L;
  #L4fcb1e.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4fcb24.  v2:= temp @kind wide;
  #L4fcb26.  v4:= lcmp(v2, v0);
  #L4fcb2a.  if v4 == 0 then goto L4fcb44;
  #L4fcb2e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fcb32.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4fcb38.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fcb3c.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fcb42.  goto L4fcb4a;
  #L4fcb44.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fcb4a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4fcb5c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4fcb62.  v0:= temp @kind wide;
  #L4fcb64.  v2:= 9223372036854775807L;
  #L4fcb6e.  v4:= lcmp(v0, v2);
  #L4fcb72.  if v4 == 0 then goto L4fcc1a;
  #L4fcb76.  v4:= 1L;
  #L4fcb7a.  v4:= v4 + v0 @kind long;
  #L4fcb7c.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4fcb82.  v0:= temp;
  #L4fcb84.  if v0 != 0 then goto L4fcb8a;
  #L4fcb88.  goto L4fcc1a;
  #L4fcb8a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fcb8e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fcb94.  v0:= temp @kind object;
  #L4fcb96.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4fcb9a.  if v0 == 0 then goto L4fcba4;
  #L4fcb9e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fcba4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fcba8.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fcbae.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4fcbb2.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4fcbb8.  v7:= temp @kind object;
  #L4fcbba.  v0:= "The itemTimeoutIndicator returned a null ObservableSource." @kind object;
  #L4fcbbe.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4fcbc4.  v7:= temp @kind object;
  #L4fcbc6.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4fcbca.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$a`;
  #L4fcbce.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$d;)V` @kind direct;
  #L4fcbd4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fcbd8.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4fcbde.  v1:= temp;
  #L4fcbe0.  if v1 == 0 then goto L4fcbea;
  #L4fcbe4.  call `subscribe`(v7, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4fcbea.  return @kind void;
  #L4fcbec.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fcbee.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4fcbf4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fcbf8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fcbfe.  v0:= temp @kind object;
  #L4fcc00.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4fcc04.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fcc0a.  call temp:= `getAndSet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4fcc10.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fcc14.  call `onError`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fcc1a.  return @kind void;
  catch `java.lang.Throwable` @[L4fcbae..L4fcbca] goto L4fcbec;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeout$c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fcc38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fcc3c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fcc42.  return @kind void;
}
