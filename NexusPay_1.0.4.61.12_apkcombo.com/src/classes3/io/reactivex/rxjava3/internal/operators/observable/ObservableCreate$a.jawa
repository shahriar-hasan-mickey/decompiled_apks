record `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.ObservableEmitter` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ec7e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ec7e6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ec7ea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4ec7fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ec802.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec6fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec702.  v0:= temp @kind object;
  #L4ec704.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ec708.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec70e.  v0:= temp;
  #L4ec710.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec814.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L4ec81a.  v0:= temp;
  #L4ec81c.  if v0 != 0 then goto L4ec83c;
  #L4ec820.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec824.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ec82a.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4ec830.  goto L4ec83c;
  #L4ec832.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec834.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4ec83a.  throw v0;
  #L4ec83c.  return @kind void;
  catch `java.lang.Throwable` @[L4ec820..L4ec82a] goto L4ec832;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec85c.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ec862.  v0:= temp;
  #L4ec864.  if v0 != 0 then goto L4ec86e;
  #L4ec868.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ec86e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec880.  if v2 != 0 then goto L4ec898;
  #L4ec884.  v2:= "onNext called with a null value." @kind object;
  #L4ec888.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4ec88e.  v2:= temp @kind object;
  #L4ec890.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ec896.  return @kind void;
  #L4ec898.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L4ec89e.  v0:= temp;
  #L4ec8a0.  if v0 != 0 then goto L4ec8ae;
  #L4ec8a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec8a8.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ec8ae.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.ObservableEmitter` `serialize`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.serialize:()Lio/reactivex/rxjava3/core/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec780.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b`;
  #L4ec784.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/rxjava3/core/ObservableEmitter;)V` @kind direct;
  #L4ec78a.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec8c0.  v0:= new `io.reactivex.rxjava3.internal.disposables.CancellableDisposable`;
  #L4ec8c4.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind direct;
  #L4ec8ca.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4ec8d0.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4ec8e4.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec8ea.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ec79c.  v0:= 2I;
  #L4ec79e.  v0:= new `java.lang.Object`[v0];
  #L4ec7a2.  v1:= constclass @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` @kind object;
  #L4ec7a6.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4ec7ac.  v1:= temp @kind object;
  #L4ec7ae.  v2:= 0I;
  #L4ec7b0.  v0[v2]:= v1 @kind object;
  #L4ec7b4.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L4ec7ba.  v1:= temp @kind object;
  #L4ec7bc.  v2:= 1I;
  #L4ec7be.  v0[v2]:= v1 @kind object;
  #L4ec7c2.  v1:= "%s{%s}" @kind object;
  #L4ec7c6.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4ec7cc.  v0:= temp @kind object;
  #L4ec7ce.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec724.  if v2 != 0 then goto L4ec734;
  #L4ec728.  v2:= "onError called with a null Throwable." @kind object;
  #L4ec72c.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4ec732.  v2:= temp @kind object;
  #L4ec734.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L4ec73a.  v0:= temp;
  #L4ec73c.  if v0 != 0 then goto L4ec75e;
  #L4ec740.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec744.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ec74a.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4ec750.  v2:= 1I;
  #L4ec752.  return v2;
  #L4ec754.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec756.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4ec75c.  throw v2;
  #L4ec75e.  v2:= 0I;
  #L4ec760.  return v2;
  catch `java.lang.Throwable` @[L4ec740..L4ec74a] goto L4ec754;
}
