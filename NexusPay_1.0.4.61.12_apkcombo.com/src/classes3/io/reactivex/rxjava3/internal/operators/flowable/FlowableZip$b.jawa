record `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4da000.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4da006.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` := v1 @kind object;
  #L4da00a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int` := v2;
  #L4da00e.  v1:= v2 ^> 2;
  #L4da012.  v2:= v2 - v1 @kind int;
  #L4da014.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.c` @type ^`int` := v2;
  #L4da018.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4da02c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4da032.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da044.  v0:= 1I;
  #L4da046.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v0 @kind boolean;
  #L4da04a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4da04e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4da054.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4da068.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4da06c.  call `c`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;Ljava/lang/Throwable;)V` @kind virtual;
  #L4da072.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4da084.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L4da088.  v1:= 2I;
  #L4da08a.  if v0 == v1 then goto L4da098;
  #L4da08e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4da092.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4da098.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4da09c.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4da0a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4da0b4.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4da0ba.  v0:= temp;
  #L4da0bc.  if v0 == 0 then goto L4da130;
  #L4da0c0.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4da0c4.  if v0 == 0 then goto L4da112;
  #L4da0c8.  v0:= v4 @kind object;
  #L4da0ca.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4da0ce.  v1:= 7I;
  #L4da0d0.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4da0d6.  v1:= temp;
  #L4da0d8.  v2:= 1I;
  #L4da0da.  if v1 != v2 then goto L4da0f6;
  #L4da0de.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L4da0e2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4da0e6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v2 @kind boolean;
  #L4da0ea.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4da0ee.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4da0f4.  return @kind void;
  #L4da0f6.  v2:= 2I;
  #L4da0f8.  if v1 != v2 then goto L4da112;
  #L4da0fc.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L4da100.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4da104.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L4da108.  v0:= (`long`) v0 @kind i2l;
  #L4da10a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4da110.  return @kind void;
  #L4da112.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4da116.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L4da11a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4da120.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4da124.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L4da128.  v0:= (`long`) v0 @kind i2l;
  #L4da12a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4da130.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4da144.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L4da148.  v1:= 1I;
  #L4da14a.  if v0 == v1 then goto L4da182;
  #L4da14e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @type ^`long` @kind wide;
  #L4da152.  v0:= v0 + v4 @kind long;
  #L4da154.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.c` @type ^`int`;
  #L4da158.  v4:= (`long`) v4 @kind i2l;
  #L4da15a.  v2:= lcmp(v0, v4);
  #L4da15e.  if v2 < 0 then goto L4da17e;
  #L4da162.  v4:= 0L;
  #L4da166.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v4 @kind wide;
  #L4da16a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4da170.  v4:= temp @kind object;
  #L4da172.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4da176.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4da17c.  goto L4da182;
  #L4da17e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v0 @kind wide;
  #L4da182.  return @kind void;
}
