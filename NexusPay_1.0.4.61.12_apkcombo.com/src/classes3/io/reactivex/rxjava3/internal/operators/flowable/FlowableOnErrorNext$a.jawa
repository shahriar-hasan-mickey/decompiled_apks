record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4cc468.  v0:= 0I;
  #L4cc46a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4cc470.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4cc474.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.i` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4cc478.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cc48c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L4cc490.  if v0 == 0 then goto L4cc496;
  #L4cc494.  return @kind void;
  #L4cc496.  v0:= 1I;
  #L4cc498.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4cc49c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4cc4a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cc4a4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cc4aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cc4bc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` @kind boolean;
  #L4cc4c0.  if v0 == 0 then goto L4cc4e0;
  #L4cc4c4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L4cc4c8.  if v0 == 0 then goto L4cc4d4;
  #L4cc4cc.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cc4d2.  return @kind void;
  #L4cc4d4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cc4d8.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cc4de.  return @kind void;
  #L4cc4e0.  v0:= 1I;
  #L4cc4e2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4cc4e6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.i` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4cc4ea.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4cc4f0.  v1:= temp @kind object;
  #L4cc4f2.  v2:= "The nextSupplier returned a null Publisher" @kind object;
  #L4cc4f6.  call temp:= `requireNonNull`(v1, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4cc4fc.  v1:= temp @kind object;
  #L4cc4fe.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L4cc502.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`long` @kind wide;
  #L4cc506.  v4:= 0L;
  #L4cc50a.  v7:= lcmp(v2, v4);
  #L4cc50e.  if v7 == 0 then goto L4cc518;
  #L4cc512.  call `produced`(v6, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4cc518.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4cc51e.  return @kind void;
  #L4cc520.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cc522.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cc528.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cc52c.  v3:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4cc530.  v4:= 2I;
  #L4cc532.  v4:= new `java.lang.Throwable`[v4];
  #L4cc536.  v5:= 0I;
  #L4cc538.  v4[v5]:= v7 @kind object;
  #L4cc53c.  v4[v0]:= v1 @kind object;
  #L4cc540.  call `<init>`(v3, v4) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4cc546.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cc54c.  return @kind void;
  catch `java.lang.Throwable` @[L4cc4e6..L4cc502] goto L4cc520;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cc56c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L4cc570.  if v0 == 0 then goto L4cc576;
  #L4cc574.  return @kind void;
  #L4cc576.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` @kind boolean;
  #L4cc57a.  if v0 != 0 then goto L4cc58c;
  #L4cc57e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`long` @kind wide;
  #L4cc582.  v2:= 1L;
  #L4cc586.  v0:= v0 + v2 @kind long;
  #L4cc588.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`long` := v0 @kind wide;
  #L4cc58c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cc590.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cc596.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorNext$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L4cc5a8.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4cc5ae.  return @kind void;
}
