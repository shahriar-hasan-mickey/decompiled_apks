record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.d` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeat$a;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cea50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cea56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cea5a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` := v4 @kind object;
  #L4cea5e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.c` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L4cea62.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L4cea66.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeat$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ceb30.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ceb36.  v0:= temp;
  #L4ceb38.  if v0 != 0 then goto L4ceb86;
  #L4ceb3c.  v0:= 1I;
  #L4ceb3e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4ceb42.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L4ceb48.  v1:= temp;
  #L4ceb4a.  if v1 == 0 then goto L4ceb50;
  #L4ceb4e.  return @kind void;
  #L4ceb50.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` @kind wide;
  #L4ceb54.  v3:= 0L;
  #L4ceb58.  v5:= lcmp(v1, v3);
  #L4ceb5c.  if v5 == 0 then goto L4ceb6e;
  #L4ceb60.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` := v3 @kind wide;
  #L4ceb64.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4ceb68.  call `produced`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4ceb6e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4ceb72.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4ceb78.  v0:= -v0 @kind int;
  #L4ceb7a.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ceb80.  v0:= temp;
  #L4ceb82.  if v0 != 0 then goto L4ceb3e;
  #L4ceb86.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeat$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cea78.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` @kind wide;
  #L4cea7c.  v2:= 9223372036854775807L;
  #L4cea86.  v4:= lcmp(v0, v2);
  #L4cea8a.  if v4 == 0 then goto L4cea9a;
  #L4cea8e.  v2:= 1L;
  #L4cea92.  v2:= v0 - v2 @kind long;
  #L4cea96.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L4cea9a.  v2:= 0L;
  #L4cea9e.  v4:= lcmp(v0, v2);
  #L4ceaa2.  if v4 == 0 then goto L4ceaae;
  #L4ceaa6.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeat$a;.a:()V` @kind virtual;
  #L4ceaac.  goto L4ceab8;
  #L4ceaae.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ceab2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ceab8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeat$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ceacc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cead0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cead6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeat$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ceae8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` @kind wide;
  #L4ceaec.  v2:= 1L;
  #L4ceaf0.  v0:= v0 + v2 @kind long;
  #L4ceaf2.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` := v0 @kind wide;
  #L4ceaf6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ceafa.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ceb00.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeat$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ceb14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4ceb18.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4ceb1e.  return @kind void;
}
