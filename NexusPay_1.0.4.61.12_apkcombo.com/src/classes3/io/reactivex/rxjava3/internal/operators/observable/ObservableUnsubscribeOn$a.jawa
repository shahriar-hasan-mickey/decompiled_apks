record `io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fd8c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4fd8ca.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fd8ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4fd8d2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fd8e4.  v0:= 0I;
  #L4fd8e6.  v1:= 1I;
  #L4fd8e8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4fd8ee.  v0:= temp;
  #L4fd8f0.  if v0 == 0 then goto L4fd908;
  #L4fd8f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4fd8f8.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a$a`;
  #L4fd8fc.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;)V` @kind direct;
  #L4fd902.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4fd908.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd8a8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fd8ae.  v0:= temp;
  #L4fd8b0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd91c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fd922.  v0:= temp;
  #L4fd924.  if v0 != 0 then goto L4fd932;
  #L4fd928.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd92c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fd932.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd944.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fd94a.  v0:= temp;
  #L4fd94c.  if v0 == 0 then goto L4fd958;
  #L4fd950.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fd956.  return @kind void;
  #L4fd958.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd95c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fd962.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd974.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fd97a.  v0:= temp;
  #L4fd97c.  if v0 != 0 then goto L4fd98a;
  #L4fd980.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd984.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fd98a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableUnsubscribeOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fd99c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fd9a0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fd9a6.  v0:= temp;
  #L4fd9a8.  if v0 == 0 then goto L4fd9ba;
  #L4fd9ac.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fd9b0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fd9b4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fd9ba.  return @kind void;
}
