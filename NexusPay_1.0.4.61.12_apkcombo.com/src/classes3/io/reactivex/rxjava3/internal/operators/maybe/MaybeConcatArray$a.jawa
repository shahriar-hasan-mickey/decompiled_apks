record `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeSource`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.f` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4dac70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4dac76.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4dac7a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.e` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] := v2 @kind object;
  #L4dac7e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4dac82.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4dac88.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4dac8c.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4dac90.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4dac96.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4dac9a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4dac9e.  v2:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4daca2.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4daca8.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4dacac.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4dacdc.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4dace2.  v0:= temp;
  #L4dace4.  if v0 == 0 then goto L4dacea;
  #L4dace8.  return @kind void;
  #L4dacea.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dacee.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4dacf2.  v2:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4dacf6.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4dacfc.  v3:= temp;
  #L4dacfe.  v4:= 0I;
  #L4dad00.  if v3 == 0 then goto L4dad0c;
  #L4dad04.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dad0a.  return @kind void;
  #L4dad0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dad12.  v3:= temp @kind object;
  #L4dad14.  if v3 == 0 then goto L4dad96;
  #L4dad18.  v5:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4dad1c.  v6:= 1I;
  #L4dad1e.  if v3 == v5 then goto L4dad58;
  #L4dad22.  v7:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.g` @type ^`long` @kind wide;
  #L4dad26.  v5:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dad2a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4dad30.  v9:= temp @kind wide;
  #L4dad32.  v5:= lcmp(v7, v9);
  #L4dad36.  if v5 == 0 then goto L4dad52;
  #L4dad3a.  v9:= 1L;
  #L4dad3e.  v7:= v7 + v9 @kind long;
  #L4dad40.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.g` @type ^`long` := v7 @kind wide;
  #L4dad44.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dad4a.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4dad50.  goto L4dad5e;
  #L4dad52.  v3:= 0I;
  #L4dad54.  v6:= 0I;
  #L4dad56.  goto L4dad5e;
  #L4dad58.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dad5e.  if v6 == 0 then goto L4dad96;
  #L4dad62.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4dad68.  v3:= temp;
  #L4dad6a.  if v3 != 0 then goto L4dad96;
  #L4dad6e.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.f` @type ^`int`;
  #L4dad72.  v4:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.e` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] @kind object;
  #L4dad76.  v5:= length @variable v4;
  #L4dad78.  if v3 != v5 then goto L4dad84;
  #L4dad7c.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4dad82.  return @kind void;
  #L4dad84.  v5:= v3 + 1;
  #L4dad88.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.f` @type ^`int` := v5;
  #L4dad8c.  v3:= v4[v3] @kind object;
  #L4dad90.  call `subscribe`(v3, v11) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4dad96.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4dad9c.  v3:= temp;
  #L4dad9e.  if v3 != 0 then goto L4dacf6;
  #L4dada2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dacc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4dacc4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4dacca.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dadb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dadb8.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4dadbc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dadc2.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L4dadc8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4daddc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4dade0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dade6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dadf8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4dadfc.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4dae02.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dae14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dae18.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dae1e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L4dae24.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dae38.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4dae3e.  v0:= temp;
  #L4dae40.  if v0 == 0 then goto L4dae54;
  #L4dae44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4dae48.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4dae4e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L4dae54.  return @kind void;
}
