record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.j` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.k` @AccessFlag ;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e83f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e83fa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4e83fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4e8402.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4e8406.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4e840a.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4e840e.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4e8414.  v2:= temp;
  #L4e8416.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4e841c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L4e8420.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4e8424.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4e842a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4e842e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e8432.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e8438.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e843c.  v1:= new `java.util.LinkedHashMap`;
  #L4e8440.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4e8446.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v1 @kind object;
  #L4e844a.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e844e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e8454.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e8458.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e846c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e8470.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e8476.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e847a.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4e8480.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e8486.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v3 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4e8498.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e849c.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4e84a2.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e84a6.  call temp:= `size`(v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4e84ac.  v4:= temp;
  #L4e84ae.  v0:= 1I;
  #L4e84b0.  if v4 != 0 then goto L4e84c2;
  #L4e84b4.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e84b8.  call temp:= `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e84be.  v4:= 1I;
  #L4e84c0.  goto L4e84c4;
  #L4e84c2.  v4:= 0I;
  #L4e84c4.  @monitorenter v3
  #L4e84c6.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4e84ca.  if v1 != 0 then goto L4e84d2;
  #L4e84ce.  @monitorexit v3
  #L4e84d0.  return @kind void;
  #L4e84d2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e84d6.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4e84da.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4e84e0.  v5:= temp @kind object;
  #L4e84e2.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e84e8.  v5:= temp @kind object;
  #L4e84ea.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e84f0.  @monitorexit v3
  #L4e84f2.  if v4 == 0 then goto L4e84fa;
  #L4e84f6.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e84fa.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4e8500.  return @kind void;
  #L4e8502.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8504.  @monitorexit v3
  #L4e8506.  throw v4;
  catch `java.lang.Throwable` @[L4e84c6..L4e84f2] goto L4e8502;
  catch `java.lang.Throwable` @[L4e8504..L4e8506] goto L4e8502;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e859c.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e85a2.  v0:= temp;
  #L4e85a4.  if v0 == 0 then goto L4e85aa;
  #L4e85a8.  return @kind void;
  #L4e85aa.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e85ae.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e85b2.  v2:= 1I;
  #L4e85b4.  v3:= 1I;
  #L4e85b6.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.j` @type ^`boolean` @kind boolean;
  #L4e85ba.  if v4 == 0 then goto L4e85c6;
  #L4e85be.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4e85c4.  return @kind void;
  #L4e85c6.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` @kind boolean;
  #L4e85ca.  if v4 == 0 then goto L4e85f0;
  #L4e85ce.  v5:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e85d2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e85d8.  v5:= temp @kind object;
  #L4e85da.  if v5 == 0 then goto L4e85f0;
  #L4e85de.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4e85e4.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e85e8.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e85ee.  return @kind void;
  #L4e85f0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4e85f6.  v5:= temp @kind object;
  #L4e85f8.  v5:= (`java.util.Collection`) v5 @kind object;
  #L4e85fc.  if v5 != 0 then goto L4e8604;
  #L4e8600.  v6:= 1I;
  #L4e8602.  goto L4e8606;
  #L4e8604.  v6:= 0I;
  #L4e8606.  if v4 == 0 then goto L4e8616;
  #L4e860a.  if v6 == 0 then goto L4e8616;
  #L4e860e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4e8614.  return @kind void;
  #L4e8616.  if v6 == 0 then goto L4e862a;
  #L4e861a.  v3:= -v3 @kind int;
  #L4e861c.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e8622.  v3:= temp;
  #L4e8624.  if v3 != 0 then goto L4e85b6;
  #L4e8628.  return @kind void;
  #L4e862a.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e8630.  goto L4e85b6;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e87d4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4e87d8.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4e87de.  v0:= temp @kind object;
  #L4e87e0.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L4e87e4.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e87ea.  v0:= temp @kind object;
  #L4e87ec.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4e87f0.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e87f4.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e87fa.  v6:= temp @kind object;
  #L4e87fc.  v1:= "The bufferClose returned a null ObservableSource" @kind object;
  #L4e8800.  call temp:= `requireNonNull`(v6, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e8806.  v6:= temp @kind object;
  #L4e8808.  v6:= (`io.reactivex.rxjava3.core.ObservableSource`) v6 @kind object;
  #L4e880c.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.k` @type ^`long` @kind wide;
  #L4e8810.  v3:= 1L;
  #L4e8814.  v3:= v3 + v1 @kind long;
  #L4e8816.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.k` @type ^`long` := v3 @kind wide;
  #L4e881a.  @monitorenter v5
  #L4e881c.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4e8820.  if v3 != 0 then goto L4e8828;
  #L4e8824.  @monitorexit v5
  #L4e8826.  return @kind void;
  #L4e8828.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4e882e.  v4:= temp @kind object;
  #L4e8830.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e8836.  @monitorexit v5
  #L4e8838.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b`;
  #L4e883c.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;J)V` @kind direct;
  #L4e8842.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e8846.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4e884c.  call `subscribe`(v6, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e8852.  return @kind void;
  #L4e8854.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8856.  @monitorexit v5
  #L4e8858.  throw v6;
  #L4e885a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e885c.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e8862.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e8866.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e886c.  call `onError`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e8872.  return @kind void;
  catch `java.lang.Throwable` @[L4e87d4..L4e880c] goto L4e885a;
  catch `java.lang.Throwable` @[L4e881c..L4e8838] goto L4e8854;
  catch `java.lang.Throwable` @[L4e8856..L4e8858] goto L4e8854;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e852c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e8530.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e8536.  v0:= temp;
  #L4e8538.  if v0 == 0 then goto L4e8574;
  #L4e853c.  v0:= 1I;
  #L4e853e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4e8542.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e8546.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4e854c.  @monitorenter v1
  #L4e854e.  v0:= 0I;
  #L4e8550.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v0 @kind object;
  #L4e8554.  @monitorexit v1
  #L4e8556.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e855c.  v0:= temp;
  #L4e855e.  if v0 == 0 then goto L4e8574;
  #L4e8562.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e8566.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4e856c.  goto L4e8574;
  #L4e856e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8570.  @monitorexit v1
  #L4e8572.  throw v0;
  #L4e8574.  return @kind void;
  catch `java.lang.Throwable` @[L4e8550..L4e8556] goto L4e856e;
  catch `java.lang.Throwable` @[L4e8570..L4e8572] goto L4e856e;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4e88a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e88a8.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4e88ae.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e88b2.  call temp:= `size`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4e88b8.  v2:= temp;
  #L4e88ba.  if v2 != 0 then goto L4e88d4;
  #L4e88be.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e88c2.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e88c8.  v2:= 1I;
  #L4e88ca.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4e88ce.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4e88d4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e83c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e83cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e83d2.  v0:= temp @kind object;
  #L4e83d4.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e83d8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e83de.  v0:= temp;
  #L4e83e0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e8644.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e8648.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4e864e.  @monitorenter v3
  #L4e8650.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4e8654.  if v0 != 0 then goto L4e865c;
  #L4e8658.  @monitorexit v3
  #L4e865a.  return @kind void;
  #L4e865c.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4e8662.  v0:= temp @kind object;
  #L4e8664.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e866a.  v0:= temp @kind object;
  #L4e866c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e8672.  v1:= temp;
  #L4e8674.  if v1 == 0 then goto L4e8690;
  #L4e8678.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e867e.  v1:= temp @kind object;
  #L4e8680.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4e8684.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4e8688.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4e868e.  goto L4e866c;
  #L4e8690.  v0:= 0I;
  #L4e8692.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v0 @kind object;
  #L4e8696.  @monitorexit v3
  #L4e8698.  v0:= 1I;
  #L4e869a.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e869e.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4e86a4.  return @kind void;
  #L4e86a6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e86a8.  @monitorexit v3
  #L4e86aa.  throw v0;
  catch `java.lang.Throwable` @[L4e8650..L4e8698] goto L4e86a6;
  catch `java.lang.Throwable` @[L4e86a8..L4e86aa] goto L4e86a6;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e86d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e86d4.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e86da.  v2:= temp;
  #L4e86dc.  if v2 == 0 then goto L4e8708;
  #L4e86e0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e86e4.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4e86ea.  @monitorenter v1
  #L4e86ec.  v2:= 0I;
  #L4e86ee.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v2 @kind object;
  #L4e86f2.  @monitorexit v1
  #L4e86f4.  v2:= 1I;
  #L4e86f6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4e86fa.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4e8700.  goto L4e8708;
  #L4e8702.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8704.  @monitorexit v1
  #L4e8706.  throw v2;
  #L4e8708.  return @kind void;
  catch `java.lang.Throwable` @[L4e86ee..L4e86f4] goto L4e8702;
  catch `java.lang.Throwable` @[L4e8704..L4e8706] goto L4e8702;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e8730.  @monitorenter v2
  #L4e8732.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4e8736.  if v0 != 0 then goto L4e873e;
  #L4e873a.  @monitorexit v2
  #L4e873c.  return @kind void;
  #L4e873e.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4e8744.  v0:= temp @kind object;
  #L4e8746.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e874c.  v0:= temp @kind object;
  #L4e874e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e8754.  v1:= temp;
  #L4e8756.  if v1 == 0 then goto L4e876e;
  #L4e875a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e8760.  v1:= temp @kind object;
  #L4e8762.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4e8766.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e876c.  goto L4e874e;
  #L4e876e.  @monitorexit v2
  #L4e8770.  return @kind void;
  #L4e8772.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8774.  @monitorexit v2
  #L4e8776.  throw v3;
  catch `java.lang.Throwable` @[L4e8732..L4e8776] goto L4e8772;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e8794.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e8798.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e879e.  v2:= temp;
  #L4e87a0.  if v2 == 0 then goto L4e87c2;
  #L4e87a4.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a$a`;
  #L4e87a8.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;)V` @kind direct;
  #L4e87ae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4e87b2.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4e87b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4e87bc.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e87c2.  return @kind void;
}
