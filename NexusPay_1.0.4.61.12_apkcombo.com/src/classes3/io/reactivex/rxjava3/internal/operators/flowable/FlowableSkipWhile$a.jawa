record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipWhile$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d3060.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d3066.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d306a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4d306e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipWhile$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3080.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3084.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d308a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d309c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d30a0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d30a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d30b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d30bc.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d30c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d30d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.d` @type ^`boolean` @kind boolean;
  #L4d30d8.  if v0 == 0 then goto L4d30e8;
  #L4d30dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d30e0.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d30e6.  goto L4d3118;
  #L4d30e8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d30ec.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4d30f2.  v0:= temp;
  #L4d30f4.  if v0 == 0 then goto L4d3108;
  #L4d30f8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d30fc.  v0:= 1L;
  #L4d3100.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d3106.  goto L4d3118;
  #L4d3108.  v0:= 1I;
  #L4d310a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d310e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3112.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d3118.  return @kind void;
  #L4d311a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d311c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d3122.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3126.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d312c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3130.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d3136.  return @kind void;
  catch `java.lang.Throwable` @[L4d30e8..L4d30f4] goto L4d311a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipWhile$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3154.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3158.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d315e.  v0:= temp;
  #L4d3160.  if v0 == 0 then goto L4d3172;
  #L4d3164.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d3168.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d316c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d3172.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipWhile$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3184.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3188.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d318e.  return @kind void;
}
