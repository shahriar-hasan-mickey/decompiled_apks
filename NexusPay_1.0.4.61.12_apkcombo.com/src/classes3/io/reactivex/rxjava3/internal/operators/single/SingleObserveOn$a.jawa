record `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L508a98.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L508a9e.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L508aa2.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L508aa6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L508ab8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L508abe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L508a70.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L508a76.  v0:= temp @kind object;
  #L508a78.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L508a7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L508a82.  v0:= temp;
  #L508a84.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L508ad0.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L508ad4.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L508ad8.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L508ade.  v1:= temp @kind object;
  #L508ae0.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L508ae6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L508af8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L508afe.  v1:= temp;
  #L508b00.  if v1 == 0 then goto L508b0e;
  #L508b04.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L508b08.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L508b0e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L508b20.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L508b24.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L508b28.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L508b2e.  v1:= temp @kind object;
  #L508b30.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L508b36.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L508b48.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.d` @type ^`java.lang.Throwable` @kind object;
  #L508b4c.  if v0 == 0 then goto L508b5c;
  #L508b50.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L508b54.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L508b5a.  goto L508b6a;
  #L508b5c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L508b60.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$a.c` @type ^`java.lang.Object` @kind object;
  #L508b64.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L508b6a.  return @kind void;
}
