record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription` @kind class {
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c5920.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L4c5926.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L4c592a.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c593c.  v0:= 1I;
  #L4c593e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` := v0 @kind boolean;
  #L4c5942.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c5954.  v0:= 0I;
  #L4c5956.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L4c595a.  return @kind void;
}
procedure `void` `e`(`long` v0 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4c5874.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4c5878.  if v0 == 0 then goto L4c589e;
  #L4c587c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L4c5880.  if v1 == 0 then goto L4c589a;
  #L4c5884.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c588a.  v0:= temp;
  #L4c588c.  if v0 == 0 then goto L4c5892;
  #L4c5890.  goto L4c589a;
  #L4c5892.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.clear:()V` @kind virtual;
  #L4c5898.  goto L4c589e;
  #L4c589a.  v0:= 0I;
  #L4c589c.  return v0;
  #L4c589e.  v0:= 1I;
  #L4c58a0.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4c58cc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4c58d0.  v1:= 0I;
  #L4c58d2.  if v0 != 0 then goto L4c58d8;
  #L4c58d6.  return v1 @kind object;
  #L4c58d8.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L4c58dc.  if v2 != 0 then goto L4c58e8;
  #L4c58e0.  v0:= 1I;
  #L4c58e2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4c58e6.  goto L4c58f6;
  #L4c58e8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c58ee.  v0:= temp;
  #L4c58f0.  if v0 != 0 then goto L4c58f6;
  #L4c58f4.  return v1 @kind object;
  #L4c58f6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4c58fa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c5900.  v0:= temp @kind object;
  #L4c5902.  v1:= "Iterator.next() returned a null value" @kind object;
  #L4c5906.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c590c.  v0:= temp @kind object;
  #L4c590e.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c596c.  call temp:= `validate`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c5972.  v0:= temp;
  #L4c5974.  if v0 == 0 then goto L4c59ac;
  #L4c5978.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c597e.  v0:= temp @kind wide;
  #L4c5980.  v2:= 0L;
  #L4c5984.  v4:= lcmp(v0, v2);
  #L4c5988.  if v4 != 0 then goto L4c59ac;
  #L4c598c.  v0:= 9223372036854775807L;
  #L4c5996.  v2:= lcmp(v6, v0);
  #L4c599a.  if v2 != 0 then goto L4c59a6;
  #L4c599e.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @kind virtual;
  #L4c59a4.  goto L4c59ac;
  #L4c59a6.  call `e`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @kind virtual;
  #L4c59ac.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4c58b4.  v1:= v1 ^& 1;
  #L4c58b8.  return v1;
}
