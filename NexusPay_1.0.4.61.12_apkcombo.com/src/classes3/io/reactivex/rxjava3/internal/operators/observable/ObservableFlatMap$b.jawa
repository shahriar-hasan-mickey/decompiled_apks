record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.m` @AccessFlag ;
  `java.util.Queue` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4eeeec.  v0:= 0I;
  #L4eeeee.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v0];
  #L4eeef2.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] := v1 @kind object;
  #L4eeef6.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v0];
  #L4eeefa.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] := v0 @kind object;
  #L4eeefe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4eef10.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4eef16.  v0:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4eef1a.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4eef20.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v0 @kind object;
  #L4eef24.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4eef28.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4eef2c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` := v4 @kind boolean;
  #L4eef30.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int` := v5;
  #L4eef34.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int` := v6;
  #L4eef38.  v2:= 2147483647I;
  #L4eef3e.  if v5 == v2 then goto L4eef50;
  #L4eef42.  v2:= new `java.util.ArrayDeque`;
  #L4eef46.  call `<init>`(v2, v5) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L4eef4c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` := v2 @kind object;
  #L4eef50.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4eef54.  v3:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4eef58.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4eef5e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4eef62.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eed04.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eed08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eed0e.  v0:= temp @kind object;
  #L4eed10.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L4eed14.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4eed18.  v2:= 0I;
  #L4eed1a.  if v0 != v1 then goto L4eed26;
  #L4eed1e.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L4eed24.  return v2;
  #L4eed26.  v1:= length @variable v0;
  #L4eed28.  v3:= v1 + 1;
  #L4eed2c.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v3];
  #L4eed30.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4eed36.  v3[v1]:= v5 @kind object;
  #L4eed3a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eed3e.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4eed44.  v0:= temp;
  #L4eed46.  if v0 == 0 then goto L4eed04;
  #L4eed4a.  v5:= 1I;
  #L4eed4c.  return v5;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4eed60.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4eed64.  v1:= 1I;
  #L4eed66.  if v0 == 0 then goto L4eed6c;
  #L4eed6a.  return v1;
  #L4eed6c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eed70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eed76.  v0:= temp @kind object;
  #L4eed78.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4eed7c.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4eed80.  if v2 != 0 then goto L4eed9e;
  #L4eed84.  if v0 == 0 then goto L4eed9e;
  #L4eed88.  call temp:= `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L4eed8e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eed92.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eed96.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eed9c.  return v1;
  #L4eed9e.  v0:= 0I;
  #L4eeda0.  return v0;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eedb4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eedb8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eedbe.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eedc2.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4eedc6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eedcc.  v0:= temp @kind object;
  #L4eedce.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L4eedd2.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4eedd6.  v2:= 0I;
  #L4eedd8.  if v0 == v1 then goto L4eedf6;
  #L4eeddc.  v1:= length @variable v0;
  #L4eedde.  if v2 >= v1 then goto L4eedf2;
  #L4eede2.  v3:= v0[v2] @kind object;
  #L4eede6.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L4eedec.  v2:= v2 + 1;
  #L4eedf0.  goto L4eedde;
  #L4eedf2.  v0:= 1I;
  #L4eedf4.  return v0;
  #L4eedf6.  return v2;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4eefa4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eefaa.  v0:= temp;
  #L4eefac.  if v0 != 0 then goto L4eefb6;
  #L4eefb0.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L4eefb6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eef74.  v0:= 1I;
  #L4eef76.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4eef7a.  call temp:= `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L4eef80.  v0:= temp;
  #L4eef82.  if v0 == 0 then goto L4eef90;
  #L4eef86.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eef8a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4eef90.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4eefc8.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eefcc.  v1:= 1I;
  #L4eefce.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4eefd4.  v2:= temp;
  #L4eefd6.  if v2 == 0 then goto L4eefdc;
  #L4eefda.  return @kind void;
  #L4eefdc.  v2:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4eefe0.  v3:= 0I;
  #L4eefe2.  v4:= 0I;
  #L4eefe4.  if v2 == 0 then goto L4ef010;
  #L4eefe8.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4eefee.  v5:= temp;
  #L4eeff0.  if v5 == 0 then goto L4eeff6;
  #L4eeff4.  return @kind void;
  #L4eeff6.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4eeffc.  v5:= temp @kind object;
  #L4eeffe.  if v5 != 0 then goto L4ef004;
  #L4ef002.  goto L4ef010;
  #L4ef004.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ef00a.  v4:= v4 + 1;
  #L4ef00e.  goto L4eefe8;
  #L4ef010.  v2:= 2147483647I;
  #L4ef016.  if v4 == 0 then goto L4ef02a;
  #L4ef01a.  v3:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4ef01e.  if v3 == v2 then goto L4eefce;
  #L4ef022.  call `h`(v12, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.h:(I)V` @kind virtual;
  #L4ef028.  goto L4eefce;
  #L4ef02a.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4ef02e.  v6:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ef032.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef036.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ef03c.  v7:= temp @kind object;
  #L4ef03e.  v7:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v7 @kind object;
  #L4ef042.  v8:= length @variable v7;
  #L4ef044.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4ef048.  if v9 == v2 then goto L4ef064;
  #L4ef04c.  @monitorenter v12
  #L4ef04e.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4ef052.  call temp:= `size`(v9) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L4ef058.  v9:= temp;
  #L4ef05a.  @monitorexit v12
  #L4ef05c.  goto L4ef066;
  #L4ef05e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef060.  @monitorexit v12
  #L4ef062.  throw v0;
  #L4ef064.  v9:= 0I;
  #L4ef066.  if v5 == 0 then goto L4ef092;
  #L4ef06a.  if v6 == 0 then goto L4ef07a;
  #L4ef06e.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ef074.  v5:= temp;
  #L4ef076.  if v5 == 0 then goto L4ef092;
  #L4ef07a.  if v8 != 0 then goto L4ef092;
  #L4ef07e.  if v9 != 0 then goto L4ef092;
  #L4ef082.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ef086.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ef08a.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4ef090.  return @kind void;
  #L4ef092.  if v8 == 0 then goto L4ef15c;
  #L4ef096.  v5:= v8 + -1;
  #L4ef09a.  v6:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.m` @type ^`int`;
  #L4ef09e.  call temp:= `min`(v5, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4ef0a4.  v5:= temp;
  #L4ef0a6.  v6:= 0I;
  #L4ef0a8.  if v6 >= v8 then goto L4ef158;
  #L4ef0ac.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4ef0b2.  v9:= temp;
  #L4ef0b4.  if v9 == 0 then goto L4ef0ba;
  #L4ef0b8.  return @kind void;
  #L4ef0ba.  v9:= v7[v5] @kind object;
  #L4ef0be.  v10:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ef0c2.  if v10 == 0 then goto L4ef122;
  #L4ef0c6.  call temp:= `poll`(v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ef0cc.  v11:= temp @kind object;
  #L4ef0ce.  if v11 != 0 then goto L4ef0d4;
  #L4ef0d2.  goto L4ef122;
  #L4ef0d4.  call `onNext`(v0, v11) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ef0da.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4ef0e0.  v11:= temp;
  #L4ef0e2.  if v11 == 0 then goto L4ef0c6;
  #L4ef0e6.  return @kind void;
  #L4ef0e8.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef0ea.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ef0f0.  call `a`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L4ef0f6.  v11:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ef0fa.  call temp:= `tryAddThrowableOrReport`(v11, v10) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ef100.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4ef106.  v10:= temp;
  #L4ef108.  if v10 == 0 then goto L4ef10e;
  #L4ef10c.  return @kind void;
  #L4ef10e.  call `f`(v12, v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L4ef114.  v4:= v4 + 1;
  #L4ef118.  v5:= v5 + 1;
  #L4ef11c.  if v5 != v8 then goto L4ef152;
  #L4ef120.  goto L4ef150;
  #L4ef122.  v10:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.b` @type ^`boolean` @kind boolean;
  #L4ef126.  v11:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ef12a.  if v10 == 0 then goto L4ef148;
  #L4ef12e.  if v11 == 0 then goto L4ef13e;
  #L4ef132.  call temp:= `isEmpty`(v11) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ef138.  v10:= temp;
  #L4ef13a.  if v10 == 0 then goto L4ef148;
  #L4ef13e.  call `f`(v12, v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L4ef144.  v4:= v4 + 1;
  #L4ef148.  v5:= v5 + 1;
  #L4ef14c.  if v5 != v8 then goto L4ef152;
  #L4ef150.  v5:= 0I;
  #L4ef152.  v6:= v6 + 1;
  #L4ef156.  goto L4ef0a8;
  #L4ef158.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.m` @type ^`int` := v5;
  #L4ef15c.  if v4 == 0 then goto L4ef172;
  #L4ef160.  v3:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4ef164.  if v3 == v2 then goto L4eefce;
  #L4ef168.  call `h`(v12, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.h:(I)V` @kind virtual;
  #L4ef16e.  goto L4eefce;
  #L4ef172.  v1:= -v1 @kind int;
  #L4ef174.  call temp:= `addAndGet`(v12, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ef17a.  v1:= temp;
  #L4ef17c.  if v1 != 0 then goto L4eefce;
  #L4ef180.  return @kind void;
  catch `java.lang.Throwable` @[L4ef04e..L4ef062] goto L4ef05e;
  catch `java.lang.Throwable` @[L4ef0c6..L4ef0ce] goto L4ef0e8;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ef2f4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef2f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ef2fe.  v0:= temp @kind object;
  #L4ef300.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L4ef304.  v1:= length @variable v0;
  #L4ef306.  v2:= -1I;
  #L4ef308.  v3:= 0I;
  #L4ef30a.  v4:= 0I;
  #L4ef30c.  if v4 >= v1 then goto L4ef322;
  #L4ef310.  v5:= v0[v4] @kind object;
  #L4ef314.  if v5 != v7 then goto L4ef31c;
  #L4ef318.  v2:= v4;
  #L4ef31a.  goto L4ef322;
  #L4ef31c.  v4:= v4 + 1;
  #L4ef320.  goto L4ef30c;
  #L4ef322.  if v2 >= 0 then goto L4ef328;
  #L4ef326.  return @kind void;
  #L4ef328.  v4:= 1I;
  #L4ef32a.  if v1 != v4 then goto L4ef334;
  #L4ef32e.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4ef332.  goto L4ef352;
  #L4ef334.  v5:= v1 + -1;
  #L4ef338.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v5];
  #L4ef33c.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ef342.  v3:= v2 + 1;
  #L4ef346.  v1:= v1 - v2 @kind int;
  #L4ef348.  v1:= v1 - v4 @kind int;
  #L4ef34a.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ef350.  v1:= v5 @kind object;
  #L4ef352.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef356.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ef35c.  v0:= temp;
  #L4ef35e.  if v0 == 0 then goto L4ef2f4;
  #L4ef362.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v5 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ef374.  v0:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4ef378.  if v0 == 0 then goto L4ef3d8;
  #L4ef37c.  v6:= (`io.reactivex.rxjava3.functions.Supplier`) v6 @kind object;
  #L4ef380.  call temp:= `j`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.j:(Lio/reactivex/rxjava3/functions/Supplier;)Z` @kind virtual;
  #L4ef386.  v6:= temp;
  #L4ef388.  if v6 == 0 then goto L4ef402;
  #L4ef38c.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4ef390.  v0:= 2147483647I;
  #L4ef396.  if v6 == v0 then goto L4ef402;
  #L4ef39a.  v6:= 0I;
  #L4ef39c.  @monitorenter v5
  #L4ef39e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4ef3a2.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ef3a8.  v0:= temp @kind object;
  #L4ef3aa.  v0:= (`io.reactivex.rxjava3.core.ObservableSource`) v0 @kind object;
  #L4ef3ae.  v1:= 1I;
  #L4ef3b0.  if v0 != 0 then goto L4ef3c0;
  #L4ef3b4.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int`;
  #L4ef3b8.  v6:= v6 - v1 @kind int;
  #L4ef3ba.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int` := v6;
  #L4ef3be.  v6:= 1I;
  #L4ef3c0.  @monitorexit v5
  #L4ef3c2.  if v6 == 0 then goto L4ef3ce;
  #L4ef3c6.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4ef3cc.  goto L4ef402;
  #L4ef3ce.  v6:= v0 @kind object;
  #L4ef3d0.  goto L4ef374;
  #L4ef3d2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef3d4.  @monitorexit v5
  #L4ef3d6.  throw v6;
  #L4ef3d8.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`;
  #L4ef3dc.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.l` @type ^`long` @kind wide;
  #L4ef3e0.  v3:= 1L;
  #L4ef3e4.  v3:= v3 + v1 @kind long;
  #L4ef3e6.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.l` @type ^`long` := v3 @kind wide;
  #L4ef3ea.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;J)V` @kind direct;
  #L4ef3f0.  call temp:= `a`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)Z` @kind virtual;
  #L4ef3f6.  v1:= temp;
  #L4ef3f8.  if v1 == 0 then goto L4ef402;
  #L4ef3fc.  call `subscribe`(v6, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4ef402.  return @kind void;
  catch `java.lang.Throwable` @[L4ef39e..L4ef3c2] goto L4ef3d2;
  catch `java.lang.Throwable` @[L4ef3d4..L4ef3d6] goto L4ef3d2;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.h:(I)V` @AccessFlag  {
    temp;
    v0;

  #L4ef428.  v0:= v2 + -1;
  #L4ef42c.  if v2 == 0 then goto L4ef468;
  #L4ef430.  @monitorenter v1
  #L4ef432.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4ef436.  call temp:= `poll`(v2) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ef43c.  v2:= temp @kind object;
  #L4ef43e.  v2:= (`io.reactivex.rxjava3.core.ObservableSource`) v2 @kind object;
  #L4ef442.  if v2 != 0 then goto L4ef456;
  #L4ef446.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int`;
  #L4ef44a.  v2:= v2 + -1;
  #L4ef44e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int` := v2;
  #L4ef452.  @monitorexit v1
  #L4ef454.  goto L4ef45e;
  #L4ef456.  @monitorexit v1
  #L4ef458.  call `g`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind virtual;
  #L4ef45e.  v2:= v0;
  #L4ef460.  goto L4ef428;
  #L4ef462.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef464.  @monitorexit v1
  #L4ef466.  throw v2;
  #L4ef468.  return @kind void;
  catch `java.lang.Throwable` @[L4ef432..L4ef458] goto L4ef462;
  catch `java.lang.Throwable` @[L4ef464..L4ef466] goto L4ef462;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v2 @kind this, `java.lang.Object` v3 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.i:(Ljava/lang/Object;Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ef490.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ef496.  v0:= temp;
  #L4ef498.  if v0 != 0 then goto L4ef4c4;
  #L4ef49c.  v0:= 0I;
  #L4ef49e.  v1:= 1I;
  #L4ef4a0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4ef4a6.  v0:= temp;
  #L4ef4a8.  if v0 == 0 then goto L4ef4c4;
  #L4ef4ac.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ef4b0.  call `onNext`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ef4b6.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ef4bc.  v3:= temp;
  #L4ef4be.  if v3 != 0 then goto L4ef4f2;
  #L4ef4c2.  return @kind void;
  #L4ef4c4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ef4c8.  if v0 != 0 then goto L4ef4de;
  #L4ef4cc.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4ef4d0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int`;
  #L4ef4d4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4ef4da.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4ef4de.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ef4e4.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ef4ea.  v3:= temp;
  #L4ef4ec.  if v3 == 0 then goto L4ef4f2;
  #L4ef4f0.  return @kind void;
  #L4ef4f2.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L4ef4f8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eee08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4eee0c.  return v0;
}
procedure `boolean` `j`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v4 @kind this, `io.reactivex.rxjava3.functions.Supplier` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.j:(Lio/reactivex/rxjava3/functions/Supplier;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eee20.  v0:= 1I;
  #L4eee22.  call temp:= `get`(v5) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4eee28.  v5:= temp @kind object;
  #L4eee2a.  if v5 != 0 then goto L4eee30;
  #L4eee2e.  return v0;
  #L4eee30.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4eee36.  v1:= temp;
  #L4eee38.  v2:= 0I;
  #L4eee3a.  if v1 != 0 then goto L4eee62;
  #L4eee3e.  call temp:= `compareAndSet`(v4, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4eee44.  v1:= temp;
  #L4eee46.  if v1 == 0 then goto L4eee62;
  #L4eee4a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eee4e.  call `onNext`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4eee54.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eee5a.  v5:= temp;
  #L4eee5c.  if v5 != 0 then goto L4eeeae;
  #L4eee60.  return v0;
  #L4eee62.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4eee66.  if v1 != 0 then goto L4eee9a;
  #L4eee6a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4eee6e.  v3:= 2147483647I;
  #L4eee74.  if v1 != v3 then goto L4eee88;
  #L4eee78.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4eee7c.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int`;
  #L4eee80.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4eee86.  goto L4eee96;
  #L4eee88.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4eee8c.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4eee90.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4eee96.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4eee9a.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4eeea0.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eeea6.  v5:= temp;
  #L4eeea8.  if v5 == 0 then goto L4eeeae;
  #L4eeeac.  return v2;
  #L4eeeae.  call `e`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L4eeeb4.  return v0;
  #L4eeeb6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eeeb8.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eeebe.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eeec2.  call temp:= `tryAddThrowableOrReport`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eeec8.  call `d`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4eeece.  return v0;
  catch `java.lang.Throwable` @[L4eee22..L4eee2a] goto L4eeeb6;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef1ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4ef1b0.  if v0 == 0 then goto L4ef1b6;
  #L4ef1b4.  return @kind void;
  #L4ef1b6.  v0:= 1I;
  #L4ef1b8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4ef1bc.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4ef1c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef1d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4ef1d8.  if v0 == 0 then goto L4ef1e4;
  #L4ef1dc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ef1e2.  return @kind void;
  #L4ef1e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ef1e8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ef1ee.  v2:= temp;
  #L4ef1f0.  if v2 == 0 then goto L4ef200;
  #L4ef1f4.  v2:= 1I;
  #L4ef1f6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` := v2 @kind boolean;
  #L4ef1fa.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4ef200.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef214.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4ef218.  if v0 == 0 then goto L4ef21e;
  #L4ef21c.  return @kind void;
  #L4ef21e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ef222.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ef228.  v3:= temp @kind object;
  #L4ef22a.  v0:= "The mapper returned a null ObservableSource" @kind object;
  #L4ef22e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ef234.  v3:= temp @kind object;
  #L4ef236.  v3:= (`io.reactivex.rxjava3.core.ObservableSource`) v3 @kind object;
  #L4ef23a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4ef23e.  v1:= 2147483647I;
  #L4ef244.  if v0 == v1 then goto L4ef27a;
  #L4ef248.  @monitorenter v2
  #L4ef24a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int`;
  #L4ef24e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4ef252.  if v0 != v1 then goto L4ef264;
  #L4ef256.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4ef25a.  call temp:= `offer`(v0, v3) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ef260.  @monitorexit v2
  #L4ef262.  return @kind void;
  #L4ef264.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int`;
  #L4ef268.  v0:= v0 + 1;
  #L4ef26c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int` := v0;
  #L4ef270.  @monitorexit v2
  #L4ef272.  goto L4ef27a;
  #L4ef274.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef276.  @monitorexit v2
  #L4ef278.  throw v3;
  #L4ef27a.  call `g`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind virtual;
  #L4ef280.  return @kind void;
  #L4ef282.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef284.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ef28a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ef28e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ef294.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ef29a.  return @kind void;
  catch `java.lang.Throwable` @[L4ef21e..L4ef23a] goto L4ef282;
  catch `java.lang.Throwable` @[L4ef24a..L4ef278] goto L4ef274;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef2c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ef2c8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ef2ce.  v0:= temp;
  #L4ef2d0.  if v0 == 0 then goto L4ef2e2;
  #L4ef2d4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ef2d8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ef2dc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ef2e2.  return @kind void;
}
