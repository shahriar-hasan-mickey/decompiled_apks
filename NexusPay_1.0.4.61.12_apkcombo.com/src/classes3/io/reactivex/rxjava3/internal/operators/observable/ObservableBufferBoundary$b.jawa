record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e8910.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e8916.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` := v1 @kind object;
  #L4e891a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`long` := v2 @kind wide;
  #L4e891e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4e8930.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e8936.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e88e8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e88ee.  v0:= temp @kind object;
  #L4e88f0.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e88f4.  if v0 != v1 then goto L4e88fc;
  #L4e88f8.  v0:= 1I;
  #L4e88fa.  goto L4e88fe;
  #L4e88fc.  v0:= 0I;
  #L4e88fe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e8948.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e894e.  v0:= temp @kind object;
  #L4e8950.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e8954.  if v0 == v1 then goto L4e896c;
  #L4e8958.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4e895e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L4e8962.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`long` @kind wide;
  #L4e8966.  call `b`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;J)V` @kind virtual;
  #L4e896c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e8980.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e8986.  v0:= temp @kind object;
  #L4e8988.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e898c.  if v0 == v1 then goto L4e89a2;
  #L4e8990.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4e8996.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L4e899a.  call `a`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L4e89a0.  goto L4e89a8;
  #L4e89a2.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e89a8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e89bc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e89c2.  v3:= temp @kind object;
  #L4e89c4.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4e89c8.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e89cc.  if v3 == v0 then goto L4e89ea;
  #L4e89d0.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4e89d6.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e89dc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L4e89e0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`long` @kind wide;
  #L4e89e4.  call `b`(v3, v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;J)V` @kind virtual;
  #L4e89ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e89fc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e8a02.  return @kind void;
}
