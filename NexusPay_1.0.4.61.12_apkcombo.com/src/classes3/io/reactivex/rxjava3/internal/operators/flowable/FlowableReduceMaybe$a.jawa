record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ce14c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ce152.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4ce156.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4ce15a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce16c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce170.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ce176.  v0:= 1I;
  #L4ce178.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ce17c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce134.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L4ce138.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce190.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L4ce194.  if v0 == 0 then goto L4ce19a;
  #L4ce198.  return @kind void;
  #L4ce19a.  v0:= 1I;
  #L4ce19c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ce1a0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L4ce1a4.  if v0 == 0 then goto L4ce1b4;
  #L4ce1a8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ce1ac.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4ce1b2.  goto L4ce1be;
  #L4ce1b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ce1b8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4ce1be.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce1d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L4ce1d4.  if v0 == 0 then goto L4ce1e0;
  #L4ce1d8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ce1de.  return @kind void;
  #L4ce1e0.  v0:= 1I;
  #L4ce1e2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ce1e6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ce1ea.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ce1f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce204.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L4ce208.  if v0 == 0 then goto L4ce20e;
  #L4ce20c.  return @kind void;
  #L4ce20e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L4ce212.  if v0 != 0 then goto L4ce21c;
  #L4ce216.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4ce21a.  goto L4ce252;
  #L4ce21c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4ce220.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ce226.  v3:= temp @kind object;
  #L4ce228.  v0:= "The reducer returned a null value" @kind object;
  #L4ce22c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ce232.  v3:= temp @kind object;
  #L4ce234.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4ce238.  goto L4ce252;
  #L4ce23a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ce23c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ce242.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce246.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ce24c.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ce252.  return @kind void;
  catch `java.lang.Throwable` @[L4ce21c..L4ce238] goto L4ce23a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduceMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce270.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce274.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ce27a.  v0:= temp;
  #L4ce27c.  if v0 == 0 then goto L4ce29e;
  #L4ce280.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4ce284.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ce288.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ce28e.  v0:= 9223372036854775807L;
  #L4ce298.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ce29e.  return @kind void;
}
