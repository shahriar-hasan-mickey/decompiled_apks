record `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.core.Scheduler$Worker` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4caa48.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4caa4e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v1 @kind object;
  #L4caa52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` := v2 @kind boolean;
  #L4caa56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int` := v3;
  #L4caa5a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4caa5e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4caa64.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4caa68.  v1:= v3 ^> 2;
  #L4caa6c.  v3:= v3 - v1 @kind int;
  #L4caa6e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int` := v3;
  #L4caa72.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4caa84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4caa88.  if v0 == 0 then goto L4caa8e;
  #L4caa8c.  return @kind void;
  #L4caa8e.  v0:= 1I;
  #L4caa90.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4caa94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4caa98.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4caa9e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4caaa2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4caaa8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` @kind boolean;
  #L4caaac.  if v0 != 0 then goto L4caac6;
  #L4caab0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4caab6.  v0:= temp;
  #L4caab8.  if v0 != 0 then goto L4caac6;
  #L4caabc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4caac0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4caac6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4caad8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4caadc.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4caae2.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4ca968.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4ca96c.  v1:= 1I;
  #L4ca96e.  if v0 == 0 then goto L4ca97a;
  #L4ca972.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L4ca978.  return v1;
  #L4ca97a.  if v3 == 0 then goto L4ca9ee;
  #L4ca97e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` @kind boolean;
  #L4ca982.  if v3 == 0 then goto L4ca9b0;
  #L4ca986.  if v4 == 0 then goto L4ca9ee;
  #L4ca98a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4ca98e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4ca992.  if v3 == 0 then goto L4ca99e;
  #L4ca996.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ca99c.  goto L4ca9a4;
  #L4ca99e.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ca9a4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ca9a8.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca9ae.  return v1;
  #L4ca9b0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4ca9b4.  if v3 == 0 then goto L4ca9d4;
  #L4ca9b8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4ca9bc.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L4ca9c2.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ca9c8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ca9cc.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca9d2.  return v1;
  #L4ca9d4.  if v4 == 0 then goto L4ca9ee;
  #L4ca9d8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4ca9dc.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ca9e2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ca9e6.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ca9ec.  return v1;
  #L4ca9ee.  v3:= 0I;
  #L4ca9f0.  return v3;
}
procedure `void` `f`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `g`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `h`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L4cac24.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cac2a.  v0:= temp;
  #L4cac2c.  if v0 == 0 then goto L4cac32;
  #L4cac30.  return @kind void;
  #L4cac32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cac36.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4cac3c.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4caa04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4caa08.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4caa0e.  v0:= temp;
  #L4caa10.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4caaf4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4caaf8.  if v0 != 0 then goto L4cab08;
  #L4caafc.  v0:= 1I;
  #L4caafe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4cab02.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L4cab08.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4cab1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cab20.  if v0 == 0 then goto L4cab2c;
  #L4cab24.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cab2a.  return @kind void;
  #L4cab2c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4cab30.  v2:= 1I;
  #L4cab32.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4cab36.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L4cab3c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4cab50.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cab54.  if v0 == 0 then goto L4cab5a;
  #L4cab58.  return @kind void;
  #L4cab5a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L4cab5e.  v1:= 2I;
  #L4cab60.  if v0 != v1 then goto L4cab6c;
  #L4cab64.  call `i`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L4cab6a.  return @kind void;
  #L4cab6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cab70.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cab76.  v3:= temp;
  #L4cab78.  if v3 != 0 then goto L4cab9e;
  #L4cab7c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cab80.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cab86.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4cab8a.  v0:= "Queue is full?!" @kind object;
  #L4cab8e.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cab94.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4cab98.  v3:= 1I;
  #L4cab9a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v3 @kind boolean;
  #L4cab9e.  call `i`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L4caba4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4cabb8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4cabbe.  v0:= temp;
  #L4cabc0.  if v0 == 0 then goto L4cabd4;
  #L4cabc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cabc8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cabce.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L4cabd4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4caa24.  v0:= 2I;
  #L4caa26.  v2:= v2 ^& v0 @kind int;
  #L4caa28.  if v2 == 0 then goto L4caa34;
  #L4caa2c.  v2:= 1I;
  #L4caa2e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` := v2 @kind boolean;
  #L4caa32.  return v0;
  #L4caa34.  v2:= 0I;
  #L4caa36.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4cabe8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` @kind boolean;
  #L4cabec.  if v0 == 0 then goto L4cabf8;
  #L4cabf0.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @kind virtual;
  #L4cabf6.  goto L4cac10;
  #L4cabf8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L4cabfc.  v1:= 1I;
  #L4cabfe.  if v0 != v1 then goto L4cac0a;
  #L4cac02.  call `h`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @kind virtual;
  #L4cac08.  goto L4cac10;
  #L4cac0a.  call `f`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @kind virtual;
  #L4cac10.  return @kind void;
}
