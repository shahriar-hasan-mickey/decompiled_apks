record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d0e7c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d0e82.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d0e86.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d0e8c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4d0e90.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d0e94.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d0e9a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v0 @kind object;
  #L4d0e9e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d0ea2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.b` @type ^`long` := v3 @kind wide;
  #L4d0ea6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4d0eaa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler` := v6 @kind object;
  #L4d0eae.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4d0ee4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d0ee8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d0eee.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d0f00.  v0:= 0I;
  #L4d0f02.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d0f08.  v0:= temp @kind object;
  #L4d0f0a.  if v0 == 0 then goto L4d0f5e;
  #L4d0f0e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d0f12.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d0f18.  v1:= temp @kind wide;
  #L4d0f1a.  v3:= 0L;
  #L4d0f1e.  v5:= lcmp(v1, v3);
  #L4d0f22.  if v5 == 0 then goto L4d0f40;
  #L4d0f26.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0f2a.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d0f30.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d0f34.  v1:= 1L;
  #L4d0f38.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d0f3e.  goto L4d0f5e;
  #L4d0f40.  call `cancel`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.cancel:()V` @kind virtual;
  #L4d0f46.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0f4a.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d0f4e.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L4d0f52.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d0f58.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0f5e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0ec0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L4d0ec6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0eca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0ed0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4d0f70.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L4d0f76.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.b:()V` @kind virtual;
  #L4d0f7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0f90.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L4d0f96.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0f9a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0fa0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4d0fb4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d0fba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4d0fcc.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0fd0.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d0fd6.  v0:= temp;
  #L4d0fd8.  if v0 == 0 then goto L4d101c;
  #L4d0fdc.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L4d0fe0.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0fe4.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d0fea.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d0fee.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d0ff2.  v5:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.b` @type ^`long` @kind wide;
  #L4d0ff6.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d0ffa.  v2:= v8 @kind object;
  #L4d0ffc.  v3:= v5 @kind wide;
  #L4d0ffe.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d1004.  v1:= temp @kind object;
  #L4d1006.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d100c.  v0:= 9223372036854775807L;
  #L4d1016.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d101c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1030.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d1036.  v0:= temp;
  #L4d1038.  if v0 == 0 then goto L4d1046;
  #L4d103c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1040.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d1046.  return @kind void;
}
