record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$d` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d5e48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d5e4e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d5e52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` := v2 @kind wide;
  #L4d5e56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4d5e5a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4d5e5e.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d5e62.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d5e68.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4d5e6c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d5e70.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d5e76.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d5e7a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d5e7e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d5e84.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d5e88.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d5fec.  v0:= 9223372036854775807L;
  #L4d5ff6.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5ffc.  v4:= temp;
  #L4d5ffe.  if v4 == 0 then goto L4d603a;
  #L4d6002.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d6006.  call temp:= `cancel`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d600c.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6010.  v5:= new `java.util.concurrent.TimeoutException`;
  #L4d6014.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L4d6018.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d601c.  call temp:= `timeoutMessage`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L4d6022.  v0:= temp @kind object;
  #L4d6024.  call `<init>`(v5, v0) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d602a.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6030.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d6034.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d603a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d606c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d6070.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d6074.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$e`;
  #L4d6078.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$e;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$d;)V` @kind direct;
  #L4d607e.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L4d6082.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d6086.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d608c.  v5:= temp @kind object;
  #L4d608e.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d6094.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5e9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5ea0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d5ea6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5eaa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5eb0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d5ec4.  v0:= 9223372036854775807L;
  #L4d5ece.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5ed4.  v2:= temp @kind wide;
  #L4d5ed6.  v4:= lcmp(v2, v0);
  #L4d5eda.  if v4 == 0 then goto L4d5efc;
  #L4d5ede.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5ee2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5ee8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5eec.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d5ef2.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5ef6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5efc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d5f10.  v0:= 9223372036854775807L;
  #L4d5f1a.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5f20.  v2:= temp @kind wide;
  #L4d5f22.  v4:= lcmp(v2, v0);
  #L4d5f26.  if v4 == 0 then goto L4d5f4a;
  #L4d5f2a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5f2e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5f34.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5f38.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5f3e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5f42.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5f48.  goto L4d5f50;
  #L4d5f4a.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5f50.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d5f64.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d5f6a.  v0:= temp @kind wide;
  #L4d5f6c.  v2:= 9223372036854775807L;
  #L4d5f76.  v4:= lcmp(v0, v2);
  #L4d5f7a.  if v4 == 0 then goto L4d5fb8;
  #L4d5f7e.  v2:= 1L;
  #L4d5f82.  v2:= v2 + v0 @kind long;
  #L4d5f84.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5f8a.  v0:= temp;
  #L4d5f8c.  if v0 != 0 then goto L4d5f92;
  #L4d5f90.  goto L4d5fb8;
  #L4d5f92.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5f96.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d5f9c.  v0:= temp @kind object;
  #L4d5f9e.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d5fa2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5fa8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5fac.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d5fb2.  call `c`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.c:(J)V` @kind virtual;
  #L4d5fb8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d5fcc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5fd0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5fd4.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d5fda.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d604c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d6050.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d6054.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4d605a.  return @kind void;
}
