record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Supplier;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4baeac.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4baeb0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4baeb6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4baebc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4baec0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` := v4 @kind wide;
  #L4baec4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` := v6 @kind wide;
  #L4baec8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L4baecc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v9 @kind object;
  #L4baed0.  v2:= new `java.util.LinkedList`;
  #L4baed4.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4baeda.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` := v2 @kind object;
  #L4baede.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.b:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4baef0.  call `fastPathOrderedEmitMax`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4baef6.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4bae90.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bae96.  v1:= 1I;
  #L4bae98.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bae70.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4bae74.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L4bae7a.  v1:= temp;
  #L4bae7c.  return v1;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L4baf3c.  @monitorenter v1
  #L4baf3e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L4baf42.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4baf48.  @monitorexit v1
  #L4baf4a.  return @kind void;
  #L4baf4c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4baf4e.  @monitorexit v1
  #L4baf50.  throw v0;
  catch `java.lang.Throwable` @[L4baf3e..L4baf50] goto L4baf4c;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4baf08.  v0:= 1I;
  #L4baf0a.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4baf0e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4baf12.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4baf18.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4baf1c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4baf22.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L4baf28.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4baf70.  @monitorenter v4
  #L4baf72.  v0:= new `java.util.ArrayList`;
  #L4baf76.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L4baf7a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4baf80.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L4baf84.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4baf8a.  @monitorexit v4
  #L4baf8c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4baf92.  v0:= temp @kind object;
  #L4baf94.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4baf9a.  v1:= temp;
  #L4baf9c.  if v1 == 0 then goto L4bafb8;
  #L4bafa0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4bafa6.  v1:= temp @kind object;
  #L4bafa8.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4bafac.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4bafb0.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bafb6.  goto L4baf94;
  #L4bafb8.  v0:= 1I;
  #L4bafba.  v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4bafbe.  call temp:= `enter`(v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4bafc4.  v0:= temp;
  #L4bafc6.  if v0 == 0 then goto L4bafde;
  #L4bafca.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4bafce.  v1:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bafd2.  v2:= 0I;
  #L4bafd4.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bafd8.  call `drainMaxLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L4bafde.  return @kind void;
  #L4bafe0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bafe2.  @monitorexit v4
  #L4bafe4.  throw v0;
  catch `java.lang.Throwable` @[L4baf72..L4baf8c] goto L4bafe0;
  catch `java.lang.Throwable` @[L4bafe2..L4bafe4] goto L4bafe0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb00c.  v0:= 1I;
  #L4bb00e.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4bb012.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bb016.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bb01c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L4bb022.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bb026.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bb02c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb040.  @monitorenter v2
  #L4bb042.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L4bb046.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4bb04c.  v0:= temp @kind object;
  #L4bb04e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4bb054.  v1:= temp;
  #L4bb056.  if v1 == 0 then goto L4bb06e;
  #L4bb05a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4bb060.  v1:= temp @kind object;
  #L4bb062.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4bb066.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bb06c.  goto L4bb04e;
  #L4bb06e.  @monitorexit v2
  #L4bb070.  return @kind void;
  #L4bb072.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb074.  @monitorexit v2
  #L4bb076.  throw v3;
  catch `java.lang.Throwable` @[L4bb042..L4bb076] goto L4bb072;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v10 @kind this, `org.reactivestreams.Subscription` v11 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4bb094.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bb098.  call temp:= `validate`(v0, v11) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4bb09e.  v0:= temp;
  #L4bb0a0.  if v0 != 0 then goto L4bb0a6;
  #L4bb0a4.  return @kind void;
  #L4bb0a6.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` := v11 @kind object;
  #L4bb0aa.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4bb0ae.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bb0b4.  v0:= temp @kind object;
  #L4bb0b6.  v1:= "The supplied buffer is null" @kind object;
  #L4bb0ba.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bb0c0.  v0:= temp @kind object;
  #L4bb0c2.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4bb0c6.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L4bb0ca.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bb0d0.  v1:= v10.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bb0d4.  call `onSubscribe`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bb0da.  v1:= 9223372036854775807L;
  #L4bb0e4.  call `request`(v11, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bb0ea.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bb0ee.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` @kind wide;
  #L4bb0f2.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4bb0f6.  v4:= v10 @kind object;
  #L4bb0f8.  v5:= v7 @kind wide;
  #L4bb0fa.  call temp:= `schedulePeriodically`(v3, v4, v5, v7, v9) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4bb100.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bb104.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L4bb108.  call `<init>`(v1, v10, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L4bb10e.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L4bb112.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4bb116.  call temp:= `schedule`(v11, v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4bb11c.  return @kind void;
  #L4bb11e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb120.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bb126.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bb12a.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bb130.  call `cancel`(v11) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bb136.  v11:= v10.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bb13a.  call `error`(v0, v11) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4bb140.  return @kind void;
  catch `java.lang.Throwable` @[L4bb0aa..L4bb0c6] goto L4bb11e;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4bb160.  call `requested`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4bb166.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bb178.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4bb17c.  if v0 == 0 then goto L4bb182;
  #L4bb180.  return @kind void;
  #L4bb182.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4bb186.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bb18c.  v0:= temp @kind object;
  #L4bb18e.  v1:= "The supplied buffer is null" @kind object;
  #L4bb192.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bb198.  v0:= temp @kind object;
  #L4bb19a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4bb19e.  @monitorenter v5
  #L4bb1a0.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4bb1a4.  if v1 == 0 then goto L4bb1ac;
  #L4bb1a8.  @monitorexit v5
  #L4bb1aa.  return @kind void;
  #L4bb1ac.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L4bb1b0.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bb1b6.  @monitorexit v5
  #L4bb1b8.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bb1bc.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L4bb1c0.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L4bb1c6.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L4bb1ca.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4bb1ce.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4bb1d4.  return @kind void;
  #L4bb1d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb1d8.  @monitorexit v5
  #L4bb1da.  throw v0;
  #L4bb1dc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb1de.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bb1e4.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @kind virtual;
  #L4bb1ea.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bb1ee.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bb1f4.  return @kind void;
  catch `java.lang.Throwable` @[L4bb182..L4bb19e] goto L4bb1dc;
  catch `java.lang.Throwable` @[L4bb1a0..L4bb1b8] goto L4bb1d6;
  catch `java.lang.Throwable` @[L4bb1d8..L4bb1da] goto L4bb1d6;
}
