record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableEmitter` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4bf298.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bf29e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` := v2 @kind object;
  #L4bf2a2.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4bf2a6.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4bf2ac.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4bf2b0.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bf2b4.  v0:= 16I;
  #L4bf2b8.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bf2be.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L4bf2c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4bf2d4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bf2da.  v0:= temp;
  #L4bf2dc.  if v0 != 0 then goto L4bf2e6;
  #L4bf2e0.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L4bf2e6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4bf2f8.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf2fc.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4bf300.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bf304.  v3:= 1I;
  #L4bf306.  v4:= 1I;
  #L4bf308.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bf30e.  v5:= temp;
  #L4bf310.  if v5 == 0 then goto L4bf31c;
  #L4bf314.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4bf31a.  return @kind void;
  #L4bf31c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bf322.  v5:= temp @kind object;
  #L4bf324.  if v5 == 0 then goto L4bf336;
  #L4bf328.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4bf32e.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Emitter;)V` @kind virtual;
  #L4bf334.  return @kind void;
  #L4bf336.  v5:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L4bf33a.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bf340.  v6:= temp @kind object;
  #L4bf342.  if v6 != 0 then goto L4bf34a;
  #L4bf346.  v7:= 1I;
  #L4bf348.  goto L4bf34c;
  #L4bf34a.  v7:= 0I;
  #L4bf34c.  if v5 == 0 then goto L4bf35c;
  #L4bf350.  if v7 == 0 then goto L4bf35c;
  #L4bf354.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind virtual;
  #L4bf35a.  return @kind void;
  #L4bf35c.  if v7 == 0 then goto L4bf370;
  #L4bf360.  v4:= -v4 @kind int;
  #L4bf362.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bf368.  v4:= temp;
  #L4bf36a.  if v4 != 0 then goto L4bf308;
  #L4bf36e.  return @kind void;
  #L4bf370.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bf376.  goto L4bf308;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf1c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf1cc.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bf1d2.  v0:= temp;
  #L4bf1d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf388.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf38c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bf392.  v0:= temp;
  #L4bf394.  if v0 != 0 then goto L4bf3ae;
  #L4bf398.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L4bf39c.  if v0 == 0 then goto L4bf3a2;
  #L4bf3a0.  goto L4bf3ae;
  #L4bf3a2.  v0:= 1I;
  #L4bf3a4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v0 @kind boolean;
  #L4bf3a8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L4bf3ae.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf3c0.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bf3c6.  v0:= temp;
  #L4bf3c8.  if v0 != 0 then goto L4bf3d2;
  #L4bf3cc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bf3d2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bf3e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf3e8.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bf3ee.  v0:= temp;
  #L4bf3f0.  if v0 != 0 then goto L4bf474;
  #L4bf3f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L4bf3f8.  if v0 == 0 then goto L4bf3fe;
  #L4bf3fc.  goto L4bf474;
  #L4bf3fe.  if v3 != 0 then goto L4bf416;
  #L4bf402.  v3:= "onNext called with a null value." @kind object;
  #L4bf406.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4bf40c.  v3:= temp @kind object;
  #L4bf40e.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bf414.  return @kind void;
  #L4bf416.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4bf41c.  v0:= temp;
  #L4bf41e.  if v0 != 0 then goto L4bf44a;
  #L4bf422.  v0:= 0I;
  #L4bf424.  v1:= 1I;
  #L4bf426.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bf42c.  v0:= temp;
  #L4bf42e.  if v0 == 0 then goto L4bf44a;
  #L4bf432.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf436.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bf43c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bf442.  v3:= temp;
  #L4bf444.  if v3 != 0 then goto L4bf466;
  #L4bf448.  return @kind void;
  #L4bf44a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4bf44e.  @monitorenter v0
  #L4bf450.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bf456.  @monitorexit v0
  #L4bf458.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bf45e.  v3:= temp;
  #L4bf460.  if v3 == 0 then goto L4bf466;
  #L4bf464.  return @kind void;
  #L4bf466.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L4bf46c.  return @kind void;
  #L4bf46e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bf470.  @monitorexit v0
  #L4bf472.  throw v3;
  #L4bf474.  return @kind void;
  catch `java.lang.Throwable` @[L4bf450..L4bf458] goto L4bf46e;
  catch `java.lang.Throwable` @[L4bf470..L4bf472] goto L4bf46e;
}
procedure `long` `requested`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.requested:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bf278.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf27c.  call temp:= `requested`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.requested:()J` @kind virtual;
  #L4bf282.  v0:= temp @kind wide;
  #L4bf284.  return v0 @kind wide;
}
procedure `io.reactivex.rxjava3.core.FlowableEmitter` `serialize`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.serialize:()Lio/reactivex/rxjava3/core/FlowableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L4bf244.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf49c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf4a0.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind virtual;
  #L4bf4a6.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf4b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf4bc.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4bf4c2.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf258.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf25c.  call temp:= `toString`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bf262.  v0:= temp @kind object;
  #L4bf264.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bf1e8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4bf1ec.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bf1f2.  v0:= temp;
  #L4bf1f4.  v1:= 0I;
  #L4bf1f6.  if v0 != 0 then goto L4bf232;
  #L4bf1fa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L4bf1fe.  if v0 == 0 then goto L4bf204;
  #L4bf202.  goto L4bf232;
  #L4bf204.  if v3 != 0 then goto L4bf214;
  #L4bf208.  v3:= "onError called with a null Throwable." @kind object;
  #L4bf20c.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4bf212.  v3:= temp @kind object;
  #L4bf214.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bf218.  call temp:= `tryAddThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bf21e.  v3:= temp;
  #L4bf220.  if v3 == 0 then goto L4bf232;
  #L4bf224.  v3:= 1I;
  #L4bf226.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v3 @kind boolean;
  #L4bf22a.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L4bf230.  return v3;
  #L4bf232.  return v1;
}
