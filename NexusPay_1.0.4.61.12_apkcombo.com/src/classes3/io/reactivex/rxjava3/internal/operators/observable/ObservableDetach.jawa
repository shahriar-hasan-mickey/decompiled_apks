record `io.reactivex.rxjava3.internal.operators.observable.ObservableDetach` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.observable.a` @kind class {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDetach` v0 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDetach;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4edabc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/a;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind direct;
  #L4edac2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDetach` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDetach;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4edad4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.a.source` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4edad8.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$a`;
  #L4edadc.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDetach$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4edae2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4edae8.  return @kind void;
}
