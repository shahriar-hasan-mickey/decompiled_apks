record `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f4f50.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4f4f56.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f4f5a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v2 @kind object;
  #L4f4f5e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4f4f62.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int` := v4;
  #L4f4f66.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Observer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/rxjava3/core/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f4e34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4f4e38.  v1:= 1I;
  #L4f4e3a.  if v0 == 0 then goto L4f4e4a;
  #L4f4e3e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f4e42.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f4e48.  return v1;
  #L4f4e4a.  if v3 == 0 then goto L4f4ebe;
  #L4f4e4e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4f4e52.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L4f4e56.  if v0 == 0 then goto L4f4e80;
  #L4f4e5a.  if v4 == 0 then goto L4f4ebe;
  #L4f4e5e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4f4e62.  if v3 == 0 then goto L4f4e6e;
  #L4f4e66.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f4e6c.  goto L4f4e74;
  #L4f4e6e.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f4e74.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f4e78.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f4e7e.  return v1;
  #L4f4e80.  if v3 == 0 then goto L4f4ea4;
  #L4f4e84.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4f4e88.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f4e8c.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f4e92.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f4e98.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f4e9c.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f4ea2.  return v1;
  #L4f4ea4.  if v4 == 0 then goto L4f4ebe;
  #L4f4ea8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4f4eac.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f4eb2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f4eb6.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f4ebc.  return v1;
  #L4f4ebe.  v3:= 0I;
  #L4f4ec0.  return v3;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4f78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f4f7c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f4f82.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4f94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4f4f98.  if v0 != 0 then goto L4f4fd4;
  #L4f4f9c.  v0:= 1I;
  #L4f4f9e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4f4fa2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f4fa6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f4fac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f4fb0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f4fb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` @kind boolean;
  #L4f4fba.  if v0 != 0 then goto L4f4fd4;
  #L4f4fbe.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f4fc4.  v0:= temp;
  #L4f4fc6.  if v0 != 0 then goto L4f4fd4;
  #L4f4fca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f4fce.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f4fd4.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f4fe8.  v0:= 1I;
  #L4f4fea.  v1:= 1I;
  #L4f4fec.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4f4ff0.  if v2 == 0 then goto L4f4ff6;
  #L4f4ff4.  return @kind void;
  #L4f4ff6.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4f4ffa.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4f4ffe.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L4f5002.  if v4 != 0 then goto L4f502c;
  #L4f5006.  if v2 == 0 then goto L4f502c;
  #L4f500a.  if v3 == 0 then goto L4f502c;
  #L4f500e.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4f5012.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5016.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4f501a.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f5020.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f5024.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f502a.  return @kind void;
  #L4f502c.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5030.  v4:= 0I;
  #L4f5032.  call `onNext`(v3, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f5038.  if v2 == 0 then goto L4f506a;
  #L4f503c.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4f5040.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L4f5044.  if v0 == 0 then goto L4f5054;
  #L4f5048.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f504c.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f5052.  goto L4f505e;
  #L4f5054.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5058.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f505e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f5062.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f5068.  return @kind void;
  #L4f506a.  v1:= -v1 @kind int;
  #L4f506c.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f5072.  v1:= temp;
  #L4f5074.  if v1 != 0 then goto L4f4fec;
  #L4f5078.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f508c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f5090.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5094.  v2:= 1I;
  #L4f5096.  v3:= 1I;
  #L4f5098.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4f509c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4f50a2.  v5:= temp;
  #L4f50a4.  call temp:= `a`(v7, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L4f50aa.  v4:= temp;
  #L4f50ac.  if v4 == 0 then goto L4f50b2;
  #L4f50b0.  return @kind void;
  #L4f50b2.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4f50b6.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4f50bc.  v5:= temp @kind object;
  #L4f50be.  if v5 != 0 then goto L4f50c6;
  #L4f50c2.  v6:= 1I;
  #L4f50c4.  goto L4f50c8;
  #L4f50c6.  v6:= 0I;
  #L4f50c8.  call temp:= `a`(v7, v4, v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L4f50ce.  v4:= temp;
  #L4f50d0.  if v4 == 0 then goto L4f50d6;
  #L4f50d4.  return @kind void;
  #L4f50d6.  if v6 == 0 then goto L4f50ea;
  #L4f50da.  v3:= -v3 @kind int;
  #L4f50dc.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f50e2.  v3:= temp;
  #L4f50e4.  if v3 != 0 then goto L4f5098;
  #L4f50e8.  return @kind void;
  #L4f50ea.  call `onNext`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f50f0.  goto L4f50b2;
  #L4f50f2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f50f4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f50fa.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4f50fe.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f5102.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f5108.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f510e.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f5114.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f5118.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f511e.  return @kind void;
  catch `java.lang.Throwable` @[L4f50b6..L4f50be] goto L4f50f2;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @AccessFlag  {
    temp;
    v0;

  #L4f5290.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f5296.  v0:= temp;
  #L4f5298.  if v0 != 0 then goto L4f52a6;
  #L4f529c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4f52a0.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4f52a6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4ed4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4f4ed8.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4eec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f4ef0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4f4ef6.  v0:= temp;
  #L4f4ef8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f513c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4f5140.  if v0 == 0 then goto L4f5146;
  #L4f5144.  return @kind void;
  #L4f5146.  v0:= 1I;
  #L4f5148.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4f514c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4f5152.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5164.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4f5168.  if v0 == 0 then goto L4f5174;
  #L4f516c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f5172.  return @kind void;
  #L4f5174.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4f5178.  v2:= 1I;
  #L4f517a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4f517e.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4f5184.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5198.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4f519c.  if v0 == 0 then goto L4f51a2;
  #L4f51a0.  return @kind void;
  #L4f51a2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int`;
  #L4f51a6.  v1:= 2I;
  #L4f51a8.  if v0 == v1 then goto L4f51b6;
  #L4f51ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f51b0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4f51b6.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4f51bc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f51d0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f51d4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f51da.  v0:= temp;
  #L4f51dc.  if v0 == 0 then goto L4f5254;
  #L4f51e0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4f51e4.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4f51e8.  if v0 == 0 then goto L4f5238;
  #L4f51ec.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4f51f0.  v0:= 7I;
  #L4f51f2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4f51f8.  v0:= temp;
  #L4f51fa.  v1:= 1I;
  #L4f51fc.  if v0 != v1 then goto L4f521e;
  #L4f5200.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L4f5204.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4f5208.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4f520c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5210.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f5216.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L4f521c.  return @kind void;
  #L4f521e.  v1:= 2I;
  #L4f5220.  if v0 != v1 then goto L4f5238;
  #L4f5224.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L4f5228.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4f522c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5230.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f5236.  return @kind void;
  #L4f5238.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f523c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int`;
  #L4f5240.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f5246.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4f524a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f524e.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f5254.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4f30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4f4f34.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4f4f3a.  v0:= temp @kind object;
  #L4f4f3c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4f0c.  v0:= 2I;
  #L4f4f0e.  v2:= v2 ^& v0 @kind int;
  #L4f4f10.  if v2 == 0 then goto L4f4f1c;
  #L4f4f14.  v2:= 1I;
  #L4f4f16.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` := v2 @kind boolean;
  #L4f4f1a.  return v0;
  #L4f4f1c.  v2:= 0I;
  #L4f4f1e.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5268.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` @kind boolean;
  #L4f526c.  if v0 == 0 then goto L4f5278;
  #L4f5270.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.e:()V` @kind virtual;
  #L4f5276.  goto L4f527e;
  #L4f5278.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableObserveOn$a;.f:()V` @kind virtual;
  #L4f527e.  return @kind void;
}
