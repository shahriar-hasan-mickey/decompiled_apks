record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ea9cc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ea9d2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ea9d6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ea9da.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int` := v3;
  #L4ea9de.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` := v4 @kind boolean;
  #L4ea9e2.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ea9e6.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ea9ec.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4ea9f0.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a`;
  #L4ea9f4.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;)V` @kind direct;
  #L4ea9fa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` := v2 @kind object;
  #L4ea9fe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4eaa48.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eaa4e.  v0:= temp;
  #L4eaa50.  if v0 == 0 then goto L4eaa56;
  #L4eaa54.  return @kind void;
  #L4eaa56.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eaa5a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eaa5e.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eaa62.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` @kind boolean;
  #L4eaa66.  if v3 != 0 then goto L4eab86;
  #L4eaa6a.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L4eaa6e.  if v3 == 0 then goto L4eaa7a;
  #L4eaa72.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eaa78.  return @kind void;
  #L4eaa7a.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` @kind boolean;
  #L4eaa7e.  v4:= 1I;
  #L4eaa80.  if v3 != 0 then goto L4eaaa6;
  #L4eaa84.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eaa8a.  v3:= temp @kind object;
  #L4eaa8c.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4eaa90.  if v3 == 0 then goto L4eaaa6;
  #L4eaa94.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eaa9a.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4eaa9e.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eaaa4.  return @kind void;
  #L4eaaa6.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` @kind boolean;
  #L4eaaaa.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4eaab0.  v5:= temp @kind object;
  #L4eaab2.  if v5 != 0 then goto L4eaaba;
  #L4eaab6.  v6:= 1I;
  #L4eaab8.  goto L4eaabc;
  #L4eaaba.  v6:= 0I;
  #L4eaabc.  if v3 == 0 then goto L4eaad0;
  #L4eaac0.  if v6 == 0 then goto L4eaad0;
  #L4eaac4.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4eaac8.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eaace.  return @kind void;
  #L4eaad0.  if v6 != 0 then goto L4eab86;
  #L4eaad4.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4eaad8.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eaade.  v3:= temp @kind object;
  #L4eaae0.  v5:= "The mapper returned a null ObservableSource" @kind object;
  #L4eaae4.  call temp:= `requireNonNull`(v3, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eaaea.  v3:= temp @kind object;
  #L4eaaec.  v3:= (`io.reactivex.rxjava3.core.ObservableSource`) v3 @kind object;
  #L4eaaf0.  v5:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4eaaf4.  if v5 == 0 then goto L4eab28;
  #L4eaaf8.  v3:= (`io.reactivex.rxjava3.functions.Supplier`) v3 @kind object;
  #L4eaafc.  call temp:= `get`(v3) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4eab02.  v3:= temp @kind object;
  #L4eab04.  if v3 == 0 then goto L4eaa62;
  #L4eab08.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L4eab0c.  if v4 != 0 then goto L4eaa62;
  #L4eab10.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4eab16.  goto L4eaa62;
  #L4eab18.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eab1a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eab20.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eab26.  goto L4eaa62;
  #L4eab28.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` := v4 @kind boolean;
  #L4eab2c.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` @kind object;
  #L4eab30.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4eab36.  goto L4eab86;
  #L4eab38.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eab3a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eab40.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4eab44.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eab48.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eab4e.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eab54.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eab5a.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eab60.  return @kind void;
  #L4eab62.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eab64.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eab6a.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L4eab6e.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eab72.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eab78.  call temp:= `tryAddThrowableOrReport`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eab7e.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eab84.  return @kind void;
  #L4eab86.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eab8c.  v3:= temp;
  #L4eab8e.  if v3 != 0 then goto L4eaa62;
  #L4eab92.  return @kind void;
  catch `java.lang.Throwable` @[L4eaaaa..L4eaab2] goto L4eab62;
  catch `java.lang.Throwable` @[L4eaad4..L4eaaf0] goto L4eab38;
  catch `java.lang.Throwable` @[L4eaaf8..L4eab04] goto L4eab18;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eaa10.  v0:= 1I;
  #L4eaa12.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4eaa16.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eaa1a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eaa20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a$a` @kind object;
  #L4eaa24.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a$a;.a:()V` @kind virtual;
  #L4eaa2a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eaa2e.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4eaa34.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ea9b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L4ea9b8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eabc4.  v0:= 1I;
  #L4eabc6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4eabca.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4eabd0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eabe4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eabe8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eabee.  v2:= temp;
  #L4eabf0.  if v2 == 0 then goto L4eac00;
  #L4eabf4.  v2:= 1I;
  #L4eabf6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4eabfa.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4eac00.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eac14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int`;
  #L4eac18.  if v0 != 0 then goto L4eac26;
  #L4eac1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eac20.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4eac26.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4eac2c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eac40.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eac44.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4eac4a.  v0:= temp;
  #L4eac4c.  if v0 == 0 then goto L4eacc4;
  #L4eac50.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4eac54.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4eac58.  if v0 == 0 then goto L4eaca8;
  #L4eac5c.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4eac60.  v0:= 3I;
  #L4eac62.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4eac68.  v0:= temp;
  #L4eac6a.  v1:= 1I;
  #L4eac6c.  if v0 != v1 then goto L4eac8e;
  #L4eac70.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int` := v0;
  #L4eac74.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eac78.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v1 @kind boolean;
  #L4eac7c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eac80.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eac86.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L4eac8c.  return @kind void;
  #L4eac8e.  v1:= 2I;
  #L4eac90.  if v0 != v1 then goto L4eaca8;
  #L4eac94.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int` := v0;
  #L4eac98.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eac9c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eaca0.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eaca6.  return @kind void;
  #L4eaca8.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4eacac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int`;
  #L4eacb0.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4eacb6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eacba.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eacbe.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eacc4.  return @kind void;
}
