record `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f1768.  v0:= new `java.lang.Object`;
  #L4f176c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f1772.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` := v0 @kind object;
  #L4f1776.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f1788.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f178e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f1792.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f1798.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f179c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4f17a0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4f17a4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4f17a8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int` := v5;
  #L4f17ac.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` := v6 @kind boolean;
  #L4f17b0.  v2:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4f17b4.  call `<init>`(v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4f17ba.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` := v2 @kind object;
  #L4f17be.  v2:= 1I;
  #L4f17c0.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f17c6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f17d8.  if v2 == 0 then goto L4f17de;
  #L4f17dc.  goto L4f17e2;
  #L4f17de.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L4f17e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4f17e6.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f17ec.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f17f2.  v2:= temp;
  #L4f17f4.  if v2 != 0 then goto L4f1802;
  #L4f17f8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f17fc.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f1802.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f1814.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1818.  v1:= 0I;
  #L4f181a.  v2:= 1I;
  #L4f181c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f1822.  v0:= temp;
  #L4f1824.  if v0 == 0 then goto L4f183e;
  #L4f1828.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f182e.  v0:= temp;
  #L4f1830.  if v0 != 0 then goto L4f183e;
  #L4f1834.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f1838.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f183e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1748.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f174c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f1752.  v0:= temp;
  #L4f1754.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1850.  v0:= new `java.util.ArrayList`;
  #L4f1854.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4f1858.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f185e.  v1:= temp @kind object;
  #L4f1860.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4f1866.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4f186a.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f1870.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f1876.  v0:= temp @kind object;
  #L4f1878.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f187e.  v1:= temp;
  #L4f1880.  if v1 == 0 then goto L4f1898;
  #L4f1884.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f188a.  v1:= temp @kind object;
  #L4f188c.  v1:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L4f1890.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onComplete:()V` @kind virtual;
  #L4f1896.  goto L4f1878;
  #L4f1898.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f189c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f18a2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f18b4.  v0:= new `java.util.ArrayList`;
  #L4f18b8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4f18bc.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f18c2.  v1:= temp @kind object;
  #L4f18c4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4f18ca.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4f18ce.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f18d4.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f18da.  v0:= temp @kind object;
  #L4f18dc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f18e2.  v1:= temp;
  #L4f18e4.  if v1 == 0 then goto L4f18fc;
  #L4f18e8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f18ee.  v1:= temp @kind object;
  #L4f18f0.  v1:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L4f18f4.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f18fa.  goto L4f18dc;
  #L4f18fc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f1900.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1906.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f1918.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f191c.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f1922.  v0:= temp @kind object;
  #L4f1924.  if v0 == 0 then goto L4f192c;
  #L4f1928.  v1:= v0 @kind object;
  #L4f192a.  goto L4f1930;
  #L4f192c.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L4f1930.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4f1934.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f193a.  v2:= temp @kind object;
  #L4f193c.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a`) v2 @kind object;
  #L4f1940.  v3:= 0I;
  #L4f1942.  if v2 != 0 then goto L4f197a;
  #L4f1946.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f194a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f1950.  v2:= temp;
  #L4f1952.  if v2 == 0 then goto L4f1958;
  #L4f1956.  return @kind void;
  #L4f1958.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int`;
  #L4f195c.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` @kind boolean;
  #L4f1960.  call temp:= `a`(v0, v2, v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.a:(Ljava/lang/Object;ILio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;Z)Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;` @kind static;
  #L4f1966.  v2:= temp @kind object;
  #L4f1968.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L4f196c.  call temp:= `put`(v3, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f1972.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f1978.  v3:= 1I;
  #L4f197a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f197e.  call temp:= `apply`(v1, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f1984.  v5:= temp @kind object;
  #L4f1986.  v1:= "The value supplied is null" @kind object;
  #L4f198a.  call temp:= `requireNonNull`(v5, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f1990.  v5:= temp @kind object;
  #L4f1992.  call `onNext`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1998.  if v3 == 0 then goto L4f19c2;
  #L4f199c.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f19a0.  call `onNext`(v5, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f19a6.  v5:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$a.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` @kind object;
  #L4f19aa.  call temp:= `g`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.g:()Z` @kind virtual;
  #L4f19b0.  v5:= temp;
  #L4f19b2.  if v5 == 0 then goto L4f19c2;
  #L4f19b6.  call `cancel`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4f19bc.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$a;.onComplete:()V` @kind virtual;
  #L4f19c2.  return @kind void;
  #L4f19c4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f19c6.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f19cc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f19d0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f19d6.  if v3 == 0 then goto L4f19e4;
  #L4f19da.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f19de.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f19e4.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f19ea.  return @kind void;
  #L4f19ec.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f19ee.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f19f4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f19f8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f19fe.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f1a04.  return @kind void;
  catch `java.lang.Throwable` @[L4f1918..L4f1924] goto L4f19ec;
  catch `java.lang.Throwable` @[L4f197a..L4f1992] goto L4f19c4;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1a30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f1a34.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f1a3a.  v0:= temp;
  #L4f1a3c.  if v0 == 0 then goto L4f1a4e;
  #L4f1a40.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f1a44.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f1a48.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f1a4e.  return @kind void;
}
