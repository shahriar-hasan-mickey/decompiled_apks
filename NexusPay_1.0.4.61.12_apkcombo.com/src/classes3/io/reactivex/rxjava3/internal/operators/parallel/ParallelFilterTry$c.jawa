record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5019ec.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L5019f2.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L5019f6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501a08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L501a0c.  if v0 != 0 then goto L501a20;
  #L501a10.  v0:= 1I;
  #L501a12.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L501a16.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L501a1a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L501a20.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501a34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L501a38.  if v0 == 0 then goto L501a44;
  #L501a3c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L501a42.  return @kind void;
  #L501a44.  v0:= 1I;
  #L501a46.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L501a4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L501a4e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L501a54.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501a68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L501a6c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L501a72.  v0:= temp;
  #L501a74.  if v0 == 0 then goto L501a86;
  #L501a78.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L501a7c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L501a80.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L501a86.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5018f4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L5018f8.  v1:= 0I;
  #L5018fa.  if v0 != 0 then goto L5019c0;
  #L5018fe.  v2:= 0L;
  #L501902.  v0:= 1I;
  #L501904.  v4:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L501908.  call temp:= `test`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L50190e.  v2:= temp;
  #L501910.  if v2 == 0 then goto L501926;
  #L501914.  v2:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L501918.  call temp:= `tryOnNext`(v2, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L50191e.  v10:= temp;
  #L501920.  if v10 == 0 then goto L501926;
  #L501924.  v1:= 1I;
  #L501926.  return v1;
  #L501928.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50192a.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L501930.  v5:= 2I;
  #L501932.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$b.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L501936.  v7:= 1L;
  #L50193a.  v2:= v2 + v7 @kind long;
  #L50193c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L501942.  v7:= temp @kind object;
  #L501944.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50194a.  v6:= temp @kind object;
  #L50194c.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L501950.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L501956.  v6:= temp @kind object;
  #L501958.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L50195c.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$a.a` @type ^`int`[] @kind object;
  #L501960.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L501966.  v6:= temp;
  #L501968.  v6:= v7[v6];
  #L50196c.  if v6 == v0 then goto L501902;
  #L501970.  if v6 == v5 then goto L501994;
  #L501974.  v10:= 3I;
  #L501976.  if v6 == v10 then goto L501988;
  #L50197a.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L501980.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L501986.  return v1;
  #L501988.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L50198e.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @kind virtual;
  #L501994.  return v1;
  #L501996.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L501998.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50199e.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L5019a4.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L5019a8.  v3:= new `java.lang.Throwable`[v5];
  #L5019ac.  v3[v1]:= v4 @kind object;
  #L5019b0.  v3[v0]:= v10 @kind object;
  #L5019b4.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L5019ba.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5019c0.  return v1;
  catch `java.lang.Throwable` @[L501904..L501910] goto L501928;
  catch `java.lang.Throwable` @[L501932..L50195c] goto L501996;
}
