record `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/BiFunction;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f931c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f9322.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f9326.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4f932a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4f932e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9340.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9344.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f934a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f92fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9300.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4f9306.  v0:= temp;
  #L4f9308.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f935c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L4f9360.  if v0 == 0 then goto L4f9366;
  #L4f9364.  return @kind void;
  #L4f9366.  v0:= 1I;
  #L4f9368.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4f936c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f9370.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f9376.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9388.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L4f938c.  if v0 == 0 then goto L4f9398;
  #L4f9390.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f9396.  return @kind void;
  #L4f9398.  v0:= 1I;
  #L4f939a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4f939e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f93a2.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f93a8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f93bc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L4f93c0.  if v0 == 0 then goto L4f93c6;
  #L4f93c4.  return @kind void;
  #L4f93c6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L4f93ca.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4f93ce.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f93d4.  v3:= temp @kind object;
  #L4f93d6.  v0:= "The accumulator returned a null value" @kind object;
  #L4f93da.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f93e0.  v3:= temp @kind object;
  #L4f93e2.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4f93e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f93ea.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f93f0.  return @kind void;
  #L4f93f2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f93f4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f93fa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f93fe.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f9404.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f940a.  return @kind void;
  catch `java.lang.Throwable` @[L4f93ca..L4f93e2] goto L4f93f2;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScanSeed$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9428.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f942c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f9432.  v0:= temp;
  #L4f9434.  if v0 == 0 then goto L4f9454;
  #L4f9438.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f943c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f9440.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f9446.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f944a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L4f944e.  call `onNext`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f9454.  return @kind void;
}
