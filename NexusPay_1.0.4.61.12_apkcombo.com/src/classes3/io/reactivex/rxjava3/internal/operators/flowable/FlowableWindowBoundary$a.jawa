record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d74a4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L4d74aa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` := v1 @kind object;
  #L4d74ae.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d74c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L4d74c4.  if v0 == 0 then goto L4d74ca;
  #L4d74c8.  return @kind void;
  #L4d74ca.  v0:= 1I;
  #L4d74cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4d74d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` @kind object;
  #L4d74d4.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.b:()V` @kind virtual;
  #L4d74da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d74ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L4d74f0.  if v0 == 0 then goto L4d74fc;
  #L4d74f4.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d74fa.  return @kind void;
  #L4d74fc.  v0:= 1I;
  #L4d74fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4d7502.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` @kind object;
  #L4d7506.  call `c`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d750c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4d7520.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L4d7524.  if v1 == 0 then goto L4d752a;
  #L4d7528.  return @kind void;
  #L4d752a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` @kind object;
  #L4d752e.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.d:()V` @kind virtual;
  #L4d7534.  return @kind void;
}
