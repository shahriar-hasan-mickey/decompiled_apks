record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IZLio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bd88c.  call `<init>`(v0, v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L4bd892.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4bd896.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` := v4 @kind boolean;
  #L4bd89a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd8f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd8f8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bd8fe.  v2:= temp;
  #L4bd900.  if v2 == 0 then goto L4bd928;
  #L4bd904.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` @kind boolean;
  #L4bd908.  if v2 != 0 then goto L4bd91c;
  #L4bd90c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd910.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bd916.  v2:= 1I;
  #L4bd918.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4bd91c.  v2:= 0I;
  #L4bd91e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v2 @kind boolean;
  #L4bd922.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.d:()V` @kind virtual;
  #L4bd928.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd93c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd940.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bd946.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd8ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4bd8b0.  if v0 != 0 then goto L4bd8e2;
  #L4bd8b4.  v0:= 1I;
  #L4bd8b6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4bd8ba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bd8be.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4bd8c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd8c8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bd8ce.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bd8d2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bd8d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd8dc.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bd8e2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4bdbd8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bdbde.  v0:= temp;
  #L4bdbe0.  if v0 != 0 then goto L4bdbee;
  #L4bdbe4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdbe8.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4bdbee.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4bdc00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdc04.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bdc0a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd958.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd95c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bd962.  v2:= temp;
  #L4bd964.  if v2 == 0 then goto L4bd974;
  #L4bd968.  v2:= 1I;
  #L4bd96a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4bd96e.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.d:()V` @kind virtual;
  #L4bd974.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd988.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bd98c.  call `request`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L4bd992.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bd9a4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4bd9a8.  if v0 == 0 then goto L4bd9ae;
  #L4bd9ac.  return @kind void;
  #L4bd9ae.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` @kind boolean;
  #L4bd9b2.  if v0 != 0 then goto L4bdb96;
  #L4bd9b6.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L4bd9ba.  if v0 == 0 then goto L4bd9f4;
  #L4bd9be.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` @kind boolean;
  #L4bd9c2.  if v1 != 0 then goto L4bd9f4;
  #L4bd9c6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd9ca.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd9d0.  v1:= temp @kind object;
  #L4bd9d2.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4bd9d6.  if v1 == 0 then goto L4bd9f4;
  #L4bd9da.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd9de.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd9e2.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bd9e8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bd9ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bd9f2.  return @kind void;
  #L4bd9f4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bd9f8.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bd9fe.  v1:= temp @kind object;
  #L4bda00.  v2:= 0I;
  #L4bda02.  v3:= 1I;
  #L4bda04.  if v1 != 0 then goto L4bda0c;
  #L4bda08.  v4:= 1I;
  #L4bda0a.  goto L4bda0e;
  #L4bda0c.  v4:= 0I;
  #L4bda0e.  if v0 == 0 then goto L4bda30;
  #L4bda12.  if v4 == 0 then goto L4bda30;
  #L4bda16.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bda1a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bda1e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bda24.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bda28.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bda2e.  return @kind void;
  #L4bda30.  if v4 != 0 then goto L4bdb96;
  #L4bda34.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bda38.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bda3e.  v0:= temp @kind object;
  #L4bda40.  v1:= "The mapper returned a null Publisher" @kind object;
  #L4bda44.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bda4a.  v0:= temp @kind object;
  #L4bda4c.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L4bda50.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @type ^`int`;
  #L4bda54.  if v1 == v3 then goto L4bda7c;
  #L4bda58.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int`;
  #L4bda5c.  v1:= v1 + v3 @kind int;
  #L4bda5e.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.d` @type ^`int`;
  #L4bda62.  if v1 != v4 then goto L4bda78;
  #L4bda66.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v2;
  #L4bda6a.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bda6e.  v4:= (`long`) v1 @kind i2l;
  #L4bda70.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bda76.  goto L4bda7c;
  #L4bda78.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v1;
  #L4bda7c.  v1:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4bda80.  if v1 == 0 then goto L4bdb1a;
  #L4bda84.  v0:= (`io.reactivex.rxjava3.functions.Supplier`) v0 @kind object;
  #L4bda88.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bda8e.  v0:= temp @kind object;
  #L4bda90.  goto L4bdad2;
  #L4bda92.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bda94.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bda9a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bda9e.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdaa4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` @kind boolean;
  #L4bdaa8.  if v0 != 0 then goto L4bdad0;
  #L4bdaac.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdab0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdab6.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdaba.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdabe.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdac4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdac8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdace.  return @kind void;
  #L4bdad0.  v0:= 0I;
  #L4bdad2.  if v0 == 0 then goto L4bd9a4;
  #L4bdad6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4bdada.  if v1 == 0 then goto L4bdae2;
  #L4bdade.  goto L4bd9a4;
  #L4bdae2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bdae6.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L4bdaec.  v1:= temp;
  #L4bdaee.  if v1 == 0 then goto L4bdb00;
  #L4bdaf2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdaf6.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bdafc.  goto L4bd9a4;
  #L4bdb00.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L4bdb04.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bdb08.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$g`;
  #L4bdb0c.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4bdb12.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4bdb18.  goto L4bdb96;
  #L4bdb1a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L4bdb1e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bdb22.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4bdb28.  goto L4bdb96;
  #L4bdb2a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdb2c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdb32.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdb36.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdb3c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdb40.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdb46.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdb4a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdb4e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdb54.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdb58.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdb5e.  return @kind void;
  #L4bdb60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdb62.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdb68.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdb6c.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdb72.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdb76.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdb7c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdb80.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdb84.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdb8a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdb8e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdb94.  return @kind void;
  #L4bdb96.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bdb9c.  v0:= temp;
  #L4bdb9e.  if v0 != 0 then goto L4bd9a4;
  #L4bdba2.  return @kind void;
  catch `java.lang.Throwable` @[L4bd9f4..L4bda00] goto L4bdb60;
  catch `java.lang.Throwable` @[L4bda34..L4bda50] goto L4bdb2a;
  catch `java.lang.Throwable` @[L4bda88..L4bda90] goto L4bda92;
}
