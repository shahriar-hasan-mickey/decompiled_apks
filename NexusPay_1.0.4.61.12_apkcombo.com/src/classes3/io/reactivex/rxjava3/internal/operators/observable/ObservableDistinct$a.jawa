record `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class {
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4edb64.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4edb6a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4edb6e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` := v3 @kind object;
  #L4edb72.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edb84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4edb88.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4edb8e.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.clear:()V` @kind super;
  #L4edb94.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edba8.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4edbac.  if v0 != 0 then goto L4edbca;
  #L4edbb0.  v0:= 1I;
  #L4edbb2.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4edbb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4edbba.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4edbc0.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4edbc4.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4edbca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edbdc.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4edbe0.  if v0 == 0 then goto L4edbec;
  #L4edbe4.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4edbea.  goto L4edc06;
  #L4edbec.  v0:= 1I;
  #L4edbee.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4edbf2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4edbf6.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4edbfc.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4edc00.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4edc06.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4edc18.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4edc1c.  if v0 == 0 then goto L4edc22;
  #L4edc20.  return @kind void;
  #L4edc22.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L4edc26.  if v0 != 0 then goto L4edc68;
  #L4edc2a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4edc2e.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4edc34.  v0:= temp @kind object;
  #L4edc36.  v1:= "The keySelector returned a null key" @kind object;
  #L4edc3a.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4edc40.  v0:= temp @kind object;
  #L4edc42.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4edc46.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4edc4c.  v0:= temp;
  #L4edc4e.  if v0 == 0 then goto L4edc74;
  #L4edc52.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4edc56.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4edc5c.  goto L4edc74;
  #L4edc5e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4edc60.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4edc66.  return @kind void;
  #L4edc68.  v3:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4edc6c.  v0:= 0I;
  #L4edc6e.  call `onNext`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4edc74.  return @kind void;
  catch `java.lang.Throwable` @[L4edc2a..L4edc4e] goto L4edc5e;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4edb18.  v0:= v4.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4edb1c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4edb22.  v0:= temp @kind object;
  #L4edb24.  if v0 == 0 then goto L4edb50;
  #L4edb28.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4edb2c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4edb30.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4edb36.  v2:= temp @kind object;
  #L4edb38.  v3:= "The keySelector returned a null key" @kind object;
  #L4edb3c.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4edb42.  v2:= temp @kind object;
  #L4edb44.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4edb4a.  v1:= temp;
  #L4edb4c.  if v1 == 0 then goto L4edb18;
  #L4edb50.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4edafc.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4edb02.  v1:= temp;
  #L4edb04.  return v1;
}
