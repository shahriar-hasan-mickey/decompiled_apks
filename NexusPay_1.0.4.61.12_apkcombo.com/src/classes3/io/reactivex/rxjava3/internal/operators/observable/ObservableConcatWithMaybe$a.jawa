record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ec198.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ec19e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ec1a2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` := v2 @kind object;
  #L4ec1a6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4ec1b8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ec1be.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec170.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec176.  v0:= temp @kind object;
  #L4ec178.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ec17c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec182.  v0:= temp;
  #L4ec184.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ec1d0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4ec1d4.  if v0 == 0 then goto L4ec1e4;
  #L4ec1d8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec1dc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ec1e2.  goto L4ec200;
  #L4ec1e4.  v0:= 1I;
  #L4ec1e6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4ec1ea.  v0:= 0I;
  #L4ec1ec.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec1f2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` @kind object;
  #L4ec1f6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` := v0 @kind object;
  #L4ec1fa.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4ec200.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec214.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec218.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ec21e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec230.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec234.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ec23a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4ec24c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec252.  v1:= temp;
  #L4ec254.  if v1 == 0 then goto L4ec26a;
  #L4ec258.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4ec25c.  if v1 != 0 then goto L4ec26a;
  #L4ec260.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec264.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ec26a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec27c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec280.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ec286.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec28a.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ec290.  return @kind void;
}
