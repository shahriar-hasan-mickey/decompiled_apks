record `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn;.<init>:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/core/Scheduler;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4cb36c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4cb372.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4cb376.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.c` @type ^`boolean` := v3 @kind boolean;
  #L4cb37a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.d` @type ^`int` := v4;
  #L4cb37e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cb390.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4cb394.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4cb39a.  v0:= temp @kind object;
  #L4cb39c.  v1:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4cb3a0.  if v1 == 0 then goto L4cb3c6;
  #L4cb3a4.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4cb3a8.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b`;
  #L4cb3ac.  v6:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v6 @kind object;
  #L4cb3b0.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.c` @type ^`boolean` @kind boolean;
  #L4cb3b4.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.d` @type ^`int`;
  #L4cb3b8.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @kind direct;
  #L4cb3be.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4cb3c4.  goto L4cb3e2;
  #L4cb3c6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4cb3ca.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c`;
  #L4cb3ce.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.c` @type ^`boolean` @kind boolean;
  #L4cb3d2.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn.d` @type ^`int`;
  #L4cb3d6.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @kind direct;
  #L4cb3dc.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4cb3e2.  return @kind void;
}
