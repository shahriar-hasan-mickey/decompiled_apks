record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind object, `int` v2 , `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;IJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c23fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c2402.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` := v3 @kind wide;
  #L4c2406.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` := v1 @kind object;
  #L4c240a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int` := v2;
  #L4c240e.  v1:= v2 ^> 2;
  #L4c2412.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int` := v1;
  #L4c2416.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c2530.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L4c2534.  v1:= 1I;
  #L4c2536.  if v0 == v1 then goto L4c256e;
  #L4c253a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` @kind wide;
  #L4c253e.  v0:= v0 + v4 @kind long;
  #L4c2540.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int`;
  #L4c2544.  v4:= (`long`) v4 @kind i2l;
  #L4c2546.  v2:= lcmp(v0, v4);
  #L4c254a.  if v2 < 0 then goto L4c256a;
  #L4c254e.  v4:= 0L;
  #L4c2552.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v4 @kind wide;
  #L4c2556.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c255c.  v4:= temp @kind object;
  #L4c255e.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4c2562.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c2568.  goto L4c256e;
  #L4c256a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v0 @kind wide;
  #L4c256e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4c2428.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c242e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c23d4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c23da.  v0:= temp @kind object;
  #L4c23dc.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c23e0.  if v0 != v1 then goto L4c23e8;
  #L4c23e4.  v0:= 1I;
  #L4c23e6.  goto L4c23ea;
  #L4c23e8.  v0:= 0I;
  #L4c23ea.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2440.  v0:= 1I;
  #L4c2442.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c2446.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L4c244a.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c2450.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2464.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c2468.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c246e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L4c2472.  call `h`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.h:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L4c2478.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c248c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L4c2490.  v1:= 2I;
  #L4c2492.  if v0 == v1 then goto L4c24a2;
  #L4c2496.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L4c249a.  call `j`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.j:(Ljava/lang/Object;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L4c24a0.  goto L4c24ac;
  #L4c24a2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L4c24a6.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c24ac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c24c0.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c24c6.  v0:= temp;
  #L4c24c8.  if v0 == 0 then goto L4c251c;
  #L4c24cc.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4c24d0.  if v0 == 0 then goto L4c2510;
  #L4c24d4.  v0:= v4 @kind object;
  #L4c24d6.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4c24da.  v1:= 7I;
  #L4c24dc.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4c24e2.  v1:= temp;
  #L4c24e4.  v2:= 1I;
  #L4c24e6.  if v1 != v2 then goto L4c2502;
  #L4c24ea.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L4c24ee.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4c24f2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L4c24f6.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L4c24fa.  call `e`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c2500.  return @kind void;
  #L4c2502.  v2:= 2I;
  #L4c2504.  if v1 != v2 then goto L4c2510;
  #L4c2508.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L4c250c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4c2510.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int`;
  #L4c2514.  v0:= (`long`) v0 @kind i2l;
  #L4c2516.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c251c.  return @kind void;
}
