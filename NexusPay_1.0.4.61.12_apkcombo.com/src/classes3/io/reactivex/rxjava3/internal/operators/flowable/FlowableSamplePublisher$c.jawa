record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d0a50.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d0a56.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d0a5a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d0a60.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4d0a64.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d0a68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d0a6e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4d0a72.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d0a76.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.b` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L4d0a7a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0ab4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0ab8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0abe.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @kind virtual;
  #L4d0ac4.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d0ad8.  v0:= 0I;
  #L4d0ada.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d0ae0.  v0:= temp @kind object;
  #L4d0ae2.  if v0 == 0 then goto L4d0b36;
  #L4d0ae6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d0aea.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d0af0.  v1:= temp @kind wide;
  #L4d0af2.  v3:= 0L;
  #L4d0af6.  v5:= lcmp(v1, v3);
  #L4d0afa.  if v5 == 0 then goto L4d0b18;
  #L4d0afe.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0b02.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d0b08.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d0b0c.  v1:= 1L;
  #L4d0b10.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d0b16.  goto L4d0b36;
  #L4d0b18.  call `cancel`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.cancel:()V` @kind virtual;
  #L4d0b1e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0b22.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d0b26.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L4d0b2a.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d0b30.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0b36.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0a8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0a90.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d0a96.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0a9a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0aa0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0b48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0b4c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0b52.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0b56.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0b5c.  return @kind void;
}
procedure `void` `e`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.f:(Lorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4d0c60.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0c64.  v1:= 9223372036854775807L;
  #L4d0c6e.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4d0c74.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0b70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0b74.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d0b7a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.b:()V` @kind virtual;
  #L4d0b80.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0b94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0b98.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d0b9e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0ba2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0ba8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4d0bbc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4d0bc2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d0bd4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0bd8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d0bde.  v0:= temp;
  #L4d0be0.  if v0 == 0 then goto L4d0c26;
  #L4d0be4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d0be8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d0bec.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d0bf2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0bf6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d0bfc.  v0:= temp @kind object;
  #L4d0bfe.  if v0 != 0 then goto L4d0c26;
  #L4d0c02.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4d0c06.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$d`;
  #L4d0c0a.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$d;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;)V` @kind direct;
  #L4d0c10.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d0c16.  v0:= 9223372036854775807L;
  #L4d0c20.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d0c26.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0c38.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d0c3e.  v0:= temp;
  #L4d0c40.  if v0 == 0 then goto L4d0c4e;
  #L4d0c44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$c.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d0c48.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d0c4e.  return @kind void;
}
