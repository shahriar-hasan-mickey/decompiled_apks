record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v1 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4e70b8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e70be.  v0:= 1I;
  #L4e70c0.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4e70c4.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4e70c8.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4e70cc.  v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` := v3 @kind object;
  #L4e70d0.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e6fac.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` @kind boolean;
  #L4e6fb0.  v1:= 1I;
  #L4e6fb2.  if v0 != 0 then goto L4e6fdc;
  #L4e6fb6.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4e6fba.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4e6fbe.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L4e6fc4.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize`;
  #L4e6fc8.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4e6fcc.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMaterialize;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind direct;
  #L4e6fd2.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4e6fd6.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e6fdc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4e6fe0.  call temp:= `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @kind virtual;
  #L4e6fe6.  v0:= temp @kind object;
  #L4e6fe8.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4e6fee.  v2:= temp;
  #L4e6ff0.  v3:= 0I;
  #L4e6ff2.  if v2 == 0 then goto L4e7008;
  #L4e6ff6.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4e6ffa.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4e7000.  v0:= temp @kind object;
  #L4e7002.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4e7006.  return v1;
  #L4e7008.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4e700c.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnComplete:()Z` @kind virtual;
  #L4e7012.  v1:= temp;
  #L4e7014.  if v1 == 0 then goto L4e701a;
  #L4e7018.  return v3;
  #L4e701a.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4e7020.  v0:= temp @kind object;
  #L4e7022.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4e7026.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e702c.  v0:= temp @kind object;
  #L4e702e.  throw v0;
  #L4e7030.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4e7032.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L4e7036.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4e703c.  v4.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4e7040.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e7046.  v0:= temp @kind object;
  #L4e7048.  throw v0;
  catch `java.lang.InterruptedException` @[L4e6fdc..L4e6fe8] goto L4e7030;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e6f64.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L4e6f68.  if v0 != 0 then goto L4e6f90;
  #L4e6f6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` @kind boolean;
  #L4e6f70.  v1:= 0I;
  #L4e6f72.  if v0 != 0 then goto L4e6f78;
  #L4e6f76.  return v1;
  #L4e6f78.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` @kind boolean;
  #L4e6f7c.  if v0 == 0 then goto L4e6f8c;
  #L4e6f80.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @kind direct;
  #L4e6f86.  v0:= temp;
  #L4e6f88.  if v0 == 0 then goto L4e6f8e;
  #L4e6f8c.  v1:= 1I;
  #L4e6f8e.  return v1;
  #L4e6f90.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e6f96.  v0:= temp @kind object;
  #L4e6f98.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e706c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L4e7070.  if v0 != 0 then goto L4e709c;
  #L4e7074.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @kind virtual;
  #L4e707a.  v0:= temp;
  #L4e707c.  if v0 == 0 then goto L4e708c;
  #L4e7080.  v0:= 1I;
  #L4e7082.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4e7086.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L4e708a.  return v0 @kind object;
  #L4e708c.  v0:= new `java.util.NoSuchElementException`;
  #L4e7090.  v1:= "No more elements" @kind object;
  #L4e7094.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e709a.  throw v0;
  #L4e709c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e70a2.  v0:= temp @kind object;
  #L4e70a4.  throw v0;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e70e4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4e70e8.  v1:= "Read only iterator" @kind object;
  #L4e70ec.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e70f2.  throw v0;
}
