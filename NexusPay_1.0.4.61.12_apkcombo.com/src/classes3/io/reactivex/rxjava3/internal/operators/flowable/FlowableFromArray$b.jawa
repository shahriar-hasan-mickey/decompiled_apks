record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$b;.<init>:(Lorg/reactivestreams/Subscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c52ec.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L4c52f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c52f6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c5308.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L4c530c.  v1:= length @variable v0;
  #L4c530e.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c5312.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L4c5316.  if v3 == v1 then goto L4c5376;
  #L4c531a.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c531e.  if v4 == 0 then goto L4c5324;
  #L4c5322.  return @kind void;
  #L4c5324.  v4:= v0[v3] @kind object;
  #L4c5328.  if v4 != 0 then goto L4c536a;
  #L4c532c.  v0:= new `java.lang.NullPointerException`;
  #L4c5330.  v1:= new `java.lang.StringBuilder`;
  #L4c5334.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c533a.  v4:= "The element at index " @kind object;
  #L4c533e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5344.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c534a.  v3:= " is null" @kind object;
  #L4c534e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5354.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c535a.  v1:= temp @kind object;
  #L4c535c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5362.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5368.  return @kind void;
  #L4c536a.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c5370.  v3:= v3 + 1;
  #L4c5374.  goto L4c5316;
  #L4c5376.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c537a.  if v0 == 0 then goto L4c5380;
  #L4c537e.  return @kind void;
  #L4c5380.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c5386.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4c5398.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L4c539c.  v1:= length @variable v0;
  #L4c539e.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L4c53a2.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c53a6.  v4:= 0L;
  #L4c53aa.  v6:= v4 @kind wide;
  #L4c53ac.  v8:= lcmp(v6, v11);
  #L4c53b0.  if v8 == 0 then goto L4c541a;
  #L4c53b4.  if v2 == v1 then goto L4c541a;
  #L4c53b8.  v8:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c53bc.  if v8 == 0 then goto L4c53c2;
  #L4c53c0.  return @kind void;
  #L4c53c2.  v8:= v0[v2] @kind object;
  #L4c53c6.  if v8 != 0 then goto L4c5408;
  #L4c53ca.  v11:= new `java.lang.NullPointerException`;
  #L4c53ce.  v12:= new `java.lang.StringBuilder`;
  #L4c53d2.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c53d8.  v0:= "The element at index " @kind object;
  #L4c53dc.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c53e2.  call temp:= `append`(v12, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c53e8.  v0:= " is null" @kind object;
  #L4c53ec.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c53f2.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c53f8.  v12:= temp @kind object;
  #L4c53fa.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5400.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5406.  return @kind void;
  #L4c5408.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c540e.  v8:= 1L;
  #L4c5412.  v6:= v6 + v8 @kind long;
  #L4c5414.  v2:= v2 + 1;
  #L4c5418.  goto L4c53ac;
  #L4c541a.  if v2 != v1 then goto L4c542e;
  #L4c541e.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c5422.  if v11 != 0 then goto L4c542c;
  #L4c5426.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c542c.  return @kind void;
  #L4c542e.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c5434.  v11:= temp @kind wide;
  #L4c5436.  v8:= lcmp(v6, v11);
  #L4c543a.  if v8 != 0 then goto L4c53ac;
  #L4c543e.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L4c5442.  v11:= -v6 @kind long;
  #L4c5444.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c544a.  v11:= temp @kind wide;
  #L4c544c.  v6:= lcmp(v11, v4);
  #L4c5450.  if v6 != 0 then goto L4c53aa;
  #L4c5454.  return @kind void;
}
