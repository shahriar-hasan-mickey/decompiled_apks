record `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f58d8.  v0:= 0I;
  #L4f58da.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v0];
  #L4f58de.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] := v1 @kind object;
  #L4f58e2.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v0];
  #L4f58e6.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] := v0 @kind object;
  #L4f58ea.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v1 @kind this, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f58fc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f5902.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f5906.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f590c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f5910.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f5914.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f5918.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f591e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f5922.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4f5926.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f592c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5864.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f586a.  v0:= temp @kind object;
  #L4f586c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4f5870.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4f5874.  v2:= 0I;
  #L4f5876.  if v0 != v1 then goto L4f587c;
  #L4f587a.  return v2;
  #L4f587c.  v1:= length @variable v0;
  #L4f587e.  v3:= v1 + 1;
  #L4f5882.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v3];
  #L4f5886.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f588c.  v3[v1]:= v5 @kind object;
  #L4f5890.  call temp:= `compareAndSet`(v4, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f5896.  v0:= temp;
  #L4f5898.  if v0 == 0 then goto L4f5864;
  #L4f589c.  v5:= 1I;
  #L4f589e.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f5a80.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5a86.  v0:= temp @kind object;
  #L4f5a88.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4f5a8c.  v1:= length @variable v0;
  #L4f5a8e.  if v1 != 0 then goto L4f5a94;
  #L4f5a92.  return @kind void;
  #L4f5a94.  v2:= -1I;
  #L4f5a96.  v3:= 0I;
  #L4f5a98.  v4:= 0I;
  #L4f5a9a.  if v4 >= v1 then goto L4f5ab0;
  #L4f5a9e.  v5:= v0[v4] @kind object;
  #L4f5aa2.  if v5 != v7 then goto L4f5aaa;
  #L4f5aa6.  v2:= v4;
  #L4f5aa8.  goto L4f5ab0;
  #L4f5aaa.  v4:= v4 + 1;
  #L4f5aae.  goto L4f5a9a;
  #L4f5ab0.  if v2 >= 0 then goto L4f5ab6;
  #L4f5ab4.  return @kind void;
  #L4f5ab6.  v4:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4f5aba.  v5:= 1I;
  #L4f5abc.  if v1 == v5 then goto L4f5adc;
  #L4f5ac0.  v4:= v1 + -1;
  #L4f5ac4.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[v4];
  #L4f5ac8.  call `arraycopy`(v0, v3, v4, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f5ace.  v3:= v2 + 1;
  #L4f5ad2.  v1:= v1 - v2 @kind int;
  #L4f5ad4.  v1:= v1 - v5 @kind int;
  #L4f5ad6.  call `arraycopy`(v0, v3, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f5adc.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f5ae2.  v0:= temp;
  #L4f5ae4.  if v0 == 0 then goto L4f5a80;
  #L4f5ae8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5940.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4f5944.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f594a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f594e.  v1:= 0I;
  #L4f5950.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f5956.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f595a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f5960.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f58b0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f58b6.  v0:= temp @kind object;
  #L4f58b8.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4f58bc.  if v0 != v1 then goto L4f58c4;
  #L4f58c0.  v0:= 1I;
  #L4f58c2.  goto L4f58c6;
  #L4f58c4.  v0:= 0I;
  #L4f58c6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5974.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5978.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4f597c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f5982.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4f5986.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f598c.  v0:= temp @kind object;
  #L4f598e.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4f5992.  v1:= length @variable v0;
  #L4f5994.  v2:= 0I;
  #L4f5996.  if v2 >= v1 then goto L4f59ae;
  #L4f599a.  v3:= v0[v2] @kind object;
  #L4f599e.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f59a2.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f59a8.  v2:= v2 + 1;
  #L4f59ac.  goto L4f5996;
  #L4f59ae.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f59c0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f59c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f59ca.  v0:= temp @kind object;
  #L4f59cc.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4f59d0.  if v0 == v1 then goto L4f5a0e;
  #L4f59d4.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f59d8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f59dc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f59e2.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L4f59e6.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f59ec.  v0:= temp @kind object;
  #L4f59ee.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4f59f2.  v1:= length @variable v0;
  #L4f59f4.  v2:= 0I;
  #L4f59f6.  if v2 >= v1 then goto L4f5a14;
  #L4f59fa.  v3:= v0[v2] @kind object;
  #L4f59fe.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5a02.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f5a08.  v2:= v2 + 1;
  #L4f5a0c.  goto L4f59f6;
  #L4f5a0e.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f5a14.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5a28.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5a2e.  v0:= temp @kind object;
  #L4f5a30.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L4f5a34.  v1:= length @variable v0;
  #L4f5a36.  v2:= 0I;
  #L4f5a38.  if v2 >= v1 then goto L4f5a50;
  #L4f5a3c.  v3:= v0[v2] @kind object;
  #L4f5a40.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f5a44.  call `onNext`(v3, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f5a4a.  v2:= v2 + 1;
  #L4f5a4e.  goto L4f5a38;
  #L4f5a50.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5a64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5a68.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f5a6e.  return @kind void;
}
