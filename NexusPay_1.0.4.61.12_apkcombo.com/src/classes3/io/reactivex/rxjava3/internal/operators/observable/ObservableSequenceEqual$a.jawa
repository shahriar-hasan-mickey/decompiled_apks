record `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v4 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;ILio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9568.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f956e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f9572.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4f9576.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v4 @kind object;
  #L4f957a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v5 @kind object;
  #L4f957e.  v1:= 2I;
  #L4f9580.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[v1];
  #L4f9584.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] := v3 @kind object;
  #L4f9588.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`;
  #L4f958c.  v5:= 0I;
  #L4f958e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L4f9594.  v3[v5]:= v4 @kind object;
  #L4f9598.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`;
  #L4f959c.  v5:= 1I;
  #L4f959e.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L4f95a4.  v3[v5]:= v4 @kind object;
  #L4f95a8.  v2:= new `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable`;
  #L4f95ac.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L4f95b2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L4f95b6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4f95c8.  v0:= 1I;
  #L4f95ca.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4f95ce.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f95d4.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f95da.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4f9644.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f964a.  v0:= temp;
  #L4f964c.  if v0 == 0 then goto L4f9652;
  #L4f9650.  return @kind void;
  #L4f9652.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4f9656.  v1:= 0I;
  #L4f9658.  v2:= v0[v1] @kind object;
  #L4f965c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f9660.  v4:= 1I;
  #L4f9662.  v0:= v0[v4] @kind object;
  #L4f9666.  v5:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f966a.  v6:= 1I;
  #L4f966c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L4f9670.  if v7 == 0 then goto L4f9682;
  #L4f9674.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f967a.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f9680.  return @kind void;
  #L4f9682.  v7:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L4f9686.  if v7 == 0 then goto L4f96a4;
  #L4f968a.  v8:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4f968e.  if v8 == 0 then goto L4f96a4;
  #L4f9692.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9698.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f969c.  call `onError`(v0, v8) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f96a2.  return @kind void;
  #L4f96a4.  v8:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L4f96a8.  if v8 == 0 then goto L4f96c6;
  #L4f96ac.  v9:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4f96b0.  if v9 == 0 then goto L4f96c6;
  #L4f96b4.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f96ba.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f96be.  call `onError`(v0, v9) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f96c4.  return @kind void;
  #L4f96c6.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L4f96ca.  if v9 != 0 then goto L4f96da;
  #L4f96ce.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f96d4.  v9:= temp @kind object;
  #L4f96d6.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L4f96da.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L4f96de.  if v9 != 0 then goto L4f96e6;
  #L4f96e2.  v9:= 1I;
  #L4f96e4.  goto L4f96e8;
  #L4f96e6.  v9:= 0I;
  #L4f96e8.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L4f96ec.  if v10 != 0 then goto L4f96fc;
  #L4f96f0.  call temp:= `poll`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f96f6.  v10:= temp @kind object;
  #L4f96f8.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L4f96fc.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L4f9700.  if v10 != 0 then goto L4f9708;
  #L4f9704.  v10:= 1I;
  #L4f9706.  goto L4f970a;
  #L4f9708.  v10:= 0I;
  #L4f970a.  if v7 == 0 then goto L4f9734;
  #L4f970e.  if v8 == 0 then goto L4f9734;
  #L4f9712.  if v9 == 0 then goto L4f9734;
  #L4f9716.  if v10 == 0 then goto L4f9734;
  #L4f971a.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f971e.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4f9722.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f9728.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f972c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f9732.  return @kind void;
  #L4f9734.  if v7 == 0 then goto L4f9760;
  #L4f9738.  if v8 == 0 then goto L4f9760;
  #L4f973c.  if v9 == v10 then goto L4f9760;
  #L4f9740.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9746.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f974a.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4f974e.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f9754.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f9758.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f975e.  return @kind void;
  #L4f9760.  if v9 != 0 then goto L4f97c6;
  #L4f9764.  if v10 != 0 then goto L4f97c6;
  #L4f9768.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4f976c.  v8:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L4f9770.  v11:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L4f9774.  call temp:= `test`(v7, v8, v11) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4f977a.  v7:= temp;
  #L4f977c.  if v7 != 0 then goto L4f97a0;
  #L4f9780.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f9786.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f978a.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4f978e.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f9794.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f9798.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f979e.  return @kind void;
  #L4f97a0.  v7:= 0I;
  #L4f97a2.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L4f97a6.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4f97aa.  goto L4f97c6;
  #L4f97ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f97ae.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f97b4.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f97ba.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f97be.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f97c4.  return @kind void;
  #L4f97c6.  if v9 != 0 then goto L4f97ce;
  #L4f97ca.  if v10 == 0 then goto L4f966c;
  #L4f97ce.  v6:= -v6 @kind int;
  #L4f97d0.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f97d6.  v6:= temp;
  #L4f97d8.  if v6 != 0 then goto L4f966c;
  #L4f97dc.  return @kind void;
  catch `java.lang.Throwable` @[L4f9768..L4f977c] goto L4f97ac;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.c:(Lio/reactivex/rxjava3/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L4f9548.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4f954c.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f9552.  v2:= temp;
  #L4f9554.  return v2;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f97fc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4f9800.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f9804.  v2:= 0I;
  #L4f9806.  v2:= v0[v2] @kind object;
  #L4f980a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f9810.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f9814.  v2:= 1I;
  #L4f9816.  v0:= v0[v2] @kind object;
  #L4f981a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f9820.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f95ec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L4f95f0.  if v0 != 0 then goto L4f9632;
  #L4f95f4.  v0:= 1I;
  #L4f95f6.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4f95fa.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4f95fe.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L4f9604.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f960a.  v1:= temp;
  #L4f960c.  if v1 != 0 then goto L4f9632;
  #L4f9610.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4f9614.  v2:= 0I;
  #L4f9616.  v2:= v1[v2] @kind object;
  #L4f961a.  v2:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f961e.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f9624.  v0:= v1[v0] @kind object;
  #L4f9628.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f962c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f9632.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9530.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L4f9534.  return v0;
}
