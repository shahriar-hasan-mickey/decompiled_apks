record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cd448.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cd44e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cd452.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` := v2 @kind object;
  #L4cd456.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cd41c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cd422.  v0:= temp @kind wide;
  #L4cd424.  v2:= -9223372036854775808L;
  #L4cd428.  v4:= lcmp(v0, v2);
  #L4cd42c.  if v4 != 0 then goto L4cd434;
  #L4cd430.  v0:= 1I;
  #L4cd432.  goto L4cd436;
  #L4cd434.  v0:= 0I;
  #L4cd436.  return v0;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cd468.  v0:= -9223372036854775808L;
  #L4cd46c.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4cd472.  v2:= temp @kind wide;
  #L4cd474.  v4:= lcmp(v2, v0);
  #L4cd478.  if v4 == 0 then goto L4cd490;
  #L4cd47c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind object;
  #L4cd480.  call `i`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)V` @kind virtual;
  #L4cd486.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind object;
  #L4cd48a.  call `g`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L4cd490.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd4a4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4cd4aa.  v0:= temp;
  #L4cd4ac.  if v0 == 0 then goto L4cd4c0;
  #L4cd4b0.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cd4b6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind object;
  #L4cd4ba.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L4cd4c0.  return @kind void;
}
