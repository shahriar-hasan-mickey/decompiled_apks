record `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4dfac8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4dface.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4dfad2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4dfad8.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4dfadc.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dfb1c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4dfb20.  v1:= 0I;
  #L4dfb22.  call `lazySet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4dfb28.  v0:= v0 + 1;
  #L4dfb2c.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v0;
  #L4dfb30.  return @kind void;
}
procedure `int` `c`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dfa0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4dfa10.  return v0;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dfaf0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4dfaf6.  v0:= temp @kind object;
  #L4dfaf8.  if v0 == 0 then goto L4dfb0a;
  #L4dfafc.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @kind virtual;
  #L4dfb02.  v0:= temp;
  #L4dfb04.  if v0 != 0 then goto L4dfb0a;
  #L4dfb08.  goto L4dfaf0;
  #L4dfb0a.  return @kind void;
}
procedure `int` `d`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dfa24.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4dfa28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4dfa2e.  v0:= temp;
  #L4dfa30.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df988.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4df98c.  call temp:= `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @kind virtual;
  #L4df992.  v1:= temp;
  #L4df994.  if v0 != v1 then goto L4df99c;
  #L4df998.  v0:= 1I;
  #L4df99a.  goto L4df99e;
  #L4df99c.  v0:= 0I;
  #L4df99e.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df9b0.  v0:= "value is null" @kind object;
  #L4df9b4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4df9ba.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4df9be.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4df9c4.  v0:= temp;
  #L4df9c6.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4df9cc.  v1:= temp;
  #L4df9ce.  if v0 >= v1 then goto L4df9dc;
  #L4df9d2.  call `lazySet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4df9d8.  v3:= 1I;
  #L4df9da.  return v3;
  #L4df9dc.  v3:= 0I;
  #L4df9de.  return v3;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4df9f0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4df9f4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4df9fa.  throw v1;
}
procedure `java.lang.Object` `peek`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dfa44.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4dfa48.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4dfa4e.  v1:= temp;
  #L4dfa50.  if v0 != v1 then goto L4dfa58;
  #L4dfa54.  v0:= 0I;
  #L4dfa56.  return v0 @kind object;
  #L4dfa58.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4dfa5e.  v0:= temp @kind object;
  #L4dfa60.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dfa74.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4dfa78.  call temp:= `length`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4dfa7e.  v1:= temp;
  #L4dfa80.  v2:= 0I;
  #L4dfa82.  if v0 != v1 then goto L4dfa88;
  #L4dfa86.  return v2 @kind object;
  #L4dfa88.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4dfa8c.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4dfa92.  v3:= temp @kind object;
  #L4dfa94.  if v3 == 0 then goto L4dfaa8;
  #L4dfa98.  v1:= v0 + 1;
  #L4dfa9c.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v1;
  #L4dfaa0.  call `lazySet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4dfaa6.  return v3 @kind object;
  #L4dfaa8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4dfaae.  v3:= temp;
  #L4dfab0.  if v3 != v0 then goto L4dfa8c;
  #L4dfab4.  return v2 @kind object;
}
