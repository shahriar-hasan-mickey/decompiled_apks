record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ef910.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ef916.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4ef91a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ef91e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4ef922.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ef926.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ef92c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4ef930.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4ef934.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4ef93a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4ef93e.  v1:= 1I;
  #L4ef940.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4ef946.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4ef990.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ef994.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ef99a.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onComplete:()V` @kind virtual;
  #L4ef9a0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4ef9b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ef9b8.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ef9be.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ef9c4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef958.  v0:= 1I;
  #L4ef95a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4ef95e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ef962.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ef968.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4ef96c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4ef972.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ef976.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4ef97c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef8f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ef8f4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ef8fa.  v0:= temp;
  #L4ef8fc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef9d8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ef9de.  v0:= temp;
  #L4ef9e0.  if v0 != 0 then goto L4ef9f2;
  #L4ef9e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ef9e8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4ef9ec.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4ef9f2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efa04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4efa08.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4efa0e.  v2:= temp;
  #L4efa10.  if v2 == 0 then goto L4efa60;
  #L4efa14.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @type ^`boolean` @kind boolean;
  #L4efa18.  if v2 == 0 then goto L4efa38;
  #L4efa1c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4efa22.  v2:= temp;
  #L4efa24.  if v2 != 0 then goto L4efa60;
  #L4efa28.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4efa2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4efa30.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4efa36.  goto L4efa60;
  #L4efa38.  v2:= 1I;
  #L4efa3a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4efa3e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4efa42.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4efa48.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4efa4c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4efa52.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4efa56.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4efa5a.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4efa60.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4efa74.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4efa78.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4efa7e.  v3:= temp @kind object;
  #L4efa80.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L4efa84.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4efa8a.  v3:= temp @kind object;
  #L4efa8c.  v3:= (`io.reactivex.rxjava3.core.CompletableSource`) v3 @kind object;
  #L4efa90.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4efa96.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a`;
  #L4efa9a.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;)V` @kind direct;
  #L4efaa0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.g` @type ^`boolean` @kind boolean;
  #L4efaa4.  if v1 != 0 then goto L4efabe;
  #L4efaa8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4efaac.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4efab2.  v1:= temp;
  #L4efab4.  if v1 == 0 then goto L4efabe;
  #L4efab8.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4efabe.  return @kind void;
  #L4efac0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4efac2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4efac8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4efacc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4efad2.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4efad8.  return @kind void;
  catch `java.lang.Throwable` @[L4efa74..L4efa90] goto L4efac0;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efaf8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4efafc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4efb02.  v0:= temp;
  #L4efb04.  if v0 == 0 then goto L4efb16;
  #L4efb08.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4efb0c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4efb10.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4efb16.  return @kind void;
}
