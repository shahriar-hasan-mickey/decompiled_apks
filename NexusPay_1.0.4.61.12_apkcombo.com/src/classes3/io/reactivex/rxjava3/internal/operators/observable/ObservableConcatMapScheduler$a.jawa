record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZLio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4eb758.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4eb75e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4eb762.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4eb766.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.c` @type ^`int` := v3;
  #L4eb76a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.f` @type ^`boolean` := v4 @kind boolean;
  #L4eb76e.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4eb772.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4eb778.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4eb77c.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a`;
  #L4eb780.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;)V` @kind direct;
  #L4eb786.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` := v2 @kind object;
  #L4eb78a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4eb78e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4eb7e0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eb7e6.  v0:= temp;
  #L4eb7e8.  if v0 == 0 then goto L4eb7ee;
  #L4eb7ec.  return @kind void;
  #L4eb7ee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4eb7f2.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4eb7f8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb7a0.  v0:= 1I;
  #L4eb7a2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4eb7a6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eb7aa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eb7b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` @kind object;
  #L4eb7b4.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a$a;.a:()V` @kind virtual;
  #L4eb7ba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4eb7be.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eb7c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb7c8.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4eb7ce.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb740.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` @kind boolean;
  #L4eb744.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb80c.  v0:= 1I;
  #L4eb80e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4eb812.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4eb818.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb82c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb830.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eb836.  v2:= temp;
  #L4eb838.  if v2 == 0 then goto L4eb848;
  #L4eb83c.  v2:= 1I;
  #L4eb83e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` := v2 @kind boolean;
  #L4eb842.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4eb848.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb85c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @type ^`int`;
  #L4eb860.  if v0 != 0 then goto L4eb86e;
  #L4eb864.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eb868.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4eb86e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4eb874.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eb888.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eb88c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4eb892.  v0:= temp;
  #L4eb894.  if v0 == 0 then goto L4eb90c;
  #L4eb898.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4eb89c.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4eb8a0.  if v0 == 0 then goto L4eb8f0;
  #L4eb8a4.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4eb8a8.  v0:= 3I;
  #L4eb8aa.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4eb8b0.  v0:= temp;
  #L4eb8b2.  v1:= 1I;
  #L4eb8b4.  if v0 != v1 then goto L4eb8d6;
  #L4eb8b8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @type ^`int` := v0;
  #L4eb8bc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb8c0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` := v1 @kind boolean;
  #L4eb8c4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb8c8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb8ce.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4eb8d4.  return @kind void;
  #L4eb8d6.  v1:= 2I;
  #L4eb8d8.  if v0 != v1 then goto L4eb8f0;
  #L4eb8dc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @type ^`int` := v0;
  #L4eb8e0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb8e4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb8e8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb8ee.  return @kind void;
  #L4eb8f0.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4eb8f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.c` @type ^`int`;
  #L4eb8f8.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4eb8fe.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb902.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb906.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb90c.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4eb920.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb924.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eb928.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eb92c.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.j` @type ^`boolean` @kind boolean;
  #L4eb930.  if v3 != 0 then goto L4eba78;
  #L4eb934.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` @kind boolean;
  #L4eb938.  if v3 == 0 then goto L4eb944;
  #L4eb93c.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb942.  return @kind void;
  #L4eb944.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.f` @type ^`boolean` @kind boolean;
  #L4eb948.  v4:= 1I;
  #L4eb94a.  if v3 != 0 then goto L4eb97a;
  #L4eb94e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eb954.  v3:= temp @kind object;
  #L4eb956.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4eb95a.  if v3 == 0 then goto L4eb97a;
  #L4eb95e.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eb964.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4eb968.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb96e.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4eb972.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eb978.  return @kind void;
  #L4eb97a.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` @kind boolean;
  #L4eb97e.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4eb984.  v5:= temp @kind object;
  #L4eb986.  if v5 != 0 then goto L4eb98e;
  #L4eb98a.  v6:= 1I;
  #L4eb98c.  goto L4eb990;
  #L4eb98e.  v6:= 0I;
  #L4eb990.  if v3 == 0 then goto L4eb9ae;
  #L4eb994.  if v6 == 0 then goto L4eb9ae;
  #L4eb998.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4eb99c.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eb9a2.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4eb9a6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eb9ac.  return @kind void;
  #L4eb9ae.  if v6 != 0 then goto L4eba78;
  #L4eb9b2.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4eb9b6.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eb9bc.  v3:= temp @kind object;
  #L4eb9be.  v5:= "The mapper returned a null ObservableSource" @kind object;
  #L4eb9c2.  call temp:= `requireNonNull`(v3, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb9c8.  v3:= temp @kind object;
  #L4eb9ca.  v3:= (`io.reactivex.rxjava3.core.ObservableSource`) v3 @kind object;
  #L4eb9ce.  v5:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4eb9d2.  if v5 == 0 then goto L4eba06;
  #L4eb9d6.  v3:= (`io.reactivex.rxjava3.functions.Supplier`) v3 @kind object;
  #L4eb9da.  call temp:= `get`(v3) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4eb9e0.  v3:= temp @kind object;
  #L4eb9e2.  if v3 == 0 then goto L4eb92c;
  #L4eb9e6.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` @kind boolean;
  #L4eb9ea.  if v4 != 0 then goto L4eb92c;
  #L4eb9ee.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4eb9f4.  goto L4eb92c;
  #L4eb9f6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eb9f8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eb9fe.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eba04.  goto L4eb92c;
  #L4eba06.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.j` @type ^`boolean` := v4 @kind boolean;
  #L4eba0a.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` @kind object;
  #L4eba0e.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4eba14.  goto L4eba78;
  #L4eba16.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eba18.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eba1e.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4eba22.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eba26.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eba2c.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eba32.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eba38.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eba3e.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4eba42.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eba48.  return @kind void;
  #L4eba4a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eba4c.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eba52.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4eba56.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eba5a.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eba60.  call temp:= `tryAddThrowableOrReport`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4eba66.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4eba6c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4eba70.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eba76.  return @kind void;
  #L4eba78.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eba7e.  v3:= temp;
  #L4eba80.  if v3 != 0 then goto L4eb92c;
  #L4eba84.  return @kind void;
  catch `java.lang.Throwable` @[L4eb97e..L4eb986] goto L4eba4a;
  catch `java.lang.Throwable` @[L4eb9b2..L4eb9ce] goto L4eba16;
  catch `java.lang.Throwable` @[L4eb9d6..L4eb9e2] goto L4eb9f6;
}
