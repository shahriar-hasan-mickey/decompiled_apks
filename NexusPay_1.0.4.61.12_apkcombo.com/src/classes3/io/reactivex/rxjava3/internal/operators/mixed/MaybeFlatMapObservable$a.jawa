record `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e48b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e48ba.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4e48be.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e48c2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4e48d4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e48da.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e488c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e4892.  v0:= temp @kind object;
  #L4e4894.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e4898.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e489e.  v0:= temp;
  #L4e48a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e48ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e48f0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4e48f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4908.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e490c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e4912.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4924.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e4928.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e492e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e4940.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e4946.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4958.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e495c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e4962.  v2:= temp @kind object;
  #L4e4964.  v0:= "The mapper returned a null Publisher" @kind object;
  #L4e4968.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e496e.  v2:= temp @kind object;
  #L4e4970.  v2:= (`io.reactivex.rxjava3.core.ObservableSource`) v2 @kind object;
  #L4e4974.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapObservable$a;.isDisposed:()Z` @kind virtual;
  #L4e497a.  v0:= temp;
  #L4e497c.  if v0 != 0 then goto L4e4986;
  #L4e4980.  call `subscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e4986.  return @kind void;
  #L4e4988.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e498a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e4990.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e4994.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e499a.  return @kind void;
  catch `java.lang.Throwable` @[L4e4958..L4e4974] goto L4e4988;
}
