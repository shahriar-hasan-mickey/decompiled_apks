record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.subscribers.DisposableSubscriber` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b8498.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L4b849e.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L4b84a2.  v1:= 1I;
  #L4b84a4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L4b84aa.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L4b84ae.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4b84b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b84b8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4b84bc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v2 @kind this, `io.reactivex.rxjava3.core.Notification` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b84fc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8500.  v1:= 0I;
  #L4b8502.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4b8508.  v0:= temp;
  #L4b850a.  v1:= 1I;
  #L4b850c.  if v0 == v1 then goto L4b851c;
  #L4b8510.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b8516.  v0:= temp;
  #L4b8518.  if v0 != 0 then goto L4b8550;
  #L4b851c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4b8520.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b8526.  v0:= temp;
  #L4b8528.  if v0 != 0 then goto L4b8550;
  #L4b852c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4b8530.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b8536.  v0:= temp @kind object;
  #L4b8538.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4b853c.  if v0 == 0 then goto L4b851c;
  #L4b8540.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b8546.  v1:= temp;
  #L4b8548.  if v1 != 0 then goto L4b851c;
  #L4b854c.  v3:= v0 @kind object;
  #L4b854e.  goto L4b851c;
  #L4b8550.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b8580.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8584.  v1:= 1I;
  #L4b8586.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4b858c.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Notification` `c`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8468.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @kind virtual;
  #L4b846e.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b8474.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4b8478.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4b847e.  v0:= temp @kind object;
  #L4b8480.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4b8484.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4b84d0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b84e4.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b84ea.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b8564.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L4b8568.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L4b856e.  return @kind void;
}
