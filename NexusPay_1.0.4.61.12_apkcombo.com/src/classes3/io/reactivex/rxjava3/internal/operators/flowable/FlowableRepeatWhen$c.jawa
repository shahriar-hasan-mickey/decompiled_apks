record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.h` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.rxjava3.processors.FlowableProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.i` @AccessFlag PROTECTED_FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.j` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.k` @AccessFlag PRIVATE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.processors.FlowableProcessor` v3 @kind object, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ceed8.  v0:= 0I;
  #L4ceeda.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4ceee0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4ceee4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.i` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` := v3 @kind object;
  #L4ceee8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.j` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4ceeec.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$c;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4cef50.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L4cef56.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cef5a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cef60.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$c;.e:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cef00.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.rxjava3.internal.subscriptions.EmptySubscription` @kind object;
  #L4cef04.  call `setSubscription`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4cef0a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` @kind wide;
  #L4cef0e.  v2:= 0L;
  #L4cef12.  v4:= lcmp(v0, v2);
  #L4cef16.  if v4 == 0 then goto L4cef24;
  #L4cef1a.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` := v2 @kind wide;
  #L4cef1e.  call `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4cef24.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cef28.  v1:= 1L;
  #L4cef2c.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cef32.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.i` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4cef36.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cef3c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cef74.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` @kind wide;
  #L4cef78.  v2:= 1L;
  #L4cef7c.  v0:= v0 + v2 @kind long;
  #L4cef7e.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` := v0 @kind wide;
  #L4cef82.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cef86.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cef8c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4cefa0.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4cefa6.  return @kind void;
}
