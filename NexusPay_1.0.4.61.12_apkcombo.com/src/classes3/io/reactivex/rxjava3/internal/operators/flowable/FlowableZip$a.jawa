record `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @AccessFlag VOLATILE;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d9bc8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d9bce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d9bd2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d9bd6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` := v5 @kind boolean;
  #L4d9bda.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[v3];
  #L4d9bde.  v2:= 0I;
  #L4d9be0.  if v2 >= v3 then goto L4d9bf8;
  #L4d9be4.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`;
  #L4d9be8.  call `<init>`(v5, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;I)V` @kind direct;
  #L4d9bee.  v1[v2]:= v5 @kind object;
  #L4d9bf2.  v2:= v2 + 1;
  #L4d9bf6.  goto L4d9be0;
  #L4d9bf8.  v2:= new `java.lang.Object`[v3];
  #L4d9bfc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.h` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4d9c00.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] := v1 @kind object;
  #L4d9c04.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d9c08.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d9c0e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d9c12.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d9c16.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d9c1c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4d9c20.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d9c5c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L4d9c60.  v1:= length @variable v0;
  #L4d9c62.  v2:= 0I;
  #L4d9c64.  if v2 >= v1 then goto L4d9c78;
  #L4d9c68.  v3:= v0[v2] @kind object;
  #L4d9c6c.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.cancel:()V` @kind virtual;
  #L4d9c72.  v2:= v2 + 1;
  #L4d9c76.  goto L4d9c64;
  #L4d9c78.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v20 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L4d9c8c.  v1:= v20 @kind object;
  #L4d9c90.  call temp:= `getAndIncrement`(v20) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d9c96.  v0:= temp;
  #L4d9c98.  if v0 == 0 then goto L4d9c9e;
  #L4d9c9c.  return @kind void;
  #L4d9c9e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d9ca2.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L4d9ca6.  v4:= length @variable v3;
  #L4d9ca8.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.h` @type ^`java.lang.Object`[] @kind object;
  #L4d9cac.  v7:= 1I;
  #L4d9cae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d9cb2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d9cb8.  v8:= temp @kind wide;
  #L4d9cba.  v10:= 0L;
  #L4d9cbe.  v12:= v10 @kind wide;
  #L4d9cc0.  v14:= 0I;
  #L4d9cc2.  v16:= lcmp(v8, v12);
  #L4d9cc6.  if v16 == 0 then goto L4d9dfc;
  #L4d9cca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4d9cce.  if v0 == 0 then goto L4d9cd4;
  #L4d9cd2.  return @kind void;
  #L4d9cd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4d9cd8.  if v0 != 0 then goto L4d9cfe;
  #L4d9cdc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9ce0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9ce6.  v0:= temp @kind object;
  #L4d9ce8.  if v0 == 0 then goto L4d9cfe;
  #L4d9cec.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9cf2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9cf6.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d9cfc.  return @kind void;
  #L4d9cfe.  v6:= 0I;
  #L4d9d00.  v17:= 0I;
  #L4d9d04.  if v6 >= v4 then goto L4d9d9c;
  #L4d9d08.  v0:= v3[v6] @kind object;
  #L4d9d0c.  v18:= v5[v6] @kind object;
  #L4d9d10.  if v18 != 0 then goto L4d9d96;
  #L4d9d14.  v15:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` @kind boolean;
  #L4d9d18.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d9d1c.  if v0 == 0 then goto L4d9d5e;
  #L4d9d20.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d9d26.  v0:= temp @kind object;
  #L4d9d28.  goto L4d9d60;
  #L4d9d2a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d9d2c.  v15:= v0 @kind object;
  #L4d9d2e.  call `throwIfFatal`(v15) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d9d34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9d38.  call temp:= `tryAddThrowableOrReport`(v0, v15) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d9d3e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4d9d42.  if v0 != 0 then goto L4d9d58;
  #L4d9d46.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9d4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9d50.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d9d56.  return @kind void;
  #L4d9d58.  v0:= v14 @kind object;
  #L4d9d5a.  v15:= 1I;
  #L4d9d5c.  goto L4d9d60;
  #L4d9d5e.  v0:= v14 @kind object;
  #L4d9d60.  if v0 != 0 then goto L4d9d6a;
  #L4d9d64.  v19:= 1I;
  #L4d9d68.  goto L4d9d6e;
  #L4d9d6a.  v19:= 0I;
  #L4d9d6e.  if v15 == 0 then goto L4d9d88;
  #L4d9d72.  if v19 == 0 then goto L4d9d88;
  #L4d9d76.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9d7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9d80.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d9d86.  return @kind void;
  #L4d9d88.  if v19 != 0 then goto L4d9d92;
  #L4d9d8c.  v5[v6]:= v0 @kind object;
  #L4d9d90.  goto L4d9d96;
  #L4d9d92.  v17:= 1I;
  #L4d9d96.  v6:= v6 + 1;
  #L4d9d9a.  goto L4d9d04;
  #L4d9d9c.  if v17 == 0 then goto L4d9da2;
  #L4d9da0.  goto L4d9dfc;
  #L4d9da2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d9da6.  call temp:= `clone`(v5) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4d9dac.  v6:= temp @kind object;
  #L4d9dae.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d9db4.  v0:= temp @kind object;
  #L4d9db6.  v6:= "The zipper returned a null value" @kind object;
  #L4d9dba.  call temp:= `requireNonNull`(v0, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d9dc0.  v0:= temp @kind object;
  #L4d9dc2.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d9dc8.  v15:= 1L;
  #L4d9dcc.  v12:= v12 + v15 @kind long;
  #L4d9dce.  call `fill`(v5, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d9dd4.  goto L4d9cc0;
  #L4d9dd8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d9dda.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d9de0.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9de6.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9dea.  call temp:= `tryAddThrowableOrReport`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d9df0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9df4.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d9dfa.  return @kind void;
  #L4d9dfc.  if v16 != 0 then goto L4d9ec8;
  #L4d9e00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4d9e04.  if v0 == 0 then goto L4d9e0a;
  #L4d9e08.  return @kind void;
  #L4d9e0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4d9e0e.  if v0 != 0 then goto L4d9e34;
  #L4d9e12.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9e16.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9e1c.  v0:= temp @kind object;
  #L4d9e1e.  if v0 == 0 then goto L4d9e34;
  #L4d9e22.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9e28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9e2c.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d9e32.  return @kind void;
  #L4d9e34.  v6:= 0I;
  #L4d9e36.  if v6 >= v4 then goto L4d9ec8;
  #L4d9e3a.  v0:= v3[v6] @kind object;
  #L4d9e3e.  v15:= v5[v6] @kind object;
  #L4d9e42.  if v15 != 0 then goto L4d9ec2;
  #L4d9e46.  v15:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` @kind boolean;
  #L4d9e4a.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d9e4e.  if v0 == 0 then goto L4d9e90;
  #L4d9e52.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d9e58.  v0:= temp @kind object;
  #L4d9e5a.  goto L4d9e92;
  #L4d9e5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d9e5e.  v15:= v0 @kind object;
  #L4d9e60.  call `throwIfFatal`(v15) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d9e66.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9e6a.  call temp:= `tryAddThrowableOrReport`(v0, v15) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d9e70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4d9e74.  if v0 != 0 then goto L4d9e8a;
  #L4d9e78.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9e7e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9e82.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d9e88.  return @kind void;
  #L4d9e8a.  v0:= v14 @kind object;
  #L4d9e8c.  v15:= 1I;
  #L4d9e8e.  goto L4d9e92;
  #L4d9e90.  v0:= v14 @kind object;
  #L4d9e92.  if v0 != 0 then goto L4d9e9c;
  #L4d9e96.  v16:= 1I;
  #L4d9e9a.  goto L4d9ea0;
  #L4d9e9c.  v16:= 0I;
  #L4d9ea0.  if v15 == 0 then goto L4d9eba;
  #L4d9ea4.  if v16 == 0 then goto L4d9eba;
  #L4d9ea8.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9eae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9eb2.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d9eb8.  return @kind void;
  #L4d9eba.  if v16 != 0 then goto L4d9ec2;
  #L4d9ebe.  v5[v6]:= v0 @kind object;
  #L4d9ec2.  v6:= v6 + 1;
  #L4d9ec6.  goto L4d9e36;
  #L4d9ec8.  v0:= lcmp(v12, v10);
  #L4d9ecc.  if v0 == 0 then goto L4d9f06;
  #L4d9ed0.  v0:= length @variable v3;
  #L4d9ed2.  v15:= 0I;
  #L4d9ed4.  if v15 >= v0 then goto L4d9ee8;
  #L4d9ed8.  v6:= v3[v15] @kind object;
  #L4d9edc.  call `request`(v6, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.request:(J)V` @kind virtual;
  #L4d9ee2.  v15:= v15 + 1;
  #L4d9ee6.  goto L4d9ed4;
  #L4d9ee8.  v10:= 9223372036854775807L;
  #L4d9ef2.  v0:= lcmp(v8, v10);
  #L4d9ef6.  if v0 == 0 then goto L4d9f06;
  #L4d9efa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d9efe.  v8:= -v12 @kind long;
  #L4d9f00.  call temp:= `addAndGet`(v0, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4d9f06.  v0:= -v7 @kind int;
  #L4d9f08.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d9f0e.  v7:= temp;
  #L4d9f10.  if v7 != 0 then goto L4d9cae;
  #L4d9f14.  return @kind void;
  catch `java.lang.Throwable` @[L4d9d20..L4d9d28] goto L4d9d2a;
  catch `java.lang.Throwable` @[L4d9da2..L4d9dc2] goto L4d9dd8;
  catch `java.lang.Throwable` @[L4d9e52..L4d9e5a] goto L4d9e5c;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4d9f4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9f50.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d9f56.  v3:= temp;
  #L4d9f58.  if v3 == 0 then goto L4d9f68;
  #L4d9f5c.  v3:= 1I;
  #L4d9f5e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v3 @kind boolean;
  #L4d9f62.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4d9f68.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9c34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4d9c38.  if v0 != 0 then goto L4d9c48;
  #L4d9c3c.  v0:= 1I;
  #L4d9c3e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4d9c42.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4d9c48.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.d:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d9fac.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L4d9fb0.  v1:= 0I;
  #L4d9fb2.  if v1 >= v6 then goto L4d9fec;
  #L4d9fb6.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4d9fba.  if v2 != 0 then goto L4d9fec;
  #L4d9fbe.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4d9fc2.  if v2 != 0 then goto L4d9fd8;
  #L4d9fc6.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9fca.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9fd0.  v2:= temp @kind object;
  #L4d9fd2.  if v2 == 0 then goto L4d9fd8;
  #L4d9fd6.  goto L4d9fec;
  #L4d9fd8.  v2:= v5[v1] @kind object;
  #L4d9fdc.  v3:= v0[v1] @kind object;
  #L4d9fe0.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d9fe6.  v1:= v1 + 1;
  #L4d9fea.  goto L4d9fb2;
  #L4d9fec.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d9f7c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d9f82.  v0:= temp;
  #L4d9f84.  if v0 == 0 then goto L4d9f98;
  #L4d9f88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d9f8c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d9f92.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4d9f98.  return @kind void;
}
