record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.j` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4cc8c8.  v0:= 0I;
  #L4cc8ca.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v0];
  #L4cc8ce.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] := v1 @kind object;
  #L4cc8d2.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v0];
  #L4cc8d6.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] := v0 @kind object;
  #L4cc8da.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cc8ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cc8f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cc8f6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cc8fa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cc900.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cc904.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4cc908.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4cc90e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4cc912.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int` := v2;
  #L4cc916.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cc91a.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L4cc91e.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4cc924.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cc928.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cc7dc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc7e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cc7e6.  v0:= temp @kind object;
  #L4cc7e8.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v0 @kind object;
  #L4cc7ec.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L4cc7f0.  v2:= 0I;
  #L4cc7f2.  if v0 != v1 then goto L4cc7f8;
  #L4cc7f6.  return v2;
  #L4cc7f8.  v1:= length @variable v0;
  #L4cc7fa.  v3:= v1 + 1;
  #L4cc7fe.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v3];
  #L4cc802.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cc808.  v3[v1]:= v5 @kind object;
  #L4cc80c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc810.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cc816.  v0:= temp;
  #L4cc818.  if v0 == 0 then goto L4cc7dc;
  #L4cc81c.  v5:= 1I;
  #L4cc81e.  return v5;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v3 @kind this, `boolean` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.b:(ZZ)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4cc830.  v0:= 0I;
  #L4cc832.  if v4 == 0 then goto L4cc888;
  #L4cc836.  if v5 == 0 then goto L4cc888;
  #L4cc83a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @type ^`java.lang.Throwable` @kind object;
  #L4cc83e.  if v4 == 0 then goto L4cc84a;
  #L4cc842.  call `e`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cc848.  goto L4cc884;
  #L4cc84a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc84e.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L4cc852.  call temp:= `getAndSet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cc858.  v4:= temp @kind object;
  #L4cc85a.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v4 @kind object;
  #L4cc85e.  v5:= length @variable v4;
  #L4cc860.  if v0 >= v5 then goto L4cc884;
  #L4cc864.  v1:= v4[v0] @kind object;
  #L4cc868.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L4cc86e.  v2:= temp;
  #L4cc870.  if v2 != 0 then goto L4cc87e;
  #L4cc874.  v1:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cc878.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cc87e.  v0:= v0 + 1;
  #L4cc882.  goto L4cc860;
  #L4cc884.  v4:= 1I;
  #L4cc886.  return v4;
  #L4cc888.  return v0;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v21 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L4cc974.  v1:= v21 @kind object;
  #L4cc978.  call temp:= `getAndIncrement`(v21) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cc97e.  v0:= temp;
  #L4cc980.  if v0 == 0 then goto L4cc986;
  #L4cc984.  return @kind void;
  #L4cc986.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cc98a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.j` @type ^`int`;
  #L4cc98e.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L4cc992.  v4:= v3 ^> 2;
  #L4cc996.  v3:= v3 - v4 @kind int;
  #L4cc998.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int`;
  #L4cc99c.  v6:= 1I;
  #L4cc99e.  if v4 == v6 then goto L4cc9a6;
  #L4cc9a2.  v4:= 1I;
  #L4cc9a4.  goto L4cc9a8;
  #L4cc9a6.  v4:= 0I;
  #L4cc9a8.  v7:= 1I;
  #L4cc9aa.  v20:= v2;
  #L4cc9ae.  v2:= v0 @kind object;
  #L4cc9b0.  v0:= v20;
  #L4cc9b4.  if v2 == 0 then goto L4ccb14;
  #L4cc9b8.  v8:= 9223372036854775807L;
  #L4cc9c2.  v10:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc9c6.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cc9cc.  v10:= temp @kind object;
  #L4cc9ce.  v10:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v10 @kind object;
  #L4cc9d2.  v11:= length @variable v10;
  #L4cc9d4.  v12:= 0I;
  #L4cc9d6.  v13:= 0I;
  #L4cc9d8.  if v12 >= v11 then goto L4cca0c;
  #L4cc9dc.  v14:= v10[v12] @kind object;
  #L4cc9e0.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cc9e6.  v15:= temp @kind wide;
  #L4cc9e8.  v17:= -9223372036854775808L;
  #L4cc9ec.  v19:= lcmp(v15, v17);
  #L4cc9f0.  if v19 == 0 then goto L4cca06;
  #L4cc9f4.  v13:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.c` @type ^`long` @kind wide;
  #L4cc9f8.  v13:= v15 - v13 @kind long;
  #L4cc9fc.  call temp:= `min`(v13, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4cca02.  v8:= temp @kind wide;
  #L4cca04.  v13:= 1I;
  #L4cca06.  v12:= v12 + 1;
  #L4cca0a.  goto L4cc9d8;
  #L4cca0c.  v11:= 0L;
  #L4cca10.  if v13 != 0 then goto L4cca16;
  #L4cca14.  v8:= v11 @kind wide;
  #L4cca16.  v13:= lcmp(v8, v11);
  #L4cca1a.  if v13 == 0 then goto L4ccafa;
  #L4cca1e.  v13:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` @kind boolean;
  #L4cca22.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cca28.  v14:= temp @kind object;
  #L4cca2a.  if v14 != 0 then goto L4cca32;
  #L4cca2e.  v15:= 1I;
  #L4cca30.  goto L4cca34;
  #L4cca32.  v15:= 0I;
  #L4cca34.  call temp:= `b`(v1, v13, v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.b:(ZZ)Z` @kind virtual;
  #L4cca3a.  v13:= temp;
  #L4cca3c.  if v13 == 0 then goto L4cca42;
  #L4cca40.  return @kind void;
  #L4cca42.  if v15 == 0 then goto L4cca48;
  #L4cca46.  goto L4ccafa;
  #L4cca48.  v13:= length @variable v10;
  #L4cca4a.  v15:= 0I;
  #L4cca4c.  v16:= 1L;
  #L4cca50.  if v15 >= v13 then goto L4cca84;
  #L4cca54.  v5:= v10[v15] @kind object;
  #L4cca58.  call temp:= `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L4cca5e.  v19:= temp;
  #L4cca60.  if v19 != 0 then goto L4cca7a;
  #L4cca64.  v11:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cca68.  call `onNext`(v11, v14) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cca6e.  v11:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.c` @type ^`long` @kind wide;
  #L4cca72.  v11:= v11 + v16 @kind long;
  #L4cca76.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.c` @type ^`long` := v11 @kind wide;
  #L4cca7a.  v15:= v15 + 1;
  #L4cca7e.  v11:= 0L;
  #L4cca82.  goto L4cca4c;
  #L4cca84.  if v4 == 0 then goto L4ccaaa;
  #L4cca88.  v0:= v0 + 1;
  #L4cca8c.  if v0 != v3 then goto L4ccaaa;
  #L4cca90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cca94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cca9a.  v0:= temp @kind object;
  #L4cca9c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4ccaa0.  v11:= (`long`) v3 @kind i2l;
  #L4ccaa2.  call `request`(v0, v11) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ccaa8.  v0:= 0I;
  #L4ccaaa.  v8:= v8 - v16 @kind long;
  #L4ccaae.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccab2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ccab8.  v5:= temp @kind object;
  #L4ccaba.  if v10 == v5 then goto L4ccac2;
  #L4ccabe.  goto L4cc9b4;
  #L4ccac2.  v11:= 0L;
  #L4ccac6.  goto L4cca16;
  #L4ccac8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ccaca.  v3:= v0 @kind object;
  #L4ccacc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ccad2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccad6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ccadc.  v0:= temp @kind object;
  #L4ccade.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4ccae2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ccae8.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ccaee.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v6 @kind boolean;
  #L4ccaf2.  call `e`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ccaf8.  return @kind void;
  #L4ccafa.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` @kind boolean;
  #L4ccafe.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ccb04.  v8:= temp;
  #L4ccb06.  call temp:= `b`(v1, v5, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.b:(ZZ)Z` @kind virtual;
  #L4ccb0c.  v5:= temp;
  #L4ccb0e.  if v5 == 0 then goto L4ccb14;
  #L4ccb12.  return @kind void;
  #L4ccb14.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.j` @type ^`int` := v0;
  #L4ccb18.  v5:= -v7 @kind int;
  #L4ccb1a.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ccb20.  v7:= temp;
  #L4ccb22.  if v7 != 0 then goto L4ccb28;
  #L4ccb26.  return @kind void;
  #L4ccb28.  if v2 != 0 then goto L4cc9b4;
  #L4ccb2c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ccb30.  goto L4cc9b4;
  catch `java.lang.Throwable` @[L4cca22..L4cca2a] goto L4ccac8;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ccc7c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccc80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ccc86.  v0:= temp @kind object;
  #L4ccc88.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v0 @kind object;
  #L4ccc8c.  v1:= length @variable v0;
  #L4ccc8e.  if v1 != 0 then goto L4ccc94;
  #L4ccc92.  goto L4cccf0;
  #L4ccc94.  v2:= -1I;
  #L4ccc96.  v3:= 0I;
  #L4ccc98.  v4:= 0I;
  #L4ccc9a.  if v4 >= v1 then goto L4cccb0;
  #L4ccc9e.  v5:= v0[v4] @kind object;
  #L4ccca2.  if v5 != v7 then goto L4cccaa;
  #L4ccca6.  v2:= v4;
  #L4ccca8.  goto L4cccb0;
  #L4cccaa.  v4:= v4 + 1;
  #L4cccae.  goto L4ccc9a;
  #L4cccb0.  if v2 >= 0 then goto L4cccb6;
  #L4cccb4.  return @kind void;
  #L4cccb6.  v4:= 1I;
  #L4cccb8.  if v1 != v4 then goto L4cccc2;
  #L4cccbc.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L4cccc0.  goto L4ccce0;
  #L4cccc2.  v5:= v1 + -1;
  #L4cccc6.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v5];
  #L4cccca.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cccd0.  v3:= v2 + 1;
  #L4cccd4.  v1:= v1 - v2 @kind int;
  #L4cccd6.  v1:= v1 - v4 @kind int;
  #L4cccd8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cccde.  v1:= v5 @kind object;
  #L4ccce0.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccce4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cccea.  v0:= temp;
  #L4cccec.  if v0 == 0 then goto L4ccc7c;
  #L4cccf0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cc93c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc940.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L4cc944.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cc94a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc94e.  v1:= 0I;
  #L4cc950.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cc956.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc95a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cc960.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ccd04.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccd08.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L4ccd0c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ccd12.  v0:= temp @kind object;
  #L4ccd14.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v0 @kind object;
  #L4ccd18.  v1:= length @variable v0;
  #L4ccd1a.  v2:= 0I;
  #L4ccd1c.  if v2 >= v1 then goto L4ccd40;
  #L4ccd20.  v3:= v0[v2] @kind object;
  #L4ccd24.  call temp:= `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L4ccd2a.  v4:= temp;
  #L4ccd2c.  if v4 != 0 then goto L4ccd3a;
  #L4ccd30.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ccd34.  call `onError`(v3, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ccd3a.  v2:= v2 + 1;
  #L4ccd3e.  goto L4ccd1c;
  #L4ccd40.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cc89c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cc8a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cc8a6.  v0:= temp @kind object;
  #L4cc8a8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L4cc8ac.  if v0 != v1 then goto L4cc8b4;
  #L4cc8b0.  v0:= 1I;
  #L4cc8b2.  goto L4cc8b6;
  #L4cc8b4.  v0:= 0I;
  #L4cc8b6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccb50.  v0:= 1I;
  #L4ccb52.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4ccb56.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L4ccb5c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccb70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` @kind boolean;
  #L4ccb74.  if v0 == 0 then goto L4ccb80;
  #L4ccb78.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ccb7e.  goto L4ccb90;
  #L4ccb80.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4ccb84.  v2:= 1I;
  #L4ccb86.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4ccb8a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L4ccb90.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccba4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int`;
  #L4ccba8.  if v0 != 0 then goto L4ccbd2;
  #L4ccbac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ccbb0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ccbb6.  v2:= temp;
  #L4ccbb8.  if v2 != 0 then goto L4ccbd2;
  #L4ccbbc.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4ccbc0.  v0:= "Prefetch queue is full?!" @kind object;
  #L4ccbc4.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ccbca.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ccbd0.  return @kind void;
  #L4ccbd2.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L4ccbd8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ccbec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccbf0.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ccbf6.  v0:= temp;
  #L4ccbf8.  if v0 == 0 then goto L4ccc68;
  #L4ccbfc.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4ccc00.  if v0 == 0 then goto L4ccc4a;
  #L4ccc04.  v0:= v4 @kind object;
  #L4ccc06.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4ccc0a.  v1:= 7I;
  #L4ccc0c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4ccc12.  v1:= temp;
  #L4ccc14.  v2:= 1I;
  #L4ccc16.  if v1 != v2 then goto L4ccc2e;
  #L4ccc1a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int` := v1;
  #L4ccc1e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4ccc22.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4ccc26.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L4ccc2c.  return @kind void;
  #L4ccc2e.  v2:= 2I;
  #L4ccc30.  if v1 != v2 then goto L4ccc4a;
  #L4ccc34.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int` := v1;
  #L4ccc38.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4ccc3c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L4ccc40.  v0:= (`long`) v0 @kind i2l;
  #L4ccc42.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ccc48.  return @kind void;
  #L4ccc4a.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4ccc4e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L4ccc52.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4ccc58.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4ccc5c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L4ccc60.  v0:= (`long`) v0 @kind i2l;
  #L4ccc62.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ccc68.  return @kind void;
}
