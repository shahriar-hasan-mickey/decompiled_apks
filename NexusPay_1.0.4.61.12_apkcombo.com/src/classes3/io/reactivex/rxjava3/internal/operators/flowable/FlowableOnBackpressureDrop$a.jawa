record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cbcb4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cbcba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cbcbe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4cbcc2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbcd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cbcd8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cbcde.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbcf0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` @kind boolean;
  #L4cbcf4.  if v0 == 0 then goto L4cbcfa;
  #L4cbcf8.  return @kind void;
  #L4cbcfa.  v0:= 1I;
  #L4cbcfc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4cbd00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cbd04.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cbd0a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbd1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` @kind boolean;
  #L4cbd20.  if v0 == 0 then goto L4cbd2c;
  #L4cbd24.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cbd2a.  return @kind void;
  #L4cbd2c.  v0:= 1I;
  #L4cbd2e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4cbd32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cbd36.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cbd3c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cbd50.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` @kind boolean;
  #L4cbd54.  if v0 == 0 then goto L4cbd5a;
  #L4cbd58.  return @kind void;
  #L4cbd5a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cbd60.  v0:= temp @kind wide;
  #L4cbd62.  v2:= 0L;
  #L4cbd66.  v4:= lcmp(v0, v2);
  #L4cbd6a.  if v4 == 0 then goto L4cbd84;
  #L4cbd6e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cbd72.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cbd78.  v0:= 1L;
  #L4cbd7c.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cbd82.  goto L4cbda4;
  #L4cbd84.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4cbd88.  call `accept`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4cbd8e.  goto L4cbda4;
  #L4cbd90.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cbd92.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cbd98.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.cancel:()V` @kind virtual;
  #L4cbd9e.  call `onError`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cbda4.  return @kind void;
  catch `java.lang.Throwable` @[L4cbd84..L4cbd8e] goto L4cbd90;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cbdc4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cbdc8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cbdce.  v0:= temp;
  #L4cbdd0.  if v0 == 0 then goto L4cbdf2;
  #L4cbdd4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4cbdd8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cbddc.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cbde2.  v0:= 9223372036854775807L;
  #L4cbdec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cbdf2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureDrop$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbe04.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4cbe0a.  v0:= temp;
  #L4cbe0c.  if v0 == 0 then goto L4cbe16;
  #L4cbe10.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cbe16.  return @kind void;
}
