record `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.functions.Consumer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f66b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f66be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` := v1 @kind object;
  #L4f66c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f66d4.  call temp:= `replace`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f66da.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4f66de.  @monitorenter v2
  #L4f66e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.e` @type ^`boolean` @kind boolean;
  #L4f66e4.  if v0 == 0 then goto L4f66f6;
  #L4f66e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4f66ec.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4f66f0.  call `reset`(v0) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.reset:()V` @kind virtual;
  #L4f66f6.  @monitorexit v2
  #L4f66f8.  return @kind void;
  #L4f66fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f66fc.  @monitorexit v2
  #L4f66fe.  throw v0;
  catch `java.lang.Throwable` @[L4f66e0..L4f66fe] goto L4f66fa;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4f671c.  v1:= (`io.reactivex.rxjava3.disposables.Disposable`) v1 @kind object;
  #L4f6720.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4f6726.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6738.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4f673c.  call `c`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4f6742.  return @kind void;
}
