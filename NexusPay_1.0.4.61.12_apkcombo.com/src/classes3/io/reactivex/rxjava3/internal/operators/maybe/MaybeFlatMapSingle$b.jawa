record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4de2ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4de2b2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4de2b6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v2 @kind object;
  #L4de2ba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de2cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de2d0.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4de2d6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de2e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4de2ec.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4de2f2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de304.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de308.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4de30e.  return @kind void;
}
