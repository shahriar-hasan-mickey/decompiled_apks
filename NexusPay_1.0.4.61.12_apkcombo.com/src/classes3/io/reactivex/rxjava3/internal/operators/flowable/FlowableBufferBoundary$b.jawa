record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ba120.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ba126.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` := v1 @kind object;
  #L4ba12a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.b` @type ^`long` := v2 @kind wide;
  #L4ba12e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4ba140.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ba146.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ba0f8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ba0fe.  v0:= temp @kind object;
  #L4ba100.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ba104.  if v0 != v1 then goto L4ba10c;
  #L4ba108.  v0:= 1I;
  #L4ba10a.  goto L4ba10e;
  #L4ba10c.  v0:= 0I;
  #L4ba10e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ba158.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ba15e.  v0:= temp @kind object;
  #L4ba160.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ba164.  if v0 == v1 then goto L4ba17c;
  #L4ba168.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4ba16e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L4ba172.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.b` @type ^`long` @kind wide;
  #L4ba176.  call `b`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;J)V` @kind virtual;
  #L4ba17c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ba190.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ba196.  v0:= temp @kind object;
  #L4ba198.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ba19c.  if v0 == v1 then goto L4ba1b2;
  #L4ba1a0.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4ba1a6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L4ba1aa.  call `a`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L4ba1b0.  goto L4ba1b8;
  #L4ba1b2.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba1b8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ba1cc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ba1d2.  v3:= temp @kind object;
  #L4ba1d4.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4ba1d8.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ba1dc.  if v3 == v0 then goto L4ba1fa;
  #L4ba1e0.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4ba1e6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ba1ec.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$a` @kind object;
  #L4ba1f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b.b` @type ^`long` @kind wide;
  #L4ba1f4.  call `b`(v3, v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;J)V` @kind virtual;
  #L4ba1fa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ba20c.  v0:= 9223372036854775807L;
  #L4ba216.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4ba21c.  return @kind void;
}
