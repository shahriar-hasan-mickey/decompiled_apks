record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c423c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c4242.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c4246.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c424a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4c424e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int` := v4;
  #L4c4252.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c4256.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c425c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4c4260.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4c4264.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4c426a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4c426e.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c4272.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c4278.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4c427c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c4280.  v2:= 1I;
  #L4c4282.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4c4288.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4c428c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c4290.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c4296.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c429a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4c42e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c42e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c42ee.  v0:= temp @kind object;
  #L4c42f0.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4c42f4.  if v0 == 0 then goto L4c42fe;
  #L4c42f8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c42fe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4c4310.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c4316.  v0:= temp;
  #L4c4318.  if v0 != 0 then goto L4c4322;
  #L4c431c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L4c4322.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4c4334.  v0:= v17 @kind object;
  #L4c4338.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c433c.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c4340.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4344.  v4:= 1I;
  #L4c4346.  v5:= 1I;
  #L4c4348.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c434c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c4352.  v6:= temp @kind wide;
  #L4c4354.  v8:= 0L;
  #L4c4358.  v10:= v8 @kind wide;
  #L4c435a.  v12:= 0I;
  #L4c435c.  v13:= lcmp(v10, v6);
  #L4c4360.  if v13 == 0 then goto L4c440a;
  #L4c4364.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4c4368.  if v14 == 0 then goto L4c4374;
  #L4c436c.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4c4372.  return @kind void;
  #L4c4374.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4c4378.  if v14 != 0 then goto L4c43a6;
  #L4c437c.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c4380.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4386.  v14:= temp @kind object;
  #L4c4388.  v14:= (`java.lang.Throwable`) v14 @kind object;
  #L4c438c.  if v14 == 0 then goto L4c43a6;
  #L4c4390.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4c4396.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c439a.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c439e.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c43a4.  return @kind void;
  #L4c43a6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c43ac.  v14:= temp;
  #L4c43ae.  if v14 != 0 then goto L4c43b6;
  #L4c43b2.  v14:= 1I;
  #L4c43b4.  goto L4c43b8;
  #L4c43b6.  v14:= 0I;
  #L4c43b8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c43be.  v15:= temp @kind object;
  #L4c43c0.  v15:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v15 @kind object;
  #L4c43c4.  if v15 == 0 then goto L4c43d2;
  #L4c43c8.  call temp:= `poll`(v15) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c43ce.  v15:= temp @kind object;
  #L4c43d0.  goto L4c43d4;
  #L4c43d2.  v15:= 0I;
  #L4c43d4.  if v15 != 0 then goto L4c43de;
  #L4c43d8.  v16:= 1I;
  #L4c43dc.  goto L4c43e2;
  #L4c43de.  v16:= 0I;
  #L4c43e2.  if v14 == 0 then goto L4c43f6;
  #L4c43e6.  if v16 == 0 then goto L4c43f6;
  #L4c43ea.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c43ee.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c43f4.  return @kind void;
  #L4c43f6.  if v16 == 0 then goto L4c43fc;
  #L4c43fa.  goto L4c440a;
  #L4c43fc.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c4402.  v12:= 1L;
  #L4c4406.  v10:= v10 + v12 @kind long;
  #L4c4408.  goto L4c435a;
  #L4c440a.  if v13 != 0 then goto L4c4490;
  #L4c440e.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4c4412.  if v6 == 0 then goto L4c441e;
  #L4c4416.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4c441c.  return @kind void;
  #L4c441e.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4c4422.  if v6 != 0 then goto L4c444c;
  #L4c4426.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c442a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4430.  v6:= temp @kind object;
  #L4c4432.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4c4436.  if v6 == 0 then goto L4c444c;
  #L4c443a.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4c4440.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c4444.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c444a.  return @kind void;
  #L4c444c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c4452.  v6:= temp;
  #L4c4454.  if v6 != 0 then goto L4c445c;
  #L4c4458.  v6:= 1I;
  #L4c445a.  goto L4c445e;
  #L4c445c.  v6:= 0I;
  #L4c445e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4464.  v7:= temp @kind object;
  #L4c4466.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4c446a.  if v7 == 0 then goto L4c447a;
  #L4c446e.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4c4474.  v7:= temp;
  #L4c4476.  if v7 == 0 then goto L4c447c;
  #L4c447a.  v12:= 1I;
  #L4c447c.  if v6 == 0 then goto L4c4490;
  #L4c4480.  if v12 == 0 then goto L4c4490;
  #L4c4484.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c4488.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c448e.  return @kind void;
  #L4c4490.  v6:= lcmp(v10, v8);
  #L4c4494.  if v6 == 0 then goto L4c44ba;
  #L4c4498.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c449c.  call temp:= `produced`(v6, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c44a2.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L4c44a6.  v7:= 2147483647I;
  #L4c44ac.  if v6 == v7 then goto L4c44ba;
  #L4c44b0.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c44b4.  call `request`(v6, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c44ba.  v5:= -v5 @kind int;
  #L4c44bc.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c44c2.  v5:= temp;
  #L4c44c4.  if v5 != 0 then goto L4c4348;
  #L4c44c8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c42ac.  v0:= 1I;
  #L4c42ae.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4c42b2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c42b6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c42bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c42c0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c42c6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c42ca.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c42d0.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c41dc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c41e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c41e6.  v0:= temp @kind object;
  #L4c41e8.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4c41ec.  if v0 == 0 then goto L4c41f2;
  #L4c41f0.  return v0 @kind object;
  #L4c41f2.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c41f6.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4c41fc.  v1:= temp;
  #L4c41fe.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c4204.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4208.  v2:= 0I;
  #L4c420a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c4210.  v1:= temp;
  #L4c4212.  if v1 == 0 then goto L4c4218;
  #L4c4216.  return v0 @kind object;
  #L4c4218.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c421c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c4222.  v0:= temp @kind object;
  #L4c4224.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4c4228.  return v0 @kind object;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c44dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c44e0.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c44e6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c44ea.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c44f0.  v3:= temp;
  #L4c44f2.  if v3 == 0 then goto L4c4540;
  #L4c44f6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4c44fa.  if v3 != 0 then goto L4c4514;
  #L4c44fe.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4502.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c4508.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c450c.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c4512.  goto L4c4530;
  #L4c4514.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L4c4518.  v4:= 2147483647I;
  #L4c451e.  if v3 == v4 then goto L4c4530;
  #L4c4522.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4526.  v0:= 1L;
  #L4c452a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c4530.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c4534.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c453a.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4c4540.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a$a` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c4554.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c4558.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c455e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c4564.  v6:= temp;
  #L4c4566.  if v6 != 0 then goto L4c4630;
  #L4c456a.  v6:= 0I;
  #L4c456c.  v0:= 1I;
  #L4c456e.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c4574.  v1:= temp;
  #L4c4576.  if v1 == 0 then goto L4c4630;
  #L4c457a.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c457e.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c4584.  v1:= temp;
  #L4c4586.  if v1 != 0 then goto L4c458c;
  #L4c458a.  v6:= 1I;
  #L4c458c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c4590.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c4596.  v0:= temp @kind wide;
  #L4c4598.  v2:= 0L;
  #L4c459c.  v4:= lcmp(v0, v2);
  #L4c45a0.  if v4 == 0 then goto L4c460a;
  #L4c45a4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c45a8.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c45ae.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c45b2.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c45b8.  v7:= temp @kind object;
  #L4c45ba.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4c45be.  if v6 == 0 then goto L4c45e2;
  #L4c45c2.  if v7 == 0 then goto L4c45d2;
  #L4c45c6.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4c45cc.  v6:= temp;
  #L4c45ce.  if v6 == 0 then goto L4c45e2;
  #L4c45d2.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c45d6.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c45da.  call `tryTerminateConsumer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c45e0.  return @kind void;
  #L4c45e2.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c45e6.  v0:= 1L;
  #L4c45ea.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c45f0.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L4c45f4.  v7:= 2147483647I;
  #L4c45fa.  if v6 == v7 then goto L4c461c;
  #L4c45fe.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4602.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c4608.  goto L4c461c;
  #L4c460a.  call temp:= `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4c4610.  v6:= temp @kind object;
  #L4c4612.  @monitorenter v6
  #L4c4614.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c461a.  @monitorexit v6
  #L4c461c.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c4622.  v6:= temp;
  #L4c4624.  if v6 != 0 then goto L4c465a;
  #L4c4628.  return @kind void;
  #L4c462a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c462c.  @monitorexit v6
  #L4c462e.  throw v7;
  #L4c4630.  call temp:= `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4c4636.  v6:= temp @kind object;
  #L4c4638.  @monitorenter v6
  #L4c463a.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c4640.  @monitorexit v6
  #L4c4642.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c4646.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c464c.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c4652.  v6:= temp;
  #L4c4654.  if v6 == 0 then goto L4c465a;
  #L4c4658.  return @kind void;
  #L4c465a.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L4c4660.  return @kind void;
  #L4c4662.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c4664.  @monitorexit v6
  #L4c4666.  throw v7;
  catch `java.lang.Throwable` @[L4c4614..L4c461c] goto L4c462a;
  catch `java.lang.Throwable` @[L4c462c..L4c462e] goto L4c462a;
  catch `java.lang.Throwable` @[L4c463a..L4c4642] goto L4c4662;
  catch `java.lang.Throwable` @[L4c4664..L4c4666] goto L4c4662;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c46a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c46a4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c46aa.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4c46b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c46c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c46c8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c46ce.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c46d2.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c46d8.  v2:= temp;
  #L4c46da.  if v2 == 0 then goto L4c46f6;
  #L4c46de.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4c46e2.  if v2 != 0 then goto L4c46f0;
  #L4c46e6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c46ea.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c46f0.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4c46f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c4708.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c470c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c4712.  v3:= temp @kind object;
  #L4c4714.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4c4718.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c471e.  v3:= temp @kind object;
  #L4c4720.  v3:= (`io.reactivex.rxjava3.core.SingleSource`) v3 @kind object;
  #L4c4724.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c4728.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c472e.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a$a`;
  #L4c4732.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;)V` @kind direct;
  #L4c4738.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L4c473c.  if v1 != 0 then goto L4c4756;
  #L4c4740.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c4744.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c474a.  v1:= temp;
  #L4c474c.  if v1 == 0 then goto L4c4756;
  #L4c4750.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4c4756.  return @kind void;
  #L4c4758.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c475a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4760.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4764.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c476a.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c4770.  return @kind void;
  catch `java.lang.Throwable` @[L4c4708..L4c4724] goto L4c4758;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c4790.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4794.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c479a.  v0:= temp;
  #L4c479c.  if v0 == 0 then goto L4c47d6;
  #L4c47a0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4c47a4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c47a8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c47ae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L4c47b2.  v1:= 2147483647I;
  #L4c47b8.  if v0 != v1 then goto L4c47ce;
  #L4c47bc.  v0:= 9223372036854775807L;
  #L4c47c6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c47cc.  goto L4c47d6;
  #L4c47ce.  v0:= (`long`) v0 @kind i2l;
  #L4c47d0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c47d6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c47e8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c47ee.  v0:= temp;
  #L4c47f0.  if v0 == 0 then goto L4c4804;
  #L4c47f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c47f8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c47fe.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4c4804.  return @kind void;
}
