record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind class {
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bec24.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4bec2a.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bec2e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bec34.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L4bec38.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4bec3c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bec42.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4bec46.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.c:()V` @AccessFlag  {
    temp;

  #L4bedd0.  call `f`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L4bedd6.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4bede8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bedec.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bedf2.  v0:= temp;
  #L4bedf4.  if v0 != 0 then goto L4bee02;
  #L4bedf8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bedfc.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bee02.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.e:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bebe8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L4bebec.  if v0 != 0 then goto L4bec10;
  #L4bebf0.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bebf6.  v0:= temp;
  #L4bebf8.  if v0 == 0 then goto L4bebfe;
  #L4bebfc.  goto L4bec10;
  #L4bebfe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4bec02.  v2:= 1I;
  #L4bec04.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v2 @kind boolean;
  #L4bec08.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L4bec0e.  return v2;
  #L4bec10.  v2:= 0I;
  #L4bec12.  return v2;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4bec58.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bec5c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bec62.  v0:= temp;
  #L4bec64.  if v0 == 0 then goto L4bec6a;
  #L4bec68.  return @kind void;
  #L4bec6a.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bec6e.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bec72.  v2:= 1I;
  #L4bec74.  v3:= 1I;
  #L4bec76.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4bec7c.  v4:= temp @kind wide;
  #L4bec7e.  v6:= 0L;
  #L4bec82.  v8:= v6 @kind wide;
  #L4bec84.  v10:= lcmp(v8, v4);
  #L4bec88.  if v10 == 0 then goto L4becea;
  #L4bec8c.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bec92.  v11:= temp;
  #L4bec94.  if v11 == 0 then goto L4beca0;
  #L4bec98.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bec9e.  return @kind void;
  #L4beca0.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L4beca4.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4becaa.  v12:= temp @kind object;
  #L4becac.  if v12 != 0 then goto L4becb4;
  #L4becb0.  v13:= 1I;
  #L4becb2.  goto L4becb6;
  #L4becb4.  v13:= 0I;
  #L4becb6.  if v11 == 0 then goto L4becd6;
  #L4becba.  if v13 == 0 then goto L4becd6;
  #L4becbe.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L4becc2.  if v0 == 0 then goto L4becce;
  #L4becc6.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4beccc.  goto L4becd4;
  #L4becce.  call `a`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L4becd4.  return @kind void;
  #L4becd6.  if v13 == 0 then goto L4becdc;
  #L4becda.  goto L4becea;
  #L4becdc.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bece2.  v10:= 1L;
  #L4bece6.  v8:= v8 + v10 @kind long;
  #L4bece8.  goto L4bec84;
  #L4becea.  if v10 != 0 then goto L4bed2e;
  #L4becee.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4becf4.  v4:= temp;
  #L4becf6.  if v4 == 0 then goto L4bed02;
  #L4becfa.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bed00.  return @kind void;
  #L4bed02.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L4bed06.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4bed0c.  v5:= temp;
  #L4bed0e.  if v4 == 0 then goto L4bed2e;
  #L4bed12.  if v5 == 0 then goto L4bed2e;
  #L4bed16.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L4bed1a.  if v0 == 0 then goto L4bed26;
  #L4bed1e.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bed24.  goto L4bed2c;
  #L4bed26.  call `a`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L4bed2c.  return @kind void;
  #L4bed2e.  v4:= lcmp(v8, v6);
  #L4bed32.  if v4 == 0 then goto L4bed3c;
  #L4bed36.  call temp:= `produced`(v14, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4bed3c.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bed40.  v3:= -v3 @kind int;
  #L4bed42.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bed48.  v3:= temp;
  #L4bed4a.  if v3 != 0 then goto L4bec76;
  #L4bed4e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bed60.  v0:= 1I;
  #L4bed62.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4bed66.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L4bed6c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bed80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L4bed84.  if v0 != 0 then goto L4bedbe;
  #L4bed88.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4bed8e.  v0:= temp;
  #L4bed90.  if v0 == 0 then goto L4bed96;
  #L4bed94.  goto L4bedbe;
  #L4bed96.  if v2 != 0 then goto L4bedae;
  #L4bed9a.  v2:= "onNext called with a null value." @kind object;
  #L4bed9e.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4beda4.  v2:= temp @kind object;
  #L4beda6.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bedac.  return @kind void;
  #L4bedae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bedb2.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bedb8.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L4bedbe.  return @kind void;
}
