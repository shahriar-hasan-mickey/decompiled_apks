record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.functions.BiConsumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollect$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bb888.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4bb88e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.a` @type ^`io.reactivex.rxjava3.functions.BiConsumer` := v3 @kind object;
  #L4bb892.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4bb896.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollect$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb8a8.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L4bb8ae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bb8b2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bb8b8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollect$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb8cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` @kind boolean;
  #L4bb8d0.  if v0 == 0 then goto L4bb8d6;
  #L4bb8d4.  return @kind void;
  #L4bb8d6.  v0:= 1I;
  #L4bb8d8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4bb8dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.b` @type ^`java.lang.Object` @kind object;
  #L4bb8e0.  call `complete`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4bb8e6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollect$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb8f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` @kind boolean;
  #L4bb8fc.  if v0 == 0 then goto L4bb908;
  #L4bb900.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bb906.  return @kind void;
  #L4bb908.  v0:= 1I;
  #L4bb90a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4bb90e.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bb912.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bb918.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollect$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb92c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` @kind boolean;
  #L4bb930.  if v0 == 0 then goto L4bb936;
  #L4bb934.  return @kind void;
  #L4bb936.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.a` @type ^`io.reactivex.rxjava3.functions.BiConsumer` @kind object;
  #L4bb93a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.b` @type ^`java.lang.Object` @kind object;
  #L4bb93e.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4bb944.  goto L4bb95e;
  #L4bb946.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb948.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bb94e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bb952.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bb958.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollect$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb95e.  return @kind void;
  catch `java.lang.Throwable` @[L4bb936..L4bb944] goto L4bb946;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollect$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb97c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bb980.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4bb986.  v0:= temp;
  #L4bb988.  if v0 == 0 then goto L4bb9aa;
  #L4bb98c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4bb990.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bb994.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bb99a.  v0:= 9223372036854775807L;
  #L4bb9a4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bb9aa.  return @kind void;
}
