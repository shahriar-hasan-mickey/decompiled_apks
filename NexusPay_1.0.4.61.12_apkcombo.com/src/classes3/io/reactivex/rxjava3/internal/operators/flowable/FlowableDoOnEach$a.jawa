record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Action` v4 @kind object, `io.reactivex.rxjava3.functions.Action` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c1350.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L4c1356.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4c135a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L4c135e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.rxjava3.functions.Action` := v4 @kind object;
  #L4c1362.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` := v5 @kind object;
  #L4c1366.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c1378.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c137c.  if v0 == 0 then goto L4c1382;
  #L4c1380.  return @kind void;
  #L4c1382.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c1386.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c138c.  v0:= 1I;
  #L4c138e.  v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4c1392.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c1396.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c139c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c13a0.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c13a6.  goto L4c13b6;
  #L4c13a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c13aa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c13b0.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c13b6.  return @kind void;
  #L4c13b8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c13ba.  call `fail`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c13c0.  return @kind void;
  catch `java.lang.Throwable` @[L4c1382..L4c138c] goto L4c13b8;
  catch `java.lang.Throwable` @[L4c139c..L4c13a6] goto L4c13a8;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c13ec.  v0:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c13f0.  if v0 == 0 then goto L4c13fc;
  #L4c13f4.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c13fa.  return @kind void;
  #L4c13fc.  v0:= 1I;
  #L4c13fe.  v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4c1402.  v1:= 0I;
  #L4c1404.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c1408.  call `accept`(v2, v7) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c140e.  goto L4c143c;
  #L4c1410.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c1412.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c1418.  v3:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c141c.  v4:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4c1420.  v5:= 2I;
  #L4c1422.  v5:= new `java.lang.Throwable`[v5];
  #L4c1426.  v5[v1]:= v7 @kind object;
  #L4c142a.  v5[v0]:= v2 @kind object;
  #L4c142e.  call `<init>`(v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4c1434.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c143a.  v0:= 0I;
  #L4c143c.  if v0 == 0 then goto L4c144a;
  #L4c1440.  v0:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c1444.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c144a.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c144e.  call `run`(v7) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c1454.  goto L4c1464;
  #L4c1456.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c1458.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c145e.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c1464.  return @kind void;
  catch `java.lang.Throwable` @[L4c1404..L4c140e] goto L4c1410;
  catch `java.lang.Throwable` @[L4c144a..L4c1454] goto L4c1456;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c1490.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c1494.  if v0 == 0 then goto L4c149a;
  #L4c1498.  return @kind void;
  #L4c149a.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c149e.  if v0 == 0 then goto L4c14b0;
  #L4c14a2.  v2:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c14a6.  v0:= 0I;
  #L4c14a8.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c14ae.  return @kind void;
  #L4c14b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c14b4.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c14ba.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c14be.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c14c4.  return @kind void;
  #L4c14c6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c14c8.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c14ce.  return @kind void;
  catch `java.lang.Throwable` @[L4c14b0..L4c14ba] goto L4c14c6;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c1234.  v0:= 0I;
  #L4c1236.  v1:= 2I;
  #L4c1238.  v2:= 1I;
  #L4c123a.  v3:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c123e.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c1244.  v3:= temp @kind object;
  #L4c1246.  if v3 == 0 then goto L4c12aa;
  #L4c124a.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c124e.  call `accept`(v4, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c1254.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c1258.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c125e.  goto L4c12c6;
  #L4c1260.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c1262.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c1268.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c126c.  call `accept`(v4, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c1272.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L4c1278.  v0:= temp @kind object;
  #L4c127a.  throw v0;
  #L4c127c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c127e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c1284.  v5:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4c1288.  v1:= new `java.lang.Throwable`[v1];
  #L4c128c.  v1[v0]:= v3 @kind object;
  #L4c1290.  v1[v2]:= v4 @kind object;
  #L4c1294.  call `<init>`(v5, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4c129a.  throw v5;
  #L4c129c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c129e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c12a2.  call `run`(v1) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c12a8.  throw v0;
  #L4c12aa.  v0:= v6.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c12ae.  if v0 != v2 then goto L4c12c6;
  #L4c12b2.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c12b6.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c12bc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c12c0.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c12c6.  return v3 @kind object;
  #L4c12c8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c12ca.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c12d0.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c12d4.  call `accept`(v4, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c12da.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L4c12e0.  v0:= temp @kind object;
  #L4c12e2.  throw v0;
  #L4c12e4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c12e6.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c12ec.  v5:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4c12f0.  v1:= new `java.lang.Throwable`[v1];
  #L4c12f4.  v1[v0]:= v3 @kind object;
  #L4c12f8.  v1[v2]:= v4 @kind object;
  #L4c12fc.  call `<init>`(v5, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4c1302.  throw v5;
  catch `java.lang.Throwable` @[L4c123a..L4c1246] goto L4c12c8;
  catch `java.lang.Throwable` @[L4c124a..L4c1254] goto L4c1260;
  catch `java.lang.Throwable` @[L4c1262..L4c1268] goto L4c129c;
  catch `java.lang.Throwable` @[L4c1268..L4c1272] goto L4c127c;
  catch `java.lang.Throwable` @[L4c1272..L4c129c] goto L4c129c;
  catch `java.lang.Throwable` @[L4c12d0..L4c12da] goto L4c12e4;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c1218.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c121e.  v1:= temp;
  #L4c1220.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEach$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c11cc.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c11d0.  v1:= 0I;
  #L4c11d2.  if v0 == 0 then goto L4c11d8;
  #L4c11d6.  return v1;
  #L4c11d8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c11dc.  call `accept`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c11e2.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c11e6.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c11ec.  v3:= temp;
  #L4c11ee.  return v3;
  #L4c11f0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c11f2.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c11f8.  return v1;
  catch `java.lang.Throwable` @[L4c11d8..L4c11e2] goto L4c11f0;
}
