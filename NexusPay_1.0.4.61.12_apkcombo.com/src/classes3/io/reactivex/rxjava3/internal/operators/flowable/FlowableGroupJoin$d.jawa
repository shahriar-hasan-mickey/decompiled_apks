record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c7910.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c7916.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` := v1 @kind object;
  #L4c791a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.b` @type ^`boolean` := v2 @kind boolean;
  #L4c791e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4c7930.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c7936.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c78e8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c78ee.  v0:= temp @kind object;
  #L4c78f0.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c78f4.  if v0 != v1 then goto L4c78fc;
  #L4c78f8.  v0:= 1I;
  #L4c78fa.  goto L4c78fe;
  #L4c78fc.  v0:= 0I;
  #L4c78fe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7948.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L4c794c.  call `d`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;)V` @kind interface;
  #L4c7952.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7964.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L4c7968.  call `a`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c796e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7980.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L4c7984.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d.b` @type ^`boolean` @kind boolean;
  #L4c7988.  call `b`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;.b:(ZLjava/lang/Object;)V` @kind interface;
  #L4c798e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c79a0.  v0:= 9223372036854775807L;
  #L4c79aa.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4c79b0.  return @kind void;
}
