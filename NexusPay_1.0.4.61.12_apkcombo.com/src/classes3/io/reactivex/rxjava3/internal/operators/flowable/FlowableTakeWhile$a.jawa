record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d4aac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d4ab2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d4ab6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4d4aba.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4acc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4ad0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d4ad6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4ae8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4d4aec.  if v0 == 0 then goto L4d4af2;
  #L4d4af0.  return @kind void;
  #L4d4af2.  v0:= 1I;
  #L4d4af4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d4af8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4afc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d4b02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4b14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4d4b18.  if v0 == 0 then goto L4d4b24;
  #L4d4b1c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d4b22.  return @kind void;
  #L4d4b24.  v0:= 1I;
  #L4d4b26.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d4b2a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4b2e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d4b34.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4b48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4d4b4c.  if v0 == 0 then goto L4d4b52;
  #L4d4b50.  return @kind void;
  #L4d4b52.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d4b56.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4d4b5c.  v0:= temp;
  #L4d4b5e.  if v0 != 0 then goto L4d4b7e;
  #L4d4b62.  v2:= 1I;
  #L4d4b64.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4d4b68.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4b6c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d4b72.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4b76.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d4b7c.  return @kind void;
  #L4d4b7e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4b82.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d4b88.  return @kind void;
  #L4d4b8a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d4b8c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d4b92.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4b96.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d4b9c.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d4ba2.  return @kind void;
  catch `java.lang.Throwable` @[L4d4b52..L4d4b5e] goto L4d4b8a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4bc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4bc4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d4bca.  v0:= temp;
  #L4d4bcc.  if v0 == 0 then goto L4d4bde;
  #L4d4bd0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d4bd4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4bd8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d4bde.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeWhile$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4bf0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4bf4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d4bfa.  return @kind void;
}
