record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.n` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d8d1c.  v0:= new `java.lang.Object`;
  #L4d8d20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d8d26.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @type ^`java.lang.Object` := v0 @kind object;
  #L4d8d2a.  v0:= new `java.lang.Object`;
  #L4d8d2e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d8d34.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @type ^`java.lang.Object` := v0 @kind object;
  #L4d8d38.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object, `long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v13 @kind object, `int` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d8d4c.  v0:= v6 @kind object;
  #L4d8d4e.  v1:= v7 @kind object;
  #L4d8d50.  v2:= v8 @kind wide;
  #L4d8d52.  v4:= v12 @kind object;
  #L4d8d54.  v5:= v14;
  #L4d8d56.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4d8d5c.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.n` @type ^`long` := v10 @kind wide;
  #L4d8d60.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v13 @kind object;
  #L4d8d64.  v7:= new `java.util.LinkedList`;
  #L4d8d68.  call `<init>`(v7) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4d8d6e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` := v7 @kind object;
  #L4d8d72.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4d8db4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d8db8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d8dbe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4d8dd0.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8dd4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d8dda.  v0:= temp;
  #L4d8ddc.  if v0 != 0 then goto L4d8ed8;
  #L4d8de0.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d8de4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d8dea.  v0:= temp @kind wide;
  #L4d8dec.  v2:= 0L;
  #L4d8df0.  v4:= 1I;
  #L4d8df2.  v5:= lcmp(v0, v2);
  #L4d8df6.  if v5 == 0 then goto L4d8ea4;
  #L4d8dfa.  v0:= 1L;
  #L4d8dfe.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4d8e02.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d8e06.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d8e0c.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4d8e10.  call temp:= `create`(v0, v15) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d8e16.  v0:= temp @kind object;
  #L4d8e18.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` @kind object;
  #L4d8e1c.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4d8e22.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d8e26.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d8e2c.  v2:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8e30.  call `onNext`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d8e36.  v2:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d8e3a.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d$a`;
  #L4d8e3e.  v5:= 0I;
  #L4d8e40.  call `<init>`(v3, v15, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;Z)V` @kind direct;
  #L4d8e46.  v5:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4d8e4a.  v7:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d8e4e.  call temp:= `schedule`(v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d8e54.  v8:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d8e58.  v9:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d$a`;
  #L4d8e5c.  call `<init>`(v9, v15, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;Z)V` @kind direct;
  #L4d8e62.  v12:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.n` @type ^`long` @kind wide;
  #L4d8e66.  v14:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d8e6a.  v10:= v12 @kind wide;
  #L4d8e6c.  call temp:= `schedulePeriodically`(v8, v9, v10, v12, v14) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d8e72.  call temp:= `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d8e78.  v1:= temp;
  #L4d8e7a.  if v1 == 0 then goto L4d8e8e;
  #L4d8e7e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d8e84.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` @kind object;
  #L4d8e88.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4d8e8e.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8e92.  v1:= 9223372036854775807L;
  #L4d8e9c.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d8ea2.  goto L4d8ed8;
  #L4d8ea4.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8ea8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d8eae.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8eb2.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d8eb6.  v2:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d8eba.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4d8ec0.  v2:= temp @kind object;
  #L4d8ec2.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d8ec8.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8ece.  call `a`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @kind virtual;
  #L4d8ed4.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4d8ed8.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4d8eec.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d8ef2.  v0:= temp;
  #L4d8ef4.  if v0 == 0 then goto L4d8efa;
  #L4d8ef8.  return @kind void;
  #L4d8efa.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d8efe.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8f02.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.p` @type ^`java.util.List` @kind object;
  #L4d8f06.  v3:= 1I;
  #L4d8f08.  v4:= 1I;
  #L4d8f0a.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` @kind boolean;
  #L4d8f0e.  if v5 == 0 then goto L4d8f22;
  #L4d8f12.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d8f18.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4d8f1e.  goto L4d90fa;
  #L4d8f22.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` @kind boolean;
  #L4d8f26.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d8f2c.  v6:= temp @kind object;
  #L4d8f2e.  v7:= 0I;
  #L4d8f30.  if v6 != 0 then goto L4d8f38;
  #L4d8f34.  v8:= 1I;
  #L4d8f36.  goto L4d8f3a;
  #L4d8f38.  v8:= 0I;
  #L4d8f3a.  if v5 == 0 then goto L4d8fb4;
  #L4d8f3e.  if v8 == 0 then goto L4d8fb4;
  #L4d8f42.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4d8f46.  if v5 == 0 then goto L4d8f7a;
  #L4d8f4a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d8f50.  v6:= temp @kind object;
  #L4d8f52.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d8f58.  v7:= temp;
  #L4d8f5a.  if v7 == 0 then goto L4d8f72;
  #L4d8f5e.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d8f64.  v7:= temp @kind object;
  #L4d8f66.  v7:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v7 @kind object;
  #L4d8f6a.  call `onError`(v7, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d8f70.  goto L4d8f52;
  #L4d8f72.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8f78.  goto L4d8fa8;
  #L4d8f7a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d8f80.  v5:= temp @kind object;
  #L4d8f82.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d8f88.  v6:= temp;
  #L4d8f8a.  if v6 == 0 then goto L4d8fa2;
  #L4d8f8e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d8f94.  v6:= temp @kind object;
  #L4d8f96.  v6:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v6 @kind object;
  #L4d8f9a.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d8fa0.  goto L4d8f82;
  #L4d8fa2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d8fa8.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @kind virtual;
  #L4d8fae.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4d8fb2.  goto L4d8f0a;
  #L4d8fb4.  if v8 != 0 then goto L4d90fa;
  #L4d8fb8.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4d8fbc.  if v6 != v5 then goto L4d90a8;
  #L4d8fc0.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8fc4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d8fca.  v5:= temp;
  #L4d8fcc.  if v5 != 0 then goto L4d8f0a;
  #L4d8fd0.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d8fd4.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d8fd8.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d8fde.  v8:= temp @kind wide;
  #L4d8fe0.  v10:= lcmp(v8, v5);
  #L4d8fe4.  if v10 == 0 then goto L4d9050;
  #L4d8fe8.  v8:= 1L;
  #L4d8fec.  v5:= v5 + v8 @kind long;
  #L4d8fee.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v5 @kind wide;
  #L4d8ff2.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d8ff6.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d8ffc.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4d9000.  call temp:= `create`(v5, v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d9006.  v5:= temp @kind object;
  #L4d9008.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4d900e.  v6:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d9012.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d9018.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d901e.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.o` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d9022.  v9:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d$a`;
  #L4d9026.  call `<init>`(v9, v12, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;Z)V` @kind direct;
  #L4d902c.  v10:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4d9030.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d9034.  call temp:= `schedule`(v8, v9, v10, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d903a.  call temp:= `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d9040.  v6:= temp;
  #L4d9042.  if v6 == 0 then goto L4d8f0a;
  #L4d9046.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d904c.  goto L4d8f0a;
  #L4d9050.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d9054.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d905a.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d905e.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4d9064.  v5:= temp @kind object;
  #L4d9066.  call `<init>`(v7, v5) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d906c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d9072.  v5:= temp @kind object;
  #L4d9074.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d907a.  v6:= temp;
  #L4d907c.  if v6 == 0 then goto L4d9094;
  #L4d9080.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d9086.  v6:= temp @kind object;
  #L4d9088.  v6:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v6 @kind object;
  #L4d908c.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d9092.  goto L4d9074;
  #L4d9094.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d909a.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.a:()V` @kind virtual;
  #L4d90a0.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4d90a4.  goto L4d8f0a;
  #L4d90a8.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @type ^`java.lang.Object` @kind object;
  #L4d90ac.  if v6 != v5 then goto L4d90d2;
  #L4d90b0.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4d90b6.  v5:= temp;
  #L4d90b8.  if v5 != 0 then goto L4d8f0a;
  #L4d90bc.  call temp:= `remove`(v2, v7) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L4d90c2.  v5:= temp @kind object;
  #L4d90c4.  v5:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v5 @kind object;
  #L4d90c8.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d90ce.  goto L4d8f0a;
  #L4d90d2.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d90d8.  v5:= temp @kind object;
  #L4d90da.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d90e0.  v7:= temp;
  #L4d90e2.  if v7 == 0 then goto L4d8f0a;
  #L4d90e6.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d90ec.  v7:= temp @kind object;
  #L4d90ee.  v7:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v7 @kind object;
  #L4d90f2.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4d90f8.  goto L4d90da;
  #L4d90fa.  v4:= -v4 @kind int;
  #L4d90fc.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d9102.  v4:= temp;
  #L4d9104.  if v4 != 0 then goto L4d8f0a;
  #L4d9108.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.e:(Z)V` @AccessFlag  {
    temp;
    v0;

  #L4d8d84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d8d88.  if v2 == 0 then goto L4d8d92;
  #L4d8d8c.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4d8d90.  goto L4d8d96;
  #L4d8d92.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d.r` @type ^`java.lang.Object` @kind object;
  #L4d8d96.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d8d9c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.c:()V` @kind virtual;
  #L4d8da2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4d911c.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L4d9122.  return @kind void;
}
