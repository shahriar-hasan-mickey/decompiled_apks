record `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5074bc.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L5074c2.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L5074c6.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L5074ca.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L5074ce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L5074d4.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L5074d8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5074ec.  v0:= 1I;
  #L5074ee.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L5074f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L5074f6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L5074fc.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L507500.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L507504.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507518.  v0:= 0I;
  #L50751a.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L50751e.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L507530.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L507536.  v0:= temp;
  #L507538.  if v0 == 0 then goto L50753e;
  #L50753c.  return @kind void;
  #L50753e.  v0:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L507542.  v1:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L507546.  v2:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L50754a.  if v2 == 0 then goto L507562;
  #L50754e.  if v1 == 0 then goto L507562;
  #L507552.  v1:= 0I;
  #L507554.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L50755a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L507560.  return @kind void;
  #L507562.  v2:= 1I;
  #L507564.  if v1 == 0 then goto L507616;
  #L507568.  v3:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L50756c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L507572.  v3:= temp @kind wide;
  #L507574.  v5:= 9223372036854775807L;
  #L50757e.  v7:= lcmp(v3, v5);
  #L507582.  if v7 != 0 then goto L50758e;
  #L507586.  call `e`(v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L50758c.  return @kind void;
  #L50758e.  v5:= 0L;
  #L507592.  v7:= v5 @kind wide;
  #L507594.  v9:= lcmp(v7, v3);
  #L507598.  if v9 == 0 then goto L507604;
  #L50759c.  v9:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L5075a0.  if v9 == 0 then goto L5075a6;
  #L5075a4.  return @kind void;
  #L5075a6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5075ac.  v9:= temp @kind object;
  #L5075ae.  v10:= "The iterator returned a null value" @kind object;
  #L5075b2.  call temp:= `requireNonNull`(v9, v10) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5075b8.  v9:= temp @kind object;
  #L5075ba.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5075c0.  v9:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L5075c4.  if v9 == 0 then goto L5075ca;
  #L5075c8.  return @kind void;
  #L5075ca.  v9:= 1L;
  #L5075ce.  v7:= v7 + v9 @kind long;
  #L5075d0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5075d6.  v9:= temp;
  #L5075d8.  if v9 != 0 then goto L507594;
  #L5075dc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L5075e2.  return @kind void;
  #L5075e4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5075e6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5075ec.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5075f2.  return @kind void;
  #L5075f4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5075f6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5075fc.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L507602.  return @kind void;
  #L507604.  v3:= lcmp(v7, v5);
  #L507608.  if v3 == 0 then goto L507616;
  #L50760c.  v3:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L507610.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L507616.  v2:= -v2 @kind int;
  #L507618.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L50761e.  v2:= temp;
  #L507620.  if v2 != 0 then goto L507626;
  #L507624.  return @kind void;
  #L507626.  if v1 != 0 then goto L507564;
  #L50762a.  v1:= v11.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L50762e.  goto L507564;
  catch `java.lang.Throwable` @[L5075a6..L5075ba] goto L5075f4;
  catch `java.lang.Throwable` @[L5075d0..L5075d8] goto L5075e4;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L507658.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L50765c.  if v0 == 0 then goto L507662;
  #L507660.  return @kind void;
  #L507662.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L507668.  v0:= temp @kind object;
  #L50766a.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L507670.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L507674.  if v0 == 0 then goto L50767a;
  #L507678.  return @kind void;
  #L50767a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L507680.  v0:= temp;
  #L507682.  if v0 != 0 then goto L507658;
  #L507686.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L50768c.  return @kind void;
  #L50768e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L507690.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L507696.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L50769c.  return @kind void;
  #L50769e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5076a0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5076a6.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5076ac.  return @kind void;
  catch `java.lang.Throwable` @[L507662..L50766a] goto L50769e;
  catch `java.lang.Throwable` @[L50767a..L507682] goto L50768e;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507434.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L507438.  if v0 != 0 then goto L507440;
  #L50743c.  v0:= 1I;
  #L50743e.  goto L507442;
  #L507440.  v0:= 0I;
  #L507442.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5076d8.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L5076dc.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L5076e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5076e4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5076ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5076fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L507700.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L507706.  v0:= temp;
  #L507708.  if v0 == 0 then goto L50771a;
  #L50770c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L507710.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L507714.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L50771a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50772c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L507730.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L507736.  v2:= temp @kind object;
  #L507738.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L50773c.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L507742.  v2:= temp @kind object;
  #L507744.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50774a.  v0:= temp;
  #L50774c.  if v0 != 0 then goto L50775c;
  #L507750.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L507754.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L50775a.  return @kind void;
  #L50775c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L507760.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L507766.  return @kind void;
  #L507768.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50776a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L507770.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L507774.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L50777a.  return @kind void;
  catch `java.lang.Throwable` @[L50772c..L50774c] goto L507768;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L507478.  v0:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L50747c.  v1:= 0I;
  #L50747e.  if v0 == 0 then goto L5074a8;
  #L507482.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L507488.  v2:= temp @kind object;
  #L50748a.  v3:= "The iterator returned a null value" @kind object;
  #L50748e.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L507494.  v2:= temp @kind object;
  #L507496.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50749c.  v0:= temp;
  #L50749e.  if v0 != 0 then goto L5074a6;
  #L5074a2.  v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L5074a6.  return v2 @kind object;
  #L5074a8.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507798.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L50779e.  v0:= temp;
  #L5077a0.  if v0 == 0 then goto L5077b4;
  #L5077a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L5077a8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L5077ae.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L5077b4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507454.  v0:= 2I;
  #L507456.  v2:= v2 ^& v0 @kind int;
  #L507458.  if v2 == 0 then goto L507464;
  #L50745c.  v2:= 1I;
  #L50745e.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L507462.  return v0;
  #L507464.  v2:= 0I;
  #L507466.  return v2;
}
