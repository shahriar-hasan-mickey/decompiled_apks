record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.observables.ConnectableObservable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource` @kind interface {
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.d` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f7f20.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$n`;
  #L4f7f24.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$n;.<init>:()V` @kind direct;
  #L4f7f2a.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` := v0 @kind object;
  #L4f7f2e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v0 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4f7f40.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L4f7f46.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v1 @kind object;
  #L4f7f4a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4f7f4e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4f7f52.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` := v4 @kind object;
  #L4f7f56.  return @kind void;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `a`(`io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.a:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f7e6c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f7e70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f7e76.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j`;
  #L4f7e7a.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$j;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L4f7e80.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay`;
  #L4f7e84.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L4f7e8a.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/observables/ConnectableObservable;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4f7e90.  v3:= temp @kind object;
  #L4f7e92.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `create`(`io.reactivex.rxjava3.core.ObservableSource` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;IZ)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f7e34.  v0:= 2147483647I;
  #L4f7e3a.  if v2 != v0 then goto L4f7e48;
  #L4f7e3e.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4f7e44.  v1:= temp @kind object;
  #L4f7e46.  return v1 @kind object;
  #L4f7e48.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$h`;
  #L4f7e4c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$h;.<init>:(IZ)V` @kind direct;
  #L4f7e52.  call temp:= `a`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.a:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4f7e58.  v1:= temp @kind object;
  #L4f7e5a.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `create`(`io.reactivex.rxjava3.core.ObservableSource` v8 @kind object, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.rxjava3.core.Scheduler` v12 @kind object, `int` v13 , `boolean` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f7ed0.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$k`;
  #L4f7ed4.  v0:= v7 @kind object;
  #L4f7ed6.  v1:= v13;
  #L4f7ed8.  v2:= v9 @kind wide;
  #L4f7eda.  v4:= v11 @kind object;
  #L4f7edc.  v5:= v12 @kind object;
  #L4f7ede.  v6:= v14;
  #L4f7ee0.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$k;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L4f7ee6.  call temp:= `a`(v8, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.a:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4f7eec.  v8:= temp @kind object;
  #L4f7eee.  return v8 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `create`(`io.reactivex.rxjava3.core.ObservableSource` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f7ea4.  v5:= 2147483647I;
  #L4f7eaa.  v0:= v7 @kind object;
  #L4f7eac.  v1:= v8 @kind wide;
  #L4f7eae.  v3:= v10 @kind object;
  #L4f7eb0.  v4:= v11 @kind object;
  #L4f7eb2.  v6:= v12;
  #L4f7eb4.  call temp:= `create`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/rxjava3/core/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4f7eba.  v7:= temp @kind object;
  #L4f7ebc.  return v7 @kind object;
}
procedure `io.reactivex.rxjava3.observables.ConnectableObservable` `createFrom`(`io.reactivex.rxjava3.core.ObservableSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/rxjava3/core/ObservableSource;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f7f00.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` @kind object;
  #L4f7f04.  call temp:= `a`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.a:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/rxjava3/observables/ConnectableObservable;` @kind static;
  #L4f7f0a.  v1:= temp @kind object;
  #L4f7f0c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Observable` `multicastSelector`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.multicastSelector:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f7df8.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$e`;
  #L4f7dfc.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$e;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4f7e02.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Observable;)Lio/reactivex/rxjava3/core/Observable;` @kind static;
  #L4f7e08.  v1:= temp @kind object;
  #L4f7e0a.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f7f68.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7f6c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7f72.  v0:= temp @kind object;
  #L4f7f74.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`) v0 @kind object;
  #L4f7f78.  if v0 == 0 then goto L4f7f88;
  #L4f7f7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.isDisposed:()Z` @kind virtual;
  #L4f7f82.  v1:= temp;
  #L4f7f84.  if v1 == 0 then goto L4f7fb6;
  #L4f7f88.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` @kind object;
  #L4f7f8c.  call temp:= `call`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;.call:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;` @kind interface;
  #L4f7f92.  v1:= temp @kind object;
  #L4f7f94.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`;
  #L4f7f98.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7f9c.  call `<init>`(v2, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4f7fa2.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7fa6.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f7fac.  v0:= temp;
  #L4f7fae.  if v0 != 0 then goto L4f7fb4;
  #L4f7fb2.  goto L4f7f68;
  #L4f7fb4.  v0:= v2 @kind object;
  #L4f7fb6.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f7fba.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f7fc0.  v1:= temp;
  #L4f7fc2.  v2:= 1I;
  #L4f7fc4.  v3:= 0I;
  #L4f7fc6.  if v1 != 0 then goto L4f7fde;
  #L4f7fca.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f7fce.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f7fd4.  v1:= temp;
  #L4f7fd6.  if v1 == 0 then goto L4f7fde;
  #L4f7fda.  v1:= 1I;
  #L4f7fdc.  goto L4f7fe0;
  #L4f7fde.  v1:= 0I;
  #L4f7fe0.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4f7fe6.  if v1 == 0 then goto L4f7ff4;
  #L4f7fea.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f7fee.  call `subscribe`(v5, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f7ff4.  return @kind void;
  #L4f7ff6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f7ff8.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f7ffe.  if v1 == 0 then goto L4f800c;
  #L4f8002.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f8006.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f800c.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f8012.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4f8018.  v5:= temp @kind object;
  #L4f801a.  throw v5;
  catch `java.lang.Throwable` @[L4f7fe0..L4f7fe6] goto L4f7ff6;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f8038.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f803c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8042.  v0:= temp @kind object;
  #L4f8044.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`) v0 @kind object;
  #L4f8048.  if v0 == 0 then goto L4f8064;
  #L4f804c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.isDisposed:()Z` @kind virtual;
  #L4f8052.  v1:= temp;
  #L4f8054.  if v1 == 0 then goto L4f8064;
  #L4f8058.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f805c.  v2:= 0I;
  #L4f805e.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f8064.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.ObservableSource` `source`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.source:()Lio/reactivex/rxjava3/core/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7e1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f7e20.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4f8078.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f807c.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f8082.  return @kind void;
}
