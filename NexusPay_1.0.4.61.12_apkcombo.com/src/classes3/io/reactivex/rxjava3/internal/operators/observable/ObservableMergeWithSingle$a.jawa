record `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f4abc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f4ac2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f4ac6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f4aca.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f4ad0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4f4ad4.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a`;
  #L4f4ad8.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;)V` @kind direct;
  #L4f4ade.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` := v1 @kind object;
  #L4f4ae2.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4f4ae6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4f4aec.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4f4af0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4f4b50.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f4b56.  v0:= temp;
  #L4f4b58.  if v0 != 0 then goto L4f4b62;
  #L4f4b5c.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4f4b62.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f4b74.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f4b78.  v1:= 1I;
  #L4f4b7a.  v2:= 1I;
  #L4f4b7c.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.g` @type ^`boolean` @kind boolean;
  #L4f4b80.  v4:= 0I;
  #L4f4b82.  if v3 == 0 then goto L4f4b90;
  #L4f4b86.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4f4b8a.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4f4b8e.  return @kind void;
  #L4f4b90.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4b94.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f4b9a.  v3:= temp @kind object;
  #L4f4b9c.  if v3 == 0 then goto L4f4bb4;
  #L4f4ba0.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4f4ba4.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4f4ba8.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4bac.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f4bb2.  return @kind void;
  #L4f4bb4.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int`;
  #L4f4bb8.  v5:= 2I;
  #L4f4bba.  if v3 != v1 then goto L4f4bd2;
  #L4f4bbe.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` @kind object;
  #L4f4bc2.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4f4bc6.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v5;
  #L4f4bca.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f4bd0.  v3:= 2I;
  #L4f4bd2.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.h` @type ^`boolean` @kind boolean;
  #L4f4bd6.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4f4bda.  if v7 == 0 then goto L4f4be8;
  #L4f4bde.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4f4be4.  v7:= temp @kind object;
  #L4f4be6.  goto L4f4bea;
  #L4f4be8.  v7:= v4 @kind object;
  #L4f4bea.  if v7 != 0 then goto L4f4bf2;
  #L4f4bee.  v8:= 1I;
  #L4f4bf0.  goto L4f4bf4;
  #L4f4bf2.  v8:= 0I;
  #L4f4bf4.  if v6 == 0 then goto L4f4c0c;
  #L4f4bf8.  if v8 == 0 then goto L4f4c0c;
  #L4f4bfc.  if v3 != v5 then goto L4f4c0c;
  #L4f4c00.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4f4c04.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f4c0a.  return @kind void;
  #L4f4c0c.  if v8 == 0 then goto L4f4c20;
  #L4f4c10.  v2:= -v2 @kind int;
  #L4f4c12.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f4c18.  v2:= temp;
  #L4f4c1a.  if v2 != 0 then goto L4f4b7c;
  #L4f4c1e.  return @kind void;
  #L4f4c20.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f4c26.  goto L4f4b7c;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f4a8c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4f4a90.  if v0 != 0 then goto L4f4aaa;
  #L4f4a94.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f4a98.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4f4a9e.  v1:= temp;
  #L4f4aa0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f4aa6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4f4aaa.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4f4d04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4d08.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4f4d0e.  v2:= temp;
  #L4f4d10.  if v2 == 0 then goto L4f4d24;
  #L4f4d14.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4d18.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4d1e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4f4d24.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4b04.  v0:= 1I;
  #L4f4b06.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4f4b0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4b0e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4b14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` @kind object;
  #L4f4b18.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4b1e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4b22.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4f4b28.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f4b2e.  v0:= temp;
  #L4f4b30.  if v0 != 0 then goto L4f4b3e;
  #L4f4b34.  v0:= 0I;
  #L4f4b36.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4f4b3a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v0 @kind object;
  #L4f4b3e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f4d38.  v0:= 0I;
  #L4f4d3a.  v1:= 1I;
  #L4f4d3c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f4d42.  v0:= temp;
  #L4f4d44.  if v0 == 0 then goto L4f4d5a;
  #L4f4d48.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f4d4c.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f4d52.  v3:= 2I;
  #L4f4d54.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v3;
  #L4f4d58.  goto L4f4d70;
  #L4f4d5a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v3 @kind object;
  #L4f4d5e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v1;
  #L4f4d62.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f4d68.  v3:= temp;
  #L4f4d6a.  if v3 == 0 then goto L4f4d70;
  #L4f4d6e.  return @kind void;
  #L4f4d70.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4f4d76.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4a60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4a64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f4a6a.  v0:= temp @kind object;
  #L4f4a6c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4f4a70.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f4a76.  v0:= temp;
  #L4f4a78.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4c38.  v0:= 1I;
  #L4f4c3a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4f4c3e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4f4c44.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4c58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f4c5c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4f4c62.  v2:= temp;
  #L4f4c64.  if v2 == 0 then goto L4f4c78;
  #L4f4c68.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a$a` @kind object;
  #L4f4c6c.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f4c72.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4f4c78.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f4c8c.  v0:= 0I;
  #L4f4c8e.  v1:= 1I;
  #L4f4c90.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f4c96.  v0:= temp;
  #L4f4c98.  if v0 == 0 then goto L4f4cb4;
  #L4f4c9c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f4ca0.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f4ca6.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f4cac.  v3:= temp;
  #L4f4cae.  if v3 != 0 then goto L4f4cd0;
  #L4f4cb2.  return @kind void;
  #L4f4cb4.  call temp:= `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4f4cba.  v0:= temp @kind object;
  #L4f4cbc.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4f4cc2.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f4cc8.  v3:= temp;
  #L4f4cca.  if v3 == 0 then goto L4f4cd0;
  #L4f4cce.  return @kind void;
  #L4f4cd0.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4f4cd6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4ce8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4cec.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f4cf2.  return @kind void;
}
