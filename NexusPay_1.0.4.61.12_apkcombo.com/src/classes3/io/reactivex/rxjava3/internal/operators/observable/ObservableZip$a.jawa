record `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5004f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L5004fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L500502.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L500506.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[v3];
  #L50050a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] := v1 @kind object;
  #L50050e.  v1:= new `java.lang.Object`[v3];
  #L500512.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L500516.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` := v4 @kind boolean;
  #L50051a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @AccessFlag  {
    temp;

  #L50052c.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L500532.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L500538.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50054c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L500550.  v1:= length @variable v0;
  #L500552.  v2:= 0I;
  #L500554.  if v2 >= v1 then goto L500568;
  #L500558.  v3:= v0[v2] @kind object;
  #L50055c.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;.a:()V` @kind virtual;
  #L500562.  v2:= v2 + 1;
  #L500566.  goto L500554;
  #L500568.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Observer` v5 @kind object, `boolean` v6 , `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L50045c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L500460.  v1:= 1I;
  #L500462.  if v0 == 0 then goto L50046e;
  #L500466.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L50046c.  return v1;
  #L50046e.  if v3 == 0 then goto L5004cc;
  #L500472.  if v6 == 0 then goto L50049c;
  #L500476.  if v4 == 0 then goto L5004cc;
  #L50047a.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L50047e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L500482.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L500488.  if v3 == 0 then goto L500494;
  #L50048c.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L500492.  goto L50049a;
  #L500494.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L50049a.  return v1;
  #L50049c.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L5004a0.  if v3 == 0 then goto L5004b6;
  #L5004a4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L5004a8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L5004ae.  call `onError`(v5, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5004b4.  return v1;
  #L5004b6.  if v4 == 0 then goto L5004cc;
  #L5004ba.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L5004be.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L5004c4.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L5004ca.  return v1;
  #L5004cc.  v3:= 0I;
  #L5004ce.  return v3;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50057c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L500580.  v1:= length @variable v0;
  #L500582.  v2:= 0I;
  #L500584.  if v2 >= v1 then goto L50059c;
  #L500588.  v3:= v0[v2] @kind object;
  #L50058c.  v3:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L500590.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L500596.  v2:= v2 + 1;
  #L50059a.  goto L500584;
  #L50059c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5005b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L5005b4.  if v0 != 0 then goto L5005d6;
  #L5005b8.  v0:= 1I;
  #L5005ba.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v0 @kind boolean;
  #L5005be.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L5005c4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L5005ca.  v0:= temp;
  #L5005cc.  if v0 != 0 then goto L5005d6;
  #L5005d0.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L5005d6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v20 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L5005e8.  v7:= v20 @kind object;
  #L5005ec.  call temp:= `getAndIncrement`(v20) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L5005f2.  v0:= temp;
  #L5005f4.  if v0 == 0 then goto L5005fa;
  #L5005f8.  return @kind void;
  #L5005fa.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L5005fe.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L500602.  v9:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] @kind object;
  #L500606.  v10:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` @kind boolean;
  #L50060a.  v11:= 1I;
  #L50060c.  v12:= 1I;
  #L50060e.  v13:= length @variable v0;
  #L500610.  v14:= 0I;
  #L500612.  v15:= 0I;
  #L500614.  v16:= 0I;
  #L500618.  v17:= 0I;
  #L50061c.  if v15 >= v13 then goto L5006a4;
  #L500620.  v6:= v0[v15] @kind object;
  #L500624.  v1:= v9[v17] @kind object;
  #L500628.  if v1 != 0 then goto L500674;
  #L50062c.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L500630.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L500634.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L50063a.  v18:= temp @kind object;
  #L50063c.  if v18 != 0 then goto L500646;
  #L500640.  v19:= 1I;
  #L500644.  goto L50064a;
  #L500646.  v19:= 0I;
  #L50064a.  v1:= v20 @kind object;
  #L50064e.  v3:= v19;
  #L500652.  v4:= v8 @kind object;
  #L500654.  v5:= v10;
  #L500656.  call temp:= `c`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;)Z` @kind virtual;
  #L50065c.  v1:= temp;
  #L50065e.  if v1 == 0 then goto L500664;
  #L500662.  return @kind void;
  #L500664.  if v19 != 0 then goto L50066e;
  #L500668.  v9[v17]:= v18 @kind object;
  #L50066c.  goto L50069a;
  #L50066e.  v16:= v16 + 1;
  #L500672.  goto L50069a;
  #L500674.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L500678.  if v1 == 0 then goto L50069a;
  #L50067c.  if v10 != 0 then goto L50069a;
  #L500680.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L500684.  if v1 == 0 then goto L50069a;
  #L500688.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v11 @kind boolean;
  #L50068c.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L500692.  call `onError`(v8, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L500698.  return @kind void;
  #L50069a.  v17:= v17 + 1;
  #L50069e.  v15:= v15 + 1;
  #L5006a2.  goto L50061c;
  #L5006a4.  if v16 == 0 then goto L5006b8;
  #L5006a8.  v1:= -v12 @kind int;
  #L5006aa.  call temp:= `addAndGet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L5006b0.  v12:= temp;
  #L5006b2.  if v12 != 0 then goto L50060e;
  #L5006b6.  return @kind void;
  #L5006b8.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L5006bc.  call temp:= `clone`(v9) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L5006c2.  v2:= temp @kind object;
  #L5006c4.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L5006ca.  v1:= temp @kind object;
  #L5006cc.  v2:= "The zipper returned a null value" @kind object;
  #L5006d0.  call temp:= `requireNonNull`(v1, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5006d6.  v1:= temp @kind object;
  #L5006d8.  call `onNext`(v8, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5006de.  v1:= 0I;
  #L5006e0.  call `fill`(v9, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L5006e6.  goto L50060e;
  #L5006e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5006ea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5006f0.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L5006f6.  call `onError`(v8, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5006fc.  return @kind void;
  catch `java.lang.Throwable` @[L5006b8..L5006d8] goto L5006e8;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v5 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.f:([Lio/reactivex/rxjava3/core/ObservableSource;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50071c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L500720.  v1:= length @variable v0;
  #L500722.  v2:= 0I;
  #L500724.  v3:= 0I;
  #L500726.  if v3 >= v1 then goto L50073e;
  #L50072a.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$b`;
  #L50072e.  call `<init>`(v4, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;I)V` @kind direct;
  #L500734.  v0[v3]:= v4 @kind object;
  #L500738.  v3:= v3 + 1;
  #L50073c.  goto L500726;
  #L50073e.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L500744.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L500748.  call `onSubscribe`(v7, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L50074e.  if v2 >= v1 then goto L500770;
  #L500752.  v7:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L500756.  if v7 == 0 then goto L50075c;
  #L50075a.  return @kind void;
  #L50075c.  v7:= v6[v2] @kind object;
  #L500760.  v3:= v0[v2] @kind object;
  #L500764.  call `subscribe`(v7, v3) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L50076a.  v2:= v2 + 1;
  #L50076e.  goto L50074e;
  #L500770.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5004e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L5004e4.  return v0;
}
