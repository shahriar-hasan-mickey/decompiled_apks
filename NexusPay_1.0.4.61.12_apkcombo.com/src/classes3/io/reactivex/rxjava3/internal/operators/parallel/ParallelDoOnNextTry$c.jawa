record `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50136c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L501372.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L501376.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L50137a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L50137e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501390.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L501394.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50139a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5013ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L5013b0.  if v0 == 0 then goto L5013b6;
  #L5013b4.  return @kind void;
  #L5013b6.  v0:= 1I;
  #L5013b8.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L5013bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5013c0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L5013c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5013d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L5013dc.  if v0 == 0 then goto L5013e8;
  #L5013e0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5013e6.  return @kind void;
  #L5013e8.  v0:= 1I;
  #L5013ea.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L5013ee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5013f2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5013f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50140c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L501412.  v3:= temp;
  #L501414.  if v3 != 0 then goto L501426;
  #L501418.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50141c.  v0:= 1L;
  #L501420.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L501426.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501438.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50143c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L501442.  v0:= temp;
  #L501444.  if v0 == 0 then goto L501456;
  #L501448.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L50144c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L501450.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L501456.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501468.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50146c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L501472.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L501280.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L501284.  v1:= 0I;
  #L501286.  if v0 == 0 then goto L50128c;
  #L50128a.  return v1;
  #L50128c.  v2:= 0L;
  #L501290.  v0:= 1I;
  #L501292.  v4:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L501296.  call `accept`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50129c.  v1:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5012a0.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5012a6.  return v0;
  #L5012a8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5012aa.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5012b0.  v5:= 2I;
  #L5012b2.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L5012b6.  v7:= 1L;
  #L5012ba.  v2:= v2 + v7 @kind long;
  #L5012bc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L5012c2.  v7:= temp @kind object;
  #L5012c4.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L5012ca.  v6:= temp @kind object;
  #L5012cc.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L5012d0.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5012d6.  v6:= temp @kind object;
  #L5012d8.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L5012dc.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L5012e0.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L5012e6.  v6:= temp;
  #L5012e8.  v6:= v7[v6];
  #L5012ec.  if v6 == v0 then goto L501290;
  #L5012f0.  if v6 == v5 then goto L501314;
  #L5012f4.  v10:= 3I;
  #L5012f6.  if v6 == v10 then goto L501308;
  #L5012fa.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L501300.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L501306.  return v1;
  #L501308.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L50130e.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @kind virtual;
  #L501314.  return v1;
  #L501316.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L501318.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50131e.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L501324.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L501328.  v3:= new `java.lang.Throwable`[v5];
  #L50132c.  v3[v1]:= v4 @kind object;
  #L501330.  v3[v0]:= v10 @kind object;
  #L501334.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L50133a.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L501340.  return v1;
  catch `java.lang.Throwable` @[L501292..L50129c] goto L5012a8;
  catch `java.lang.Throwable` @[L5012b2..L5012dc] goto L501316;
}
