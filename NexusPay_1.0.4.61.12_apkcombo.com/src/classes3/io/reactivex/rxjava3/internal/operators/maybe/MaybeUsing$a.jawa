record `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e1fec.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4e1ff2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4e1ff6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L4e1ffa.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` := v4 @kind boolean;
  #L4e1ffe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e205c.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e2062.  v0:= temp @kind object;
  #L4e2064.  if v0 == v2 then goto L4e2082;
  #L4e2068.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4e206c.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4e2072.  goto L4e2082;
  #L4e2074.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e2076.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e207c.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e2082.  return @kind void;
  catch `java.lang.Throwable` @[L4e2068..L4e2072] goto L4e2074;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e2010.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4e2014.  if v0 == 0 then goto L4e2032;
  #L4e2018.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4e201e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e2022.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e2028.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e202c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4e2030.  goto L4e204a;
  #L4e2032.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e2036.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e203c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e2040.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4e2044.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4e204a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e1fcc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e1fd0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4e1fd6.  v0:= temp;
  #L4e1fd8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e20a0.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e20a4.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4e20a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4e20ac.  if v0 == 0 then goto L4e20dc;
  #L4e20b0.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e20b6.  v0:= temp @kind object;
  #L4e20b8.  if v0 == v2 then goto L4e20da;
  #L4e20bc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4e20c0.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4e20c6.  goto L4e20dc;
  #L4e20c8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e20ca.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e20d0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e20d4.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e20da.  return @kind void;
  #L4e20dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e20e0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e20e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4e20ea.  if v0 != 0 then goto L4e20f4;
  #L4e20ee.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4e20f4.  return @kind void;
  catch `java.lang.Throwable` @[L4e20bc..L4e20c6] goto L4e20c8;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e2114.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e2118.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4e211c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4e2120.  if v0 == 0 then goto L4e2166;
  #L4e2124.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e212a.  v0:= temp @kind object;
  #L4e212c.  if v0 == v4 then goto L4e2164;
  #L4e2130.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4e2134.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4e213a.  goto L4e2166;
  #L4e213c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e213e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e2144.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4e2148.  v2:= 2I;
  #L4e214a.  v2:= new `java.lang.Throwable`[v2];
  #L4e214e.  v3:= 0I;
  #L4e2150.  v2[v3]:= v5 @kind object;
  #L4e2154.  v5:= 1I;
  #L4e2156.  v2[v5]:= v0 @kind object;
  #L4e215a.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4e2160.  v5:= v1 @kind object;
  #L4e2162.  goto L4e2166;
  #L4e2164.  return @kind void;
  #L4e2166.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e216a.  call `onError`(v0, v5) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e2170.  v5:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4e2174.  if v5 != 0 then goto L4e217e;
  #L4e2178.  call `a`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4e217e.  return @kind void;
  catch `java.lang.Throwable` @[L4e2130..L4e213a] goto L4e213c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e219c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e21a0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e21a6.  v0:= temp;
  #L4e21a8.  if v0 == 0 then goto L4e21ba;
  #L4e21ac.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4e21b0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e21b4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e21ba.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e21cc.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e21d0.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4e21d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4e21d8.  if v0 == 0 then goto L4e2208;
  #L4e21dc.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e21e2.  v0:= temp @kind object;
  #L4e21e4.  if v0 == v2 then goto L4e2206;
  #L4e21e8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4e21ec.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4e21f2.  goto L4e2208;
  #L4e21f4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e21f6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e21fc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e2200.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e2206.  return @kind void;
  #L4e2208.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e220c.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e2212.  v3:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4e2216.  if v3 != 0 then goto L4e2220;
  #L4e221a.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4e2220.  return @kind void;
  catch `java.lang.Throwable` @[L4e21e8..L4e21f2] goto L4e21f4;
}
