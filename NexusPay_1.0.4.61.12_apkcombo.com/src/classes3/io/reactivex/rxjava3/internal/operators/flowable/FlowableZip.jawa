record `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.b` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4da428.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4da42e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.b` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L4da432.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.c` @type ^`java.lang.Iterable` := v2 @kind object;
  #L4da436.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.d` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4da43a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.e` @type ^`int` := v4;
  #L4da43e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.f` @type ^`boolean` := v5 @kind boolean;
  #L4da442.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip` v9 @kind this, `org.reactivestreams.Subscriber` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4da454.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.b` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L4da458.  if v0 != 0 then goto L4da4b0;
  #L4da45c.  v0:= 8I;
  #L4da460.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L4da464.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.c` @type ^`java.lang.Iterable` @kind object;
  #L4da468.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4da46e.  v1:= temp @kind object;
  #L4da470.  v2:= 0I;
  #L4da472.  v3:= 0I;
  #L4da474.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4da47a.  v4:= temp;
  #L4da47c.  if v4 == 0 then goto L4da4b2;
  #L4da480.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4da486.  v4:= temp @kind object;
  #L4da488.  v4:= (`org.reactivestreams.Publisher`) v4 @kind object;
  #L4da48c.  v5:= length @variable v0;
  #L4da48e.  if v3 != v5 then goto L4da4a4;
  #L4da492.  v5:= v3 ^> 2;
  #L4da496.  v5:= v5 + v3 @kind int;
  #L4da498.  v5:= new `org.reactivestreams.Publisher`[v5];
  #L4da49c.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4da4a2.  v0:= v5 @kind object;
  #L4da4a4.  v5:= v3 + 1;
  #L4da4a8.  v0[v3]:= v4 @kind object;
  #L4da4ac.  v3:= v5;
  #L4da4ae.  goto L4da474;
  #L4da4b0.  v3:= length @variable v0;
  #L4da4b2.  v7:= v3;
  #L4da4b4.  if v7 != 0 then goto L4da4c0;
  #L4da4b8.  call `complete`(v10) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4da4be.  return @kind void;
  #L4da4c0.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a`;
  #L4da4c4.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.d` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4da4c8.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.e` @type ^`int`;
  #L4da4cc.  v6:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.f` @type ^`boolean` @kind boolean;
  #L4da4d0.  v1:= v8 @kind object;
  #L4da4d2.  v2:= v10 @kind object;
  #L4da4d4.  v4:= v7;
  #L4da4d6.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IIZ)V` @kind direct;
  #L4da4dc.  call `onSubscribe`(v10, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4da4e2.  call `d`(v8, v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.d:([Lorg/reactivestreams/Publisher;I)V` @kind virtual;
  #L4da4e8.  return @kind void;
}
