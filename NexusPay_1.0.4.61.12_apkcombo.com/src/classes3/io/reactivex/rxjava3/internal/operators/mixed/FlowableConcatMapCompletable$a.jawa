record `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e2bb4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e2bba.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4e2bbe.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e2bc2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v3 @kind object;
  #L4e2bc6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int` := v4;
  #L4e2bca.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e2bce.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e2bd4.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e2bd8.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a`;
  #L4e2bdc.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;)V` @kind direct;
  #L4e2be2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` := v1 @kind object;
  #L4e2be6.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4e2bea.  call `<init>`(v1, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4e2bf0.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4e2bf4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e2c54.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e2c5a.  v0:= temp;
  #L4e2c5c.  if v0 == 0 then goto L4e2c62;
  #L4e2c60.  return @kind void;
  #L4e2c62.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L4e2c66.  if v0 == 0 then goto L4e2c76;
  #L4e2c6a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2c6e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e2c74.  return @kind void;
  #L4e2c76.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` @kind boolean;
  #L4e2c7a.  if v0 != 0 then goto L4e2d7a;
  #L4e2c7e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e2c82.  v1:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e2c86.  if v0 != v1 then goto L4e2cb4;
  #L4e2c8a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2c8e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e2c94.  v0:= temp @kind object;
  #L4e2c96.  if v0 == 0 then goto L4e2cb4;
  #L4e2c9a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2c9e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e2ca4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2ca8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e2cac.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e2cb2.  return @kind void;
  #L4e2cb4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` @kind boolean;
  #L4e2cb8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2cbc.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e2cc2.  v1:= temp @kind object;
  #L4e2cc4.  v2:= 0I;
  #L4e2cc6.  v3:= 1I;
  #L4e2cc8.  if v1 != 0 then goto L4e2cd0;
  #L4e2ccc.  v4:= 1I;
  #L4e2cce.  goto L4e2cd2;
  #L4e2cd0.  v4:= 0I;
  #L4e2cd2.  if v0 == 0 then goto L4e2cea;
  #L4e2cd6.  if v4 == 0 then goto L4e2cea;
  #L4e2cda.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2cde.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e2ce2.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e2ce8.  return @kind void;
  #L4e2cea.  if v4 != 0 then goto L4e2d7a;
  #L4e2cee.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int`;
  #L4e2cf2.  v4:= v0 ^> 1;
  #L4e2cf6.  v0:= v0 - v4 @kind int;
  #L4e2cf8.  v4:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int`;
  #L4e2cfc.  v4:= v4 + v3 @kind int;
  #L4e2cfe.  if v4 != v0 then goto L4e2d14;
  #L4e2d02.  v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int` := v2;
  #L4e2d06.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e2d0a.  v4:= (`long`) v0 @kind i2l;
  #L4e2d0c.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e2d12.  goto L4e2d18;
  #L4e2d14.  v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int` := v4;
  #L4e2d18.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e2d1c.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e2d22.  v0:= temp @kind object;
  #L4e2d24.  v1:= "The mapper returned a null CompletableSource" @kind object;
  #L4e2d28.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e2d2e.  v0:= temp @kind object;
  #L4e2d30.  v0:= (`io.reactivex.rxjava3.core.CompletableSource`) v0 @kind object;
  #L4e2d34.  v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v3 @kind boolean;
  #L4e2d38.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L4e2d3c.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4e2d42.  goto L4e2d7a;
  #L4e2d44.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e2d46.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e2d4c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2d50.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e2d56.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e2d5a.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e2d60.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2d64.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e2d6a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2d6e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e2d72.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e2d78.  return @kind void;
  #L4e2d7a.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4e2d80.  v0:= temp;
  #L4e2d82.  if v0 != 0 then goto L4e2c62;
  #L4e2d86.  return @kind void;
  catch `java.lang.Throwable` @[L4e2d18..L4e2d34] goto L4e2d44;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4e2da4.  v0:= 0I;
  #L4e2da6.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4e2daa.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e2db0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e2dc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2dc8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e2dce.  v2:= temp;
  #L4e2dd0.  if v2 == 0 then goto L4e2e1c;
  #L4e2dd4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e2dd8.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e2ddc.  if v2 != v0 then goto L4e2e10;
  #L4e2de0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e2de4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e2dea.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2dee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e2df2.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e2df8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e2dfe.  v2:= temp;
  #L4e2e00.  if v2 != 0 then goto L4e2e1c;
  #L4e2e04.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2e08.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e2e0e.  goto L4e2e1c;
  #L4e2e10.  v2:= 0I;
  #L4e2e12.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4e2e16.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e2e1c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e2c08.  v0:= 1I;
  #L4e2c0a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4e2c0e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e2c12.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e2c18.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L4e2c1c.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e2c22.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2c26.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e2c2c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e2c32.  v0:= temp;
  #L4e2c34.  if v0 != 0 then goto L4e2c42;
  #L4e2c38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2c3c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e2c42.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e2b9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L4e2ba0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e2e30.  v0:= 1I;
  #L4e2e32.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4e2e36.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e2e3c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e2e50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2e54.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e2e5a.  v2:= temp;
  #L4e2e5c.  if v2 == 0 then goto L4e2ea8;
  #L4e2e60.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e2e64.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e2e68.  if v2 != v0 then goto L4e2e9c;
  #L4e2e6c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L4e2e70.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e2e76.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e2e7a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e2e7e.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e2e84.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e2e8a.  v2:= temp;
  #L4e2e8c.  if v2 != 0 then goto L4e2ea8;
  #L4e2e90.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2e94.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e2e9a.  goto L4e2ea8;
  #L4e2e9c.  v2:= 1I;
  #L4e2e9e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4e2ea2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e2ea8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e2ebc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e2ec0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e2ec6.  v2:= temp;
  #L4e2ec8.  if v2 == 0 then goto L4e2ed4;
  #L4e2ecc.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e2ed2.  goto L4e2ef2;
  #L4e2ed4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e2ed8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e2ede.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4e2ee2.  v0:= "Queue full?!" @kind object;
  #L4e2ee6.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e2eec.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e2ef2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e2f04.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e2f08.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4e2f0e.  v0:= temp;
  #L4e2f10.  if v0 == 0 then goto L4e2f2e;
  #L4e2f14.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4e2f18.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e2f1c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e2f22.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int`;
  #L4e2f26.  v0:= (`long`) v0 @kind i2l;
  #L4e2f28.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e2f2e.  return @kind void;
}
