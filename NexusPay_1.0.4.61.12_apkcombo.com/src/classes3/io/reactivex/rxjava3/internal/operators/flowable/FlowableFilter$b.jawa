record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c2320.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4c2326.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4c232a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c233c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c2342.  v3:= temp;
  #L4c2344.  if v3 != 0 then goto L4c2356;
  #L4c2348.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c234c.  v0:= 1L;
  #L4c2350.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c2356.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c22d4.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c22d8.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4c22dc.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c22e2.  v2:= temp @kind object;
  #L4c22e4.  if v2 != 0 then goto L4c22ec;
  #L4c22e8.  v0:= 0I;
  #L4c22ea.  return v0 @kind object;
  #L4c22ec.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4c22f2.  v3:= temp;
  #L4c22f4.  if v3 == 0 then goto L4c22fa;
  #L4c22f8.  return v2 @kind object;
  #L4c22fa.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4c22fe.  v3:= 2I;
  #L4c2300.  if v2 != v3 then goto L4c22dc;
  #L4c2304.  v2:= 1L;
  #L4c2308.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c230e.  goto L4c22dc;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c22b8.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c22be.  v1:= temp;
  #L4c22c0.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c2250.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c2254.  if v0 == 0 then goto L4c225c;
  #L4c2258.  v3:= 0I;
  #L4c225a.  return v3;
  #L4c225c.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4c2260.  v1:= 1I;
  #L4c2262.  if v0 == 0 then goto L4c2274;
  #L4c2266.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c226a.  v0:= 0I;
  #L4c226c.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c2272.  return v1;
  #L4c2274.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4c2278.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4c227e.  v0:= temp;
  #L4c2280.  if v0 == 0 then goto L4c228e;
  #L4c2284.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c2288.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c228e.  return v0;
  #L4c2290.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c2292.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c2298.  return v1;
  catch `java.lang.Throwable` @[L4c2274..L4c2280] goto L4c2290;
}
