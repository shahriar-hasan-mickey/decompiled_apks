record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0248.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c024e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c0252.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c0256.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0268.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c026c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c0272.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0284.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L4c0288.  if v0 == 0 then goto L4c028e;
  #L4c028c.  return @kind void;
  #L4c028e.  v0:= 1I;
  #L4c0290.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4c0294.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c0298.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c029e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c02b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L4c02b4.  if v0 == 0 then goto L4c02c0;
  #L4c02b8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c02be.  return @kind void;
  #L4c02c0.  v0:= 1I;
  #L4c02c2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4c02c6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c02ca.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c02d0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c02e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L4c02e8.  if v0 == 0 then goto L4c0314;
  #L4c02ec.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.core.Notification` @kind boolean;
  #L4c02f0.  if v0 == 0 then goto L4c0312;
  #L4c02f4.  v2:= (`io.reactivex.rxjava3.core.Notification`) v2 @kind object;
  #L4c02f8.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4c02fe.  v0:= temp;
  #L4c0300.  if v0 == 0 then goto L4c0312;
  #L4c0304.  call temp:= `getError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4c030a.  v2:= temp @kind object;
  #L4c030c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0312.  return @kind void;
  #L4c0314.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c0318.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c031e.  v2:= temp @kind object;
  #L4c0320.  v0:= "The selector returned a null Notification" @kind object;
  #L4c0324.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c032a.  v2:= temp @kind object;
  #L4c032c.  v2:= (`io.reactivex.rxjava3.core.Notification`) v2 @kind object;
  #L4c0330.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4c0336.  v0:= temp;
  #L4c0338.  if v0 == 0 then goto L4c0356;
  #L4c033c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0340.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c0346.  call temp:= `getError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4c034c.  v2:= temp @kind object;
  #L4c034e.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c0354.  goto L4c0386;
  #L4c0356.  call temp:= `isOnComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnComplete:()Z` @kind virtual;
  #L4c035c.  v0:= temp;
  #L4c035e.  if v0 == 0 then goto L4c0374;
  #L4c0362.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0366.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c036c.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @kind virtual;
  #L4c0372.  goto L4c0386;
  #L4c0374.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c0378.  call temp:= `getValue`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4c037e.  v2:= temp @kind object;
  #L4c0380.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c0386.  return @kind void;
  #L4c0388.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c038a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0390.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0394.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c039a.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c03a0.  return @kind void;
  catch `java.lang.Throwable` @[L4c0314..L4c0330] goto L4c0388;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c03c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c03c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c03ca.  v0:= temp;
  #L4c03cc.  if v0 == 0 then goto L4c03de;
  #L4c03d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4c03d4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c03d8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c03de.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c03f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c03f4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c03fa.  return @kind void;
}
