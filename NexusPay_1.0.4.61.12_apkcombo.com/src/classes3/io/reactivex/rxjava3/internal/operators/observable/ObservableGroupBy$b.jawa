record `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.core.ObservableSource` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.<init>:(ILio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f1c18.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f1c1e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f1c22.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f1c28.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f1c2c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f1c30.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f1c36.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f1c3a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4f1c3e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f1c44.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4f1c48.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f1c4c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f1c52.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4f1c56.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` := v3 @kind object;
  #L4f1c5a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` := v4 @kind object;
  #L4f1c5e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` := v5 @kind boolean;
  #L4f1c62.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f1c74.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f1c78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f1c7e.  v0:= temp;
  #L4f1c80.  v0:= v0 ^& 2;
  #L4f1c84.  if v0 != 0 then goto L4f1c96;
  #L4f1c88.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L4f1c8c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` @kind object;
  #L4f1c90.  call `cancel`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1c96.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `boolean` v4 , `boolean` v5 , `io.reactivex.rxjava3.core.Observer` v6 @kind object, `boolean` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.b:(ZZLio/reactivex/rxjava3/core/Observer;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f1b14.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1b18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f1b1e.  v0:= temp;
  #L4f1b20.  v1:= 1I;
  #L4f1b22.  v2:= 0I;
  #L4f1b24.  if v0 == 0 then goto L4f1b44;
  #L4f1b28.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f1b2c.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f1b32.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1b36.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1b3c.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.a:()V` @kind virtual;
  #L4f1b42.  return v1;
  #L4f1b44.  if v4 == 0 then goto L4f1bac;
  #L4f1b48.  if v7 == 0 then goto L4f1b72;
  #L4f1b4c.  if v5 == 0 then goto L4f1bac;
  #L4f1b50.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L4f1b54.  v5:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1b58.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1b5e.  if v4 == 0 then goto L4f1b6a;
  #L4f1b62.  call `onError`(v6, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1b68.  goto L4f1b70;
  #L4f1b6a.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f1b70.  return v1;
  #L4f1b72.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L4f1b76.  if v4 == 0 then goto L4f1b96;
  #L4f1b7a.  v5:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f1b7e.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f1b84.  v5:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1b88.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1b8e.  call `onError`(v6, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1b94.  return v1;
  #L4f1b96.  if v5 == 0 then goto L4f1bac;
  #L4f1b9a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1b9e.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1ba4.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f1baa.  return v1;
  #L4f1bac.  v4:= 0I;
  #L4f1bae.  return v4;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f1cec.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f1cf2.  v0:= temp;
  #L4f1cf4.  if v0 == 0 then goto L4f1cfa;
  #L4f1cf8.  return @kind void;
  #L4f1cfa.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f1cfe.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` @kind boolean;
  #L4f1d02.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1d06.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1d0c.  v2:= temp @kind object;
  #L4f1d0e.  v2:= (`io.reactivex.rxjava3.core.Observer`) v2 @kind object;
  #L4f1d12.  v3:= 1I;
  #L4f1d14.  v4:= 1I;
  #L4f1d16.  if v2 == 0 then goto L4f1d4c;
  #L4f1d1a.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` @kind boolean;
  #L4f1d1e.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f1d24.  v6:= temp @kind object;
  #L4f1d26.  if v6 != 0 then goto L4f1d2e;
  #L4f1d2a.  v7:= 1I;
  #L4f1d2c.  goto L4f1d30;
  #L4f1d2e.  v7:= 0I;
  #L4f1d30.  call temp:= `b`(v8, v5, v7, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.b:(ZZLio/reactivex/rxjava3/core/Observer;Z)Z` @kind virtual;
  #L4f1d36.  v5:= temp;
  #L4f1d38.  if v5 == 0 then goto L4f1d3e;
  #L4f1d3c.  return @kind void;
  #L4f1d3e.  if v7 == 0 then goto L4f1d44;
  #L4f1d42.  goto L4f1d4c;
  #L4f1d44.  call `onNext`(v2, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f1d4a.  goto L4f1d1a;
  #L4f1d4c.  v4:= -v4 @kind int;
  #L4f1d4e.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f1d54.  v4:= temp;
  #L4f1d56.  if v4 != 0 then goto L4f1d5c;
  #L4f1d5a.  return @kind void;
  #L4f1d5c.  if v2 != 0 then goto L4f1d16;
  #L4f1d60.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1d64.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1d6a.  v2:= temp @kind object;
  #L4f1d6c.  v2:= (`io.reactivex.rxjava3.core.Observer`) v2 @kind object;
  #L4f1d70.  goto L4f1d16;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1d84.  v0:= 1I;
  #L4f1d86.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4f1d8a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4f1d90.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f1ca8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1cac.  v1:= 0I;
  #L4f1cae.  v2:= 1I;
  #L4f1cb0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f1cb6.  v0:= temp;
  #L4f1cb8.  if v0 == 0 then goto L4f1cda;
  #L4f1cbc.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f1cc2.  v0:= temp;
  #L4f1cc4.  if v0 != 0 then goto L4f1cda;
  #L4f1cc8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1ccc.  v1:= 0I;
  #L4f1cce.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1cd4.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.a:()V` @kind virtual;
  #L4f1cda.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4f1da4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4f1da8.  v1:= 1I;
  #L4f1daa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v1 @kind boolean;
  #L4f1dae.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4f1db4.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.f:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1dc8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f1dcc.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f1dd2.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4f1dd8.  return @kind void;
}
procedure `boolean` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.g:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f1be0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f1be4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f1bea.  v0:= temp;
  #L4f1bec.  v1:= 0I;
  #L4f1bee.  if v0 != 0 then goto L4f1c06;
  #L4f1bf2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f1bf6.  v2:= 2I;
  #L4f1bf8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f1bfe.  v0:= temp;
  #L4f1c00.  if v0 == 0 then goto L4f1c06;
  #L4f1c04.  v1:= 1I;
  #L4f1c06.  return v1;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1bc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1bc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f1bca.  v0:= temp;
  #L4f1bcc.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f1dec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f1df0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f1df6.  v0:= temp;
  #L4f1df8.  v1:= v0 ^& 1;
  #L4f1dfc.  if v1 == 0 then goto L4f1e16;
  #L4f1e00.  v0:= new `java.lang.IllegalStateException`;
  #L4f1e04.  v1:= "Only one Observer allowed!" @kind object;
  #L4f1e08.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f1e0e.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4f1e14.  return @kind void;
  #L4f1e16.  v1:= v0 ^| 1;
  #L4f1e1a.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f1e1e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f1e24.  v0:= temp;
  #L4f1e26.  if v0 == 0 then goto L4f1dec;
  #L4f1e2a.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f1e30.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1e34.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1e3a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1e3e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f1e44.  v4:= temp;
  #L4f1e46.  if v4 == 0 then goto L4f1e58;
  #L4f1e4a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1e4e.  v0:= 0I;
  #L4f1e50.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1e56.  goto L4f1e5e;
  #L4f1e58.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupBy$b;.c:()V` @kind virtual;
  #L4f1e5e.  return @kind void;
}
