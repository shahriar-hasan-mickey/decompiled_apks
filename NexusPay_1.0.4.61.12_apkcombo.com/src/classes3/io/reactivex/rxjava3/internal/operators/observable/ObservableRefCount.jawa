record `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.observables.ConnectableObservable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.rxjava3.observables.ConnectableObservable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/rxjava3/observables/ConnectableObservable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f68a0.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f68a4.  v2:= 1I;
  #L4f68a6.  v3:= 0L;
  #L4f68aa.  v6:= 0I;
  #L4f68ac.  v0:= v7 @kind object;
  #L4f68ae.  v1:= v8 @kind object;
  #L4f68b0.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/rxjava3/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L4f68b6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v0 @kind this, `io.reactivex.rxjava3.observables.ConnectableObservable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/rxjava3/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4f68c8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4f68ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` := v1 @kind object;
  #L4f68d2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.b` @type ^`int` := v2;
  #L4f68d6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @type ^`long` := v3 @kind wide;
  #L4f68da.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4f68de.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v6 @kind object;
  #L4f68e2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f68f4.  @monitorenter v5
  #L4f68f6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f68fa.  if v0 == 0 then goto L4f6972;
  #L4f68fe.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f6902.  if v0 == v6 then goto L4f6908;
  #L4f6906.  goto L4f6972;
  #L4f6908.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4f690c.  v2:= 1L;
  #L4f6910.  v0:= v0 - v2 @kind long;
  #L4f6912.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L4f6916.  v2:= 0L;
  #L4f691a.  v4:= lcmp(v0, v2);
  #L4f691e.  if v4 != 0 then goto L4f696e;
  #L4f6922.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L4f6926.  if v0 != 0 then goto L4f692c;
  #L4f692a.  goto L4f696e;
  #L4f692c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @type ^`long` @kind wide;
  #L4f6930.  v4:= lcmp(v0, v2);
  #L4f6934.  if v4 != 0 then goto L4f6942;
  #L4f6938.  call `c`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4f693e.  @monitorexit v5
  #L4f6940.  return @kind void;
  #L4f6942.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4f6946.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4f694c.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4f6950.  @monitorexit v5
  #L4f6952.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f6956.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.c` @type ^`long` @kind wide;
  #L4f695a.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f695e.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4f6964.  v6:= temp @kind object;
  #L4f6966.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f696c.  return @kind void;
  #L4f696e.  @monitorexit v5
  #L4f6970.  return @kind void;
  #L4f6972.  @monitorexit v5
  #L4f6974.  return @kind void;
  #L4f6976.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f6978.  @monitorexit v5
  #L4f697a.  throw v6;
  catch `java.lang.Throwable` @[L4f68f6..L4f6952] goto L4f6976;
  catch `java.lang.Throwable` @[L4f696e..L4f697a] goto L4f6976;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f6a54.  @monitorenter v6
  #L4f6a56.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f6a5a.  if v0 != v7 then goto L4f6a9e;
  #L4f6a5e.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f6a62.  v1:= 0I;
  #L4f6a64.  if v0 == 0 then goto L4f6a76;
  #L4f6a68.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f6a6c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f6a72.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v1 @kind object;
  #L4f6a76.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4f6a7a.  v4:= 1L;
  #L4f6a7e.  v2:= v2 - v4 @kind long;
  #L4f6a80.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v2 @kind wide;
  #L4f6a84.  v4:= 0L;
  #L4f6a88.  v7:= lcmp(v2, v4);
  #L4f6a8c.  if v7 != 0 then goto L4f6a9e;
  #L4f6a90.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v1 @kind object;
  #L4f6a94.  v7:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4f6a98.  call `reset`(v7) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.reset:()V` @kind virtual;
  #L4f6a9e.  @monitorexit v6
  #L4f6aa0.  return @kind void;
  #L4f6aa2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f6aa4.  @monitorexit v6
  #L4f6aa6.  throw v7;
  catch `java.lang.Throwable` @[L4f6a56..L4f6aa6] goto L4f6aa2;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f6ac4.  @monitorenter v5
  #L4f6ac6.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4f6aca.  v2:= 0L;
  #L4f6ace.  v4:= lcmp(v0, v2);
  #L4f6ad2.  if v4 != 0 then goto L4f6b0c;
  #L4f6ad6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f6ada.  if v6 != v0 then goto L4f6b0c;
  #L4f6ade.  v0:= 0I;
  #L4f6ae0.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v0 @kind object;
  #L4f6ae4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6aea.  v0:= temp @kind object;
  #L4f6aec.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4f6af0.  call temp:= `dispose`(v6) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f6af6.  if v0 != 0 then goto L4f6b02;
  #L4f6afa.  v0:= 1I;
  #L4f6afc.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4f6b00.  goto L4f6b0c;
  #L4f6b02.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4f6b06.  call `reset`(v6) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.reset:()V` @kind virtual;
  #L4f6b0c.  @monitorexit v5
  #L4f6b0e.  return @kind void;
  #L4f6b10.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f6b12.  @monitorexit v5
  #L4f6b14.  throw v6;
  catch `java.lang.Throwable` @[L4f6ac6..L4f6b14] goto L4f6b10;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.rxjava3.core.Observer` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f69a0.  @monitorenter v7
  #L4f69a2.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4f69a6.  if v0 != 0 then goto L4f69b8;
  #L4f69aa.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a`;
  #L4f69ae.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;)V` @kind direct;
  #L4f69b4.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v0 @kind object;
  #L4f69b8.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L4f69bc.  v3:= 0L;
  #L4f69c0.  v5:= lcmp(v1, v3);
  #L4f69c4.  if v5 != 0 then goto L4f69da;
  #L4f69c8.  v3:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f69cc.  if v3 == 0 then goto L4f69da;
  #L4f69d0.  v3:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f69d4.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f69da.  v3:= 1L;
  #L4f69de.  v1:= v1 + v3 @kind long;
  #L4f69e0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v1 @kind wide;
  #L4f69e4.  v3:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L4f69e8.  v4:= 1I;
  #L4f69ea.  if v3 != 0 then goto L4f6a02;
  #L4f69ee.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.b` @type ^`int`;
  #L4f69f2.  v5:= (`long`) v3 @kind i2l;
  #L4f69f4.  v3:= lcmp(v1, v5);
  #L4f69f8.  if v3 != 0 then goto L4f6a02;
  #L4f69fc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` := v4 @kind boolean;
  #L4f6a00.  goto L4f6a04;
  #L4f6a02.  v4:= 0I;
  #L4f6a04.  @monitorexit v7
  #L4f6a06.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4f6a0a.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b`;
  #L4f6a0e.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind direct;
  #L4f6a14.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f6a1a.  if v4 == 0 then goto L4f6a28;
  #L4f6a1e.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.rxjava3.observables.ConnectableObservable` @kind object;
  #L4f6a22.  call `connect`(v8, v0) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @kind virtual;
  #L4f6a28.  return @kind void;
  #L4f6a2a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f6a2c.  @monitorexit v7
  #L4f6a2e.  throw v8;
  catch `java.lang.Throwable` @[L4f69a2..L4f6a06] goto L4f6a2a;
  catch `java.lang.Throwable` @[L4f6a2c..L4f6a2e] goto L4f6a2a;
}
