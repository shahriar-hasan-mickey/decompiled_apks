record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cda84.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @kind direct;
  #L4cda8a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cda8e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cdaa0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L4cdaa4.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cdaa8.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L4cdaac.  if v2 == v0 then goto L4cdace;
  #L4cdab0.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cdab4.  if v3 == 0 then goto L4cdaba;
  #L4cdab8.  return @kind void;
  #L4cdaba.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4cdac0.  v3:= temp @kind object;
  #L4cdac2.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cdac8.  v2:= v2 + 1;
  #L4cdacc.  goto L4cdaac;
  #L4cdace.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cdad2.  if v0 == 0 then goto L4cdad8;
  #L4cdad6.  return @kind void;
  #L4cdad8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cdade.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$c;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cdaf0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L4cdaf4.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L4cdaf8.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cdafc.  v3:= 0L;
  #L4cdb00.  v5:= v3 @kind wide;
  #L4cdb02.  v7:= lcmp(v5, v10);
  #L4cdb06.  if v7 == 0 then goto L4cdb32;
  #L4cdb0a.  if v1 == v0 then goto L4cdb32;
  #L4cdb0e.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cdb12.  if v7 == 0 then goto L4cdb18;
  #L4cdb16.  return @kind void;
  #L4cdb18.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4cdb1e.  v7:= temp @kind object;
  #L4cdb20.  call `onNext`(v2, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cdb26.  v7:= 1L;
  #L4cdb2a.  v5:= v5 + v7 @kind long;
  #L4cdb2c.  v1:= v1 + 1;
  #L4cdb30.  goto L4cdb02;
  #L4cdb32.  if v1 != v0 then goto L4cdb46;
  #L4cdb36.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cdb3a.  if v10 != 0 then goto L4cdb44;
  #L4cdb3e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cdb44.  return @kind void;
  #L4cdb46.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cdb4c.  v10:= temp @kind wide;
  #L4cdb4e.  v7:= lcmp(v5, v10);
  #L4cdb52.  if v7 != 0 then goto L4cdb02;
  #L4cdb56.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L4cdb5a.  v10:= -v5 @kind long;
  #L4cdb5c.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4cdb62.  v10:= temp @kind wide;
  #L4cdb64.  v5:= lcmp(v10, v3);
  #L4cdb68.  if v5 != 0 then goto L4cdb00;
  #L4cdb6c.  return @kind void;
}
