record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @AccessFlag ;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.rxjava3.core.Scheduler` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Supplier;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4e920c.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4e9210.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4e9216.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4e921c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e9220.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e9226.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4e922a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4e922e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` := v4 @kind wide;
  #L4e9232.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4e9236.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v7 @kind object;
  #L4e923a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4e9268.  v1:= v0.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e926c.  call `onNext`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e9272.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e924c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4e9250.  call `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L4e9256.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e9284.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9288.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e928e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e9292.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e9298.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e91e0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e91e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e91ea.  v0:= temp @kind object;
  #L4e91ec.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e91f0.  if v0 != v1 then goto L4e91f8;
  #L4e91f4.  v0:= 1I;
  #L4e91f6.  goto L4e91fa;
  #L4e91f8.  v0:= 0I;
  #L4e91fa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e92ac.  @monitorenter v4
  #L4e92ae.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4e92b2.  v1:= 0I;
  #L4e92b4.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L4e92b8.  @monitorexit v4
  #L4e92ba.  if v0 == 0 then goto L4e92ea;
  #L4e92be.  v2:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e92c2.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e92c8.  v0:= 1I;
  #L4e92ca.  v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4e92ce.  call temp:= `enter`(v4) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4e92d4.  v0:= temp;
  #L4e92d6.  if v0 == 0 then goto L4e92ea;
  #L4e92da.  v0:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e92de.  v2:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e92e2.  v3:= 0I;
  #L4e92e4.  call `drainLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4e92ea.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e92ee.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e92f4.  return @kind void;
  #L4e92f6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e92f8.  @monitorexit v4
  #L4e92fa.  throw v0;
  catch `java.lang.Throwable` @[L4e92ae..L4e92ba] goto L4e92f6;
  catch `java.lang.Throwable` @[L4e92f8..L4e92fa] goto L4e92f6;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e9320.  @monitorenter v1
  #L4e9322.  v0:= 0I;
  #L4e9324.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4e9328.  @monitorexit v1
  #L4e932a.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e932e.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e9334.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9338.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e933e.  return @kind void;
  #L4e9340.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e9342.  @monitorexit v1
  #L4e9344.  throw v2;
  catch `java.lang.Throwable` @[L4e9324..L4e932a] goto L4e9340;
  catch `java.lang.Throwable` @[L4e9342..L4e9344] goto L4e9340;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e936c.  @monitorenter v1
  #L4e936e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4e9372.  if v0 != 0 then goto L4e937a;
  #L4e9376.  @monitorexit v1
  #L4e9378.  return @kind void;
  #L4e937a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e9380.  @monitorexit v1
  #L4e9382.  return @kind void;
  #L4e9384.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e9386.  @monitorexit v1
  #L4e9388.  throw v2;
  catch `java.lang.Throwable` @[L4e936e..L4e9388] goto L4e9384;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v7 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e93a8.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e93ac.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e93b2.  v0:= temp;
  #L4e93b4.  if v0 == 0 then goto L4e943e;
  #L4e93b8.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v8 @kind object;
  #L4e93bc.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4e93c0.  call temp:= `get`(v8) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4e93c6.  v8:= temp @kind object;
  #L4e93c8.  v0:= "The buffer supplied is null" @kind object;
  #L4e93cc.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e93d2.  v8:= temp @kind object;
  #L4e93d4.  v8:= (`java.util.Collection`) v8 @kind object;
  #L4e93d8.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v8 @kind object;
  #L4e93dc.  v8:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e93e0.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e93e6.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e93ea.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e93f0.  v8:= temp @kind object;
  #L4e93f2.  v8:= (`io.reactivex.rxjava3.disposables.Disposable`) v8 @kind object;
  #L4e93f6.  call temp:= `isDisposed`(v8) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e93fc.  v8:= temp;
  #L4e93fe.  if v8 != 0 then goto L4e943e;
  #L4e9402.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4e9406.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` @kind wide;
  #L4e940a.  v6:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4e940e.  v1:= v7 @kind object;
  #L4e9410.  v2:= v4 @kind wide;
  #L4e9412.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4e9418.  v8:= temp @kind object;
  #L4e941a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e941e.  call temp:= `set`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e9424.  goto L4e943e;
  #L4e9426.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e9428.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e942e.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L4e9434.  v0:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e9438.  call `error`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4e943e.  return @kind void;
  catch `java.lang.Throwable` @[L4e93bc..L4e93d8] goto L4e9426;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e945c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4e9460.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4e9466.  v0:= temp @kind object;
  #L4e9468.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4e946c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e9472.  v0:= temp @kind object;
  #L4e9474.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4e9478.  @monitorenter v2
  #L4e947a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4e947e.  if v1 == 0 then goto L4e9486;
  #L4e9482.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4e9486.  @monitorexit v2
  #L4e9488.  if v1 != 0 then goto L4e9498;
  #L4e948c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9490.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e9496.  return @kind void;
  #L4e9498.  v0:= 0I;
  #L4e949a.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4e94a0.  return @kind void;
  #L4e94a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e94a4.  @monitorexit v2
  #L4e94a6.  throw v0;
  #L4e94a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e94aa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e94b0.  v1:= v2.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e94b4.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e94ba.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L4e94c0.  return @kind void;
  catch `java.lang.Throwable` @[L4e945c..L4e9478] goto L4e94a8;
  catch `java.lang.Throwable` @[L4e947a..L4e9488] goto L4e94a2;
  catch `java.lang.Throwable` @[L4e94a4..L4e94a6] goto L4e94a2;
}
