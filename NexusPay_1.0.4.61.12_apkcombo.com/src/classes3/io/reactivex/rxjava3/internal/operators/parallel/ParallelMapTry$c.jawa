record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L503614.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50361a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L50361e.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L503622.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L503626.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503638.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50363c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L503642.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503654.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L503658.  if v0 == 0 then goto L50365e;
  #L50365c.  return @kind void;
  #L50365e.  v0:= 1I;
  #L503660.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L503664.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L503668.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L50366e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503680.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L503684.  if v0 == 0 then goto L503690;
  #L503688.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50368e.  return @kind void;
  #L503690.  v0:= 1I;
  #L503692.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L503696.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50369a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5036a0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5036b4.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L5036ba.  v3:= temp;
  #L5036bc.  if v3 != 0 then goto L5036d6;
  #L5036c0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L5036c4.  if v3 != 0 then goto L5036d6;
  #L5036c8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5036cc.  v0:= 1L;
  #L5036d0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L5036d6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5036e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5036ec.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L5036f2.  v0:= temp;
  #L5036f4.  if v0 == 0 then goto L503706;
  #L5036f8.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L5036fc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L503700.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L503706.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503718.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L50371c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L503722.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L50351c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L503520.  v1:= 0I;
  #L503522.  if v0 == 0 then goto L503528;
  #L503526.  return v1;
  #L503528.  v2:= 0L;
  #L50352c.  v0:= 1I;
  #L50352e.  v4:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L503532.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L503538.  v4:= temp @kind object;
  #L50353a.  v5:= "The mapper returned a null value" @kind object;
  #L50353e.  call temp:= `requireNonNull`(v4, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L503544.  v10:= temp @kind object;
  #L503546.  v1:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L50354a.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L503550.  return v0;
  #L503552.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L503554.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50355a.  v5:= 2I;
  #L50355c.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L503560.  v7:= 1L;
  #L503564.  v2:= v2 + v7 @kind long;
  #L503566.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L50356c.  v7:= temp @kind object;
  #L50356e.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L503574.  v6:= temp @kind object;
  #L503576.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L50357a.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L503580.  v6:= temp @kind object;
  #L503582.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L503586.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L50358a.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L503590.  v6:= temp;
  #L503592.  v6:= v7[v6];
  #L503596.  if v6 == v0 then goto L50352c;
  #L50359a.  if v6 == v5 then goto L5035be;
  #L50359e.  v10:= 3I;
  #L5035a0.  if v6 == v10 then goto L5035b2;
  #L5035a4.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L5035aa.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5035b0.  return v1;
  #L5035b2.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L5035b8.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @kind virtual;
  #L5035be.  return v1;
  #L5035c0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5035c2.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5035c8.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L5035ce.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L5035d2.  v3:= new `java.lang.Throwable`[v5];
  #L5035d6.  v3[v1]:= v4 @kind object;
  #L5035da.  v3[v0]:= v10 @kind object;
  #L5035de.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L5035e4.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5035ea.  return v1;
  catch `java.lang.Throwable` @[L50352e..L503546] goto L503552;
  catch `java.lang.Throwable` @[L50355c..L503586] goto L5035c0;
}
