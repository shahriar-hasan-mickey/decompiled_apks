record `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fbe0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fbe12.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fbe16.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4fbe1a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbe2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbe30.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fbe36.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbdec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbdf0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4fbdf6.  v0:= temp;
  #L4fbdf8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbe48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4fbe4c.  if v0 == 0 then goto L4fbe52;
  #L4fbe50.  return @kind void;
  #L4fbe52.  v0:= 1I;
  #L4fbe54.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4fbe58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbe5c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fbe62.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbe74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4fbe78.  if v0 == 0 then goto L4fbe84;
  #L4fbe7c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fbe82.  return @kind void;
  #L4fbe84.  v0:= 1I;
  #L4fbe86.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4fbe8a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbe8e.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fbe94.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbea8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L4fbeac.  if v0 == 0 then goto L4fbeb2;
  #L4fbeb0.  return @kind void;
  #L4fbeb2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4fbeb6.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4fbebc.  v0:= temp;
  #L4fbebe.  if v0 != 0 then goto L4fbede;
  #L4fbec2.  v2:= 1I;
  #L4fbec4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4fbec8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbecc.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fbed2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbed6.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fbedc.  return @kind void;
  #L4fbede.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbee2.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fbee8.  return @kind void;
  #L4fbeea.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fbeec.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4fbef2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbef6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fbefc.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fbf02.  return @kind void;
  catch `java.lang.Throwable` @[L4fbeb2..L4fbebe] goto L4fbeea;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhile$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbf20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbf24.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fbf2a.  v0:= temp;
  #L4fbf2c.  if v0 == 0 then goto L4fbf3e;
  #L4fbf30.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fbf34.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbf38.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fbf3e.  return @kind void;
}
