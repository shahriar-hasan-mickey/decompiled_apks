record `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;ILio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4e23e4.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4e23ea.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v2 @kind object;
  #L4e23ee.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4e23f2.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[v3];
  #L4e23f6.  v4:= 0I;
  #L4e23f8.  if v4 >= v3 then goto L4e2410;
  #L4e23fc.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`;
  #L4e2400.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;I)V` @kind direct;
  #L4e2406.  v2[v4]:= v0 @kind object;
  #L4e240a.  v4:= v4 + 1;
  #L4e240e.  goto L4e23f8;
  #L4e2410.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] := v2 @kind object;
  #L4e2414.  v2:= new `java.lang.Object`[v3];
  #L4e2418.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4e241c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e246c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L4e2470.  v1:= length @variable v0;
  #L4e2472.  v2:= 0I;
  #L4e2474.  if v2 >= v5 then goto L4e2488;
  #L4e2478.  v3:= v0[v2] @kind object;
  #L4e247c.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L4e2482.  v2:= v2 + 1;
  #L4e2486.  goto L4e2474;
  #L4e2488.  v5:= v5 + 1;
  #L4e248c.  if v5 >= v1 then goto L4e249c;
  #L4e2490.  v2:= v0[v5] @kind object;
  #L4e2494.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L4e249a.  goto L4e2488;
  #L4e249c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.b:(I)V` @AccessFlag  {
    temp;
    v0;

  #L4e24b0.  v0:= 0I;
  #L4e24b2.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4e24b8.  v0:= temp;
  #L4e24ba.  if v0 <= 0 then goto L4e24ce;
  #L4e24be.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L4e24c4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e24c8.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e24ce.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.c:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L4e24e0.  v0:= 0I;
  #L4e24e2.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4e24e8.  v0:= temp;
  #L4e24ea.  if v0 <= 0 then goto L4e2500;
  #L4e24ee.  call `a`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L4e24f4.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e24f8.  call `onError`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e24fe.  goto L4e2506;
  #L4e2500.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e2506.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.d:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L4e2518.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4e251c.  v0[v3]:= v2 @kind object;
  #L4e2520.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4e2526.  v2:= temp;
  #L4e2528.  if v2 != 0 then goto L4e2566;
  #L4e252c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e2530.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4e2534.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e253a.  v2:= temp @kind object;
  #L4e253c.  v3:= "The zipper returned a null value" @kind object;
  #L4e2540.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e2546.  v2:= temp @kind object;
  #L4e2548.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e254c.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e2552.  goto L4e2566;
  #L4e2554.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e2556.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e255c.  v3:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e2560.  call `onError`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e2566.  return @kind void;
  catch `java.lang.Throwable` @[L4e252c..L4e2548] goto L4e2554;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e2430.  v0:= 0I;
  #L4e2432.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4e2438.  v1:= temp;
  #L4e243a.  if v1 <= 0 then goto L4e2458;
  #L4e243e.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L4e2442.  v2:= length @variable v1;
  #L4e2444.  if v0 >= v2 then goto L4e2458;
  #L4e2448.  v3:= v1[v0] @kind object;
  #L4e244c.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L4e2452.  v0:= v0 + 1;
  #L4e2456.  goto L4e2444;
  #L4e2458.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e23c0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4e23c6.  v0:= temp;
  #L4e23c8.  if v0 > 0 then goto L4e23d0;
  #L4e23cc.  v0:= 1I;
  #L4e23ce.  goto L4e23d2;
  #L4e23d0.  v0:= 0I;
  #L4e23d2.  return v0;
}
