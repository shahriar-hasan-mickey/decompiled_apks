record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.n` @AccessFlag FINAL;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @AccessFlag FINAL;
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d89ac.  v0:= new `java.lang.Object`;
  #L4d89b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d89b6.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @type ^`java.lang.Object` := v0 @kind object;
  #L4d89ba.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d89cc.  v0:= v6 @kind object;
  #L4d89ce.  v1:= v7 @kind object;
  #L4d89d0.  v2:= v8 @kind wide;
  #L4d89d2.  v4:= v10 @kind object;
  #L4d89d4.  v5:= v12;
  #L4d89d6.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4d89dc.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4d89e0.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d89e4.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d89ea.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4d89ee.  v7:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c$a`;
  #L4d89f2.  call `<init>`(v7, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;)V` @kind direct;
  #L4d89f8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @type ^`java.lang.Runnable` := v7 @kind object;
  #L4d89fc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4d8a10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d8a14.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d8a1a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d8a2c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8a30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d8a36.  v0:= temp;
  #L4d8a38.  if v0 != 0 then goto L4d8b16;
  #L4d8a3c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d8a40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d8a46.  v0:= temp @kind wide;
  #L4d8a48.  v2:= 0L;
  #L4d8a4c.  v4:= lcmp(v0, v2);
  #L4d8a50.  if v4 == 0 then goto L4d8ae0;
  #L4d8a54.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d8a58.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d8a5e.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4d8a62.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @type ^`java.lang.Runnable` @kind object;
  #L4d8a66.  call temp:= `create`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d8a6c.  v0:= temp @kind object;
  #L4d8a6e.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v0 @kind object;
  #L4d8a72.  v0:= 1L;
  #L4d8a76.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4d8a7a.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d8a7e.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d8a82.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d8a88.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8a8c.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d8a92.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d8a96.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d8a9a.  v6:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4d8a9e.  v8:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d8aa2.  v3:= v9 @kind object;
  #L4d8aa4.  v4:= v6 @kind wide;
  #L4d8aa6.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d8aac.  v2:= temp @kind object;
  #L4d8aae.  call temp:= `replace`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d8ab4.  call temp:= `e`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d8aba.  v0:= temp;
  #L4d8abc.  if v0 == 0 then goto L4d8aca;
  #L4d8ac0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d8ac4.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d8aca.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8ace.  v1:= 9223372036854775807L;
  #L4d8ad8.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d8ade.  goto L4d8b16;
  #L4d8ae0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8ae4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d8aea.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8aee.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d8af2.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d8af6.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4d8afc.  v2:= temp @kind object;
  #L4d8afe.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d8b04.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8b0a.  call `a`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @kind virtual;
  #L4d8b10.  v0:= 1I;
  #L4d8b12.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4d8b16.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4d8b28.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d8b2e.  v0:= temp;
  #L4d8b30.  if v0 == 0 then goto L4d8b36;
  #L4d8b34.  return @kind void;
  #L4d8b36.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d8b3a.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8b3e.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d8b42.  v3:= 1I;
  #L4d8b44.  v4:= 1I;
  #L4d8b46.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` @kind boolean;
  #L4d8b4a.  v6:= 0I;
  #L4d8b4c.  if v5 == 0 then goto L4d8b60;
  #L4d8b50.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d8b56.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v6 @kind object;
  #L4d8b5a.  v2:= v6 @kind object;
  #L4d8b5c.  goto L4d8c92;
  #L4d8b60.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` @kind boolean;
  #L4d8b64.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d8b6a.  v7:= temp @kind object;
  #L4d8b6c.  if v7 != 0 then goto L4d8b74;
  #L4d8b70.  v8:= 1I;
  #L4d8b72.  goto L4d8b76;
  #L4d8b74.  v8:= 0I;
  #L4d8b76.  if v5 == 0 then goto L4d8bb4;
  #L4d8b7a.  if v8 == 0 then goto L4d8bb4;
  #L4d8b7e.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4d8b82.  if v5 == 0 then goto L4d8b98;
  #L4d8b86.  if v2 == 0 then goto L4d8b90;
  #L4d8b8a.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d8b90.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8b96.  goto L4d8ba8;
  #L4d8b98.  if v2 == 0 then goto L4d8ba2;
  #L4d8b9c.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d8ba2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d8ba8.  call `a`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @kind virtual;
  #L4d8bae.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4d8bb2.  goto L4d8b46;
  #L4d8bb4.  if v8 != 0 then goto L4d8c92;
  #L4d8bb8.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @type ^`java.lang.Object` @kind object;
  #L4d8bbc.  if v7 != v5 then goto L4d8c84;
  #L4d8bc0.  if v2 == 0 then goto L4d8bd0;
  #L4d8bc4.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d8bca.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v6 @kind object;
  #L4d8bce.  v2:= v6 @kind object;
  #L4d8bd0.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8bd4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d8bda.  v5:= temp;
  #L4d8bdc.  if v5 == 0 then goto L4d8bec;
  #L4d8be0.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d8be4.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d8bea.  goto L4d8b46;
  #L4d8bec.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d8bf0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d8bf6.  v5:= temp @kind wide;
  #L4d8bf8.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d8bfc.  v9:= lcmp(v5, v7);
  #L4d8c00.  if v9 != 0 then goto L4d8c36;
  #L4d8c04.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8c08.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d8c0e.  call `a`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @kind virtual;
  #L4d8c14.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4d8c18.  v5:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d8c1c.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d8c20.  call temp:= `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4d8c26.  v6:= temp @kind object;
  #L4d8c28.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d8c2e.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8c34.  goto L4d8b46;
  #L4d8c36.  v5:= 1L;
  #L4d8c3a.  v7:= v7 + v5 @kind long;
  #L4d8c3c.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v7 @kind wide;
  #L4d8c40.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d8c44.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d8c4a.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4d8c4e.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @type ^`java.lang.Runnable` @kind object;
  #L4d8c52.  call temp:= `create`(v2, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d8c58.  v2:= temp @kind object;
  #L4d8c5a.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4d8c5e.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d8c62.  call `<init>`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d8c68.  call `onNext`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d8c6e.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d8c74.  v5:= temp;
  #L4d8c76.  if v5 == 0 then goto L4d8b46;
  #L4d8c7a.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d8c80.  goto L4d8b46;
  #L4d8c84.  if v2 == 0 then goto L4d8b46;
  #L4d8c88.  call `onNext`(v2, v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4d8c8e.  goto L4d8b46;
  #L4d8c92.  v4:= -v4 @kind int;
  #L4d8c94.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d8c9a.  v4:= temp;
  #L4d8c9c.  if v4 != 0 then goto L4d8b46;
  #L4d8ca0.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d8cb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d8cb8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @type ^`java.lang.Object` @kind object;
  #L4d8cbc.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d8cc2.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.c:()V` @kind virtual;
  #L4d8cc8.  return @kind void;
}
