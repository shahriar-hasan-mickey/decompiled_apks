record `io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4f8eec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f8ef2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f8ef6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4f8efa.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8f0c.  v0:= 3I;
  #L4f8f0e.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f8f14.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8f28.  v0:= 3I;
  #L4f8f2a.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4f8f30.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8e0c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f8e12.  v0:= temp;
  #L4f8e14.  v1:= 3I;
  #L4f8e16.  if v0 != v1 then goto L4f8e1e;
  #L4f8e1a.  v0:= 1I;
  #L4f8e1c.  goto L4f8e20;
  #L4f8e1e.  v0:= 0I;
  #L4f8e20.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8e34.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f8e3a.  v0:= temp;
  #L4f8e3c.  v1:= 1I;
  #L4f8e3e.  if v0 == v1 then goto L4f8e44;
  #L4f8e42.  goto L4f8e46;
  #L4f8e44.  v1:= 0I;
  #L4f8e46.  return v1;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8e58.  v2:= new `java.lang.UnsupportedOperationException`;
  #L4f8e5c.  v0:= "Should not be called!" @kind object;
  #L4f8e60.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f8e66.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4f8e78.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4f8e7c.  v2:= "Should not be called!" @kind object;
  #L4f8e80.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f8e86.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8ebc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f8ec2.  v0:= temp;
  #L4f8ec4.  v1:= 1I;
  #L4f8ec6.  if v0 != v1 then goto L4f8ed8;
  #L4f8eca.  v0:= 3I;
  #L4f8ecc.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f8ed2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L4f8ed6.  return v0 @kind object;
  #L4f8ed8.  v0:= 0I;
  #L4f8eda.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8e98.  v0:= 1I;
  #L4f8e9a.  v2:= v2 ^& v0 @kind int;
  #L4f8e9c.  if v2 == 0 then goto L4f8ea8;
  #L4f8ea0.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f8ea6.  return v0;
  #L4f8ea8.  v2:= 0I;
  #L4f8eaa.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f8f44.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f8f4a.  v0:= temp;
  #L4f8f4c.  if v0 != 0 then goto L4f8f8c;
  #L4f8f50.  v0:= 0I;
  #L4f8f52.  v1:= 2I;
  #L4f8f54.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f8f5a.  v0:= temp;
  #L4f8f5c.  if v0 == 0 then goto L4f8f8c;
  #L4f8f60.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8f64.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L4f8f68.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f8f6e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f8f74.  v0:= temp;
  #L4f8f76.  if v0 != v1 then goto L4f8f8c;
  #L4f8f7a.  v0:= 3I;
  #L4f8f7c.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f8f82.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8f86.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f8f8c.  return @kind void;
}
