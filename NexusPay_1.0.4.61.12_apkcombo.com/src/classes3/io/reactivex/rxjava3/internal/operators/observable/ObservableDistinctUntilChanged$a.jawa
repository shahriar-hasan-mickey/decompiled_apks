record `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4edd14.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4edd1a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4edd1e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4edd22.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4edd34.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4edd38.  if v0 == 0 then goto L4edd3e;
  #L4edd3c.  return @kind void;
  #L4edd3e.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L4edd42.  if v0 == 0 then goto L4edd52;
  #L4edd46.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4edd4a.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4edd50.  return @kind void;
  #L4edd52.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4edd56.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4edd5c.  v0:= temp @kind object;
  #L4edd5e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4edd62.  if v1 == 0 then goto L4edd80;
  #L4edd66.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4edd6a.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4edd6e.  call temp:= `test`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4edd74.  v1:= temp;
  #L4edd76.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4edd7a.  if v1 == 0 then goto L4edd8a;
  #L4edd7e.  return @kind void;
  #L4edd80.  v1:= 1I;
  #L4edd82.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v1 @kind boolean;
  #L4edd86.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4edd8a.  v0:= v3.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4edd8e.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4edd94.  return @kind void;
  #L4edd96.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4edd98.  call `fail`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4edd9e.  return @kind void;
  catch `java.lang.Throwable` @[L4edd52..L4edd8a] goto L4edd96;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4edcb0.  v0:= v4.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4edcb4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4edcba.  v0:= temp @kind object;
  #L4edcbc.  if v0 != 0 then goto L4edcc4;
  #L4edcc0.  v0:= 0I;
  #L4edcc2.  return v0 @kind object;
  #L4edcc4.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4edcc8.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4edcce.  v1:= temp @kind object;
  #L4edcd0.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4edcd4.  if v2 != 0 then goto L4edce4;
  #L4edcd8.  v2:= 1I;
  #L4edcda.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4edcde.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4edce2.  return v0 @kind object;
  #L4edce4.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4edce8.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4edcec.  call temp:= `test`(v2, v3, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4edcf2.  v2:= temp;
  #L4edcf4.  if v2 != 0 then goto L4edcfe;
  #L4edcf8.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4edcfc.  return v0 @kind object;
  #L4edcfe.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4edd02.  goto L4edcb0;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4edc94.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4edc9a.  v1:= temp;
  #L4edc9c.  return v1;
}
