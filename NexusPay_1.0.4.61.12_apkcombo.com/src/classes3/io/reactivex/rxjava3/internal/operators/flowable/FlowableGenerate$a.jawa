record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.Emitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;Lio/reactivex/rxjava3/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c60bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c60c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c60c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4c60ca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L4c60ce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L4c60d2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4c612c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4c6130.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4c6136.  goto L4c6146;
  #L4c6138.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c613a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c6140.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c6146.  return @kind void;
  catch `java.lang.Throwable` @[L4c612c..L4c6136] goto L4c6138;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c60e4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L4c60e8.  if v0 != 0 then goto L4c611a;
  #L4c60ec.  v0:= 1I;
  #L4c60ee.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c60f2.  v0:= 1L;
  #L4c60f6.  call temp:= `add`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c60fc.  v0:= temp @kind wide;
  #L4c60fe.  v2:= 0L;
  #L4c6102.  v4:= lcmp(v0, v2);
  #L4c6106.  if v4 != 0 then goto L4c611a;
  #L4c610a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L4c610e.  v1:= 0I;
  #L4c6110.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L4c6114.  call `a`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L4c611a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6164.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L4c6168.  if v0 != 0 then goto L4c617c;
  #L4c616c.  v0:= 1I;
  #L4c616e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4c6172.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c6176.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c617c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6190.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L4c6194.  if v0 == 0 then goto L4c61a0;
  #L4c6198.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c619e.  goto L4c61c0;
  #L4c61a0.  if v2 != 0 then goto L4c61b0;
  #L4c61a4.  v2:= "onError called with a null Throwable." @kind object;
  #L4c61a8.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4c61ae.  v2:= temp @kind object;
  #L4c61b0.  v0:= 1I;
  #L4c61b2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4c61b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c61ba.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c61c0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c61d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L4c61d8.  if v0 != 0 then goto L4c6222;
  #L4c61dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` @kind boolean;
  #L4c61e0.  if v0 == 0 then goto L4c61fa;
  #L4c61e4.  v2:= new `java.lang.IllegalStateException`;
  #L4c61e8.  v0:= "onNext already called in this generate turn" @kind object;
  #L4c61ec.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c61f2.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c61f8.  goto L4c6222;
  #L4c61fa.  if v2 != 0 then goto L4c6212;
  #L4c61fe.  v2:= "onNext called with a null value." @kind object;
  #L4c6202.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4c6208.  v2:= temp @kind object;
  #L4c620a.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6210.  goto L4c6222;
  #L4c6212.  v0:= 1I;
  #L4c6214.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4c6218.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c621c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c6222.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4c6234.  call temp:= `validate`(v10) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c623a.  v0:= temp;
  #L4c623c.  if v0 != 0 then goto L4c6242;
  #L4c6240.  return @kind void;
  #L4c6242.  call temp:= `add`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c6248.  v0:= temp @kind wide;
  #L4c624a.  v2:= 0L;
  #L4c624e.  v4:= lcmp(v0, v2);
  #L4c6252.  if v4 == 0 then goto L4c6258;
  #L4c6256.  return @kind void;
  #L4c6258.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L4c625c.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c6260.  v4:= v2 @kind wide;
  #L4c6262.  v6:= lcmp(v4, v10);
  #L4c6266.  if v6 == 0 then goto L4c62ce;
  #L4c626a.  v6:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L4c626e.  v7:= 0I;
  #L4c6270.  if v6 == 0 then goto L4c6280;
  #L4c6274.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L4c6278.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L4c627e.  return @kind void;
  #L4c6280.  v6:= 0I;
  #L4c6282.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v6 @kind boolean;
  #L4c6286.  v6:= 1I;
  #L4c6288.  call temp:= `apply`(v1, v0, v9) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c628e.  v0:= temp @kind object;
  #L4c6290.  v8:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L4c6294.  if v8 == 0 then goto L4c62a8;
  #L4c6298.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L4c629c.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L4c62a0.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L4c62a6.  return @kind void;
  #L4c62a8.  v6:= 1L;
  #L4c62ac.  v4:= v4 + v6 @kind long;
  #L4c62ae.  goto L4c6262;
  #L4c62b0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c62b2.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c62b8.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L4c62bc.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L4c62c0.  call `onError`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c62c6.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L4c62cc.  return @kind void;
  #L4c62ce.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c62d4.  v10:= temp @kind wide;
  #L4c62d6.  v6:= lcmp(v4, v10);
  #L4c62da.  if v6 != 0 then goto L4c6262;
  #L4c62de.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L4c62e2.  v10:= -v4 @kind long;
  #L4c62e4.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c62ea.  v10:= temp @kind wide;
  #L4c62ec.  v4:= lcmp(v10, v2);
  #L4c62f0.  if v4 != 0 then goto L4c6260;
  #L4c62f4.  return @kind void;
  catch `java.lang.Throwable` @[L4c6288..L4c6290] goto L4c62b0;
}
