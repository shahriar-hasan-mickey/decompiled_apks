record `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `io.reactivex.rxjava3.functions.Predicate` v4 @kind object, `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` v5 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f8238.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f823e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f8242.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v5 @kind object;
  #L4f8246.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v6 @kind object;
  #L4f824a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.Predicate` := v4 @kind object;
  #L4f824e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L4f8252.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f8364.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f836a.  v0:= temp;
  #L4f836c.  if v0 != 0 then goto L4f839c;
  #L4f8370.  v0:= 1I;
  #L4f8372.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4f8376.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L4f837c.  v1:= temp;
  #L4f837e.  if v1 == 0 then goto L4f8384;
  #L4f8382.  return @kind void;
  #L4f8384.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f8388.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f838e.  v0:= -v0 @kind int;
  #L4f8390.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f8396.  v0:= temp;
  #L4f8398.  if v0 != 0 then goto L4f8372;
  #L4f839c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8264.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8268.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f826e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f8280.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` @kind wide;
  #L4f8284.  v2:= 9223372036854775807L;
  #L4f828e.  v4:= lcmp(v0, v2);
  #L4f8292.  if v4 == 0 then goto L4f82a2;
  #L4f8296.  v2:= 1L;
  #L4f829a.  v2:= v0 - v2 @kind long;
  #L4f829e.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L4f82a2.  v2:= 0L;
  #L4f82a6.  v4:= lcmp(v0, v2);
  #L4f82aa.  if v4 != 0 then goto L4f82ba;
  #L4f82ae.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f82b2.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f82b8.  goto L4f82dc;
  #L4f82ba.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4f82be.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4f82c4.  v0:= temp;
  #L4f82c6.  if v0 != 0 then goto L4f82d6;
  #L4f82ca.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f82ce.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f82d4.  return @kind void;
  #L4f82d6.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.a:()V` @kind virtual;
  #L4f82dc.  return @kind void;
  #L4f82de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f82e0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f82e6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f82ea.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4f82ee.  v3:= 2I;
  #L4f82f0.  v3:= new `java.lang.Throwable`[v3];
  #L4f82f4.  v4:= 0I;
  #L4f82f6.  v3[v4]:= v6 @kind object;
  #L4f82fa.  v6:= 1I;
  #L4f82fc.  v3[v6]:= v0 @kind object;
  #L4f8300.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4f8306.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f830c.  return @kind void;
  catch `java.lang.Throwable` @[L4f82ba..L4f82c6] goto L4f82de;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f832c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8330.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f8336.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8348.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4f834c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f8352.  return @kind void;
}
