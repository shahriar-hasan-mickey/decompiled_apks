record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamSingleSource` @kind interface {
  `io.reactivex.rxjava3.core.SingleSource` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle` v0 @kind this, `io.reactivex.rxjava3.core.SingleSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromSingle;.<init>:(Lio/reactivex/rxjava3/core/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4deabc.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4deac2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.a` @type ^`io.reactivex.rxjava3.core.SingleSource` := v1 @kind object;
  #L4deac6.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.SingleSource` `source`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromSingle;.source:()Lio/reactivex/rxjava3/core/SingleSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4deaa4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.a` @type ^`io.reactivex.rxjava3.core.SingleSource` @kind object;
  #L4deaa8.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromSingle;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4dead8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle.a` @type ^`io.reactivex.rxjava3.core.SingleSource` @kind object;
  #L4deadc.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$a`;
  #L4deae0.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFromSingle$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind direct;
  #L4deae6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4deaec.  return @kind void;
}
