record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `java.util.Iterator` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.queue.SpscArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b7c8c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b7c92.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4b7c96.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4b7c9c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` := v0 @kind object;
  #L4b7ca0.  v0:= (`long`) v3 @kind i2l;
  #L4b7ca2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` := v0 @kind wide;
  #L4b7ca6.  v0:= v3 ^> 2;
  #L4b7caa.  v3:= v3 - v0 @kind int;
  #L4b7cac.  v0:= (`long`) v3 @kind i2l;
  #L4b7cae.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` := v0 @kind wide;
  #L4b7cb2.  v3:= new `java.util.concurrent.locks.ReentrantLock`;
  #L4b7cb6.  call `<init>`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L4b7cbc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` := v3 @kind object;
  #L4b7cc0.  call temp:= `newCondition`(v3) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L4b7cc6.  v3:= temp @kind object;
  #L4b7cc8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` := v3 @kind object;
  #L4b7ccc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b7de4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b7de8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4b7dee.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4b7df2.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L4b7df8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b7dfc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b7e02.  return @kind void;
  #L4b7e04.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7e06.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b7e0a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b7e10.  throw v0;
  catch `java.lang.Throwable` @[L4b7dee..L4b7df8] goto L4b7e04;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4b7ce0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7ce6.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4b7cec.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b7b0c.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @kind virtual;
  #L4b7b12.  v0:= temp;
  #L4b7b14.  v1:= 0I;
  #L4b7b16.  if v0 == 0 then goto L4b7b2e;
  #L4b7b1a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4b7b1e.  if v0 != 0 then goto L4b7b24;
  #L4b7b22.  return v1;
  #L4b7b24.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b7b2a.  v0:= temp @kind object;
  #L4b7b2c.  throw v0;
  #L4b7b2e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L4b7b32.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L4b7b36.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4b7b3c.  v2:= temp;
  #L4b7b3e.  if v0 == 0 then goto L4b7b5a;
  #L4b7b42.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4b7b46.  if v0 != 0 then goto L4b7b50;
  #L4b7b4a.  if v2 == 0 then goto L4b7b5a;
  #L4b7b4e.  return v1;
  #L4b7b50.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b7b56.  v0:= temp @kind object;
  #L4b7b58.  throw v0;
  #L4b7b5a.  if v2 == 0 then goto L4b7bcc;
  #L4b7b5e.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b7b64.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b7b68.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4b7b6e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L4b7b72.  if v0 != 0 then goto L4b7b9e;
  #L4b7b76.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L4b7b7a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4b7b80.  v0:= temp;
  #L4b7b82.  if v0 == 0 then goto L4b7b9e;
  #L4b7b86.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @kind virtual;
  #L4b7b8c.  v0:= temp;
  #L4b7b8e.  if v0 != 0 then goto L4b7b9e;
  #L4b7b92.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4b7b96.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L4b7b9c.  goto L4b7b6e;
  #L4b7b9e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b7ba2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b7ba8.  goto L4b7b0c;
  #L4b7baa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7bac.  goto L4b7bc0;
  #L4b7bae.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b7bb0.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @kind virtual;
  #L4b7bb6.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b7bbc.  v0:= temp @kind object;
  #L4b7bbe.  throw v0;
  #L4b7bc0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4b7bc4.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4b7bca.  throw v0;
  #L4b7bcc.  v0:= 1I;
  #L4b7bce.  return v0;
  catch `java.lang.InterruptedException` @[L4b7b6e..L4b7b9c] goto L4b7bae;
  catch `java.lang.Throwable` @[L4b7b6e..L4b7b9c] goto L4b7baa;
  catch `java.lang.Throwable` @[L4b7bb0..L4b7bc0] goto L4b7baa;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7bf8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7bfe.  v0:= temp @kind object;
  #L4b7c00.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b7c04.  if v0 != v1 then goto L4b7c0c;
  #L4b7c08.  v0:= 1I;
  #L4b7c0a.  goto L4b7c0e;
  #L4b7c0c.  v0:= 0I;
  #L4b7c0e.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b7c20.  call temp:= `hasNext`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @kind virtual;
  #L4b7c26.  v0:= temp;
  #L4b7c28.  if v0 == 0 then goto L4b7c70;
  #L4b7c2c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L4b7c30.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b7c36.  v0:= temp @kind object;
  #L4b7c38.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` @kind wide;
  #L4b7c3c.  v3:= 1L;
  #L4b7c40.  v1:= v1 + v3 @kind long;
  #L4b7c42.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` @kind wide;
  #L4b7c46.  v5:= lcmp(v1, v3);
  #L4b7c4a.  if v5 != 0 then goto L4b7c6a;
  #L4b7c4e.  v3:= 0L;
  #L4b7c52.  v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v3 @kind wide;
  #L4b7c56.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7c5c.  v3:= temp @kind object;
  #L4b7c5e.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4b7c62.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b7c68.  goto L4b7c6e;
  #L4b7c6a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v1 @kind wide;
  #L4b7c6e.  return v0 @kind object;
  #L4b7c70.  v0:= new `java.util.NoSuchElementException`;
  #L4b7c74.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4b7c7a.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7d00.  v0:= 1I;
  #L4b7d02.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4b7d06.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4b7d0c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b7d20.  v0.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4b7d24.  v1:= 1I;
  #L4b7d26.  v0.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4b7d2a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4b7d30.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7d44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscArrayQueue` @kind object;
  #L4b7d48.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b7d4e.  v2:= temp;
  #L4b7d50.  if v2 != 0 then goto L4b7d70;
  #L4b7d54.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7d5a.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4b7d5e.  v0:= "Queue full?!" @kind object;
  #L4b7d62.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b7d68.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b7d6e.  goto L4b7d76;
  #L4b7d70.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4b7d76.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7d88.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` @kind wide;
  #L4b7d8c.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4b7d92.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7da4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b7da8.  v1:= "remove" @kind object;
  #L4b7dac.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b7db2.  throw v0;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4b7dc4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7dca.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4b7dd0.  return @kind void;
}
