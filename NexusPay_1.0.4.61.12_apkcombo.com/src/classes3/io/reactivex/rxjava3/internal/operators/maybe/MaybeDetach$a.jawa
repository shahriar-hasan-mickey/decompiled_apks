record `io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4dc444.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dc44a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4dc44e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dc460.  v0:= 0I;
  #L4dc462.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v0 @kind object;
  #L4dc466.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dc46a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4dc470.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dc474.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4dc478.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dc424.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dc428.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4dc42e.  v0:= temp;
  #L4dc430.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dc48c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dc490.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4dc494.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4dc498.  if v0 == 0 then goto L4dc4a8;
  #L4dc49c.  v1:= 0I;
  #L4dc49e.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4dc4a2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4dc4a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dc4bc.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dc4c0.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4dc4c4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4dc4c8.  if v0 == 0 then goto L4dc4d8;
  #L4dc4cc.  v1:= 0I;
  #L4dc4ce.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4dc4d2.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dc4d8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dc4ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4dc4f0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4dc4f6.  v0:= temp;
  #L4dc4f8.  if v0 == 0 then goto L4dc50a;
  #L4dc4fc.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4dc500.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4dc504.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4dc50a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDetach$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dc51c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dc520.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4dc524.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4dc528.  if v0 == 0 then goto L4dc538;
  #L4dc52c.  v1:= 0I;
  #L4dc52e.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4dc532.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4dc538.  return @kind void;
}
