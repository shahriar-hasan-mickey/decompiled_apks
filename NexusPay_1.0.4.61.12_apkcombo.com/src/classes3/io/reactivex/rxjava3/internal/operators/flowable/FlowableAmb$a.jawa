record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b89e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b89ee.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4b89f2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b89f8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4b89fc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4b8a00.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[v3];
  #L4b8a04.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] := v2 @kind object;
  #L4b8a08.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v7 @kind this, `org.reactivestreams.Publisher`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.a:([Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b8acc.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4b8ad0.  v1:= length @variable v0;
  #L4b8ad2.  v2:= 0I;
  #L4b8ad4.  v3:= 0I;
  #L4b8ad6.  if v3 >= v1 then goto L4b8af4;
  #L4b8ada.  v4:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`;
  #L4b8ade.  v5:= v3 + 1;
  #L4b8ae2.  v6:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8ae6.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4b8aec.  v0[v3]:= v4 @kind object;
  #L4b8af0.  v3:= v5;
  #L4b8af2.  goto L4b8ad6;
  #L4b8af4.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8af8.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b8afe.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8b02.  call `onSubscribe`(v3, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b8b08.  if v2 >= v1 then goto L4b8b32;
  #L4b8b0c.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8b10.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b8b16.  v3:= temp;
  #L4b8b18.  if v3 == 0 then goto L4b8b1e;
  #L4b8b1c.  return @kind void;
  #L4b8b1e.  v3:= v8[v2] @kind object;
  #L4b8b22.  v4:= v0[v2] @kind object;
  #L4b8b26.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4b8b2c.  v2:= v2 + 1;
  #L4b8b30.  goto L4b8b08;
  #L4b8b32.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b8990.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8994.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b899a.  v0:= temp;
  #L4b899c.  v1:= 0I;
  #L4b899e.  if v0 != 0 then goto L4b89d6;
  #L4b89a2.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b89a6.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4b89ac.  v0:= temp;
  #L4b89ae.  if v0 == 0 then goto L4b89d6;
  #L4b89b2.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4b89b6.  v2:= length @variable v0;
  #L4b89b8.  if v1 >= v2 then goto L4b89d2;
  #L4b89bc.  v3:= v1 + 1;
  #L4b89c0.  if v3 == v5 then goto L4b89ce;
  #L4b89c4.  v1:= v0[v1] @kind object;
  #L4b89c8.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L4b89ce.  v1:= v3;
  #L4b89d0.  goto L4b89b8;
  #L4b89d2.  v5:= 1I;
  #L4b89d4.  return v5;
  #L4b89d6.  return v1;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b8a1c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8a20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b8a26.  v0:= temp;
  #L4b8a28.  v1:= -1I;
  #L4b8a2a.  if v0 == v1 then goto L4b8a54;
  #L4b8a2e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8a32.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4b8a38.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4b8a3c.  v1:= length @variable v0;
  #L4b8a3e.  v2:= 0I;
  #L4b8a40.  if v2 >= v1 then goto L4b8a54;
  #L4b8a44.  v3:= v0[v2] @kind object;
  #L4b8a48.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L4b8a4e.  v2:= v2 + 1;
  #L4b8a52.  goto L4b8a40;
  #L4b8a54.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b8a68.  call temp:= `validate`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4b8a6e.  v0:= temp;
  #L4b8a70.  if v0 == 0 then goto L4b8ab8;
  #L4b8a74.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4b8a78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4b8a7e.  v0:= temp;
  #L4b8a80.  if v0 <= 0 then goto L4b8a98;
  #L4b8a84.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4b8a88.  v0:= v0 + -1;
  #L4b8a8c.  v0:= v1[v0] @kind object;
  #L4b8a90.  call `request`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L4b8a96.  goto L4b8ab8;
  #L4b8a98.  if v0 != 0 then goto L4b8ab8;
  #L4b8a9c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L4b8aa0.  v1:= length @variable v0;
  #L4b8aa2.  v2:= 0I;
  #L4b8aa4.  if v2 >= v1 then goto L4b8ab8;
  #L4b8aa8.  v3:= v0[v2] @kind object;
  #L4b8aac.  call `request`(v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L4b8ab2.  v2:= v2 + 1;
  #L4b8ab6.  goto L4b8aa4;
  #L4b8ab8.  return @kind void;
}
