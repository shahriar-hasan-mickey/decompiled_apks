record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c516c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L4c5172.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4c5176.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c5188.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L4c518c.  v1:= length @variable v0;
  #L4c518e.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c5192.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L4c5196.  if v3 == v1 then goto L4c51f6;
  #L4c519a.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c519e.  if v4 == 0 then goto L4c51a4;
  #L4c51a2.  return @kind void;
  #L4c51a4.  v4:= v0[v3] @kind object;
  #L4c51a8.  if v4 != 0 then goto L4c51ea;
  #L4c51ac.  v0:= new `java.lang.NullPointerException`;
  #L4c51b0.  v1:= new `java.lang.StringBuilder`;
  #L4c51b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c51ba.  v4:= "The element at index " @kind object;
  #L4c51be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c51c4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c51ca.  v3:= " is null" @kind object;
  #L4c51ce.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c51d4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c51da.  v1:= temp @kind object;
  #L4c51dc.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c51e2.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c51e8.  return @kind void;
  #L4c51ea.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c51f0.  v3:= v3 + 1;
  #L4c51f4.  goto L4c5196;
  #L4c51f6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c51fa.  if v0 == 0 then goto L4c5200;
  #L4c51fe.  return @kind void;
  #L4c5200.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c5206.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromArray$a;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4c5218.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L4c521c.  v1:= length @variable v0;
  #L4c521e.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L4c5222.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c5226.  v4:= 0L;
  #L4c522a.  v6:= v4 @kind wide;
  #L4c522c.  v8:= lcmp(v6, v11);
  #L4c5230.  if v8 == 0 then goto L4c52a0;
  #L4c5234.  if v2 == v1 then goto L4c52a0;
  #L4c5238.  v8:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c523c.  if v8 == 0 then goto L4c5242;
  #L4c5240.  return @kind void;
  #L4c5242.  v8:= v0[v2] @kind object;
  #L4c5246.  if v8 != 0 then goto L4c5288;
  #L4c524a.  v11:= new `java.lang.NullPointerException`;
  #L4c524e.  v12:= new `java.lang.StringBuilder`;
  #L4c5252.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c5258.  v0:= "The element at index " @kind object;
  #L4c525c.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5262.  call temp:= `append`(v12, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5268.  v0:= " is null" @kind object;
  #L4c526c.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c5272.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c5278.  v12:= temp @kind object;
  #L4c527a.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5280.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5286.  return @kind void;
  #L4c5288.  call temp:= `tryOnNext`(v3, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c528e.  v8:= temp;
  #L4c5290.  if v8 == 0 then goto L4c529a;
  #L4c5294.  v8:= 1L;
  #L4c5298.  v6:= v6 + v8 @kind long;
  #L4c529a.  v2:= v2 + 1;
  #L4c529e.  goto L4c522c;
  #L4c52a0.  if v2 != v1 then goto L4c52b4;
  #L4c52a4.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L4c52a8.  if v11 != 0 then goto L4c52b2;
  #L4c52ac.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c52b2.  return @kind void;
  #L4c52b4.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c52ba.  v11:= temp @kind wide;
  #L4c52bc.  v8:= lcmp(v6, v11);
  #L4c52c0.  if v8 != 0 then goto L4c522c;
  #L4c52c4.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L4c52c8.  v11:= -v6 @kind long;
  #L4c52ca.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c52d0.  v11:= temp @kind wide;
  #L4c52d2.  v6:= lcmp(v11, v4);
  #L4c52d6.  if v6 != 0 then goto L4c522a;
  #L4c52da.  return @kind void;
}
