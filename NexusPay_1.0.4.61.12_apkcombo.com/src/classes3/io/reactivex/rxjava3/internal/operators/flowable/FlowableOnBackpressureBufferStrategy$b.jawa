record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.BackpressureOverflowStrategy` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @AccessFlag FINAL;
  `java.util.Deque` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Action` v2 @kind object, `io.reactivex.rxjava3.core.BackpressureOverflowStrategy` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/core/BackpressureOverflowStrategy;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cb83c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cb842.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cb846.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.rxjava3.functions.Action` := v2 @kind object;
  #L4cb84a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.rxjava3.core.BackpressureOverflowStrategy` := v3 @kind object;
  #L4cb84e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` := v4 @kind wide;
  #L4cb852.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4cb856.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cb85c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4cb860.  v1:= new `java.util.ArrayDeque`;
  #L4cb864.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4cb86a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` := v1 @kind object;
  #L4cb86e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.util.Deque` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @AccessFlag  {
    temp;
    v0;

  #L4cb8b8.  @monitorenter v2
  #L4cb8ba.  call `clear`(v2) @signature `Ljava/util/Deque;.clear:()V` @kind interface;
  #L4cb8c0.  @monitorexit v2
  #L4cb8c2.  return @kind void;
  #L4cb8c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cb8c6.  @monitorexit v2
  #L4cb8c8.  throw v0;
  catch `java.lang.Throwable` @[L4cb8ba..L4cb8c8] goto L4cb8c4;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4cb8e8.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cb8ee.  v0:= temp;
  #L4cb8f0.  if v0 == 0 then goto L4cb8f6;
  #L4cb8f4.  return @kind void;
  #L4cb8f6.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L4cb8fa.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb8fe.  v2:= 1I;
  #L4cb900.  v3:= 1I;
  #L4cb902.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb906.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cb90c.  v4:= temp @kind wide;
  #L4cb90e.  v6:= 0L;
  #L4cb912.  v8:= v6 @kind wide;
  #L4cb914.  v10:= lcmp(v8, v4);
  #L4cb918.  if v10 == 0 then goto L4cb986;
  #L4cb91c.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L4cb920.  if v11 == 0 then goto L4cb92c;
  #L4cb924.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L4cb92a.  return @kind void;
  #L4cb92c.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L4cb930.  @monitorenter v0
  #L4cb932.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cb938.  v12:= temp @kind object;
  #L4cb93a.  @monitorexit v0
  #L4cb93c.  if v12 != 0 then goto L4cb944;
  #L4cb940.  v13:= 1I;
  #L4cb942.  goto L4cb946;
  #L4cb944.  v13:= 0I;
  #L4cb946.  if v11 == 0 then goto L4cb96c;
  #L4cb94a.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L4cb94e.  if v11 == 0 then goto L4cb960;
  #L4cb952.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L4cb958.  call `onError`(v1, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb95e.  return @kind void;
  #L4cb960.  if v13 == 0 then goto L4cb96c;
  #L4cb964.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb96a.  return @kind void;
  #L4cb96c.  if v13 == 0 then goto L4cb972;
  #L4cb970.  goto L4cb986;
  #L4cb972.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cb978.  v10:= 1L;
  #L4cb97c.  v8:= v8 + v10 @kind long;
  #L4cb97e.  goto L4cb914;
  #L4cb980.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cb982.  @monitorexit v0
  #L4cb984.  throw v1;
  #L4cb986.  if v10 != 0 then goto L4cb9d6;
  #L4cb98a.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L4cb98e.  if v4 == 0 then goto L4cb99a;
  #L4cb992.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L4cb998.  return @kind void;
  #L4cb99a.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L4cb99e.  @monitorenter v0
  #L4cb9a0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L4cb9a6.  v5:= temp;
  #L4cb9a8.  @monitorexit v0
  #L4cb9aa.  if v4 == 0 then goto L4cb9d6;
  #L4cb9ae.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L4cb9b2.  if v4 == 0 then goto L4cb9c4;
  #L4cb9b6.  call `a`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L4cb9bc.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb9c2.  return @kind void;
  #L4cb9c4.  if v5 == 0 then goto L4cb9d6;
  #L4cb9c8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb9ce.  return @kind void;
  #L4cb9d0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cb9d2.  @monitorexit v0
  #L4cb9d4.  throw v1;
  #L4cb9d6.  v4:= lcmp(v8, v6);
  #L4cb9da.  if v4 == 0 then goto L4cb9e8;
  #L4cb9de.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb9e2.  call temp:= `produced`(v4, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cb9e8.  v3:= -v3 @kind int;
  #L4cb9ea.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cb9f0.  v3:= temp;
  #L4cb9f2.  if v3 != 0 then goto L4cb902;
  #L4cb9f6.  return @kind void;
  catch `java.lang.Throwable` @[L4cb932..L4cb93c] goto L4cb980;
  catch `java.lang.Throwable` @[L4cb982..L4cb984] goto L4cb980;
  catch `java.lang.Throwable` @[L4cb9a0..L4cb9aa] goto L4cb9d0;
  catch `java.lang.Throwable` @[L4cb9d2..L4cb9d4] goto L4cb9d0;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb880.  v0:= 1I;
  #L4cb882.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4cb886.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb88a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cb890.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cb896.  v0:= temp;
  #L4cb898.  if v0 != 0 then goto L4cb8a6;
  #L4cb89c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L4cb8a0.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L4cb8a6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cba30.  v0:= 1I;
  #L4cba32.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4cba36.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L4cba3c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cba50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L4cba54.  if v0 == 0 then goto L4cba60;
  #L4cba58.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cba5e.  return @kind void;
  #L4cba60.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4cba64.  v2:= 1I;
  #L4cba66.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4cba6a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L4cba70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4cba84.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L4cba88.  if v0 == 0 then goto L4cba8e;
  #L4cba8c.  return @kind void;
  #L4cba8e.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L4cba92.  @monitorenter v0
  #L4cba94.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L4cba9a.  v1:= temp;
  #L4cba9c.  v1:= (`long`) v1 @kind i2l;
  #L4cba9e.  v3:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` @kind wide;
  #L4cbaa2.  v5:= 0I;
  #L4cbaa4.  v6:= 1I;
  #L4cbaa6.  v7:= lcmp(v1, v3);
  #L4cbaaa.  if v7 != 0 then goto L4cbaec;
  #L4cbaae.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] @kind object;
  #L4cbab2.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.rxjava3.core.BackpressureOverflowStrategy` @kind object;
  #L4cbab6.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4cbabc.  v2:= temp;
  #L4cbabe.  v1:= v1[v2];
  #L4cbac2.  if v1 == v6 then goto L4cbadc;
  #L4cbac6.  v2:= 2I;
  #L4cbac8.  if v1 == v2 then goto L4cbace;
  #L4cbacc.  goto L4cbaf4;
  #L4cbace.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cbad4.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cbada.  goto L4cbae8;
  #L4cbadc.  call temp:= `pollLast`(v0) @signature `Ljava/util/Deque;.pollLast:()Ljava/lang/Object;` @kind interface;
  #L4cbae2.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cbae8.  v5:= 1I;
  #L4cbaea.  goto L4cbaf2;
  #L4cbaec.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cbaf2.  v6:= 0I;
  #L4cbaf4.  @monitorexit v0
  #L4cbaf6.  if v5 == 0 then goto L4cbb24;
  #L4cbafa.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4cbafe.  if v9 == 0 then goto L4cbb4a;
  #L4cbb02.  call `run`(v9) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4cbb08.  goto L4cbb4a;
  #L4cbb0a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cbb0c.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cbb12.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cbb16.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cbb1c.  call `onError`(v8, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cbb22.  goto L4cbb4a;
  #L4cbb24.  if v6 == 0 then goto L4cbb44;
  #L4cbb28.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cbb2c.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cbb32.  v9:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4cbb36.  call `<init>`(v9) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4cbb3c.  call `onError`(v8, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cbb42.  goto L4cbb4a;
  #L4cbb44.  call `b`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L4cbb4a.  return @kind void;
  #L4cbb4c.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cbb4e.  @monitorexit v0
  #L4cbb50.  throw v9;
  catch `java.lang.Throwable` @[L4cba94..L4cbaf6] goto L4cbb4c;
  catch `java.lang.Throwable` @[L4cbb02..L4cbb08] goto L4cbb0a;
  catch `java.lang.Throwable` @[L4cbb4e..L4cbb50] goto L4cbb4c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cbb84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cbb88.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cbb8e.  v0:= temp;
  #L4cbb90.  if v0 == 0 then goto L4cbbb2;
  #L4cbb94.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4cbb98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cbb9c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cbba2.  v0:= 9223372036854775807L;
  #L4cbbac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cbbb2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbbc4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4cbbca.  v0:= temp;
  #L4cbbcc.  if v0 == 0 then goto L4cbbe0;
  #L4cbbd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cbbd4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cbbda.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L4cbbe0.  return @kind void;
}
