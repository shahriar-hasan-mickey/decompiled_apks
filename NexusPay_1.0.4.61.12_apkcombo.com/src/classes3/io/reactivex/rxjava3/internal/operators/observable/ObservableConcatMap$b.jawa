record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4eada0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4eada6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4eadaa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4eadae.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.d` @type ^`int` := v3;
  #L4eadb2.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a`;
  #L4eadb6.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;)V` @kind direct;
  #L4eadbc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` := v2 @kind object;
  #L4eadc0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eae18.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eae1e.  v0:= temp;
  #L4eae20.  if v0 == 0 then goto L4eae26;
  #L4eae24.  return @kind void;
  #L4eae26.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L4eae2a.  if v0 == 0 then goto L4eae3a;
  #L4eae2e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eae32.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eae38.  return @kind void;
  #L4eae3a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` @kind boolean;
  #L4eae3e.  if v0 != 0 then goto L4eaeee;
  #L4eae42.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4eae46.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eae4a.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4eae50.  v1:= temp @kind object;
  #L4eae52.  v2:= 1I;
  #L4eae54.  if v1 != 0 then goto L4eae5c;
  #L4eae58.  v3:= 1I;
  #L4eae5a.  goto L4eae5e;
  #L4eae5c.  v3:= 0I;
  #L4eae5e.  if v0 == 0 then goto L4eae76;
  #L4eae62.  if v3 == 0 then goto L4eae76;
  #L4eae66.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4eae6a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eae6e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4eae74.  return @kind void;
  #L4eae76.  if v3 != 0 then goto L4eaeee;
  #L4eae7a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4eae7e.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eae84.  v0:= temp @kind object;
  #L4eae86.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L4eae8a.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eae90.  v0:= temp @kind object;
  #L4eae92.  v0:= (`io.reactivex.rxjava3.core.ObservableSource`) v0 @kind object;
  #L4eae96.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` := v2 @kind boolean;
  #L4eae9a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` @kind object;
  #L4eae9e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4eaea4.  goto L4eaeee;
  #L4eaea6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eaea8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eaeae.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L4eaeb4.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eaeb8.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eaebe.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eaec2.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4eaec8.  return @kind void;
  #L4eaeca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eaecc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4eaed2.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L4eaed8.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eaedc.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eaee2.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eaee6.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4eaeec.  return @kind void;
  #L4eaeee.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4eaef4.  v0:= temp;
  #L4eaef6.  if v0 != 0 then goto L4eae26;
  #L4eaefa.  return @kind void;
  catch `java.lang.Throwable` @[L4eae46..L4eae52] goto L4eaeca;
  catch `java.lang.Throwable` @[L4eae7a..L4eae96] goto L4eaea6;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4eaf24.  v0:= 0I;
  #L4eaf26.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4eaf2a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4eaf30.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eadd4.  v0:= 1I;
  #L4eadd6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4eadda.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b$a` @kind object;
  #L4eadde.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b$a;.a:()V` @kind virtual;
  #L4eade4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eade8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eadee.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eadf4.  v0:= temp;
  #L4eadf6.  if v0 != 0 then goto L4eae04;
  #L4eadfa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eadfe.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eae04.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ead88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L4ead8c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eaf44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4eaf48.  if v0 == 0 then goto L4eaf4e;
  #L4eaf4c.  return @kind void;
  #L4eaf4e.  v0:= 1I;
  #L4eaf50.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4eaf54.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4eaf5a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eaf6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4eaf70.  if v0 == 0 then goto L4eaf7c;
  #L4eaf74.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4eaf7a.  return @kind void;
  #L4eaf7c.  v0:= 1I;
  #L4eaf7e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4eaf82.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L4eaf88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eaf8c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4eaf92.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eafa4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4eafa8.  if v0 == 0 then goto L4eafae;
  #L4eafac.  return @kind void;
  #L4eafae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int`;
  #L4eafb2.  if v0 != 0 then goto L4eafc0;
  #L4eafb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4eafba.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4eafc0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4eafc6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eafd8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4eafdc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4eafe2.  v0:= temp;
  #L4eafe4.  if v0 == 0 then goto L4eb05c;
  #L4eafe8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4eafec.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4eaff0.  if v0 == 0 then goto L4eb040;
  #L4eaff4.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4eaff8.  v0:= 3I;
  #L4eaffa.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4eb000.  v0:= temp;
  #L4eb002.  v1:= 1I;
  #L4eb004.  if v0 != v1 then goto L4eb026;
  #L4eb008.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int` := v0;
  #L4eb00c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb010.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v1 @kind boolean;
  #L4eb014.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb018.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb01e.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4eb024.  return @kind void;
  #L4eb026.  v1:= 2I;
  #L4eb028.  if v0 != v1 then goto L4eb040;
  #L4eb02c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int` := v0;
  #L4eb030.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb034.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb038.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb03e.  return @kind void;
  #L4eb040.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4eb044.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.d` @type ^`int`;
  #L4eb048.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4eb04e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4eb052.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eb056.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eb05c.  return @kind void;
}
