record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind object, `io.reactivex.rxjava3.subjects.UnicastSubject` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;Lio/reactivex/rxjava3/subjects/UnicastSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fe680.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4fe686.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` := v1 @kind object;
  #L4fe68a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v2 @kind object;
  #L4fe68e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fe692.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fe698.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4fe69c.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4fe6a0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4fe6a6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4fe6aa.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4fe644.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe648.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fe64e.  v0:= temp;
  #L4fe650.  v1:= 1I;
  #L4fe652.  v2:= 0I;
  #L4fe654.  if v0 != 0 then goto L4fe66a;
  #L4fe658.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe65c.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4fe662.  v0:= temp;
  #L4fe664.  if v0 == 0 then goto L4fe66a;
  #L4fe668.  goto L4fe66c;
  #L4fe66a.  v1:= 0I;
  #L4fe66c.  return v1;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe6bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe6c0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fe6c6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fe618.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe61c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fe622.  v0:= temp @kind object;
  #L4fe624.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4fe628.  if v0 != v1 then goto L4fe630;
  #L4fe62c.  v0:= 1I;
  #L4fe62e.  goto L4fe632;
  #L4fe630.  v0:= 0I;
  #L4fe632.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe6d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` @kind object;
  #L4fe6dc.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;)V` @kind virtual;
  #L4fe6e2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe6f4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.isDisposed:()Z` @kind virtual;
  #L4fe6fa.  v0:= temp;
  #L4fe6fc.  if v0 == 0 then goto L4fe708;
  #L4fe700.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fe706.  goto L4fe712;
  #L4fe708.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` @kind object;
  #L4fe70c.  call `b`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fe712.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4fe724.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe728.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fe72e.  v1:= temp;
  #L4fe730.  if v1 == 0 then goto L4fe73e;
  #L4fe734.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` @kind object;
  #L4fe738.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;)V` @kind virtual;
  #L4fe73e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe750.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fe754.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fe75a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4fe76c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4fe770.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4fe776.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe77a.  v0:= 1I;
  #L4fe77c.  call `set`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L4fe782.  return @kind void;
}
