record `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L501160.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L501166.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L50116a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L50116e.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L501172.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501184.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L501188.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50118e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5011a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L5011a4.  if v0 == 0 then goto L5011aa;
  #L5011a8.  return @kind void;
  #L5011aa.  v0:= 1I;
  #L5011ac.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L5011b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L5011b4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L5011ba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5011cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L5011d0.  if v0 == 0 then goto L5011dc;
  #L5011d4.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5011da.  return @kind void;
  #L5011dc.  v0:= 1I;
  #L5011de.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L5011e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L5011e6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5011ec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L501200.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L501206.  v3:= temp;
  #L501208.  if v3 != 0 then goto L501222;
  #L50120c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L501210.  if v3 != 0 then goto L501222;
  #L501214.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L501218.  v0:= 1L;
  #L50121c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L501222.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501234.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L501238.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L50123e.  v0:= temp;
  #L501240.  if v0 == 0 then goto L501252;
  #L501244.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L501248.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L50124c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L501252.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501264.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L501268.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50126e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L501074.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L501078.  v1:= 0I;
  #L50107a.  if v0 == 0 then goto L501080;
  #L50107e.  return v1;
  #L501080.  v2:= 0L;
  #L501084.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L501088.  call `accept`(v0, v10) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L50108e.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L501092.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L501098.  v10:= temp;
  #L50109a.  return v10;
  #L50109c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50109e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5010a4.  v4:= 1I;
  #L5010a6.  v5:= 2I;
  #L5010a8.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L5010ac.  v7:= 1L;
  #L5010b0.  v2:= v2 + v7 @kind long;
  #L5010b2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L5010b8.  v7:= temp @kind object;
  #L5010ba.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L5010c0.  v6:= temp @kind object;
  #L5010c2.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L5010c6.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5010cc.  v6:= temp @kind object;
  #L5010ce.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L5010d2.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L5010d6.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L5010dc.  v6:= temp;
  #L5010de.  v6:= v7[v6];
  #L5010e2.  if v6 == v4 then goto L501084;
  #L5010e6.  if v6 == v5 then goto L50110a;
  #L5010ea.  v10:= 3I;
  #L5010ec.  if v6 == v10 then goto L5010fe;
  #L5010f0.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L5010f6.  call `onError`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5010fc.  return v1;
  #L5010fe.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L501104.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @kind virtual;
  #L50110a.  return v1;
  #L50110c.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50110e.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L501114.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L50111a.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L50111e.  v3:= new `java.lang.Throwable`[v5];
  #L501122.  v3[v1]:= v0 @kind object;
  #L501126.  v3[v4]:= v10 @kind object;
  #L50112a.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L501130.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L501136.  return v1;
  catch `java.lang.Throwable` @[L501084..L50108e] goto L50109c;
  catch `java.lang.Throwable` @[L5010a8..L5010d2] goto L50110c;
}
