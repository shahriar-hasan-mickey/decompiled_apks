record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.<init>:(Lorg/reactivestreams/Subscriber;JI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d6bb8.  v0:= 1I;
  #L4d6bba.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4d6bc0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d6bc4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.b` @type ^`long` := v3 @kind wide;
  #L4d6bc8.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d6bcc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d6bd2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4d6bd6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.d` @type ^`int` := v5;
  #L4d6bda.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d6bec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d6bf0.  v1:= 0I;
  #L4d6bf2.  v2:= 1I;
  #L4d6bf4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d6bfa.  v0:= temp;
  #L4d6bfc.  if v0 == 0 then goto L4d6c06;
  #L4d6c00.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.run:()V` @kind virtual;
  #L4d6c06.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d6c18.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d6c1c.  if v0 == 0 then goto L4d6c2c;
  #L4d6c20.  v1:= 0I;
  #L4d6c22.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v1 @kind object;
  #L4d6c26.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d6c2c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6c30.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d6c36.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d6c48.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d6c4c.  if v0 == 0 then goto L4d6c5c;
  #L4d6c50.  v1:= 0I;
  #L4d6c52.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v1 @kind object;
  #L4d6c56.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6c5c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6c60.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6c66.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d6c78.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.e` @type ^`long` @kind wide;
  #L4d6c7c.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d6c80.  v3:= 0L;
  #L4d6c84.  v5:= 0I;
  #L4d6c86.  v6:= lcmp(v0, v3);
  #L4d6c8a.  if v6 != 0 then goto L4d6cba;
  #L4d6c8e.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d6c94.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.d` @type ^`int`;
  #L4d6c98.  call temp:= `create`(v2, v9) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d6c9e.  v2:= temp @kind object;
  #L4d6ca0.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4d6ca4.  v6:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d6ca8.  call `<init>`(v6, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d6cae.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6cb2.  call `onNext`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d6cb8.  goto L4d6cbc;
  #L4d6cba.  v6:= v5 @kind object;
  #L4d6cbc.  v7:= 1L;
  #L4d6cc0.  v0:= v0 + v7 @kind long;
  #L4d6cc2.  call `onNext`(v2, v10) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4d6cc8.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.b` @type ^`long` @kind wide;
  #L4d6ccc.  v10:= lcmp(v0, v7);
  #L4d6cd0.  if v10 != 0 then goto L4d6ce4;
  #L4d6cd4.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.e` @type ^`long` := v3 @kind wide;
  #L4d6cd8.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v5 @kind object;
  #L4d6cdc.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d6ce2.  goto L4d6ce8;
  #L4d6ce4.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.e` @type ^`long` := v0 @kind wide;
  #L4d6ce8.  if v6 == 0 then goto L4d6d02;
  #L4d6cec.  call temp:= `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d6cf2.  v10:= temp;
  #L4d6cf4.  if v10 == 0 then goto L4d6d02;
  #L4d6cf8.  v10:= v6.`io.reactivex.rxjava3.internal.operators.flowable.b.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4d6cfc.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d6d02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6d14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d6d18.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d6d1e.  v0:= temp;
  #L4d6d20.  if v0 == 0 then goto L4d6d32;
  #L4d6d24.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d6d28.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6d2c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d6d32.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d6d44.  call temp:= `validate`(v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d6d4a.  v0:= temp;
  #L4d6d4c.  if v0 == 0 then goto L4d6d66;
  #L4d6d50.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.b` @type ^`long` @kind wide;
  #L4d6d54.  call temp:= `multiplyCap`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4d6d5a.  v3:= temp @kind wide;
  #L4d6d5c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d6d60.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d6d66.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6d78.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d6d7e.  v0:= temp;
  #L4d6d80.  if v0 != 0 then goto L4d6d8e;
  #L4d6d84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d6d88.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d6d8e.  return @kind void;
}
