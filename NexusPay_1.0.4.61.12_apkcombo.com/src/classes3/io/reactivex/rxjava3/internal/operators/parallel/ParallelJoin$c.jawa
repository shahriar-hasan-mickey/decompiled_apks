record `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L50275c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L502762.  v0:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L502766.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L50276c.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v0 @kind object;
  #L502770.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L502774.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L50277a.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L50277e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L502782.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L502788.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L50278c.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L502790.  v3:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[v4];
  #L502794.  v0:= 0I;
  #L502796.  if v0 >= v4 then goto L5027ae;
  #L50279a.  v1:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`;
  #L50279e.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;I)V` @kind direct;
  #L5027a4.  v3[v0]:= v1 @kind object;
  #L5027a8.  v0:= v0 + 1;
  #L5027ac.  goto L502796;
  #L5027ae.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] := v3 @kind object;
  #L5027b2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L5027b6.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L5027bc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L502808.  v0:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L50280c.  v1:= length @variable v0;
  #L50280e.  v2:= 0I;
  #L502810.  if v2 >= v1 then goto L502824;
  #L502814.  v3:= v0[v2] @kind object;
  #L502818.  call temp:= `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L50281e.  v2:= v2 + 1;
  #L502822.  goto L502810;
  #L502824.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L502838.  v0:= v5.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L50283c.  v1:= length @variable v0;
  #L50283e.  v2:= 0I;
  #L502840.  if v2 >= v1 then goto L502854;
  #L502844.  v3:= v0[v2] @kind object;
  #L502848.  v4:= 0I;
  #L50284a.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L50284e.  v2:= v2 + 1;
  #L502852.  goto L502840;
  #L502854.  return @kind void;
}
procedure `void` `c`() @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5027d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L5027d4.  if v0 != 0 then goto L5027f6;
  #L5027d8.  v0:= 1I;
  #L5027da.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` := v0 @kind boolean;
  #L5027de.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L5027e4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L5027ea.  v0:= temp;
  #L5027ec.  if v0 != 0 then goto L5027f6;
  #L5027f0.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L5027f6.  return @kind void;
}
procedure `void` `d`() @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.d:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.e:(Ljava/lang/Throwable;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.f:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502868.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L50286e.  v0:= temp;
  #L502870.  if v0 == 0 then goto L502884;
  #L502874.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502878.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L50287e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.c:()V` @kind virtual;
  #L502884.  return @kind void;
}
