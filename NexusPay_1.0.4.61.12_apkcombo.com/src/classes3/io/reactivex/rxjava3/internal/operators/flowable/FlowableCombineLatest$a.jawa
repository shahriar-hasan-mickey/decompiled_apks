record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.g` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.h` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4bbd9c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4bbda2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4bbda6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4bbdaa.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[v4];
  #L4bbdae.  v3:= 0I;
  #L4bbdb0.  if v3 >= v4 then goto L4bbdc8;
  #L4bbdb4.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`;
  #L4bbdb8.  call `<init>`(v0, v1, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;II)V` @kind direct;
  #L4bbdbe.  v2[v3]:= v0 @kind object;
  #L4bbdc2.  v3:= v3 + 1;
  #L4bbdc6.  goto L4bbdb0;
  #L4bbdc8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] := v2 @kind object;
  #L4bbdcc.  v2:= new `java.lang.Object`[v4];
  #L4bbdd0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4bbdd4.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bbdd8.  call `<init>`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bbdde.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4bbde2.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4bbde6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4bbdec.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4bbdf0.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4bbdf4.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4bbdfa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4bbdfe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` := v6 @kind boolean;
  #L4bbe02.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bbe14.  v0:= 1I;
  #L4bbe16.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4bbe1a.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4bbe20.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L4bbe26.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bbe68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bbe6c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bbe72.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4bbe84.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bbe8a.  v0:= temp;
  #L4bbe8c.  if v0 == 0 then goto L4bbe92;
  #L4bbe90.  return @kind void;
  #L4bbe92.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` @kind boolean;
  #L4bbe96.  if v0 == 0 then goto L4bbea2;
  #L4bbe9a.  call `h`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @kind virtual;
  #L4bbea0.  goto L4bbea8;
  #L4bbea2.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @kind virtual;
  #L4bbea8.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bbe38.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L4bbe3c.  v1:= length @variable v0;
  #L4bbe3e.  v2:= 0I;
  #L4bbe40.  if v2 >= v1 then goto L4bbe54;
  #L4bbe44.  v3:= v0[v2] @kind object;
  #L4bbe48.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.a:()V` @kind virtual;
  #L4bbe4e.  v2:= v2 + 1;
  #L4bbe52.  goto L4bbe40;
  #L4bbe54.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bbc60.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L4bbc64.  v1:= 1I;
  #L4bbc66.  if v0 == 0 then goto L4bbc82;
  #L4bbc6a.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4bbc70.  call `clear`(v6) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bbc76.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bbc7a.  call `tryTerminateAndReport`(v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bbc80.  return v1;
  #L4bbc82.  if v3 == 0 then goto L4bbce2;
  #L4bbc86.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L4bbc8a.  if v3 == 0 then goto L4bbca4;
  #L4bbc8e.  if v4 == 0 then goto L4bbce2;
  #L4bbc92.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4bbc98.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bbc9c.  call `tryTerminateConsumer`(v3, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bbca2.  return v1;
  #L4bbca4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bbca8.  call temp:= `terminate`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4bbcae.  v3:= temp @kind object;
  #L4bbcb0.  if v3 == 0 then goto L4bbcd0;
  #L4bbcb4.  v0:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4bbcb8.  if v3 == v0 then goto L4bbcd0;
  #L4bbcbc.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4bbcc2.  call `clear`(v6) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bbcc8.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bbcce.  return v1;
  #L4bbcd0.  if v4 == 0 then goto L4bbce2;
  #L4bbcd4.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4bbcda.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4bbce0.  return v1;
  #L4bbce2.  v3:= 0I;
  #L4bbce4.  return v3;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4bbebc.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bbec0.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bbec4.  v2:= 1I;
  #L4bbec6.  v3:= 1I;
  #L4bbec8.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bbecc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4bbed2.  v4:= temp @kind wide;
  #L4bbed4.  v6:= 0L;
  #L4bbed8.  v8:= v6 @kind wide;
  #L4bbeda.  v10:= lcmp(v8, v4);
  #L4bbede.  if v10 == 0 then goto L4bbf74;
  #L4bbee2.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L4bbee6.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4bbeec.  v12:= temp @kind object;
  #L4bbeee.  if v12 != 0 then goto L4bbef6;
  #L4bbef2.  v13:= 1I;
  #L4bbef4.  goto L4bbef8;
  #L4bbef6.  v13:= 0I;
  #L4bbef8.  call temp:= `f`(v14, v11, v13, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4bbefe.  v11:= temp;
  #L4bbf00.  if v11 == 0 then goto L4bbf06;
  #L4bbf04.  return @kind void;
  #L4bbf06.  if v13 == 0 then goto L4bbf0c;
  #L4bbf0a.  goto L4bbf74;
  #L4bbf0c.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4bbf12.  v10:= temp @kind object;
  #L4bbf14.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L4bbf18.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bbf1c.  call temp:= `apply`(v11, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bbf22.  v10:= temp @kind object;
  #L4bbf24.  v11:= "The combiner returned a null value" @kind object;
  #L4bbf28.  call temp:= `requireNonNull`(v10, v11) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bbf2e.  v10:= temp @kind object;
  #L4bbf30.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bbf36.  v12:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`) v12 @kind object;
  #L4bbf3a.  call `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L4bbf40.  v10:= 1L;
  #L4bbf44.  v8:= v8 + v10 @kind long;
  #L4bbf46.  goto L4bbeda;
  #L4bbf48.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bbf4a.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bbf50.  call `e`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4bbf56.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bbf5a.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4bbf60.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bbf64.  call temp:= `terminate`(v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4bbf6a.  v1:= temp @kind object;
  #L4bbf6c.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bbf72.  return @kind void;
  #L4bbf74.  if v10 != 0 then goto L4bbf92;
  #L4bbf78.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L4bbf7c.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4bbf82.  v11:= temp;
  #L4bbf84.  call temp:= `f`(v14, v10, v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4bbf8a.  v10:= temp;
  #L4bbf8c.  if v10 == 0 then goto L4bbf92;
  #L4bbf90.  return @kind void;
  #L4bbf92.  v10:= lcmp(v8, v6);
  #L4bbf96.  if v10 == 0 then goto L4bbfb8;
  #L4bbf9a.  v6:= 9223372036854775807L;
  #L4bbfa4.  v10:= lcmp(v4, v6);
  #L4bbfa8.  if v10 == 0 then goto L4bbfb8;
  #L4bbfac.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bbfb0.  v5:= -v8 @kind long;
  #L4bbfb2.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4bbfb8.  v3:= -v3 @kind int;
  #L4bbfba.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bbfc0.  v3:= temp;
  #L4bbfc2.  if v3 != 0 then goto L4bbec8;
  #L4bbfc6.  return @kind void;
  catch `java.lang.Throwable` @[L4bbf18..L4bbf30] goto L4bbf48;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bbfe4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bbfe8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bbfec.  v2:= 1I;
  #L4bbfee.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L4bbff2.  if v3 == 0 then goto L4bbffe;
  #L4bbff6.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bbffc.  return @kind void;
  #L4bbffe.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bc002.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bc008.  v3:= temp @kind object;
  #L4bc00a.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4bc00e.  if v3 == 0 then goto L4bc020;
  #L4bc012.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bc018.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bc01e.  return @kind void;
  #L4bc020.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L4bc024.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4bc02a.  v4:= temp;
  #L4bc02c.  if v4 != 0 then goto L4bc038;
  #L4bc030.  v5:= 0I;
  #L4bc032.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bc038.  if v3 == 0 then goto L4bc048;
  #L4bc03c.  if v4 == 0 then goto L4bc048;
  #L4bc040.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4bc046.  return @kind void;
  #L4bc048.  v2:= -v2 @kind int;
  #L4bc04a.  call temp:= `addAndGet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bc050.  v2:= temp;
  #L4bc052.  if v2 != 0 then goto L4bbfee;
  #L4bc056.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bc068.  @monitorenter v2
  #L4bc06a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L4bc06e.  v3:= v0[v3] @kind object;
  #L4bc072.  v1:= 1I;
  #L4bc074.  if v3 == 0 then goto L4bc092;
  #L4bc078.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int`;
  #L4bc07c.  v3:= v3 + v1 @kind int;
  #L4bc07e.  v0:= length @variable v0;
  #L4bc080.  if v3 != v0 then goto L4bc08a;
  #L4bc084.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L4bc088.  goto L4bc096;
  #L4bc08a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int` := v3;
  #L4bc08e.  @monitorexit v2
  #L4bc090.  return @kind void;
  #L4bc092.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L4bc096.  @monitorexit v2
  #L4bc098.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L4bc09e.  return @kind void;
  #L4bc0a0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc0a2.  @monitorexit v2
  #L4bc0a4.  throw v3;
  catch `java.lang.Throwable` @[L4bc06a..L4bc098] goto L4bc0a0;
  catch `java.lang.Throwable` @[L4bc0a2..L4bc0a4] goto L4bc0a0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bbcf8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bbcfc.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4bbd02.  v0:= temp;
  #L4bbd04.  return v0;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.j:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4bc0cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bc0d0.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4bc0d6.  v0:= temp;
  #L4bc0d8.  if v0 == 0 then goto L4bc100;
  #L4bc0dc.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L4bc0e0.  if v3 != 0 then goto L4bc0f8;
  #L4bc0e4.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4bc0ea.  v2:= 1I;
  #L4bc0ec.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4bc0f0.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L4bc0f6.  goto L4bc106;
  #L4bc0f8.  call `i`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @kind virtual;
  #L4bc0fe.  goto L4bc106;
  #L4bc100.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bc106.  return @kind void;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.k:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4bc118.  @monitorenter v3
  #L4bc11a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L4bc11e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int`;
  #L4bc122.  v2:= v0[v4] @kind object;
  #L4bc126.  if v2 != 0 then goto L4bc132;
  #L4bc12a.  v1:= v1 + 1;
  #L4bc12e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int` := v1;
  #L4bc132.  v0[v4]:= v5 @kind object;
  #L4bc136.  v5:= length @variable v0;
  #L4bc138.  if v5 != v1 then goto L4bc15a;
  #L4bc13c.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bc140.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L4bc144.  v1:= v1[v4] @kind object;
  #L4bc148.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4bc14e.  v0:= temp @kind object;
  #L4bc150.  call temp:= `offer`(v5, v1, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4bc156.  v5:= 0I;
  #L4bc158.  goto L4bc15c;
  #L4bc15a.  v5:= 1I;
  #L4bc15c.  @monitorexit v3
  #L4bc15e.  if v5 == 0 then goto L4bc172;
  #L4bc162.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L4bc166.  v4:= v5[v4] @kind object;
  #L4bc16a.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L4bc170.  goto L4bc178;
  #L4bc172.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L4bc178.  return @kind void;
  #L4bc17a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc17c.  @monitorexit v3
  #L4bc17e.  throw v4;
  catch `java.lang.Throwable` @[L4bc11a..L4bc15e] goto L4bc17a;
  catch `java.lang.Throwable` @[L4bc17c..L4bc17e] goto L4bc17a;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.l:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bc1d4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L4bc1d8.  v1:= 0I;
  #L4bc1da.  if v1 >= v6 then goto L4bc204;
  #L4bc1de.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L4bc1e2.  if v2 != 0 then goto L4bc204;
  #L4bc1e6.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L4bc1ea.  if v2 == 0 then goto L4bc1f0;
  #L4bc1ee.  goto L4bc204;
  #L4bc1f0.  v2:= v5[v1] @kind object;
  #L4bc1f4.  v3:= v0[v1] @kind object;
  #L4bc1f8.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4bc1fe.  v1:= v1 + 1;
  #L4bc202.  goto L4bc1da;
  #L4bc204.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bbd44.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bbd48.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4bbd4e.  v0:= temp @kind object;
  #L4bbd50.  if v0 != 0 then goto L4bbd58;
  #L4bbd54.  v0:= 0I;
  #L4bbd56.  return v0 @kind object;
  #L4bbd58.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bbd5c.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4bbd62.  v1:= temp @kind object;
  #L4bbd64.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L4bbd68.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bbd6c.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bbd72.  v1:= temp @kind object;
  #L4bbd74.  v2:= "The combiner returned a null value" @kind object;
  #L4bbd78.  call temp:= `requireNonNull`(v1, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bbd7e.  v1:= temp @kind object;
  #L4bbd80.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$b`) v0 @kind object;
  #L4bbd84.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L4bbd8a.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc1a4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4bc1aa.  v0:= temp;
  #L4bc1ac.  if v0 == 0 then goto L4bc1c0;
  #L4bc1b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bc1b4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4bc1ba.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L4bc1c0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatest$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bbd18.  v0:= v3 ^& 4;
  #L4bbd1c.  v1:= 0I;
  #L4bbd1e.  if v0 == 0 then goto L4bbd24;
  #L4bbd22.  return v1;
  #L4bbd24.  v3:= v3 ^& 2;
  #L4bbd28.  if v3 == 0 then goto L4bbd2e;
  #L4bbd2c.  v1:= 1I;
  #L4bbd2e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4bbd32.  return v3;
}
