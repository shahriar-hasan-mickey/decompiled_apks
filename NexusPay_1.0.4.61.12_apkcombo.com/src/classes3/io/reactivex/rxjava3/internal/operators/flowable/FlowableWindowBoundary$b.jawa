record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.l` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d7548.  v0:= new `java.lang.Object`;
  #L4d754c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d7552.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` := v0 @kind object;
  #L4d7556.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d7568.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d756e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d7572.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.b` @type ^`int` := v2;
  #L4d7576.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a`;
  #L4d757a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;)V` @kind direct;
  #L4d7580.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` := v1 @kind object;
  #L4d7584.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d7588.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d758e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d7592.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4d7596.  v2:= 1I;
  #L4d7598.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4d759e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4d75a2.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4d75a6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4d75ac.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L4d75b0.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d75b4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d75ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4d75be.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d75c2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d75c8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4d75cc.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d75d0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d75d6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d75da.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4d7638.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d763e.  v0:= temp;
  #L4d7640.  if v0 == 0 then goto L4d7646;
  #L4d7644.  return @kind void;
  #L4d7646.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d764a.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4d764e.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d7652.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.l` @type ^`long` @kind wide;
  #L4d7656.  v5:= 1I;
  #L4d7658.  v6:= 1I;
  #L4d765a.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d765e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d7664.  v7:= temp;
  #L4d7666.  v8:= 0I;
  #L4d7668.  if v7 != 0 then goto L4d7678;
  #L4d766c.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4d7672.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4d7676.  return @kind void;
  #L4d7678.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d767c.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` @kind boolean;
  #L4d7680.  if v9 == 0 then goto L4d76b4;
  #L4d7684.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d768a.  v10:= temp @kind object;
  #L4d768c.  if v10 == 0 then goto L4d76b4;
  #L4d7690.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4d7696.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4d769c.  v1:= temp @kind object;
  #L4d769e.  if v7 == 0 then goto L4d76ac;
  #L4d76a2.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4d76a6.  call `onError`(v7, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d76ac.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d76b2.  return @kind void;
  #L4d76b4.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d76ba.  v10:= temp @kind object;
  #L4d76bc.  if v10 != 0 then goto L4d76c4;
  #L4d76c0.  v11:= 1I;
  #L4d76c2.  goto L4d76c6;
  #L4d76c4.  v11:= 0I;
  #L4d76c6.  if v9 == 0 then goto L4d7706;
  #L4d76ca.  if v11 == 0 then goto L4d7706;
  #L4d76ce.  call temp:= `terminate`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4d76d4.  v1:= temp @kind object;
  #L4d76d6.  if v1 != 0 then goto L4d76f0;
  #L4d76da.  if v7 == 0 then goto L4d76e8;
  #L4d76de.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4d76e2.  call `onComplete`(v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d76e8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d76ee.  goto L4d7704;
  #L4d76f0.  if v7 == 0 then goto L4d76fe;
  #L4d76f4.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4d76f8.  call `onError`(v7, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d76fe.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d7704.  return @kind void;
  #L4d7706.  if v11 == 0 then goto L4d771e;
  #L4d770a.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.l` @type ^`long` := v3 @kind wide;
  #L4d770e.  v6:= -v6 @kind int;
  #L4d7710.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d7716.  v6:= temp;
  #L4d7718.  if v6 != 0 then goto L4d765a;
  #L4d771c.  return @kind void;
  #L4d771e.  v9:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` @kind object;
  #L4d7722.  if v10 == v9 then goto L4d772e;
  #L4d7726.  call `onNext`(v7, v10) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4d772c.  goto L4d765a;
  #L4d772e.  if v7 == 0 then goto L4d773c;
  #L4d7732.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v8 @kind object;
  #L4d7736.  call `onComplete`(v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d773c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d7740.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d7746.  v7:= temp;
  #L4d7748.  if v7 != 0 then goto L4d765a;
  #L4d774c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.b` @type ^`int`;
  #L4d7750.  call temp:= `create`(v7, v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d7756.  v7:= temp @kind object;
  #L4d7758.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v7 @kind object;
  #L4d775c.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d7760.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d7766.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d776a.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d7770.  v8:= temp @kind wide;
  #L4d7772.  v10:= lcmp(v3, v8);
  #L4d7776.  if v10 == 0 then goto L4d77a6;
  #L4d777a.  v8:= 1L;
  #L4d777e.  v3:= v3 + v8 @kind long;
  #L4d7780.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d7784.  call `<init>`(v8, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d778a.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d7790.  call temp:= `e`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d7796.  v8:= temp;
  #L4d7798.  if v8 == 0 then goto L4d765a;
  #L4d779c.  call `onComplete`(v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d77a2.  goto L4d765a;
  #L4d77a6.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d77aa.  call temp:= `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d77b0.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4d77b4.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4d77ba.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d77be.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L4d77c2.  call `<init>`(v7, v8) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d77c8.  call temp:= `tryAddThrowableOrReport`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d77ce.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v5 @kind boolean;
  #L4d77d2.  goto L4d765a;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4d77e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d77ec.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d77f2.  v0:= 1I;
  #L4d77f4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4d77f8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4d77fe.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4d7810.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d7814.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d781a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d781e.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d7824.  v2:= temp;
  #L4d7826.  if v2 == 0 then goto L4d7836;
  #L4d782a.  v2:= 1I;
  #L4d782c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v2 @kind boolean;
  #L4d7830.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4d7836.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d75ec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d75f0.  v1:= 0I;
  #L4d75f2.  v2:= 1I;
  #L4d75f4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d75fa.  v0:= temp;
  #L4d75fc.  if v0 == 0 then goto L4d7624;
  #L4d7600.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4d7604.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4d760a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d760e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d7614.  v0:= temp;
  #L4d7616.  if v0 != 0 then goto L4d7624;
  #L4d761a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d761e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d7624.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d7848.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4d784c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` @kind object;
  #L4d7850.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d7856.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4d785c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7870.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4d7874.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4d787a.  v0:= 1I;
  #L4d787c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4d7880.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4d7886.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7898.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4d789c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4d78a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d78a6.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d78ac.  v2:= temp;
  #L4d78ae.  if v2 == 0 then goto L4d78be;
  #L4d78b2.  v2:= 1I;
  #L4d78b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v2 @kind boolean;
  #L4d78b8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4d78be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d78d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.rxjava3.internal.queue.MpscLinkedQueue` @kind object;
  #L4d78d4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d78da.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4d78e0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d78f4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d78f8.  v1:= 9223372036854775807L;
  #L4d7902.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4d7908.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d791c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d7920.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d7926.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundary$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7938.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d793c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d7942.  v0:= temp;
  #L4d7944.  if v0 != 0 then goto L4d7952;
  #L4d7948.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d794c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d7952.  return @kind void;
}
