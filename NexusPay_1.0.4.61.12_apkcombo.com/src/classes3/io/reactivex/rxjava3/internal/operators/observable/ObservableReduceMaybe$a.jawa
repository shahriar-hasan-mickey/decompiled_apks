record `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f62f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f62f6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4f62fa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4f62fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6310.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f6314.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f631a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f62d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f62d4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4f62da.  v0:= temp;
  #L4f62dc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f632c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4f6330.  if v0 == 0 then goto L4f6336;
  #L4f6334.  return @kind void;
  #L4f6336.  v0:= 1I;
  #L4f6338.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4f633c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4f6340.  v1:= 0I;
  #L4f6342.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L4f6346.  if v0 == 0 then goto L4f6356;
  #L4f634a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f634e.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f6354.  goto L4f6360;
  #L4f6356.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f635a.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4f6360.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6374.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4f6378.  if v0 == 0 then goto L4f6384;
  #L4f637c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f6382.  return @kind void;
  #L4f6384.  v0:= 1I;
  #L4f6386.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4f638a.  v0:= 0I;
  #L4f638c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L4f6390.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f6394.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f639a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f63ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4f63b0.  if v0 != 0 then goto L4f63f8;
  #L4f63b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L4f63b8.  if v0 != 0 then goto L4f63c2;
  #L4f63bc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4f63c0.  goto L4f63f8;
  #L4f63c2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4f63c6.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f63cc.  v3:= temp @kind object;
  #L4f63ce.  v0:= "The reducer returned a null value" @kind object;
  #L4f63d2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f63d8.  v3:= temp @kind object;
  #L4f63da.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4f63de.  goto L4f63f8;
  #L4f63e0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f63e2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f63e8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f63ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f63f2.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f63f8.  return @kind void;
  catch `java.lang.Throwable` @[L4f63c2..L4f63de] goto L4f63e0;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReduceMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6418.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f641c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f6422.  v0:= temp;
  #L4f6424.  if v0 == 0 then goto L4f6436;
  #L4f6428.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f642c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f6430.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f6436.  return @kind void;
}
