record `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.e` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d4c9c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d4ca2.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d4ca6.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d4cac.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.f` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v0 @kind object;
  #L4d4cb0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d4cb4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.b` @type ^`long` := v3 @kind wide;
  #L4d4cb8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4d4cbc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v6 @kind object;
  #L4d4cc0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4cd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4cd8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d4cde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d4ce2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d4ce8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4cfc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.h` @type ^`boolean` @kind boolean;
  #L4d4d00.  if v0 == 0 then goto L4d4d06;
  #L4d4d04.  return @kind void;
  #L4d4d06.  v0:= 1I;
  #L4d4d08.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4d4d0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4d10.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d4d16.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d4d1a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d4d20.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4d34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.h` @type ^`boolean` @kind boolean;
  #L4d4d38.  if v0 == 0 then goto L4d4d44;
  #L4d4d3c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d4d42.  return @kind void;
  #L4d4d44.  v0:= 1I;
  #L4d4d46.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4d4d4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4d4e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d4d54.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d4d58.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d4d5e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d4d70.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.h` @type ^`boolean` @kind boolean;
  #L4d4d74.  if v0 == 0 then goto L4d4d7a;
  #L4d4d78.  return @kind void;
  #L4d4d7a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.g` @type ^`boolean` @kind boolean;
  #L4d4d7e.  if v0 != 0 then goto L4d4e0c;
  #L4d4d82.  v0:= 1I;
  #L4d4d84.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4d4d88.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d4d8e.  v1:= temp @kind wide;
  #L4d4d90.  v3:= 0L;
  #L4d4d94.  v5:= lcmp(v1, v3);
  #L4d4d98.  if v5 == 0 then goto L4d4dea;
  #L4d4d9c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4da0.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d4da6.  v0:= 1L;
  #L4d4daa.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d4db0.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.f` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d4db4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d4dba.  v7:= temp @kind object;
  #L4d4dbc.  v7:= (`io.reactivex.rxjava3.disposables.Disposable`) v7 @kind object;
  #L4d4dc0.  if v7 == 0 then goto L4d4dca;
  #L4d4dc4.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d4dca.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.f` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d4dce.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d4dd2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.b` @type ^`long` @kind wide;
  #L4d4dd6.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d4dda.  call temp:= `schedule`(v0, v6, v1, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d4de0.  v0:= temp @kind object;
  #L4d4de2.  call temp:= `replace`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d4de8.  goto L4d4e0c;
  #L4d4dea.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4d4dee.  call `cancel`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.cancel:()V` @kind virtual;
  #L4d4df4.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4df8.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d4dfc.  v1:= "Could not deliver value due to lack of requests" @kind object;
  #L4d4e00.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d4e06.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d4e0c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d4e20.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4e24.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d4e2a.  v0:= temp;
  #L4d4e2c.  if v0 == 0 then goto L4d4e4e;
  #L4d4e30.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d4e34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4e38.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d4e3e.  v0:= 9223372036854775807L;
  #L4d4e48.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d4e4e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4e60.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d4e66.  v0:= temp;
  #L4d4e68.  if v0 == 0 then goto L4d4e72;
  #L4d4e6c.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d4e72.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4e84.  v0:= 0I;
  #L4d4e86.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4d4e8a.  return @kind void;
}
