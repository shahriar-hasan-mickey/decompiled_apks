record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind object, `io.reactivex.rxjava3.processors.UnicastProcessor` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;Lio/reactivex/rxjava3/processors/UnicastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d79cc.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4d79d2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` := v1 @kind object;
  #L4d79d6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.c` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4d79da.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d79de.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d79e4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d79e8.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d79ec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d79f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4d79f6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7a08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d7a0c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d7a12.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.e:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4d7990.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d7994.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d799a.  v0:= temp;
  #L4d799c.  v1:= 1I;
  #L4d799e.  v2:= 0I;
  #L4d79a0.  if v0 != 0 then goto L4d79b6;
  #L4d79a4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d79a8.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d79ae.  v0:= temp;
  #L4d79b0.  if v0 == 0 then goto L4d79b6;
  #L4d79b4.  goto L4d79b8;
  #L4d79b6.  v1:= 0I;
  #L4d79b8.  return v1;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d7964.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d7968.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d796e.  v0:= temp @kind object;
  #L4d7970.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d7974.  if v0 != v1 then goto L4d797c;
  #L4d7978.  v0:= 1I;
  #L4d797a.  goto L4d797e;
  #L4d797c.  v0:= 0I;
  #L4d797e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7a24.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind object;
  #L4d7a28.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;)V` @kind virtual;
  #L4d7a2e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7a40.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.isDisposed:()Z` @kind virtual;
  #L4d7a46.  v0:= temp;
  #L4d7a48.  if v0 == 0 then goto L4d7a54;
  #L4d7a4c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d7a52.  goto L4d7a5e;
  #L4d7a54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind object;
  #L4d7a58.  call `b`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d7a5e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4d7a70.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d7a74.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d7a7a.  v1:= temp;
  #L4d7a7c.  if v1 == 0 then goto L4d7a8a;
  #L4d7a80.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind object;
  #L4d7a84.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;)V` @kind virtual;
  #L4d7a8a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d7a9c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d7aa0.  call temp:= `setOnce`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d7aa6.  v0:= temp;
  #L4d7aa8.  if v0 == 0 then goto L4d7abc;
  #L4d7aac.  v0:= 9223372036854775807L;
  #L4d7ab6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d7abc.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4d7ad0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.c` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d7ad4.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d7ada.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d7ade.  v0:= 1I;
  #L4d7ae0.  call `set`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L4d7ae6.  return @kind void;
}
