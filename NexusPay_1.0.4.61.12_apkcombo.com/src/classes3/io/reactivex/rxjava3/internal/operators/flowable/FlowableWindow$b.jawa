record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.o` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d6ddc.  v0:= 1I;
  #L4d6dde.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4d6de4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d6de8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` := v3 @kind wide;
  #L4d6dec.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` := v5 @kind wide;
  #L4d6df0.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4d6df4.  call `<init>`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4d6dfa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4d6dfe.  v2:= new `java.util.ArrayDeque`;
  #L4d6e02.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4d6e08.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L4d6e0c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d6e10.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d6e16.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4d6e1a.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d6e1e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d6e24.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4d6e28.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d6e2c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d6e32.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4d6e36.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4d6e3a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d6e40.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4d6e44.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.j` @type ^`int` := v7;
  #L4d6e48.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `boolean` v2 , `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;

  #L4d6da0.  if v2 == 0 then goto L4d6dc8;
  #L4d6da4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` @kind object;
  #L4d6da8.  v0:= 1I;
  #L4d6daa.  if v2 == 0 then goto L4d6dbc;
  #L4d6dae.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4d6db4.  call `onError`(v4, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6dba.  return v0;
  #L4d6dbc.  if v3 == 0 then goto L4d6dc8;
  #L4d6dc0.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d6dc6.  return v0;
  #L4d6dc8.  v2:= 0I;
  #L4d6dca.  return v2;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4d6e94.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d6e98.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d6e9e.  v0:= temp;
  #L4d6ea0.  if v0 == 0 then goto L4d6ea6;
  #L4d6ea4.  return @kind void;
  #L4d6ea6.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d6eaa.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d6eae.  v2:= 1I;
  #L4d6eb0.  v3:= 1I;
  #L4d6eb2.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4d6eb6.  if v4 == 0 then goto L4d6ed2;
  #L4d6eba.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d6ec0.  v4:= temp @kind object;
  #L4d6ec2.  v4:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v4 @kind object;
  #L4d6ec6.  if v4 == 0 then goto L4d6f9c;
  #L4d6eca.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d6ed0.  goto L4d6eba;
  #L4d6ed2.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d6ed6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d6edc.  v4:= temp @kind wide;
  #L4d6ede.  v6:= 0L;
  #L4d6ee2.  v8:= v6 @kind wide;
  #L4d6ee4.  v10:= lcmp(v8, v4);
  #L4d6ee8.  if v10 == 0 then goto L4d6f4e;
  #L4d6eec.  v11:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L4d6ef0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d6ef6.  v12:= temp @kind object;
  #L4d6ef8.  v12:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v12 @kind object;
  #L4d6efc.  if v12 != 0 then goto L4d6f04;
  #L4d6f00.  v13:= 1I;
  #L4d6f02.  goto L4d6f06;
  #L4d6f04.  v13:= 0I;
  #L4d6f06.  v14:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4d6f0a.  if v14 == 0 then goto L4d6f10;
  #L4d6f0e.  goto L4d6eb2;
  #L4d6f10.  call temp:= `a`(v15, v11, v13, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4d6f16.  v11:= temp;
  #L4d6f18.  if v11 == 0 then goto L4d6f1e;
  #L4d6f1c.  return @kind void;
  #L4d6f1e.  if v13 == 0 then goto L4d6f24;
  #L4d6f22.  goto L4d6f4e;
  #L4d6f24.  v10:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d6f28.  call `<init>`(v10, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d6f2e.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d6f34.  call temp:= `e`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d6f3a.  v10:= temp;
  #L4d6f3c.  if v10 == 0 then goto L4d6f46;
  #L4d6f40.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d6f46.  v10:= 1L;
  #L4d6f4a.  v8:= v8 + v10 @kind long;
  #L4d6f4c.  goto L4d6ee4;
  #L4d6f4e.  if v10 != 0 then goto L4d6f76;
  #L4d6f52.  v10:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4d6f56.  if v10 == 0 then goto L4d6f5c;
  #L4d6f5a.  goto L4d6eb2;
  #L4d6f5c.  v10:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L4d6f60.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4d6f66.  v11:= temp;
  #L4d6f68.  call temp:= `a`(v15, v10, v11, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4d6f6e.  v10:= temp;
  #L4d6f70.  if v10 == 0 then goto L4d6f76;
  #L4d6f74.  return @kind void;
  #L4d6f76.  v10:= lcmp(v8, v6);
  #L4d6f7a.  if v10 == 0 then goto L4d6f9c;
  #L4d6f7e.  v6:= 9223372036854775807L;
  #L4d6f88.  v10:= lcmp(v4, v6);
  #L4d6f8c.  if v10 == 0 then goto L4d6f9c;
  #L4d6f90.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d6f94.  v5:= -v8 @kind long;
  #L4d6f96.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4d6f9c.  v4:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d6fa0.  v3:= -v3 @kind int;
  #L4d6fa2.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d6fa8.  v3:= temp;
  #L4d6faa.  if v3 != 0 then goto L4d6eb2;
  #L4d6fae.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d6e5c.  v0:= 1I;
  #L4d6e5e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` := v0 @kind boolean;
  #L4d6e62.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d6e66.  v2:= 0I;
  #L4d6e68.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d6e6e.  v0:= temp;
  #L4d6e70.  if v0 == 0 then goto L4d6e7a;
  #L4d6e74.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.run:()V` @kind virtual;
  #L4d6e7a.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4d6e80.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d6fc0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4d6fc4.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4d6fca.  v0:= temp @kind object;
  #L4d6fcc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d6fd2.  v1:= temp;
  #L4d6fd4.  if v1 == 0 then goto L4d6fec;
  #L4d6fd8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d6fde.  v1:= temp @kind object;
  #L4d6fe0.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L4d6fe4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d6fea.  goto L4d6fcc;
  #L4d6fec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4d6ff0.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4d6ff6.  v0:= 1I;
  #L4d6ff8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v0 @kind boolean;
  #L4d6ffc.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4d7002.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d7014.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4d7018.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4d701e.  v0:= temp @kind object;
  #L4d7020.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d7026.  v1:= temp;
  #L4d7028.  if v1 == 0 then goto L4d7040;
  #L4d702c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d7032.  v1:= temp @kind object;
  #L4d7034.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L4d7038.  call `onError`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d703e.  goto L4d7020;
  #L4d7040.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4d7044.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4d704a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4d704e.  v3:= 1I;
  #L4d7050.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v3 @kind boolean;
  #L4d7054.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4d705a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d706c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` @kind wide;
  #L4d7070.  v2:= 0L;
  #L4d7074.  v4:= lcmp(v0, v2);
  #L4d7078.  if v4 != 0 then goto L4d70a2;
  #L4d707c.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L4d7080.  if v4 != 0 then goto L4d70a2;
  #L4d7084.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d708a.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.j` @type ^`int`;
  #L4d708e.  call temp:= `create`(v4, v9) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d7094.  v4:= temp @kind object;
  #L4d7096.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4d709a.  call temp:= `offer`(v5, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d70a0.  goto L4d70a4;
  #L4d70a2.  v4:= 0I;
  #L4d70a4.  v5:= 1L;
  #L4d70a8.  v0:= v0 + v5 @kind long;
  #L4d70aa.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4d70ae.  call temp:= `iterator`(v7) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4d70b4.  v7:= temp @kind object;
  #L4d70b6.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d70bc.  v8:= temp;
  #L4d70be.  if v8 == 0 then goto L4d70d6;
  #L4d70c2.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d70c8.  v8:= temp @kind object;
  #L4d70ca.  v8:= (`org.reactivestreams.Processor`) v8 @kind object;
  #L4d70ce.  call `onNext`(v8, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d70d4.  goto L4d70b6;
  #L4d70d6.  if v4 == 0 then goto L4d70ea;
  #L4d70da.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4d70de.  call temp:= `offer`(v10, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d70e4.  call `b`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4d70ea.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` @kind wide;
  #L4d70ee.  v7:= v7 + v5 @kind long;
  #L4d70f0.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L4d70f4.  v10:= lcmp(v7, v4);
  #L4d70f8.  if v10 != 0 then goto L4d7122;
  #L4d70fc.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4d7100.  v7:= v7 - v4 @kind long;
  #L4d7102.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v7 @kind wide;
  #L4d7106.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4d710a.  call temp:= `poll`(v10) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d7110.  v10:= temp @kind object;
  #L4d7112.  v10:= (`org.reactivestreams.Processor`) v10 @kind object;
  #L4d7116.  if v10 == 0 then goto L4d7126;
  #L4d711a.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d7120.  goto L4d7126;
  #L4d7122.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v7 @kind wide;
  #L4d7126.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4d712a.  v10:= lcmp(v0, v4);
  #L4d712e.  if v10 != 0 then goto L4d7138;
  #L4d7132.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v2 @kind wide;
  #L4d7136.  goto L4d713c;
  #L4d7138.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v0 @kind wide;
  #L4d713c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7150.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7154.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d715a.  v0:= temp;
  #L4d715c.  if v0 == 0 then goto L4d716e;
  #L4d7160.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d7164.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d7168.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d716e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d7180.  call temp:= `validate`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d7186.  v0:= temp;
  #L4d7188.  if v0 == 0 then goto L4d7200;
  #L4d718c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d7190.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d7196.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d719a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d71a0.  v0:= temp;
  #L4d71a2.  if v0 != 0 then goto L4d71e4;
  #L4d71a6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d71aa.  v1:= 0I;
  #L4d71ac.  v2:= 1I;
  #L4d71ae.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d71b4.  v0:= temp;
  #L4d71b6.  if v0 == 0 then goto L4d71e4;
  #L4d71ba.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4d71be.  v2:= 1L;
  #L4d71c2.  v5:= v5 - v2 @kind long;
  #L4d71c4.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4d71ca.  v5:= temp @kind wide;
  #L4d71cc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L4d71d0.  call temp:= `addCap`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4d71d6.  v5:= temp @kind wide;
  #L4d71d8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d71dc.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d71e2.  goto L4d71fa;
  #L4d71e4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L4d71e8.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4d71ee.  v5:= temp @kind wide;
  #L4d71f0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d71f4.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d71fa.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L4d7200.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7214.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d721a.  v0:= temp;
  #L4d721c.  if v0 != 0 then goto L4d722a;
  #L4d7220.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7224.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d722a.  return @kind void;
}
