record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cdcbc.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.<init>:(JJ)V` @kind direct;
  #L4cdcc2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4cdcc6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4cdcd8.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L4cdcdc.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cdce0.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L4cdce4.  v5:= lcmp(v3, v0);
  #L4cdce8.  if v5 == 0 then goto L4cdd0c;
  #L4cdcec.  v5:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cdcf0.  if v5 == 0 then goto L4cdcf6;
  #L4cdcf4.  return @kind void;
  #L4cdcf6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cdcfc.  v5:= temp @kind object;
  #L4cdcfe.  call temp:= `tryOnNext`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cdd04.  v5:= 1L;
  #L4cdd08.  v3:= v3 + v5 @kind long;
  #L4cdd0a.  goto L4cdce4;
  #L4cdd0c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cdd10.  if v0 == 0 then goto L4cdd16;
  #L4cdd14.  return @kind void;
  #L4cdd16.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cdd1c.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b` v12 @kind this, `long` v13 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$b;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4cdd30.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L4cdd34.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L4cdd38.  v4:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cdd3c.  v5:= 0L;
  #L4cdd40.  v7:= v5 @kind wide;
  #L4cdd42.  v9:= lcmp(v7, v13);
  #L4cdd46.  if v9 == 0 then goto L4cdd7a;
  #L4cdd4a.  v9:= lcmp(v2, v0);
  #L4cdd4e.  if v9 == 0 then goto L4cdd7a;
  #L4cdd52.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cdd56.  if v9 == 0 then goto L4cdd5c;
  #L4cdd5a.  return @kind void;
  #L4cdd5c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4cdd62.  v9:= temp @kind object;
  #L4cdd64.  call temp:= `tryOnNext`(v4, v9) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cdd6a.  v9:= temp;
  #L4cdd6c.  v10:= 1L;
  #L4cdd70.  if v9 == 0 then goto L4cdd76;
  #L4cdd74.  v7:= v7 + v10 @kind long;
  #L4cdd76.  v2:= v2 + v10 @kind long;
  #L4cdd78.  goto L4cdd42;
  #L4cdd7a.  v13:= lcmp(v2, v0);
  #L4cdd7e.  if v13 != 0 then goto L4cdd92;
  #L4cdd82.  v13:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4cdd86.  if v13 != 0 then goto L4cdd90;
  #L4cdd8a.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cdd90.  return @kind void;
  #L4cdd92.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cdd98.  v13:= temp @kind wide;
  #L4cdd9a.  v9:= lcmp(v7, v13);
  #L4cdd9e.  if v9 != 0 then goto L4cdd42;
  #L4cdda2.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v2 @kind wide;
  #L4cdda6.  v13:= -v7 @kind long;
  #L4cdda8.  call temp:= `addAndGet`(v12, v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4cddae.  v13:= temp @kind wide;
  #L4cddb0.  v7:= lcmp(v13, v5);
  #L4cddb4.  if v7 != 0 then goto L4cdd40;
  #L4cddb8.  return @kind void;
}
