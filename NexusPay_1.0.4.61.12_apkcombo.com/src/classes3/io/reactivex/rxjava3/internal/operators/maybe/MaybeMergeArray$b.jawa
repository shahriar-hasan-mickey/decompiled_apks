record `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.h` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4df61c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4df622.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4df626.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int` := v2;
  #L4df62a.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4df62e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4df634.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4df638.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4df63c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4df642.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4df646.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4df64a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4df650.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4df654.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` := v3 @kind object;
  #L4df658.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df66c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4df670.  if v0 != 0 then goto L4df69a;
  #L4df674.  v0:= 1I;
  #L4df676.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4df67a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4df67e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4df684.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4df68a.  v0:= temp;
  #L4df68c.  if v0 != 0 then goto L4df69a;
  #L4df690.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df694.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4df69a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df6ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df6b0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4df6b6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4df6c8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4df6ce.  v0:= temp;
  #L4df6d0.  if v0 == 0 then goto L4df6d6;
  #L4df6d4.  return @kind void;
  #L4df6d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` @kind boolean;
  #L4df6da.  if v0 == 0 then goto L4df6e6;
  #L4df6de.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @kind virtual;
  #L4df6e4.  goto L4df6ec;
  #L4df6e6.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @kind virtual;
  #L4df6ec.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4df700.  v0:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4df704.  v1:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df708.  v2:= 1I;
  #L4df70a.  v3:= 1I;
  #L4df70c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4df710.  if v4 == 0 then goto L4df71c;
  #L4df714.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4df71a.  return @kind void;
  #L4df71c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4df720.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df726.  v4:= temp @kind object;
  #L4df728.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4df72c.  if v4 == 0 then goto L4df73e;
  #L4df730.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4df736.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4df73c.  return @kind void;
  #L4df73e.  call temp:= `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.d:()I` @kind interface;
  #L4df744.  v4:= temp;
  #L4df746.  v5:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L4df74a.  if v4 != v5 then goto L4df752;
  #L4df74e.  v4:= 1I;
  #L4df750.  goto L4df754;
  #L4df752.  v4:= 0I;
  #L4df754.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4df75a.  v5:= temp;
  #L4df75c.  if v5 != 0 then goto L4df768;
  #L4df760.  v5:= 0I;
  #L4df762.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4df768.  if v4 == 0 then goto L4df774;
  #L4df76c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4df772.  return @kind void;
  #L4df774.  v3:= -v3 @kind int;
  #L4df776.  call temp:= `addAndGet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4df77c.  v3:= temp;
  #L4df77e.  if v3 != 0 then goto L4df70c;
  #L4df782.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4df794.  v0:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4df798.  v1:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df79c.  v2:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` @kind wide;
  #L4df7a0.  v4:= 1I;
  #L4df7a2.  v5:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4df7a6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4df7ac.  v5:= temp @kind wide;
  #L4df7ae.  v7:= lcmp(v2, v5);
  #L4df7b2.  if v7 == 0 then goto L4df82c;
  #L4df7b6.  v8:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4df7ba.  if v8 == 0 then goto L4df7c6;
  #L4df7be.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4df7c4.  return @kind void;
  #L4df7c6.  v8:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4df7ca.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df7d0.  v8:= temp @kind object;
  #L4df7d2.  v8:= (`java.lang.Throwable`) v8 @kind object;
  #L4df7d6.  if v8 == 0 then goto L4df7f0;
  #L4df7da.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4df7e0.  v0:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4df7e4.  v1:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4df7e8.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4df7ee.  return @kind void;
  #L4df7f0.  call temp:= `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L4df7f6.  v8:= temp;
  #L4df7f8.  v9:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L4df7fc.  if v8 != v9 then goto L4df808;
  #L4df800.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4df806.  return @kind void;
  #L4df808.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L4df80e.  v8:= temp @kind object;
  #L4df810.  if v8 != 0 then goto L4df816;
  #L4df814.  goto L4df82c;
  #L4df816.  v7:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4df81a.  if v8 == v7 then goto L4df7ae;
  #L4df81e.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4df824.  v7:= 1L;
  #L4df828.  v2:= v2 + v7 @kind long;
  #L4df82a.  goto L4df7ae;
  #L4df82c.  if v7 != 0 then goto L4df88a;
  #L4df830.  v5:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4df834.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4df83a.  v5:= temp @kind object;
  #L4df83c.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4df840.  if v5 == 0 then goto L4df85a;
  #L4df844.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4df84a.  v0:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4df84e.  v1:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4df852.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4df858.  return @kind void;
  #L4df85a.  call temp:= `peek`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.peek:()Ljava/lang/Object;` @kind interface;
  #L4df860.  v5:= temp @kind object;
  #L4df862.  v6:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4df866.  if v5 != v6 then goto L4df872;
  #L4df86a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.b:()V` @kind interface;
  #L4df870.  goto L4df85a;
  #L4df872.  call temp:= `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L4df878.  v5:= temp;
  #L4df87a.  v6:= v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L4df87e.  if v5 != v6 then goto L4df88a;
  #L4df882.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4df888.  return @kind void;
  #L4df88a.  v10.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` := v2 @kind wide;
  #L4df88e.  v4:= -v4 @kind int;
  #L4df890.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4df896.  v4:= temp;
  #L4df898.  if v4 != 0 then goto L4df7a2;
  #L4df89c.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.isCancelled:()Z` @AccessFlag  {
    temp;
    v0;

  #L4df598.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4df59c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df5b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df5b4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4df5ba.  v0:= temp;
  #L4df5bc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df8b0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df8b4.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4df8b8.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4df8be.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4df8c4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df8d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4df8dc.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4df8e2.  v2:= temp;
  #L4df8e4.  if v2 == 0 then goto L4df906;
  #L4df8e8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4df8ec.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4df8f2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df8f6.  v0:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4df8fa.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4df900.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4df906.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df918.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4df91c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4df922.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df934.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df938.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4df93e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4df944.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df5f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4df5f8.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L4df5fe.  v0:= temp @kind object;
  #L4df600.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4df604.  if v0 == v1 then goto L4df5f4;
  #L4df608.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df958.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4df95e.  v0:= temp;
  #L4df960.  if v0 == 0 then goto L4df974;
  #L4df964.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4df968.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4df96e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4df974.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMergeArray$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df5d0.  v0:= 2I;
  #L4df5d2.  v2:= v2 ^& v0 @kind int;
  #L4df5d4.  if v2 == 0 then goto L4df5e0;
  #L4df5d8.  v2:= 1I;
  #L4df5da.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4df5de.  return v0;
  #L4df5e0.  v2:= 0I;
  #L4df5e2.  return v2;
}
