record `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4facc4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4facca.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` := v1 @kind object;
  #L4facce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` := v2 @kind wide;
  #L4facd2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.c` @type ^`int` := v4;
  #L4facd6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4face8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4facee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fad00.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4fad04.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4fad08.  v2:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L4fad0c.  v4:= lcmp(v0, v2);
  #L4fad10.  if v4 != 0 then goto L4fad24;
  #L4fad14.  v0:= 1I;
  #L4fad16.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4fad1a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4fad1e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4fad24.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fad38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4fad3c.  call `c`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L4fad42.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fad54.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4fad58.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4fad5c.  v2:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L4fad60.  v4:= lcmp(v0, v2);
  #L4fad64.  if v4 != 0 then goto L4fad80;
  #L4fad68.  if v6 == 0 then goto L4fad76;
  #L4fad6c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4fad70.  call temp:= `offer`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4fad76.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4fad7a.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4fad80.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fad94.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fad9a.  v0:= temp;
  #L4fad9c.  if v0 == 0 then goto L4fadee;
  #L4fada0.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4fada4.  if v0 == 0 then goto L4faddc;
  #L4fada8.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4fadac.  v0:= 7I;
  #L4fadae.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4fadb4.  v0:= temp;
  #L4fadb6.  v1:= 1I;
  #L4fadb8.  if v0 != v1 then goto L4fadd0;
  #L4fadbc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4fadc0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4fadc4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4fadc8.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4fadce.  return @kind void;
  #L4fadd0.  v1:= 2I;
  #L4fadd2.  if v0 != v1 then goto L4faddc;
  #L4fadd6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4fadda.  return @kind void;
  #L4faddc.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4fade0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.c` @type ^`int`;
  #L4fade4.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4fadea.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4fadee.  return @kind void;
}
