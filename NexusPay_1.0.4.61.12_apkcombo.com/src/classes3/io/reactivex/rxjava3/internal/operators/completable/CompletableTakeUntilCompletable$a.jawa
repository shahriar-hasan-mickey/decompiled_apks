record `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b70a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b70ae.  v0.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4b70b2.  v1:= new `io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a`;
  #L4b70b6.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;)V` @kind direct;
  #L4b70bc.  v0.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` := v1 @kind object;
  #L4b70c0.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b70c4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b70ca.  v0.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b70ce.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4b7118.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b711c.  v1:= 0I;
  #L4b711e.  v2:= 1I;
  #L4b7120.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b7126.  v0:= temp;
  #L4b7128.  if v0 == 0 then goto L4b713c;
  #L4b712c.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7132.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b7136.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L4b713c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4b7150.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b7154.  v1:= 0I;
  #L4b7156.  v2:= 1I;
  #L4b7158.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b715e.  v0:= temp;
  #L4b7160.  if v0 == 0 then goto L4b7176;
  #L4b7164.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b716a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b716e.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b7174.  goto L4b717c;
  #L4b7176.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b717c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b70e0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b70e4.  v1:= 0I;
  #L4b70e6.  v2:= 1I;
  #L4b70e8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b70ee.  v0:= temp;
  #L4b70f0.  if v0 == 0 then goto L4b7104;
  #L4b70f4.  call temp:= `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b70fa.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L4b70fe.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7104.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7088.  v0:= v1.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b708c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4b7092.  v0:= temp;
  #L4b7094.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b7190.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b7194.  v1:= 0I;
  #L4b7196.  v2:= 1I;
  #L4b7198.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b719e.  v0:= temp;
  #L4b71a0.  if v0 == 0 then goto L4b71b8;
  #L4b71a4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L4b71a8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b71ae.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b71b2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L4b71b8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b71cc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b71d0.  v1:= 0I;
  #L4b71d2.  v2:= 1I;
  #L4b71d4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b71da.  v0:= temp;
  #L4b71dc.  if v0 == 0 then goto L4b71f6;
  #L4b71e0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L4b71e4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b71ea.  v0:= v3.`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b71ee.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b71f4.  goto L4b71fc;
  #L4b71f6.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b71fc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/completable/CompletableTakeUntilCompletable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b7210.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b7216.  return @kind void;
}
