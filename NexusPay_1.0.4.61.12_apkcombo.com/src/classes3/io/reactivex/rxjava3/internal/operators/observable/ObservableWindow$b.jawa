record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.g` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `long` v4 , `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fdf5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4fdf62.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fdf66.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.b` @type ^`long` := v2 @kind wide;
  #L4fdf6a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.c` @type ^`long` := v4 @kind wide;
  #L4fdf6e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.d` @type ^`int` := v6;
  #L4fdf72.  v1:= new `java.util.ArrayDeque`;
  #L4fdf76.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4fdf7c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4fdf80.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4fdf84.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4fdf8a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4fdf8e.  v1:= 1I;
  #L4fdf90.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4fdf96.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fdfa8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fdfac.  v1:= 0I;
  #L4fdfae.  v2:= 1I;
  #L4fdfb0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4fdfb6.  v0:= temp;
  #L4fdfb8.  if v0 == 0 then goto L4fdfc2;
  #L4fdfbc.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.run:()V` @kind virtual;
  #L4fdfc2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fdf3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fdf40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fdf46.  v0:= temp;
  #L4fdf48.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fdfd4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4fdfd8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4fdfde.  v1:= temp;
  #L4fdfe0.  if v1 != 0 then goto L4fdff8;
  #L4fdfe4.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4fdfea.  v1:= temp @kind object;
  #L4fdfec.  v1:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v1 @kind object;
  #L4fdff0.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fdff6.  goto L4fdfd8;
  #L4fdff8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fdffc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fe002.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fe014.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4fe018.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4fe01e.  v1:= temp;
  #L4fe020.  if v1 != 0 then goto L4fe038;
  #L4fe024.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4fe02a.  v1:= temp @kind object;
  #L4fe02c.  v1:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v1 @kind object;
  #L4fe030.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fe036.  goto L4fe018;
  #L4fe038.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fe03c.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fe042.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4fe054.  v0:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4fe058.  v1:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.g` @type ^`long` @kind wide;
  #L4fe05c.  v3:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.c` @type ^`long` @kind wide;
  #L4fe060.  v5:= v1 %% v3 @kind long;
  #L4fe064.  v7:= 0L;
  #L4fe068.  v9:= lcmp(v5, v7);
  #L4fe06c.  if v9 != 0 then goto L4fe0ae;
  #L4fe070.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe074.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fe07a.  v5:= temp;
  #L4fe07c.  if v5 != 0 then goto L4fe0ae;
  #L4fe080.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4fe086.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.d` @type ^`int`;
  #L4fe08a.  call temp:= `create`(v5, v13) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4fe090.  v5:= temp @kind object;
  #L4fe092.  v6:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4fe096.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4fe09c.  call temp:= `offer`(v0, v5) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fe0a2.  v5:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fe0a6.  call `onNext`(v5, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fe0ac.  goto L4fe0b0;
  #L4fe0ae.  v6:= 0I;
  #L4fe0b0.  v7:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @type ^`long` @kind wide;
  #L4fe0b4.  v9:= 1L;
  #L4fe0b8.  v7:= v7 + v9 @kind long;
  #L4fe0ba.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4fe0c0.  v5:= temp @kind object;
  #L4fe0c2.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4fe0c8.  v11:= temp;
  #L4fe0ca.  if v11 == 0 then goto L4fe0e2;
  #L4fe0ce.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4fe0d4.  v11:= temp @kind object;
  #L4fe0d6.  v11:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v11 @kind object;
  #L4fe0da.  call `onNext`(v11, v14) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4fe0e0.  goto L4fe0c2;
  #L4fe0e2.  v11:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.b` @type ^`long` @kind wide;
  #L4fe0e6.  v14:= lcmp(v7, v11);
  #L4fe0ea.  if v14 < 0 then goto L4fe126;
  #L4fe0ee.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4fe0f4.  v14:= temp @kind object;
  #L4fe0f6.  v14:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v14 @kind object;
  #L4fe0fa.  call `onComplete`(v14) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fe100.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L4fe106.  v14:= temp;
  #L4fe108.  if v14 == 0 then goto L4fe11e;
  #L4fe10c.  v14:= v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe110.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fe116.  v14:= temp;
  #L4fe118.  if v14 == 0 then goto L4fe11e;
  #L4fe11c.  return @kind void;
  #L4fe11e.  v7:= v7 - v3 @kind long;
  #L4fe120.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v7 @kind wide;
  #L4fe124.  goto L4fe12a;
  #L4fe126.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v7 @kind wide;
  #L4fe12a.  v1:= v1 + v9 @kind long;
  #L4fe12c.  v13.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.g` @type ^`long` := v1 @kind wide;
  #L4fe130.  if v6 == 0 then goto L4fe14a;
  #L4fe134.  call temp:= `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4fe13a.  v14:= temp;
  #L4fe13c.  if v14 == 0 then goto L4fe14a;
  #L4fe140.  v14:= v6.`io.reactivex.rxjava3.internal.operators.observable.b.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L4fe144.  call `onComplete`(v14) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fe14a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe15c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fe160.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fe166.  v0:= temp;
  #L4fe168.  if v0 == 0 then goto L4fe17a;
  #L4fe16c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fe170.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fe174.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fe17a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe18c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4fe192.  v0:= temp;
  #L4fe194.  if v0 != 0 then goto L4fe1a2;
  #L4fe198.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fe19c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fe1a2.  return @kind void;
}
