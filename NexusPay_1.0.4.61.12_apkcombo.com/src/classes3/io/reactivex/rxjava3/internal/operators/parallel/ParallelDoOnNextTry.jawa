record `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L5014a4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L5014aa.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L5014ae.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L5014b2.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L5014b6.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501484.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L501488.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L50148e.  v0:= temp;
  #L501490.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L5014c8.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L5014ce.  v0:= temp;
  #L5014d0.  if v0 != 0 then goto L5014d6;
  #L5014d4.  return @kind void;
  #L5014d6.  v0:= length @variable v8;
  #L5014d8.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L5014dc.  v2:= 0I;
  #L5014de.  if v2 >= v0 then goto L501526;
  #L5014e2.  v3:= v8[v2] @kind object;
  #L5014e6.  v4:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L5014ea.  if v4 == 0 then goto L50150a;
  #L5014ee.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$b`;
  #L5014f2.  v3:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L5014f6.  v5:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L5014fa.  v6:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L5014fe.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L501504.  v1[v2]:= v4 @kind object;
  #L501508.  goto L501520;
  #L50150a.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$c`;
  #L50150e.  v5:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L501512.  v6:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L501516.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L50151c.  v1[v2]:= v4 @kind object;
  #L501520.  v2:= v2 + 1;
  #L501524.  goto L5014de;
  #L501526.  v8:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L50152a.  call `subscribe`(v8, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L501530.  return @kind void;
}
