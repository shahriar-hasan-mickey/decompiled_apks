record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ddf4c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ddf52.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4ddf56.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ddf5a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4ddf5e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.d` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4ddf62.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddf74.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ddf7a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ddf7e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ddf84.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddf24.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ddf2a.  v0:= temp @kind object;
  #L4ddf2c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ddf30.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ddf36.  v0:= temp;
  #L4ddf38.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ddf98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.d` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4ddf9c.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4ddfa2.  v0:= temp @kind object;
  #L4ddfa4.  v1:= "The onCompleteSupplier returned a null MaybeSource" @kind object;
  #L4ddfa8.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ddfae.  v0:= temp @kind object;
  #L4ddfb0.  v0:= (`io.reactivex.rxjava3.core.MaybeSource`) v0 @kind object;
  #L4ddfb4.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.isDisposed:()Z` @kind virtual;
  #L4ddfba.  v1:= temp;
  #L4ddfbc.  if v1 != 0 then goto L4ddfd0;
  #L4ddfc0.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a$a`;
  #L4ddfc4.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;)V` @kind direct;
  #L4ddfca.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4ddfd0.  return @kind void;
  #L4ddfd2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ddfd4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ddfda.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ddfde.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ddfe4.  return @kind void;
  catch `java.lang.Throwable` @[L4ddf98..L4ddfb4] goto L4ddfd2;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4de004.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4de008.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4de00e.  v0:= temp @kind object;
  #L4de010.  v1:= "The onErrorMapper returned a null MaybeSource" @kind object;
  #L4de014.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4de01a.  v0:= temp @kind object;
  #L4de01c.  v0:= (`io.reactivex.rxjava3.core.MaybeSource`) v0 @kind object;
  #L4de020.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.isDisposed:()Z` @kind virtual;
  #L4de026.  v6:= temp;
  #L4de028.  if v6 != 0 then goto L4de03c;
  #L4de02c.  v6:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a$a`;
  #L4de030.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;)V` @kind direct;
  #L4de036.  call `subscribe`(v0, v6) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4de03c.  return @kind void;
  #L4de03e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4de040.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4de046.  v1:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de04a.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4de04e.  v3:= 2I;
  #L4de050.  v3:= new `java.lang.Throwable`[v3];
  #L4de054.  v4:= 0I;
  #L4de056.  v3[v4]:= v6 @kind object;
  #L4de05a.  v6:= 1I;
  #L4de05c.  v3[v6]:= v0 @kind object;
  #L4de060.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4de066.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4de06c.  return @kind void;
  catch `java.lang.Throwable` @[L4de004..L4de020] goto L4de03e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de08c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4de090.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4de096.  v0:= temp;
  #L4de098.  if v0 == 0 then goto L4de0aa;
  #L4de09c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4de0a0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de0a4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4de0aa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de0bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4de0c0.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4de0c6.  v2:= temp @kind object;
  #L4de0c8.  v0:= "The onSuccessMapper returned a null MaybeSource" @kind object;
  #L4de0cc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4de0d2.  v2:= temp @kind object;
  #L4de0d4.  v2:= (`io.reactivex.rxjava3.core.MaybeSource`) v2 @kind object;
  #L4de0d8.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;.isDisposed:()Z` @kind virtual;
  #L4de0de.  v0:= temp;
  #L4de0e0.  if v0 != 0 then goto L4de0f4;
  #L4de0e4.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a$a`;
  #L4de0e8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapNotification$a;)V` @kind direct;
  #L4de0ee.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4de0f4.  return @kind void;
  #L4de0f6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4de0f8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4de0fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de102.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4de108.  return @kind void;
  catch `java.lang.Throwable` @[L4de0bc..L4de0d8] goto L4de0f6;
}
