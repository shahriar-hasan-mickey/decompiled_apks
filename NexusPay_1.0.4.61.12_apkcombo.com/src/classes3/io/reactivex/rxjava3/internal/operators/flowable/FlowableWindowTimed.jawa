record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.rxjava3.core.Scheduler` v7 @kind object, `long` v8 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/rxjava3/core/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;JIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d9174.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4d917a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` := v2 @kind wide;
  #L4d917e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` := v4 @kind wide;
  #L4d9182.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4d9186.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v7 @kind object;
  #L4d918a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` := v8 @kind wide;
  #L4d918e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int` := v10;
  #L4d9192.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.h` @type ^`boolean` := v11 @kind boolean;
  #L4d9196.  return @kind void;
}
procedure `java.lang.String` `e`(`long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4d9134.  v0:= new `java.lang.StringBuilder`;
  #L4d9138.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4d913e.  v1:= "Unable to emit the next window (#" @kind object;
  #L4d9142.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4d9148.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4d914e.  v2:= ") due to lack of requests. Please make sure the downstream is ready to consume windows." @kind object;
  #L4d9152.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4d9158.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4d915e.  v2:= temp @kind object;
  #L4d9160.  return v2 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed` v12 @kind this, `org.reactivestreams.Subscriber` v13 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4d91a8.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4d91ac.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` @kind wide;
  #L4d91b0.  v4:= lcmp(v0, v2);
  #L4d91b4.  if v4 != 0 then goto L4d922a;
  #L4d91b8.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` @kind wide;
  #L4d91bc.  v2:= 9223372036854775807L;
  #L4d91c6.  v4:= lcmp(v0, v2);
  #L4d91ca.  if v4 != 0 then goto L4d91f8;
  #L4d91ce.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4d91d2.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c`;
  #L4d91d6.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4d91da.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d91de.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d91e2.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L4d91e6.  v1:= v8 @kind object;
  #L4d91e8.  v2:= v13 @kind object;
  #L4d91ea.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)V` @kind direct;
  #L4d91f0.  call `subscribe`(v0, v8) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4d91f6.  return @kind void;
  #L4d91f8.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4d91fc.  v11:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b`;
  #L4d9200.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4d9204.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d9208.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d920c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L4d9210.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` @kind wide;
  #L4d9214.  v10:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.h` @type ^`boolean` @kind boolean;
  #L4d9218.  v1:= v11 @kind object;
  #L4d921a.  v2:= v13 @kind object;
  #L4d921c.  call `<init>`(v1, v2, v3, v5, v6, v7, v8, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IJZ)V` @kind direct;
  #L4d9222.  call `subscribe`(v0, v11) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4d9228.  return @kind void;
  #L4d922a.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4d922e.  v10:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$d`;
  #L4d9232.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4d9236.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` @kind wide;
  #L4d923a.  v7:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d923e.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d9242.  call temp:= `createWorker`(v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4d9248.  v8:= temp @kind object;
  #L4d924a.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L4d924e.  v1:= v10 @kind object;
  #L4d9250.  v2:= v13 @kind object;
  #L4d9252.  call `<init>`(v1, v2, v3, v5, v7, v8, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$d;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;I)V` @kind direct;
  #L4d9258.  call `subscribe`(v0, v10) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4d925e.  return @kind void;
}
