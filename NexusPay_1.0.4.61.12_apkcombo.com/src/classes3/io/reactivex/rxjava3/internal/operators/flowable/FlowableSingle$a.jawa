record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d2250.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4d2256.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` := v2 @kind object;
  #L4d225a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4d225e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2270.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L4d2276.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d227a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d2280.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2294.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L4d2298.  if v0 == 0 then goto L4d229e;
  #L4d229c.  return @kind void;
  #L4d229e.  v0:= 1I;
  #L4d22a0.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d22a4.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4d22a8.  v1:= 0I;
  #L4d22aa.  v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4d22ae.  if v0 != 0 then goto L4d22b6;
  #L4d22b2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` @kind object;
  #L4d22b6.  if v0 != 0 then goto L4d22e4;
  #L4d22ba.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.b` @type ^`boolean` @kind boolean;
  #L4d22be.  if v0 == 0 then goto L4d22d8;
  #L4d22c2.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d22c6.  v1:= new `java.util.NoSuchElementException`;
  #L4d22ca.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4d22d0.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d22d6.  goto L4d22ea;
  #L4d22d8.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d22dc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d22e2.  goto L4d22ea;
  #L4d22e4.  call `complete`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4d22ea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d22fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L4d2300.  if v0 == 0 then goto L4d230c;
  #L4d2304.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d230a.  return @kind void;
  #L4d230c.  v0:= 1I;
  #L4d230e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d2312.  v0:= v1.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2316.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d231c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2330.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L4d2334.  if v0 == 0 then goto L4d233a;
  #L4d2338.  return @kind void;
  #L4d233a.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4d233e.  if v0 == 0 then goto L4d236c;
  #L4d2342.  v3:= 1I;
  #L4d2344.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4d2348.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d234c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d2352.  v3:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2356.  v0:= new `java.lang.IllegalArgumentException`;
  #L4d235a.  v1:= "Sequence contains more than one element!" @kind object;
  #L4d235e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d2364.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d236a.  return @kind void;
  #L4d236c.  v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4d2370.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2384.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2388.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d238e.  v0:= temp;
  #L4d2390.  if v0 == 0 then goto L4d23b2;
  #L4d2394.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d2398.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d239c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d23a2.  v0:= 9223372036854775807L;
  #L4d23ac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d23b2.  return @kind void;
}
