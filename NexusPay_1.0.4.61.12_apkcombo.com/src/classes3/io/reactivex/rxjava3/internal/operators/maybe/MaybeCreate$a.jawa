record `io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeEmitter` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4db7c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4db7c6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4db7ca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4db7dc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4db7e2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db6d8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4db6de.  v0:= temp @kind object;
  #L4db6e0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4db6e4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4db6ea.  v0:= temp;
  #L4db6ec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4db7f4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4db7fa.  v0:= temp @kind object;
  #L4db7fc.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4db800.  if v0 == v1 then goto L4db83c;
  #L4db804.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4db80a.  v0:= temp @kind object;
  #L4db80c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4db810.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4db814.  if v0 == v1 then goto L4db83c;
  #L4db818.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4db81c.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4db822.  if v0 == 0 then goto L4db83c;
  #L4db826.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4db82c.  goto L4db83c;
  #L4db82e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db830.  if v0 == 0 then goto L4db83a;
  #L4db834.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4db83a.  throw v1;
  #L4db83c.  return @kind void;
  catch `java.lang.Throwable` @[L4db818..L4db822] goto L4db82e;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db85c.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4db862.  v0:= temp;
  #L4db864.  if v0 != 0 then goto L4db86e;
  #L4db868.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4db86e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4db880.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4db886.  v0:= temp @kind object;
  #L4db888.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4db88c.  if v0 == v1 then goto L4db8e4;
  #L4db890.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4db896.  v0:= temp @kind object;
  #L4db898.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4db89c.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4db8a0.  if v0 == v1 then goto L4db8e4;
  #L4db8a4.  if v3 != 0 then goto L4db8c0;
  #L4db8a8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4db8ac.  v1:= "onSuccess called with a null value." @kind object;
  #L4db8b0.  call temp:= `createNullPointerException`(v1) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4db8b6.  v1:= temp @kind object;
  #L4db8b8.  call `onError`(v3, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4db8be.  goto L4db8ca;
  #L4db8c0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4db8c4.  call `onSuccess`(v1, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4db8ca.  if v0 == 0 then goto L4db8e4;
  #L4db8ce.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4db8d4.  goto L4db8e4;
  #L4db8d6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db8d8.  if v0 == 0 then goto L4db8e2;
  #L4db8dc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4db8e2.  throw v3;
  #L4db8e4.  return @kind void;
  catch `java.lang.Throwable` @[L4db8a8..L4db8ca] goto L4db8d6;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db904.  v0:= new `io.reactivex.rxjava3.internal.disposables.CancellableDisposable`;
  #L4db908.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind direct;
  #L4db90e.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4db914.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4db928.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4db92e.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4db77c.  v0:= 2I;
  #L4db77e.  v0:= new `java.lang.Object`[v0];
  #L4db782.  v1:= constclass @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` @kind object;
  #L4db786.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4db78c.  v1:= temp @kind object;
  #L4db78e.  v2:= 0I;
  #L4db790.  v0[v2]:= v1 @kind object;
  #L4db794.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L4db79a.  v1:= temp @kind object;
  #L4db79c.  v2:= 1I;
  #L4db79e.  v0[v2]:= v1 @kind object;
  #L4db7a2.  v1:= "%s{%s}" @kind object;
  #L4db7a6.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4db7ac.  v0:= temp @kind object;
  #L4db7ae.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4db700.  if v3 != 0 then goto L4db710;
  #L4db704.  v3:= "onError called with a null Throwable." @kind object;
  #L4db708.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4db70e.  v3:= temp @kind object;
  #L4db710.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4db716.  v0:= temp @kind object;
  #L4db718.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4db71c.  if v0 == v1 then goto L4db75a;
  #L4db720.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4db726.  v0:= temp @kind object;
  #L4db728.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4db72c.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4db730.  if v0 == v1 then goto L4db75a;
  #L4db734.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4db738.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4db73e.  if v0 == 0 then goto L4db748;
  #L4db742.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4db748.  v3:= 1I;
  #L4db74a.  return v3;
  #L4db74c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db74e.  if v0 == 0 then goto L4db758;
  #L4db752.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4db758.  throw v3;
  #L4db75a.  v3:= 0I;
  #L4db75c.  return v3;
  catch `java.lang.Throwable` @[L4db734..L4db73e] goto L4db74c;
}
