record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f0358.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f035e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f0362.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4f0366.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4f036a.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4f036e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4f0374.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4f0378.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4f037c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4f0382.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4f0386.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4f038a.  v2:= 1I;
  #L4f038c.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4f0392.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4f0396.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f039a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f03a0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4f03a4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4f03b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f03bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f03c2.  v0:= temp @kind object;
  #L4f03c4.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4f03c8.  if v0 == 0 then goto L4f03d2;
  #L4f03cc.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f03d2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4f041c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f0422.  v0:= temp;
  #L4f0424.  if v0 != 0 then goto L4f042e;
  #L4f0428.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L4f042e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f0440.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f0444.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f0448.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f044c.  v3:= 1I;
  #L4f044e.  v4:= 1I;
  #L4f0450.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4f0454.  if v5 == 0 then goto L4f0460;
  #L4f0458.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4f045e.  return @kind void;
  #L4f0460.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4f0464.  if v5 != 0 then goto L4f048e;
  #L4f0468.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f046c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0472.  v5:= temp @kind object;
  #L4f0474.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4f0478.  if v5 == 0 then goto L4f048e;
  #L4f047c.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L4f0482.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f0486.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f048c.  return @kind void;
  #L4f048e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f0494.  v5:= temp;
  #L4f0496.  v6:= 0I;
  #L4f0498.  if v5 != 0 then goto L4f04a0;
  #L4f049c.  v5:= 1I;
  #L4f049e.  goto L4f04a2;
  #L4f04a0.  v5:= 0I;
  #L4f04a2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f04a8.  v7:= temp @kind object;
  #L4f04aa.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4f04ae.  if v7 == 0 then goto L4f04bc;
  #L4f04b2.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f04b8.  v7:= temp @kind object;
  #L4f04ba.  goto L4f04be;
  #L4f04bc.  v7:= 0I;
  #L4f04be.  if v7 != 0 then goto L4f04c4;
  #L4f04c2.  v6:= 1I;
  #L4f04c4.  if v5 == 0 then goto L4f04dc;
  #L4f04c8.  if v6 == 0 then goto L4f04dc;
  #L4f04cc.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f04d0.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f04d4.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f04da.  return @kind void;
  #L4f04dc.  if v6 == 0 then goto L4f04f0;
  #L4f04e0.  v4:= -v4 @kind int;
  #L4f04e2.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f04e8.  v4:= temp;
  #L4f04ea.  if v4 != 0 then goto L4f0450;
  #L4f04ee.  return @kind void;
  #L4f04f0.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f04f6.  goto L4f0450;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f02f8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f02fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0302.  v0:= temp @kind object;
  #L4f0304.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4f0308.  if v0 == 0 then goto L4f030e;
  #L4f030c.  return v0 @kind object;
  #L4f030e.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f0312.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4f0318.  v1:= temp;
  #L4f031a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f0320.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0324.  v2:= 0I;
  #L4f0326.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f032c.  v1:= temp;
  #L4f032e.  if v1 == 0 then goto L4f0334;
  #L4f0332.  return v0 @kind object;
  #L4f0334.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0338.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f033e.  v0:= temp @kind object;
  #L4f0340.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4f0344.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f03e4.  v0:= 1I;
  #L4f03e6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4f03ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f03ee.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f03f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f03f8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f03fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f0402.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4f0408.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4f0508.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f050c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f0512.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f0516.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4f051c.  v2:= temp;
  #L4f051e.  if v2 == 0 then goto L4f054e;
  #L4f0522.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4f0526.  if v2 != 0 then goto L4f053e;
  #L4f052a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f052e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f0534.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f0538.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f053e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f0542.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f0548.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4f054e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f0560.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f0564.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f056a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f0570.  v3:= temp;
  #L4f0572.  if v3 != 0 then goto L4f05e4;
  #L4f0576.  v3:= 0I;
  #L4f0578.  v0:= 1I;
  #L4f057a.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4f0580.  v1:= temp;
  #L4f0582.  if v1 == 0 then goto L4f05e4;
  #L4f0586.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f058a.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f0590.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f0594.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f059a.  v4:= temp;
  #L4f059c.  if v4 != 0 then goto L4f05a2;
  #L4f05a0.  v3:= 1I;
  #L4f05a2.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f05a6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f05ac.  v4:= temp @kind object;
  #L4f05ae.  v4:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L4f05b2.  if v3 == 0 then goto L4f05d6;
  #L4f05b6.  if v4 == 0 then goto L4f05c6;
  #L4f05ba.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4f05c0.  v3:= temp;
  #L4f05c2.  if v3 == 0 then goto L4f05d6;
  #L4f05c6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f05ca.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f05ce.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f05d4.  return @kind void;
  #L4f05d6.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f05dc.  v3:= temp;
  #L4f05de.  if v3 != 0 then goto L4f060e;
  #L4f05e2.  return @kind void;
  #L4f05e4.  call temp:= `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4f05ea.  v3:= temp @kind object;
  #L4f05ec.  @monitorenter v3
  #L4f05ee.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f05f4.  @monitorexit v3
  #L4f05f6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f05fa.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f0600.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f0606.  v3:= temp;
  #L4f0608.  if v3 == 0 then goto L4f060e;
  #L4f060c.  return @kind void;
  #L4f060e.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L4f0614.  return @kind void;
  #L4f0616.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f0618.  @monitorexit v3
  #L4f061a.  throw v4;
  catch `java.lang.Throwable` @[L4f05ee..L4f05f6] goto L4f0616;
  catch `java.lang.Throwable` @[L4f0618..L4f061a] goto L4f0616;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f02e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4f02e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0640.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f0644.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f064a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4f0650.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0664.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f0668.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f066e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f0672.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4f0678.  v2:= temp;
  #L4f067a.  if v2 == 0 then goto L4f0696;
  #L4f067e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4f0682.  if v2 != 0 then goto L4f0690;
  #L4f0686.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f068a.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f0690.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4f0696.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f06a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f06ac.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f06b2.  v3:= temp @kind object;
  #L4f06b4.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4f06b8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f06be.  v3:= temp @kind object;
  #L4f06c0.  v3:= (`io.reactivex.rxjava3.core.SingleSource`) v3 @kind object;
  #L4f06c4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f06c8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f06ce.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a$a`;
  #L4f06d2.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;)V` @kind direct;
  #L4f06d8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4f06dc.  if v1 != 0 then goto L4f06f6;
  #L4f06e0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f06e4.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f06ea.  v1:= temp;
  #L4f06ec.  if v1 == 0 then goto L4f06f6;
  #L4f06f0.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4f06f6.  return @kind void;
  #L4f06f8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f06fa.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f0700.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f0704.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f070a.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f0710.  return @kind void;
  catch `java.lang.Throwable` @[L4f06a8..L4f06c4] goto L4f06f8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0730.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f0734.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f073a.  v0:= temp;
  #L4f073c.  if v0 == 0 then goto L4f074e;
  #L4f0740.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f0744.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f0748.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f074e.  return @kind void;
}
