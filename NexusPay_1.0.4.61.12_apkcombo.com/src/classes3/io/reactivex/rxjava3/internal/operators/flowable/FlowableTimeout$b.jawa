record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.i` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.k` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.m` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d5538.  v0:= 1I;
  #L4d553a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4d5540.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d5544.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.i` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4d5548.  v2:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d554c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d5552.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L4d5556.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d555a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d5560.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4d5564.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.m` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L4d5568.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d556c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d5572.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4d5576.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v3 @kind this, `long` v4 , `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.a:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d57dc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d57e0.  v1:= 9223372036854775807L;
  #L4d57ea.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d57f0.  v4:= temp;
  #L4d57f2.  if v4 == 0 then goto L4d580c;
  #L4d57f6.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d57fa.  call temp:= `cancel`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d5800.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5804.  call `onError`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d580a.  goto L4d5812;
  #L4d580c.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5812.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d5770.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5774.  v1:= 9223372036854775807L;
  #L4d577e.  call temp:= `compareAndSet`(v0, v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5784.  v5:= temp;
  #L4d5786.  if v5 == 0 then goto L4d57c8;
  #L4d578a.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d578e.  call temp:= `cancel`(v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d5794.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.m` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4d5798.  v6:= 0I;
  #L4d579a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.m` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L4d579e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.n` @type ^`long` @kind wide;
  #L4d57a2.  v2:= 0L;
  #L4d57a6.  v6:= lcmp(v0, v2);
  #L4d57aa.  if v6 == 0 then goto L4d57b4;
  #L4d57ae.  call `produced`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4d57b4.  v6:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$a`;
  #L4d57b8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d57bc.  call `<init>`(v6, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L4d57c2.  call `subscribe`(v5, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d57c8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5588.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L4d558e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5592.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5598.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v3 @kind this, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.e:(Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4d5824.  if v4 == 0 then goto L4d584c;
  #L4d5828.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a`;
  #L4d582c.  v1:= 0L;
  #L4d5830.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L4d5836.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d583a.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d5840.  v1:= temp;
  #L4d5842.  if v1 == 0 then goto L4d584c;
  #L4d5846.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d584c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d55ac.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d55b0.  v1:= 9223372036854775807L;
  #L4d55ba.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d55c0.  v3:= temp @kind wide;
  #L4d55c2.  v0:= lcmp(v3, v1);
  #L4d55c6.  if v0 == 0 then goto L4d55e8;
  #L4d55ca.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d55ce.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d55d4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d55d8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d55de.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d55e2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d55e8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d55fc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5600.  v1:= 9223372036854775807L;
  #L4d560a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5610.  v3:= temp @kind wide;
  #L4d5612.  v0:= lcmp(v3, v1);
  #L4d5616.  if v0 == 0 then goto L4d563a;
  #L4d561a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d561e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5624.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5628.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d562e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5632.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5638.  goto L4d5640;
  #L4d563a.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5640.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d5654.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5658.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d565e.  v0:= temp @kind wide;
  #L4d5660.  v2:= 9223372036854775807L;
  #L4d566a.  v4:= lcmp(v0, v2);
  #L4d566e.  if v4 == 0 then goto L4d572a;
  #L4d5672.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5676.  v5:= 1L;
  #L4d567a.  v7:= v0 + v5 @kind long;
  #L4d567e.  call temp:= `compareAndSet`(v4, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5684.  v0:= temp;
  #L4d5686.  if v0 != 0 then goto L4d568c;
  #L4d568a.  goto L4d572a;
  #L4d568c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5690.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d5696.  v0:= temp @kind object;
  #L4d5698.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d569c.  if v0 == 0 then goto L4d56a6;
  #L4d56a0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d56a6.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.n` @type ^`long` @kind wide;
  #L4d56aa.  v0:= v0 + v5 @kind long;
  #L4d56ac.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.n` @type ^`long` := v0 @kind wide;
  #L4d56b0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d56b4.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d56ba.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.i` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d56be.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d56c4.  v10:= temp @kind object;
  #L4d56c6.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L4d56ca.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d56d0.  v10:= temp @kind object;
  #L4d56d2.  v10:= (`org.reactivestreams.Publisher`) v10 @kind object;
  #L4d56d6.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a`;
  #L4d56da.  call `<init>`(v0, v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L4d56e0.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d56e4.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d56ea.  v1:= temp;
  #L4d56ec.  if v1 == 0 then goto L4d56f6;
  #L4d56f0.  call `subscribe`(v10, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d56f6.  return @kind void;
  #L4d56f8.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d56fa.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5700.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5704.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d570a.  v0:= temp @kind object;
  #L4d570c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4d5710.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d5716.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d571a.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5720.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5724.  call `onError`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d572a.  return @kind void;
  catch `java.lang.Throwable` @[L4d56ba..L4d56d6] goto L4d56f8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5748.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d574c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d5752.  v0:= temp;
  #L4d5754.  if v0 == 0 then goto L4d575e;
  #L4d5758.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4d575e.  return @kind void;
}
