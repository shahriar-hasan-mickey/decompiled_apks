record `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e4368.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`;
  #L4e436c.  v1:= 0I;
  #L4e436e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;)V` @kind direct;
  #L4e4374.  `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` := v0 @kind object;
  #L4e4378.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e438c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e4392.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4e4396.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e439a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4e439e.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e43a2.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e43a8.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e43ac.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4e43b0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4e43b6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4e43ba.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e43be.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e43c4.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e43c8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e4410.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4414.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L4e4418.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e441e.  v0:= temp @kind object;
  #L4e4420.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v0 @kind object;
  #L4e4424.  if v0 == 0 then goto L4e4436;
  #L4e4428.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L4e442c.  if v0 == v1 then goto L4e4436;
  #L4e4430.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4e4436.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4e4448.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e444e.  v0:= temp;
  #L4e4450.  if v0 == 0 then goto L4e4456;
  #L4e4454.  return @kind void;
  #L4e4456.  v0:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e445a.  v1:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e445e.  v2:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4462.  v3:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e4466.  v4:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @type ^`long` @kind wide;
  #L4e446a.  v6:= 1I;
  #L4e446c.  v7:= 1I;
  #L4e446e.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4e4472.  if v8 == 0 then goto L4e4478;
  #L4e4476.  return @kind void;
  #L4e4478.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e447e.  v8:= temp @kind object;
  #L4e4480.  if v8 == 0 then goto L4e4494;
  #L4e4484.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4e4488.  if v8 != 0 then goto L4e4494;
  #L4e448c.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e4492.  return @kind void;
  #L4e4494.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4e4498.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e449e.  v9:= temp @kind object;
  #L4e44a0.  v9:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v9 @kind object;
  #L4e44a4.  if v9 != 0 then goto L4e44ac;
  #L4e44a8.  v10:= 1I;
  #L4e44aa.  goto L4e44ae;
  #L4e44ac.  v10:= 0I;
  #L4e44ae.  if v8 == 0 then goto L4e44be;
  #L4e44b2.  if v10 == 0 then goto L4e44be;
  #L4e44b6.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e44bc.  return @kind void;
  #L4e44be.  if v10 != 0 then goto L4e44f6;
  #L4e44c2.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e44c6.  if v8 == 0 then goto L4e44f6;
  #L4e44ca.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4e44d0.  v10:= temp @kind wide;
  #L4e44d2.  v8:= lcmp(v4, v10);
  #L4e44d6.  if v8 != 0 then goto L4e44dc;
  #L4e44da.  goto L4e44f6;
  #L4e44dc.  v8:= 0I;
  #L4e44de.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e44e4.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e44e8.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e44ee.  v8:= 1L;
  #L4e44f2.  v4:= v4 + v8 @kind long;
  #L4e44f4.  goto L4e446e;
  #L4e44f6.  v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @type ^`long` := v4 @kind wide;
  #L4e44fa.  v7:= -v7 @kind int;
  #L4e44fc.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e4502.  v7:= temp;
  #L4e4504.  if v7 != 0 then goto L4e446e;
  #L4e4508.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e451c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4520.  v1:= 0I;
  #L4e4522.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e4528.  v3:= temp;
  #L4e452a.  if v3 == 0 then goto L4e455e;
  #L4e452e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e4532.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e4538.  v3:= temp;
  #L4e453a.  if v3 == 0 then goto L4e4564;
  #L4e453e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4e4542.  if v3 != 0 then goto L4e4556;
  #L4e4546.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e454a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e4550.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4e4556.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4e455c.  goto L4e4564;
  #L4e455e.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e4564.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e43dc.  v0:= 1I;
  #L4e43de.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4e43e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e43e6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e43ec.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4e43f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e43f6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e43fc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4578.  v0:= 1I;
  #L4e457a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e457e.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4e4584.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4598.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e459c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e45a2.  v2:= temp;
  #L4e45a4.  if v2 == 0 then goto L4e45c2;
  #L4e45a8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4e45ac.  if v2 != 0 then goto L4e45b6;
  #L4e45b0.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4e45b6.  v2:= 1I;
  #L4e45b8.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4e45bc.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4e45c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e45d4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e45d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e45de.  v0:= temp @kind object;
  #L4e45e0.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v0 @kind object;
  #L4e45e4.  if v0 == 0 then goto L4e45ee;
  #L4e45e8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4e45ee.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e45f2.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e45f8.  v4:= temp @kind object;
  #L4e45fa.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4e45fe.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e4604.  v4:= temp @kind object;
  #L4e4606.  v4:= (`io.reactivex.rxjava3.core.SingleSource`) v4 @kind object;
  #L4e460a.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`;
  #L4e460e.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;)V` @kind direct;
  #L4e4614.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4618.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e461e.  v1:= temp @kind object;
  #L4e4620.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v1 @kind object;
  #L4e4624.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L4e4628.  if v1 != v2 then goto L4e462e;
  #L4e462c.  goto L4e4644;
  #L4e462e.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4632.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e4638.  v1:= temp;
  #L4e463a.  if v1 == 0 then goto L4e4614;
  #L4e463e.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4e4644.  return @kind void;
  #L4e4646.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e4648.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e464e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e4652.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e4658.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e465c.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L4e4660.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e4666.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e466c.  return @kind void;
  catch `java.lang.Throwable` @[L4e45ee..L4e460a] goto L4e4646;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e468c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e4690.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4e4696.  v0:= temp;
  #L4e4698.  if v0 == 0 then goto L4e46ba;
  #L4e469c.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4e46a0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e46a4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4e46aa.  v0:= 9223372036854775807L;
  #L4e46b4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e46ba.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e46cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e46d0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4e46d6.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4e46dc.  return @kind void;
}
