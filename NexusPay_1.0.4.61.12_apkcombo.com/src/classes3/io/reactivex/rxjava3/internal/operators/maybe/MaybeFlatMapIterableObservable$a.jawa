record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicQueueDisposable` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ddc88.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L4ddc8e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ddc92.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ddc96.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddca8.  v0:= 0I;
  #L4ddcaa.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L4ddcae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddcc0.  v0:= 1I;
  #L4ddcc2.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ddcc6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ddcca.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ddcd0.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ddcd4.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ddcd8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddbe8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4ddbec.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddc00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4ddc04.  if v0 != 0 then goto L4ddc0c;
  #L4ddc08.  v0:= 1I;
  #L4ddc0a.  goto L4ddc0e;
  #L4ddc0c.  v0:= 0I;
  #L4ddc0e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddcec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ddcf0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ddcf6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddd08.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4ddd0c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ddd10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ddd14.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ddd1a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddd2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ddd30.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ddd36.  v0:= temp;
  #L4ddd38.  if v0 == 0 then goto L4ddd4a;
  #L4ddd3c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ddd40.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ddd44.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ddd4a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ddd5c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ddd60.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ddd64.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ddd6a.  v3:= temp @kind object;
  #L4ddd6c.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L4ddd70.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ddd76.  v3:= temp @kind object;
  #L4ddd78.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ddd7e.  v1:= temp;
  #L4ddd80.  if v1 != 0 then goto L4ddd8c;
  #L4ddd84.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ddd8a.  return @kind void;
  #L4ddd8c.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L4ddd90.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L4ddd94.  if v1 == 0 then goto L4ddda8;
  #L4ddd98.  v3:= 0I;
  #L4ddd9a.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ddda0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ddda6.  return @kind void;
  #L4ddda8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4dddac.  if v1 == 0 then goto L4dddb2;
  #L4dddb0.  return @kind void;
  #L4dddb2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4dddb8.  v1:= temp @kind object;
  #L4dddba.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4dddc0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4dddc4.  if v1 == 0 then goto L4dddca;
  #L4dddc8.  return @kind void;
  #L4dddca.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4dddd0.  v1:= temp;
  #L4dddd2.  if v1 != 0 then goto L4ddda8;
  #L4dddd6.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ddddc.  return @kind void;
  #L4dddde.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ddde0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ddde6.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dddec.  return @kind void;
  #L4dddee.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dddf0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dddf6.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dddfc.  return @kind void;
  #L4dddfe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dde00.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dde06.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dde0c.  return @kind void;
  catch `java.lang.Throwable` @[L4ddd60..L4ddd80] goto L4dddfe;
  catch `java.lang.Throwable` @[L4dddb2..L4dddba] goto L4dddee;
  catch `java.lang.Throwable` @[L4dddca..L4dddd2] goto L4dddde;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ddc44.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4ddc48.  v1:= 0I;
  #L4ddc4a.  if v0 == 0 then goto L4ddc74;
  #L4ddc4e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ddc54.  v2:= temp @kind object;
  #L4ddc56.  v3:= "The iterator returned a null value" @kind object;
  #L4ddc5a.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ddc60.  v2:= temp @kind object;
  #L4ddc62.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ddc68.  v0:= temp;
  #L4ddc6a.  if v0 != 0 then goto L4ddc72;
  #L4ddc6e.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L4ddc72.  return v2 @kind object;
  #L4ddc74.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ddc20.  v0:= 2I;
  #L4ddc22.  v2:= v2 ^& v0 @kind int;
  #L4ddc24.  if v2 == 0 then goto L4ddc30;
  #L4ddc28.  v2:= 1I;
  #L4ddc2a.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L4ddc2e.  return v0;
  #L4ddc30.  v2:= 0I;
  #L4ddc32.  return v2;
}
