record `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.b` @AccessFlag FINAL;
  `java.util.List`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @AccessFlag FINAL;
  `int`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.d` @AccessFlag FINAL;
  `java.util.Comparator` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `java.util.Comparator` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/Comparator;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L504a40.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L504a46.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L504a4a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L504a50.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L504a54.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L504a58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L504a5e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L504a62.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L504a66.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L504a6c.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L504a70.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L504a74.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` := v4 @kind object;
  #L504a78.  v2:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[v3];
  #L504a7c.  v4:= 0I;
  #L504a7e.  if v4 >= v3 then goto L504a96;
  #L504a82.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`;
  #L504a86.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;I)V` @kind direct;
  #L504a8c.  v2[v4]:= v0 @kind object;
  #L504a90.  v4:= v4 + 1;
  #L504a94.  goto L504a7e;
  #L504a96.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[] := v2 @kind object;
  #L504a9a.  v2:= new `java.util.List`[v3];
  #L504a9e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] := v2 @kind object;
  #L504aa2.  v2:= new `int`[v3];
  #L504aa6.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] := v2 @kind object;
  #L504aaa.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L504aae.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L504ab4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L504b08.  v0:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[] @kind object;
  #L504b0c.  v1:= length @variable v0;
  #L504b0e.  v2:= 0I;
  #L504b10.  if v2 >= v1 then goto L504b24;
  #L504b14.  v3:= v0[v2] @kind object;
  #L504b18.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$a;.a:()V` @kind virtual;
  #L504b1e.  v2:= v2 + 1;
  #L504b22.  goto L504b10;
  #L504b24.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v16 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L504b38.  v1:= v16 @kind object;
  #L504b3c.  call temp:= `getAndIncrement`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L504b42.  v0:= temp;
  #L504b44.  if v0 == 0 then goto L504b4a;
  #L504b48.  return @kind void;
  #L504b4a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L504b4e.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L504b52.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] @kind object;
  #L504b56.  v4:= length @variable v0;
  #L504b58.  v6:= 1I;
  #L504b5a.  v7:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L504b5e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L504b64.  v7:= temp @kind wide;
  #L504b66.  v11:= 0L;
  #L504b6a.  v14:= 0I;
  #L504b6c.  v15:= lcmp(v11, v7);
  #L504b70.  if v15 == 0 then goto L504c7c;
  #L504b74.  v15:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L504b78.  if v15 == 0 then goto L504b84;
  #L504b7c.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504b82.  return @kind void;
  #L504b84.  v15:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L504b88.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L504b8e.  v15:= temp @kind object;
  #L504b90.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L504b94.  if v15 == 0 then goto L504bac;
  #L504b98.  call `a`(v16) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L504b9e.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504ba4.  call `onError`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L504baa.  return @kind void;
  #L504bac.  v15:= -1I;
  #L504bae.  v9:= v14 @kind object;
  #L504bb0.  v13:= 0I;
  #L504bb2.  if v13 >= v4 then goto L504c4c;
  #L504bb6.  v10:= v3[v13] @kind object;
  #L504bba.  v5:= v0[v13];
  #L504bbe.  call temp:= `size`(v10) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L504bc4.  v14:= temp;
  #L504bc6.  if v14 == v5 then goto L504c44;
  #L504bca.  if v9 != 0 then goto L504bda;
  #L504bce.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L504bd4.  v9:= temp @kind object;
  #L504bd6.  v15:= v13;
  #L504bd8.  goto L504c44;
  #L504bda.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L504be0.  v5:= temp @kind object;
  #L504be2.  v10:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` @kind object;
  #L504be6.  call temp:= `compare`(v10, v9, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L504bec.  v10:= temp;
  #L504bee.  if v10 <= 0 then goto L504bf6;
  #L504bf2.  v10:= 1I;
  #L504bf4.  goto L504bf8;
  #L504bf6.  v10:= 0I;
  #L504bf8.  if v10 == 0 then goto L504c44;
  #L504bfc.  v9:= v5 @kind object;
  #L504bfe.  goto L504bd6;
  #L504c00.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L504c02.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L504c08.  call `a`(v16) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L504c0e.  v4:= 0I;
  #L504c10.  call `fill`(v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504c16.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L504c1a.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L504c20.  v3:= temp;
  #L504c22.  if v3 != 0 then goto L504c2c;
  #L504c26.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L504c2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L504c30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L504c36.  v0:= temp @kind object;
  #L504c38.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L504c3c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L504c42.  return @kind void;
  #L504c44.  v13:= v13 + 1;
  #L504c48.  v14:= 0I;
  #L504c4a.  goto L504bb2;
  #L504c4c.  if v9 != 0 then goto L504c60;
  #L504c50.  v5:= 0I;
  #L504c52.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504c58.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L504c5e.  return @kind void;
  #L504c60.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L504c66.  v5:= v0[v15];
  #L504c6a.  v9:= 1I;
  #L504c6c.  v5:= v5 + v9 @kind int;
  #L504c6e.  v0[v15]:= v5;
  #L504c72.  v13:= 1L;
  #L504c76.  v11:= v11 + v13 @kind long;
  #L504c78.  goto L504b6a;
  #L504c7c.  v9:= 1I;
  #L504c7e.  v5:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L504c82.  if v5 == 0 then goto L504c90;
  #L504c86.  v5:= 0I;
  #L504c88.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504c8e.  return @kind void;
  #L504c90.  v5:= 0I;
  #L504c92.  v7:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L504c96.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L504c9c.  v7:= temp @kind object;
  #L504c9e.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L504ca2.  if v7 == 0 then goto L504cba;
  #L504ca6.  call `a`(v16) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L504cac.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504cb2.  call `onError`(v2, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L504cb8.  return @kind void;
  #L504cba.  v5:= 0I;
  #L504cbc.  if v5 >= v4 then goto L504cde;
  #L504cc0.  v7:= v0[v5];
  #L504cc4.  v8:= v3[v5] @kind object;
  #L504cc8.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L504cce.  v8:= temp;
  #L504cd0.  if v7 == v8 then goto L504cd8;
  #L504cd4.  v13:= 0I;
  #L504cd6.  goto L504ce0;
  #L504cd8.  v5:= v5 + 1;
  #L504cdc.  goto L504cbc;
  #L504cde.  v13:= 1I;
  #L504ce0.  if v13 == 0 then goto L504cf4;
  #L504ce4.  v5:= 0I;
  #L504ce6.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504cec.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L504cf2.  return @kind void;
  #L504cf4.  v7:= 0L;
  #L504cf8.  v5:= lcmp(v11, v7);
  #L504cfc.  if v5 == 0 then goto L504d0a;
  #L504d00.  v5:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L504d04.  call temp:= `produced`(v5, v11) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L504d0a.  v5:= -v6 @kind int;
  #L504d0c.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L504d12.  v6:= temp;
  #L504d14.  if v6 != 0 then goto L504b5a;
  #L504d18.  return @kind void;
  catch `java.lang.Throwable` @[L504be2..L504bee] goto L504c00;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L504d38.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L504d3c.  v1:= 0I;
  #L504d3e.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L504d44.  v0:= temp;
  #L504d46.  if v0 == 0 then goto L504d52;
  #L504d4a.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L504d50.  goto L504d68;
  #L504d52.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L504d56.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L504d5c.  v0:= temp @kind object;
  #L504d5e.  if v3 == v0 then goto L504d68;
  #L504d62.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L504d68.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L504ac8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L504acc.  if v0 != 0 then goto L504af4;
  #L504ad0.  v0:= 1I;
  #L504ad2.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` := v0 @kind boolean;
  #L504ad6.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L504adc.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L504ae2.  v0:= temp;
  #L504ae4.  if v0 != 0 then goto L504af4;
  #L504ae8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L504aec.  v1:= 0I;
  #L504aee.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L504af4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `java.util.List` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.d:(Ljava/util/List;I)V` @AccessFlag  {
    temp;
    v0;

  #L504d7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L504d80.  v0[v3]:= v2 @kind object;
  #L504d84.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L504d88.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L504d8e.  v2:= temp;
  #L504d90.  if v2 != 0 then goto L504d9a;
  #L504d94.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L504d9a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L504dac.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L504db2.  v0:= temp;
  #L504db4.  if v0 == 0 then goto L504dd8;
  #L504db8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L504dbc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L504dc2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L504dc6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L504dcc.  v2:= temp;
  #L504dce.  if v2 != 0 then goto L504dd8;
  #L504dd2.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L504dd8.  return @kind void;
}
