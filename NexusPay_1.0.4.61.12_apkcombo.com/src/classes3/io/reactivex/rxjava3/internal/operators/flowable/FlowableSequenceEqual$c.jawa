record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.d` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1b9c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d1ba2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` := v1 @kind object;
  #L4d1ba6.  v1:= v2 ^> 2;
  #L4d1baa.  v1:= v2 - v1 @kind int;
  #L4d1bae.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.c` @type ^`int` := v1;
  #L4d1bb2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.b` @type ^`int` := v2;
  #L4d1bb6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4d1bc8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d1bce.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4d1be0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d1be4.  if v0 == 0 then goto L4d1bee;
  #L4d1be8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d1bee.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d1d18.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.g` @type ^`int`;
  #L4d1d1c.  v1:= 1I;
  #L4d1d1e.  if v0 == v1 then goto L4d1d5a;
  #L4d1d22.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.d` @type ^`long` @kind wide;
  #L4d1d26.  v2:= 1L;
  #L4d1d2a.  v0:= v0 + v2 @kind long;
  #L4d1d2c.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.c` @type ^`int`;
  #L4d1d30.  v2:= (`long`) v2 @kind i2l;
  #L4d1d32.  v4:= lcmp(v0, v2);
  #L4d1d36.  if v4 < 0 then goto L4d1d56;
  #L4d1d3a.  v2:= 0L;
  #L4d1d3e.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.d` @type ^`long` := v2 @kind wide;
  #L4d1d42.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d1d48.  v2:= temp @kind object;
  #L4d1d4a.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4d1d4e.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1d54.  goto L4d1d5a;
  #L4d1d56.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.d` @type ^`long` := v0 @kind wide;
  #L4d1d5a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1c00.  v0:= 1I;
  #L4d1c02.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` := v0 @kind boolean;
  #L4d1c06.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` @kind object;
  #L4d1c0a.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;.drain:()V` @kind interface;
  #L4d1c10.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1c24.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` @kind object;
  #L4d1c28.  call `a`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d1c2e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1c40.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.g` @type ^`int`;
  #L4d1c44.  if v0 != 0 then goto L4d1c6a;
  #L4d1c48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d1c4c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d1c52.  v2:= temp;
  #L4d1c54.  if v2 != 0 then goto L4d1c6a;
  #L4d1c58.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d1c5c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4d1c62.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1c68.  return @kind void;
  #L4d1c6a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` @kind object;
  #L4d1c6e.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;.drain:()V` @kind interface;
  #L4d1c74.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d1c88.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d1c8e.  v0:= temp;
  #L4d1c90.  if v0 == 0 then goto L4d1d04;
  #L4d1c94.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4d1c98.  if v0 == 0 then goto L4d1ce6;
  #L4d1c9c.  v0:= v4 @kind object;
  #L4d1c9e.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4d1ca2.  v1:= 3I;
  #L4d1ca4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4d1caa.  v1:= temp;
  #L4d1cac.  v2:= 1I;
  #L4d1cae.  if v1 != v2 then goto L4d1cca;
  #L4d1cb2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.g` @type ^`int` := v1;
  #L4d1cb6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d1cba.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` := v2 @kind boolean;
  #L4d1cbe.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$b` @kind object;
  #L4d1cc2.  call `drain`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$b;.drain:()V` @kind interface;
  #L4d1cc8.  return @kind void;
  #L4d1cca.  v2:= 2I;
  #L4d1ccc.  if v1 != v2 then goto L4d1ce6;
  #L4d1cd0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.g` @type ^`int` := v1;
  #L4d1cd4.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d1cd8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.b` @type ^`int`;
  #L4d1cdc.  v0:= (`long`) v0 @kind i2l;
  #L4d1cde.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1ce4.  return @kind void;
  #L4d1ce6.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4d1cea.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.b` @type ^`int`;
  #L4d1cee.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4d1cf4.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d1cf8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$c.b` @type ^`int`;
  #L4d1cfc.  v0:= (`long`) v0 @kind i2l;
  #L4d1cfe.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1d04.  return @kind void;
}
