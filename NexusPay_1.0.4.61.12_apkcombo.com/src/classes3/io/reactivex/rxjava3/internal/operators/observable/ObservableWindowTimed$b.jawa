record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.m` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.o` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @AccessFlag ;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 , `long` v13 , `boolean` v15 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ff210.  v0:= v6 @kind object;
  #L4ff212.  v1:= v7 @kind object;
  #L4ff214.  v2:= v8 @kind wide;
  #L4ff216.  v4:= v10 @kind object;
  #L4ff218.  v5:= v12;
  #L4ff21a.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4ff220.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.m` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4ff224.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.o` @type ^`long` := v13 @kind wide;
  #L4ff228.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` := v15 @kind boolean;
  #L4ff22c.  if v15 == 0 then goto L4ff23e;
  #L4ff230.  call temp:= `createWorker`(v11) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4ff236.  v7:= temp @kind object;
  #L4ff238.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4ff23c.  goto L4ff244;
  #L4ff23e.  v7:= 0I;
  #L4ff240.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4ff244.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4ff248.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4ff24e.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4ff252.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ff288.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ff28c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4ff292.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ff296.  if v0 == 0 then goto L4ff2a0;
  #L4ff29a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ff2a0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4ff2b4.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ff2b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ff2be.  v0:= temp;
  #L4ff2c0.  if v0 != 0 then goto L4ff364;
  #L4ff2c4.  v0:= 1L;
  #L4ff2c8.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v0 @kind wide;
  #L4ff2cc.  v2:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ff2d0.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff2d6.  v2:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ff2da.  call temp:= `create`(v2, v11) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ff2e0.  v2:= temp @kind object;
  #L4ff2e2.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v2 @kind object;
  #L4ff2e6.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ff2ea.  call `<init>`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ff2f0.  v2:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ff2f4.  call `onNext`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ff2fa.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a`;
  #L4ff2fe.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;J)V` @kind direct;
  #L4ff304.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` @kind boolean;
  #L4ff308.  if v0 == 0 then goto L4ff32e;
  #L4ff30c.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ff310.  v4:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ff314.  v8:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ff318.  v10:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff31c.  v6:= v8 @kind wide;
  #L4ff31e.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ff324.  v1:= temp @kind object;
  #L4ff326.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ff32c.  goto L4ff34e;
  #L4ff32e.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ff332.  v4:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.m` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4ff336.  v8:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ff33a.  v10:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff33e.  v6:= v8 @kind wide;
  #L4ff340.  call temp:= `schedulePeriodicallyDirect`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ff346.  v1:= temp @kind object;
  #L4ff348.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ff34e.  call temp:= `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4ff354.  v0:= temp;
  #L4ff356.  if v0 == 0 then goto L4ff364;
  #L4ff35a.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4ff35e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff364.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4ff378.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff37e.  v0:= temp;
  #L4ff380.  if v0 == 0 then goto L4ff386;
  #L4ff384.  return @kind void;
  #L4ff386.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ff38a.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ff38e.  v2:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4ff392.  v3:= 1I;
  #L4ff394.  v4:= 1I;
  #L4ff396.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` @kind boolean;
  #L4ff39a.  v6:= 0I;
  #L4ff39c.  if v5 == 0 then goto L4ff3ae;
  #L4ff3a0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ff3a6.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v6 @kind object;
  #L4ff3aa.  v2:= v6 @kind object;
  #L4ff3ac.  goto L4ff470;
  #L4ff3ae.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L4ff3b2.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ff3b8.  v6:= temp @kind object;
  #L4ff3ba.  if v6 != 0 then goto L4ff3c2;
  #L4ff3be.  v7:= 1I;
  #L4ff3c0.  goto L4ff3c4;
  #L4ff3c2.  v7:= 0I;
  #L4ff3c4.  if v5 == 0 then goto L4ff402;
  #L4ff3c8.  if v7 == 0 then goto L4ff402;
  #L4ff3cc.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4ff3d0.  if v5 == 0 then goto L4ff3e6;
  #L4ff3d4.  if v2 == 0 then goto L4ff3de;
  #L4ff3d8.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ff3de.  call `onError`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ff3e4.  goto L4ff3f6;
  #L4ff3e6.  if v2 == 0 then goto L4ff3f0;
  #L4ff3ea.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff3f0.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ff3f6.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L4ff3fc.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4ff400.  goto L4ff396;
  #L4ff402.  if v7 != 0 then goto L4ff470;
  #L4ff406.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a` @kind boolean;
  #L4ff40a.  v7:= 0L;
  #L4ff40e.  if v5 == 0 then goto L4ff43c;
  #L4ff412.  v6:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a`) v6 @kind object;
  #L4ff416.  v5:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a.b` @type ^`long` @kind wide;
  #L4ff41a.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4ff41e.  v11:= lcmp(v5, v9);
  #L4ff422.  if v11 == 0 then goto L4ff42e;
  #L4ff426.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` @kind boolean;
  #L4ff42a.  if v5 != 0 then goto L4ff396;
  #L4ff42e.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` := v7 @kind wide;
  #L4ff432.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.f:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind virtual;
  #L4ff438.  v2:= temp @kind object;
  #L4ff43a.  goto L4ff396;
  #L4ff43c.  if v2 == 0 then goto L4ff396;
  #L4ff440.  call `onNext`(v2, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ff446.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` @kind wide;
  #L4ff44a.  v9:= 1L;
  #L4ff44e.  v5:= v5 + v9 @kind long;
  #L4ff450.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.o` @type ^`long` @kind wide;
  #L4ff454.  v11:= lcmp(v5, v9);
  #L4ff458.  if v11 != 0 then goto L4ff46a;
  #L4ff45c.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` := v7 @kind wide;
  #L4ff460.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.f:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind virtual;
  #L4ff466.  v2:= temp @kind object;
  #L4ff468.  goto L4ff396;
  #L4ff46a.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.q` @type ^`long` := v5 @kind wide;
  #L4ff46e.  goto L4ff396;
  #L4ff470.  v4:= -v4 @kind int;
  #L4ff472.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ff478.  v4:= temp;
  #L4ff47a.  if v4 != 0 then goto L4ff396;
  #L4ff47e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4ff264.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ff268.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff26e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.c:()V` @kind virtual;
  #L4ff274.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v11 @kind this, `io.reactivex.rxjava3.subjects.UnicastSubject` v12 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.f:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4ff158.  if v12 == 0 then goto L4ff164;
  #L4ff15c.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff162.  v12:= 0I;
  #L4ff164.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ff168.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ff16e.  v0:= temp;
  #L4ff170.  if v0 == 0 then goto L4ff17c;
  #L4ff174.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L4ff17a.  goto L4ff1fc;
  #L4ff17c.  v0:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4ff180.  v2:= 1L;
  #L4ff184.  v0:= v0 + v2 @kind long;
  #L4ff186.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v0 @kind wide;
  #L4ff18a.  v12:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ff18e.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff194.  v12:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ff198.  call temp:= `create`(v12, v11) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ff19e.  v12:= temp @kind object;
  #L4ff1a0.  v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.r` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v12 @kind object;
  #L4ff1a4.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ff1a8.  call `<init>`(v2, v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ff1ae.  v3:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ff1b2.  call `onNext`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ff1b8.  v3:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.n` @type ^`boolean` @kind boolean;
  #L4ff1bc.  if v3 == 0 then goto L4ff1ea;
  #L4ff1c0.  v3:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4ff1c4.  v4:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b.p` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ff1c8.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b$a`;
  #L4ff1cc.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;J)V` @kind direct;
  #L4ff1d2.  v8:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ff1d6.  v10:= v11.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff1da.  v6:= v8 @kind wide;
  #L4ff1dc.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ff1e2.  v0:= temp @kind object;
  #L4ff1e4.  call temp:= `update`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ff1ea.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4ff1f0.  v0:= temp;
  #L4ff1f2.  if v0 == 0 then goto L4ff1fc;
  #L4ff1f6.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff1fc.  return v12 @kind object;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4ff490.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L4ff496.  return @kind void;
}
