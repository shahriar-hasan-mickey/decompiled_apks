record `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e5118.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e511e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4e5122.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e5126.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4e512a.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e512e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e5134.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e5138.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a`;
  #L4e513c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;)V` @kind direct;
  #L4e5142.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` := v1 @kind object;
  #L4e5146.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4e514a.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4e5150.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4e5154.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4e51bc.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e51c2.  v0:= temp;
  #L4e51c4.  if v0 == 0 then goto L4e51ca;
  #L4e51c8.  return @kind void;
  #L4e51ca.  v0:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e51ce.  v1:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e51d2.  v2:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e51d6.  v3:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e51da.  v4:= 1I;
  #L4e51dc.  v5:= 1I;
  #L4e51de.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4e51e2.  v7:= 0I;
  #L4e51e4.  if v6 == 0 then goto L4e51f4;
  #L4e51e8.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e51ee.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4e51f2.  goto L4e52c4;
  #L4e51f4.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int`;
  #L4e51f8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e51fe.  v8:= temp @kind object;
  #L4e5200.  if v8 == 0 then goto L4e522a;
  #L4e5204.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e5208.  if v1 == v8 then goto L4e5218;
  #L4e520c.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e5210.  if v1 != v8 then goto L4e522a;
  #L4e5214.  if v6 != 0 then goto L4e522a;
  #L4e5218.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e521e.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4e5222.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e5228.  return @kind void;
  #L4e522a.  v8:= 0I;
  #L4e522c.  if v6 != 0 then goto L4e52aa;
  #L4e5230.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4e5234.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e523a.  v7:= temp @kind object;
  #L4e523c.  if v7 != 0 then goto L4e5242;
  #L4e5240.  v8:= 1I;
  #L4e5242.  if v6 == 0 then goto L4e5252;
  #L4e5246.  if v8 == 0 then goto L4e5252;
  #L4e524a.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e5250.  return @kind void;
  #L4e5252.  if v8 == 0 then goto L4e5258;
  #L4e5256.  goto L4e52c4;
  #L4e5258.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e525c.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e5262.  v6:= temp @kind object;
  #L4e5264.  v7:= "The mapper returned a null MaybeSource" @kind object;
  #L4e5268.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e526e.  v6:= temp @kind object;
  #L4e5270.  v6:= (`io.reactivex.rxjava3.core.MaybeSource`) v6 @kind object;
  #L4e5274.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v4;
  #L4e5278.  v7:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L4e527c.  call `subscribe`(v6, v7) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4e5282.  goto L4e52c4;
  #L4e5284.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e5286.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e528c.  v4:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5290.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e5296.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e529c.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e52a2.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e52a8.  return @kind void;
  #L4e52aa.  v9:= 2I;
  #L4e52ac.  if v6 != v9 then goto L4e52c4;
  #L4e52b0.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` @kind object;
  #L4e52b4.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4e52b8.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e52be.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v8;
  #L4e52c2.  goto L4e51de;
  #L4e52c4.  v5:= -v5 @kind int;
  #L4e52c6.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e52cc.  v5:= temp;
  #L4e52ce.  if v5 != 0 then goto L4e51de;
  #L4e52d2.  return @kind void;
  catch `java.lang.Throwable` @[L4e5258..L4e5274] goto L4e5284;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4e52f0.  v0:= 0I;
  #L4e52f2.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v0;
  #L4e52f6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e52fc.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e5310.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5314.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e531a.  v2:= temp;
  #L4e531c.  if v2 == 0 then goto L4e5342;
  #L4e5320.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e5324.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e5328.  if v2 == v0 then goto L4e5336;
  #L4e532c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5330.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e5336.  v2:= 0I;
  #L4e5338.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v2;
  #L4e533c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e5342.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4e5354.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v1 @kind object;
  #L4e5358.  v1:= 2I;
  #L4e535a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v1;
  #L4e535e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e5364.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5168.  v0:= 1I;
  #L4e516a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4e516e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5172.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e5178.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L4e517c.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e5182.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5186.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e518c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e5192.  v0:= temp;
  #L4e5194.  if v0 != 0 then goto L4e51a8;
  #L4e5198.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e519c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e51a2.  v0:= 0I;
  #L4e51a4.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v0 @kind object;
  #L4e51a8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5100.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4e5104.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5378.  v0:= 1I;
  #L4e537a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e537e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e5384.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5398.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e539c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e53a2.  v2:= temp;
  #L4e53a4.  if v2 == 0 then goto L4e53ca;
  #L4e53a8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e53ac.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e53b0.  if v2 != v0 then goto L4e53be;
  #L4e53b4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L4e53b8.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e53be.  v2:= 1I;
  #L4e53c0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4e53c4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e53ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e53dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e53e0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e53e6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e53ec.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5400.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5404.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e540a.  v0:= temp;
  #L4e540c.  if v0 == 0 then goto L4e541e;
  #L4e5410.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4e5414.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e5418.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e541e.  return @kind void;
}
