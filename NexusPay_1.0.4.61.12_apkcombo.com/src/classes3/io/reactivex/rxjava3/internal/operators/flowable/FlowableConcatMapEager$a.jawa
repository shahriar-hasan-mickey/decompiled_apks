record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.rxjava3.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bd048.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bd04e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4bd052.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4bd056.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int` := v3;
  #L4bd05a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int` := v4;
  #L4bd05e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v5 @kind object;
  #L4bd062.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bd066.  call temp:= `min`(v4, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4bd06c.  v2:= temp;
  #L4bd06e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bd074.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L4bd078.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4bd07c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4bd082.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4bd086.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4bd08a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4bd090.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4bd094.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bd0e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L4bd0e8.  v1:= 0I;
  #L4bd0ea.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v1 @kind object;
  #L4bd0ee.  if v0 == 0 then goto L4bd0f8;
  #L4bd0f2.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L4bd0f8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bd0fc.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4bd102.  v0:= temp @kind object;
  #L4bd104.  v0:= (`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber`) v0 @kind object;
  #L4bd108.  if v0 == 0 then goto L4bd114;
  #L4bd10c.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L4bd112.  goto L4bd0f8;
  #L4bd114.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4bd398.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bd39e.  v0:= temp;
  #L4bd3a0.  if v0 != 0 then goto L4bd3b6;
  #L4bd3a4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L4bd3aa.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bd3b0.  v0:= temp;
  #L4bd3b2.  if v0 != 0 then goto L4bd3a4;
  #L4bd3b6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd0a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4bd0ac.  if v0 == 0 then goto L4bd0b2;
  #L4bd0b0.  return @kind void;
  #L4bd0b2.  v0:= 1I;
  #L4bd0b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4bd0b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd0bc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bd0c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd0c6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bd0cc.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L4bd0d2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v19 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L4bd128.  v1:= v19 @kind object;
  #L4bd12c.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bd132.  v0:= temp;
  #L4bd134.  if v0 == 0 then goto L4bd13a;
  #L4bd138.  return @kind void;
  #L4bd13a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L4bd13e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd142.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4bd146.  v5:= 1I;
  #L4bd148.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bd14c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4bd152.  v6:= temp @kind wide;
  #L4bd154.  if v0 != 0 then goto L4bd1c0;
  #L4bd158.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4bd15c.  if v3 == v0 then goto L4bd18a;
  #L4bd160.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd164.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd16a.  v0:= temp @kind object;
  #L4bd16c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4bd170.  if v0 == 0 then goto L4bd18a;
  #L4bd174.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L4bd17a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd17e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd182.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bd188.  return @kind void;
  #L4bd18a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` @kind boolean;
  #L4bd18e.  v8:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bd192.  call temp:= `poll`(v8) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4bd198.  v8:= temp @kind object;
  #L4bd19a.  v8:= (`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber`) v8 @kind object;
  #L4bd19e.  if v0 == 0 then goto L4bd1b6;
  #L4bd1a2.  if v8 != 0 then goto L4bd1b6;
  #L4bd1a6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd1aa.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd1ae.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bd1b4.  return @kind void;
  #L4bd1b6.  if v8 == 0 then goto L4bd1c2;
  #L4bd1ba.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v8 @kind object;
  #L4bd1be.  goto L4bd1c2;
  #L4bd1c0.  v8:= v0 @kind object;
  #L4bd1c2.  v9:= 0L;
  #L4bd1c6.  v11:= 0I;
  #L4bd1c8.  if v8 == 0 then goto L4bd326;
  #L4bd1cc.  call temp:= `queue`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4bd1d2.  v12:= temp @kind object;
  #L4bd1d4.  if v12 == 0 then goto L4bd326;
  #L4bd1d8.  v16:= v5;
  #L4bd1dc.  v13:= v9 @kind wide;
  #L4bd1de.  v4:= 1L;
  #L4bd1e2.  v17:= lcmp(v13, v6);
  #L4bd1e6.  if v17 == 0 then goto L4bd2a8;
  #L4bd1ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4bd1ee.  if v0 == 0 then goto L4bd1fa;
  #L4bd1f2.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L4bd1f8.  return @kind void;
  #L4bd1fa.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4bd1fe.  if v3 != v0 then goto L4bd236;
  #L4bd202.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd206.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd20c.  v0:= temp @kind object;
  #L4bd20e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4bd212.  if v0 == 0 then goto L4bd236;
  #L4bd216.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L4bd21a.  call `cancel`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L4bd220.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L4bd226.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd22a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd22e.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bd234.  return @kind void;
  #L4bd236.  call temp:= `isDone`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L4bd23c.  v0:= temp;
  #L4bd23e.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bd244.  v15:= temp @kind object;
  #L4bd246.  if v15 != 0 then goto L4bd250;
  #L4bd24a.  v18:= 1I;
  #L4bd24e.  goto L4bd254;
  #L4bd250.  v18:= 0I;
  #L4bd254.  if v0 == 0 then goto L4bd270;
  #L4bd258.  if v18 == 0 then goto L4bd270;
  #L4bd25c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L4bd260.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd264.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bd26a.  v8:= v11 @kind object;
  #L4bd26c.  v0:= 1I;
  #L4bd26e.  goto L4bd2aa;
  #L4bd270.  if v18 == 0 then goto L4bd276;
  #L4bd274.  goto L4bd2a8;
  #L4bd276.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bd27c.  v13:= v13 + v4 @kind long;
  #L4bd27e.  call `request`(v8, v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.request:(J)V` @kind virtual;
  #L4bd284.  goto L4bd1de;
  #L4bd286.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bd288.  v3:= v0 @kind object;
  #L4bd28a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bd290.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L4bd294.  call `cancel`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L4bd29a.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L4bd2a0.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bd2a6.  return @kind void;
  #L4bd2a8.  v0:= 0I;
  #L4bd2aa.  if v17 != 0 then goto L4bd32e;
  #L4bd2ae.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4bd2b2.  if v15 == 0 then goto L4bd2be;
  #L4bd2b6.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L4bd2bc.  return @kind void;
  #L4bd2be.  v15:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4bd2c2.  if v3 != v15 then goto L4bd2fa;
  #L4bd2c6.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd2ca.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd2d0.  v15:= temp @kind object;
  #L4bd2d2.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L4bd2d6.  if v15 == 0 then goto L4bd2fa;
  #L4bd2da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L4bd2de.  call `cancel`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L4bd2e4.  call `a`(v19) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L4bd2ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd2ee.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd2f2.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bd2f8.  return @kind void;
  #L4bd2fa.  call temp:= `isDone`(v8) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L4bd300.  v15:= temp;
  #L4bd302.  call temp:= `isEmpty`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4bd308.  v12:= temp;
  #L4bd30a.  if v15 == 0 then goto L4bd32e;
  #L4bd30e.  if v12 == 0 then goto L4bd32e;
  #L4bd312.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L4bd316.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd31a.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bd320.  v8:= v11 @kind object;
  #L4bd322.  v0:= 1I;
  #L4bd324.  goto L4bd32e;
  #L4bd326.  v16:= v5;
  #L4bd32a.  v13:= v9 @kind wide;
  #L4bd32c.  v0:= 0I;
  #L4bd32e.  v4:= lcmp(v13, v9);
  #L4bd332.  if v4 == 0 then goto L4bd354;
  #L4bd336.  v4:= 9223372036854775807L;
  #L4bd340.  v9:= lcmp(v6, v4);
  #L4bd344.  if v9 == 0 then goto L4bd354;
  #L4bd348.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bd34c.  v5:= -v13 @kind long;
  #L4bd34e.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4bd354.  if v0 == 0 then goto L4bd362;
  #L4bd358.  v0:= v8 @kind object;
  #L4bd35a.  v5:= v16;
  #L4bd35e.  goto L4bd148;
  #L4bd362.  v4:= v16;
  #L4bd366.  v0:= -v4 @kind int;
  #L4bd368.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bd36e.  v5:= temp;
  #L4bd370.  if v5 != 0 then goto L4bd376;
  #L4bd374.  return @kind void;
  #L4bd376.  v0:= v8 @kind object;
  #L4bd378.  goto L4bd148;
  catch `java.lang.Throwable` @[L4bd23e..L4bd246] goto L4bd286;
}
procedure `void` `innerComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerComplete:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;)V` @AccessFlag PUBLIC {
    temp;

  #L4bd3c8.  call `setDone`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L4bd3ce.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4bd3d4.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd3e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd3ec.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bd3f2.  v3:= temp;
  #L4bd3f4.  if v3 == 0 then goto L4bd41a;
  #L4bd3f8.  call `setDone`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L4bd3fe.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4bd402.  v3:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4bd406.  if v2 == v3 then goto L4bd414;
  #L4bd40a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd40e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bd414.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4bd41a.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerNext:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd42c.  call temp:= `queue`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4bd432.  v0:= temp @kind object;
  #L4bd434.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bd43a.  v3:= temp;
  #L4bd43c.  if v3 == 0 then goto L4bd448;
  #L4bd440.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4bd446.  goto L4bd45e;
  #L4bd448.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L4bd44e.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4bd452.  call `<init>`(v3) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4bd458.  call `innerError`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L4bd45e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd470.  v0:= 1I;
  #L4bd472.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4bd476.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4bd47c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd490.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd494.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bd49a.  v2:= temp;
  #L4bd49c.  if v2 == 0 then goto L4bd4ac;
  #L4bd4a0.  v2:= 1I;
  #L4bd4a2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v2 @kind boolean;
  #L4bd4a6.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4bd4ac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bd4c0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bd4c4.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bd4ca.  v3:= temp @kind object;
  #L4bd4cc.  v0:= "The mapper returned a null Publisher" @kind object;
  #L4bd4d0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bd4d6.  v3:= temp @kind object;
  #L4bd4d8.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L4bd4dc.  v0:= new `io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber`;
  #L4bd4e0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int`;
  #L4bd4e4.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriberSupport;I)V` @kind direct;
  #L4bd4ea.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4bd4ee.  if v1 == 0 then goto L4bd4f4;
  #L4bd4f2.  return @kind void;
  #L4bd4f4.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bd4f8.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bd4fe.  call `subscribe`(v3, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4bd504.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L4bd508.  if v3 == 0 then goto L4bd518;
  #L4bd50c.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L4bd512.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L4bd518.  return @kind void;
  #L4bd51a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bd51c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bd522.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd526.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bd52c.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bd532.  return @kind void;
  catch `java.lang.Throwable` @[L4bd4c0..L4bd4dc] goto L4bd51a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bd550.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd554.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4bd55a.  v0:= temp;
  #L4bd55c.  if v0 == 0 then goto L4bd590;
  #L4bd560.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4bd564.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bd568.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bd56e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int`;
  #L4bd572.  v1:= 2147483647I;
  #L4bd578.  if v0 != v1 then goto L4bd588;
  #L4bd57c.  v0:= 9223372036854775807L;
  #L4bd586.  goto L4bd58a;
  #L4bd588.  v0:= (`long`) v0 @kind i2l;
  #L4bd58a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bd590.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd5a4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4bd5aa.  v0:= temp;
  #L4bd5ac.  if v0 == 0 then goto L4bd5c0;
  #L4bd5b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bd5b4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4bd5ba.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4bd5c0.  return @kind void;
}
