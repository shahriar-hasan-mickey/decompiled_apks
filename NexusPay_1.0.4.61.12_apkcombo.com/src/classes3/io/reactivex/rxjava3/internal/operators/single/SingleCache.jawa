record `io.reactivex.rxjava3.internal.operators.single.SingleCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Single` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `io.reactivex.rxjava3.core.SingleSource` `io.reactivex.rxjava3.internal.operators.single.SingleCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.single.SingleCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.single.SingleCache.d` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.single.SingleCache.e` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L505124.  v0:= 0I;
  #L505126.  v1:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v0];
  #L50512a.  `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] := v1 @kind object;
  #L50512e.  v0:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v0];
  #L505132.  `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] := v0 @kind object;
  #L505136.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v1 @kind this, `io.reactivex.rxjava3.core.SingleSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.<init>:(Lio/reactivex/rxjava3/core/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L505148.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Single;.<init>:()V` @kind direct;
  #L50514e.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleCache.a` @type ^`io.reactivex.rxjava3.core.SingleSource` := v2 @kind object;
  #L505152.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L505156.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L50515c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L505160.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L505164.  v0:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L505168.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50516e.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L505172.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.single.SingleCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.c:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5050d0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5050d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5050da.  v0:= temp @kind object;
  #L5050dc.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L5050e0.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L5050e4.  v2:= 0I;
  #L5050e6.  if v0 != v1 then goto L5050ec;
  #L5050ea.  return v2;
  #L5050ec.  v1:= length @variable v0;
  #L5050ee.  v3:= v1 + 1;
  #L5050f2.  v3:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v3];
  #L5050f6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5050fc.  v3[v1]:= v5 @kind object;
  #L505100.  v1:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L505104.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L50510a.  v0:= temp;
  #L50510c.  if v0 == 0 then goto L5050d0;
  #L505110.  v5:= 1I;
  #L505112.  return v5;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.single.SingleCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.d:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L505240.  v0:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L505244.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50524a.  v0:= temp @kind object;
  #L50524c.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L505250.  v1:= length @variable v0;
  #L505252.  if v1 != 0 then goto L505258;
  #L505256.  return @kind void;
  #L505258.  v2:= -1I;
  #L50525a.  v3:= 0I;
  #L50525c.  v4:= 0I;
  #L50525e.  if v4 >= v1 then goto L505274;
  #L505262.  v5:= v0[v4] @kind object;
  #L505266.  if v5 != v7 then goto L50526e;
  #L50526a.  v2:= v4;
  #L50526c.  goto L505274;
  #L50526e.  v4:= v4 + 1;
  #L505272.  goto L50525e;
  #L505274.  if v2 >= 0 then goto L50527a;
  #L505278.  return @kind void;
  #L50527a.  v4:= 1I;
  #L50527c.  if v1 != v4 then goto L505286;
  #L505280.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.f` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L505284.  goto L5052a4;
  #L505286.  v5:= v1 + -1;
  #L50528a.  v5:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[v5];
  #L50528e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L505294.  v3:= v2 + 1;
  #L505298.  v1:= v1 - v2 @kind int;
  #L50529a.  v1:= v1 - v4 @kind int;
  #L50529c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5052a2.  v1:= v5 @kind object;
  #L5052a4.  v2:= v6.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5052a8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5052ae.  v0:= temp;
  #L5052b0.  if v0 == 0 then goto L505240;
  #L5052b4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L505184.  v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` := v6 @kind object;
  #L505188.  v0:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L50518c.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L505190.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L505196.  v0:= temp @kind object;
  #L505198.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L50519c.  v1:= length @variable v0;
  #L50519e.  v2:= 0I;
  #L5051a0.  if v2 >= v1 then goto L5051c4;
  #L5051a4.  v3:= v0[v2] @kind object;
  #L5051a8.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L5051ae.  v4:= temp;
  #L5051b0.  if v4 != 0 then goto L5051be;
  #L5051b4.  v3:= v3.`io.reactivex.rxjava3.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L5051b8.  call `onError`(v3, v6) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5051be.  v2:= v2 + 1;
  #L5051c2.  goto L5051a0;
  #L5051c4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L5051d8.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5051ec.  v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` := v6 @kind object;
  #L5051f0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5051f4.  v1:= `@@io.reactivex.rxjava3.internal.operators.single.SingleCache.g` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[] @kind object;
  #L5051f8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5051fe.  v0:= temp @kind object;
  #L505200.  v0:= (`io.reactivex.rxjava3.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L505204.  v1:= length @variable v0;
  #L505206.  v2:= 0I;
  #L505208.  if v2 >= v1 then goto L50522c;
  #L50520c.  v3:= v0[v2] @kind object;
  #L505210.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L505216.  v4:= temp;
  #L505218.  if v4 != 0 then goto L505226;
  #L50521c.  v3:= v3.`io.reactivex.rxjava3.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L505220.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L505226.  v2:= v2 + 1;
  #L50522a.  goto L505208;
  #L50522c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.single.SingleCache` v2 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.subscribeActual:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L5052c8.  v0:= new `io.reactivex.rxjava3.internal.operators.single.SingleCache$a`;
  #L5052cc.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/internal/operators/single/SingleCache;)V` @kind direct;
  #L5052d2.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L5052d8.  call temp:= `c`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.c:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)Z` @kind virtual;
  #L5052de.  v1:= temp;
  #L5052e0.  if v1 == 0 then goto L505312;
  #L5052e4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L5052ea.  v3:= temp;
  #L5052ec.  if v3 == 0 then goto L5052f6;
  #L5052f0.  call `d`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleCache;.d:(Lio/reactivex/rxjava3/internal/operators/single/SingleCache$a;)V` @kind virtual;
  #L5052f6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L5052fa.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L505300.  v3:= temp;
  #L505302.  if v3 != 0 then goto L505310;
  #L505306.  v3:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.a` @type ^`io.reactivex.rxjava3.core.SingleSource` @kind object;
  #L50530a.  call `subscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L505310.  return @kind void;
  #L505312.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` @kind object;
  #L505316.  if v0 == 0 then goto L505322;
  #L50531a.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L505320.  goto L50532c;
  #L505322.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` @kind object;
  #L505326.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L50532c.  return @kind void;
}
