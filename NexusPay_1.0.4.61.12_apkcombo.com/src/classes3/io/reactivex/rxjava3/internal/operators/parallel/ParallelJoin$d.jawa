record `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L502898.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L50289e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L5028b0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L5028b6.  v0:= temp;
  #L5028b8.  if v0 == 0 then goto L5028be;
  #L5028bc.  return @kind void;
  #L5028be.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L5028c4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L502a24.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502a28.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L502a2e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L502a34.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L502a48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502a4c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L502a52.  v2:= temp;
  #L502a54.  if v2 == 0 then goto L502a68;
  #L502a58.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502a5c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L502a62.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L502a68.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v6 @kind this, `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.f:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L502a7c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L502a82.  v0:= temp;
  #L502a84.  v1:= "Queue full?!" @kind object;
  #L502a88.  if v0 != 0 then goto L502b40;
  #L502a8c.  v0:= 0I;
  #L502a8e.  v2:= 1I;
  #L502a90.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L502a96.  v0:= temp;
  #L502a98.  if v0 == 0 then goto L502b40;
  #L502a9c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502aa0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L502aa6.  v2:= temp @kind wide;
  #L502aa8.  v4:= 0L;
  #L502aac.  v0:= lcmp(v2, v4);
  #L502ab0.  if v0 == 0 then goto L502af2;
  #L502ab4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L502ab8.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L502abe.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502ac2.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L502ac8.  v0:= temp @kind wide;
  #L502aca.  v2:= 9223372036854775807L;
  #L502ad4.  v8:= lcmp(v0, v2);
  #L502ad8.  if v8 == 0 then goto L502ae6;
  #L502adc.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502ae0.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L502ae6.  v0:= 1L;
  #L502aea.  call `c`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L502af0.  goto L502b32;
  #L502af2.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L502af8.  v0:= temp @kind object;
  #L502afa.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L502b00.  v8:= temp;
  #L502b02.  if v8 != 0 then goto L502b32;
  #L502b06.  call temp:= `a`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L502b0c.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502b10.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L502b14.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L502b1a.  call temp:= `tryAddThrowableOrReport`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L502b20.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502b24.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L502b2a.  call `g`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L502b30.  return @kind void;
  #L502b32.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L502b38.  v7:= temp;
  #L502b3a.  if v7 != 0 then goto L502b86;
  #L502b3e.  return @kind void;
  #L502b40.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L502b46.  v0:= temp @kind object;
  #L502b48.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L502b4e.  v8:= temp;
  #L502b50.  if v8 != 0 then goto L502b78;
  #L502b54.  call temp:= `a`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L502b5a.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502b5e.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L502b62.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L502b68.  call temp:= `tryAddThrowableOrReport`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L502b6e.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502b72.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L502b78.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L502b7e.  v7:= temp;
  #L502b80.  if v7 == 0 then goto L502b86;
  #L502b84.  return @kind void;
  #L502b86.  call `g`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L502b8c.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L5028d8.  v0:= v18 @kind object;
  #L5028dc.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L5028e0.  v2:= length @variable v1;
  #L5028e2.  v3:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L5028e6.  v5:= 1I;
  #L5028e8.  v6:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L5028ec.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L5028f2.  v6:= temp @kind wide;
  #L5028f4.  v8:= 0L;
  #L5028f8.  v10:= v8 @kind wide;
  #L5028fa.  v13:= lcmp(v10, v6);
  #L5028fe.  if v13 == 0 then goto L502986;
  #L502902.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L502906.  if v13 == 0 then goto L502912;
  #L50290a.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L502910.  return @kind void;
  #L502912.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502916.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50291c.  v13:= temp;
  #L50291e.  if v13 != 0 then goto L502926;
  #L502922.  v13:= 1I;
  #L502924.  goto L502928;
  #L502926.  v13:= 0I;
  #L502928.  v14:= 0I;
  #L50292a.  v15:= 1I;
  #L50292c.  if v14 >= v2 then goto L50296e;
  #L502930.  v4:= v1[v14] @kind object;
  #L502934.  v12:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L502938.  if v12 == 0 then goto L502968;
  #L50293c.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L502942.  v12:= temp @kind object;
  #L502944.  if v12 == 0 then goto L502968;
  #L502948.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L50294e.  call `d`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L502954.  v16:= 1L;
  #L502958.  v10:= v10 + v16 @kind long;
  #L50295c.  v4:= lcmp(v10, v6);
  #L502960.  if v4 != 0 then goto L502966;
  #L502964.  goto L502986;
  #L502966.  v15:= 0I;
  #L502968.  v14:= v14 + 1;
  #L50296c.  goto L50292c;
  #L50296e.  if v13 == 0 then goto L502982;
  #L502972.  if v15 == 0 then goto L502982;
  #L502976.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L50297a.  call `tryTerminateConsumer`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L502980.  return @kind void;
  #L502982.  if v15 == 0 then goto L5028fa;
  #L502986.  v4:= lcmp(v10, v6);
  #L50298a.  if v4 != 0 then goto L5029f2;
  #L50298e.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L502992.  if v4 == 0 then goto L50299e;
  #L502996.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L50299c.  return @kind void;
  #L50299e.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L5029a2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5029a8.  v4:= temp;
  #L5029aa.  if v4 != 0 then goto L5029b2;
  #L5029ae.  v4:= 1I;
  #L5029b0.  goto L5029b4;
  #L5029b2.  v4:= 0I;
  #L5029b4.  v6:= 0I;
  #L5029b6.  if v6 >= v2 then goto L5029dc;
  #L5029ba.  v7:= v1[v6] @kind object;
  #L5029be.  v7:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L5029c2.  if v7 == 0 then goto L5029d6;
  #L5029c6.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L5029cc.  v7:= temp;
  #L5029ce.  if v7 != 0 then goto L5029d6;
  #L5029d2.  v12:= 0I;
  #L5029d4.  goto L5029de;
  #L5029d6.  v6:= v6 + 1;
  #L5029da.  goto L5029b6;
  #L5029dc.  v12:= 1I;
  #L5029de.  if v4 == 0 then goto L5029f2;
  #L5029e2.  if v12 == 0 then goto L5029f2;
  #L5029e6.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L5029ea.  call `tryTerminateConsumer`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L5029f0.  return @kind void;
  #L5029f2.  v4:= lcmp(v10, v8);
  #L5029f6.  if v4 == 0 then goto L502a04;
  #L5029fa.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L5029fe.  call temp:= `produced`(v4, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L502a04.  v4:= -v5 @kind int;
  #L502a06.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L502a0c.  v5:= temp;
  #L502a0e.  if v5 != 0 then goto L5028e8;
  #L502a12.  return @kind void;
}
