record `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fc1c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4fc1ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fc1d2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.b` @type ^`long` := v2 @kind wide;
  #L4fc1d6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4fc1da.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4fc1de.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.e` @type ^`boolean` := v6 @kind boolean;
  #L4fc1e2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fc1e6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fc1ec.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4fc1f0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4fc248.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4fc24e.  v0:= temp;
  #L4fc250.  if v0 == 0 then goto L4fc256;
  #L4fc254.  return @kind void;
  #L4fc256.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fc25a.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fc25e.  v2:= 1I;
  #L4fc260.  v3:= 1I;
  #L4fc262.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` @kind boolean;
  #L4fc266.  v5:= 0I;
  #L4fc268.  if v4 == 0 then goto L4fc274;
  #L4fc26c.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4fc272.  return @kind void;
  #L4fc274.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` @kind boolean;
  #L4fc278.  if v4 == 0 then goto L4fc2a0;
  #L4fc27c.  v6:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4fc280.  if v6 == 0 then goto L4fc2a0;
  #L4fc284.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4fc28a.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4fc28e.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fc294.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fc298.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fc29e.  return @kind void;
  #L4fc2a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fc2a6.  v6:= temp @kind object;
  #L4fc2a8.  v7:= 0I;
  #L4fc2aa.  if v6 != 0 then goto L4fc2b2;
  #L4fc2ae.  v6:= 1I;
  #L4fc2b0.  goto L4fc2b4;
  #L4fc2b2.  v6:= 0I;
  #L4fc2b4.  if v4 == 0 then goto L4fc2e4;
  #L4fc2b8.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4fc2be.  v0:= temp @kind object;
  #L4fc2c0.  if v6 != 0 then goto L4fc2d2;
  #L4fc2c4.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.e` @type ^`boolean` @kind boolean;
  #L4fc2c8.  if v2 == 0 then goto L4fc2d2;
  #L4fc2cc.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fc2d2.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fc2d8.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fc2dc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fc2e2.  return @kind void;
  #L4fc2e4.  if v6 == 0 then goto L4fc2fa;
  #L4fc2e8.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L4fc2ec.  if v4 == 0 then goto L4fc30c;
  #L4fc2f0.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` := v7 @kind boolean;
  #L4fc2f4.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v7 @kind boolean;
  #L4fc2f8.  goto L4fc30c;
  #L4fc2fa.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` @kind boolean;
  #L4fc2fe.  if v4 == 0 then goto L4fc31c;
  #L4fc302.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L4fc306.  if v4 == 0 then goto L4fc30c;
  #L4fc30a.  goto L4fc31c;
  #L4fc30c.  v3:= -v3 @kind int;
  #L4fc30e.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4fc314.  v3:= temp;
  #L4fc316.  if v3 != 0 then goto L4fc262;
  #L4fc31a.  return @kind void;
  #L4fc31c.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4fc322.  v4:= temp @kind object;
  #L4fc324.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fc32a.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v7 @kind boolean;
  #L4fc32e.  v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4fc332.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fc336.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.b` @type ^`long` @kind wide;
  #L4fc33a.  v7:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4fc33e.  call temp:= `schedule`(v4, v8, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4fc344.  goto L4fc262;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fc204.  v0:= 1I;
  #L4fc206.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4fc20a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fc20e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fc214.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4fc218.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fc21e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4fc224.  v0:= temp;
  #L4fc226.  if v0 != 0 then goto L4fc236;
  #L4fc22a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fc22e.  v1:= 0I;
  #L4fc230.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4fc236.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fc1b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` @kind boolean;
  #L4fc1b4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fc358.  v0:= 1I;
  #L4fc35a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4fc35e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4fc364.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4fc378.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4fc37c.  v1:= 1I;
  #L4fc37e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` := v1 @kind boolean;
  #L4fc382.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4fc388.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fc39c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fc3a0.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4fc3a6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4fc3ac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fc3c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fc3c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fc3ca.  v0:= temp;
  #L4fc3cc.  if v0 == 0 then goto L4fc3de;
  #L4fc3d0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fc3d4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fc3d8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fc3de.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fc3f0.  v0:= 1I;
  #L4fc3f2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4fc3f6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4fc3fc.  return @kind void;
}
