record `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4db12c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4db132.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4db136.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L4db13a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4db13e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4db144.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4db148.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4db14c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4db152.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4db156.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4db15a.  v2:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4db15e.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4db164.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4db168.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4db198.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4db19e.  v0:= temp;
  #L4db1a0.  if v0 == 0 then goto L4db1a6;
  #L4db1a4.  return @kind void;
  #L4db1a6.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4db1aa.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4db1ae.  v2:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4db1b2.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4db1b8.  v3:= temp;
  #L4db1ba.  v4:= 0I;
  #L4db1bc.  if v3 == 0 then goto L4db1c8;
  #L4db1c0.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4db1c6.  return @kind void;
  #L4db1c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4db1ce.  v3:= temp @kind object;
  #L4db1d0.  if v3 == 0 then goto L4db286;
  #L4db1d4.  v5:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4db1d8.  v6:= 1I;
  #L4db1da.  if v3 == v5 then goto L4db214;
  #L4db1de.  v7:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.f` @type ^`long` @kind wide;
  #L4db1e2.  v5:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4db1e6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4db1ec.  v9:= temp @kind wide;
  #L4db1ee.  v5:= lcmp(v7, v9);
  #L4db1f2.  if v5 == 0 then goto L4db20e;
  #L4db1f6.  v9:= 1L;
  #L4db1fa.  v7:= v7 + v9 @kind long;
  #L4db1fc.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.f` @type ^`long` := v7 @kind wide;
  #L4db200.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4db206.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4db20c.  goto L4db21a;
  #L4db20e.  v3:= 0I;
  #L4db210.  v6:= 0I;
  #L4db212.  goto L4db21a;
  #L4db214.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4db21a.  if v6 == 0 then goto L4db286;
  #L4db21e.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4db224.  v3:= temp;
  #L4db226.  if v3 != 0 then goto L4db286;
  #L4db22a.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4db22e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4db234.  v3:= temp;
  #L4db236.  if v3 == 0 then goto L4db26e;
  #L4db23a.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4db23e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4db244.  v3:= temp @kind object;
  #L4db246.  v4:= "The source Iterator returned a null MaybeSource" @kind object;
  #L4db24a.  call temp:= `requireNonNull`(v3, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4db250.  v3:= temp @kind object;
  #L4db252.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L4db256.  call `subscribe`(v3, v11) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4db25c.  goto L4db286;
  #L4db25e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db260.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4db266.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4db26c.  return @kind void;
  #L4db26e.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4db274.  goto L4db286;
  #L4db276.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4db278.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4db27e.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4db284.  return @kind void;
  #L4db286.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4db28c.  v3:= temp;
  #L4db28e.  if v3 != 0 then goto L4db1b2;
  #L4db292.  return @kind void;
  catch `java.lang.Throwable` @[L4db22a..L4db236] goto L4db276;
  catch `java.lang.Throwable` @[L4db23a..L4db256] goto L4db25e;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db17c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4db180.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4db186.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4db2bc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4db2c0.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4db2c4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4db2ca.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4db2d0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db2e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4db2e8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4db2ee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db300.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4db304.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4db30a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db31c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4db320.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4db326.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4db32c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db340.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4db346.  v0:= temp;
  #L4db348.  if v0 == 0 then goto L4db35c;
  #L4db34c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4db350.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4db356.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4db35c.  return @kind void;
}
