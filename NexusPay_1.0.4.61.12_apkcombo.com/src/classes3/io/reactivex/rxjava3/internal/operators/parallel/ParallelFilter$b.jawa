record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L501628.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L50162e.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L501632.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501644.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L501648.  if v0 != 0 then goto L50165c;
  #L50164c.  v0:= 1I;
  #L50164e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L501652.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L501656.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L50165c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501670.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L501674.  if v0 == 0 then goto L501680;
  #L501678.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L50167e.  return @kind void;
  #L501680.  v0:= 1I;
  #L501682.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L501686.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L50168a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L501690.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5016a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5016a8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L5016ae.  v0:= temp;
  #L5016b0.  if v0 == 0 then goto L5016c2;
  #L5016b4.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L5016b8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L5016bc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L5016c2.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5015cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L5015d0.  v1:= 0I;
  #L5015d2.  if v0 != 0 then goto L501608;
  #L5015d6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L5015da.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L5015e0.  v0:= temp;
  #L5015e2.  if v0 == 0 then goto L501608;
  #L5015e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L5015ea.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L5015f0.  v3:= temp;
  #L5015f2.  return v3;
  #L5015f4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5015f6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5015fc.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @kind virtual;
  #L501602.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L501608.  return v1;
  catch `java.lang.Throwable` @[L5015d6..L5015e2] goto L5015f4;
}
