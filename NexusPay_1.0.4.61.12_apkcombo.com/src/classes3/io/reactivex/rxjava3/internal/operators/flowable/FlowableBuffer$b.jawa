record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.functions.BooleanSupplier` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.j` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.<init>:(Lorg/reactivestreams/Subscriber;IILio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b9590.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b9596.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b959a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int` := v2;
  #L4b959e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int` := v3;
  #L4b95a2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4b95a6.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b95aa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b95b0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b95b4.  v1:= new `java.util.ArrayDeque`;
  #L4b95b8.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4b95be.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4b95c2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b95d4.  v0:= 1I;
  #L4b95d6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4b95da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b95de.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b95e4.  return @kind void;
}
procedure `boolean` `getAsBoolean`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.getAsBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9578.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` @kind boolean;
  #L4b957c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b95f8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L4b95fc.  if v0 == 0 then goto L4b9602;
  #L4b9600.  return @kind void;
  #L4b9602.  v0:= 1I;
  #L4b9604.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4b9608.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L4b960c.  v2:= 0L;
  #L4b9610.  v4:= lcmp(v0, v2);
  #L4b9614.  if v4 == 0 then goto L4b961e;
  #L4b9618.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4b961e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b9622.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4b9626.  call `postComplete`(v0, v1, v5, v5) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.postComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/rxjava3/functions/BooleanSupplier;)V` @kind static;
  #L4b962c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9640.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L4b9644.  if v0 == 0 then goto L4b9650;
  #L4b9648.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b964e.  return @kind void;
  #L4b9650.  v0:= 1I;
  #L4b9652.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4b9656.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4b965a.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4b9660.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b9664.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b966a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b967c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L4b9680.  if v0 == 0 then goto L4b9686;
  #L4b9684.  return @kind void;
  #L4b9686.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4b968a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int`;
  #L4b968e.  v2:= v1 + 1;
  #L4b9692.  if v1 != 0 then goto L4b96d0;
  #L4b9696.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b969a.  call temp:= `get`(v1) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b96a0.  v1:= temp @kind object;
  #L4b96a2.  v3:= "The bufferSupplier returned a null buffer" @kind object;
  #L4b96a6.  call temp:= `requireNonNull`(v1, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b96ac.  v1:= temp @kind object;
  #L4b96ae.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b96b2.  call temp:= `offer`(v0, v1) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b96b8.  goto L4b96d0;
  #L4b96ba.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b96bc.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b96c2.  call `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @kind virtual;
  #L4b96c8.  call `onError`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b96ce.  return @kind void;
  #L4b96d0.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4b96d6.  v1:= temp @kind object;
  #L4b96d8.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b96dc.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4b96e2.  v3:= temp;
  #L4b96e4.  v3:= v3 + 1;
  #L4b96e8.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L4b96ec.  if v3 != v4 then goto L4b9714;
  #L4b96f0.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b96f6.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b96fc.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L4b9700.  v5:= 1L;
  #L4b9704.  v3:= v3 + v5 @kind long;
  #L4b9706.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` := v3 @kind wide;
  #L4b970a.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b970e.  call `onNext`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b9714.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4b971a.  v0:= temp @kind object;
  #L4b971c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b9722.  v1:= temp;
  #L4b9724.  if v1 == 0 then goto L4b973c;
  #L4b9728.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b972e.  v1:= temp @kind object;
  #L4b9730.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b9734.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b973a.  goto L4b971c;
  #L4b973c.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L4b9740.  if v2 != v8 then goto L4b9746;
  #L4b9744.  v2:= 0I;
  #L4b9746.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int` := v2;
  #L4b974a.  return @kind void;
  catch `java.lang.Throwable` @[L4b9696..L4b96b2] goto L4b96ba;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9768.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b976c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b9772.  v0:= temp;
  #L4b9774.  if v0 == 0 then goto L4b9786;
  #L4b9778.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4b977c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b9780.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b9786.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b9798.  call temp:= `validate`(v8) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4b979e.  v0:= temp;
  #L4b97a0.  if v0 == 0 then goto L4b982a;
  #L4b97a4.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b97a8.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4b97ac.  v1:= v8 @kind wide;
  #L4b97ae.  v5:= v7 @kind object;
  #L4b97b0.  v6:= v7 @kind object;
  #L4b97b2.  call temp:= `postCompleteRequest`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/rxjava3/functions/BooleanSupplier;)Z` @kind static;
  #L4b97b8.  v0:= temp;
  #L4b97ba.  if v0 == 0 then goto L4b97c0;
  #L4b97be.  return @kind void;
  #L4b97c0.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b97c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4b97ca.  v0:= temp;
  #L4b97cc.  if v0 != 0 then goto L4b9812;
  #L4b97d0.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b97d4.  v1:= 0I;
  #L4b97d6.  v2:= 1I;
  #L4b97d8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b97de.  v0:= temp;
  #L4b97e0.  if v0 == 0 then goto L4b9812;
  #L4b97e4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L4b97e8.  v0:= (`long`) v0 @kind i2l;
  #L4b97ea.  v2:= 1L;
  #L4b97ee.  v8:= v8 - v2 @kind long;
  #L4b97f0.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4b97f6.  v8:= temp @kind wide;
  #L4b97f8.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L4b97fc.  v0:= (`long`) v0 @kind i2l;
  #L4b97fe.  call temp:= `addCap`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4b9804.  v8:= temp @kind wide;
  #L4b9806.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b980a.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b9810.  goto L4b982a;
  #L4b9812.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L4b9816.  v0:= (`long`) v0 @kind i2l;
  #L4b9818.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4b981e.  v8:= temp @kind wide;
  #L4b9820.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b9824.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b982a.  return @kind void;
}
