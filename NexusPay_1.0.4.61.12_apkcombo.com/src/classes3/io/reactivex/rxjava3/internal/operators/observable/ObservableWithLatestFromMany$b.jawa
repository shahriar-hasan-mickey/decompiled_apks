record `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4fff20.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4fff26.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4fff2a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4fff2e.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[v4];
  #L4fff32.  v3:= 0I;
  #L4fff34.  if v3 >= v4 then goto L4fff4c;
  #L4fff38.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`;
  #L4fff3c.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;I)V` @kind direct;
  #L4fff42.  v2[v3]:= v0 @kind object;
  #L4fff46.  v3:= v3 + 1;
  #L4fff4a.  goto L4fff34;
  #L4fff4c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] := v2 @kind object;
  #L4fff50.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4fff54.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4fff5a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L4fff5e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4fff62.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4fff68.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4fff6c.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4fff70.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4fff76.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4fff7a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4fff8c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L4fff90.  v1:= 0I;
  #L4fff92.  v2:= length @variable v0;
  #L4fff94.  if v1 >= v2 then goto L4fffac;
  #L4fff98.  if v1 == v4 then goto L4fffa6;
  #L4fff9c.  v2:= v0[v1] @kind object;
  #L4fffa0.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4fffa6.  v1:= v1 + 1;
  #L4fffaa.  goto L4fff92;
  #L4fffac.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L4ffff8.  if v2 != 0 then goto L500016;
  #L4ffffc.  v2:= 1I;
  #L4ffffe.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v2 @kind boolean;
  #L500002.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L500008.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L50000c.  v2:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L500010.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L500016.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L500028.  v0:= 1I;
  #L50002a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L50002e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L500032.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L500038.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L50003e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L500042.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L500046.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L50004c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L500060.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L500064.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L50006a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fffc0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4fffc4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4fffca.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L4fffce.  v1:= length @variable v0;
  #L4fffd0.  v2:= 0I;
  #L4fffd2.  if v2 >= v1 then goto L4fffe6;
  #L4fffd6.  v3:= v0[v2] @kind object;
  #L4fffda.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4fffe0.  v2:= v2 + 1;
  #L4fffe4.  goto L4fffd2;
  #L4fffe6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v5 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.e:([Lio/reactivex/rxjava3/core/ObservableSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5001ac.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L5001b0.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5001b4.  v2:= 0I;
  #L5001b6.  if v2 >= v7 then goto L5001f0;
  #L5001ba.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5001c0.  v3:= temp @kind object;
  #L5001c2.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L5001c6.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L5001cc.  v3:= temp;
  #L5001ce.  if v3 != 0 then goto L5001f0;
  #L5001d2.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L5001d6.  if v3 == 0 then goto L5001dc;
  #L5001da.  goto L5001f0;
  #L5001dc.  v3:= v6[v2] @kind object;
  #L5001e0.  v4:= v0[v2] @kind object;
  #L5001e4.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L5001ea.  v2:= v2 + 1;
  #L5001ee.  goto L5001b6;
  #L5001f0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffef4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffef8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ffefe.  v0:= temp @kind object;
  #L4fff00.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4fff04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fff0a.  v0:= temp;
  #L4fff0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50007c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L500080.  if v0 != 0 then goto L5000a0;
  #L500084.  v0:= 1I;
  #L500086.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L50008a.  v0:= -1I;
  #L50008c.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L500092.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L500096.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L50009a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L5000a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5000b4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L5000b8.  if v0 == 0 then goto L5000c4;
  #L5000bc.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5000c2.  return @kind void;
  #L5000c4.  v0:= 1I;
  #L5000c6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L5000ca.  v0:= -1I;
  #L5000cc.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L5000d2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L5000d6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L5000da.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L5000e0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5000f4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L5000f8.  if v0 == 0 then goto L5000fe;
  #L5000fc.  return @kind void;
  #L5000fe.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L500102.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L500108.  v1:= temp;
  #L50010a.  v2:= v1 + 1;
  #L50010e.  v2:= new `java.lang.Object`[v2];
  #L500112.  v3:= 0I;
  #L500114.  v2[v3]:= v5 @kind object;
  #L500118.  if v3 >= v1 then goto L500134;
  #L50011c.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L500122.  v5:= temp @kind object;
  #L500124.  if v5 != 0 then goto L50012a;
  #L500128.  return @kind void;
  #L50012a.  v3:= v3 + 1;
  #L50012e.  v2[v3]:= v5 @kind object;
  #L500132.  goto L500118;
  #L500134.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L500138.  call temp:= `apply`(v5, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50013e.  v5:= temp @kind object;
  #L500140.  v0:= "combiner returned a null value" @kind object;
  #L500144.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L50014a.  v5:= temp @kind object;
  #L50014c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L500150.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L500154.  call `onNext`(v0, v5, v4, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L50015a.  return @kind void;
  #L50015c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50015e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L500164.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @kind virtual;
  #L50016a.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L500170.  return @kind void;
  catch `java.lang.Throwable` @[L500134..L50014c] goto L50015c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromMany$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500190.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L500194.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L50019a.  return @kind void;
}
