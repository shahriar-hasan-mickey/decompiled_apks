record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c39e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c39e6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c39ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c39ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4c39f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int` := v4;
  #L4c39f6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c39fa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c3a00.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4c3a04.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4c3a08.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4c3a0e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4c3a12.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c3a16.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c3a1c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4c3a20.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c3a24.  v2:= 1I;
  #L4c3a26.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4c3a2c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4c3a30.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c3a34.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c3a3a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c3a3e.  return @kind void;
}
procedure `boolean` `a`(`boolean` v0 , `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:(ZLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag STATIC {
    temp;

  #L4c3954.  if v0 == 0 then goto L4c396c;
  #L4c3958.  if v1 == 0 then goto L4c3968;
  #L4c395c.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4c3962.  v0:= temp;
  #L4c3964.  if v0 == 0 then goto L4c396c;
  #L4c3968.  v0:= 1I;
  #L4c396a.  goto L4c396e;
  #L4c396c.  v0:= 0I;
  #L4c396e.  return v0;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4c3a88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3a8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3a92.  v0:= temp @kind object;
  #L4c3a94.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4c3a98.  if v0 == 0 then goto L4c3aa2;
  #L4c3a9c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c3aa2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L4c3ab4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c3aba.  v0:= temp;
  #L4c3abc.  if v0 != 0 then goto L4c3ac6;
  #L4c3ac0.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @kind virtual;
  #L4c3ac6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3a50.  v0:= 1I;
  #L4c3a52.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4c3a56.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3a5a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c3a60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3a64.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c3a6a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3a6e.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c3a74.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4c3ad8.  v0:= v17 @kind object;
  #L4c3adc.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c3ae0.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3ae4.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3ae8.  v4:= 1I;
  #L4c3aea.  v5:= 1I;
  #L4c3aec.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c3af0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c3af6.  v6:= temp @kind wide;
  #L4c3af8.  v8:= 0L;
  #L4c3afc.  v10:= v8 @kind wide;
  #L4c3afe.  v12:= 0I;
  #L4c3b00.  v13:= lcmp(v10, v6);
  #L4c3b04.  if v13 == 0 then goto L4c3baa;
  #L4c3b08.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4c3b0c.  if v14 == 0 then goto L4c3b18;
  #L4c3b10.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4c3b16.  return @kind void;
  #L4c3b18.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4c3b1c.  if v14 != 0 then goto L4c3b46;
  #L4c3b20.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3b24.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3b2a.  v14:= temp @kind object;
  #L4c3b2c.  v14:= (`java.lang.Throwable`) v14 @kind object;
  #L4c3b30.  if v14 == 0 then goto L4c3b46;
  #L4c3b34.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4c3b3a.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3b3e.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c3b44.  return @kind void;
  #L4c3b46.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c3b4c.  v14:= temp;
  #L4c3b4e.  if v14 != 0 then goto L4c3b56;
  #L4c3b52.  v14:= 1I;
  #L4c3b54.  goto L4c3b58;
  #L4c3b56.  v14:= 0I;
  #L4c3b58.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3b5e.  v15:= temp @kind object;
  #L4c3b60.  v15:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v15 @kind object;
  #L4c3b64.  if v15 == 0 then goto L4c3b72;
  #L4c3b68.  call temp:= `poll`(v15) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c3b6e.  v15:= temp @kind object;
  #L4c3b70.  goto L4c3b74;
  #L4c3b72.  v15:= 0I;
  #L4c3b74.  if v15 != 0 then goto L4c3b7e;
  #L4c3b78.  v16:= 1I;
  #L4c3b7c.  goto L4c3b82;
  #L4c3b7e.  v16:= 0I;
  #L4c3b82.  if v14 == 0 then goto L4c3b96;
  #L4c3b86.  if v16 == 0 then goto L4c3b96;
  #L4c3b8a.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3b8e.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c3b94.  return @kind void;
  #L4c3b96.  if v16 == 0 then goto L4c3b9c;
  #L4c3b9a.  goto L4c3baa;
  #L4c3b9c.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3ba2.  v12:= 1L;
  #L4c3ba6.  v10:= v10 + v12 @kind long;
  #L4c3ba8.  goto L4c3afe;
  #L4c3baa.  if v13 != 0 then goto L4c3c30;
  #L4c3bae.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4c3bb2.  if v6 == 0 then goto L4c3bbe;
  #L4c3bb6.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4c3bbc.  return @kind void;
  #L4c3bbe.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4c3bc2.  if v6 != 0 then goto L4c3bec;
  #L4c3bc6.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3bca.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3bd0.  v6:= temp @kind object;
  #L4c3bd2.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4c3bd6.  if v6 == 0 then goto L4c3bec;
  #L4c3bda.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4c3be0.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3be4.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c3bea.  return @kind void;
  #L4c3bec.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c3bf2.  v6:= temp;
  #L4c3bf4.  if v6 != 0 then goto L4c3bfc;
  #L4c3bf8.  v6:= 1I;
  #L4c3bfa.  goto L4c3bfe;
  #L4c3bfc.  v6:= 0I;
  #L4c3bfe.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3c04.  v7:= temp @kind object;
  #L4c3c06.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4c3c0a.  if v7 == 0 then goto L4c3c1a;
  #L4c3c0e.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4c3c14.  v7:= temp;
  #L4c3c16.  if v7 == 0 then goto L4c3c1c;
  #L4c3c1a.  v12:= 1I;
  #L4c3c1c.  if v6 == 0 then goto L4c3c30;
  #L4c3c20.  if v12 == 0 then goto L4c3c30;
  #L4c3c24.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3c28.  call `tryTerminateConsumer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c3c2e.  return @kind void;
  #L4c3c30.  v6:= lcmp(v10, v8);
  #L4c3c34.  if v6 == 0 then goto L4c3c5a;
  #L4c3c38.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c3c3c.  call temp:= `produced`(v6, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c3c42.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4c3c46.  v7:= 2147483647I;
  #L4c3c4c.  if v6 == v7 then goto L4c3c5a;
  #L4c3c50.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3c54.  call `request`(v6, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c3c5a.  v5:= -v5 @kind int;
  #L4c3c5c.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c3c62.  v5:= temp;
  #L4c3c64.  if v5 != 0 then goto L4c3aec;
  #L4c3c68.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.e:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c3980.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3984.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c398a.  v0:= temp @kind object;
  #L4c398c.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4c3990.  if v0 == 0 then goto L4c3996;
  #L4c3994.  return v0 @kind object;
  #L4c3996.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c399a.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4c39a0.  v1:= temp;
  #L4c39a2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c39a8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c39ac.  v2:= 0I;
  #L4c39ae.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c39b4.  v1:= temp;
  #L4c39b6.  if v1 == 0 then goto L4c39bc;
  #L4c39ba.  return v0 @kind object;
  #L4c39bc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c39c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c39c6.  v0:= temp @kind object;
  #L4c39c8.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4c39cc.  return v0 @kind object;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c3c7c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3c80.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c3c86.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c3c8c.  v6:= temp;
  #L4c3c8e.  v0:= 1L;
  #L4c3c92.  v2:= 2147483647I;
  #L4c3c98.  if v6 != 0 then goto L4c3d12;
  #L4c3c9c.  v6:= 0I;
  #L4c3c9e.  v3:= 1I;
  #L4c3ca0.  call temp:= `compareAndSet`(v5, v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c3ca6.  v4:= temp;
  #L4c3ca8.  if v4 == 0 then goto L4c3d12;
  #L4c3cac.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3cb0.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3cb6.  v4:= temp;
  #L4c3cb8.  if v4 != 0 then goto L4c3cbe;
  #L4c3cbc.  v6:= 1I;
  #L4c3cbe.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3cc2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3cc8.  v3:= temp @kind object;
  #L4c3cca.  v3:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v3 @kind object;
  #L4c3cce.  call temp:= `a`(v6, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:(ZLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind static;
  #L4c3cd4.  v6:= temp;
  #L4c3cd6.  if v6 == 0 then goto L4c3cea;
  #L4c3cda.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3cde.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c3ce2.  call `tryTerminateConsumer`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c3ce8.  return @kind void;
  #L4c3cea.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4c3cee.  if v6 == v2 then goto L4c3cfc;
  #L4c3cf2.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3cf6.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c3cfc.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3d02.  v6:= temp;
  #L4c3d04.  if v6 != 0 then goto L4c3d0a;
  #L4c3d08.  return @kind void;
  #L4c3d0a.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @kind virtual;
  #L4c3d10.  goto L4c3d34;
  #L4c3d12.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3d16.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3d1c.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4c3d20.  if v6 == v2 then goto L4c3d2e;
  #L4c3d24.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3d28.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c3d2e.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4c3d34.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c3d48.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3d4c.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c3d52.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3d56.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c3d5c.  v3:= temp;
  #L4c3d5e.  if v3 == 0 then goto L4c3dac;
  #L4c3d62.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4c3d66.  if v3 != 0 then goto L4c3d80;
  #L4c3d6a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3d6e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c3d74.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3d78.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c3d7e.  goto L4c3d9c;
  #L4c3d80.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4c3d84.  v4:= 2147483647I;
  #L4c3d8a.  if v3 == v4 then goto L4c3d9c;
  #L4c3d8e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3d92.  v0:= 1L;
  #L4c3d96.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c3d9c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3da0.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3da6.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4c3dac.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.h:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c3dc0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3dc4.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c3dca.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c3dd0.  v6:= temp;
  #L4c3dd2.  if v6 != 0 then goto L4c3e94;
  #L4c3dd6.  v6:= 0I;
  #L4c3dd8.  v0:= 1I;
  #L4c3dda.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c3de0.  v1:= temp;
  #L4c3de2.  if v1 == 0 then goto L4c3e94;
  #L4c3de6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3dea.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3df0.  v1:= temp;
  #L4c3df2.  if v1 != 0 then goto L4c3df8;
  #L4c3df6.  v6:= 1I;
  #L4c3df8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c3dfc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c3e02.  v0:= temp @kind wide;
  #L4c3e04.  v2:= 0L;
  #L4c3e08.  v4:= lcmp(v0, v2);
  #L4c3e0c.  if v4 == 0 then goto L4c3e6e;
  #L4c3e10.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c3e14.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3e1a.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3e1e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c3e24.  v7:= temp @kind object;
  #L4c3e26.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4c3e2a.  call temp:= `a`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:(ZLio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind static;
  #L4c3e30.  v6:= temp;
  #L4c3e32.  if v6 == 0 then goto L4c3e46;
  #L4c3e36.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3e3a.  v7:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c3e3e.  call `tryTerminateConsumer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c3e44.  return @kind void;
  #L4c3e46.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c3e4a.  v0:= 1L;
  #L4c3e4e.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c3e54.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4c3e58.  v7:= 2147483647I;
  #L4c3e5e.  if v6 == v7 then goto L4c3e80;
  #L4c3e62.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3e66.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c3e6c.  goto L4c3e80;
  #L4c3e6e.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.e:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4c3e74.  v6:= temp @kind object;
  #L4c3e76.  @monitorenter v6
  #L4c3e78.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c3e7e.  @monitorexit v6
  #L4c3e80.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3e86.  v6:= temp;
  #L4c3e88.  if v6 != 0 then goto L4c3ebe;
  #L4c3e8c.  return @kind void;
  #L4c3e8e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c3e90.  @monitorexit v6
  #L4c3e92.  throw v7;
  #L4c3e94.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.e:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4c3e9a.  v6:= temp @kind object;
  #L4c3e9c.  @monitorenter v6
  #L4c3e9e.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c3ea4.  @monitorexit v6
  #L4c3ea6.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3eaa.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3eb0.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c3eb6.  v6:= temp;
  #L4c3eb8.  if v6 == 0 then goto L4c3ebe;
  #L4c3ebc.  return @kind void;
  #L4c3ebe.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()V` @kind virtual;
  #L4c3ec4.  return @kind void;
  #L4c3ec6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c3ec8.  @monitorexit v6
  #L4c3eca.  throw v7;
  catch `java.lang.Throwable` @[L4c3e78..L4c3e80] goto L4c3e8e;
  catch `java.lang.Throwable` @[L4c3e90..L4c3e92] goto L4c3e8e;
  catch `java.lang.Throwable` @[L4c3e9e..L4c3ea6] goto L4c3ec6;
  catch `java.lang.Throwable` @[L4c3ec8..L4c3eca] goto L4c3ec6;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3f04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3f08.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3f0e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4c3f14.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3f28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3f2c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3f32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3f36.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c3f3c.  v2:= temp;
  #L4c3f3e.  if v2 == 0 then goto L4c3f5a;
  #L4c3f42.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4c3f46.  if v2 != 0 then goto L4c3f54;
  #L4c3f4a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3f4e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c3f54.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4c3f5a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3f6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c3f70.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c3f76.  v3:= temp @kind object;
  #L4c3f78.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4c3f7c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c3f82.  v3:= temp @kind object;
  #L4c3f84.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L4c3f88.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c3f8c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c3f92.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a$a`;
  #L4c3f96.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;)V` @kind direct;
  #L4c3f9c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4c3fa0.  if v1 != 0 then goto L4c3fba;
  #L4c3fa4.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3fa8.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c3fae.  v1:= temp;
  #L4c3fb0.  if v1 == 0 then goto L4c3fba;
  #L4c3fb4.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4c3fba.  return @kind void;
  #L4c3fbc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c3fbe.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c3fc4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3fc8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c3fce.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c3fd4.  return @kind void;
  catch `java.lang.Throwable` @[L4c3f6c..L4c3f88] goto L4c3fbc;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3ff4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3ff8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c3ffe.  v0:= temp;
  #L4c4000.  if v0 == 0 then goto L4c403a;
  #L4c4004.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4c4008.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c400c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c4012.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L4c4016.  v1:= 2147483647I;
  #L4c401c.  if v0 != v1 then goto L4c4032;
  #L4c4020.  v0:= 9223372036854775807L;
  #L4c402a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c4030.  goto L4c403a;
  #L4c4032.  v0:= (`long`) v0 @kind i2l;
  #L4c4034.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c403a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c404c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c4052.  v0:= temp;
  #L4c4054.  if v0 == 0 then goto L4c4068;
  #L4c4058.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c405c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c4062.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4c4068.  return @kind void;
}
