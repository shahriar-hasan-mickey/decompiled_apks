record `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cacac.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @kind direct;
  #L4cacb2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4cacb6.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4cad74.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cad78.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cad7c.  v2:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4cad80.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L4cad84.  v6:= 1I;
  #L4cad86.  v7:= 1I;
  #L4cad88.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cad8c.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cad92.  v8:= temp @kind wide;
  #L4cad94.  v10:= lcmp(v2, v8);
  #L4cad98.  if v10 == 0 then goto L4cae26;
  #L4cad9c.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cada0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cada6.  v12:= temp @kind object;
  #L4cada8.  if v12 != 0 then goto L4cadb0;
  #L4cadac.  v13:= 1I;
  #L4cadae.  goto L4cadb2;
  #L4cadb0.  v13:= 0I;
  #L4cadb2.  call temp:= `e`(v14, v11, v13, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4cadb8.  v11:= temp;
  #L4cadba.  if v11 == 0 then goto L4cadc0;
  #L4cadbe.  return @kind void;
  #L4cadc0.  if v13 == 0 then goto L4cadc6;
  #L4cadc4.  goto L4cae26;
  #L4cadc6.  call temp:= `tryOnNext`(v0, v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cadcc.  v10:= temp;
  #L4cadce.  v11:= 1L;
  #L4cadd2.  if v10 == 0 then goto L4cadd8;
  #L4cadd6.  v2:= v2 + v11 @kind long;
  #L4cadd8.  v4:= v4 + v11 @kind long;
  #L4cadda.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L4cadde.  v10:= (`long`) v10 @kind i2l;
  #L4cade0.  v12:= lcmp(v4, v10);
  #L4cade4.  if v12 != 0 then goto L4cad94;
  #L4cade8.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cadec.  call `request`(v10, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cadf2.  v4:= 0L;
  #L4cadf6.  goto L4cad94;
  #L4cadf8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cadfa.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cae00.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v6 @kind boolean;
  #L4cae04.  v3:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cae08.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cae0e.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cae14.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cae1a.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cae1e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cae24.  return @kind void;
  #L4cae26.  if v10 != 0 then goto L4cae44;
  #L4cae2a.  v8:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cae2e.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4cae34.  v9:= temp;
  #L4cae36.  call temp:= `e`(v14, v8, v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4cae3c.  v8:= temp;
  #L4cae3e.  if v8 == 0 then goto L4cae44;
  #L4cae42.  return @kind void;
  #L4cae44.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L4cae48.  v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v4 @kind wide;
  #L4cae4c.  v7:= -v7 @kind int;
  #L4cae4e.  call temp:= `addAndGet`(v14, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cae54.  v7:= temp;
  #L4cae56.  if v7 != 0 then goto L4cad88;
  #L4cae5a.  return @kind void;
  catch `java.lang.Throwable` @[L4cada0..L4cada8] goto L4cadf8;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cae78.  v0:= 1I;
  #L4cae7a.  v1:= 1I;
  #L4cae7c.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4cae80.  if v2 == 0 then goto L4cae86;
  #L4cae84.  return @kind void;
  #L4cae86.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cae8a.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cae8e.  v4:= 0I;
  #L4cae90.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cae96.  if v2 == 0 then goto L4caec8;
  #L4cae9a.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4cae9e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4caea2.  if v0 == 0 then goto L4caeb2;
  #L4caea6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4caeaa.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4caeb0.  goto L4caebc;
  #L4caeb2.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4caeb6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4caebc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4caec0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4caec6.  return @kind void;
  #L4caec8.  v1:= -v1 @kind int;
  #L4caeca.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4caed0.  v1:= temp;
  #L4caed2.  if v1 != 0 then goto L4cae7c;
  #L4caed6.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4caee8.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4caeec.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4caef0.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4caef4.  v4:= 1I;
  #L4caef6.  v5:= 1I;
  #L4caef8.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4caefc.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4caf02.  v6:= temp @kind wide;
  #L4caf04.  v8:= lcmp(v2, v6);
  #L4caf08.  if v8 == 0 then goto L4caf74;
  #L4caf0c.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4caf12.  v8:= temp @kind object;
  #L4caf14.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4caf18.  if v9 == 0 then goto L4caf1e;
  #L4caf1c.  return @kind void;
  #L4caf1e.  if v8 != 0 then goto L4caf38;
  #L4caf22.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4caf26.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4caf2c.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4caf30.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4caf36.  return @kind void;
  #L4caf38.  call temp:= `tryOnNext`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4caf3e.  v8:= temp;
  #L4caf40.  if v8 == 0 then goto L4caf04;
  #L4caf44.  v8:= 1L;
  #L4caf48.  v2:= v2 + v8 @kind long;
  #L4caf4a.  goto L4caf04;
  #L4caf4c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4caf4e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4caf54.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4caf58.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4caf5c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4caf62.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4caf68.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4caf6c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4caf72.  return @kind void;
  #L4caf74.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4caf78.  if v6 == 0 then goto L4caf7e;
  #L4caf7c.  return @kind void;
  #L4caf7e.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4caf84.  v6:= temp;
  #L4caf86.  if v6 == 0 then goto L4cafa0;
  #L4caf8a.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4caf8e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4caf94.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4caf98.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4caf9e.  return @kind void;
  #L4cafa0.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L4cafa4.  v5:= -v5 @kind int;
  #L4cafa6.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cafac.  v5:= temp;
  #L4cafae.  if v5 != 0 then goto L4caef8;
  #L4cafb2.  return @kind void;
  catch `java.lang.Throwable` @[L4caf0c..L4caf14] goto L4caf4c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cacc8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4caccc.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cacd2.  v0:= temp;
  #L4cacd4.  if v0 == 0 then goto L4cad60;
  #L4cacd8.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4cacdc.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4cace0.  if v0 == 0 then goto L4cad38;
  #L4cace4.  v0:= v4 @kind object;
  #L4cace6.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4cacea.  v1:= 7I;
  #L4cacec.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4cacf2.  v1:= temp;
  #L4cacf4.  v2:= 1I;
  #L4cacf6.  if v1 != v2 then goto L4cad12;
  #L4cacfa.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L4cacfe.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cad02.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4cad06.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cad0a.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cad10.  return @kind void;
  #L4cad12.  v2:= 2I;
  #L4cad14.  if v1 != v2 then goto L4cad38;
  #L4cad18.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L4cad1c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cad20.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cad24.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cad2a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4cad2e.  v0:= (`long`) v0 @kind i2l;
  #L4cad30.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cad36.  return @kind void;
  #L4cad38.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4cad3c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4cad40.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4cad46.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cad4a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cad4e.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cad54.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4cad58.  v0:= (`long`) v0 @kind i2l;
  #L4cad5a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cad60.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cac50.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cac54.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cac5a.  v0:= temp @kind object;
  #L4cac5c.  if v0 == 0 then goto L4cac9a;
  #L4cac60.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L4cac64.  v2:= 1I;
  #L4cac66.  if v1 == v2 then goto L4cac9a;
  #L4cac6a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L4cac6e.  v3:= 1L;
  #L4cac72.  v1:= v1 + v3 @kind long;
  #L4cac74.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L4cac78.  v3:= (`long`) v3 @kind i2l;
  #L4cac7a.  v5:= lcmp(v1, v3);
  #L4cac7e.  if v5 != 0 then goto L4cac96;
  #L4cac82.  v3:= 0L;
  #L4cac86.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v3 @kind wide;
  #L4cac8a.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cac8e.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cac94.  goto L4cac9a;
  #L4cac96.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v1 @kind wide;
  #L4cac9a.  return v0 @kind object;
}
