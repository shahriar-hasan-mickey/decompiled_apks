record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c7820.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c7826.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` := v1 @kind object;
  #L4c782a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.b` @type ^`boolean` := v2 @kind boolean;
  #L4c782e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int` := v3;
  #L4c7832.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4c7844.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c784a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c77f8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c77fe.  v0:= temp @kind object;
  #L4c7800.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c7804.  if v0 != v1 then goto L4c780c;
  #L4c7808.  v0:= 1I;
  #L4c780a.  goto L4c780e;
  #L4c780c.  v0:= 0I;
  #L4c780e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c785c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L4c7860.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.b` @type ^`boolean` @kind boolean;
  #L4c7864.  call `e`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;.e:(ZLio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;)V` @kind interface;
  #L4c786a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c787c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L4c7880.  call `c`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;.c:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c7886.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7898.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c789e.  v2:= temp;
  #L4c78a0.  if v2 == 0 then goto L4c78b2;
  #L4c78a4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L4c78a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.b` @type ^`boolean` @kind boolean;
  #L4c78ac.  call `e`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;.e:(ZLio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;)V` @kind interface;
  #L4c78b2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c78c4.  v0:= 9223372036854775807L;
  #L4c78ce.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4c78d4.  return @kind void;
}
