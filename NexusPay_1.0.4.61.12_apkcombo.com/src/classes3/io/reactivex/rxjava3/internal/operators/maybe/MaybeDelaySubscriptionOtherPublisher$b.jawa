record `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a` `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeSource` `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.b` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v1 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4dbecc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dbed2.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a`;
  #L4dbed6.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind direct;
  #L4dbedc.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a` := v0 @kind object;
  #L4dbee0.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` := v3 @kind object;
  #L4dbee4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4dc000.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` @kind object;
  #L4dc004.  v1:= 0I;
  #L4dc006.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` := v1 @kind object;
  #L4dc00a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a` @kind object;
  #L4dc00e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4dc014.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dbef8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dbefc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dbf02.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dbf06.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4dbf0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a` @kind object;
  #L4dbf0e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4dbf14.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dbea0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a` @kind object;
  #L4dbea4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dbeaa.  v0:= temp @kind object;
  #L4dbeac.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4dbeb0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4dbeb6.  v0:= temp;
  #L4dbeb8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dbf28.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dbf2c.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dbf30.  if v0 == v1 then goto L4dbf3e;
  #L4dbf34.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4dbf38.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.a:()V` @kind virtual;
  #L4dbf3e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dbf50.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dbf54.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dbf58.  if v0 == v1 then goto L4dbf70;
  #L4dbf5c.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4dbf60.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a` @kind object;
  #L4dbf64.  v0:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4dbf68.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4dbf6e.  goto L4dbf76;
  #L4dbf70.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dbf76.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dbf88.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dbf8c.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dbf90.  if v2 == v0 then goto L4dbfa8;
  #L4dbf94.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4dbf9a.  v2:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4dbf9e.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4dbfa2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.a:()V` @kind virtual;
  #L4dbfa8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dbfbc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4dbfc0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4dbfc6.  v0:= temp;
  #L4dbfc8.  if v0 == 0 then goto L4dbfee;
  #L4dbfcc.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4dbfd0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a` @kind object;
  #L4dbfd4.  v0:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4dbfd8.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4dbfde.  v0:= 9223372036854775807L;
  #L4dbfe8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4dbfee.  return @kind void;
}
