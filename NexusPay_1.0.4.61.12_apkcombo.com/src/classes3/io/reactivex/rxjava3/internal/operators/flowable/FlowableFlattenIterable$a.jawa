record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c4ab0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4c4ab6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c4aba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c4abe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int` := v3;
  #L4c4ac2.  v1:= v3 ^> 2;
  #L4c4ac6.  v3:= v3 - v1 @kind int;
  #L4c4ac8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int` := v3;
  #L4c4acc.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c4ad0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c4ad6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c4ada.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c4ade.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c4ae4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4c4ae8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4afc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L4c4b00.  if v0 != 0 then goto L4c4b2a;
  #L4c4b04.  v0:= 1I;
  #L4c4b06.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4c4b0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4b0e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c4b14.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c4b1a.  v0:= temp;
  #L4c4b1c.  if v0 != 0 then goto L4c4b2a;
  #L4c4b20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c4b24.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c4b2a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4b3c.  v0:= 0I;
  #L4c4b3e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L4c4b42.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c4b46.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c4b4c.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4c4ba0.  v1:= v18 @kind object;
  #L4c4ba4.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c4baa.  v0:= temp;
  #L4c4bac.  if v0 == 0 then goto L4c4bb2;
  #L4c4bb0.  return @kind void;
  #L4c4bb2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c4bb6.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c4bba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L4c4bbe.  v4:= 0I;
  #L4c4bc0.  v5:= 1I;
  #L4c4bc2.  if v0 == v5 then goto L4c4bca;
  #L4c4bc6.  v0:= 1I;
  #L4c4bc8.  goto L4c4bcc;
  #L4c4bca.  v0:= 0I;
  #L4c4bcc.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L4c4bd0.  v7:= 0I;
  #L4c4bd2.  v8:= 1I;
  #L4c4bd4.  if v6 != 0 then goto L4c4ca0;
  #L4c4bd8.  v9:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4c4bdc.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c4be2.  v10:= temp @kind object;
  #L4c4be4.  if v10 != 0 then goto L4c4bec;
  #L4c4be8.  v11:= 1I;
  #L4c4bea.  goto L4c4bee;
  #L4c4bec.  v11:= 0I;
  #L4c4bee.  call temp:= `e`(v1, v9, v11, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L4c4bf4.  v9:= temp;
  #L4c4bf6.  if v9 == 0 then goto L4c4bfc;
  #L4c4bfa.  return @kind void;
  #L4c4bfc.  if v10 == 0 then goto L4c4ca0;
  #L4c4c00.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c4c04.  call temp:= `apply`(v6, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c4c0a.  v6:= temp @kind object;
  #L4c4c0c.  v6:= (`java.lang.Iterable`) v6 @kind object;
  #L4c4c10.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c4c16.  v6:= temp @kind object;
  #L4c4c18.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c4c1e.  v9:= temp;
  #L4c4c20.  if v9 != 0 then goto L4c4c2e;
  #L4c4c24.  call `f`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L4c4c2a.  v6:= v7 @kind object;
  #L4c4c2c.  goto L4c4bd4;
  #L4c4c2e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v6 @kind object;
  #L4c4c32.  goto L4c4ca0;
  #L4c4c34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c4c36.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4c3c.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4c40.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c4c46.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4c4a.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c4c50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4c54.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c4c5a.  v0:= temp @kind object;
  #L4c4c5c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c4c62.  return @kind void;
  #L4c4c64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c4c66.  v4:= v0 @kind object;
  #L4c4c68.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4c6e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4c72.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c4c78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4c7c.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c4c82.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4c86.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c4c8c.  v0:= temp @kind object;
  #L4c4c8e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L4c4c92.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c4c98.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c4c9e.  return @kind void;
  #L4c4ca0.  if v6 == 0 then goto L4c4de8;
  #L4c4ca4.  v9:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c4ca8.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c4cae.  v9:= temp @kind wide;
  #L4c4cb0.  v11:= 0L;
  #L4c4cb4.  v13:= v11 @kind wide;
  #L4c4cb6.  v15:= lcmp(v13, v9);
  #L4c4cba.  if v15 == 0 then goto L4c4d8c;
  #L4c4cbe.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4c4cc2.  call temp:= `e`(v1, v15, v4, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L4c4cc8.  v15:= temp;
  #L4c4cca.  if v15 == 0 then goto L4c4cd0;
  #L4c4cce.  return @kind void;
  #L4c4cd0.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c4cd6.  v15:= temp @kind object;
  #L4c4cd8.  v5:= "The iterator returned a null value" @kind object;
  #L4c4cdc.  call temp:= `requireNonNull`(v15, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c4ce2.  v5:= temp @kind object;
  #L4c4ce4.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c4cea.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4c4cee.  call temp:= `e`(v1, v5, v4, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L4c4cf4.  v5:= temp;
  #L4c4cf6.  if v5 == 0 then goto L4c4cfc;
  #L4c4cfa.  return @kind void;
  #L4c4cfc.  v16:= 1L;
  #L4c4d00.  v13:= v13 + v16 @kind long;
  #L4c4d04.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c4d0a.  v5:= temp;
  #L4c4d0c.  if v5 != 0 then goto L4c4d1e;
  #L4c4d10.  call `f`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L4c4d16.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L4c4d1a.  v6:= v7 @kind object;
  #L4c4d1c.  goto L4c4d8c;
  #L4c4d1e.  v5:= 1I;
  #L4c4d20.  goto L4c4cb6;
  #L4c4d22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c4d24.  v3:= v0 @kind object;
  #L4c4d26.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4d2c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L4c4d30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4d34.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c4d3a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4d3e.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c4d44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4d48.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c4d4e.  v0:= temp @kind object;
  #L4c4d50.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c4d56.  return @kind void;
  #L4c4d58.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c4d5a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4d60.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L4c4d64.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4d68.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c4d6e.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4d72.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c4d78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4d7c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c4d82.  v0:= temp @kind object;
  #L4c4d84.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c4d8a.  return @kind void;
  #L4c4d8c.  v5:= lcmp(v13, v9);
  #L4c4d90.  if v5 != 0 then goto L4c4dbc;
  #L4c4d94.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4c4d98.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c4d9e.  v15:= temp;
  #L4c4da0.  if v15 == 0 then goto L4c4dac;
  #L4c4da4.  if v6 != 0 then goto L4c4dac;
  #L4c4da8.  v15:= 1I;
  #L4c4daa.  goto L4c4dae;
  #L4c4dac.  v15:= 0I;
  #L4c4dae.  call temp:= `e`(v1, v5, v15, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L4c4db4.  v5:= temp;
  #L4c4db6.  if v5 == 0 then goto L4c4dbc;
  #L4c4dba.  return @kind void;
  #L4c4dbc.  v5:= lcmp(v13, v11);
  #L4c4dc0.  if v5 == 0 then goto L4c4de2;
  #L4c4dc4.  v11:= 9223372036854775807L;
  #L4c4dce.  v5:= lcmp(v9, v11);
  #L4c4dd2.  if v5 == 0 then goto L4c4de2;
  #L4c4dd6.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c4dda.  v9:= -v13 @kind long;
  #L4c4ddc.  call temp:= `addAndGet`(v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c4de2.  if v6 != 0 then goto L4c4de8;
  #L4c4de6.  goto L4c4df8;
  #L4c4de8.  v5:= -v8 @kind int;
  #L4c4dea.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c4df0.  v8:= temp;
  #L4c4df2.  if v8 != 0 then goto L4c4df8;
  #L4c4df6.  return @kind void;
  #L4c4df8.  v5:= 1I;
  #L4c4dfa.  goto L4c4bd4;
  catch `java.lang.Throwable` @[L4c4bdc..L4c4be4] goto L4c4c64;
  catch `java.lang.Throwable` @[L4c4c00..L4c4c20] goto L4c4c34;
  catch `java.lang.Throwable` @[L4c4cd0..L4c4ce4] goto L4c4d58;
  catch `java.lang.Throwable` @[L4c4d04..L4c4d0c] goto L4c4d22;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c4968.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L4c496c.  v1:= 0I;
  #L4c496e.  v2:= 1I;
  #L4c4970.  if v0 == 0 then goto L4c4980;
  #L4c4974.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L4c4978.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c497e.  return v2;
  #L4c4980.  if v4 == 0 then goto L4c49c2;
  #L4c4984.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4988.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c498e.  v4:= temp @kind object;
  #L4c4990.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4c4994.  if v4 == 0 then goto L4c49b6;
  #L4c4998.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c499c.  call temp:= `terminate`(v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c49a2.  v4:= temp @kind object;
  #L4c49a4.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L4c49a8.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c49ae.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c49b4.  return v2;
  #L4c49b6.  if v5 == 0 then goto L4c49c2;
  #L4c49ba.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c49c0.  return v2;
  #L4c49c2.  v4:= 0I;
  #L4c49c4.  return v4;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c4b60.  if v4 == 0 then goto L4c4b8c;
  #L4c4b64.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int`;
  #L4c4b68.  v4:= v4 + 1;
  #L4c4b6c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int`;
  #L4c4b70.  if v4 != v0 then goto L4c4b88;
  #L4c4b74.  v0:= 0I;
  #L4c4b76.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v0;
  #L4c4b7a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4b7e.  v1:= (`long`) v4 @kind i2l;
  #L4c4b80.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c4b86.  goto L4c4b8c;
  #L4c4b88.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v4;
  #L4c4b8c.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c49d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L4c49dc.  if v0 != 0 then goto L4c49f4;
  #L4c49e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c49e4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c49ea.  v0:= temp;
  #L4c49ec.  if v0 == 0 then goto L4c49f4;
  #L4c49f0.  v0:= 1I;
  #L4c49f2.  goto L4c49f6;
  #L4c49f4.  v0:= 0I;
  #L4c49f6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4e3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4c4e40.  if v0 == 0 then goto L4c4e46;
  #L4c4e44.  return @kind void;
  #L4c4e46.  v0:= 1I;
  #L4c4e48.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c4e4c.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L4c4e52.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4e64.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4c4e68.  if v0 != 0 then goto L4c4e8a;
  #L4c4e6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c4e70.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c4e76.  v0:= temp;
  #L4c4e78.  if v0 == 0 then goto L4c4e8a;
  #L4c4e7c.  v2:= 1I;
  #L4c4e7e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4c4e82.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L4c4e88.  goto L4c4e90;
  #L4c4e8a.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c4e90.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4ea4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4c4ea8.  if v0 == 0 then goto L4c4eae;
  #L4c4eac.  return @kind void;
  #L4c4eae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L4c4eb2.  if v0 != 0 then goto L4c4edc;
  #L4c4eb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c4eba.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c4ec0.  v2:= temp;
  #L4c4ec2.  if v2 != 0 then goto L4c4edc;
  #L4c4ec6.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c4eca.  v0:= "Queue is full?!" @kind object;
  #L4c4ece.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c4ed4.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c4eda.  return @kind void;
  #L4c4edc.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L4c4ee2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c4ef4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c4ef8.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c4efe.  v0:= temp;
  #L4c4f00.  if v0 == 0 then goto L4c4f8c;
  #L4c4f04.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4c4f08.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4c4f0c.  if v0 == 0 then goto L4c4f64;
  #L4c4f10.  v0:= v4 @kind object;
  #L4c4f12.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4c4f16.  v1:= 3I;
  #L4c4f18.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4c4f1e.  v1:= temp;
  #L4c4f20.  v2:= 1I;
  #L4c4f22.  if v1 != v2 then goto L4c4f3e;
  #L4c4f26.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L4c4f2a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4c4f2e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4c4f32.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c4f36.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c4f3c.  return @kind void;
  #L4c4f3e.  v2:= 2I;
  #L4c4f40.  if v1 != v2 then goto L4c4f64;
  #L4c4f44.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L4c4f48.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4c4f4c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c4f50.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c4f56.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L4c4f5a.  v0:= (`long`) v0 @kind i2l;
  #L4c4f5c.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c4f62.  return @kind void;
  #L4c4f64.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4c4f68.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L4c4f6c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4c4f72.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4c4f76.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c4f7a.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c4f80.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L4c4f84.  v0:= (`long`) v0 @kind i2l;
  #L4c4f86.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c4f8c.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c4a30.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L4c4a34.  v1:= 0I;
  #L4c4a36.  if v0 != 0 then goto L4c4a78;
  #L4c4a3a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c4a3e.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c4a44.  v0:= temp @kind object;
  #L4c4a46.  if v0 != 0 then goto L4c4a4c;
  #L4c4a4a.  return v1 @kind object;
  #L4c4a4c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c4a50.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c4a56.  v0:= temp @kind object;
  #L4c4a58.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L4c4a5c.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c4a62.  v0:= temp @kind object;
  #L4c4a64.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c4a6a.  v2:= temp;
  #L4c4a6c.  if v2 != 0 then goto L4c4a74;
  #L4c4a70.  v0:= v1 @kind object;
  #L4c4a72.  goto L4c4a36;
  #L4c4a74.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L4c4a78.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c4a7e.  v2:= temp @kind object;
  #L4c4a80.  v3:= "The iterator returned a null value" @kind object;
  #L4c4a84.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c4a8a.  v2:= temp @kind object;
  #L4c4a8c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c4a92.  v0:= temp;
  #L4c4a94.  if v0 != 0 then goto L4c4a9c;
  #L4c4a98.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L4c4a9c.  return v2 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4fa0.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c4fa6.  v0:= temp;
  #L4c4fa8.  if v0 == 0 then goto L4c4fbc;
  #L4c4fac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c4fb0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c4fb6.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L4c4fbc.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4a08.  v0:= 1I;
  #L4c4a0a.  v2:= v2 ^& v0 @kind int;
  #L4c4a0c.  if v2 == 0 then goto L4c4a1a;
  #L4c4a10.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L4c4a14.  if v2 != v0 then goto L4c4a1a;
  #L4c4a18.  return v0;
  #L4c4a1a.  v2:= 0I;
  #L4c4a1c.  return v2;
}
