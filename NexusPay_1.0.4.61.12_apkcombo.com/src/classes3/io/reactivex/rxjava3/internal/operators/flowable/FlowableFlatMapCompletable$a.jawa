record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c31b0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4c31b6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c31ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c31be.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4c31c2.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c31c6.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c31cc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4c31d0.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4c31d4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4c31da.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4c31de.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int` := v4;
  #L4c31e2.  v1:= 1I;
  #L4c31e4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c31ea.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c31fc.  v0:= 1I;
  #L4c31fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c3202.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3206.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c320c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3210.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c3216.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c321a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c3220.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L4c3234.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4c3248.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c324c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c3252.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @kind virtual;
  #L4c3258.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4c326c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3270.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c3276.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c327c.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3170.  v0:= 1I;
  #L4c3172.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c3290.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3296.  v0:= temp;
  #L4c3298.  if v0 != 0 then goto L4c32ac;
  #L4c329c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c32a0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c32a4.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c32aa.  goto L4c32c8;
  #L4c32ac.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L4c32b0.  v1:= 2147483647I;
  #L4c32b6.  if v0 == v1 then goto L4c32c8;
  #L4c32ba.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c32be.  v1:= 1L;
  #L4c32c2.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c32c8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c32dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c32e0.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c32e6.  v3:= temp;
  #L4c32e8.  if v3 == 0 then goto L4c3356;
  #L4c32ec.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` @kind boolean;
  #L4c32f0.  if v3 == 0 then goto L4c332e;
  #L4c32f4.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c32fa.  v3:= temp;
  #L4c32fc.  if v3 != 0 then goto L4c3310;
  #L4c3300.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3304.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c3308.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c330e.  goto L4c3356;
  #L4c3310.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L4c3314.  v0:= 2147483647I;
  #L4c331a.  if v3 == v0 then goto L4c3356;
  #L4c331e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3322.  v0:= 1L;
  #L4c3326.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c332c.  goto L4c3356;
  #L4c332e.  v3:= 1I;
  #L4c3330.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` := v3 @kind boolean;
  #L4c3334.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3338.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c333e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c3342.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c3348.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c334c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c3350.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c3356.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3368.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c336c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c3372.  v3:= temp @kind object;
  #L4c3374.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L4c3378.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c337e.  v3:= temp @kind object;
  #L4c3380.  v3:= (`io.reactivex.rxjava3.core.CompletableSource`) v3 @kind object;
  #L4c3384.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c338a.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a$a`;
  #L4c338e.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;)V` @kind direct;
  #L4c3394.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` @kind boolean;
  #L4c3398.  if v1 != 0 then goto L4c33b2;
  #L4c339c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c33a0.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c33a6.  v1:= temp;
  #L4c33a8.  if v1 == 0 then goto L4c33b2;
  #L4c33ac.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4c33b2.  return @kind void;
  #L4c33b4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c33b6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c33bc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c33c0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c33c6.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c33cc.  return @kind void;
  catch `java.lang.Throwable` @[L4c3368..L4c3384] goto L4c33b4;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c33ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c33f0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c33f6.  v0:= temp;
  #L4c33f8.  if v0 == 0 then goto L4c3432;
  #L4c33fc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4c3400.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c3404.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c340a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L4c340e.  v1:= 2147483647I;
  #L4c3414.  if v0 != v1 then goto L4c342a;
  #L4c3418.  v0:= 9223372036854775807L;
  #L4c3422.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c3428.  goto L4c3432;
  #L4c342a.  v0:= (`long`) v0 @kind i2l;
  #L4c342c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c3432.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c319c.  v0:= 0I;
  #L4c319e.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4c3444.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapCompletable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c3184.  v1:= v1 ^& 2;
  #L4c3188.  return v1;
}
