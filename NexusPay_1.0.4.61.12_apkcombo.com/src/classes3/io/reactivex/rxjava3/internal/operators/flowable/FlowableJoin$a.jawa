record `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c89e4.  v0:= 1I;
  #L4c89e6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c89ec.  v0:= temp @kind object;
  #L4c89ee.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c89f2.  v0:= 2I;
  #L4c89f4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c89fa.  v0:= temp @kind object;
  #L4c89fc.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c8a00.  v0:= 3I;
  #L4c8a02.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c8a08.  v0:= temp @kind object;
  #L4c8a0a.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c8a0e.  v0:= 4I;
  #L4c8a10.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c8a16.  v0:= temp @kind object;
  #L4c8a18.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c8a1c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c8a30.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c8a36.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4c8a3a.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c8a3e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c8a44.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4c8a48.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4c8a4c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4c8a52.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4c8a56.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c8a5a.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4c8a60.  v0:= temp;
  #L4c8a62.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c8a68.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4c8a6c.  v2:= new `java.util.LinkedHashMap`;
  #L4c8a70.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c8a76.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L4c8a7a.  v2:= new `java.util.LinkedHashMap`;
  #L4c8a7e.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c8a84.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L4c8a88.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c8a8c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c8a92.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c8a96.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4c8a9a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4c8a9e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L4c8aa2.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c8aa6.  v3:= 2I;
  #L4c8aa8.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4c8aae.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4c8ab2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c901c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c9020.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c9026.  v0:= temp;
  #L4c9028.  if v0 == 0 then goto L4c903e;
  #L4c902c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c9030.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c9036.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L4c903c.  goto L4c9044;
  #L4c903e.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c9044.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9058.  @monitorenter v1
  #L4c905a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c905e.  if v2 == 0 then goto L4c9068;
  #L4c9062.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c9066.  goto L4c906c;
  #L4c9068.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c906c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c9072.  @monitorexit v1
  #L4c9074.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L4c907a.  return @kind void;
  #L4c907c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c907e.  @monitorexit v1
  #L4c9080.  throw v2;
  catch `java.lang.Throwable` @[L4c905a..L4c9074] goto L4c907c;
  catch `java.lang.Throwable` @[L4c907e..L4c9080] goto L4c907c;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8fc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8fc4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c8fca.  v0:= temp;
  #L4c8fcc.  if v0 == 0 then goto L4c8fd8;
  #L4c8fd0.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L4c8fd6.  goto L4c8fde;
  #L4c8fd8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c8fde.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8ac4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L4c8ac8.  if v0 == 0 then goto L4c8ace;
  #L4c8acc.  return @kind void;
  #L4c8ace.  v0:= 1I;
  #L4c8ad0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L4c8ad4.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4c8ada.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c8ae0.  v0:= temp;
  #L4c8ae2.  if v0 != 0 then goto L4c8af0;
  #L4c8ae6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c8aea.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8af0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8ff0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c8ff4.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c8ffa.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c8ffe.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c9004.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L4c900a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8f70.  @monitorenter v1
  #L4c8f72.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c8f76.  if v2 == 0 then goto L4c8f80;
  #L4c8f7a.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4c8f7e.  goto L4c8f84;
  #L4c8f80.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L4c8f84.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c8f8a.  @monitorexit v1
  #L4c8f8c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L4c8f92.  return @kind void;
  #L4c8f94.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c8f96.  @monitorexit v1
  #L4c8f98.  throw v2;
  catch `java.lang.Throwable` @[L4c8f72..L4c8f8c] goto L4c8f94;
  catch `java.lang.Throwable` @[L4c8f96..L4c8f98] goto L4c8f94;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L4c8b04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c8b08.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c8b0e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4c8b20.  v1:= v17 @kind object;
  #L4c8b24.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c8b2a.  v0:= temp;
  #L4c8b2c.  if v0 == 0 then goto L4c8b32;
  #L4c8b30.  return @kind void;
  #L4c8b32.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c8b36.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c8b3a.  v0:= 1I;
  #L4c8b3c.  v4:= 1I;
  #L4c8b3e.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L4c8b42.  if v5 == 0 then goto L4c8b4e;
  #L4c8b46.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8b4c.  return @kind void;
  #L4c8b4e.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8b52.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c8b58.  v5:= temp @kind object;
  #L4c8b5a.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4c8b5e.  if v5 == 0 then goto L4c8b76;
  #L4c8b62.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8b68.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4c8b6e.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c8b74.  return @kind void;
  #L4c8b76.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c8b7a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c8b80.  v5:= temp;
  #L4c8b82.  v6:= 0I;
  #L4c8b84.  if v5 != 0 then goto L4c8b8c;
  #L4c8b88.  v5:= 1I;
  #L4c8b8a.  goto L4c8b8e;
  #L4c8b8c.  v5:= 0I;
  #L4c8b8e.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c8b94.  v7:= temp @kind object;
  #L4c8b96.  v7:= (`java.lang.Integer`) v7 @kind object;
  #L4c8b9a.  if v7 != 0 then goto L4c8ba2;
  #L4c8b9e.  v8:= 1I;
  #L4c8ba0.  goto L4c8ba4;
  #L4c8ba2.  v8:= 0I;
  #L4c8ba4.  if v5 == 0 then goto L4c8bd2;
  #L4c8ba8.  if v8 == 0 then goto L4c8bd2;
  #L4c8bac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c8bb0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c8bb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c8bba.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c8bc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c8bc4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c8bca.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c8bd0.  return @kind void;
  #L4c8bd2.  if v8 == 0 then goto L4c8be6;
  #L4c8bd6.  v4:= -v4 @kind int;
  #L4c8bd8.  call temp:= `addAndGet`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c8bde.  v4:= temp;
  #L4c8be0.  if v4 != 0 then goto L4c8b3e;
  #L4c8be4.  return @kind void;
  #L4c8be6.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c8bec.  v5:= temp @kind object;
  #L4c8bee.  v8:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c8bf2.  v9:= 1L;
  #L4c8bf6.  v11:= "Could not emit value due to lack of requests" @kind object;
  #L4c8bfa.  v12:= "The resultSelector returned a null value" @kind object;
  #L4c8bfe.  if v7 != v8 then goto L4c8d34;
  #L4c8c02.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.l` @type ^`int`;
  #L4c8c06.  v7:= v6 + 1;
  #L4c8c0a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.l` @type ^`int` := v7;
  #L4c8c0e.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c8c12.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c8c18.  v8:= temp @kind object;
  #L4c8c1a.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8c20.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c8c24.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8c2a.  v7:= temp @kind object;
  #L4c8c2c.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L4c8c30.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c8c36.  v7:= temp @kind object;
  #L4c8c38.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4c8c3c.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L4c8c40.  call `<init>`(v8, v1, v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L4c8c46.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c8c4a.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c8c50.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4c8c56.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8c5a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c8c60.  v6:= temp @kind object;
  #L4c8c62.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4c8c66.  if v6 == 0 then goto L4c8c7e;
  #L4c8c6a.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8c70.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4c8c76.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c8c7c.  return @kind void;
  #L4c8c7e.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c8c82.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c8c88.  v6:= temp @kind wide;
  #L4c8c8a.  v8:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c8c8e.  call temp:= `values`(v8) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c8c94.  v8:= temp @kind object;
  #L4c8c96.  call temp:= `iterator`(v8) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c8c9c.  v8:= temp @kind object;
  #L4c8c9e.  v13:= 0L;
  #L4c8ca2.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c8ca8.  v16:= temp;
  #L4c8caa.  if v16 == 0 then goto L4c8d10;
  #L4c8cae.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c8cb4.  v0:= temp @kind object;
  #L4c8cb6.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c8cba.  call temp:= `apply`(v15, v5, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8cc0.  v0:= temp @kind object;
  #L4c8cc2.  call temp:= `requireNonNull`(v0, v12) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c8cc8.  v0:= temp @kind object;
  #L4c8cca.  v15:= lcmp(v13, v6);
  #L4c8cce.  if v15 == 0 then goto L4c8cde;
  #L4c8cd2.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c8cd8.  v13:= v13 + v9 @kind long;
  #L4c8cda.  v0:= 1I;
  #L4c8cdc.  goto L4c8ca2;
  #L4c8cde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8ce2.  v4:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c8ce6.  call `<init>`(v4, v11) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c8cec.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c8cf2.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8cf8.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4c8cfe.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c8d04.  return @kind void;
  #L4c8d06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c8d08.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c8d0e.  return @kind void;
  #L4c8d10.  v5:= 0L;
  #L4c8d14.  v0:= lcmp(v13, v5);
  #L4c8d18.  if v0 == 0 then goto L4c8ebc;
  #L4c8d1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c8d20.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c8d26.  goto L4c8ebc;
  #L4c8d2a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c8d2c.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c8d32.  return @kind void;
  #L4c8d34.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c8d38.  if v7 != v0 then goto L4c8e6a;
  #L4c8d3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.m` @type ^`int`;
  #L4c8d40.  v7:= v0 + 1;
  #L4c8d44.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.m` @type ^`int` := v7;
  #L4c8d48.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c8d4c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c8d52.  v8:= temp @kind object;
  #L4c8d54.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8d5a.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c8d5e.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8d64.  v7:= temp @kind object;
  #L4c8d66.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L4c8d6a.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c8d70.  v7:= temp @kind object;
  #L4c8d72.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4c8d76.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L4c8d7a.  call `<init>`(v8, v1, v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L4c8d80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c8d84.  call temp:= `add`(v0, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c8d8a.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4c8d90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8d94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c8d9a.  v0:= temp @kind object;
  #L4c8d9c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4c8da0.  if v0 == 0 then goto L4c8db8;
  #L4c8da4.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8daa.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4c8db0.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c8db6.  return @kind void;
  #L4c8db8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c8dbc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c8dc2.  v6:= temp @kind wide;
  #L4c8dc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c8dc8.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c8dce.  v0:= temp @kind object;
  #L4c8dd0.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c8dd6.  v0:= temp @kind object;
  #L4c8dd8.  v13:= 0L;
  #L4c8ddc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c8de2.  v8:= temp;
  #L4c8de4.  if v8 == 0 then goto L4c8e48;
  #L4c8de8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c8dee.  v8:= temp @kind object;
  #L4c8df0.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c8df4.  call temp:= `apply`(v15, v8, v5) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8dfa.  v8:= temp @kind object;
  #L4c8dfc.  call temp:= `requireNonNull`(v8, v12) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c8e02.  v8:= temp @kind object;
  #L4c8e04.  v15:= lcmp(v13, v6);
  #L4c8e08.  if v15 == 0 then goto L4c8e16;
  #L4c8e0c.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c8e12.  v13:= v13 + v9 @kind long;
  #L4c8e14.  goto L4c8ddc;
  #L4c8e16.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8e1a.  v4:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c8e1e.  call `<init>`(v4, v11) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c8e24.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c8e2a.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8e30.  call `f`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4c8e36.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c8e3c.  return @kind void;
  #L4c8e3e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c8e40.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c8e46.  return @kind void;
  #L4c8e48.  v5:= 0L;
  #L4c8e4c.  v0:= lcmp(v13, v5);
  #L4c8e50.  if v0 == 0 then goto L4c8ebc;
  #L4c8e54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c8e58.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c8e5e.  goto L4c8ebc;
  #L4c8e60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c8e62.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c8e68.  return @kind void;
  #L4c8e6a.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4c8e6e.  if v7 != v0 then goto L4c8e98;
  #L4c8e72.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L4c8e76.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c8e7a.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4c8e7e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c8e84.  v6:= temp @kind object;
  #L4c8e86.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8e8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c8e90.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c8e96.  goto L4c8ebc;
  #L4c8e98.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L4c8e9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c8ea0.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4c8ea4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c8eaa.  v6:= temp @kind object;
  #L4c8eac.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c8eb2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c8eb6.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c8ebc.  v0:= 1I;
  #L4c8ebe.  goto L4c8b3e;
  catch `java.lang.Throwable` @[L4c8c20..L4c8c3c] goto L4c8d2a;
  catch `java.lang.Throwable` @[L4c8cb6..L4c8cca] goto L4c8d06;
  catch `java.lang.Throwable` @[L4c8d5a..L4c8d76] goto L4c8e60;
  catch `java.lang.Throwable` @[L4c8df0..L4c8e04] goto L4c8e3e;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c8f04.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8f08.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c8f0e.  v0:= temp @kind object;
  #L4c8f10.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c8f14.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c8f1a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c8f1e.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c8f24.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8f2a.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4c8f3c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c8f42.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c8f46.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c8f4c.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c8f52.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L4c8f58.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c8f5e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c90a8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c90ae.  v0:= temp;
  #L4c90b0.  if v0 == 0 then goto L4c90be;
  #L4c90b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c90b8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c90be.  return @kind void;
}
