record `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.ObservableEmitter` @kind interface {
  `io.reactivex.rxjava3.core.ObservableEmitter` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.rxjava3.core.ObservableEmitter` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/rxjava3/core/ObservableEmitter;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ec9ac.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ec9b2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` := v2 @kind object;
  #L4ec9b6.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ec9ba.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ec9c0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4ec9c4.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4ec9c8.  v0:= 16I;
  #L4ec9cc.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4ec9d2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4ec9d6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ec9e8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ec9ee.  v0:= temp;
  #L4ec9f0.  if v0 != 0 then goto L4ec9fa;
  #L4ec9f4.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L4ec9fa.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4eca0c.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4eca10.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4eca14.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4eca18.  v3:= 1I;
  #L4eca1a.  v4:= 1I;
  #L4eca1c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4eca22.  v5:= temp;
  #L4eca24.  if v5 == 0 then goto L4eca30;
  #L4eca28.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4eca2e.  return @kind void;
  #L4eca30.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eca36.  v5:= temp @kind object;
  #L4eca38.  if v5 == 0 then goto L4eca4a;
  #L4eca3c.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4eca42.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Emitter;)V` @kind virtual;
  #L4eca48.  return @kind void;
  #L4eca4a.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4eca4e.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4eca54.  v6:= temp @kind object;
  #L4eca56.  if v6 != 0 then goto L4eca5e;
  #L4eca5a.  v7:= 1I;
  #L4eca5c.  goto L4eca60;
  #L4eca5e.  v7:= 0I;
  #L4eca60.  if v5 == 0 then goto L4eca70;
  #L4eca64.  if v7 == 0 then goto L4eca70;
  #L4eca68.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Emitter;.onComplete:()V` @kind interface;
  #L4eca6e.  return @kind void;
  #L4eca70.  if v7 == 0 then goto L4eca84;
  #L4eca74.  v4:= -v4 @kind int;
  #L4eca76.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4eca7c.  v4:= temp;
  #L4eca7e.  if v4 != 0 then goto L4eca1c;
  #L4eca82.  return @kind void;
  #L4eca84.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4eca8a.  goto L4eca1c;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec8fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ec900.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4ec906.  v0:= temp;
  #L4ec908.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eca9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4ecaa0.  if v0 != 0 then goto L4ecac2;
  #L4ecaa4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ecaa8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4ecaae.  v0:= temp;
  #L4ecab0.  if v0 == 0 then goto L4ecab6;
  #L4ecab4.  goto L4ecac2;
  #L4ecab6.  v0:= 1I;
  #L4ecab8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4ecabc.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L4ecac2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecad4.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ecada.  v0:= temp;
  #L4ecadc.  if v0 != 0 then goto L4ecae6;
  #L4ecae0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ecae6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ecaf8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4ecafc.  if v0 != 0 then goto L4ecb88;
  #L4ecb00.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ecb04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4ecb0a.  v0:= temp;
  #L4ecb0c.  if v0 == 0 then goto L4ecb12;
  #L4ecb10.  goto L4ecb88;
  #L4ecb12.  if v3 != 0 then goto L4ecb2a;
  #L4ecb16.  v3:= "onNext called with a null value." @kind object;
  #L4ecb1a.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4ecb20.  v3:= temp @kind object;
  #L4ecb22.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ecb28.  return @kind void;
  #L4ecb2a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4ecb30.  v0:= temp;
  #L4ecb32.  if v0 != 0 then goto L4ecb5e;
  #L4ecb36.  v0:= 0I;
  #L4ecb38.  v1:= 1I;
  #L4ecb3a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4ecb40.  v0:= temp;
  #L4ecb42.  if v0 == 0 then goto L4ecb5e;
  #L4ecb46.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ecb4a.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ecb50.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ecb56.  v3:= temp;
  #L4ecb58.  if v3 != 0 then goto L4ecb7a;
  #L4ecb5c.  return @kind void;
  #L4ecb5e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4ecb62.  @monitorenter v0
  #L4ecb64.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ecb6a.  @monitorexit v0
  #L4ecb6c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ecb72.  v3:= temp;
  #L4ecb74.  if v3 == 0 then goto L4ecb7a;
  #L4ecb78.  return @kind void;
  #L4ecb7a.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L4ecb80.  return @kind void;
  #L4ecb82.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecb84.  @monitorexit v0
  #L4ecb86.  throw v3;
  #L4ecb88.  return @kind void;
  catch `java.lang.Throwable` @[L4ecb64..L4ecb6c] goto L4ecb82;
  catch `java.lang.Throwable` @[L4ecb84..L4ecb86] goto L4ecb82;
}
procedure `io.reactivex.rxjava3.core.ObservableEmitter` `serialize`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.serialize:()Lio/reactivex/rxjava3/core/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L4ec978.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecbb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ecbb4.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind interface;
  #L4ecbba.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecbcc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ecbd0.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ecbd6.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec98c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ec990.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ec996.  v0:= temp @kind object;
  #L4ec998.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ec91c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4ec920.  v1:= 0I;
  #L4ec922.  if v0 != 0 then goto L4ec966;
  #L4ec926.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4ec92a.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4ec930.  v0:= temp;
  #L4ec932.  if v0 == 0 then goto L4ec938;
  #L4ec936.  goto L4ec966;
  #L4ec938.  if v3 != 0 then goto L4ec948;
  #L4ec93c.  v3:= "onError called with a null Throwable." @kind object;
  #L4ec940.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4ec946.  v3:= temp @kind object;
  #L4ec948.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ec94c.  call temp:= `tryAddThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ec952.  v3:= temp;
  #L4ec954.  if v3 == 0 then goto L4ec966;
  #L4ec958.  v3:= 1I;
  #L4ec95a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v3 @kind boolean;
  #L4ec95e.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L4ec964.  return v3;
  #L4ec966.  return v1;
}
