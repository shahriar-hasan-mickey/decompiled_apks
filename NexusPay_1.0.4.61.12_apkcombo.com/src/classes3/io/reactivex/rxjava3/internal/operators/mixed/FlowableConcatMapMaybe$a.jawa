record `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e303c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e3042.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4e3046.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e304a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int` := v3;
  #L4e304e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4e3052.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4e3056.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4e305c.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4e3060.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e3064.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e306a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e306e.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a`;
  #L4e3072.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;)V` @kind direct;
  #L4e3078.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` := v1 @kind object;
  #L4e307c.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4e3080.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4e3086.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4e308a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v15 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4e30f0.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e30f6.  v0:= temp;
  #L4e30f8.  if v0 == 0 then goto L4e30fe;
  #L4e30fc.  return @kind void;
  #L4e30fe.  v0:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e3102.  v1:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3106.  v2:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e310a.  v3:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e310e.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e3112.  v5:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int`;
  #L4e3116.  v6:= v5 ^> 1;
  #L4e311a.  v5:= v5 - v6 @kind int;
  #L4e311c.  v6:= 1I;
  #L4e311e.  v7:= 1I;
  #L4e3120.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4e3124.  v9:= 0I;
  #L4e3126.  if v8 == 0 then goto L4e3138;
  #L4e312a.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e3130.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4e3134.  goto L4e324c;
  #L4e3138.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int`;
  #L4e313c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e3142.  v10:= temp @kind object;
  #L4e3144.  if v10 == 0 then goto L4e316e;
  #L4e3148.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e314c.  if v1 == v10 then goto L4e315c;
  #L4e3150.  v10:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3154.  if v1 != v10 then goto L4e316e;
  #L4e3158.  if v8 != 0 then goto L4e316e;
  #L4e315c.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e3162.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4e3166.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e316c.  return @kind void;
  #L4e316e.  v10:= 0I;
  #L4e3170.  if v8 != 0 then goto L4e3212;
  #L4e3174.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` @kind boolean;
  #L4e3178.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e317e.  v9:= temp @kind object;
  #L4e3180.  if v9 != 0 then goto L4e3188;
  #L4e3184.  v11:= 1I;
  #L4e3186.  goto L4e318a;
  #L4e3188.  v11:= 0I;
  #L4e318a.  if v8 == 0 then goto L4e319a;
  #L4e318e.  if v11 == 0 then goto L4e319a;
  #L4e3192.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e3198.  return @kind void;
  #L4e319a.  if v11 == 0 then goto L4e31a0;
  #L4e319e.  goto L4e324c;
  #L4e31a0.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int`;
  #L4e31a4.  v8:= v8 + v6 @kind int;
  #L4e31a6.  if v8 != v5 then goto L4e31bc;
  #L4e31aa.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int` := v10;
  #L4e31ae.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e31b2.  v10:= (`long`) v5 @kind i2l;
  #L4e31b4.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e31ba.  goto L4e31c0;
  #L4e31bc.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int` := v8;
  #L4e31c0.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e31c4.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e31ca.  v8:= temp @kind object;
  #L4e31cc.  v9:= "The mapper returned a null MaybeSource" @kind object;
  #L4e31d0.  call temp:= `requireNonNull`(v8, v9) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e31d6.  v8:= temp @kind object;
  #L4e31d8.  v8:= (`io.reactivex.rxjava3.core.MaybeSource`) v8 @kind object;
  #L4e31dc.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v6;
  #L4e31e0.  v9:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L4e31e4.  call `subscribe`(v8, v9) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4e31ea.  goto L4e324c;
  #L4e31ec.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e31ee.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e31f4.  v4:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e31f8.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e31fe.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e3204.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e320a.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e3210.  return @kind void;
  #L4e3212.  v11:= 2I;
  #L4e3214.  if v8 != v11 then goto L4e324c;
  #L4e3218.  v11:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @type ^`long` @kind wide;
  #L4e321c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4e3222.  v13:= temp @kind wide;
  #L4e3224.  v8:= lcmp(v11, v13);
  #L4e3228.  if v8 == 0 then goto L4e324c;
  #L4e322c.  v8:= v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` @kind object;
  #L4e3230.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L4e3234.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e323a.  v8:= 1L;
  #L4e323e.  v11:= v11 + v8 @kind long;
  #L4e3240.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @type ^`long` := v11 @kind wide;
  #L4e3244.  v15.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v10;
  #L4e3248.  goto L4e3120;
  #L4e324c.  v7:= -v7 @kind int;
  #L4e324e.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e3254.  v7:= temp;
  #L4e3256.  if v7 != 0 then goto L4e3120;
  #L4e325a.  return @kind void;
  catch `java.lang.Throwable` @[L4e31c0..L4e31dc] goto L4e31ec;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4e3278.  v0:= 0I;
  #L4e327a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v0;
  #L4e327e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e3284.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e3298.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e329c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e32a2.  v2:= temp;
  #L4e32a4.  if v2 == 0 then goto L4e32ca;
  #L4e32a8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e32ac.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e32b0.  if v2 == v0 then goto L4e32be;
  #L4e32b4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e32b8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e32be.  v2:= 0I;
  #L4e32c0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v2;
  #L4e32c4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e32ca.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e309c.  v0:= 1I;
  #L4e309e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4e30a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e30a6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e30ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L4e30b0.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e30b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e30ba.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e30c0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e30c6.  v0:= temp;
  #L4e30c8.  if v0 != 0 then goto L4e30dc;
  #L4e30cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e30d0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e30d6.  v0:= 0I;
  #L4e30d8.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v0 @kind object;
  #L4e30dc.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4e32dc.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v1 @kind object;
  #L4e32e0.  v1:= 2I;
  #L4e32e2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v1;
  #L4e32e6.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e32ec.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e3300.  v0:= 1I;
  #L4e3302.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4e3306.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e330c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e3320.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3324.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e332a.  v2:= temp;
  #L4e332c.  if v2 == 0 then goto L4e3352;
  #L4e3330.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3334.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e3338.  if v2 != v0 then goto L4e3346;
  #L4e333c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L4e3340.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e3346.  v2:= 1I;
  #L4e3348.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4e334c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e3352.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e3364.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e3368.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e336e.  v2:= temp;
  #L4e3370.  if v2 != 0 then goto L4e3394;
  #L4e3374.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3378.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e337e.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4e3382.  v0:= "queue full?!" @kind object;
  #L4e3386.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e338c.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e3392.  return @kind void;
  #L4e3394.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e339a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e33ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e33b0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4e33b6.  v0:= temp;
  #L4e33b8.  if v0 == 0 then goto L4e33d6;
  #L4e33bc.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4e33c0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e33c4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4e33ca.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int`;
  #L4e33ce.  v0:= (`long`) v0 @kind i2l;
  #L4e33d0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e33d6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e33e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e33ec.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4e33f2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4e33f8.  return @kind void;
}
