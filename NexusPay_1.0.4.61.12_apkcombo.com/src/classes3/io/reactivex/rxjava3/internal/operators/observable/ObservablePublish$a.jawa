record `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f5814.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f581a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f581e.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f5824.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5838.  v0:= 0I;
  #L4f583a.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f5840.  v0:= temp @kind object;
  #L4f5842.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L4f5846.  if v0 == 0 then goto L4f5850;
  #L4f584a.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L4f5850.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f57f0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f57f6.  v0:= temp @kind object;
  #L4f57f8.  if v0 != 0 then goto L4f5800;
  #L4f57fc.  v0:= 1I;
  #L4f57fe.  goto L4f5802;
  #L4f5800.  v0:= 0I;
  #L4f5802.  return v0;
}
