record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.core.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ebb80.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ebb86.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ebb8a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ebb8e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.d` @type ^`int` := v3;
  #L4ebb92.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a`;
  #L4ebb96.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;)V` @kind direct;
  #L4ebb9c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` := v2 @kind object;
  #L4ebba0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v4 @kind object;
  #L4ebba4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ebc04.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ebc0a.  v0:= temp;
  #L4ebc0c.  if v0 == 0 then goto L4ebc12;
  #L4ebc10.  return @kind void;
  #L4ebc12.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ebc16.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ebc1c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4ebc30.  v0:= 0I;
  #L4ebc32.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4ebc36.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ebc3c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ebbb8.  v0:= 1I;
  #L4ebbba.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4ebbbe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` @kind object;
  #L4ebbc2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b$a;.a:()V` @kind virtual;
  #L4ebbc8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ebbcc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ebbd2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ebbd6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ebbdc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ebbe2.  v0:= temp;
  #L4ebbe4.  if v0 != 0 then goto L4ebbf2;
  #L4ebbe8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ebbec.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ebbf2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ebb68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L4ebb6c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ebc50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ebc54.  if v0 == 0 then goto L4ebc5a;
  #L4ebc58.  return @kind void;
  #L4ebc5a.  v0:= 1I;
  #L4ebc5c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4ebc60.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ebc66.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ebc78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ebc7c.  if v0 == 0 then goto L4ebc88;
  #L4ebc80.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ebc86.  return @kind void;
  #L4ebc88.  v0:= 1I;
  #L4ebc8a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4ebc8e.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @kind virtual;
  #L4ebc94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ebc98.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ebc9e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ebcb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ebcb4.  if v0 == 0 then goto L4ebcba;
  #L4ebcb8.  return @kind void;
  #L4ebcba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @type ^`int`;
  #L4ebcbe.  if v0 != 0 then goto L4ebccc;
  #L4ebcc2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ebcc6.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ebccc.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ebcd2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ebce4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ebce8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ebcee.  v0:= temp;
  #L4ebcf0.  if v0 == 0 then goto L4ebd68;
  #L4ebcf4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4ebcf8.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4ebcfc.  if v0 == 0 then goto L4ebd4c;
  #L4ebd00.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4ebd04.  v0:= 3I;
  #L4ebd06.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4ebd0c.  v0:= temp;
  #L4ebd0e.  v1:= 1I;
  #L4ebd10.  if v0 != v1 then goto L4ebd32;
  #L4ebd14.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @type ^`int` := v0;
  #L4ebd18.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ebd1c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` := v1 @kind boolean;
  #L4ebd20.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ebd24.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ebd2a.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.a:()V` @kind virtual;
  #L4ebd30.  return @kind void;
  #L4ebd32.  v1:= 2I;
  #L4ebd34.  if v0 != v1 then goto L4ebd4c;
  #L4ebd38.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.k` @type ^`int` := v0;
  #L4ebd3c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ebd40.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ebd44.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ebd4a.  return @kind void;
  #L4ebd4c.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4ebd50.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.d` @type ^`int`;
  #L4ebd54.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4ebd5a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ebd5e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ebd62.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ebd68.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ebd7c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L4ebd80.  if v0 == 0 then goto L4ebd90;
  #L4ebd84.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ebd88.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ebd8e.  return @kind void;
  #L4ebd90.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @type ^`boolean` @kind boolean;
  #L4ebd94.  if v0 != 0 then goto L4ebe62;
  #L4ebd98.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4ebd9c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ebda0.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ebda6.  v1:= temp @kind object;
  #L4ebda8.  v2:= 1I;
  #L4ebdaa.  if v1 != 0 then goto L4ebdb2;
  #L4ebdae.  v3:= 1I;
  #L4ebdb0.  goto L4ebdb4;
  #L4ebdb2.  v3:= 0I;
  #L4ebdb4.  if v0 == 0 then goto L4ebdd6;
  #L4ebdb8.  if v3 == 0 then goto L4ebdd6;
  #L4ebdbc.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4ebdc0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ebdc4.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ebdca.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ebdce.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ebdd4.  return @kind void;
  #L4ebdd6.  if v3 != 0 then goto L4ebe62;
  #L4ebdda.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ebdde.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ebde4.  v0:= temp @kind object;
  #L4ebde6.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L4ebdea.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ebdf0.  v0:= temp @kind object;
  #L4ebdf2.  v0:= (`io.reactivex.rxjava3.core.ObservableSource`) v0 @kind object;
  #L4ebdf6.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4ebdfa.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b$a` @kind object;
  #L4ebdfe.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4ebe04.  goto L4ebe62;
  #L4ebe06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ebe08.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ebe0e.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @kind virtual;
  #L4ebe14.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ebe18.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ebe1e.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ebe22.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ebe28.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ebe2c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ebe32.  return @kind void;
  #L4ebe34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ebe36.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ebe3c.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$b;.dispose:()V` @kind virtual;
  #L4ebe42.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ebe46.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ebe4c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ebe50.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ebe56.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ebe5a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ebe60.  return @kind void;
  #L4ebe62.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ebe68.  v0:= temp;
  #L4ebe6a.  if v0 != 0 then goto L4ebd7c;
  #L4ebe6e.  return @kind void;
  catch `java.lang.Throwable` @[L4ebd9c..L4ebda8] goto L4ebe34;
  catch `java.lang.Throwable` @[L4ebdda..L4ebdf6] goto L4ebe06;
}
