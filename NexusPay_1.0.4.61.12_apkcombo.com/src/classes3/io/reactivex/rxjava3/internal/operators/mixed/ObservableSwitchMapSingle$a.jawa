record `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e6194.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`;
  #L4e6198.  v1:= 0I;
  #L4e619a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;)V` @kind direct;
  #L4e61a0.  `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` := v0 @kind object;
  #L4e61a4.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e61b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e61be.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4e61c2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e61c6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4e61ca.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e61ce.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e61d4.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e61d8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e61dc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e61e2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e61e6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e622c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e6230.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L4e6234.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e623a.  v0:= temp @kind object;
  #L4e623c.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v0 @kind object;
  #L4e6240.  if v0 == 0 then goto L4e6252;
  #L4e6244.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L4e6248.  if v0 == v1 then goto L4e6252;
  #L4e624c.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4e6252.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4e6264.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e626a.  v0:= temp;
  #L4e626c.  if v0 == 0 then goto L4e6272;
  #L4e6270.  return @kind void;
  #L4e6272.  v0:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e6276.  v1:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e627a.  v2:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e627e.  v3:= 1I;
  #L4e6280.  v4:= 1I;
  #L4e6282.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4e6286.  if v5 == 0 then goto L4e628c;
  #L4e628a.  return @kind void;
  #L4e628c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e6292.  v5:= temp @kind object;
  #L4e6294.  if v5 == 0 then goto L4e62a8;
  #L4e6298.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4e629c.  if v5 != 0 then goto L4e62a8;
  #L4e62a0.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e62a6.  return @kind void;
  #L4e62a8.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` @kind boolean;
  #L4e62ac.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e62b2.  v6:= temp @kind object;
  #L4e62b4.  v6:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v6 @kind object;
  #L4e62b8.  if v6 != 0 then goto L4e62c0;
  #L4e62bc.  v7:= 1I;
  #L4e62be.  goto L4e62c2;
  #L4e62c0.  v7:= 0I;
  #L4e62c2.  if v5 == 0 then goto L4e62d2;
  #L4e62c6.  if v7 == 0 then goto L4e62d2;
  #L4e62ca.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e62d0.  return @kind void;
  #L4e62d2.  if v7 != 0 then goto L4e62f4;
  #L4e62d6.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e62da.  if v5 != 0 then goto L4e62e0;
  #L4e62de.  goto L4e62f4;
  #L4e62e0.  v5:= 0I;
  #L4e62e2.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e62e8.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e62ec.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e62f2.  goto L4e6282;
  #L4e62f4.  v4:= -v4 @kind int;
  #L4e62f6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e62fc.  v4:= temp;
  #L4e62fe.  if v4 != 0 then goto L4e6282;
  #L4e6302.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e6314.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e6318.  v1:= 0I;
  #L4e631a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e6320.  v3:= temp;
  #L4e6322.  if v3 == 0 then goto L4e6356;
  #L4e6326.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e632a.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e6330.  v3:= temp;
  #L4e6332.  if v3 == 0 then goto L4e635c;
  #L4e6336.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4e633a.  if v3 != 0 then goto L4e634e;
  #L4e633e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e6342.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e6348.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4e634e.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4e6354.  goto L4e635c;
  #L4e6356.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e635c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e61f8.  v0:= 1I;
  #L4e61fa.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e61fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e6202.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e6208.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4e620e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e6212.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e6218.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e617c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4e6180.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6370.  v0:= 1I;
  #L4e6372.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4e6376.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4e637c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6390.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e6394.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e639a.  v2:= temp;
  #L4e639c.  if v2 == 0 then goto L4e63ba;
  #L4e63a0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L4e63a4.  if v2 != 0 then goto L4e63ae;
  #L4e63a8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L4e63ae.  v2:= 1I;
  #L4e63b0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4e63b4.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L4e63ba.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e63cc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e63d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e63d6.  v0:= temp @kind object;
  #L4e63d8.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v0 @kind object;
  #L4e63dc.  if v0 == 0 then goto L4e63e6;
  #L4e63e0.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L4e63e6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e63ea.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e63f0.  v4:= temp @kind object;
  #L4e63f2.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4e63f6.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e63fc.  v4:= temp @kind object;
  #L4e63fe.  v4:= (`io.reactivex.rxjava3.core.SingleSource`) v4 @kind object;
  #L4e6402.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`;
  #L4e6406.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;)V` @kind direct;
  #L4e640c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e6410.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e6416.  v1:= temp @kind object;
  #L4e6418.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v1 @kind object;
  #L4e641c.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L4e6420.  if v1 != v2 then goto L4e6426;
  #L4e6424.  goto L4e643c;
  #L4e6426.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e642a.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e6430.  v1:= temp;
  #L4e6432.  if v1 == 0 then goto L4e640c;
  #L4e6436.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4e643c.  return @kind void;
  #L4e643e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e6440.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e6446.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e644a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e6450.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e6454.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L4e6458.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e645e.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e6464.  return @kind void;
  catch `java.lang.Throwable` @[L4e63e6..L4e6402] goto L4e643e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e6484.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e6488.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e648e.  v0:= temp;
  #L4e6490.  if v0 == 0 then goto L4e64a2;
  #L4e6494.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4e6498.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e649c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e64a2.  return @kind void;
}
