record `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e3a60.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`;
  #L4e3a64.  v1:= 0I;
  #L4e3a66.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;)V` @kind direct;
  #L4e3a6c.  `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` := v0 @kind object;
  #L4e3a70.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e3a84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e3a8a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4e3a8e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e3a92.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4e3a96.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e3a9a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e3aa0.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e3aa4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e3aa8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e3aae.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e3ab2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e3af0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3af4.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L4e3af8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e3afe.  v0:= temp @kind object;
  #L4e3b00.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`) v0 @kind object;
  #L4e3b04.  if v0 == 0 then goto L4e3b16;
  #L4e3b08.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L4e3b0c.  if v0 == v1 then goto L4e3b16;
  #L4e3b10.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e3b16.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.b:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e3b28.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3b2c.  v1:= 0I;
  #L4e3b2e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e3b34.  v3:= temp;
  #L4e3b36.  if v3 == 0 then goto L4e3b50;
  #L4e3b3a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4e3b3e.  if v3 == 0 then goto L4e3b50;
  #L4e3b42.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3b46.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e3b4a.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e3b50.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e3b64.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3b68.  v1:= 0I;
  #L4e3b6a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e3b70.  v3:= temp;
  #L4e3b72.  if v3 == 0 then goto L4e3bc6;
  #L4e3b76.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3b7a.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e3b80.  v3:= temp;
  #L4e3b82.  if v3 == 0 then goto L4e3bcc;
  #L4e3b86.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4e3b8a.  if v3 == 0 then goto L4e3ba6;
  #L4e3b8e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L4e3b92.  if v3 == 0 then goto L4e3bcc;
  #L4e3b96.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3b9a.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e3b9e.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e3ba4.  goto L4e3bcc;
  #L4e3ba6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3baa.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e3bb0.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4e3bb6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3bba.  v4:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e3bbe.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e3bc4.  goto L4e3bcc;
  #L4e3bc6.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e3bcc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e3ac4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3ac8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e3ace.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4e3ad4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3ad8.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e3ade.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e3a34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3a38.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e3a3e.  v0:= temp @kind object;
  #L4e3a40.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L4e3a44.  if v0 != v1 then goto L4e3a4c;
  #L4e3a48.  v0:= 1I;
  #L4e3a4a.  goto L4e3a4e;
  #L4e3a4c.  v0:= 0I;
  #L4e3a4e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e3be0.  v0:= 1I;
  #L4e3be2.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4e3be6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3bea.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e3bf0.  v0:= temp @kind object;
  #L4e3bf2.  if v0 != 0 then goto L4e3c04;
  #L4e3bf6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3bfa.  v1:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e3bfe.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e3c04.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e3c18.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3c1c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e3c22.  v2:= temp;
  #L4e3c24.  if v2 == 0 then goto L4e3c4c;
  #L4e3c28.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4e3c2c.  if v2 == 0 then goto L4e3c38;
  #L4e3c30.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onComplete:()V` @kind virtual;
  #L4e3c36.  goto L4e3c4c;
  #L4e3c38.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L4e3c3e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3c42.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e3c46.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e3c4c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e3c60.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e3c64.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e3c6a.  v4:= temp @kind object;
  #L4e3c6c.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L4e3c70.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e3c76.  v4:= temp @kind object;
  #L4e3c78.  v4:= (`io.reactivex.rxjava3.core.CompletableSource`) v4 @kind object;
  #L4e3c7c.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`;
  #L4e3c80.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;)V` @kind direct;
  #L4e3c86.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3c8a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e3c90.  v1:= temp @kind object;
  #L4e3c92.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`) v1 @kind object;
  #L4e3c96.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L4e3c9a.  if v1 != v2 then goto L4e3ca0;
  #L4e3c9e.  goto L4e3cc0;
  #L4e3ca0.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3ca4.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e3caa.  v2:= temp;
  #L4e3cac.  if v2 == 0 then goto L4e3c86;
  #L4e3cb0.  if v1 == 0 then goto L4e3cba;
  #L4e3cb4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e3cba.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4e3cc0.  return @kind void;
  #L4e3cc2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e3cc4.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e3cca.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3cce.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e3cd4.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e3cda.  return @kind void;
  catch `java.lang.Throwable` @[L4e3c60..L4e3c7c] goto L4e3cc2;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e3cf8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3cfc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4e3d02.  v0:= temp;
  #L4e3d04.  if v0 == 0 then goto L4e3d26;
  #L4e3d08.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4e3d0c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e3d10.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e3d16.  v0:= 9223372036854775807L;
  #L4e3d20.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e3d26.  return @kind void;
}
