record `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50902c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L509032.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L509036.  v1:= new `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b`;
  #L50903a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;)V` @kind direct;
  #L509040.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` := v1 @kind object;
  #L509044.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L50912c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L509132.  v0:= temp @kind object;
  #L509134.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L509138.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L50913c.  if v0 == v1 then goto L50916a;
  #L509140.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L509146.  v0:= temp @kind object;
  #L509148.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L50914c.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L509150.  if v0 == v1 then goto L50916a;
  #L509154.  if v0 == 0 then goto L50915e;
  #L509158.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L50915e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L509162.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L509168.  return @kind void;
  #L50916a.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L509170.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509058.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L50905e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L509062.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L509068.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509004.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50900a.  v0:= temp @kind object;
  #L50900c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L509010.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L509016.  v0:= temp;
  #L509018.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50907c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L509080.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L509086.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L50908c.  v0:= temp @kind object;
  #L50908e.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L509092.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L509096.  if v0 == v1 then goto L5090ba;
  #L50909a.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5090a0.  v0:= temp @kind object;
  #L5090a2.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L5090a6.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L5090aa.  if v0 == v1 then goto L5090ba;
  #L5090ae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L5090b2.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5090b8.  return @kind void;
  #L5090ba.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5090c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L5090d4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L5090da.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5090ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L5090f0.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L5090f6.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L5090fa.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L509100.  v0:= temp @kind object;
  #L509102.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L509106.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L50910a.  if v0 == v1 then goto L509118;
  #L50910e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L509112.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L509118.  return @kind void;
}
