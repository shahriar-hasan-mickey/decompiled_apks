record `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f6148.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4f614e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f6152.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L4f6156.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` := v4 @kind wide;
  #L4f615a.  return @kind void;
}
procedure `java.lang.Long` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f60ec.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L4f60f0.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4f60f4.  v4:= lcmp(v0, v2);
  #L4f60f8.  if v4 == 0 then goto L4f6110;
  #L4f60fc.  v2:= 1L;
  #L4f6100.  v2:= v2 + v0 @kind long;
  #L4f6102.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L4f6106.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4f610c.  v0:= temp @kind object;
  #L4f610e.  return v0 @kind object;
  #L4f6110.  v0:= 1I;
  #L4f6112.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f6118.  v0:= 0I;
  #L4f611a.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f616c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4f6170.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v0 @kind wide;
  #L4f6174.  v0:= 1I;
  #L4f6176.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f617c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6190.  v0:= 1I;
  #L4f6192.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4f6198.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f607c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f6082.  v0:= temp;
  #L4f6084.  if v0 == 0 then goto L4f608c;
  #L4f6088.  v0:= 1I;
  #L4f608a.  goto L4f608e;
  #L4f608c.  v0:= 0I;
  #L4f608e.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f60a0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L4f60a4.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4f60a8.  v4:= lcmp(v0, v2);
  #L4f60ac.  if v4 != 0 then goto L4f60b4;
  #L4f60b0.  v0:= 1I;
  #L4f60b2.  goto L4f60b6;
  #L4f60b4.  v0:= 0I;
  #L4f60b6.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4f612c.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @kind virtual;
  #L4f6132.  v0:= temp @kind object;
  #L4f6134.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f60c8.  v0:= 1I;
  #L4f60ca.  v2:= v2 ^& v0 @kind int;
  #L4f60cc.  if v2 == 0 then goto L4f60d6;
  #L4f60d0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4f60d4.  return v0;
  #L4f60d6.  v2:= 0I;
  #L4f60d8.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f61ac.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` @kind boolean;
  #L4f61b0.  if v0 == 0 then goto L4f61b6;
  #L4f61b4.  return @kind void;
  #L4f61b6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f61ba.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4f61be.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L4f61c2.  v5:= lcmp(v3, v1);
  #L4f61c6.  if v5 == 0 then goto L4f61ec;
  #L4f61ca.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f61d0.  v5:= temp;
  #L4f61d2.  if v5 != 0 then goto L4f61ec;
  #L4f61d6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4f61dc.  v5:= temp @kind object;
  #L4f61de.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f61e4.  v5:= 1L;
  #L4f61e8.  v3:= v3 + v5 @kind long;
  #L4f61ea.  goto L4f61c2;
  #L4f61ec.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f61f2.  v1:= temp;
  #L4f61f4.  if v1 != 0 then goto L4f6206;
  #L4f61f8.  v1:= 1I;
  #L4f61fa.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f6200.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f6206.  return @kind void;
}
