record `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchIfEmpty$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4faba4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fabaa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fabae.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4fabb2.  v1:= 1I;
  #L4fabb4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` := v1 @kind boolean;
  #L4fabb8.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4fabbc.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4fabc2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4fabc6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchIfEmpty$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fabd8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L4fabdc.  if v0 == 0 then goto L4fabf2;
  #L4fabe0.  v0:= 0I;
  #L4fabe2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4fabe6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4fabea.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4fabf0.  goto L4fabfc;
  #L4fabf2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fabf6.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fabfc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchIfEmpty$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fac10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fac14.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fac1a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchIfEmpty$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fac2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L4fac30.  if v0 == 0 then goto L4fac3a;
  #L4fac34.  v0:= 0I;
  #L4fac36.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4fac3a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fac3e.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fac44.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSwitchIfEmpty$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fac58.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4fac5c.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4fac62.  return @kind void;
}
