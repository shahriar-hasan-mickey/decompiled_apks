record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` v0 @kind this, `io.reactivex.rxjava3.functions.Function` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.core.Scheduler$Worker` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bd708.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bd70e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v1 @kind object;
  #L4bd712.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.c` @type ^`int` := v2;
  #L4bd716.  v1:= v2 ^> 2;
  #L4bd71a.  v2:= v2 - v1 @kind int;
  #L4bd71c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.d` @type ^`int` := v2;
  #L4bd720.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e`;
  #L4bd724.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;)V` @kind direct;
  #L4bd72a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` := v1 @kind object;
  #L4bd72e.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4bd732.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4bd738.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4bd73c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v3 @kind object;
  #L4bd740.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bd754.  v0:= 0I;
  #L4bd756.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v0 @kind boolean;
  #L4bd75a.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.d:()V` @kind virtual;
  #L4bd760.  return @kind void;
}
procedure `void` `d`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.d:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4bd774.  v0:= 1I;
  #L4bd776.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4bd77a.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.d:()V` @kind virtual;
  #L4bd780.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4bd794.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @type ^`int`;
  #L4bd798.  v1:= 2I;
  #L4bd79a.  if v0 == v1 then goto L4bd7ce;
  #L4bd79e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bd7a2.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bd7a8.  v3:= temp;
  #L4bd7aa.  if v3 != 0 then goto L4bd7ce;
  #L4bd7ae.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd7b2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bd7b8.  v3:= new `java.lang.IllegalStateException`;
  #L4bd7bc.  v0:= "Queue full?!" @kind object;
  #L4bd7c0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bd7c6.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bd7cc.  return @kind void;
  #L4bd7ce.  call `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.d:()V` @kind virtual;
  #L4bd7d4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4bd7e8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bd7ec.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4bd7f2.  v0:= temp;
  #L4bd7f4.  if v0 == 0 then goto L4bd87a;
  #L4bd7f8.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4bd7fc.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4bd800.  if v0 == 0 then goto L4bd856;
  #L4bd804.  v0:= v4 @kind object;
  #L4bd806.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4bd80a.  v1:= 7I;
  #L4bd80c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4bd812.  v1:= temp;
  #L4bd814.  v2:= 1I;
  #L4bd816.  if v1 != v2 then goto L4bd834;
  #L4bd81a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @type ^`int` := v1;
  #L4bd81e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4bd822.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` := v2 @kind boolean;
  #L4bd826.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.e:()V` @kind virtual;
  #L4bd82c.  call `d`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.d:()V` @kind virtual;
  #L4bd832.  return @kind void;
  #L4bd834.  v2:= 2I;
  #L4bd836.  if v1 != v2 then goto L4bd856;
  #L4bd83a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @type ^`int` := v1;
  #L4bd83e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4bd842.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.e:()V` @kind virtual;
  #L4bd848.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.c` @type ^`int`;
  #L4bd84c.  v0:= (`long`) v0 @kind i2l;
  #L4bd84e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bd854.  return @kind void;
  #L4bd856.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4bd85a.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.c` @type ^`int`;
  #L4bd85e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4bd864.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4bd868.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.e:()V` @kind virtual;
  #L4bd86e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.c` @type ^`int`;
  #L4bd872.  v0:= (`long`) v0 @kind i2l;
  #L4bd874.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bd87a.  return @kind void;
}
