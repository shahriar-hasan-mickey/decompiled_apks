record `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e4a08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e4a0e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4e4a12.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e4a16.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4e4a1a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4e4a20.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4e4a24.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4a38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e4a3c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e4a42.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e4a48.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4a5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e4a60.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4e4a66.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4a78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e4a7c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e4a82.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4a94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e4a98.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e4a9e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4ab0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e4ab4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e4aba.  v0:= temp;
  #L4e4abc.  if v0 == 0 then goto L4e4ace;
  #L4e4ac0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4e4ac4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e4ac8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4e4ace.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4ae0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e4ae4.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4e4aea.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e4afc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e4b00.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e4b06.  v3:= temp @kind object;
  #L4e4b08.  v0:= "The mapper returned a null Publisher" @kind object;
  #L4e4b0c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e4b12.  v3:= temp @kind object;
  #L4e4b14.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L4e4b18.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e4b1e.  v0:= temp @kind object;
  #L4e4b20.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4e4b24.  if v0 == v1 then goto L4e4b2e;
  #L4e4b28.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4e4b2e.  return @kind void;
  #L4e4b30.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e4b32.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e4b38.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e4b3c.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e4b42.  return @kind void;
  catch `java.lang.Throwable` @[L4e4afc..L4e4b18] goto L4e4b30;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4b60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e4b64.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4e4b6a.  return @kind void;
}
