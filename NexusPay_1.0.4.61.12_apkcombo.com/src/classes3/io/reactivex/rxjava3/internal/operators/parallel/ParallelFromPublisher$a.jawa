record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLongArray` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @AccessFlag FINAL;
  `long`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.l` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.<init>:([Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L50204c.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L502052.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L502056.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L50205c.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L502060.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] := v4 @kind object;
  #L502064.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int` := v5;
  #L502068.  v0:= v5 ^> 2;
  #L50206c.  v5:= v5 - v0 @kind int;
  #L50206e.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int` := v5;
  #L502072.  v4:= length @variable v4;
  #L502074.  v5:= new `java.util.concurrent.atomic.AtomicLongArray`;
  #L502078.  v0:= v4 + v4 @kind int;
  #L50207c.  v1:= v0 + 1;
  #L502080.  call `<init>`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.<init>:(I)V` @kind direct;
  #L502086.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` := v5 @kind object;
  #L50208a.  v1:= (`long`) v4 @kind i2l;
  #L50208c.  call `lazySet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.lazySet:(IJ)V` @kind virtual;
  #L502092.  v4:= new `long`[v4];
  #L502096.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] := v4 @kind object;
  #L50209a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5020ac.  v0:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L5020b0.  call temp:= `decrementAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.decrementAndGet:(I)J` @kind virtual;
  #L5020b6.  v0:= temp @kind wide;
  #L5020b8.  v2:= 0L;
  #L5020bc.  v5:= lcmp(v0, v2);
  #L5020c0.  if v5 != 0 then goto L5020ea;
  #L5020c4.  v5:= 1I;
  #L5020c6.  v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` := v5 @kind boolean;
  #L5020ca.  v5:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5020ce.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L5020d4.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L5020da.  v5:= temp;
  #L5020dc.  if v5 != 0 then goto L5020ea;
  #L5020e0.  v5:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L5020e4.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L5020ea.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L5020fc.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L502102.  v0:= temp;
  #L502104.  if v0 == 0 then goto L50210a;
  #L502108.  return @kind void;
  #L50210a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L50210e.  v1:= 1I;
  #L502110.  if v0 != v1 then goto L50211c;
  #L502114.  call `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @kind virtual;
  #L50211a.  goto L502122;
  #L50211c.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @kind virtual;
  #L502122.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v19 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L502134.  v1:= v19 @kind object;
  #L502138.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L50213c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L502140.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L502144.  v4:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L502148.  v5:= length @variable v4;
  #L50214a.  v6:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L50214e.  v7:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int`;
  #L502152.  v8:= 1I;
  #L502154.  v9:= 1I;
  #L502156.  v10:= 0I;
  #L502158.  v11:= 0I;
  #L50215a.  v12:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L50215e.  if v12 == 0 then goto L50216a;
  #L502162.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L502168.  return @kind void;
  #L50216a.  v12:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` @kind boolean;
  #L50216e.  if v12 == 0 then goto L502198;
  #L502172.  v13:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` @kind object;
  #L502176.  if v13 == 0 then goto L502198;
  #L50217a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L502180.  v0:= length @variable v2;
  #L502182.  if v10 >= v0 then goto L502196;
  #L502186.  v3:= v2[v10] @kind object;
  #L50218a.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L502190.  v10:= v10 + 1;
  #L502194.  goto L502182;
  #L502196.  return @kind void;
  #L502198.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L50219e.  v13:= temp;
  #L5021a0.  if v12 == 0 then goto L5021c0;
  #L5021a4.  if v13 == 0 then goto L5021c0;
  #L5021a8.  v0:= length @variable v2;
  #L5021aa.  if v10 >= v0 then goto L5021be;
  #L5021ae.  v3:= v2[v10] @kind object;
  #L5021b2.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L5021b8.  v10:= v10 + 1;
  #L5021bc.  goto L5021aa;
  #L5021be.  return @kind void;
  #L5021c0.  if v13 == 0 then goto L5021c6;
  #L5021c4.  goto L50226e;
  #L5021c6.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L5021cc.  v12:= temp @kind wide;
  #L5021ce.  v14:= v4[v6] @kind wide;
  #L5021d2.  v16:= lcmp(v12, v14);
  #L5021d6.  if v16 == 0 then goto L50225e;
  #L5021da.  v12:= v5 + v6 @kind int;
  #L5021de.  call temp:= `get`(v3, v12) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L5021e4.  v12:= temp @kind wide;
  #L5021e6.  v16:= 0L;
  #L5021ea.  v18:= lcmp(v12, v16);
  #L5021ee.  if v18 != 0 then goto L50225e;
  #L5021f2.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L5021f8.  v11:= temp @kind object;
  #L5021fa.  if v11 != 0 then goto L502200;
  #L5021fe.  goto L50226e;
  #L502200.  v12:= v2[v6] @kind object;
  #L502204.  call `onNext`(v12, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L50220a.  v11:= 1L;
  #L50220e.  v14:= v14 + v11 @kind long;
  #L502210.  v4[v6]:= v14 @kind wide;
  #L502214.  v7:= v7 + 1;
  #L502218.  v11:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int`;
  #L50221c.  if v7 != v11 then goto L50222e;
  #L502220.  v11:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L502224.  v12:= (`long`) v7 @kind i2l;
  #L502226.  call `request`(v11, v12) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50222c.  v7:= 0I;
  #L50222e.  v11:= 0I;
  #L502230.  goto L502260;
  #L502232.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502234.  v3:= v0 @kind object;
  #L502236.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50223c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L502240.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L502246.  v0:= length @variable v2;
  #L502248.  if v10 >= v0 then goto L50225c;
  #L50224c.  v4:= v2[v10] @kind object;
  #L502250.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L502256.  v10:= v10 + 1;
  #L50225a.  goto L502248;
  #L50225c.  return @kind void;
  #L50225e.  v11:= v11 + v8 @kind int;
  #L502260.  v6:= v6 + 1;
  #L502264.  if v6 != v5 then goto L50226a;
  #L502268.  v6:= 0I;
  #L50226a.  if v11 != v5 then goto L50215a;
  #L50226e.  call temp:= `get`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L502274.  v10:= temp;
  #L502276.  if v10 != v9 then goto L502292;
  #L50227a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L50227e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int` := v7;
  #L502282.  v9:= -v9 @kind int;
  #L502284.  call temp:= `addAndGet`(v1, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L50228a.  v9:= temp;
  #L50228c.  if v9 != 0 then goto L502156;
  #L502290.  return @kind void;
  #L502292.  v9:= v10;
  #L502294.  goto L502156;
  catch `java.lang.Throwable` @[L5021f2..L5021fa] goto L502232;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L5022b4.  v1:= v18 @kind object;
  #L5022b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L5022bc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L5022c0.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L5022c4.  v4:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L5022c8.  v5:= length @variable v4;
  #L5022ca.  v6:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L5022ce.  v7:= 1I;
  #L5022d0.  v8:= 1I;
  #L5022d2.  v9:= 0I;
  #L5022d4.  v10:= 0I;
  #L5022d6.  v11:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L5022da.  if v11 == 0 then goto L5022e6;
  #L5022de.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L5022e4.  return @kind void;
  #L5022e6.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L5022ec.  v11:= temp;
  #L5022ee.  if v11 == 0 then goto L50230a;
  #L5022f2.  v0:= length @variable v2;
  #L5022f4.  if v9 >= v0 then goto L502308;
  #L5022f8.  v3:= v2[v9] @kind object;
  #L5022fc.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L502302.  v9:= v9 + 1;
  #L502306.  goto L5022f4;
  #L502308.  return @kind void;
  #L50230a.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L502310.  v11:= temp @kind wide;
  #L502312.  v13:= v4[v6] @kind wide;
  #L502316.  v15:= lcmp(v11, v13);
  #L50231a.  if v15 == 0 then goto L50239e;
  #L50231e.  v11:= v5 + v6 @kind int;
  #L502322.  call temp:= `get`(v3, v11) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L502328.  v11:= temp @kind wide;
  #L50232a.  v15:= 0L;
  #L50232e.  v17:= lcmp(v11, v15);
  #L502332.  if v17 != 0 then goto L50239e;
  #L502336.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L50233c.  v10:= temp @kind object;
  #L50233e.  if v10 != 0 then goto L50235a;
  #L502342.  v0:= length @variable v2;
  #L502344.  if v9 >= v0 then goto L502358;
  #L502348.  v3:= v2[v9] @kind object;
  #L50234c.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L502352.  v9:= v9 + 1;
  #L502356.  goto L502344;
  #L502358.  return @kind void;
  #L50235a.  v11:= v2[v6] @kind object;
  #L50235e.  call `onNext`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L502364.  v10:= 1L;
  #L502368.  v13:= v13 + v10 @kind long;
  #L50236a.  v4[v6]:= v13 @kind wide;
  #L50236e.  v10:= 0I;
  #L502370.  goto L5023a0;
  #L502372.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502374.  v3:= v0 @kind object;
  #L502376.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50237c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L502380.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L502386.  v0:= length @variable v2;
  #L502388.  if v9 >= v0 then goto L50239c;
  #L50238c.  v4:= v2[v9] @kind object;
  #L502390.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L502396.  v9:= v9 + 1;
  #L50239a.  goto L502388;
  #L50239c.  return @kind void;
  #L50239e.  v10:= v10 + v7 @kind int;
  #L5023a0.  v6:= v6 + 1;
  #L5023a4.  if v6 != v5 then goto L5023aa;
  #L5023a8.  v6:= 0I;
  #L5023aa.  if v10 != v5 then goto L5022d6;
  #L5023ae.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5023b4.  v9:= temp;
  #L5023b6.  if v9 != v8 then goto L5023ce;
  #L5023ba.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L5023be.  v8:= -v8 @kind int;
  #L5023c0.  call temp:= `addAndGet`(v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L5023c6.  v8:= temp;
  #L5023c8.  if v8 != 0 then goto L5022d2;
  #L5023cc.  return @kind void;
  #L5023ce.  v8:= v9;
  #L5023d0.  goto L5022d2;
  catch `java.lang.Throwable` @[L502336..L50233e] goto L502372;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L502528.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L50252c.  v1:= length @variable v0;
  #L50252e.  v2:= 0I;
  #L502530.  if v2 >= v1 then goto L50255a;
  #L502534.  v3:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502538.  v4:= v2 + 1;
  #L50253c.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L502542.  v3:= v0[v2] @kind object;
  #L502546.  v5:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a`;
  #L50254a.  call `<init>`(v5, v6, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;II)V` @kind direct;
  #L502550.  call `onSubscribe`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L502556.  v2:= v4;
  #L502558.  goto L502530;
  #L50255a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5023f0.  v0:= 1I;
  #L5023f2.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v0 @kind boolean;
  #L5023f6.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L5023fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L502410.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L502414.  v1:= 1I;
  #L502416.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v1 @kind boolean;
  #L50241a.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L502420.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502434.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L502438.  if v0 != 0 then goto L50246c;
  #L50243c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L502440.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L502446.  v2:= temp;
  #L502448.  if v2 != 0 then goto L50246c;
  #L50244c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L502450.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L502456.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L50245a.  v0:= "Queue is full?" @kind object;
  #L50245e.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L502464.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50246a.  return @kind void;
  #L50246c.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L502472.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L502484.  v0:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L502488.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L50248e.  v0:= temp;
  #L502490.  if v0 == 0 then goto L502516;
  #L502494.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L502498.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L50249c.  if v0 == 0 then goto L5024f2;
  #L5024a0.  v0:= v4 @kind object;
  #L5024a2.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L5024a6.  v1:= 7I;
  #L5024a8.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L5024ae.  v1:= temp;
  #L5024b0.  v2:= 1I;
  #L5024b2.  if v1 != v2 then goto L5024d0;
  #L5024b6.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L5024ba.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L5024be.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v2 @kind boolean;
  #L5024c2.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L5024c8.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L5024ce.  return @kind void;
  #L5024d0.  v2:= 2I;
  #L5024d2.  if v1 != v2 then goto L5024f2;
  #L5024d6.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L5024da.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L5024de.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L5024e4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L5024e8.  v0:= (`long`) v0 @kind i2l;
  #L5024ea.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L5024f0.  return @kind void;
  #L5024f2.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L5024f6.  v1:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L5024fa.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L502500.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L502504.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L50250a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L50250e.  v0:= (`long`) v0 @kind i2l;
  #L502510.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L502516.  return @kind void;
}
