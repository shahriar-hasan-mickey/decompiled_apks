record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b841c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b8422.  v0:= 1I;
  #L4b8424.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4b8428.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4b842c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4b8430.  v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` := v3 @kind object;
  #L4b8434.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b830c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` @kind boolean;
  #L4b8310.  v1:= 1I;
  #L4b8312.  if v0 != 0 then goto L4b8342;
  #L4b8316.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4b831a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L4b831e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @kind virtual;
  #L4b8324.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4b8328.  call temp:= `fromPublisher`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4b832e.  v0:= temp @kind object;
  #L4b8330.  call temp:= `materialize`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.materialize:()Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L4b8336.  v0:= temp @kind object;
  #L4b8338.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L4b833c.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4b8342.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L4b8346.  call temp:= `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @kind virtual;
  #L4b834c.  v0:= temp @kind object;
  #L4b834e.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b8354.  v2:= temp;
  #L4b8356.  v3:= 0I;
  #L4b8358.  if v2 == 0 then goto L4b836e;
  #L4b835c.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L4b8360.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4b8366.  v0:= temp @kind object;
  #L4b8368.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4b836c.  return v1;
  #L4b836e.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4b8372.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnComplete:()Z` @kind virtual;
  #L4b8378.  v1:= temp;
  #L4b837a.  if v1 == 0 then goto L4b8380;
  #L4b837e.  return v3;
  #L4b8380.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4b8386.  v0:= temp @kind object;
  #L4b8388.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4b838c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b8392.  v0:= temp @kind object;
  #L4b8394.  throw v0;
  #L4b8396.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b8398.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L4b839c.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4b83a2.  v4.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L4b83a6.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b83ac.  v0:= temp @kind object;
  #L4b83ae.  throw v0;
  catch `java.lang.InterruptedException` @[L4b830c..L4b8396] goto L4b8396;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b82c4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L4b82c8.  if v0 != 0 then goto L4b82f0;
  #L4b82cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` @kind boolean;
  #L4b82d0.  v1:= 0I;
  #L4b82d2.  if v0 != 0 then goto L4b82d8;
  #L4b82d6.  return v1;
  #L4b82d8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` @kind boolean;
  #L4b82dc.  if v0 == 0 then goto L4b82ec;
  #L4b82e0.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @kind direct;
  #L4b82e6.  v0:= temp;
  #L4b82e8.  if v0 == 0 then goto L4b82ee;
  #L4b82ec.  v1:= 1I;
  #L4b82ee.  return v1;
  #L4b82f0.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b82f6.  v0:= temp @kind object;
  #L4b82f8.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b83d0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L4b83d4.  if v0 != 0 then goto L4b8400;
  #L4b83d8.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @kind virtual;
  #L4b83de.  v0:= temp;
  #L4b83e0.  if v0 == 0 then goto L4b83f0;
  #L4b83e4.  v0:= 1I;
  #L4b83e6.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4b83ea.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L4b83ee.  return v0 @kind object;
  #L4b83f0.  v0:= new `java.util.NoSuchElementException`;
  #L4b83f4.  v1:= "No more elements" @kind object;
  #L4b83f8.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b83fe.  throw v0;
  #L4b8400.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b8406.  v0:= temp @kind object;
  #L4b8408.  throw v0;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b8448.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b844c.  v1:= "Read only iterator" @kind object;
  #L4b8450.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b8456.  throw v0;
}
