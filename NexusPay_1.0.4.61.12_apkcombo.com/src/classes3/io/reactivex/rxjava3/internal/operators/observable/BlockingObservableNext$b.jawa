record `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.observers.DisposableObserver` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e7134.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4e713a.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L4e713e.  v1:= 1I;
  #L4e7140.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L4e7146.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L4e714a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4e714e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e7154.  v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4e7158.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v2 @kind this, `io.reactivex.rxjava3.core.Notification` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e7198.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e719c.  v1:= 0I;
  #L4e719e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4e71a4.  v0:= temp;
  #L4e71a6.  v1:= 1I;
  #L4e71a8.  if v0 == v1 then goto L4e71b8;
  #L4e71ac.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4e71b2.  v0:= temp;
  #L4e71b4.  if v0 != 0 then goto L4e71ec;
  #L4e71b8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4e71bc.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e71c2.  v0:= temp;
  #L4e71c4.  if v0 != 0 then goto L4e71ec;
  #L4e71c8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4e71cc.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e71d2.  v0:= temp @kind object;
  #L4e71d4.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4e71d8.  if v0 == 0 then goto L4e71b8;
  #L4e71dc.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4e71e2.  v1:= temp;
  #L4e71e4.  if v1 != 0 then goto L4e71b8;
  #L4e71e8.  v3:= v0 @kind object;
  #L4e71ea.  goto L4e71b8;
  #L4e71ec.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e721c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4e7220.  v1:= 1I;
  #L4e7222.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4e7228.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.Notification` `c`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/rxjava3/core/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e7104.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L4e710a.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4e7110.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b.d` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L4e7114.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4e711a.  v0:= temp @kind object;
  #L4e711c.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4e7120.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4e716c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e7180.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e7186.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e7200.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L4e7204.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L4e720a.  return @kind void;
}
