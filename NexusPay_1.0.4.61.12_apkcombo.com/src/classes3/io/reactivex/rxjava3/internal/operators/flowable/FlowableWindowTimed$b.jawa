record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.n` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.p` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @AccessFlag ;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 , `long` v13 , `boolean` v15 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d8674.  v0:= v6 @kind object;
  #L4d8676.  v1:= v7 @kind object;
  #L4d8678.  v2:= v8 @kind wide;
  #L4d867a.  v4:= v10 @kind object;
  #L4d867c.  v5:= v12;
  #L4d867e.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4d8684.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.n` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4d8688.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.p` @type ^`long` := v13 @kind wide;
  #L4d868c.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` := v15 @kind boolean;
  #L4d8690.  if v15 == 0 then goto L4d86a2;
  #L4d8694.  call temp:= `createWorker`(v11) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4d869a.  v7:= temp @kind object;
  #L4d869c.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4d86a0.  goto L4d86a8;
  #L4d86a2.  v7:= 0I;
  #L4d86a4.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v7 @kind object;
  #L4d86a8.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d86ac.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d86b2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4d86b6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4d86ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d86f0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d86f6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d86fa.  if v0 == 0 then goto L4d8704;
  #L4d86fe.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d8704.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4d8718.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d871c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d8722.  v0:= temp;
  #L4d8724.  if v0 != 0 then goto L4d8830;
  #L4d8728.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d872c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d8732.  v0:= temp @kind wide;
  #L4d8734.  v2:= 0L;
  #L4d8738.  v4:= lcmp(v0, v2);
  #L4d873c.  if v4 == 0 then goto L4d87fa;
  #L4d8740.  v0:= 1L;
  #L4d8744.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4d8748.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d874c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d8752.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4d8756.  call temp:= `create`(v2, v11) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d875c.  v2:= temp @kind object;
  #L4d875e.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4d8762.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d8766.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d876a.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d8770.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8774.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d877a.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a`;
  #L4d877e.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;J)V` @kind direct;
  #L4d8784.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` @kind boolean;
  #L4d8788.  if v0 == 0 then goto L4d87ae;
  #L4d878c.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d8790.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d8794.  v8:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4d8798.  v10:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d879c.  v6:= v8 @kind wide;
  #L4d879e.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d87a4.  v1:= temp @kind object;
  #L4d87a6.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d87ac.  goto L4d87ce;
  #L4d87ae.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d87b2.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.n` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d87b6.  v8:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4d87ba.  v10:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d87be.  v6:= v8 @kind wide;
  #L4d87c0.  call temp:= `schedulePeriodicallyDirect`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d87c6.  v1:= temp @kind object;
  #L4d87c8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d87ce.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d87d4.  v0:= temp;
  #L4d87d6.  if v0 == 0 then goto L4d87e4;
  #L4d87da.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d87de.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d87e4.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d87e8.  v1:= 9223372036854775807L;
  #L4d87f2.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d87f8.  goto L4d8830;
  #L4d87fa.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d87fe.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d8804.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8808.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d880c.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d8810.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4d8816.  v2:= temp @kind object;
  #L4d8818.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d881e.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8824.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4d882a.  v0:= 1I;
  #L4d882c.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4d8830.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4d8844.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d884a.  v0:= temp;
  #L4d884c.  if v0 == 0 then goto L4d8852;
  #L4d8850.  return @kind void;
  #L4d8852.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d8856.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d885a.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d885e.  v3:= 1I;
  #L4d8860.  v4:= 1I;
  #L4d8862.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` @kind boolean;
  #L4d8866.  v6:= 0I;
  #L4d8868.  if v5 == 0 then goto L4d887a;
  #L4d886c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d8872.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v6 @kind object;
  #L4d8876.  v2:= v6 @kind object;
  #L4d8878.  goto L4d893c;
  #L4d887a.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` @kind boolean;
  #L4d887e.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d8884.  v6:= temp @kind object;
  #L4d8886.  if v6 != 0 then goto L4d888e;
  #L4d888a.  v7:= 1I;
  #L4d888c.  goto L4d8890;
  #L4d888e.  v7:= 0I;
  #L4d8890.  if v5 == 0 then goto L4d88ce;
  #L4d8894.  if v7 == 0 then goto L4d88ce;
  #L4d8898.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4d889c.  if v5 == 0 then goto L4d88b2;
  #L4d88a0.  if v2 == 0 then goto L4d88aa;
  #L4d88a4.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d88aa.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d88b0.  goto L4d88c2;
  #L4d88b2.  if v2 == 0 then goto L4d88bc;
  #L4d88b6.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d88bc.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d88c2.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4d88c8.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4d88cc.  goto L4d8862;
  #L4d88ce.  if v7 != 0 then goto L4d893c;
  #L4d88d2.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a` @kind boolean;
  #L4d88d6.  v7:= 0L;
  #L4d88da.  if v5 == 0 then goto L4d8908;
  #L4d88de.  v6:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a`) v6 @kind object;
  #L4d88e2.  v5:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a.b` @type ^`long` @kind wide;
  #L4d88e6.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d88ea.  v11:= lcmp(v5, v9);
  #L4d88ee.  if v11 == 0 then goto L4d88fa;
  #L4d88f2.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` @kind boolean;
  #L4d88f6.  if v5 != 0 then goto L4d8862;
  #L4d88fa.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` := v7 @kind wide;
  #L4d88fe.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.f:(Lio/reactivex/rxjava3/processors/UnicastProcessor;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind virtual;
  #L4d8904.  v2:= temp @kind object;
  #L4d8906.  goto L4d8862;
  #L4d8908.  if v2 == 0 then goto L4d8862;
  #L4d890c.  call `onNext`(v2, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4d8912.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` @kind wide;
  #L4d8916.  v9:= 1L;
  #L4d891a.  v5:= v5 + v9 @kind long;
  #L4d891c.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.p` @type ^`long` @kind wide;
  #L4d8920.  v11:= lcmp(v5, v9);
  #L4d8924.  if v11 != 0 then goto L4d8936;
  #L4d8928.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` := v7 @kind wide;
  #L4d892c.  call temp:= `f`(v12, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.f:(Lio/reactivex/rxjava3/processors/UnicastProcessor;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind virtual;
  #L4d8932.  v2:= temp @kind object;
  #L4d8934.  goto L4d8862;
  #L4d8936.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.r` @type ^`long` := v5 @kind wide;
  #L4d893a.  goto L4d8862;
  #L4d893c.  v4:= -v4 @kind int;
  #L4d893e.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d8944.  v4:= temp;
  #L4d8946.  if v4 != 0 then goto L4d8862;
  #L4d894a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4d86c8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d86cc.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d86d2.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.c:()V` @kind virtual;
  #L4d86d8.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.UnicastProcessor` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v11 @kind this, `io.reactivex.rxjava3.processors.UnicastProcessor` v12 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.f:(Lio/reactivex/rxjava3/processors/UnicastProcessor;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4d8574.  if v12 == 0 then goto L4d8580;
  #L4d8578.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d857e.  v12:= 0I;
  #L4d8580.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d8584.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d858a.  v0:= temp;
  #L4d858c.  if v0 == 0 then goto L4d8598;
  #L4d8590.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4d8596.  goto L4d8660;
  #L4d8598.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4d859c.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d85a0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d85a6.  v2:= temp @kind wide;
  #L4d85a8.  v4:= lcmp(v2, v0);
  #L4d85ac.  if v4 != 0 then goto L4d85e4;
  #L4d85b0.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d85b4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d85ba.  call `a`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L4d85c0.  v2:= 1I;
  #L4d85c2.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4d85c6.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d85ca.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d85ce.  call temp:= `e`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4d85d4.  v0:= temp @kind object;
  #L4d85d6.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d85dc.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d85e2.  goto L4d8660;
  #L4d85e4.  v2:= 1L;
  #L4d85e8.  v0:= v0 + v2 @kind long;
  #L4d85ea.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4d85ee.  v12:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d85f2.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d85f8.  v12:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4d85fc.  call temp:= `create`(v12, v11) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d8602.  v12:= temp @kind object;
  #L4d8604.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.s` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v12 @kind object;
  #L4d8608.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4d860c.  call `<init>`(v2, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4d8612.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8616.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d861c.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.o` @type ^`boolean` @kind boolean;
  #L4d8620.  if v3 == 0 then goto L4d864e;
  #L4d8624.  v3:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.t` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d8628.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b.q` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d862c.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b$a`;
  #L4d8630.  call `<init>`(v5, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;J)V` @kind direct;
  #L4d8636.  v8:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4d863a.  v10:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d863e.  v6:= v8 @kind wide;
  #L4d8640.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d8646.  v0:= temp @kind object;
  #L4d8648.  call temp:= `update`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d864e.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4d8654.  v0:= temp;
  #L4d8656.  if v0 == 0 then goto L4d8660;
  #L4d865a.  call `onComplete`(v12) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d8660.  return v12 @kind object;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4d895c.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L4d8962.  return @kind void;
}
