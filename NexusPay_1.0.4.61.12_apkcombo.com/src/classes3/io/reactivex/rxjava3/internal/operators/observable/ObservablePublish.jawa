record `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.observables.ConnectableObservable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamObservableSource` @kind interface {
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v0 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4f5d2c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L4f5d32.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v1 @kind object;
  #L4f5d36.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f5d3a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f5d40.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4f5d44.  return @kind void;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5d58.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5d5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5d62.  v0:= temp @kind object;
  #L4f5d64.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L4f5d68.  if v0 == 0 then goto L4f5d78;
  #L4f5d6c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L4f5d72.  v1:= temp;
  #L4f5d74.  if v1 == 0 then goto L4f5d9a;
  #L4f5d78.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`;
  #L4f5d7c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5d80.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4f5d86.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5d8a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f5d90.  v0:= temp;
  #L4f5d92.  if v0 != 0 then goto L4f5d98;
  #L4f5d96.  goto L4f5d58;
  #L4f5d98.  v0:= v1 @kind object;
  #L4f5d9a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f5d9e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f5da4.  v1:= temp;
  #L4f5da6.  v2:= 1I;
  #L4f5da8.  v3:= 0I;
  #L4f5daa.  if v1 != 0 then goto L4f5dc0;
  #L4f5dae.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f5db2.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f5db8.  v1:= temp;
  #L4f5dba.  if v1 == 0 then goto L4f5dc0;
  #L4f5dbe.  goto L4f5dc2;
  #L4f5dc0.  v2:= 0I;
  #L4f5dc2.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4f5dc8.  if v2 == 0 then goto L4f5dd6;
  #L4f5dcc.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f5dd0.  call `subscribe`(v5, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f5dd6.  return @kind void;
  #L4f5dd8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f5dda.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f5de0.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4f5de6.  v5:= temp @kind object;
  #L4f5de8.  throw v5;
  catch `java.lang.Throwable` @[L4f5dc2..L4f5dc8] goto L4f5dd8;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f5e08.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5e12.  v0:= temp @kind object;
  #L4f5e14.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L4f5e18.  if v0 == 0 then goto L4f5e34;
  #L4f5e1c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L4f5e22.  v1:= temp;
  #L4f5e24.  if v1 == 0 then goto L4f5e34;
  #L4f5e28.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e2c.  v2:= 0I;
  #L4f5e2e.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f5e34.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.ObservableSource` `source`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.source:()Lio/reactivex/rxjava3/core/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5d14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f5d18.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4f5e48.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f5e52.  v0:= temp @kind object;
  #L4f5e54.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L4f5e58.  if v0 != 0 then goto L4f5e7e;
  #L4f5e5c.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b`;
  #L4f5e60.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e64.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4f5e6a.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f5e6e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f5e74.  v0:= temp;
  #L4f5e76.  if v0 != 0 then goto L4f5e7c;
  #L4f5e7a.  goto L4f5e48;
  #L4f5e7c.  v0:= v1 @kind object;
  #L4f5e7e.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$a`;
  #L4f5e82.  call `<init>`(v1, v4, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;)V` @kind direct;
  #L4f5e88.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f5e8e.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)Z` @kind virtual;
  #L4f5e94.  v2:= temp;
  #L4f5e96.  if v2 == 0 then goto L4f5eae;
  #L4f5e9a.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @kind virtual;
  #L4f5ea0.  v4:= temp;
  #L4f5ea2.  if v4 == 0 then goto L4f5eac;
  #L4f5ea6.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L4f5eac.  return @kind void;
  #L4f5eae.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservablePublish$b.d` @type ^`java.lang.Throwable` @kind object;
  #L4f5eb2.  if v0 == 0 then goto L4f5ebe;
  #L4f5eb6.  call `onError`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f5ebc.  goto L4f5ec4;
  #L4f5ebe.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f5ec4.  return @kind void;
}
