record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.subscribers.DisposableSubscriber` @kind class, `java.util.Iterator` @kind interface {
  `java.util.concurrent.Semaphore` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Notification` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b7fa4.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L4b7faa.  v0:= new `java.util.concurrent.Semaphore`;
  #L4b7fae.  v1:= 0I;
  #L4b7fb0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L4b7fb6.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L4b7fba.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b7fbe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b7fc4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4b7fc8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v1 @kind this, `io.reactivex.rxjava3.core.Notification` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8008.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b800c.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b8012.  v2:= temp @kind object;
  #L4b8014.  if v2 != 0 then goto L4b801c;
  #L4b8018.  v2:= 1I;
  #L4b801a.  goto L4b801e;
  #L4b801c.  v2:= 0I;
  #L4b801e.  if v2 == 0 then goto L4b802c;
  #L4b8022.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4b8026.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L4b802c.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7e7c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b7e80.  if v0 == 0 then goto L4b7ea8;
  #L4b7e84.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4b7e8a.  v0:= temp;
  #L4b7e8c.  if v0 != 0 then goto L4b7e92;
  #L4b7e90.  goto L4b7ea8;
  #L4b7e92.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b7e96.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4b7e9c.  v0:= temp @kind object;
  #L4b7e9e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b7ea4.  v0:= temp @kind object;
  #L4b7ea6.  throw v0;
  #L4b7ea8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b7eac.  if v0 == 0 then goto L4b7ebc;
  #L4b7eb0.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b7eb6.  v0:= temp;
  #L4b7eb8.  if v0 == 0 then goto L4b7f28;
  #L4b7ebc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b7ec0.  if v0 != 0 then goto L4b7f28;
  #L4b7ec4.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L4b7eca.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4b7ece.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L4b7ed4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7ed8.  v1:= 0I;
  #L4b7eda.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b7ee0.  v0:= temp @kind object;
  #L4b7ee2.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L4b7ee6.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v0 @kind object;
  #L4b7eea.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L4b7ef0.  v1:= temp;
  #L4b7ef2.  if v1 != 0 then goto L4b7ef8;
  #L4b7ef6.  goto L4b7f28;
  #L4b7ef8.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4b7efe.  v0:= temp @kind object;
  #L4b7f00.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b7f06.  v0:= temp @kind object;
  #L4b7f08.  throw v0;
  #L4b7f0a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4b7f0c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4b7f12.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/rxjava3/core/Notification;` @kind static;
  #L4b7f18.  v1:= temp @kind object;
  #L4b7f1a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L4b7f1e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4b7f24.  v0:= temp @kind object;
  #L4b7f26.  throw v0;
  #L4b7f28.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b7f2c.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b7f32.  v0:= temp;
  #L4b7f34.  return v0;
  catch `java.lang.InterruptedException` @[L4b7ec4..L4b7ed4] goto L4b7f0a;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7f58.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @kind virtual;
  #L4b7f5e.  v0:= temp;
  #L4b7f60.  if v0 == 0 then goto L4b7f88;
  #L4b7f64.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b7f68.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L4b7f6e.  v0:= temp;
  #L4b7f70.  if v0 == 0 then goto L4b7f88;
  #L4b7f74.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L4b7f78.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4b7f7e.  v0:= temp @kind object;
  #L4b7f80.  v1:= 0I;
  #L4b7f82.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L4b7f86.  return v0 @kind object;
  #L4b7f88.  v0:= new `java.util.NoSuchElementException`;
  #L4b7f8c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4b7f92.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4b7fdc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b7ff0.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b7ff6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b8040.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L4b8044.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L4b804a.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b805c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4b8060.  v1:= "Read-only iterator." @kind object;
  #L4b8064.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b806a.  throw v0;
}
