record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cfe0c.  call `<init>`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.<init>:(Z)V` @kind direct;
  #L4cfe12.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v5 @kind object;
  #L4cfe16.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.h` @type ^`int` := v1;
  #L4cfe1a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` := v2 @kind wide;
  #L4cfe1e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4cfe22.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v3 @kind this, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.e:(Ljava/lang/Object;Z)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4cfdac.  v0:= new `io.reactivex.rxjava3.schedulers.Timed`;
  #L4cfdb0.  if v5 == 0 then goto L4cfdc0;
  #L4cfdb4.  v1:= 9223372036854775807L;
  #L4cfdbe.  goto L4cfdd0;
  #L4cfdc0.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4cfdc4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cfdc8.  call temp:= `now`(v5, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4cfdce.  v1:= temp @kind wide;
  #L4cfdd0.  v5:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cfdd4.  call `<init>`(v0, v4, v1, v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4cfdda.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.f:()Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4cfd10.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4cfd14.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cfd18.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4cfd1e.  v0:= temp @kind wide;
  #L4cfd20.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` @kind wide;
  #L4cfd24.  v0:= v0 - v2 @kind long;
  #L4cfd26.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfd2c.  v2:= temp @kind object;
  #L4cfd2e.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v2 @kind object;
  #L4cfd32.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfd38.  v3:= temp @kind object;
  #L4cfd3a.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L4cfd3e.  v7:= v3 @kind object;
  #L4cfd40.  v3:= v2 @kind object;
  #L4cfd42.  v2:= v7 @kind object;
  #L4cfd44.  if v2 != 0 then goto L4cfd4a;
  #L4cfd48.  goto L4cfd9a;
  #L4cfd4a.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L4cfd4e.  v4:= (`io.reactivex.rxjava3.schedulers.Timed`) v4 @kind object;
  #L4cfd52.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4cfd58.  v5:= temp @kind object;
  #L4cfd5a.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4cfd60.  v5:= temp;
  #L4cfd62.  if v5 != 0 then goto L4cfd9a;
  #L4cfd66.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4cfd6c.  v5:= temp @kind object;
  #L4cfd6e.  call temp:= `isError`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4cfd74.  v5:= temp;
  #L4cfd76.  if v5 == 0 then goto L4cfd7c;
  #L4cfd7a.  goto L4cfd9a;
  #L4cfd7c.  call temp:= `time`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4cfd82.  v4:= temp @kind wide;
  #L4cfd84.  v6:= lcmp(v4, v0);
  #L4cfd88.  if v6 > 0 then goto L4cfd9a;
  #L4cfd8c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfd92.  v3:= temp @kind object;
  #L4cfd94.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L4cfd98.  goto L4cfd3e;
  #L4cfd9a.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4cfdec.  v1:= (`io.reactivex.rxjava3.schedulers.Timed`) v1 @kind object;
  #L4cfdf0.  call temp:= `value`(v1) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4cfdf6.  v1:= temp @kind object;
  #L4cfdf8.  return v1 @kind object;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4cfe34.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4cfe38.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cfe3c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4cfe42.  v0:= temp @kind wide;
  #L4cfe44.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` @kind wide;
  #L4cfe48.  v0:= v0 - v2 @kind long;
  #L4cfe4a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfe50.  v2:= temp @kind object;
  #L4cfe52.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v2 @kind object;
  #L4cfe56.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfe5c.  v3:= temp @kind object;
  #L4cfe5e.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L4cfe62.  v4:= 0I;
  #L4cfe64.  v9:= v3 @kind object;
  #L4cfe66.  v3:= v2 @kind object;
  #L4cfe68.  v2:= v9 @kind object;
  #L4cfe6a.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L4cfe6e.  v6:= 1I;
  #L4cfe70.  if v5 <= v6 then goto L4cfeca;
  #L4cfe74.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.h` @type ^`int`;
  #L4cfe78.  if v5 <= v7 then goto L4cfe96;
  #L4cfe7c.  v4:= v4 + 1;
  #L4cfe80.  v5:= v5 + -1;
  #L4cfe84.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v5;
  #L4cfe88.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfe8e.  v3:= temp @kind object;
  #L4cfe90.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L4cfe94.  goto L4cfe64;
  #L4cfe96.  v5:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L4cfe9a.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L4cfe9e.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4cfea4.  v7:= temp @kind wide;
  #L4cfea6.  v5:= lcmp(v7, v0);
  #L4cfeaa.  if v5 > 0 then goto L4cfeca;
  #L4cfeae.  v4:= v4 + 1;
  #L4cfeb2.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L4cfeb6.  v3:= v3 - v6 @kind int;
  #L4cfeb8.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v3;
  #L4cfebc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfec2.  v3:= temp @kind object;
  #L4cfec4.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L4cfec8.  goto L4cfe64;
  #L4cfeca.  if v4 == 0 then goto L4cfed4;
  #L4cfece.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L4cfed4.  return @kind void;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$k;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4cfee8.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4cfeec.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cfef0.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4cfef6.  v0:= temp @kind wide;
  #L4cfef8.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$k.f` @type ^`long` @kind wide;
  #L4cfefc.  v0:= v0 - v2 @kind long;
  #L4cfefe.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cff04.  v2:= temp @kind object;
  #L4cff06.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v2 @kind object;
  #L4cff0a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cff10.  v3:= temp @kind object;
  #L4cff12.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L4cff16.  v4:= 0I;
  #L4cff18.  v9:= v3 @kind object;
  #L4cff1a.  v3:= v2 @kind object;
  #L4cff1c.  v2:= v9 @kind object;
  #L4cff1e.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L4cff22.  v6:= 1I;
  #L4cff24.  if v5 <= v6 then goto L4cff5c;
  #L4cff28.  v5:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e.a` @type ^`java.lang.Object` @kind object;
  #L4cff2c.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L4cff30.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4cff36.  v7:= temp @kind wide;
  #L4cff38.  v5:= lcmp(v7, v0);
  #L4cff3c.  if v5 > 0 then goto L4cff5c;
  #L4cff40.  v4:= v4 + 1;
  #L4cff44.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int`;
  #L4cff48.  v3:= v3 - v6 @kind int;
  #L4cff4a.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$a.c` @type ^`int` := v3;
  #L4cff4e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cff54.  v3:= temp @kind object;
  #L4cff56.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$e`) v3 @kind object;
  #L4cff5a.  goto L4cff18;
  #L4cff5c.  if v4 == 0 then goto L4cff66;
  #L4cff60.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$e;)V` @kind virtual;
  #L4cff66.  return @kind void;
}
