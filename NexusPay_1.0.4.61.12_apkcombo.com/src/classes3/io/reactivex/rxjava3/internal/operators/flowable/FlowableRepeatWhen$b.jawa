record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$b;.<init>:(Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ced9c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ceda2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.a` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4ceda6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cedaa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cedb0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cedb4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4cedb8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cedbe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4cedc2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cedd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cedd8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cedde.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cedf0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` @kind object;
  #L4cedf4.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$c;.cancel:()V` @kind virtual;
  #L4cedfa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` @kind object;
  #L4cedfe.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cee02.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cee08.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cee1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` @kind object;
  #L4cee20.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$c;.cancel:()V` @kind virtual;
  #L4cee26.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` @kind object;
  #L4cee2a.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cee2e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cee34.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cee48.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cee4e.  v2:= temp;
  #L4cee50.  if v2 != 0 then goto L4cee84;
  #L4cee54.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cee58.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cee5e.  v2:= temp @kind object;
  #L4cee60.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4cee64.  if v2 != v0 then goto L4cee6a;
  #L4cee68.  return @kind void;
  #L4cee6a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4cee6e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$c` @kind object;
  #L4cee72.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4cee78.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4cee7e.  v2:= temp;
  #L4cee80.  if v2 != 0 then goto L4cee54;
  #L4cee84.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cee98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cee9c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ceea0.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ceea6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ceeb8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ceebc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ceec0.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4ceec6.  return @kind void;
}
