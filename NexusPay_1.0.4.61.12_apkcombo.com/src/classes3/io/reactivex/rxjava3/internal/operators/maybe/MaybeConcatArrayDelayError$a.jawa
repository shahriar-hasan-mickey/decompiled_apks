record `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeSource`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.g` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4dae68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4dae6e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4dae72.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.e` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] := v2 @kind object;
  #L4dae76.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4dae7a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4dae80.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4dae84.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4dae88.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4dae8e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4dae92.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4dae96.  v2:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4dae9a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4daea0.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4daea4.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4daea8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4daeae.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4daeb2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4daeec.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4daef2.  v0:= temp;
  #L4daef4.  if v0 == 0 then goto L4daefa;
  #L4daef8.  return @kind void;
  #L4daefa.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daefe.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4daf02.  v2:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4daf06.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4daf0c.  v3:= temp;
  #L4daf0e.  v4:= 0I;
  #L4daf10.  if v3 == 0 then goto L4daf1c;
  #L4daf14.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4daf1a.  return @kind void;
  #L4daf1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4daf22.  v3:= temp @kind object;
  #L4daf24.  if v3 == 0 then goto L4dafae;
  #L4daf28.  v5:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4daf2c.  v6:= 1I;
  #L4daf2e.  if v3 == v5 then goto L4daf68;
  #L4daf32.  v7:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.h` @type ^`long` @kind wide;
  #L4daf36.  v5:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4daf3a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4daf40.  v9:= temp @kind wide;
  #L4daf42.  v5:= lcmp(v7, v9);
  #L4daf46.  if v5 == 0 then goto L4daf62;
  #L4daf4a.  v9:= 1L;
  #L4daf4e.  v7:= v7 + v9 @kind long;
  #L4daf50.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.h` @type ^`long` := v7 @kind wide;
  #L4daf54.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4daf5a.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4daf60.  goto L4daf6e;
  #L4daf62.  v3:= 0I;
  #L4daf64.  v6:= 0I;
  #L4daf66.  goto L4daf6e;
  #L4daf68.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4daf6e.  if v6 == 0 then goto L4dafae;
  #L4daf72.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4daf78.  v3:= temp;
  #L4daf7a.  if v3 != 0 then goto L4dafae;
  #L4daf7e.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.g` @type ^`int`;
  #L4daf82.  v4:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.e` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] @kind object;
  #L4daf86.  v5:= length @variable v4;
  #L4daf88.  if v3 != v5 then goto L4daf9c;
  #L4daf8c.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4daf90.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4daf94.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4daf9a.  return @kind void;
  #L4daf9c.  v5:= v3 + 1;
  #L4dafa0.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.g` @type ^`int` := v5;
  #L4dafa4.  v3:= v4[v3] @kind object;
  #L4dafa8.  call `subscribe`(v3, v11) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4dafae.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4dafb4.  v3:= temp;
  #L4dafb6.  if v3 != 0 then goto L4daf06;
  #L4dafba.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4daec4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4daec8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4daece.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4daed2.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4daed8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dafcc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4dafd0.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4dafd4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dafda.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L4dafe0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4daff4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daff8.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4daffc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4db002.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4db006.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4db00c.  v3:= temp;
  #L4db00e.  if v3 == 0 then goto L4db018;
  #L4db012.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L4db018.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db02c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4db030.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4db036.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db048.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4db04c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4db052.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L4db058.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4db06c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4db072.  v0:= temp;
  #L4db074.  if v0 == 0 then goto L4db088;
  #L4db078.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4db07c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4db082.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArrayDelayError$a;.a:()V` @kind virtual;
  #L4db088.  return @kind void;
}
