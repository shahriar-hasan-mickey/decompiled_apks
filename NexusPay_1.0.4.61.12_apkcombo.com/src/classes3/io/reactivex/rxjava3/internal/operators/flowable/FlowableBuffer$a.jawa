record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.functions.Supplier` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b93b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b93be.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b93c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int` := v2;
  #L4b93c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4b93ca.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b93dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b93e0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b93e6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b93f8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L4b93fc.  if v0 == 0 then goto L4b9402;
  #L4b9400.  return @kind void;
  #L4b9402.  v0:= 1I;
  #L4b9404.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4b9408.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L4b940c.  v1:= 0I;
  #L4b940e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v1 @kind object;
  #L4b9412.  if v0 == 0 then goto L4b9420;
  #L4b9416.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b941a.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b9420.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b9424.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b942a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b943c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L4b9440.  if v0 == 0 then goto L4b944c;
  #L4b9444.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b944a.  return @kind void;
  #L4b944c.  v0:= 0I;
  #L4b944e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L4b9452.  v0:= 1I;
  #L4b9454.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4b9458.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b945c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b9462.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b9474.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L4b9478.  if v0 == 0 then goto L4b947e;
  #L4b947c.  return @kind void;
  #L4b947e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L4b9482.  if v0 != 0 then goto L4b94be;
  #L4b9486.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b948a.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b9490.  v0:= temp @kind object;
  #L4b9492.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4b9496.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b949c.  v0:= temp @kind object;
  #L4b949e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b94a2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L4b94a6.  goto L4b94be;
  #L4b94a8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b94aa.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b94b0.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @kind virtual;
  #L4b94b6.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b94bc.  return @kind void;
  #L4b94be.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b94c4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int`;
  #L4b94c8.  v3:= v3 + 1;
  #L4b94cc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L4b94d0.  if v3 != v1 then goto L4b94ec;
  #L4b94d4.  v3:= 0I;
  #L4b94d6.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L4b94da.  v3:= 0I;
  #L4b94dc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v3 @kind object;
  #L4b94e0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b94e4.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b94ea.  goto L4b94f0;
  #L4b94ec.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L4b94f0.  return @kind void;
  catch `java.lang.Throwable` @[L4b9486..L4b94a2] goto L4b94a8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b9510.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b9514.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b951a.  v0:= temp;
  #L4b951c.  if v0 == 0 then goto L4b952e;
  #L4b9520.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4b9524.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b9528.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b952e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b9540.  call temp:= `validate`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4b9546.  v0:= temp;
  #L4b9548.  if v0 == 0 then goto L4b9564;
  #L4b954c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b9550.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L4b9554.  v1:= (`long`) v1 @kind i2l;
  #L4b9556.  call temp:= `multiplyCap`(v4, v1) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4b955c.  v4:= temp @kind wide;
  #L4b955e.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b9564.  return @kind void;
}
