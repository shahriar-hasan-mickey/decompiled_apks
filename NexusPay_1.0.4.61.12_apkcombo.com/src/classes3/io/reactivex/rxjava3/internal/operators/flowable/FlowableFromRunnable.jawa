record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class, `io.reactivex.rxjava3.functions.Supplier` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c5f6c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4c5f72.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4c5f76.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromRunnable;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5f4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @type ^`java.lang.Runnable` @kind object;
  #L4c5f50.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4c5f56.  v0:= 0I;
  #L4c5f58.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromRunnable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4c5f88.  v0:= new `io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable`;
  #L4c5f8c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.<init>:()V` @kind direct;
  #L4c5f92.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c5f98.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L4c5f9e.  v1:= temp;
  #L4c5fa0.  if v1 != 0 then goto L4c5fe4;
  #L4c5fa4.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromRunnable.b` @type ^`java.lang.Runnable` @kind object;
  #L4c5fa8.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4c5fae.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L4c5fb4.  v0:= temp;
  #L4c5fb6.  if v0 != 0 then goto L4c5fe4;
  #L4c5fba.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c5fc0.  goto L4c5fe4;
  #L4c5fc2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5fc4.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5fca.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/CancellableQueueFuseable;.isDisposed:()Z` @kind virtual;
  #L4c5fd0.  v0:= temp;
  #L4c5fd2.  if v0 != 0 then goto L4c5fde;
  #L4c5fd6.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5fdc.  goto L4c5fe4;
  #L4c5fde.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5fe4.  return @kind void;
  catch `java.lang.Throwable` @[L4c5fa4..L4c5fae] goto L4c5fc2;
}
