record `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4da864.  v0:= 0I;
  #L4da866.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v0];
  #L4da86a.  `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] := v1 @kind object;
  #L4da86e.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v0];
  #L4da872.  `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] := v0 @kind object;
  #L4da876.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v1 @kind this, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4da888.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4da88e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4da892.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4da898.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4da89c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4da8a0.  v0:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4da8a4.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4da8aa.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4da8ae.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4da810.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4da814.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4da81a.  v0:= temp @kind object;
  #L4da81c.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4da820.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4da824.  v2:= 0I;
  #L4da826.  if v0 != v1 then goto L4da82c;
  #L4da82a.  return v2;
  #L4da82c.  v1:= length @variable v0;
  #L4da82e.  v3:= v1 + 1;
  #L4da832.  v3:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v3];
  #L4da836.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4da83c.  v3[v1]:= v5 @kind object;
  #L4da840.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4da844.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4da84a.  v0:= temp;
  #L4da84c.  if v0 == 0 then goto L4da810;
  #L4da850.  v5:= 1I;
  #L4da852.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4da9cc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4da9d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4da9d6.  v0:= temp @kind object;
  #L4da9d8.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4da9dc.  v1:= length @variable v0;
  #L4da9de.  if v1 != 0 then goto L4da9e4;
  #L4da9e2.  return @kind void;
  #L4da9e4.  v2:= -1I;
  #L4da9e6.  v3:= 0I;
  #L4da9e8.  v4:= 0I;
  #L4da9ea.  if v4 >= v1 then goto L4daa00;
  #L4da9ee.  v5:= v0[v4] @kind object;
  #L4da9f2.  if v5 != v7 then goto L4da9fa;
  #L4da9f6.  v2:= v4;
  #L4da9f8.  goto L4daa00;
  #L4da9fa.  v4:= v4 + 1;
  #L4da9fe.  goto L4da9ea;
  #L4daa00.  if v2 >= 0 then goto L4daa06;
  #L4daa04.  return @kind void;
  #L4daa06.  v4:= 1I;
  #L4daa08.  if v1 != v4 then goto L4daa12;
  #L4daa0c.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4daa10.  goto L4daa30;
  #L4daa12.  v5:= v1 + -1;
  #L4daa16.  v5:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[v5];
  #L4daa1a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4daa20.  v3:= v2 + 1;
  #L4daa24.  v1:= v1 - v2 @kind int;
  #L4daa26.  v1:= v1 - v4 @kind int;
  #L4daa28.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4daa2e.  v1:= v5 @kind object;
  #L4daa30.  v2:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daa34.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4daa3a.  v0:= temp;
  #L4daa3c.  if v0 == 0 then goto L4da9cc;
  #L4daa40.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4da8c0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4da8c4.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4da8c8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4da8ce.  v0:= temp @kind object;
  #L4da8d0.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4da8d4.  v1:= length @variable v0;
  #L4da8d6.  v2:= 0I;
  #L4da8d8.  if v2 >= v1 then goto L4da8fc;
  #L4da8dc.  v3:= v0[v2] @kind object;
  #L4da8e0.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4da8e6.  v4:= temp;
  #L4da8e8.  if v4 != 0 then goto L4da8f6;
  #L4da8ec.  v3:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4da8f0.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4da8f6.  v2:= v2 + 1;
  #L4da8fa.  goto L4da8d8;
  #L4da8fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4da910.  v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` := v6 @kind object;
  #L4da914.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4da918.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4da91c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4da922.  v0:= temp @kind object;
  #L4da924.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4da928.  v1:= length @variable v0;
  #L4da92a.  v2:= 0I;
  #L4da92c.  if v2 >= v1 then goto L4da950;
  #L4da930.  v3:= v0[v2] @kind object;
  #L4da934.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4da93a.  v4:= temp;
  #L4da93c.  if v4 != 0 then goto L4da94a;
  #L4da940.  v3:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4da944.  call `onError`(v3, v6) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4da94a.  v2:= v2 + 1;
  #L4da94e.  goto L4da92c;
  #L4da950.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4da964.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4da978.  v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` := v6 @kind object;
  #L4da97c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4da980.  v1:= `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4da984.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4da98a.  v0:= temp @kind object;
  #L4da98c.  v0:= (`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4da990.  v1:= length @variable v0;
  #L4da992.  v2:= 0I;
  #L4da994.  if v2 >= v1 then goto L4da9b8;
  #L4da998.  v3:= v0[v2] @kind object;
  #L4da99c.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4da9a2.  v4:= temp;
  #L4da9a4.  if v4 != 0 then goto L4da9b2;
  #L4da9a8.  v3:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4da9ac.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4da9b2.  v2:= v2 + 1;
  #L4da9b6.  goto L4da994;
  #L4da9b8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4daa54.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$a`;
  #L4daa58.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;)V` @kind direct;
  #L4daa5e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4daa64.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)Z` @kind virtual;
  #L4daa6a.  v1:= temp;
  #L4daa6c.  if v1 == 0 then goto L4daaa2;
  #L4daa70.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4daa76.  v3:= temp;
  #L4daa78.  if v3 == 0 then goto L4daa84;
  #L4daa7c.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;)V` @kind virtual;
  #L4daa82.  return @kind void;
  #L4daa84.  v3:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4daa88.  v0:= 0I;
  #L4daa8a.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4daa90.  v3:= temp @kind object;
  #L4daa92.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L4daa96.  if v3 == 0 then goto L4daaa0;
  #L4daa9a.  call `subscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4daaa0.  return @kind void;
  #L4daaa2.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4daaa8.  v0:= temp;
  #L4daaaa.  if v0 != 0 then goto L4daad4;
  #L4daaae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` @kind object;
  #L4daab2.  if v0 == 0 then goto L4daabe;
  #L4daab6.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4daabc.  goto L4daad4;
  #L4daabe.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` @kind object;
  #L4daac2.  if v0 == 0 then goto L4daace;
  #L4daac6.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4daacc.  goto L4daad4;
  #L4daace.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4daad4.  return @kind void;
}
