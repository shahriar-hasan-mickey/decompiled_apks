record `io.reactivex.rxjava3.internal.operators.observable.b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.subjects.Subject` `io.reactivex.rxjava3.internal.operators.observable.b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.b.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.b` v0 @kind this, `io.reactivex.rxjava3.subjects.Subject` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fef48.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4fef4e.  v0.`io.reactivex.rxjava3.internal.operators.observable.b.a` @type ^`io.reactivex.rxjava3.subjects.Subject` := v1 @kind object;
  #L4fef52.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4fef56.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4fef5c.  v0.`io.reactivex.rxjava3.internal.operators.observable.b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4fef60.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4fef0c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fef10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fef16.  v0:= temp;
  #L4fef18.  v1:= 1I;
  #L4fef1a.  v2:= 0I;
  #L4fef1c.  if v0 != 0 then goto L4fef32;
  #L4fef20.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fef24.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4fef2a.  v0:= temp;
  #L4fef2c.  if v0 == 0 then goto L4fef32;
  #L4fef30.  goto L4fef34;
  #L4fef32.  v1:= 0I;
  #L4fef34.  return v1;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4fef74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.b.a` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L4fef78.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observable;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4fef7e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.b.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fef82.  v0:= 1I;
  #L4fef84.  call `set`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L4fef8a.  return @kind void;
}
