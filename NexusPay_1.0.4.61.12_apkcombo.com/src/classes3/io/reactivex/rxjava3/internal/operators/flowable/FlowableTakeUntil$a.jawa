record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d477c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d4782.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d4786.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d478a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d4790.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d4794.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d4798.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d479e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d47a2.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a$a`;
  #L4d47a6.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;)V` @kind direct;
  #L4d47ac.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.e` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a$a` := v1 @kind object;
  #L4d47b0.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d47b4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d47ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4d47be.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d47d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d47d4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d47da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.e` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a$a` @kind object;
  #L4d47de.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d47e4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d47f8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.e` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a$a` @kind object;
  #L4d47fc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d4802.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4806.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d480a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d4810.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d4824.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.e` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a$a` @kind object;
  #L4d4828.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d482e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4832.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d4836.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d483c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d4850.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4854.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d4858.  call temp:= `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @kind static;
  #L4d485e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d4870.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d4874.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d4878.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d487e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntil$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d4890.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d4894.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d4898.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4d489e.  return @kind void;
}
