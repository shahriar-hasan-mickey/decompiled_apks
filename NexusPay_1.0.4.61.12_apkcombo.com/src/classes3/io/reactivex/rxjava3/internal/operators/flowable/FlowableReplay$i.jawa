record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.g` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4cf958.  v0:= 0I;
  #L4cf95a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v0];
  #L4cf95e.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] := v1 @kind object;
  #L4cf962.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v0];
  #L4cf966.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] := v0 @kind object;
  #L4cf96a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cf97c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cf982.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` := v1 @kind object;
  #L4cf986.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4cf98a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4cf98e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cf994.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4cf998.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cf99c.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L4cf9a0.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4cf9a6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cf9aa.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4cf9ae.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4cf9b4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4cf9b8.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cf8d8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cf8dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf8e2.  v0:= temp @kind object;
  #L4cf8e4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v0 @kind object;
  #L4cf8e8.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L4cf8ec.  v2:= 0I;
  #L4cf8ee.  if v0 != v1 then goto L4cf8f4;
  #L4cf8f2.  return v2;
  #L4cf8f4.  v1:= length @variable v0;
  #L4cf8f6.  v3:= v1 + 1;
  #L4cf8fa.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v3];
  #L4cf8fe.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cf904.  v3[v1]:= v5 @kind object;
  #L4cf908.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cf90c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cf912.  v0:= temp;
  #L4cf914.  if v0 == 0 then goto L4cf8d8;
  #L4cf918.  v5:= 1I;
  #L4cf91a.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4cfa00.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4cfa04.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cfa0a.  v1:= temp;
  #L4cfa0c.  if v1 == 0 then goto L4cfa12;
  #L4cfa10.  return @kind void;
  #L4cfa12.  v1:= 1I;
  #L4cfa14.  call temp:= `isDisposed`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @kind virtual;
  #L4cfa1a.  v2:= temp;
  #L4cfa1c.  if v2 == 0 then goto L4cfa22;
  #L4cfa20.  return @kind void;
  #L4cfa22.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfa28.  v2:= temp @kind object;
  #L4cfa2a.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4cfa2e.  if v2 == 0 then goto L4cfa88;
  #L4cfa32.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.f` @type ^`long` @kind wide;
  #L4cfa36.  v5:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cfa3a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfa40.  v5:= temp @kind object;
  #L4cfa42.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L4cfa46.  v6:= length @variable v5;
  #L4cfa48.  v7:= 0I;
  #L4cfa4a.  v8:= v3 @kind wide;
  #L4cfa4c.  if v7 >= v6 then goto L4cfa6e;
  #L4cfa50.  v10:= v5[v7] @kind object;
  #L4cfa54.  v10:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cfa58.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cfa5e.  v10:= temp @kind wide;
  #L4cfa60.  call temp:= `max`(v8, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4cfa66.  v8:= temp @kind wide;
  #L4cfa68.  v7:= v7 + 1;
  #L4cfa6c.  goto L4cfa4c;
  #L4cfa6e.  v3:= v8 - v3 @kind long;
  #L4cfa72.  v5:= 0L;
  #L4cfa76.  v7:= lcmp(v3, v5);
  #L4cfa7a.  if v7 == 0 then goto L4cfa88;
  #L4cfa7e.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.f` @type ^`long` := v8 @kind wide;
  #L4cfa82.  call `request`(v2, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cfa88.  v1:= -v1 @kind int;
  #L4cfa8a.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cfa90.  v1:= temp;
  #L4cfa92.  if v1 != 0 then goto L4cfa14;
  #L4cfa96.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cfc04.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cfc08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfc0e.  v0:= temp @kind object;
  #L4cfc10.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v0 @kind object;
  #L4cfc14.  v1:= length @variable v0;
  #L4cfc16.  if v1 != 0 then goto L4cfc1c;
  #L4cfc1a.  return @kind void;
  #L4cfc1c.  v2:= -1I;
  #L4cfc1e.  v3:= 0I;
  #L4cfc20.  v4:= 0I;
  #L4cfc22.  if v4 >= v1 then goto L4cfc40;
  #L4cfc26.  v5:= v0[v4] @kind object;
  #L4cfc2a.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4cfc30.  v5:= temp;
  #L4cfc32.  if v5 == 0 then goto L4cfc3a;
  #L4cfc36.  v2:= v4;
  #L4cfc38.  goto L4cfc40;
  #L4cfc3a.  v4:= v4 + 1;
  #L4cfc3e.  goto L4cfc22;
  #L4cfc40.  if v2 >= 0 then goto L4cfc46;
  #L4cfc44.  return @kind void;
  #L4cfc46.  v4:= 1I;
  #L4cfc48.  if v1 != v4 then goto L4cfc52;
  #L4cfc4c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L4cfc50.  goto L4cfc70;
  #L4cfc52.  v5:= v1 + -1;
  #L4cfc56.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[v5];
  #L4cfc5a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cfc60.  v3:= v2 + 1;
  #L4cfc64.  v1:= v1 - v2 @kind int;
  #L4cfc66.  v1:= v1 - v4 @kind int;
  #L4cfc68.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cfc6e.  v1:= v5 @kind object;
  #L4cfc70.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cfc74.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cfc7a.  v0:= temp;
  #L4cfc7c.  if v0 == 0 then goto L4cfc04;
  #L4cfc80.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cf9cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cf9d0.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L4cf9d4.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4cf9da.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cf9de.  v1:= 0I;
  #L4cf9e0.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cf9e6.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cf9ec.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cf92c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cf930.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cf936.  v0:= temp @kind object;
  #L4cf938.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L4cf93c.  if v0 != v1 then goto L4cf944;
  #L4cf940.  v0:= 1I;
  #L4cf942.  goto L4cf946;
  #L4cf944.  v0:= 0I;
  #L4cf946.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cfaa8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4cfaac.  if v0 != 0 then goto L4cfaf0;
  #L4cfab0.  v0:= 1I;
  #L4cfab2.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L4cfab6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L4cfaba.  call `complete`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.complete:()V` @kind interface;
  #L4cfac0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cfac4.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L4cfac8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cface.  v0:= temp @kind object;
  #L4cfad0.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v0 @kind object;
  #L4cfad4.  v1:= length @variable v0;
  #L4cfad6.  v2:= 0I;
  #L4cfad8.  if v2 >= v1 then goto L4cfaf0;
  #L4cfadc.  v3:= v0[v2] @kind object;
  #L4cfae0.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L4cfae4.  call `c`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L4cfaea.  v2:= v2 + 1;
  #L4cfaee.  goto L4cfad8;
  #L4cfaf0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cfb04.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4cfb08.  if v0 != 0 then goto L4cfb4c;
  #L4cfb0c.  v0:= 1I;
  #L4cfb0e.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L4cfb12.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L4cfb16.  call `a`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cfb1c.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cfb20.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.i` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[] @kind object;
  #L4cfb24.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cfb2a.  v5:= temp @kind object;
  #L4cfb2c.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L4cfb30.  v0:= length @variable v5;
  #L4cfb32.  v1:= 0I;
  #L4cfb34.  if v1 >= v0 then goto L4cfb52;
  #L4cfb38.  v2:= v5[v1] @kind object;
  #L4cfb3c.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L4cfb40.  call `c`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L4cfb46.  v1:= v1 + 1;
  #L4cfb4a.  goto L4cfb34;
  #L4cfb4c.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cfb52.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cfb64.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4cfb68.  if v0 != 0 then goto L4cfba2;
  #L4cfb6c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L4cfb70.  call `b`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.b:(Ljava/lang/Object;)V` @kind interface;
  #L4cfb76.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cfb7a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfb80.  v5:= temp @kind object;
  #L4cfb82.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L4cfb86.  v0:= length @variable v5;
  #L4cfb88.  v1:= 0I;
  #L4cfb8a.  if v1 >= v0 then goto L4cfba2;
  #L4cfb8e.  v2:= v5[v1] @kind object;
  #L4cfb92.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L4cfb96.  call `c`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L4cfb9c.  v1:= v1 + 1;
  #L4cfba0.  goto L4cfb8a;
  #L4cfba2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cfbb4.  call temp:= `setOnce`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cfbba.  v5:= temp;
  #L4cfbbc.  if v5 == 0 then goto L4cfbf2;
  #L4cfbc0.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.b:()V` @kind virtual;
  #L4cfbc6.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cfbca.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cfbd0.  v5:= temp @kind object;
  #L4cfbd2.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c`[]) v5 @kind object;
  #L4cfbd6.  v0:= length @variable v5;
  #L4cfbd8.  v1:= 0I;
  #L4cfbda.  if v1 >= v0 then goto L4cfbf2;
  #L4cfbde.  v2:= v5[v1] @kind object;
  #L4cfbe2.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind object;
  #L4cfbe6.  call `c`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @kind interface;
  #L4cfbec.  v1:= v1 + 1;
  #L4cfbf0.  goto L4cfbda;
  #L4cfbf2.  return @kind void;
}
