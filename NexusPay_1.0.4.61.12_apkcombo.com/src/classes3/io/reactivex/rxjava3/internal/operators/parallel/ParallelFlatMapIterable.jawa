record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMapIterable;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L501dc8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L501dce.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L501dd2.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L501dd6.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.c` @type ^`int` := v3;
  #L501dda.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMapIterable;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501da8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L501dac.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L501db2.  v0:= temp;
  #L501db4.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable` v6 @kind this, `org.reactivestreams.Subscriber`[] v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMapIterable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L501dec.  call temp:= `validate`(v6, v7) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L501df2.  v0:= temp;
  #L501df4.  if v0 != 0 then goto L501dfa;
  #L501df8.  return @kind void;
  #L501dfa.  v0:= length @variable v7;
  #L501dfc.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L501e00.  v2:= 0I;
  #L501e02.  if v2 >= v0 then goto L501e24;
  #L501e06.  v3:= v7[v2] @kind object;
  #L501e0a.  v4:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L501e0e.  v5:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.c` @type ^`int`;
  #L501e12.  call temp:= `subscribe`(v3, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)Lorg/reactivestreams/Subscriber;` @kind static;
  #L501e18.  v3:= temp @kind object;
  #L501e1a.  v1[v2]:= v3 @kind object;
  #L501e1e.  v2:= v2 + 1;
  #L501e22.  goto L501e02;
  #L501e24.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L501e28.  call `subscribe`(v7, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L501e2e.  return @kind void;
}
