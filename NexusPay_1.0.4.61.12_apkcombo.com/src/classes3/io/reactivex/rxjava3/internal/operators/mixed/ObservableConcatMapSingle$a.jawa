record `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e553c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e5542.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4e5546.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e554a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4e554e.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e5552.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e5558.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e555c.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a`;
  #L4e5560.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;)V` @kind direct;
  #L4e5566.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` := v1 @kind object;
  #L4e556a.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4e556e.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4e5574.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4e5578.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4e55e0.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e55e6.  v0:= temp;
  #L4e55e8.  if v0 == 0 then goto L4e55ee;
  #L4e55ec.  return @kind void;
  #L4e55ee.  v0:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e55f2.  v1:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e55f6.  v2:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e55fa.  v3:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e55fe.  v4:= 1I;
  #L4e5600.  v5:= 1I;
  #L4e5602.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4e5606.  v7:= 0I;
  #L4e5608.  if v6 == 0 then goto L4e5618;
  #L4e560c.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e5612.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4e5616.  goto L4e56e8;
  #L4e5618.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int`;
  #L4e561c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5622.  v8:= temp @kind object;
  #L4e5624.  if v8 == 0 then goto L4e564e;
  #L4e5628.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e562c.  if v1 == v8 then goto L4e563c;
  #L4e5630.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e5634.  if v1 != v8 then goto L4e564e;
  #L4e5638.  if v6 != 0 then goto L4e564e;
  #L4e563c.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e5642.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4e5646.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e564c.  return @kind void;
  #L4e564e.  v8:= 0I;
  #L4e5650.  if v6 != 0 then goto L4e56ce;
  #L4e5654.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L4e5658.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e565e.  v7:= temp @kind object;
  #L4e5660.  if v7 != 0 then goto L4e5666;
  #L4e5664.  v8:= 1I;
  #L4e5666.  if v6 == 0 then goto L4e5676;
  #L4e566a.  if v8 == 0 then goto L4e5676;
  #L4e566e.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e5674.  return @kind void;
  #L4e5676.  if v8 == 0 then goto L4e567c;
  #L4e567a.  goto L4e56e8;
  #L4e567c.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e5680.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e5686.  v6:= temp @kind object;
  #L4e5688.  v7:= "The mapper returned a null SingleSource" @kind object;
  #L4e568c.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e5692.  v6:= temp @kind object;
  #L4e5694.  v6:= (`io.reactivex.rxjava3.core.SingleSource`) v6 @kind object;
  #L4e5698.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v4;
  #L4e569c.  v7:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L4e56a0.  call `subscribe`(v6, v7) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4e56a6.  goto L4e56e8;
  #L4e56a8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e56aa.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e56b0.  v4:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e56b4.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e56ba.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e56c0.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e56c6.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e56cc.  return @kind void;
  #L4e56ce.  v9:= 2I;
  #L4e56d0.  if v6 != v9 then goto L4e56e8;
  #L4e56d4.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` @kind object;
  #L4e56d8.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4e56dc.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e56e2.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v8;
  #L4e56e6.  goto L4e5602;
  #L4e56e8.  v5:= -v5 @kind int;
  #L4e56ea.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e56f0.  v5:= temp;
  #L4e56f2.  if v5 != 0 then goto L4e5602;
  #L4e56f6.  return @kind void;
  catch `java.lang.Throwable` @[L4e567c..L4e5698] goto L4e56a8;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e5714.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5718.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e571e.  v2:= temp;
  #L4e5720.  if v2 == 0 then goto L4e5746;
  #L4e5724.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e5728.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e572c.  if v2 == v0 then goto L4e573a;
  #L4e5730.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5734.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e573a.  v2:= 0I;
  #L4e573c.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v2;
  #L4e5740.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e5746.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4e5758.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v1 @kind object;
  #L4e575c.  v1:= 2I;
  #L4e575e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v1;
  #L4e5762.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e5768.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e558c.  v0:= 1I;
  #L4e558e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4e5592.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5596.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e559c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L4e55a0.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4e55a6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e55aa.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e55b0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e55b6.  v0:= temp;
  #L4e55b8.  if v0 != 0 then goto L4e55cc;
  #L4e55bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e55c0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e55c6.  v0:= 0I;
  #L4e55c8.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v0 @kind object;
  #L4e55cc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5524.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L4e5528.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e577c.  v0:= 1I;
  #L4e577e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e5782.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e5788.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e579c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e57a0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e57a6.  v2:= temp;
  #L4e57a8.  if v2 == 0 then goto L4e57ce;
  #L4e57ac.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e57b0.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e57b4.  if v2 != v0 then goto L4e57c2;
  #L4e57b8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L4e57bc.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L4e57c2.  v2:= 1I;
  #L4e57c4.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4e57c8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e57ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e57e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e57e4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e57ea.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L4e57f0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5804.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5808.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e580e.  v0:= temp;
  #L4e5810.  if v0 == 0 then goto L4e5822;
  #L4e5814.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4e5818.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e581c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e5822.  return @kind void;
}
