record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.m` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ff7a0.  v0:= new `java.lang.Object`;
  #L4ff7a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ff7aa.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @type ^`java.lang.Object` := v0 @kind object;
  #L4ff7ae.  v0:= new `java.lang.Object`;
  #L4ff7b2.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ff7b8.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @type ^`java.lang.Object` := v0 @kind object;
  #L4ff7bc.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object, `long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v13 @kind object, `int` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ff7d0.  v0:= v6 @kind object;
  #L4ff7d2.  v1:= v7 @kind object;
  #L4ff7d4.  v2:= v8 @kind wide;
  #L4ff7d6.  v4:= v12 @kind object;
  #L4ff7d8.  v5:= v14;
  #L4ff7da.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4ff7e0.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.m` @type ^`long` := v10 @kind wide;
  #L4ff7e4.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v13 @kind object;
  #L4ff7e8.  v7:= new `java.util.LinkedList`;
  #L4ff7ec.  call `<init>`(v7) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4ff7f2.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` := v7 @kind object;
  #L4ff7f6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ff838.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ff83c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ff842.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4ff854.  v0:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ff858.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ff85e.  v0:= temp;
  #L4ff860.  if v0 != 0 then goto L4ff8fa;
  #L4ff864.  v0:= 1L;
  #L4ff868.  v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v0 @kind wide;
  #L4ff86c.  v0:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ff870.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff876.  v0:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ff87a.  call temp:= `create`(v0, v14) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ff880.  v0:= temp @kind object;
  #L4ff882.  v1:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` @kind object;
  #L4ff886.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff88c.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ff890.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ff896.  v2:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ff89a.  call `onNext`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ff8a0.  v2:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ff8a4.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d$a`;
  #L4ff8a8.  v4:= 0I;
  #L4ff8aa.  call `<init>`(v3, v14, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;Z)V` @kind direct;
  #L4ff8b0.  v4:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ff8b4.  v6:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff8b8.  call temp:= `schedule`(v2, v3, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ff8be.  v7:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ff8c2.  v8:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d$a`;
  #L4ff8c6.  v2:= 1I;
  #L4ff8c8.  call `<init>`(v8, v14, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;Z)V` @kind direct;
  #L4ff8ce.  v11:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.m` @type ^`long` @kind wide;
  #L4ff8d2.  v13:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff8d6.  v9:= v11 @kind wide;
  #L4ff8d8.  call temp:= `schedulePeriodically`(v7, v8, v9, v11, v13) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ff8de.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4ff8e4.  v1:= temp;
  #L4ff8e6.  if v1 == 0 then goto L4ff8fa;
  #L4ff8ea.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff8f0.  v1:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` @kind object;
  #L4ff8f4.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff8fa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4ff90c.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ff912.  v0:= temp;
  #L4ff914.  if v0 == 0 then goto L4ff91a;
  #L4ff918.  return @kind void;
  #L4ff91a.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ff91e.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ff922.  v2:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.o` @type ^`java.util.List` @kind object;
  #L4ff926.  v3:= 1I;
  #L4ff928.  v4:= 1I;
  #L4ff92a.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` @kind boolean;
  #L4ff92e.  if v5 == 0 then goto L4ff942;
  #L4ff932.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ff938.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4ff93e.  goto L4ffaae;
  #L4ff942.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L4ff946.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ff94c.  v6:= temp @kind object;
  #L4ff94e.  v7:= 0I;
  #L4ff950.  if v6 != 0 then goto L4ff958;
  #L4ff954.  v8:= 1I;
  #L4ff956.  goto L4ff95a;
  #L4ff958.  v8:= 0I;
  #L4ff95a.  if v5 == 0 then goto L4ff9d4;
  #L4ff95e.  if v8 == 0 then goto L4ff9d4;
  #L4ff962.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4ff966.  if v5 == 0 then goto L4ff99a;
  #L4ff96a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ff970.  v6:= temp @kind object;
  #L4ff972.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ff978.  v7:= temp;
  #L4ff97a.  if v7 == 0 then goto L4ff992;
  #L4ff97e.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ff984.  v7:= temp @kind object;
  #L4ff986.  v7:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v7 @kind object;
  #L4ff98a.  call `onError`(v7, v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ff990.  goto L4ff972;
  #L4ff992.  call `onError`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ff998.  goto L4ff9c8;
  #L4ff99a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ff9a0.  v5:= temp @kind object;
  #L4ff9a2.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ff9a8.  v6:= temp;
  #L4ff9aa.  if v6 == 0 then goto L4ff9c2;
  #L4ff9ae.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ff9b4.  v6:= temp @kind object;
  #L4ff9b6.  v6:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v6 @kind object;
  #L4ff9ba.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ff9c0.  goto L4ff9a2;
  #L4ff9c2.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ff9c8.  call `a`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.a:()V` @kind virtual;
  #L4ff9ce.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4ff9d2.  goto L4ff92a;
  #L4ff9d4.  if v8 != 0 then goto L4ffaae;
  #L4ff9d8.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @type ^`java.lang.Object` @kind object;
  #L4ff9dc.  if v6 != v5 then goto L4ffa5c;
  #L4ff9e0.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4ff9e4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4ff9ea.  v5:= temp;
  #L4ff9ec.  if v5 != 0 then goto L4ff92a;
  #L4ff9f0.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` @kind wide;
  #L4ff9f4.  v8:= 1L;
  #L4ff9f8.  v5:= v5 + v8 @kind long;
  #L4ff9fa.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`long` := v5 @kind wide;
  #L4ff9fe.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ffa02.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ffa08.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4ffa0c.  call temp:= `create`(v5, v12) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4ffa12.  v5:= temp @kind object;
  #L4ffa14.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ffa1a.  v6:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4ffa1e.  call `<init>`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4ffa24.  call `onNext`(v1, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ffa2a.  v8:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.n` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ffa2e.  v9:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d$a`;
  #L4ffa32.  call `<init>`(v9, v12, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;Z)V` @kind direct;
  #L4ffa38.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4ffa3c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ffa40.  call temp:= `schedule`(v8, v9, v10, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ffa46.  call temp:= `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4ffa4c.  v6:= temp;
  #L4ffa4e.  if v6 == 0 then goto L4ff92a;
  #L4ffa52.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ffa58.  goto L4ff92a;
  #L4ffa5c.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4ffa60.  if v6 != v5 then goto L4ffa86;
  #L4ffa64.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4ffa6a.  v5:= temp;
  #L4ffa6c.  if v5 != 0 then goto L4ff92a;
  #L4ffa70.  call temp:= `remove`(v2, v7) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L4ffa76.  v5:= temp @kind object;
  #L4ffa78.  v5:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v5 @kind object;
  #L4ffa7c.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4ffa82.  goto L4ff92a;
  #L4ffa86.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ffa8c.  v5:= temp @kind object;
  #L4ffa8e.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ffa94.  v7:= temp;
  #L4ffa96.  if v7 == 0 then goto L4ff92a;
  #L4ffa9a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ffaa0.  v7:= temp @kind object;
  #L4ffaa2.  v7:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v7 @kind object;
  #L4ffaa6.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ffaac.  goto L4ffa8e;
  #L4ffaae.  v4:= -v4 @kind int;
  #L4ffab0.  call temp:= `addAndGet`(v12, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ffab6.  v4:= temp;
  #L4ffab8.  if v4 != 0 then goto L4ff92a;
  #L4ffabc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.e:(Z)V` @AccessFlag  {
    temp;
    v0;

  #L4ff808.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ff80c.  if v2 == 0 then goto L4ff816;
  #L4ff810.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.p` @type ^`java.lang.Object` @kind object;
  #L4ff814.  goto L4ff81a;
  #L4ff816.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d.q` @type ^`java.lang.Object` @kind object;
  #L4ff81a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff820.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.c:()V` @kind virtual;
  #L4ff826.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$d` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$d;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L4ffad0.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L4ffad6.  return @kind void;
}
