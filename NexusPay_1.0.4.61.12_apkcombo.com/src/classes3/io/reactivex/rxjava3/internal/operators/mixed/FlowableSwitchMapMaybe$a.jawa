record `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e3e84.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`;
  #L4e3e88.  v1:= 0I;
  #L4e3e8a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;)V` @kind direct;
  #L4e3e90.  `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` := v0 @kind object;
  #L4e3e94.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e3ea8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e3eae.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4e3eb2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e3eb6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4e3eba.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e3ebe.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e3ec4.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e3ec8.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4e3ecc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4e3ed2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4e3ed6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e3eda.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e3ee0.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e3ee4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e3f2c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3f30.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L4e3f34.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e3f3a.  v0:= temp @kind object;
  #L4e3f3c.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4e3f40.  if v0 == 0 then goto L4e3f52;
  #L4e3f44.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L4e3f48.  if v0 == v1 then goto L4e3f52;
  #L4e3f4c.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e3f52.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4e3f64.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e3f6a.  v0:= temp;
  #L4e3f6c.  if v0 == 0 then goto L4e3f72;
  #L4e3f70.  return @kind void;
  #L4e3f72.  v0:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e3f76.  v1:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3f7a.  v2:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e3f7e.  v3:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e3f82.  v4:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @type ^`long` @kind wide;
  #L4e3f86.  v6:= 1I;
  #L4e3f88.  v7:= 1I;
  #L4e3f8a.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4e3f8e.  if v8 == 0 then goto L4e3f94;
  #L4e3f92.  return @kind void;
  #L4e3f94.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e3f9a.  v8:= temp @kind object;
  #L4e3f9c.  if v8 == 0 then goto L4e3fb0;
  #L4e3fa0.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4e3fa4.  if v8 != 0 then goto L4e3fb0;
  #L4e3fa8.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e3fae.  return @kind void;
  #L4e3fb0.  v8:= v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4e3fb4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e3fba.  v9:= temp @kind object;
  #L4e3fbc.  v9:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v9 @kind object;
  #L4e3fc0.  if v9 != 0 then goto L4e3fc8;
  #L4e3fc4.  v10:= 1I;
  #L4e3fc6.  goto L4e3fca;
  #L4e3fc8.  v10:= 0I;
  #L4e3fca.  if v8 == 0 then goto L4e3fda;
  #L4e3fce.  if v10 == 0 then goto L4e3fda;
  #L4e3fd2.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4e3fd8.  return @kind void;
  #L4e3fda.  if v10 != 0 then goto L4e4012;
  #L4e3fde.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e3fe2.  if v8 == 0 then goto L4e4012;
  #L4e3fe6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4e3fec.  v10:= temp @kind wide;
  #L4e3fee.  v8:= lcmp(v4, v10);
  #L4e3ff2.  if v8 != 0 then goto L4e3ff8;
  #L4e3ff6.  goto L4e4012;
  #L4e3ff8.  v8:= 0I;
  #L4e3ffa.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e4000.  v8:= v9.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e4004.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e400a.  v8:= 1L;
  #L4e400e.  v4:= v4 + v8 @kind long;
  #L4e4010.  goto L4e3f8a;
  #L4e4012.  v12.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @type ^`long` := v4 @kind wide;
  #L4e4016.  v7:= -v7 @kind int;
  #L4e4018.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e401e.  v7:= temp;
  #L4e4020.  if v7 != 0 then goto L4e3f8a;
  #L4e4024.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e4038.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e403c.  v1:= 0I;
  #L4e403e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e4044.  v3:= temp;
  #L4e4046.  if v3 == 0 then goto L4e4050;
  #L4e404a.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e4050.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e3ef8.  v0:= 1I;
  #L4e3efa.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4e3efe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e3f02.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e3f08.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4e3f0e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e3f12.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e3f18.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.d:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e4064.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4068.  v1:= 0I;
  #L4e406a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e4070.  v3:= temp;
  #L4e4072.  if v3 == 0 then goto L4e40a6;
  #L4e4076.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e407a.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e4080.  v3:= temp;
  #L4e4082.  if v3 == 0 then goto L4e40ac;
  #L4e4086.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4e408a.  if v3 != 0 then goto L4e409e;
  #L4e408e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e4092.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e4098.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4e409e.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e40a4.  goto L4e40ac;
  #L4e40a6.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e40ac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e40c0.  v0:= 1I;
  #L4e40c2.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e40c6.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e40cc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e40e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e40e4.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e40ea.  v2:= temp;
  #L4e40ec.  if v2 == 0 then goto L4e410a;
  #L4e40f0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4e40f4.  if v2 != 0 then goto L4e40fe;
  #L4e40f8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4e40fe.  v2:= 1I;
  #L4e4100.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4e4104.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e410a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e411c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4120.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e4126.  v0:= temp @kind object;
  #L4e4128.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4e412c.  if v0 == 0 then goto L4e4136;
  #L4e4130.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e4136.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e413a.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e4140.  v4:= temp @kind object;
  #L4e4142.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4e4146.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e414c.  v4:= temp @kind object;
  #L4e414e.  v4:= (`io.reactivex.rxjava3.core.MaybeSource`) v4 @kind object;
  #L4e4152.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`;
  #L4e4156.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;)V` @kind direct;
  #L4e415c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e4160.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e4166.  v1:= temp @kind object;
  #L4e4168.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v1 @kind object;
  #L4e416c.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L4e4170.  if v1 != v2 then goto L4e4176;
  #L4e4174.  goto L4e418c;
  #L4e4176.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e417a.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e4180.  v1:= temp;
  #L4e4182.  if v1 == 0 then goto L4e415c;
  #L4e4186.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4e418c.  return @kind void;
  #L4e418e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e4190.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e4196.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e419a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4e41a0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e41a4.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L4e41a8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e41ae.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e41b4.  return @kind void;
  catch `java.lang.Throwable` @[L4e4136..L4e4152] goto L4e418e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e41d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4e41d8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4e41de.  v0:= temp;
  #L4e41e0.  if v0 == 0 then goto L4e4202;
  #L4e41e4.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4e41e8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4e41ec.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4e41f2.  v0:= 9223372036854775807L;
  #L4e41fc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4e4202.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4214.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4e4218.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4e421e.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e4224.  return @kind void;
}
