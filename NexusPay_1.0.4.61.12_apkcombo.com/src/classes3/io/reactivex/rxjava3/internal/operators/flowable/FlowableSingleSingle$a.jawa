record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d25e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d25ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4d25ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4d25f2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2604.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2608.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d260e.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d2612.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d2616.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d25c0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d25c4.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d25c8.  if v0 != v1 then goto L4d25d0;
  #L4d25cc.  v0:= 1I;
  #L4d25ce.  goto L4d25d2;
  #L4d25d0.  v0:= 0I;
  #L4d25d2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2628.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L4d262c.  if v0 == 0 then goto L4d2632;
  #L4d2630.  return @kind void;
  #L4d2632.  v0:= 1I;
  #L4d2634.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d2638.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d263c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d2640.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L4d2644.  v1:= 0I;
  #L4d2646.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v1 @kind object;
  #L4d264a.  if v0 != 0 then goto L4d2652;
  #L4d264e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L4d2652.  if v0 == 0 then goto L4d2662;
  #L4d2656.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d265a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d2660.  goto L4d2676;
  #L4d2662.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d2666.  v1:= new `java.util.NoSuchElementException`;
  #L4d266a.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4d2670.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d2676.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2688.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L4d268c.  if v0 == 0 then goto L4d2698;
  #L4d2690.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d2696.  return @kind void;
  #L4d2698.  v0:= 1I;
  #L4d269a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d269e.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d26a2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4d26a6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d26aa.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d26b0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d26c4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L4d26c8.  if v0 == 0 then goto L4d26ce;
  #L4d26cc.  return @kind void;
  #L4d26ce.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L4d26d2.  if v0 == 0 then goto L4d2708;
  #L4d26d6.  v3:= 1I;
  #L4d26d8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4d26dc.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d26e0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d26e6.  v3:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d26ea.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d26ee.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d26f2.  v0:= new `java.lang.IllegalArgumentException`;
  #L4d26f6.  v1:= "Sequence contains more than one element!" @kind object;
  #L4d26fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d2700.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d2706.  return @kind void;
  #L4d2708.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v3 @kind object;
  #L4d270c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSingleSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2720.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2724.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d272a.  v0:= temp;
  #L4d272c.  if v0 == 0 then goto L4d274e;
  #L4d2730.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d2734.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d2738.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4d273e.  v0:= 9223372036854775807L;
  #L4d2748.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d274e.  return @kind void;
}
