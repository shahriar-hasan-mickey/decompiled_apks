record `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e0bd4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e0bda.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4e0bde.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a`;
  #L4e0be2.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;)V` @kind direct;
  #L4e0be8.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` := v1 @kind object;
  #L4e0bec.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4e0cf8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0cfe.  v0:= temp;
  #L4e0d00.  if v0 == 0 then goto L4e0d0e;
  #L4e0d04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0d08.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e0d0e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e0d20.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0d26.  v0:= temp;
  #L4e0d28.  if v0 == 0 then goto L4e0d38;
  #L4e0d2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0d30.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e0d36.  goto L4e0d3e;
  #L4e0d38.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e0d3e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0c00.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0c06.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4e0c0a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0c10.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0bac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e0bb2.  v0:= temp @kind object;
  #L4e0bb4.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e0bb8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e0bbe.  v0:= temp;
  #L4e0bc0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0c24.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4e0c28.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0c2e.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0c32.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e0c38.  v0:= temp @kind object;
  #L4e0c3a.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0c3e.  if v0 == v1 then goto L4e0c4c;
  #L4e0c42.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0c46.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e0c4c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0c60.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4e0c64.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0c6a.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0c6e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e0c74.  v0:= temp @kind object;
  #L4e0c76.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0c7a.  if v0 == v1 then goto L4e0c8a;
  #L4e0c7e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0c82.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e0c88.  goto L4e0c90;
  #L4e0c8a.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e0c90.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e0ca4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e0caa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0cbc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L4e0cc0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0cc6.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0cca.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e0cd0.  v0:= temp @kind object;
  #L4e0cd2.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0cd6.  if v0 == v1 then goto L4e0ce4;
  #L4e0cda.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0cde.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e0ce4.  return @kind void;
}
