record `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a$a` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e4c64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e4c6a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4e4c6e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e4c72.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v3 @kind object;
  #L4e4c76.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.f` @type ^`int` := v4;
  #L4e4c7a.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e4c7e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e4c84.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e4c88.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a$a`;
  #L4e4c8c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;)V` @kind direct;
  #L4e4c92.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a$a` := v1 @kind object;
  #L4e4c96.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e4cf4.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e4cfa.  v0:= temp;
  #L4e4cfc.  if v0 == 0 then goto L4e4d02;
  #L4e4d00.  return @kind void;
  #L4e4d02.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e4d06.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e4d0a.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L4e4d0e.  if v2 == 0 then goto L4e4d1e;
  #L4e4d12.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4d16.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e4d1c.  return @kind void;
  #L4e4d1e.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` @kind boolean;
  #L4e4d22.  if v2 != 0 then goto L4e4dec;
  #L4e4d26.  v2:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e4d2a.  v3:= 1I;
  #L4e4d2c.  if v1 != v2 then goto L4e4d56;
  #L4e4d30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e4d36.  v2:= temp @kind object;
  #L4e4d38.  if v2 == 0 then goto L4e4d56;
  #L4e4d3c.  v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4e4d40.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4d44.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e4d4a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4d4e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e4d54.  return @kind void;
  #L4e4d56.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` @kind boolean;
  #L4e4d5a.  v4:= 0I;
  #L4e4d5c.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4d60.  call temp:= `poll`(v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e4d66.  v5:= temp @kind object;
  #L4e4d68.  if v5 == 0 then goto L4e4d8c;
  #L4e4d6c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e4d70.  call temp:= `apply`(v4, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e4d76.  v4:= temp @kind object;
  #L4e4d78.  v5:= "The mapper returned a null CompletableSource" @kind object;
  #L4e4d7c.  call temp:= `requireNonNull`(v4, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e4d82.  v4:= temp @kind object;
  #L4e4d84.  v4:= (`io.reactivex.rxjava3.core.CompletableSource`) v4 @kind object;
  #L4e4d88.  v5:= 0I;
  #L4e4d8a.  goto L4e4d8e;
  #L4e4d8c.  v5:= 1I;
  #L4e4d8e.  if v2 == 0 then goto L4e4da6;
  #L4e4d92.  if v5 == 0 then goto L4e4da6;
  #L4e4d96.  v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4e4d9a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4d9e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e4da4.  return @kind void;
  #L4e4da6.  if v5 != 0 then goto L4e4dec;
  #L4e4daa.  v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` := v3 @kind boolean;
  #L4e4dae.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a$a` @kind object;
  #L4e4db2.  call `subscribe`(v4, v2) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4e4db8.  goto L4e4dec;
  #L4e4dba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e4dbc.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e4dc2.  v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4e4dc6.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4dca.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e4dd0.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e4dd4.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e4dda.  call temp:= `tryAddThrowableOrReport`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e4de0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4de4.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e4dea.  return @kind void;
  #L4e4dec.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4e4df2.  v2:= temp;
  #L4e4df4.  if v2 != 0 then goto L4e4d0a;
  #L4e4df8.  return @kind void;
  catch `java.lang.Throwable` @[L4e4d5c..L4e4d88] goto L4e4dba;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4e4e18.  v0:= 0I;
  #L4e4e1a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4e4e1e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e4e24.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e4e38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e4e3c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e4e42.  v2:= temp;
  #L4e4e44.  if v2 == 0 then goto L4e4e96;
  #L4e4e48.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e4e4c.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e4e50.  if v2 != v0 then goto L4e4e8a;
  #L4e4e54.  v2:= 1I;
  #L4e4e56.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v2 @kind boolean;
  #L4e4e5a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e4e5e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e4e64.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e4e68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4e6c.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e4e72.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e4e78.  v2:= temp;
  #L4e4e7a.  if v2 != 0 then goto L4e4e96;
  #L4e4e7e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4e82.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e4e88.  goto L4e4e96;
  #L4e4e8a.  v2:= 0I;
  #L4e4e8c.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4e4e90.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e4e96.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4ca8.  v0:= 1I;
  #L4e4caa.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4e4cae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e4cb2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e4cb8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a$a` @kind object;
  #L4e4cbc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e4cc2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e4cc6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e4ccc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e4cd2.  v0:= temp;
  #L4e4cd4.  if v0 != 0 then goto L4e4ce2;
  #L4e4cd8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4cdc.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e4ce2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4c4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L4e4c50.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4ea8.  v0:= 1I;
  #L4e4eaa.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4e4eae.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e4eb4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e4ec8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e4ecc.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e4ed2.  v3:= temp;
  #L4e4ed4.  if v3 == 0 then goto L4e4f24;
  #L4e4ed8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e4edc.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4e4ee0.  v1:= 1I;
  #L4e4ee2.  if v3 != v0 then goto L4e4f1a;
  #L4e4ee6.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v1 @kind boolean;
  #L4e4eea.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a$a` @kind object;
  #L4e4eee.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L4e4ef4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e4ef8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4efc.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4e4f02.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e4f08.  v3:= temp;
  #L4e4f0a.  if v3 != 0 then goto L4e4f24;
  #L4e4f0e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4f12.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e4f18.  goto L4e4f24;
  #L4e4f1a.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` := v1 @kind boolean;
  #L4e4f1e.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e4f24.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e4f38.  if v2 == 0 then goto L4e4f46;
  #L4e4f3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4e4f40.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e4f46.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e4f4c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e4f60.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e4f64.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e4f6a.  v0:= temp;
  #L4e4f6c.  if v0 == 0 then goto L4e4fdc;
  #L4e4f70.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4e4f74.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4e4f78.  if v0 == 0 then goto L4e4fc0;
  #L4e4f7c.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4e4f80.  v0:= 3I;
  #L4e4f82.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4e4f88.  v0:= temp;
  #L4e4f8a.  v1:= 1I;
  #L4e4f8c.  if v0 != v1 then goto L4e4faa;
  #L4e4f90.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4e4f94.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` := v1 @kind boolean;
  #L4e4f98.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4f9c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e4fa2.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4e4fa8.  return @kind void;
  #L4e4faa.  v1:= 2I;
  #L4e4fac.  if v0 != v1 then goto L4e4fc0;
  #L4e4fb0.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4e4fb4.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4fb8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e4fbe.  return @kind void;
  #L4e4fc0.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4e4fc4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.f` @type ^`int`;
  #L4e4fc8.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4e4fce.  v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4e4fd2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4e4fd6.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e4fdc.  return @kind void;
}
