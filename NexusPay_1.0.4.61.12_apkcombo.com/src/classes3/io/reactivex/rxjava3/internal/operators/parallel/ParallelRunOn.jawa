record `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/core/Scheduler;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50488c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L504892.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L504896.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L50489a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.c` @type ^`int` := v3;
  #L50489e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn` v3 @kind this, `int` v4 , `org.reactivestreams.Subscriber`[] v5 @kind object, `org.reactivestreams.Subscriber`[] v6 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn;.a:(I[Lorg/reactivestreams/Subscriber;[Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L5048b0.  v5:= v5[v4] @kind object;
  #L5048b4.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L5048b8.  v1:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.c` @type ^`int`;
  #L5048bc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L5048c2.  v1:= instanceof @variable v5 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L5048c6.  if v1 == 0 then goto L5048e2;
  #L5048ca.  v1:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$c`;
  #L5048ce.  v5:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v5 @kind object;
  #L5048d2.  v2:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.c` @type ^`int`;
  #L5048d6.  call `<init>`(v1, v5, v2, v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$c;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;ILio/reactivex/rxjava3/internal/queue/SpscArrayQueue;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L5048dc.  v6[v4]:= v1 @kind object;
  #L5048e0.  goto L5048f4;
  #L5048e2.  v1:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$d`;
  #L5048e6.  v2:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.c` @type ^`int`;
  #L5048ea.  call `<init>`(v1, v5, v2, v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$d;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/rxjava3/internal/queue/SpscArrayQueue;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L5048f0.  v6[v4]:= v1 @kind object;
  #L5048f4.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50486c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L504870.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L504876.  v0:= temp;
  #L504878.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn` v4 @kind this, `org.reactivestreams.Subscriber`[] v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L504908.  call temp:= `validate`(v4, v5) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L50490e.  v0:= temp;
  #L504910.  if v0 != 0 then goto L504916;
  #L504914.  return @kind void;
  #L504916.  v0:= length @variable v5;
  #L504918.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L50491c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L504920.  v3:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport` @kind boolean;
  #L504924.  if v3 == 0 then goto L50493e;
  #L504928.  v2:= (`io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport`) v2 @kind object;
  #L50492c.  v3:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$b`;
  #L504930.  call `<init>`(v3, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn;[Lorg/reactivestreams/Subscriber;[Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L504936.  call `createWorkers`(v2, v0, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport;.createWorkers:(ILio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @kind interface;
  #L50493c.  goto L50495c;
  #L50493e.  v2:= 0I;
  #L504940.  if v2 >= v0 then goto L50495c;
  #L504944.  v3:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L504948.  call temp:= `createWorker`(v3) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L50494e.  v3:= temp @kind object;
  #L504950.  call `a`(v4, v2, v5, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn;.a:(I[Lorg/reactivestreams/Subscriber;[Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind virtual;
  #L504956.  v2:= v2 + 1;
  #L50495a.  goto L504940;
  #L50495c.  v5:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L504960.  call `subscribe`(v5, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L504966.  return @kind void;
}
