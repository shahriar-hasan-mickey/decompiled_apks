record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bcc10.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;I)V` @kind direct;
  #L4bcc16.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4bcc1a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4bcc1e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bcc24.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4bcc28.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bce50.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bce54.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bce5a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bce5e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bce62.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4bce68.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bce7c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bce80.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bce84.  call temp:= `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @kind static;
  #L4bce8a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcc3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4bcc40.  if v0 != 0 then goto L4bcc68;
  #L4bcc44.  v0:= 1I;
  #L4bcc46.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4bcc4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcc4e.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4bcc54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcc58.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bcc5e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcc62.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bcc68.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bcc7c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bcc80.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bcc86.  v0:= temp;
  #L4bcc88.  if v0 != 0 then goto L4bce1a;
  #L4bcc8c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4bcc90.  if v0 == 0 then goto L4bcc96;
  #L4bcc94.  return @kind void;
  #L4bcc96.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` @kind boolean;
  #L4bcc9a.  if v0 != 0 then goto L4bce0a;
  #L4bcc9e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L4bcca2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bcca6.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bccac.  v1:= temp @kind object;
  #L4bccae.  v2:= 0I;
  #L4bccb0.  v3:= 1I;
  #L4bccb2.  if v1 != 0 then goto L4bccba;
  #L4bccb6.  v4:= 1I;
  #L4bccb8.  goto L4bccbc;
  #L4bccba.  v4:= 0I;
  #L4bccbc.  if v0 == 0 then goto L4bccd0;
  #L4bccc0.  if v4 == 0 then goto L4bccd0;
  #L4bccc4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bccc8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4bccce.  return @kind void;
  #L4bccd0.  if v4 != 0 then goto L4bce0a;
  #L4bccd4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bccd8.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bccde.  v0:= temp @kind object;
  #L4bcce0.  v1:= "The mapper returned a null Publisher" @kind object;
  #L4bcce4.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bccea.  v0:= temp @kind object;
  #L4bccec.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L4bccf0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int`;
  #L4bccf4.  if v1 == v3 then goto L4bcd1c;
  #L4bccf8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int`;
  #L4bccfc.  v1:= v1 + v3 @kind int;
  #L4bccfe.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`int`;
  #L4bcd02.  if v1 != v4 then goto L4bcd18;
  #L4bcd06.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v2;
  #L4bcd0a.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcd0e.  v4:= (`long`) v1 @kind i2l;
  #L4bcd10.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bcd16.  goto L4bcd1c;
  #L4bcd18.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v1;
  #L4bcd1c.  v1:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4bcd20.  if v1 == 0 then goto L4bcda2;
  #L4bcd24.  v0:= (`io.reactivex.rxjava3.functions.Supplier`) v0 @kind object;
  #L4bcd28.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bcd2e.  v0:= temp @kind object;
  #L4bcd30.  if v0 != 0 then goto L4bcd36;
  #L4bcd34.  goto L4bcc8c;
  #L4bcd36.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcd3a.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L4bcd40.  v1:= temp;
  #L4bcd42.  if v1 == 0 then goto L4bcd5c;
  #L4bcd46.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcd4a.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcd4e.  call temp:= `onNext`(v1, v0, v6, v2) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @kind static;
  #L4bcd54.  v0:= temp;
  #L4bcd56.  if v0 != 0 then goto L4bcc8c;
  #L4bcd5a.  return @kind void;
  #L4bcd5c.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L4bcd60.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcd64.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$g`;
  #L4bcd68.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4bcd6e.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4bcd74.  goto L4bce0a;
  #L4bcd76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bcd78.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bcd7e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcd82.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bcd88.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcd8c.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bcd92.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcd96.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcd9a.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bcda0.  return @kind void;
  #L4bcda2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L4bcda6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcdaa.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4bcdb0.  goto L4bce0a;
  #L4bcdb2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bcdb4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bcdba.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcdbe.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bcdc4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcdc8.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bcdce.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcdd2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcdd6.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bcddc.  return @kind void;
  #L4bcdde.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bcde0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bcde6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcdea.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bcdf0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcdf4.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bcdfa.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcdfe.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bce02.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bce08.  return @kind void;
  #L4bce0a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bce0e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bce14.  v0:= temp;
  #L4bce16.  if v0 != 0 then goto L4bcc8c;
  #L4bce1a.  return @kind void;
  catch `java.lang.Throwable` @[L4bcca2..L4bccae] goto L4bcdde;
  catch `java.lang.Throwable` @[L4bccd4..L4bccf0] goto L4bcdb2;
  catch `java.lang.Throwable` @[L4bcd28..L4bcd30] goto L4bcd76;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4bcee4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcee8.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bceee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bce9c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcea0.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4bcea6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bceaa.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bceae.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4bceb4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcec8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcecc.  call `request`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L4bced2.  return @kind void;
}
