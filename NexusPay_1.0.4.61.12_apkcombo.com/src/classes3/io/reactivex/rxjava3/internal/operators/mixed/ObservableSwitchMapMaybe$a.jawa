record `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e5d40.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`;
  #L4e5d44.  v1:= 0I;
  #L4e5d46.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;)V` @kind direct;
  #L4e5d4c.  `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` := v0 @kind object;
  #L4e5d50.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e5d64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4e5d6a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4e5d6e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4e5d72.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L4e5d76.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4e5d7a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4e5d80.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4e5d84.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e5d88.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e5d8e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4e5d92.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e5dd8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5ddc.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L4e5de0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e5de6.  v0:= temp @kind object;
  #L4e5de8.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4e5dec.  if v0 == 0 then goto L4e5dfe;
  #L4e5df0.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L4e5df4.  if v0 == v1 then goto L4e5dfe;
  #L4e5df8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e5dfe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4e5e10.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4e5e16.  v0:= temp;
  #L4e5e18.  if v0 == 0 then goto L4e5e1e;
  #L4e5e1c.  return @kind void;
  #L4e5e1e.  v0:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e5e22.  v1:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5e26.  v2:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5e2a.  v3:= 1I;
  #L4e5e2c.  v4:= 1I;
  #L4e5e2e.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4e5e32.  if v5 == 0 then goto L4e5e38;
  #L4e5e36.  return @kind void;
  #L4e5e38.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5e3e.  v5:= temp @kind object;
  #L4e5e40.  if v5 == 0 then goto L4e5e54;
  #L4e5e44.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4e5e48.  if v5 != 0 then goto L4e5e54;
  #L4e5e4c.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e5e52.  return @kind void;
  #L4e5e54.  v5:= v8.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` @kind boolean;
  #L4e5e58.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5e5e.  v6:= temp @kind object;
  #L4e5e60.  v6:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v6 @kind object;
  #L4e5e64.  if v6 != 0 then goto L4e5e6c;
  #L4e5e68.  v7:= 1I;
  #L4e5e6a.  goto L4e5e6e;
  #L4e5e6c.  v7:= 0I;
  #L4e5e6e.  if v5 == 0 then goto L4e5e7e;
  #L4e5e72.  if v7 == 0 then goto L4e5e7e;
  #L4e5e76.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4e5e7c.  return @kind void;
  #L4e5e7e.  if v7 != 0 then goto L4e5ea0;
  #L4e5e82.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e5e86.  if v5 != 0 then goto L4e5e8c;
  #L4e5e8a.  goto L4e5ea0;
  #L4e5e8c.  v5:= 0I;
  #L4e5e8e.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e5e94.  v5:= v6.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L4e5e98.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e5e9e.  goto L4e5e2e;
  #L4e5ea0.  v4:= -v4 @kind int;
  #L4e5ea2.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4e5ea8.  v4:= temp;
  #L4e5eaa.  if v4 != 0 then goto L4e5e2e;
  #L4e5eae.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.c:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e5ec0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5ec4.  v1:= 0I;
  #L4e5ec6.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e5ecc.  v3:= temp;
  #L4e5ece.  if v3 == 0 then goto L4e5ed8;
  #L4e5ed2.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e5ed8.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.d:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e5eec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5ef0.  v1:= 0I;
  #L4e5ef2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e5ef8.  v3:= temp;
  #L4e5efa.  if v3 == 0 then goto L4e5f2e;
  #L4e5efe.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5f02.  call temp:= `tryAddThrowableOrReport`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e5f08.  v3:= temp;
  #L4e5f0a.  if v3 == 0 then goto L4e5f34;
  #L4e5f0e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4e5f12.  if v3 != 0 then goto L4e5f26;
  #L4e5f16.  v3:= v2.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5f1a.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e5f20.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4e5f26.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e5f2c.  goto L4e5f34;
  #L4e5f2e.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e5f34.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5da4.  v0:= 1I;
  #L4e5da6.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4e5daa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e5dae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e5db4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4e5dba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5dbe.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4e5dc4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5d28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4e5d2c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5f48.  v0:= 1I;
  #L4e5f4a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4e5f4e.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e5f54.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5f68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4e5f6c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4e5f72.  v2:= temp;
  #L4e5f74.  if v2 == 0 then goto L4e5f92;
  #L4e5f78.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4e5f7c.  if v2 != 0 then goto L4e5f86;
  #L4e5f80.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L4e5f86.  v2:= 1I;
  #L4e5f88.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4e5f8c.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L4e5f92.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e5fa4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5fa8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5fae.  v0:= temp @kind object;
  #L4e5fb0.  v0:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v0 @kind object;
  #L4e5fb4.  if v0 == 0 then goto L4e5fbe;
  #L4e5fb8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L4e5fbe.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4e5fc2.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4e5fc8.  v4:= temp @kind object;
  #L4e5fca.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4e5fce.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e5fd4.  v4:= temp @kind object;
  #L4e5fd6.  v4:= (`io.reactivex.rxjava3.core.MaybeSource`) v4 @kind object;
  #L4e5fda.  v0:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`;
  #L4e5fde.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;)V` @kind direct;
  #L4e5fe4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e5fe8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e5fee.  v1:= temp @kind object;
  #L4e5ff0.  v1:= (`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v1 @kind object;
  #L4e5ff4.  v2:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L4e5ff8.  if v1 != v2 then goto L4e5ffe;
  #L4e5ffc.  goto L4e6014;
  #L4e5ffe.  v2:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e6002.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e6008.  v1:= temp;
  #L4e600a.  if v1 == 0 then goto L4e5fe4;
  #L4e600e.  call `subscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4e6014.  return @kind void;
  #L4e6016.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e6018.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e601e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e6022.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e6028.  v0:= v3.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e602c.  v1:= `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L4e6030.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e6036.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4e603c.  return @kind void;
  catch `java.lang.Throwable` @[L4e5fbe..L4e5fda] goto L4e6016;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e605c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e6060.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e6066.  v0:= temp;
  #L4e6068.  if v0 == 0 then goto L4e607a;
  #L4e606c.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4e6070.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e6074.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e607a.  return @kind void;
}
