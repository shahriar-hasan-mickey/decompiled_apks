record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bc8dc.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;I)V` @kind direct;
  #L4bc8e2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4bc8e6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` := v4 @kind boolean;
  #L4bc8ea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcb44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcb48.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bcb4e.  v2:= temp;
  #L4bcb50.  if v2 == 0 then goto L4bcb78;
  #L4bcb54.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L4bcb58.  if v2 != 0 then goto L4bcb6c;
  #L4bcb5c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcb60.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bcb66.  v2:= 1I;
  #L4bcb68.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4bcb6c.  v2:= 0I;
  #L4bcb6e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v2 @kind boolean;
  #L4bcb72.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @kind virtual;
  #L4bcb78.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcb8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcb90.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bcb96.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc8fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4bc900.  if v0 != 0 then goto L4bc928;
  #L4bc904.  v0:= 1I;
  #L4bc906.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4bc90a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bc90e.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4bc914.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bc918.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bc91e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bc922.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bc928.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bc93c.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bc942.  v0:= temp;
  #L4bc944.  if v0 != 0 then goto L4bcb0c;
  #L4bc948.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4bc94c.  if v0 == 0 then goto L4bc952;
  #L4bc950.  return @kind void;
  #L4bc952.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` @kind boolean;
  #L4bc956.  if v0 != 0 then goto L4bcb00;
  #L4bc95a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L4bc95e.  if v0 == 0 then goto L4bc98e;
  #L4bc962.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L4bc966.  if v1 != 0 then goto L4bc98e;
  #L4bc96a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bc96e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bc974.  v1:= temp @kind object;
  #L4bc976.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4bc97a.  if v1 == 0 then goto L4bc98e;
  #L4bc97e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bc982.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc986.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bc98c.  return @kind void;
  #L4bc98e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bc992.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bc998.  v1:= temp @kind object;
  #L4bc99a.  v2:= 0I;
  #L4bc99c.  v3:= 1I;
  #L4bc99e.  if v1 != 0 then goto L4bc9a6;
  #L4bc9a2.  v4:= 1I;
  #L4bc9a4.  goto L4bc9a8;
  #L4bc9a6.  v4:= 0I;
  #L4bc9a8.  if v0 == 0 then goto L4bc9c0;
  #L4bc9ac.  if v4 == 0 then goto L4bc9c0;
  #L4bc9b0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bc9b4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc9b8.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bc9be.  return @kind void;
  #L4bc9c0.  if v4 != 0 then goto L4bcb00;
  #L4bc9c4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bc9c8.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bc9ce.  v0:= temp @kind object;
  #L4bc9d0.  v1:= "The mapper returned a null Publisher" @kind object;
  #L4bc9d4.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bc9da.  v0:= temp @kind object;
  #L4bc9dc.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L4bc9e0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int`;
  #L4bc9e4.  if v1 == v3 then goto L4bca0c;
  #L4bc9e8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int`;
  #L4bc9ec.  v1:= v1 + v3 @kind int;
  #L4bc9ee.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`int`;
  #L4bc9f2.  if v1 != v4 then goto L4bca08;
  #L4bc9f6.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v2;
  #L4bc9fa.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bc9fe.  v4:= (`long`) v1 @kind i2l;
  #L4bca00.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bca06.  goto L4bca0c;
  #L4bca08.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v1;
  #L4bca0c.  v1:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4bca10.  if v1 == 0 then goto L4bca98;
  #L4bca14.  v0:= (`io.reactivex.rxjava3.functions.Supplier`) v0 @kind object;
  #L4bca18.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bca1e.  v0:= temp @kind object;
  #L4bca20.  goto L4bca58;
  #L4bca22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bca24.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bca2a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bca2e.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bca34.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L4bca38.  if v0 != 0 then goto L4bca56;
  #L4bca3c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bca40.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bca46.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bca4a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bca4e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bca54.  return @kind void;
  #L4bca56.  v0:= 0I;
  #L4bca58.  if v0 != 0 then goto L4bca60;
  #L4bca5c.  goto L4bc948;
  #L4bca60.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bca64.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L4bca6a.  v1:= temp;
  #L4bca6c.  if v1 == 0 then goto L4bca7e;
  #L4bca70.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bca74.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bca7a.  goto L4bc948;
  #L4bca7e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L4bca82.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bca86.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$g`;
  #L4bca8a.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4bca90.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4bca96.  goto L4bcb00;
  #L4bca98.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L4bca9c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcaa0.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4bcaa6.  goto L4bcb00;
  #L4bcaa8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bcaaa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bcab0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcab4.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bcaba.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcabe.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bcac4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcac8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcacc.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bcad2.  return @kind void;
  #L4bcad4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bcad6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bcadc.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bcae0.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bcae6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcaea.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bcaf0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcaf4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcaf8.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bcafe.  return @kind void;
  #L4bcb00.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bcb06.  v0:= temp;
  #L4bcb08.  if v0 != 0 then goto L4bc948;
  #L4bcb0c.  return @kind void;
  catch `java.lang.Throwable` @[L4bc98e..L4bc99a] goto L4bcad4;
  catch `java.lang.Throwable` @[L4bc9c4..L4bc9e0] goto L4bcaa8;
  catch `java.lang.Throwable` @[L4bca18..L4bca20] goto L4bca22;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4bcbf4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bcbf8.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bcbfe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcba8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bcbac.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bcbb2.  v2:= temp;
  #L4bcbb4.  if v2 == 0 then goto L4bcbc4;
  #L4bcbb8.  v2:= 1I;
  #L4bcbba.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4bcbbe.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @kind virtual;
  #L4bcbc4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bcbd8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bcbdc.  call `request`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L4bcbe2.  return @kind void;
}
