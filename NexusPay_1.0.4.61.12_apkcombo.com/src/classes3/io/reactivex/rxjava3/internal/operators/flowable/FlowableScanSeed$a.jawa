record `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1438.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d143e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d1442.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4d1446.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L4d144a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int` := v4;
  #L4d144e.  v1:= v4 ^> 2;
  #L4d1452.  v1:= v4 - v1 @kind int;
  #L4d1456.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int` := v1;
  #L4d145a.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4d145e.  call `<init>`(v1, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4d1464.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4d1468.  call temp:= `offer`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d146e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d1472.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d1478.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d147c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4d14c8.  v0:= v18 @kind object;
  #L4d14cc.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d14d2.  v1:= temp;
  #L4d14d4.  if v1 == 0 then goto L4d14da;
  #L4d14d8.  return @kind void;
  #L4d14da.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d14de.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d14e2.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int`;
  #L4d14e6.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int`;
  #L4d14ea.  v5:= 1I;
  #L4d14ec.  v6:= 1I;
  #L4d14ee.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d14f2.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d14f8.  v7:= temp @kind wide;
  #L4d14fa.  v9:= 0L;
  #L4d14fe.  v11:= v9 @kind wide;
  #L4d1500.  v13:= lcmp(v11, v7);
  #L4d1504.  if v13 == 0 then goto L4d158a;
  #L4d1508.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` @kind boolean;
  #L4d150c.  if v14 == 0 then goto L4d1518;
  #L4d1510.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d1516.  return @kind void;
  #L4d1518.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4d151c.  if v14 == 0 then goto L4d1536;
  #L4d1520.  v15:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4d1524.  if v15 == 0 then goto L4d1536;
  #L4d1528.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d152e.  call `onError`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d1534.  return @kind void;
  #L4d1536.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d153c.  v15:= temp @kind object;
  #L4d153e.  v16:= 0I;
  #L4d1542.  if v15 != 0 then goto L4d154c;
  #L4d1546.  v17:= 1I;
  #L4d154a.  goto L4d1550;
  #L4d154c.  v17:= 0I;
  #L4d1550.  if v14 == 0 then goto L4d1560;
  #L4d1554.  if v17 == 0 then goto L4d1560;
  #L4d1558.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d155e.  return @kind void;
  #L4d1560.  if v17 == 0 then goto L4d1566;
  #L4d1564.  goto L4d158a;
  #L4d1566.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d156c.  v13:= 1L;
  #L4d1570.  v11:= v11 + v13 @kind long;
  #L4d1572.  v4:= v4 + 1;
  #L4d1576.  if v4 != v3 then goto L4d1500;
  #L4d157a.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d157e.  v13:= (`long`) v3 @kind i2l;
  #L4d1580.  call `request`(v4, v13) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1586.  v4:= 0I;
  #L4d1588.  goto L4d1500;
  #L4d158a.  if v13 != 0 then goto L4d15c0;
  #L4d158e.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4d1592.  if v7 == 0 then goto L4d15c0;
  #L4d1596.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4d159a.  if v7 == 0 then goto L4d15ac;
  #L4d159e.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d15a4.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d15aa.  return @kind void;
  #L4d15ac.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4d15b2.  v7:= temp;
  #L4d15b4.  if v7 == 0 then goto L4d15c0;
  #L4d15b8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d15be.  return @kind void;
  #L4d15c0.  v7:= lcmp(v11, v9);
  #L4d15c4.  if v7 == 0 then goto L4d15d2;
  #L4d15c8.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d15cc.  call temp:= `produced`(v7, v11) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d15d2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int` := v4;
  #L4d15d6.  v6:= -v6 @kind int;
  #L4d15d8.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d15de.  v6:= temp;
  #L4d15e0.  if v6 != 0 then goto L4d14ee;
  #L4d15e4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1490.  v0:= 1I;
  #L4d1492.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4d1496.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d149a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d14a0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d14a6.  v0:= temp;
  #L4d14a8.  if v0 != 0 then goto L4d14b6;
  #L4d14ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d14b0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d14b6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d15f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4d15fc.  if v0 == 0 then goto L4d1602;
  #L4d1600.  return @kind void;
  #L4d1602.  v0:= 1I;
  #L4d1604.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4d1608.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4d160e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1620.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4d1624.  if v0 == 0 then goto L4d1630;
  #L4d1628.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d162e.  return @kind void;
  #L4d1630.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4d1634.  v2:= 1I;
  #L4d1636.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4d163a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4d1640.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d1654.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4d1658.  if v0 == 0 then goto L4d165e;
  #L4d165c.  return @kind void;
  #L4d165e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` @kind object;
  #L4d1662.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d1666.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d166c.  v3:= temp @kind object;
  #L4d166e.  v0:= "The accumulator returned a null value" @kind object;
  #L4d1672.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1678.  v3:= temp @kind object;
  #L4d167a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L4d167e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d1682.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d1688.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4d168e.  return @kind void;
  #L4d1690.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1692.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1698.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d169c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d16a2.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d16a8.  return @kind void;
  catch `java.lang.Throwable` @[L4d1662..L4d167a] goto L4d1690;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d16c8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d16cc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d16d2.  v0:= temp;
  #L4d16d4.  if v0 == 0 then goto L4d16f6;
  #L4d16d8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d16dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d16e0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d16e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int`;
  #L4d16ea.  v0:= v0 + -1;
  #L4d16ee.  v0:= (`long`) v0 @kind i2l;
  #L4d16f0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d16f6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1708.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d170e.  v0:= temp;
  #L4d1710.  if v0 == 0 then goto L4d1724;
  #L4d1714.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1718.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d171e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4d1724.  return @kind void;
}
