record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4de1a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4de1ae.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4de1b2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4de1b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4de1c8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4de1ce.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de180.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4de186.  v0:= temp @kind object;
  #L4de188.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4de18c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4de192.  v0:= temp;
  #L4de194.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de1e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de1e4.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4de1ea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4de1fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de200.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4de206.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4de218.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4de21e.  v1:= temp;
  #L4de220.  if v1 == 0 then goto L4de22e;
  #L4de224.  v1:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de228.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4de22e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4de240.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4de244.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4de24a.  v3:= temp @kind object;
  #L4de24c.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4de250.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4de256.  v3:= temp @kind object;
  #L4de258.  v3:= (`io.reactivex.rxjava3.core.SingleSource`) v3 @kind object;
  #L4de25c.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @kind virtual;
  #L4de262.  v0:= temp;
  #L4de264.  if v0 != 0 then goto L4de27c;
  #L4de268.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b`;
  #L4de26c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4de270.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind direct;
  #L4de276.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4de27c.  return @kind void;
  #L4de27e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4de280.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4de286.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4de28c.  return @kind void;
  catch `java.lang.Throwable` @[L4de240..L4de25c] goto L4de27e;
}
