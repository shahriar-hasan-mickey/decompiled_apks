record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fe870.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4fe876.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fe87a.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4fe87e.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4fe884.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4fe888.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4fe88c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4fe890.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`int` := v4;
  #L4fe894.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4fe898.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4fe89e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4fe8a2.  v1:= new `java.util.ArrayList`;
  #L4fe8a6.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4fe8ac.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` := v1 @kind object;
  #L4fe8b0.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4fe8b4.  v2:= 1L;
  #L4fe8b8.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4fe8be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4fe8c2.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4fe8c6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4fe8cc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4fe8d0.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4fe8d4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4fe8da.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4fe8de.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c`;
  #L4fe8e2.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;)V` @kind direct;
  #L4fe8e8.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` := v1 @kind object;
  #L4fe8ec.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4fe8f0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4fe8f6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4fe908.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4fe90c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4fe912.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fe918.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4fe92c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fe930.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fe936.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4fe93a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4fe940.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4fe944.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4fe94a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fe94e.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fe954.  v2:= temp;
  #L4fe956.  if v2 == 0 then goto L4fe966;
  #L4fe95a.  v2:= 1I;
  #L4fe95c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4fe960.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fe966.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4fe9f4.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4fe9fa.  v0:= temp;
  #L4fe9fc.  if v0 == 0 then goto L4fea02;
  #L4fea00.  return @kind void;
  #L4fea02.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fea06.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4fea0a.  v2:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4fea0e.  v3:= 1I;
  #L4fea10.  v4:= 1I;
  #L4fea12.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @type ^`boolean` @kind boolean;
  #L4fea16.  if v5 == 0 then goto L4fea2a;
  #L4fea1a.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4fea20.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4fea26.  goto L4febcc;
  #L4fea2a.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` @kind boolean;
  #L4fea2e.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4fea34.  v6:= temp @kind object;
  #L4fea36.  if v6 != 0 then goto L4fea3e;
  #L4fea3a.  v7:= 1I;
  #L4fea3c.  goto L4fea40;
  #L4fea3e.  v7:= 0I;
  #L4fea40.  if v5 == 0 then goto L4fea64;
  #L4fea44.  if v7 != 0 then goto L4fea58;
  #L4fea48.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fea4c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4fea52.  v5:= temp @kind object;
  #L4fea54.  if v5 == 0 then goto L4fea64;
  #L4fea58.  call `g`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4fea5e.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4fea62.  goto L4fea12;
  #L4fea64.  if v7 != 0 then goto L4feb8c;
  #L4fea68.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b` @kind boolean;
  #L4fea6c.  if v5 == 0 then goto L4feb34;
  #L4fea70.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fea74.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fea7a.  v5:= temp;
  #L4fea7c.  if v5 != 0 then goto L4fea12;
  #L4fea80.  v6:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b`) v6 @kind object;
  #L4fea84.  v5:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b.a` @type ^`java.lang.Object` @kind object;
  #L4fea88.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4fea8c.  call temp:= `apply`(v6, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4fea92.  v5:= temp @kind object;
  #L4fea94.  v6:= "The closingIndicator returned a null ObservableSource" @kind object;
  #L4fea98.  call temp:= `requireNonNull`(v5, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4fea9e.  v5:= temp @kind object;
  #L4feaa0.  v5:= (`io.reactivex.rxjava3.core.ObservableSource`) v5 @kind object;
  #L4feaa4.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4feaa8.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4feaae.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.d` @type ^`int`;
  #L4feab2.  call temp:= `create`(v6, v9) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4feab8.  v6:= temp @kind object;
  #L4feaba.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a`;
  #L4feabe.  call `<init>`(v7, v9, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;Lio/reactivex/rxjava3/subjects/UnicastSubject;)V` @kind direct;
  #L4feac4.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4feaca.  call temp:= `a`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$a;.a:()Z` @kind virtual;
  #L4fead0.  v8:= temp;
  #L4fead2.  if v8 == 0 then goto L4feade;
  #L4fead6.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4feadc.  goto L4fea12;
  #L4feade.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4feae4.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4feae8.  call temp:= `add`(v6, v7) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4feaee.  call `subscribe`(v5, v7) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4feaf4.  goto L4fea12;
  #L4feaf6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4feaf8.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4feafe.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4feb02.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4feb08.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4feb0c.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4feb12.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4feb16.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4feb1c.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4feb22.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4feb26.  call temp:= `tryAddThrowableOrReport`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4feb2c.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4feb30.  goto L4fea12;
  #L4feb34.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a` @kind boolean;
  #L4feb38.  if v5 == 0 then goto L4feb64;
  #L4feb3c.  v5:= v6 @kind object;
  #L4feb3e.  v5:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a`) v5 @kind object;
  #L4feb42.  v5:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$a.b` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4feb46.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4feb4c.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4feb50.  v6:= (`io.reactivex.rxjava3.disposables.Disposable`) v6 @kind object;
  #L4feb54.  call temp:= `delete`(v7, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4feb5a.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4feb60.  goto L4fea12;
  #L4feb64.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4feb6a.  v5:= temp @kind object;
  #L4feb6c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4feb72.  v7:= temp;
  #L4feb74.  if v7 == 0 then goto L4fea12;
  #L4feb78.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4feb7e.  v7:= temp @kind object;
  #L4feb80.  v7:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v7 @kind object;
  #L4feb84.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4feb8a.  goto L4feb6c;
  #L4feb8c.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` @kind boolean;
  #L4feb90.  if v5 == 0 then goto L4febcc;
  #L4feb94.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4feb9a.  v5:= temp;
  #L4feb9c.  if v5 != 0 then goto L4febcc;
  #L4feba0.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4feba4.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4febaa.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4febae.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4febb4.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4febb8.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4febbe.  call `g`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4febc4.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @type ^`boolean` := v3 @kind boolean;
  #L4febc8.  goto L4fea12;
  #L4febcc.  v4:= -v4 @kind int;
  #L4febce.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4febd4.  v4:= temp;
  #L4febd6.  if v4 != 0 then goto L4fea12;
  #L4febda.  return @kind void;
  catch `java.lang.Throwable` @[L4fea88..L4feaa4] goto L4feaf6;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4fecd4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4fecd8.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$b`;
  #L4fecdc.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4fece2.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4fece8.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fecee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4fe978.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe97c.  v1:= 0I;
  #L4fe97e.  v2:= 1I;
  #L4fe980.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4fe986.  v0:= temp;
  #L4fe988.  if v0 == 0 then goto L4fe9e2;
  #L4fe98c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4fe990.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4fe996.  v0:= temp @kind wide;
  #L4fe998.  v3:= 0L;
  #L4fe99c.  v5:= lcmp(v0, v3);
  #L4fe9a0.  if v5 != 0 then goto L4fe9d8;
  #L4fe9a4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fe9a8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fe9ae.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4fe9b2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4fe9b8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4fe9bc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4fe9c2.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fe9c6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4fe9cc.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @type ^`boolean` := v2 @kind boolean;
  #L4fe9d0.  call `c`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fe9d6.  goto L4fe9e2;
  #L4fe9d8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4fe9dc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4fe9e2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4fed00.  v0:= 1I;
  #L4fed02.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4fed06.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fed0c.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.f:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4fed20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fed24.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fed2a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4fed2e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4fed34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fed38.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fed3e.  v2:= temp;
  #L4fed40.  if v2 == 0 then goto L4fed50;
  #L4fed44.  v2:= 1I;
  #L4fed46.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4fed4a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fed50.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4fedc4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fedc8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4fedce.  v0:= temp @kind object;
  #L4fedd0.  if v0 != 0 then goto L4fee08;
  #L4fedd4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4fedd8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4fedde.  v0:= temp @kind object;
  #L4fede0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4fede6.  v1:= temp;
  #L4fede8.  if v1 == 0 then goto L4fee00;
  #L4fedec.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4fedf2.  v1:= temp @kind object;
  #L4fedf4.  v1:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v1 @kind object;
  #L4fedf8.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fedfe.  goto L4fede0;
  #L4fee00.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fee06.  goto L4fee42;
  #L4fee08.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4fee0c.  if v0 == v1 then goto L4fee42;
  #L4fee10.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4fee14.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4fee1a.  v1:= temp @kind object;
  #L4fee1c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4fee22.  v2:= temp;
  #L4fee24.  if v2 == 0 then goto L4fee3c;
  #L4fee28.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4fee2e.  v2:= temp @kind object;
  #L4fee30.  v2:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v2 @kind object;
  #L4fee34.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fee3a.  goto L4fee1c;
  #L4fee3c.  call `onError`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fee42.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe850.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fe854.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fe85a.  v0:= temp;
  #L4fe85c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4febf8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4febfc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4fec02.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4fec06.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4fec0c.  v0:= 1I;
  #L4fec0e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4fec12.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fec18.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fec2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4fec30.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4fec36.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4fec3a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4fec40.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fec44.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4fec4a.  v2:= temp;
  #L4fec4c.  if v2 == 0 then goto L4fec5c;
  #L4fec50.  v2:= 1I;
  #L4fec52.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.l` @type ^`boolean` := v2 @kind boolean;
  #L4fec56.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fec5c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fec70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4fec74.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4fec7a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fec80.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fec94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fec98.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fec9e.  v0:= temp;
  #L4feca0.  if v0 == 0 then goto L4fecc0;
  #L4feca4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4feca8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fecac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fecb2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4fecb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4fecba.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4fecc0.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fed64.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4fed68.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4fed6e.  v0:= temp @kind wide;
  #L4fed70.  v2:= 0L;
  #L4fed74.  v4:= lcmp(v0, v2);
  #L4fed78.  if v4 != 0 then goto L4fedb0;
  #L4fed7c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.o` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fed80.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fed86.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a$c` @kind object;
  #L4fed8a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4fed90.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4fed94.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4fed9a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.n` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4fed9e.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4feda4.  v0:= 1I;
  #L4feda6.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4fedaa.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4fedb0.  return @kind void;
}
