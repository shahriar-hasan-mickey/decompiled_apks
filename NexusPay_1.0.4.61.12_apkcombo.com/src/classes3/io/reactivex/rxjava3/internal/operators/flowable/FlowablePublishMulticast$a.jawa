record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.l` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ccdd4.  v0:= 0I;
  #L4ccdd6.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L4ccdda.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] := v1 @kind object;
  #L4ccdde.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L4ccde2.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] := v0 @kind object;
  #L4ccde6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ccdf8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4ccdfe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int` := v2;
  #L4cce02.  v0:= v2 ^> 2;
  #L4cce06.  v2:= v2 - v0 @kind int;
  #L4cce08.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int` := v2;
  #L4cce0c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` := v3 @kind boolean;
  #L4cce10.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4cce14.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4cce1a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4cce1e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cce22.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cce28.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4cce2c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cce30.  v3:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L4cce34.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4cce3a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4cce3e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.dispose:()V` @AccessFlag  {
    temp;
    v0;

  #L4ccea8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L4cceac.  if v0 != 0 then goto L4cced8;
  #L4cceb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cceb4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cceba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ccebe.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ccec4.  v0:= temp;
  #L4ccec6.  if v0 != 0 then goto L4cced8;
  #L4cceca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ccece.  if v0 == 0 then goto L4cced8;
  #L4cced2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cced8.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ccd54.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccd58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ccd5e.  v0:= temp @kind object;
  #L4ccd60.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L4ccd64.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L4ccd68.  v2:= 0I;
  #L4ccd6a.  if v0 != v1 then goto L4ccd70;
  #L4ccd6e.  return v2;
  #L4ccd70.  v1:= length @variable v0;
  #L4ccd72.  v3:= v1 + 1;
  #L4ccd76.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v3];
  #L4ccd7a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ccd80.  v3[v1]:= v5 @kind object;
  #L4ccd84.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccd88.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ccd8e.  v0:= temp;
  #L4ccd90.  if v0 == 0 then goto L4ccd54;
  #L4ccd94.  v5:= 1I;
  #L4ccd96.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cce50.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cce54.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L4cce58.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cce5e.  v0:= temp @kind object;
  #L4cce60.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L4cce64.  v1:= length @variable v0;
  #L4cce66.  v2:= 0I;
  #L4cce68.  if v2 >= v1 then goto L4cce94;
  #L4cce6c.  v3:= v0[v2] @kind object;
  #L4cce70.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cce76.  v4:= temp @kind wide;
  #L4cce78.  v6:= -9223372036854775808L;
  #L4cce7c.  v8:= lcmp(v4, v6);
  #L4cce80.  if v8 == 0 then goto L4cce8e;
  #L4cce84.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cce88.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cce8e.  v2:= v2 + 1;
  #L4cce92.  goto L4cce68;
  #L4cce94.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v24 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L4cceec.  v1:= v24 @kind object;
  #L4ccef0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ccef4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ccefa.  v0:= temp;
  #L4ccefc.  if v0 == 0 then goto L4ccf02;
  #L4ccf00.  return @kind void;
  #L4ccf02.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ccf06.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int`;
  #L4ccf0a.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int`;
  #L4ccf0e.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L4ccf12.  v6:= 1I;
  #L4ccf14.  if v4 == v6 then goto L4ccf1c;
  #L4ccf18.  v4:= 1I;
  #L4ccf1a.  goto L4ccf1e;
  #L4ccf1c.  v4:= 0I;
  #L4ccf1e.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccf22.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ccf28.  v8:= temp @kind object;
  #L4ccf2a.  v8:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v8 @kind object;
  #L4ccf2e.  v9:= 1I;
  #L4ccf30.  v10:= length @variable v8;
  #L4ccf32.  if v0 == 0 then goto L4cd13c;
  #L4ccf36.  if v10 == 0 then goto L4cd13c;
  #L4ccf3a.  v11:= length @variable v8;
  #L4ccf3c.  v12:= 9223372036854775807L;
  #L4ccf46.  v15:= v12 @kind wide;
  #L4ccf48.  v14:= 0I;
  #L4ccf4a.  v17:= -9223372036854775808L;
  #L4ccf4e.  if v14 >= v11 then goto L4ccf90;
  #L4ccf52.  v5:= v8[v14] @kind object;
  #L4ccf56.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ccf5c.  v19:= temp @kind wide;
  #L4ccf5e.  v21:= v7 @kind object;
  #L4ccf62.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` @kind wide;
  #L4ccf66.  v19:= v19 - v6 @kind long;
  #L4ccf6a.  v5:= lcmp(v19, v17);
  #L4ccf6e.  if v5 == 0 then goto L4ccf80;
  #L4ccf72.  v5:= lcmp(v15, v19);
  #L4ccf76.  if v5 <= 0 then goto L4ccf84;
  #L4ccf7a.  v15:= v19 @kind wide;
  #L4ccf7e.  goto L4ccf84;
  #L4ccf80.  v10:= v10 + -1;
  #L4ccf84.  v14:= v14 + 1;
  #L4ccf88.  v7:= v21 @kind object;
  #L4ccf8c.  v6:= 1I;
  #L4ccf8e.  goto L4ccf4a;
  #L4ccf90.  v21:= v7 @kind object;
  #L4ccf94.  v5:= 0L;
  #L4ccf98.  if v10 != 0 then goto L4ccf9e;
  #L4ccf9c.  v15:= v5 @kind wide;
  #L4ccf9e.  v7:= lcmp(v15, v5);
  #L4ccfa2.  if v7 == 0 then goto L4cd0dc;
  #L4ccfa6.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L4ccfac.  v10:= temp;
  #L4ccfae.  if v10 == 0 then goto L4ccfba;
  #L4ccfb2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ccfb8.  return @kind void;
  #L4ccfba.  v10:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L4ccfbe.  if v10 == 0 then goto L4ccfda;
  #L4ccfc2.  v11:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L4ccfc6.  if v11 != 0 then goto L4ccfda;
  #L4ccfca.  v11:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L4ccfce.  if v11 == 0 then goto L4ccfda;
  #L4ccfd2.  call `h`(v1, v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ccfd8.  return @kind void;
  #L4ccfda.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ccfe0.  v11:= temp @kind object;
  #L4ccfe2.  if v11 != 0 then goto L4ccfea;
  #L4ccfe6.  v14:= 1I;
  #L4ccfe8.  goto L4ccfec;
  #L4ccfea.  v14:= 0I;
  #L4ccfec.  if v10 == 0 then goto L4cd00c;
  #L4ccff0.  if v14 == 0 then goto L4cd00c;
  #L4ccff4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L4ccff8.  if v0 == 0 then goto L4cd004;
  #L4ccffc.  call `h`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cd002.  goto L4cd00a;
  #L4cd004.  call `f`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L4cd00a.  return @kind void;
  #L4cd00c.  if v14 == 0 then goto L4cd012;
  #L4cd010.  goto L4cd0dc;
  #L4cd012.  v7:= length @variable v8;
  #L4cd014.  v10:= 0I;
  #L4cd016.  v14:= 0I;
  #L4cd018.  v19:= 1L;
  #L4cd01c.  if v10 >= v7 then goto L4cd06a;
  #L4cd020.  v5:= v8[v10] @kind object;
  #L4cd024.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cd02a.  v22:= temp @kind wide;
  #L4cd02c.  v6:= lcmp(v22, v17);
  #L4cd030.  if v6 == 0 then goto L4cd054;
  #L4cd034.  v6:= lcmp(v22, v12);
  #L4cd038.  if v6 == 0 then goto L4cd048;
  #L4cd03c.  v12:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` @kind wide;
  #L4cd040.  v12:= v12 + v19 @kind long;
  #L4cd044.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` := v12 @kind wide;
  #L4cd048.  v5:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd04c.  call `onNext`(v5, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cd052.  goto L4cd056;
  #L4cd054.  v14:= 1I;
  #L4cd056.  v10:= v10 + 1;
  #L4cd05a.  v5:= 0L;
  #L4cd05e.  v12:= 9223372036854775807L;
  #L4cd068.  goto L4cd018;
  #L4cd06a.  v15:= v15 - v19 @kind long;
  #L4cd06e.  if v4 == 0 then goto L4cd094;
  #L4cd072.  v2:= v2 + 1;
  #L4cd076.  if v2 != v3 then goto L4cd094;
  #L4cd07a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd07e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd084.  v2:= temp @kind object;
  #L4cd086.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4cd08a.  v5:= (`long`) v3 @kind i2l;
  #L4cd08c.  call `request`(v2, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cd092.  v2:= 0I;
  #L4cd094.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd09a.  v5:= temp @kind object;
  #L4cd09c.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v5 @kind object;
  #L4cd0a0.  if v14 != 0 then goto L4cd0bc;
  #L4cd0a4.  if v5 == v8 then goto L4cd0aa;
  #L4cd0a8.  goto L4cd0bc;
  #L4cd0aa.  v5:= 0L;
  #L4cd0ae.  v12:= 9223372036854775807L;
  #L4cd0b8.  goto L4ccf9e;
  #L4cd0bc.  v8:= v5 @kind object;
  #L4cd0be.  goto L4cd16e;
  #L4cd0c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cd0c2.  v2:= v0 @kind object;
  #L4cd0c4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cd0ca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd0ce.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cd0d4.  call `h`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cd0da.  return @kind void;
  #L4cd0dc.  if v7 != 0 then goto L4cd140;
  #L4cd0e0.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L4cd0e6.  v5:= temp;
  #L4cd0e8.  if v5 == 0 then goto L4cd0f4;
  #L4cd0ec.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cd0f2.  return @kind void;
  #L4cd0f4.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L4cd0f8.  if v5 == 0 then goto L4cd114;
  #L4cd0fc.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L4cd100.  if v6 != 0 then goto L4cd114;
  #L4cd104.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L4cd108.  if v6 == 0 then goto L4cd114;
  #L4cd10c.  call `h`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cd112.  return @kind void;
  #L4cd114.  if v5 == 0 then goto L4cd140;
  #L4cd118.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4cd11e.  v5:= temp;
  #L4cd120.  if v5 == 0 then goto L4cd140;
  #L4cd124.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L4cd128.  if v0 == 0 then goto L4cd134;
  #L4cd12c.  call `h`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cd132.  goto L4cd13a;
  #L4cd134.  call `f`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L4cd13a.  return @kind void;
  #L4cd13c.  v21:= v7 @kind object;
  #L4cd140.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int` := v2;
  #L4cd144.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4cd148.  v6:= -v9 @kind int;
  #L4cd14a.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cd150.  v9:= temp;
  #L4cd152.  if v9 != 0 then goto L4cd158;
  #L4cd156.  return @kind void;
  #L4cd158.  if v0 != 0 then goto L4cd160;
  #L4cd15c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cd160.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd166.  v5:= temp @kind object;
  #L4cd168.  v8:= v5 @kind object;
  #L4cd16a.  v8:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v8 @kind object;
  #L4cd16e.  v7:= v21 @kind object;
  #L4cd172.  v6:= 1I;
  #L4cd174.  goto L4ccf30;
  catch `java.lang.Throwable` @[L4ccfda..L4ccfe2] goto L4cd0c0;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this, `java.lang.Throwable` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cd194.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd198.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L4cd19c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4cd1a2.  v0:= temp @kind object;
  #L4cd1a4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L4cd1a8.  v1:= length @variable v0;
  #L4cd1aa.  v2:= 0I;
  #L4cd1ac.  if v2 >= v1 then goto L4cd1d8;
  #L4cd1b0.  v3:= v0[v2] @kind object;
  #L4cd1b4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cd1ba.  v4:= temp @kind wide;
  #L4cd1bc.  v6:= -9223372036854775808L;
  #L4cd1c0.  v8:= lcmp(v4, v6);
  #L4cd1c4.  if v8 == 0 then goto L4cd1d2;
  #L4cd1c8.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd1cc.  call `onError`(v3, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cd1d2.  v2:= v2 + 1;
  #L4cd1d6.  goto L4cd1ac;
  #L4cd1d8.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cd334.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd338.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd33e.  v0:= temp @kind object;
  #L4cd340.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L4cd344.  v1:= length @variable v0;
  #L4cd346.  if v1 != 0 then goto L4cd34c;
  #L4cd34a.  return @kind void;
  #L4cd34c.  v2:= -1I;
  #L4cd34e.  v3:= 0I;
  #L4cd350.  v4:= 0I;
  #L4cd352.  if v4 >= v1 then goto L4cd368;
  #L4cd356.  v5:= v0[v4] @kind object;
  #L4cd35a.  if v5 != v7 then goto L4cd362;
  #L4cd35e.  v2:= v4;
  #L4cd360.  goto L4cd368;
  #L4cd362.  v4:= v4 + 1;
  #L4cd366.  goto L4cd352;
  #L4cd368.  if v2 >= 0 then goto L4cd36e;
  #L4cd36c.  return @kind void;
  #L4cd36e.  v4:= 1I;
  #L4cd370.  if v1 != v4 then goto L4cd37a;
  #L4cd374.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L4cd378.  goto L4cd398;
  #L4cd37a.  v5:= v1 + -1;
  #L4cd37e.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`[v5];
  #L4cd382.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cd388.  v3:= v2 + 1;
  #L4cd38c.  v1:= v1 - v2 @kind int;
  #L4cd38e.  v1:= v1 - v4 @kind int;
  #L4cd390.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4cd396.  v1:= v5 @kind object;
  #L4cd398.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd39c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cd3a2.  v0:= temp;
  #L4cd3a4.  if v0 == 0 then goto L4cd334;
  #L4cd3a8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ccda8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ccdac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ccdb2.  v0:= temp @kind object;
  #L4ccdb4.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ccdb8.  if v0 != v1 then goto L4ccdc0;
  #L4ccdbc.  v0:= 1I;
  #L4ccdbe.  goto L4ccdc2;
  #L4ccdc0.  v0:= 0I;
  #L4ccdc2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd1ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L4cd1f0.  if v0 != 0 then goto L4cd200;
  #L4cd1f4.  v0:= 1I;
  #L4cd1f6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4cd1fa.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L4cd200.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd214.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L4cd218.  if v0 == 0 then goto L4cd224;
  #L4cd21c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cd222.  return @kind void;
  #L4cd224.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4cd228.  v2:= 1I;
  #L4cd22a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4cd22e.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L4cd234.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd248.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L4cd24c.  if v0 == 0 then goto L4cd252;
  #L4cd250.  return @kind void;
  #L4cd252.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L4cd256.  if v0 != 0 then goto L4cd292;
  #L4cd25a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cd25e.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cd264.  v2:= temp;
  #L4cd266.  if v2 != 0 then goto L4cd292;
  #L4cd26a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd26e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd274.  v2:= temp @kind object;
  #L4cd276.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4cd27a.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cd280.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4cd284.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4cd28a.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cd290.  return @kind void;
  #L4cd292.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L4cd298.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cd2ac.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd2b0.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cd2b6.  v0:= temp;
  #L4cd2b8.  if v0 == 0 then goto L4cd322;
  #L4cd2bc.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4cd2c0.  if v0 == 0 then goto L4cd308;
  #L4cd2c4.  v0:= v4 @kind object;
  #L4cd2c6.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4cd2ca.  v1:= 3I;
  #L4cd2cc.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4cd2d2.  v1:= temp;
  #L4cd2d4.  v2:= 1I;
  #L4cd2d6.  if v1 != v2 then goto L4cd2ee;
  #L4cd2da.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L4cd2de.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cd2e2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4cd2e6.  call `g`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L4cd2ec.  return @kind void;
  #L4cd2ee.  v2:= 2I;
  #L4cd2f0.  if v1 != v2 then goto L4cd308;
  #L4cd2f4.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L4cd2f8.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cd2fc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L4cd300.  call `request`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L4cd306.  return @kind void;
  #L4cd308.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L4cd30c.  call temp:= `createQueue`(v0) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind static;
  #L4cd312.  v0:= temp @kind object;
  #L4cd314.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cd318.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L4cd31c.  call `request`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L4cd322.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4cd3bc.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$b`;
  #L4cd3c0.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;)V` @kind direct;
  #L4cd3c6.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cd3cc.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @kind virtual;
  #L4cd3d2.  v1:= temp;
  #L4cd3d4.  if v1 == 0 then goto L4cd3f4;
  #L4cd3d8.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;.a:()Z` @kind virtual;
  #L4cd3de.  v3:= temp;
  #L4cd3e0.  if v3 == 0 then goto L4cd3ec;
  #L4cd3e4.  call `i`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$b;)V` @kind virtual;
  #L4cd3ea.  return @kind void;
  #L4cd3ec.  call `g`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L4cd3f2.  goto L4cd40a;
  #L4cd3f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L4cd3f8.  if v0 == 0 then goto L4cd404;
  #L4cd3fc.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cd402.  goto L4cd40a;
  #L4cd404.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cd40a.  return @kind void;
}
