record `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.SingleSource` `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `io.reactivex.rxjava3.core.SingleSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/core/SingleSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e0994.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e099a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4e099e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.b` @type ^`io.reactivex.rxjava3.core.SingleSource` := v2 @kind object;
  #L4e09a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4e09b4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e09ba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e096c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e0972.  v0:= temp @kind object;
  #L4e0974.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e0978.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e097e.  v0:= temp;
  #L4e0980.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e09cc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e09d2.  v0:= temp @kind object;
  #L4e09d4.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e09d8.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e09dc.  if v0 == v1 then goto L4e0a06;
  #L4e09e0.  v1:= 0I;
  #L4e09e2.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4e09e8.  v0:= temp;
  #L4e09ea.  if v0 == 0 then goto L4e0a06;
  #L4e09ee.  v0:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.b` @type ^`io.reactivex.rxjava3.core.SingleSource` @kind object;
  #L4e09f2.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a$a`;
  #L4e09f6.  v2:= v3.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4e09fa.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4e0a00.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4e0a06.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0a18.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4e0a1c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e0a22.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e0a34.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e0a3a.  v1:= temp;
  #L4e0a3c.  if v1 == 0 then goto L4e0a4a;
  #L4e0a40.  v1:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4e0a44.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e0a4a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeSwitchIfEmptySingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0a5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4e0a60.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e0a66.  return @kind void;
}
