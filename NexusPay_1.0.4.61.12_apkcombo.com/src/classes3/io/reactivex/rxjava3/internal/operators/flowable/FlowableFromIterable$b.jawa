record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c59c0.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L4c59c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4c59ca.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c59dc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4c59e0.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c59e4.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c59e8.  if v2 == 0 then goto L4c59ee;
  #L4c59ec.  return @kind void;
  #L4c59ee.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c59f4.  v2:= temp @kind object;
  #L4c59f6.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c59fa.  if v3 == 0 then goto L4c5a00;
  #L4c59fe.  return @kind void;
  #L4c5a00.  if v2 != 0 then goto L4c5a1a;
  #L4c5a04.  v0:= new `java.lang.NullPointerException`;
  #L4c5a08.  v2:= "Iterator.next() returned a null value" @kind object;
  #L4c5a0c.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5a12.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5a18.  return @kind void;
  #L4c5a1a.  call temp:= `tryOnNext`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c5a20.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5a24.  if v2 == 0 then goto L4c5a2a;
  #L4c5a28.  return @kind void;
  #L4c5a2a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c5a30.  v2:= temp;
  #L4c5a32.  if v2 != 0 then goto L4c59e4;
  #L4c5a36.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5a3a.  if v0 != 0 then goto L4c5a44;
  #L4c5a3e.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c5a44.  return @kind void;
  #L4c5a46.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5a48.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5a4e.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5a54.  return @kind void;
  #L4c5a56.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5a58.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5a5e.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5a64.  return @kind void;
  catch `java.lang.Throwable` @[L4c59ee..L4c59f6] goto L4c5a56;
  catch `java.lang.Throwable` @[L4c5a2a..L4c5a32] goto L4c5a46;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c5a90.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4c5a94.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c5a98.  v2:= 0L;
  #L4c5a9c.  v4:= v2 @kind wide;
  #L4c5a9e.  v6:= lcmp(v4, v9);
  #L4c5aa2.  if v6 == 0 then goto L4c5b36;
  #L4c5aa6.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5aaa.  if v6 == 0 then goto L4c5ab0;
  #L4c5aae.  return @kind void;
  #L4c5ab0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c5ab6.  v6:= temp @kind object;
  #L4c5ab8.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5abc.  if v7 == 0 then goto L4c5ac2;
  #L4c5ac0.  return @kind void;
  #L4c5ac2.  if v6 != 0 then goto L4c5adc;
  #L4c5ac6.  v9:= new `java.lang.NullPointerException`;
  #L4c5aca.  v10:= "Iterator.next() returned a null value" @kind object;
  #L4c5ace.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5ad4.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5ada.  return @kind void;
  #L4c5adc.  call temp:= `tryOnNext`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c5ae2.  v6:= temp;
  #L4c5ae4.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5ae8.  if v7 == 0 then goto L4c5aee;
  #L4c5aec.  return @kind void;
  #L4c5aee.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c5af4.  v7:= temp;
  #L4c5af6.  if v7 != 0 then goto L4c5b0a;
  #L4c5afa.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5afe.  if v9 != 0 then goto L4c5b08;
  #L4c5b02.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c5b08.  return @kind void;
  #L4c5b0a.  if v6 == 0 then goto L4c5a9e;
  #L4c5b0e.  v6:= 1L;
  #L4c5b12.  v4:= v4 + v6 @kind long;
  #L4c5b14.  goto L4c5a9e;
  #L4c5b16.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5b18.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5b1e.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5b24.  return @kind void;
  #L4c5b26.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5b28.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5b2e.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5b34.  return @kind void;
  #L4c5b36.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c5b3c.  v9:= temp @kind wide;
  #L4c5b3e.  v6:= lcmp(v4, v9);
  #L4c5b42.  if v6 != 0 then goto L4c5a9e;
  #L4c5b46.  v9:= -v4 @kind long;
  #L4c5b48.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c5b4e.  v9:= temp @kind wide;
  #L4c5b50.  v4:= lcmp(v9, v2);
  #L4c5b54.  if v4 != 0 then goto L4c5a9c;
  #L4c5b58.  return @kind void;
  catch `java.lang.Throwable` @[L4c5ab0..L4c5ab8] goto L4c5b26;
  catch `java.lang.Throwable` @[L4c5aee..L4c5af6] goto L4c5b16;
}
