record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `boolean` v4 , `boolean` v5 , `io.reactivex.rxjava3.functions.Action` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;IZZLio/reactivex/rxjava3/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4cb4d0.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4cb4d6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4cb4da.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cb4e0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4cb4e4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4cb4e8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.rxjava3.functions.Action` := v6 @kind object;
  #L4cb4ec.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` := v5 @kind boolean;
  #L4cb4f0.  if v4 == 0 then goto L4cb500;
  #L4cb4f4.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4cb4f8.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4cb4fe.  goto L4cb50a;
  #L4cb500.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4cb504.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4cb50a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L4cb50e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb520.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L4cb524.  if v0 != 0 then goto L4cb556;
  #L4cb528.  v0:= 1I;
  #L4cb52a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4cb52e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb532.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cb538.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L4cb53c.  if v0 != 0 then goto L4cb556;
  #L4cb540.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cb546.  v0:= temp;
  #L4cb548.  if v0 != 0 then goto L4cb556;
  #L4cb54c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb550.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cb556.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb568.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb56c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cb572.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4cb584.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4cb58a.  v0:= temp;
  #L4cb58c.  if v0 != 0 then goto L4cb65a;
  #L4cb590.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb594.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb598.  v2:= 1I;
  #L4cb59a.  v3:= 1I;
  #L4cb59c.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L4cb5a0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4cb5a6.  v5:= temp;
  #L4cb5a8.  call temp:= `e`(v14, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4cb5ae.  v4:= temp;
  #L4cb5b0.  if v4 == 0 then goto L4cb5b6;
  #L4cb5b4.  return @kind void;
  #L4cb5b6.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb5ba.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cb5c0.  v4:= temp @kind wide;
  #L4cb5c2.  v6:= 0L;
  #L4cb5c6.  v8:= v6 @kind wide;
  #L4cb5c8.  v10:= lcmp(v8, v4);
  #L4cb5cc.  if v10 == 0 then goto L4cb608;
  #L4cb5d0.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L4cb5d4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cb5da.  v12:= temp @kind object;
  #L4cb5dc.  if v12 != 0 then goto L4cb5e4;
  #L4cb5e0.  v13:= 1I;
  #L4cb5e2.  goto L4cb5e6;
  #L4cb5e4.  v13:= 0I;
  #L4cb5e6.  call temp:= `e`(v14, v11, v13, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4cb5ec.  v11:= temp;
  #L4cb5ee.  if v11 == 0 then goto L4cb5f4;
  #L4cb5f2.  return @kind void;
  #L4cb5f4.  if v13 == 0 then goto L4cb5fa;
  #L4cb5f8.  goto L4cb608;
  #L4cb5fa.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cb600.  v10:= 1L;
  #L4cb604.  v8:= v8 + v10 @kind long;
  #L4cb606.  goto L4cb5c8;
  #L4cb608.  if v10 != 0 then goto L4cb626;
  #L4cb60c.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L4cb610.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4cb616.  v11:= temp;
  #L4cb618.  call temp:= `e`(v14, v10, v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4cb61e.  v10:= temp;
  #L4cb620.  if v10 == 0 then goto L4cb626;
  #L4cb624.  return @kind void;
  #L4cb626.  v10:= lcmp(v8, v6);
  #L4cb62a.  if v10 == 0 then goto L4cb64c;
  #L4cb62e.  v6:= 9223372036854775807L;
  #L4cb638.  v10:= lcmp(v4, v6);
  #L4cb63c.  if v10 == 0 then goto L4cb64c;
  #L4cb640.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb644.  v5:= -v8 @kind long;
  #L4cb646.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4cb64c.  v3:= -v3 @kind int;
  #L4cb64e.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cb654.  v3:= temp;
  #L4cb656.  if v3 != 0 then goto L4cb59c;
  #L4cb65a.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4cb3f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L4cb3f8.  v1:= 1I;
  #L4cb3fa.  if v0 == 0 then goto L4cb40a;
  #L4cb3fe.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb402.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cb408.  return v1;
  #L4cb40a.  if v3 == 0 then goto L4cb458;
  #L4cb40e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` @kind boolean;
  #L4cb412.  if v3 == 0 then goto L4cb432;
  #L4cb416.  if v4 == 0 then goto L4cb458;
  #L4cb41a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4cb41e.  if v3 == 0 then goto L4cb42a;
  #L4cb422.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb428.  goto L4cb430;
  #L4cb42a.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb430.  return v1;
  #L4cb432.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4cb436.  if v3 == 0 then goto L4cb44c;
  #L4cb43a.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb43e.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cb444.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb44a.  return v1;
  #L4cb44c.  if v4 == 0 then goto L4cb458;
  #L4cb450.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb456.  return v1;
  #L4cb458.  v3:= 0I;
  #L4cb45a.  return v3;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb46c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb470.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4cb476.  v0:= temp;
  #L4cb478.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb66c.  v0:= 1I;
  #L4cb66e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4cb672.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L4cb676.  if v0 == 0 then goto L4cb686;
  #L4cb67a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb67e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb684.  goto L4cb68c;
  #L4cb686.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L4cb68c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb6a0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4cb6a4.  v0:= 1I;
  #L4cb6a6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4cb6aa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L4cb6ae.  if v0 == 0 then goto L4cb6be;
  #L4cb6b2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb6b6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb6bc.  goto L4cb6c4;
  #L4cb6be.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L4cb6c4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb6d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb6dc.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4cb6e2.  v2:= temp;
  #L4cb6e4.  if v2 != 0 then goto L4cb722;
  #L4cb6e8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb6ec.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cb6f2.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4cb6f6.  v0:= "Buffer is full" @kind object;
  #L4cb6fa.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cb700.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4cb704.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4cb70a.  goto L4cb71a;
  #L4cb70c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cb70e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cb714.  call temp:= `initCause`(v2, v0) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4cb71a.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4cb720.  return @kind void;
  #L4cb722.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L4cb726.  if v2 == 0 then goto L4cb738;
  #L4cb72a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb72e.  v0:= 0I;
  #L4cb730.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cb736.  goto L4cb73e;
  #L4cb738.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L4cb73e.  return @kind void;
  catch `java.lang.Throwable` @[L4cb700..L4cb70a] goto L4cb70c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4cb75c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb760.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cb766.  v0:= temp;
  #L4cb768.  if v0 == 0 then goto L4cb78a;
  #L4cb76c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4cb770.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb774.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cb77a.  v0:= 9223372036854775807L;
  #L4cb784.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cb78a.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb4b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4cb4b4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cb4ba.  v0:= temp @kind object;
  #L4cb4bc.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb79c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L4cb7a0.  if v0 != 0 then goto L4cb7c0;
  #L4cb7a4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4cb7aa.  v0:= temp;
  #L4cb7ac.  if v0 == 0 then goto L4cb7c0;
  #L4cb7b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb7b4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4cb7ba.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L4cb7c0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb48c.  v0:= 2I;
  #L4cb48e.  v2:= v2 ^& v0 @kind int;
  #L4cb490.  if v2 == 0 then goto L4cb49c;
  #L4cb494.  v2:= 1I;
  #L4cb496.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4cb49a.  return v0;
  #L4cb49c.  v2:= 0I;
  #L4cb49e.  return v2;
}
