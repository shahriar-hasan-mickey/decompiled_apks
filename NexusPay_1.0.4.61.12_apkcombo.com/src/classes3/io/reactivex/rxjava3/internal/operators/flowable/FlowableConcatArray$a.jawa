record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Publisher`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @AccessFlag ;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v1 @kind this, `org.reactivestreams.Publisher`[] v2 @kind object, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.<init>:([Lorg/reactivestreams/Publisher;ZLorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4bc4c8.  v0:= 0I;
  #L4bc4ca.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4bc4d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L4bc4d4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] := v2 @kind object;
  #L4bc4d8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` := v3 @kind boolean;
  #L4bc4dc.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4bc4e0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bc4e6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4bc4ea.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4bc4fc.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bc500.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bc506.  v0:= temp;
  #L4bc508.  if v0 != 0 then goto L4bc5f6;
  #L4bc50c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L4bc510.  v1:= length @variable v0;
  #L4bc512.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int`;
  #L4bc516.  v3:= 1I;
  #L4bc518.  if v2 != v1 then goto L4bc56c;
  #L4bc51c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L4bc520.  if v0 == 0 then goto L4bc560;
  #L4bc524.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4bc52a.  v1:= temp;
  #L4bc52c.  if v1 != v3 then goto L4bc54a;
  #L4bc530.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc534.  v2:= 0I;
  #L4bc536.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4bc53c.  v0:= temp @kind object;
  #L4bc53e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4bc542.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bc548.  goto L4bc56a;
  #L4bc54a.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc54e.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4bc552.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L4bc558.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bc55e.  goto L4bc56a;
  #L4bc560.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc564.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4bc56a.  return @kind void;
  #L4bc56c.  v4:= v0[v2] @kind object;
  #L4bc570.  if v4 != 0 then goto L4bc5be;
  #L4bc574.  v4:= new `java.lang.NullPointerException`;
  #L4bc578.  v5:= "A Publisher entry is null" @kind object;
  #L4bc57c.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bc582.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` @kind boolean;
  #L4bc586.  if v5 == 0 then goto L4bc5b2;
  #L4bc58a.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L4bc58e.  if v5 != 0 then goto L4bc5a6;
  #L4bc592.  v5:= new `java.util.ArrayList`;
  #L4bc596.  v6:= v1 - v2 @kind int;
  #L4bc59a.  v6:= v6 + v3 @kind int;
  #L4bc59c.  call `<init>`(v5, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4bc5a2.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` := v5 @kind object;
  #L4bc5a6.  call temp:= `add`(v5, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bc5ac.  v2:= v2 + 1;
  #L4bc5b0.  goto L4bc516;
  #L4bc5b2.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc5b6.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bc5bc.  return @kind void;
  #L4bc5be.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` @kind wide;
  #L4bc5c2.  v7:= 0L;
  #L4bc5c6.  v3:= lcmp(v5, v7);
  #L4bc5ca.  if v3 == 0 then goto L4bc5d8;
  #L4bc5ce.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` := v7 @kind wide;
  #L4bc5d2.  call `produced`(v9, v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4bc5d8.  call `subscribe`(v4, v9) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4bc5de.  v2:= v2 + 1;
  #L4bc5e2.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int` := v2;
  #L4bc5e6.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bc5ea.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bc5f0.  v3:= temp;
  #L4bc5f2.  if v3 != 0 then goto L4bc516;
  #L4bc5f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bc608.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` @kind boolean;
  #L4bc60c.  if v0 == 0 then goto L4bc644;
  #L4bc610.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L4bc614.  if v0 != 0 then goto L4bc636;
  #L4bc618.  v0:= new `java.util.ArrayList`;
  #L4bc61c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L4bc620.  v1:= length @variable v1;
  #L4bc622.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int`;
  #L4bc626.  v1:= v1 - v2 @kind int;
  #L4bc628.  v1:= v1 + 1;
  #L4bc62c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4bc632.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` := v0 @kind object;
  #L4bc636.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bc63c.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @kind virtual;
  #L4bc642.  goto L4bc64e;
  #L4bc644.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc648.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bc64e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bc660.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` @kind wide;
  #L4bc664.  v2:= 1L;
  #L4bc668.  v0:= v0 + v2 @kind long;
  #L4bc66a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` := v0 @kind wide;
  #L4bc66e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bc672.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bc678.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L4bc68c.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4bc692.  return @kind void;
}
