record `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e0e6c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e0e72.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4e0e76.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a`;
  #L4e0e7a.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;)V` @kind direct;
  #L4e0e80.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` := v1 @kind object;
  #L4e0e84.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4e0f90.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0f96.  v0:= temp;
  #L4e0f98.  if v0 == 0 then goto L4e0fa6;
  #L4e0f9c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0fa0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e0fa6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4e0fb8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0fbe.  v0:= temp;
  #L4e0fc0.  if v0 == 0 then goto L4e0fd0;
  #L4e0fc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0fc8.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e0fce.  goto L4e0fd6;
  #L4e0fd0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e0fd6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0e98.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0e9e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4e0ea2.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0ea8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e0e44.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e0e4a.  v0:= temp @kind object;
  #L4e0e4c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e0e50.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e0e56.  v0:= temp;
  #L4e0e58.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0ebc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4e0ec0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0ec6.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0eca.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e0ed0.  v0:= temp @kind object;
  #L4e0ed2.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0ed6.  if v0 == v1 then goto L4e0ee4;
  #L4e0eda.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0ede.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e0ee4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0ef8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4e0efc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0f02.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0f06.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e0f0c.  v0:= temp @kind object;
  #L4e0f0e.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0f12.  if v0 == v1 then goto L4e0f22;
  #L4e0f16.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0f1a.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e0f20.  goto L4e0f28;
  #L4e0f22.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e0f28.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e0f3c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e0f42.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e0f54.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4e0f58.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e0f5e.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0f62.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e0f68.  v0:= temp @kind object;
  #L4e0f6a.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e0f6e.  if v0 == v1 then goto L4e0f7c;
  #L4e0f72.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e0f76.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e0f7c.  return @kind void;
}
