record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind interface {
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$o;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f7cc0.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4f7cc6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$o;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4f7d04.  call temp:= `error`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4f7d0a.  v1:= temp @kind object;
  #L4f7d0c.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f7d12.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @type ^`int`;
  #L4f7d16.  v1:= v1 + 1;
  #L4f7d1a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @type ^`int` := v1;
  #L4f7d1e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$o;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4f7d30.  call temp:= `next`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f7d36.  v1:= temp @kind object;
  #L4f7d38.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f7d3e.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @type ^`int`;
  #L4f7d42.  v1:= v1 + 1;
  #L4f7d46.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @type ^`int` := v1;
  #L4f7d4a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$o;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f7d5c.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f7d62.  v0:= temp;
  #L4f7d64.  if v0 == 0 then goto L4f7d6a;
  #L4f7d68.  return @kind void;
  #L4f7d6a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.b` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f7d6e.  v1:= 1I;
  #L4f7d70.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L4f7d76.  v2:= temp;
  #L4f7d78.  if v2 == 0 then goto L4f7d7e;
  #L4f7d7c.  return @kind void;
  #L4f7d7e.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @type ^`int`;
  #L4f7d82.  call temp:= `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L4f7d88.  v3:= temp @kind object;
  #L4f7d8a.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L4f7d8e.  if v3 == 0 then goto L4f7d9c;
  #L4f7d92.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4f7d98.  v3:= temp;
  #L4f7d9a.  goto L4f7d9e;
  #L4f7d9c.  v3:= 0I;
  #L4f7d9e.  if v3 >= v2 then goto L4f7dcc;
  #L4f7da2.  call temp:= `get`(v5, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4f7da8.  v4:= temp @kind object;
  #L4f7daa.  call temp:= `accept`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/rxjava3/core/Observer;)Z` @kind static;
  #L4f7db0.  v4:= temp;
  #L4f7db2.  if v4 == 0 then goto L4f7db8;
  #L4f7db6.  return @kind void;
  #L4f7db8.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L4f7dbe.  v4:= temp;
  #L4f7dc0.  if v4 == 0 then goto L4f7dc6;
  #L4f7dc4.  return @kind void;
  #L4f7dc6.  v3:= v3 + 1;
  #L4f7dca.  goto L4f7d9e;
  #L4f7dcc.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f7dd2.  v2:= temp @kind object;
  #L4f7dd4.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4f7dd8.  v1:= -v1 @kind int;
  #L4f7dda.  call temp:= `addAndGet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f7de0.  v1:= temp;
  #L4f7de2.  if v1 != 0 then goto L4f7d70;
  #L4f7de6.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$o;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7cd8.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4f7cde.  v0:= temp @kind object;
  #L4f7ce0.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f7ce6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @type ^`int`;
  #L4f7cea.  v0:= v0 + 1;
  #L4f7cee.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$o.a` @type ^`int` := v0;
  #L4f7cf2.  return @kind void;
}
