record `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.subjects.Subject` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.subjects.Subject` v2 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/Subject;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f6e64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f6e6a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f6e6e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` := v2 @kind object;
  #L4f6e72.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4f6e76.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4f6e7a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f6e80.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4f6e84.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4f6e88.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4f6e8e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4f6e92.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a`;
  #L4f6e96.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;)V` @kind direct;
  #L4f6e9c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` := v1 @kind object;
  #L4f6ea0.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f6ea4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f6eaa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4f6eae.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f6ee8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6eec.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f6ef2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f6ef6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f6efa.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f6f00.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f6f14.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6f18.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f6f1e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f6f22.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f6f26.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f6f2c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L4f6f40.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @kind virtual;
  #L4f6f46.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4f6ff8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f6ffc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f7002.  v0:= temp;
  #L4f7004.  if v0 != 0 then goto L4f703e;
  #L4f7008.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @kind virtual;
  #L4f700e.  v0:= temp;
  #L4f7010.  if v0 == 0 then goto L4f7016;
  #L4f7014.  return @kind void;
  #L4f7016.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` @kind boolean;
  #L4f701a.  if v0 != 0 then goto L4f702e;
  #L4f701e.  v0:= 1I;
  #L4f7020.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4f7024.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f7028.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f702e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f7032.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f7038.  v0:= temp;
  #L4f703a.  if v0 != 0 then goto L4f7008;
  #L4f703e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6ec0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6ec4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f6eca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L4f6ece.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f6ed4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6e38.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6e3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f6e42.  v0:= temp @kind object;
  #L4f6e44.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4f6e48.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f6e4e.  v0:= temp;
  #L4f6e50.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6f58.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6f5c.  v1:= 0I;
  #L4f6f5e.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f6f64.  v0:= 0I;
  #L4f6f66.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4f6f6a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L4f6f6e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f6f74.  v0:= temp @kind object;
  #L4f6f76.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f6f7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6f90.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L4f6f94.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f6f9a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f6f9e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f6fa2.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f6fa8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6fbc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f6fc0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4f6fc4.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4f6fca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRepeatWhen$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6fdc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f6fe0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f6fe6.  return @kind void;
}
