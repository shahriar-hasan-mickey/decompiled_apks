record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.rxjava3.core.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Supplier;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ba6bc.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4ba6c0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4ba6c6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4ba6cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4ba6d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` := v4 @kind wide;
  #L4ba6d4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4ba6d8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int` := v7;
  #L4ba6dc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` := v8 @kind boolean;
  #L4ba6e0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v9 @kind object;
  #L4ba6e4.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4ba680.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ba686.  v1:= 1I;
  #L4ba688.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ba660.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4ba664.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L4ba66a.  v1:= temp;
  #L4ba66c.  return v1;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba6f8.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4ba6fc.  if v0 != 0 then goto L4ba70c;
  #L4ba700.  v0:= 1I;
  #L4ba702.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4ba706.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @kind virtual;
  #L4ba70c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba720.  @monitorenter v1
  #L4ba722.  v0:= 0I;
  #L4ba724.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L4ba728.  @monitorexit v1
  #L4ba72a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ba72e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ba734.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba738.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba73e.  return @kind void;
  #L4ba740.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba742.  @monitorexit v1
  #L4ba744.  throw v0;
  catch `java.lang.Throwable` @[L4ba724..L4ba72a] goto L4ba740;
  catch `java.lang.Throwable` @[L4ba742..L4ba744] goto L4ba740;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba69c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba6a0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ba6a6.  v0:= temp;
  #L4ba6a8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ba76c.  @monitorenter v3
  #L4ba76e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L4ba772.  v1:= 0I;
  #L4ba774.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v1 @kind object;
  #L4ba778.  @monitorexit v3
  #L4ba77a.  if v0 == 0 then goto L4ba7b4;
  #L4ba77e.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ba782.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ba788.  v0:= 1I;
  #L4ba78a.  v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4ba78e.  call temp:= `enter`(v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4ba794.  v0:= temp;
  #L4ba796.  if v0 == 0 then goto L4ba7aa;
  #L4ba79a.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ba79e.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba7a2.  v2:= 0I;
  #L4ba7a4.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L4ba7aa.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba7ae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba7b4.  return @kind void;
  #L4ba7b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba7b8.  @monitorexit v3
  #L4ba7ba.  throw v0;
  catch `java.lang.Throwable` @[L4ba76e..L4ba77a] goto L4ba7b6;
  catch `java.lang.Throwable` @[L4ba7b8..L4ba7ba] goto L4ba7b6;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba7e0.  @monitorenter v1
  #L4ba7e2.  v0:= 0I;
  #L4ba7e4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L4ba7e8.  @monitorexit v1
  #L4ba7ea.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba7ee.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba7f4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba7f8.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba7fe.  return @kind void;
  #L4ba800.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba802.  @monitorexit v1
  #L4ba804.  throw v2;
  catch `java.lang.Throwable` @[L4ba7e4..L4ba7ea] goto L4ba800;
  catch `java.lang.Throwable` @[L4ba802..L4ba804] goto L4ba800;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ba82c.  @monitorenter v7
  #L4ba82e.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L4ba832.  if v0 != 0 then goto L4ba83a;
  #L4ba836.  @monitorexit v7
  #L4ba838.  return @kind void;
  #L4ba83a.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ba840.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4ba846.  v8:= temp;
  #L4ba848.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int`;
  #L4ba84c.  if v8 >= v1 then goto L4ba854;
  #L4ba850.  @monitorexit v7
  #L4ba852.  return @kind void;
  #L4ba854.  v8:= 0I;
  #L4ba856.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v8 @kind object;
  #L4ba85a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L4ba85e.  v3:= 1L;
  #L4ba862.  v1:= v1 + v3 @kind long;
  #L4ba864.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` := v1 @kind wide;
  #L4ba868.  @monitorexit v7
  #L4ba86a.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L4ba86e.  if v8 == 0 then goto L4ba87c;
  #L4ba872.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba876.  call `dispose`(v8) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba87c.  v8:= 0I;
  #L4ba87e.  call `fastPathOrderedEmitMax`(v7, v0, v8, v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4ba884.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4ba888.  call temp:= `get`(v8) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4ba88e.  v8:= temp @kind object;
  #L4ba890.  v0:= "The supplied buffer is null" @kind object;
  #L4ba894.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ba89a.  v8:= temp @kind object;
  #L4ba89c.  v8:= (`java.util.Collection`) v8 @kind object;
  #L4ba8a0.  @monitorenter v7
  #L4ba8a2.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v8 @kind object;
  #L4ba8a6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L4ba8aa.  v0:= v0 + v3 @kind long;
  #L4ba8ac.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` := v0 @kind wide;
  #L4ba8b0.  @monitorexit v7
  #L4ba8b2.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L4ba8b6.  if v8 == 0 then goto L4ba8d6;
  #L4ba8ba.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba8be.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L4ba8c2.  v6:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ba8c6.  v1:= v7 @kind object;
  #L4ba8c8.  v2:= v4 @kind wide;
  #L4ba8ca.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ba8d0.  v8:= temp @kind object;
  #L4ba8d2.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v8 @kind object;
  #L4ba8d6.  return @kind void;
  #L4ba8d8.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba8da.  @monitorexit v7
  #L4ba8dc.  throw v8;
  #L4ba8de.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba8e0.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba8e6.  call `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L4ba8ec.  v0:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba8f0.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba8f6.  return @kind void;
  #L4ba8f8.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba8fa.  @monitorexit v7
  #L4ba8fc.  throw v8;
  catch `java.lang.Throwable` @[L4ba82e..L4ba86a] goto L4ba8f8;
  catch `java.lang.Throwable` @[L4ba884..L4ba8a0] goto L4ba8de;
  catch `java.lang.Throwable` @[L4ba8a2..L4ba8b2] goto L4ba8d8;
  catch `java.lang.Throwable` @[L4ba8da..L4ba8dc] goto L4ba8d8;
  catch `java.lang.Throwable` @[L4ba8fa..L4ba8fc] goto L4ba8f8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4ba940.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ba944.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ba94a.  v0:= temp;
  #L4ba94c.  if v0 != 0 then goto L4ba952;
  #L4ba950.  return @kind void;
  #L4ba952.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L4ba956.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4ba95a.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4ba960.  v0:= temp @kind object;
  #L4ba962.  v1:= "The supplied buffer is null" @kind object;
  #L4ba966.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ba96c.  v0:= temp @kind object;
  #L4ba96e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4ba972.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L4ba976.  v0:= v8.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba97a.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ba980.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba984.  v5:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L4ba988.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ba98c.  v2:= v8 @kind object;
  #L4ba98e.  v3:= v5 @kind wide;
  #L4ba990.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ba996.  v0:= temp @kind object;
  #L4ba998.  v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ba99c.  v0:= 9223372036854775807L;
  #L4ba9a6.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ba9ac.  return @kind void;
  #L4ba9ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba9b0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba9b6.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba9ba.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba9c0.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ba9c6.  v9:= v8.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba9ca.  call `error`(v0, v9) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4ba9d0.  return @kind void;
  catch `java.lang.Throwable` @[L4ba956..L4ba972] goto L4ba9ae;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4ba9f0.  call `requested`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4ba9f6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4baa08.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4baa0c.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4baa12.  v0:= temp @kind object;
  #L4baa14.  v1:= "The supplied buffer is null" @kind object;
  #L4baa18.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4baa1e.  v0:= temp @kind object;
  #L4baa20.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4baa24.  @monitorenter v7
  #L4baa26.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L4baa2a.  if v1 == 0 then goto L4baa50;
  #L4baa2e.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L4baa32.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L4baa36.  v6:= lcmp(v2, v4);
  #L4baa3a.  if v6 == 0 then goto L4baa40;
  #L4baa3e.  goto L4baa50;
  #L4baa40.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L4baa44.  @monitorexit v7
  #L4baa46.  v0:= 0I;
  #L4baa48.  call `fastPathOrderedEmitMax`(v7, v1, v0, v7) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4baa4e.  return @kind void;
  #L4baa50.  @monitorexit v7
  #L4baa52.  return @kind void;
  #L4baa54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4baa56.  @monitorexit v7
  #L4baa58.  throw v0;
  #L4baa5a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4baa5c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4baa62.  call `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L4baa68.  v1:= v7.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4baa6c.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4baa72.  return @kind void;
  catch `java.lang.Throwable` @[L4baa08..L4baa24] goto L4baa5a;
  catch `java.lang.Throwable` @[L4baa26..L4baa46] goto L4baa54;
  catch `java.lang.Throwable` @[L4baa50..L4baa58] goto L4baa54;
}
