record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d34dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d34e2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d34e6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4d34ea.  v1:= 1I;
  #L4d34ec.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v1 @kind boolean;
  #L4d34f0.  v1:= new `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter`;
  #L4d34f4.  v2:= 0I;
  #L4d34f6.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4d34fc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` := v1 @kind object;
  #L4d3500.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3514.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L4d3518.  if v0 == 0 then goto L4d352e;
  #L4d351c.  v0:= 0I;
  #L4d351e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d3522.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4d3526.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d352c.  goto L4d3538;
  #L4d352e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3532.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d3538.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d354c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3550.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d3556.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3568.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L4d356c.  if v0 == 0 then goto L4d3576;
  #L4d3570.  v0:= 0I;
  #L4d3572.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d3576.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d357a.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d3580.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3594.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4d3598.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4d359e.  return @kind void;
}
