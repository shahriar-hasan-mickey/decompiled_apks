record `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ca404.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ca40a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4ca40e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ca412.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ca418.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4ca41c.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a`;
  #L4ca420.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;)V` @kind direct;
  #L4ca426.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` := v2 @kind object;
  #L4ca42a.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ca42e.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ca434.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4ca438.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4ca43c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ca442.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4ca446.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4ca44c.  v2:= temp;
  #L4ca44e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.f` @type ^`int` := v2;
  #L4ca452.  v0:= v2 ^> 2;
  #L4ca456.  v2:= v2 - v0 @kind int;
  #L4ca458.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int` := v2;
  #L4ca45c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ca4bc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ca4c2.  v0:= temp;
  #L4ca4c4.  if v0 != 0 then goto L4ca4ce;
  #L4ca4c8.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4ca4ce.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4ca4e0.  v0:= v18 @kind object;
  #L4ca4e4.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca4e8.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L4ca4ec.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int`;
  #L4ca4f0.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int`;
  #L4ca4f4.  v6:= 1I;
  #L4ca4f6.  v7:= 1I;
  #L4ca4f8.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ca4fc.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ca502.  v8:= temp @kind wide;
  #L4ca504.  v11:= 2I;
  #L4ca506.  v12:= 0I;
  #L4ca508.  v13:= lcmp(v2, v8);
  #L4ca50c.  if v13 == 0 then goto L4ca5de;
  #L4ca510.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` @kind boolean;
  #L4ca514.  if v14 == 0 then goto L4ca522;
  #L4ca518.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4ca51c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca520.  return @kind void;
  #L4ca522.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca526.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ca52c.  v14:= temp @kind object;
  #L4ca52e.  if v14 == 0 then goto L4ca54a;
  #L4ca532.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4ca536.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca53a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca53e.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca542.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4ca548.  return @kind void;
  #L4ca54a.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int`;
  #L4ca54e.  v15:= 1L;
  #L4ca552.  if v14 != v6 then goto L4ca56c;
  #L4ca556.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4ca55a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4ca55e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v11;
  #L4ca562.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca568.  v2:= v2 + v15 @kind long;
  #L4ca56a.  goto L4ca504;
  #L4ca56c.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` @kind boolean;
  #L4ca570.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ca574.  if v10 == 0 then goto L4ca582;
  #L4ca578.  call temp:= `poll`(v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ca57e.  v10:= temp @kind object;
  #L4ca580.  goto L4ca584;
  #L4ca582.  v10:= v12 @kind object;
  #L4ca584.  if v10 != 0 then goto L4ca58e;
  #L4ca588.  v17:= 1I;
  #L4ca58c.  goto L4ca592;
  #L4ca58e.  v17:= 0I;
  #L4ca592.  if v6 == 0 then goto L4ca5aa;
  #L4ca596.  if v17 == 0 then goto L4ca5aa;
  #L4ca59a.  if v14 != v11 then goto L4ca5aa;
  #L4ca59e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca5a2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ca5a8.  return @kind void;
  #L4ca5aa.  if v17 == 0 then goto L4ca5b0;
  #L4ca5ae.  goto L4ca5de;
  #L4ca5b0.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca5b6.  v2:= v2 + v15 @kind long;
  #L4ca5b8.  v4:= v4 + 1;
  #L4ca5bc.  if v4 != v5 then goto L4ca5da;
  #L4ca5c0.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca5c4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ca5ca.  v4:= temp @kind object;
  #L4ca5cc.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4ca5d0.  v10:= (`long`) v5 @kind i2l;
  #L4ca5d2.  call `request`(v4, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ca5d8.  v4:= 0I;
  #L4ca5da.  v6:= 1I;
  #L4ca5dc.  goto L4ca504;
  #L4ca5de.  if v13 != 0 then goto L4ca658;
  #L4ca5e2.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` @kind boolean;
  #L4ca5e6.  if v6 == 0 then goto L4ca5f4;
  #L4ca5ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4ca5ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca5f2.  return @kind void;
  #L4ca5f4.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca5f8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ca5fe.  v6:= temp @kind object;
  #L4ca600.  if v6 == 0 then goto L4ca61c;
  #L4ca604.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4ca608.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca60c.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca610.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca614.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4ca61a.  return @kind void;
  #L4ca61c.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` @kind boolean;
  #L4ca620.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ca624.  if v8 == 0 then goto L4ca63a;
  #L4ca628.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ca62e.  v8:= temp;
  #L4ca630.  if v8 == 0 then goto L4ca636;
  #L4ca634.  goto L4ca63a;
  #L4ca636.  v10:= 0I;
  #L4ca638.  goto L4ca63c;
  #L4ca63a.  v10:= 1I;
  #L4ca63c.  if v6 == 0 then goto L4ca658;
  #L4ca640.  if v10 == 0 then goto L4ca658;
  #L4ca644.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int`;
  #L4ca648.  if v6 != v11 then goto L4ca658;
  #L4ca64c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca650.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ca656.  return @kind void;
  #L4ca658.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L4ca65c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v4;
  #L4ca660.  v6:= -v7 @kind int;
  #L4ca662.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ca668.  v7:= temp;
  #L4ca66a.  if v7 != 0 then goto L4ca670;
  #L4ca66e.  return @kind void;
  #L4ca670.  v6:= 1I;
  #L4ca672.  goto L4ca4f8;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ca3d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ca3d8.  if v0 != 0 then goto L4ca3f2;
  #L4ca3dc.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4ca3e0.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4ca3e6.  v1:= temp;
  #L4ca3e8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4ca3ee.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4ca3f2.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca470.  v0:= 1I;
  #L4ca472.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4ca476.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca47a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ca480.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` @kind object;
  #L4ca484.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ca48a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca48e.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4ca494.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ca49a.  v0:= temp;
  #L4ca49c.  if v0 != 0 then goto L4ca4aa;
  #L4ca4a0.  v0:= 0I;
  #L4ca4a2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4ca4a6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v0 @kind object;
  #L4ca4aa.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4ca7dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca7e0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ca7e6.  v2:= temp;
  #L4ca7e8.  if v2 == 0 then goto L4ca7fc;
  #L4ca7ec.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca7f0.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ca7f6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4ca7fc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ca810.  v0:= 0I;
  #L4ca812.  v1:= 1I;
  #L4ca814.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4ca81a.  v0:= temp;
  #L4ca81c.  if v0 == 0 then goto L4ca86a;
  #L4ca820.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L4ca824.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ca828.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ca82e.  v4:= temp @kind wide;
  #L4ca830.  v0:= lcmp(v4, v2);
  #L4ca834.  if v0 == 0 then goto L4ca854;
  #L4ca838.  v0:= 1L;
  #L4ca83c.  v2:= v2 + v0 @kind long;
  #L4ca83e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L4ca842.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca846.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca84c.  v7:= 2I;
  #L4ca84e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v7;
  #L4ca852.  goto L4ca880;
  #L4ca854.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4ca858.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v1;
  #L4ca85c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ca862.  v7:= temp;
  #L4ca864.  if v7 != 0 then goto L4ca880;
  #L4ca868.  return @kind void;
  #L4ca86a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4ca86e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v1;
  #L4ca872.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ca878.  v7:= temp;
  #L4ca87a.  if v7 == 0 then goto L4ca880;
  #L4ca87e.  return @kind void;
  #L4ca880.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4ca886.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca688.  v0:= 1I;
  #L4ca68a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4ca68e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4ca694.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca6a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca6ac.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ca6b2.  v2:= temp;
  #L4ca6b4.  if v2 == 0 then goto L4ca6c8;
  #L4ca6b8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` @kind object;
  #L4ca6bc.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ca6c2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4ca6c8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ca6dc.  v0:= 0I;
  #L4ca6de.  v1:= 1I;
  #L4ca6e0.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4ca6e6.  v2:= temp;
  #L4ca6e8.  if v2 == 0 then goto L4ca784;
  #L4ca6ec.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L4ca6f0.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ca6f4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ca6fa.  v4:= temp @kind wide;
  #L4ca6fc.  v6:= lcmp(v4, v2);
  #L4ca700.  if v6 == 0 then goto L4ca768;
  #L4ca704.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ca708.  if v4 == 0 then goto L4ca722;
  #L4ca70c.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ca712.  v5:= temp;
  #L4ca714.  if v5 == 0 then goto L4ca71a;
  #L4ca718.  goto L4ca722;
  #L4ca71a.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca720.  goto L4ca776;
  #L4ca722.  v4:= 1L;
  #L4ca726.  v2:= v2 + v4 @kind long;
  #L4ca728.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L4ca72c.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca730.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca736.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int`;
  #L4ca73a.  v8:= v8 + v1 @kind int;
  #L4ca73c.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int`;
  #L4ca740.  if v8 != v1 then goto L4ca762;
  #L4ca744.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v0;
  #L4ca748.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca74c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ca752.  v0:= temp @kind object;
  #L4ca754.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4ca758.  v1:= (`long`) v8 @kind i2l;
  #L4ca75a.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ca760.  goto L4ca776;
  #L4ca762.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v8;
  #L4ca766.  goto L4ca776;
  #L4ca768.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4ca76e.  v0:= temp @kind object;
  #L4ca770.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca776.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ca77c.  v8:= temp;
  #L4ca77e.  if v8 != 0 then goto L4ca7a0;
  #L4ca782.  return @kind void;
  #L4ca784.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4ca78a.  v0:= temp @kind object;
  #L4ca78c.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca792.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ca798.  v8:= temp;
  #L4ca79a.  if v8 == 0 then goto L4ca7a0;
  #L4ca79e.  return @kind void;
  #L4ca7a0.  call `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4ca7a6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ca7b8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca7bc.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.f` @type ^`int`;
  #L4ca7c0.  v1:= (`long`) v1 @kind i2l;
  #L4ca7c2.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4ca7c8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca898.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ca89c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ca8a2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4ca8a8.  return @kind void;
}
