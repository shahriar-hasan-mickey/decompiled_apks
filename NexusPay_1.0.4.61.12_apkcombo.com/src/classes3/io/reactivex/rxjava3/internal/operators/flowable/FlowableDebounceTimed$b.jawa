record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bf9c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4bf9ce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4bf9d2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` := v2 @kind wide;
  #L4bf9d6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4bf9da.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4bf9de.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.a:(JLjava/lang/Object;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4bfa18.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L4bfa1c.  v2:= lcmp(v4, v0);
  #L4bfa20.  if v2 != 0 then goto L4bfa72;
  #L4bfa24.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4bfa2a.  v4:= temp @kind wide;
  #L4bfa2c.  v0:= 0L;
  #L4bfa30.  v2:= lcmp(v4, v0);
  #L4bfa34.  if v2 == 0 then goto L4bfa54;
  #L4bfa38.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bfa3c.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bfa42.  v4:= 1L;
  #L4bfa46.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4bfa4c.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.dispose:()V` @kind virtual;
  #L4bfa52.  goto L4bfa72;
  #L4bfa54.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @kind virtual;
  #L4bfa5a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bfa5e.  v5:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4bfa62.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L4bfa66.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bfa6c.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bfa72.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf9f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bf9f4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bf9fa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bf9fe.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bfa04.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bfa84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L4bfa88.  if v0 == 0 then goto L4bfa8e;
  #L4bfa8c.  return @kind void;
  #L4bfa8e.  v0:= 1I;
  #L4bfa90.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4bfa94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bfa98.  if v0 == 0 then goto L4bfaa2;
  #L4bfa9c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bfaa2.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$a`) v0 @kind object;
  #L4bfaa6.  if v0 == 0 then goto L4bfab0;
  #L4bfaaa.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.a:()V` @kind virtual;
  #L4bfab0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bfab4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4bfaba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bfabe.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bfac4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bfad8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L4bfadc.  if v0 == 0 then goto L4bfae8;
  #L4bfae0.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bfae6.  return @kind void;
  #L4bfae8.  v0:= 1I;
  #L4bfaea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4bfaee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bfaf2.  if v0 == 0 then goto L4bfafc;
  #L4bfaf6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bfafc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bfb00.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bfb06.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bfb0a.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bfb10.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bfb24.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L4bfb28.  if v0 == 0 then goto L4bfb2e;
  #L4bfb2c.  return @kind void;
  #L4bfb2e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L4bfb32.  v2:= 1L;
  #L4bfb36.  v0:= v0 + v2 @kind long;
  #L4bfb38.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` := v0 @kind wide;
  #L4bfb3c.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bfb40.  if v2 == 0 then goto L4bfb4a;
  #L4bfb44.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bfb4a.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$a`;
  #L4bfb4e.  call `<init>`(v2, v5, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.<init>:(Ljava/lang/Object;JLio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;)V` @kind direct;
  #L4bfb54.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4bfb58.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bfb5c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` @kind wide;
  #L4bfb60.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4bfb64.  call temp:= `schedule`(v5, v2, v0, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4bfb6a.  v5:= temp @kind object;
  #L4bfb6c.  call `b`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$a;.b:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4bfb72.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bfb84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bfb88.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4bfb8e.  v0:= temp;
  #L4bfb90.  if v0 == 0 then goto L4bfbb2;
  #L4bfb94.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4bfb98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bfb9c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4bfba2.  v0:= 9223372036854775807L;
  #L4bfbac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bfbb2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bfbc4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4bfbca.  v0:= temp;
  #L4bfbcc.  if v0 == 0 then goto L4bfbd6;
  #L4bfbd0.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4bfbd6.  return @kind void;
}
