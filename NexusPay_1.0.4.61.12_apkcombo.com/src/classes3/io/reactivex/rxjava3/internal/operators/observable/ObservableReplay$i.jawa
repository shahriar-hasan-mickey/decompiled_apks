record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.e` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f7680.  v0:= 0I;
  #L4f7682.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v0];
  #L4f7686.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] := v1 @kind object;
  #L4f768a.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v0];
  #L4f768e.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] := v0 @kind object;
  #L4f7692.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f76a4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f76aa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` := v1 @kind object;
  #L4f76ae.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f76b2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f76b6.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4f76ba.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f76c0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4f76c4.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f76c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f76ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4f76d2.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f7600.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7604.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f760a.  v0:= temp @kind object;
  #L4f760c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4f7610.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4f7614.  v2:= 0I;
  #L4f7616.  if v0 != v1 then goto L4f761c;
  #L4f761a.  return v2;
  #L4f761c.  v1:= length @variable v0;
  #L4f761e.  v3:= v1 + 1;
  #L4f7622.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v3];
  #L4f7626.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f762c.  v3[v1]:= v5 @kind object;
  #L4f7630.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7634.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f763a.  v0:= temp;
  #L4f763c.  if v0 == 0 then goto L4f7600;
  #L4f7640.  v5:= 1I;
  #L4f7642.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f77d0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f77d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f77da.  v0:= temp @kind object;
  #L4f77dc.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4f77e0.  v1:= length @variable v0;
  #L4f77e2.  if v1 != 0 then goto L4f77e8;
  #L4f77e6.  return @kind void;
  #L4f77e8.  v2:= -1I;
  #L4f77ea.  v3:= 0I;
  #L4f77ec.  v4:= 0I;
  #L4f77ee.  if v4 >= v1 then goto L4f780c;
  #L4f77f2.  v5:= v0[v4] @kind object;
  #L4f77f6.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f77fc.  v5:= temp;
  #L4f77fe.  if v5 == 0 then goto L4f7806;
  #L4f7802.  v2:= v4;
  #L4f7804.  goto L4f780c;
  #L4f7806.  v4:= v4 + 1;
  #L4f780a.  goto L4f77ee;
  #L4f780c.  if v2 >= 0 then goto L4f7812;
  #L4f7810.  return @kind void;
  #L4f7812.  v4:= 1I;
  #L4f7814.  if v1 != v4 then goto L4f781e;
  #L4f7818.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4f781c.  goto L4f783c;
  #L4f781e.  v5:= v1 + -1;
  #L4f7822.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[v5];
  #L4f7826.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f782c.  v3:= v2 + 1;
  #L4f7830.  v1:= v1 - v2 @kind int;
  #L4f7832.  v1:= v1 - v4 @kind int;
  #L4f7834.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f783a.  v1:= v5 @kind object;
  #L4f783c.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7840.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f7846.  v0:= temp;
  #L4f7848.  if v0 == 0 then goto L4f77d0;
  #L4f784c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f7860.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7864.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f786a.  v0:= temp @kind object;
  #L4f786c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4f7870.  v1:= length @variable v0;
  #L4f7872.  v2:= 0I;
  #L4f7874.  if v2 >= v1 then goto L4f788c;
  #L4f7878.  v3:= v0[v2] @kind object;
  #L4f787c.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4f7880.  call `c`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L4f7886.  v2:= v2 + 1;
  #L4f788a.  goto L4f7874;
  #L4f788c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f78a0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f78a4.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4f78a8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f78ae.  v0:= temp @kind object;
  #L4f78b0.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4f78b4.  v1:= length @variable v0;
  #L4f78b6.  v2:= 0I;
  #L4f78b8.  if v2 >= v1 then goto L4f78d0;
  #L4f78bc.  v3:= v0[v2] @kind object;
  #L4f78c0.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4f78c4.  call `c`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L4f78ca.  v2:= v2 + 1;
  #L4f78ce.  goto L4f78b8;
  #L4f78d0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f76e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f76e8.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4f76ec.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f76f2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f76f6.  v1:= 0I;
  #L4f76f8.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f76fe.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f7704.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7654.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f7658.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f765e.  v0:= temp @kind object;
  #L4f7660.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.g` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4f7664.  if v0 != v1 then goto L4f766c;
  #L4f7668.  v0:= 1I;
  #L4f766a.  goto L4f766e;
  #L4f766c.  v0:= 0I;
  #L4f766e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7718.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4f771c.  if v0 != 0 then goto L4f7736;
  #L4f7720.  v0:= 1I;
  #L4f7722.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L4f7726.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4f772a.  call `complete`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.complete:()V` @kind interface;
  #L4f7730.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.d:()V` @kind virtual;
  #L4f7736.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7748.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4f774c.  if v0 != 0 then goto L4f7768;
  #L4f7750.  v0:= 1I;
  #L4f7752.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` := v0 @kind boolean;
  #L4f7756.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4f775a.  call `a`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f7760.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.d:()V` @kind virtual;
  #L4f7766.  goto L4f776e;
  #L4f7768.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f776e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f7780.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.b` @type ^`boolean` @kind boolean;
  #L4f7784.  if v0 != 0 then goto L4f7798;
  #L4f7788.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4f778c.  call `b`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.b:(Ljava/lang/Object;)V` @kind interface;
  #L4f7792.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.c:()V` @kind virtual;
  #L4f7798.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4f77ac.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f77b2.  v1:= temp;
  #L4f77b4.  if v1 == 0 then goto L4f77be;
  #L4f77b8.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.c:()V` @kind virtual;
  #L4f77be.  return @kind void;
}
