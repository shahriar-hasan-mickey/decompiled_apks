record `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cb02c.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;ZI)V` @kind direct;
  #L4cb032.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cb036.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4cb0f4.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb0f8.  v1:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cb0fc.  v2:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4cb100.  v4:= 1I;
  #L4cb102.  v5:= 1I;
  #L4cb104.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb108.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cb10e.  v6:= temp @kind wide;
  #L4cb110.  v8:= lcmp(v2, v6);
  #L4cb114.  if v8 == 0 then goto L4cb1ba;
  #L4cb118.  v9:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cb11c.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cb122.  v10:= temp @kind object;
  #L4cb124.  if v10 != 0 then goto L4cb12c;
  #L4cb128.  v11:= 1I;
  #L4cb12a.  goto L4cb12e;
  #L4cb12c.  v11:= 0I;
  #L4cb12e.  call temp:= `e`(v12, v9, v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4cb134.  v9:= temp;
  #L4cb136.  if v9 == 0 then goto L4cb13c;
  #L4cb13a.  return @kind void;
  #L4cb13c.  if v11 == 0 then goto L4cb142;
  #L4cb140.  goto L4cb1ba;
  #L4cb142.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cb148.  v8:= 1L;
  #L4cb14c.  v2:= v2 + v8 @kind long;
  #L4cb14e.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L4cb152.  v8:= (`long`) v8 @kind i2l;
  #L4cb154.  v10:= lcmp(v2, v8);
  #L4cb158.  if v10 != 0 then goto L4cb110;
  #L4cb15c.  v8:= 9223372036854775807L;
  #L4cb166.  v10:= lcmp(v6, v8);
  #L4cb16a.  if v10 == 0 then goto L4cb17c;
  #L4cb16e.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb172.  v7:= -v2 @kind long;
  #L4cb174.  call temp:= `addAndGet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4cb17a.  v6:= temp @kind wide;
  #L4cb17c.  v8:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb180.  call `request`(v8, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cb186.  v2:= 0L;
  #L4cb18a.  goto L4cb110;
  #L4cb18c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cb18e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cb194.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4cb198.  v3:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb19c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cb1a2.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4cb1a8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb1ae.  v0:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cb1b2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cb1b8.  return @kind void;
  #L4cb1ba.  if v8 != 0 then goto L4cb1d8;
  #L4cb1be.  v6:= v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cb1c2.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4cb1c8.  v7:= temp;
  #L4cb1ca.  call temp:= `e`(v12, v6, v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4cb1d0.  v6:= temp;
  #L4cb1d2.  if v6 == 0 then goto L4cb1d8;
  #L4cb1d6.  return @kind void;
  #L4cb1d8.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4cb1de.  v6:= temp;
  #L4cb1e0.  if v5 != v6 then goto L4cb1f8;
  #L4cb1e4.  v12.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L4cb1e8.  v5:= -v5 @kind int;
  #L4cb1ea.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cb1f0.  v5:= temp;
  #L4cb1f2.  if v5 != 0 then goto L4cb104;
  #L4cb1f6.  return @kind void;
  #L4cb1f8.  v5:= v6;
  #L4cb1fa.  goto L4cb104;
  catch `java.lang.Throwable` @[L4cb11c..L4cb124] goto L4cb18c;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cb218.  v0:= 1I;
  #L4cb21a.  v1:= 1I;
  #L4cb21c.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4cb220.  if v2 == 0 then goto L4cb226;
  #L4cb224.  return @kind void;
  #L4cb226.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4cb22a.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb22e.  v4:= 0I;
  #L4cb230.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cb236.  if v2 == 0 then goto L4cb268;
  #L4cb23a.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4cb23e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4cb242.  if v0 == 0 then goto L4cb252;
  #L4cb246.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb24a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb250.  goto L4cb25c;
  #L4cb252.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb256.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb25c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cb260.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cb266.  return @kind void;
  #L4cb268.  v1:= -v1 @kind int;
  #L4cb26a.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cb270.  v1:= temp;
  #L4cb272.  if v1 != 0 then goto L4cb21c;
  #L4cb276.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4cb288.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb28c.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cb290.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4cb294.  v4:= 1I;
  #L4cb296.  v5:= 1I;
  #L4cb298.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4cb29c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cb2a2.  v6:= temp @kind wide;
  #L4cb2a4.  v8:= lcmp(v2, v6);
  #L4cb2a8.  if v8 == 0 then goto L4cb30e;
  #L4cb2ac.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cb2b2.  v8:= temp @kind object;
  #L4cb2b4.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4cb2b8.  if v9 == 0 then goto L4cb2be;
  #L4cb2bc.  return @kind void;
  #L4cb2be.  if v8 != 0 then goto L4cb2d8;
  #L4cb2c2.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4cb2c6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb2cc.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cb2d0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cb2d6.  return @kind void;
  #L4cb2d8.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cb2de.  v8:= 1L;
  #L4cb2e2.  v2:= v2 + v8 @kind long;
  #L4cb2e4.  goto L4cb2a4;
  #L4cb2e6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cb2e8.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cb2ee.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4cb2f2.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb2f6.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cb2fc.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cb302.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cb306.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cb30c.  return @kind void;
  #L4cb30e.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4cb312.  if v6 == 0 then goto L4cb318;
  #L4cb316.  return @kind void;
  #L4cb318.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4cb31e.  v6:= temp;
  #L4cb320.  if v6 == 0 then goto L4cb33a;
  #L4cb324.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4cb328.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cb32e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cb332.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cb338.  return @kind void;
  #L4cb33a.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L4cb33e.  v5:= -v5 @kind int;
  #L4cb340.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4cb346.  v5:= temp;
  #L4cb348.  if v5 != 0 then goto L4cb298;
  #L4cb34c.  return @kind void;
  catch `java.lang.Throwable` @[L4cb2ac..L4cb2b4] goto L4cb2e6;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cb048.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb04c.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cb052.  v0:= temp;
  #L4cb054.  if v0 == 0 then goto L4cb0e0;
  #L4cb058.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4cb05c.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4cb060.  if v0 == 0 then goto L4cb0b8;
  #L4cb064.  v0:= v4 @kind object;
  #L4cb066.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4cb06a.  v1:= 7I;
  #L4cb06c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4cb072.  v1:= temp;
  #L4cb074.  v2:= 1I;
  #L4cb076.  if v1 != v2 then goto L4cb092;
  #L4cb07a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L4cb07e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cb082.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4cb086.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb08a.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cb090.  return @kind void;
  #L4cb092.  v2:= 2I;
  #L4cb094.  if v1 != v2 then goto L4cb0b8;
  #L4cb098.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L4cb09c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cb0a0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb0a4.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cb0aa.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4cb0ae.  v0:= (`long`) v0 @kind i2l;
  #L4cb0b0.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cb0b6.  return @kind void;
  #L4cb0b8.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4cb0bc.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4cb0c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4cb0c6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4cb0ca.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cb0ce.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cb0d4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4cb0d8.  v0:= (`long`) v0 @kind i2l;
  #L4cb0da.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cb0e0.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOn$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4cafd0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4cafd4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4cafda.  v0:= temp @kind object;
  #L4cafdc.  if v0 == 0 then goto L4cb01a;
  #L4cafe0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L4cafe4.  v2:= 1I;
  #L4cafe6.  if v1 == v2 then goto L4cb01a;
  #L4cafea.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4cafee.  v3:= 1L;
  #L4caff2.  v1:= v1 + v3 @kind long;
  #L4caff4.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L4caff8.  v3:= (`long`) v3 @kind i2l;
  #L4caffa.  v5:= lcmp(v1, v3);
  #L4caffe.  if v5 != 0 then goto L4cb016;
  #L4cb002.  v3:= 0L;
  #L4cb006.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v3 @kind wide;
  #L4cb00a.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cb00e.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cb014.  goto L4cb01a;
  #L4cb016.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v1 @kind wide;
  #L4cb01a.  return v0 @kind object;
}
