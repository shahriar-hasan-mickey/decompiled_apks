record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0890.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L4c0896.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c089a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L4c089e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c08b0.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c08b6.  v3:= temp;
  #L4c08b8.  if v3 != 0 then goto L4c08ca;
  #L4c08bc.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c08c0.  v0:= 1L;
  #L4c08c4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c08ca.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c0814.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c0818.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c081e.  v0:= temp @kind object;
  #L4c0820.  if v0 != 0 then goto L4c0828;
  #L4c0824.  v0:= 0I;
  #L4c0826.  return v0 @kind object;
  #L4c0828.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c082c.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0832.  v1:= temp @kind object;
  #L4c0834.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4c0838.  v3:= 1I;
  #L4c083a.  if v2 != 0 then goto L4c0848;
  #L4c083e.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4c0842.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c0846.  return v0 @kind object;
  #L4c0848.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c084c.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4c0850.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4c0856.  v2:= temp;
  #L4c0858.  if v2 != 0 then goto L4c0862;
  #L4c085c.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c0860.  return v0 @kind object;
  #L4c0862.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c0866.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c086a.  if v0 == v3 then goto L4c0814;
  #L4c086e.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0872.  v1:= 1L;
  #L4c0876.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c087c.  goto L4c0814;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c07f8.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c07fe.  v1:= temp;
  #L4c0800.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c076c.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c0770.  v1:= 0I;
  #L4c0772.  if v0 == 0 then goto L4c0778;
  #L4c0776.  return v1;
  #L4c0778.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c077c.  if v0 == 0 then goto L4c078e;
  #L4c0780.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c0784.  call temp:= `tryOnNext`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c078a.  v6:= temp;
  #L4c078c.  return v6;
  #L4c078e.  v0:= 1I;
  #L4c0790.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c0794.  call temp:= `apply`(v2, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c079a.  v2:= temp @kind object;
  #L4c079c.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4c07a0.  if v3 == 0 then goto L4c07be;
  #L4c07a4.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c07a8.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4c07ac.  call temp:= `test`(v3, v4, v2) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4c07b2.  v3:= temp;
  #L4c07b4.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4c07b8.  if v3 == 0 then goto L4c07c6;
  #L4c07bc.  return v1;
  #L4c07be.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4c07c2.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4c07c6.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c07ca.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c07d0.  return v0;
  #L4c07d2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c07d4.  call `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c07da.  return v0;
  catch `java.lang.Throwable` @[L4c0790..L4c07c6] goto L4c07d2;
}
