record `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f3450.  v0:= 1I;
  #L4f3452.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f3458.  v0:= temp @kind object;
  #L4f345a.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f345e.  v0:= 2I;
  #L4f3460.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f3466.  v0:= temp @kind object;
  #L4f3468.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f346c.  v0:= 3I;
  #L4f346e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f3474.  v0:= temp @kind object;
  #L4f3476.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f347a.  v0:= 4I;
  #L4f347c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f3482.  v0:= temp @kind object;
  #L4f3484.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L4f3488.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f349c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4f34a2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4f34a6.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4f34aa.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4f34b0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4f34b4.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f34b8.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4f34be.  v0:= temp;
  #L4f34c0.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f34c6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4f34ca.  v2:= new `java.util.LinkedHashMap`;
  #L4f34ce.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4f34d4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L4f34d8.  v2:= new `java.util.LinkedHashMap`;
  #L4f34dc.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4f34e2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L4f34e6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f34ea.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f34f0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f34f4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4f34f8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4f34fc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L4f3500.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4f3504.  v3:= 2I;
  #L4f3506.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4f350c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4f3510.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f39b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f39b8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4f39be.  v0:= temp;
  #L4f39c0.  if v0 == 0 then goto L4f39d6;
  #L4f39c4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f39c8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f39ce.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4f39d4.  goto L4f39dc;
  #L4f39d6.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f39dc.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f39f0.  @monitorenter v1
  #L4f39f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f39f6.  if v2 == 0 then goto L4f3a00;
  #L4f39fa.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4f39fe.  goto L4f3a04;
  #L4f3a00.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4f3a04.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f3a0a.  @monitorexit v1
  #L4f3a0c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4f3a12.  return @kind void;
  #L4f3a14.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f3a16.  @monitorexit v1
  #L4f3a18.  throw v2;
  catch `java.lang.Throwable` @[L4f39f2..L4f3a0c] goto L4f3a14;
  catch `java.lang.Throwable` @[L4f3a16..L4f3a18] goto L4f3a14;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3958.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f395c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4f3962.  v0:= temp;
  #L4f3964.  if v0 == 0 then goto L4f3970;
  #L4f3968.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4f396e.  goto L4f3976;
  #L4f3970.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f3976.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3988.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f398c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f3992.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f3996.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4f399c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4f39a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3540.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L4f3544.  if v0 != 0 then goto L4f356a;
  #L4f3548.  v0:= 1I;
  #L4f354a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4f354e.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4f3554.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f355a.  v0:= temp;
  #L4f355c.  if v0 != 0 then goto L4f356a;
  #L4f3560.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f3564.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f356a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3908.  @monitorenter v1
  #L4f390a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f390e.  if v2 == 0 then goto L4f3918;
  #L4f3912.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4f3916.  goto L4f391c;
  #L4f3918.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4f391c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f3922.  @monitorexit v1
  #L4f3924.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L4f392a.  return @kind void;
  #L4f392c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f392e.  @monitorexit v1
  #L4f3930.  throw v2;
  catch `java.lang.Throwable` @[L4f390a..L4f3924] goto L4f392c;
  catch `java.lang.Throwable` @[L4f392e..L4f3930] goto L4f392c;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L4f3524.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f3528.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f352e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4f357c.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f3582.  v0:= temp;
  #L4f3584.  if v0 == 0 then goto L4f358a;
  #L4f3588.  return @kind void;
  #L4f358a.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f358e.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f3592.  v2:= 1I;
  #L4f3594.  v3:= 1I;
  #L4f3596.  v4:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L4f359a.  if v4 == 0 then goto L4f35a6;
  #L4f359e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f35a4.  return @kind void;
  #L4f35a6.  v4:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f35aa.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f35b0.  v4:= temp @kind object;
  #L4f35b2.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4f35b6.  if v4 == 0 then goto L4f35ce;
  #L4f35ba.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f35c0.  call `f`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4f35c6.  call `h`(v10, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f35cc.  return @kind void;
  #L4f35ce.  v4:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4f35d2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f35d8.  v4:= temp;
  #L4f35da.  v5:= 0I;
  #L4f35dc.  if v4 != 0 then goto L4f35e4;
  #L4f35e0.  v4:= 1I;
  #L4f35e2.  goto L4f35e6;
  #L4f35e4.  v4:= 0I;
  #L4f35e6.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f35ec.  v6:= temp @kind object;
  #L4f35ee.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L4f35f2.  if v6 != 0 then goto L4f35fa;
  #L4f35f6.  v7:= 1I;
  #L4f35f8.  goto L4f35fc;
  #L4f35fa.  v7:= 0I;
  #L4f35fc.  if v4 == 0 then goto L4f362a;
  #L4f3600.  if v7 == 0 then goto L4f362a;
  #L4f3604.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f3608.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f360e.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f3612.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f3618.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f361c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4f3622.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f3628.  return @kind void;
  #L4f362a.  if v7 == 0 then goto L4f363e;
  #L4f362e.  v3:= -v3 @kind int;
  #L4f3630.  call temp:= `addAndGet`(v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f3636.  v3:= temp;
  #L4f3638.  if v3 != 0 then goto L4f3596;
  #L4f363c.  return @kind void;
  #L4f363e.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f3644.  v4:= temp @kind object;
  #L4f3646.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4f364a.  v8:= "The resultSelector returned a null value" @kind object;
  #L4f364e.  if v6 != v7 then goto L4f3726;
  #L4f3652.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.k` @type ^`int`;
  #L4f3656.  v6:= v5 + 1;
  #L4f365a.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.k` @type ^`int` := v6;
  #L4f365e.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f3662.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f3668.  v7:= temp @kind object;
  #L4f366a.  call temp:= `put`(v6, v7, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f3670.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f3674.  call temp:= `apply`(v6, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f367a.  v6:= temp @kind object;
  #L4f367c.  v7:= "The leftEnd returned a null ObservableSource" @kind object;
  #L4f3680.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3686.  v6:= temp @kind object;
  #L4f3688.  v6:= (`io.reactivex.rxjava3.core.ObservableSource`) v6 @kind object;
  #L4f368c.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4f3690.  call `<init>`(v7, v10, v2, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4f3696.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f369a.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f36a0.  call `subscribe`(v6, v7) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f36a6.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f36aa.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f36b0.  v5:= temp @kind object;
  #L4f36b2.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4f36b6.  if v5 == 0 then goto L4f36ce;
  #L4f36ba.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f36c0.  call `f`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4f36c6.  call `h`(v10, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f36cc.  return @kind void;
  #L4f36ce.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f36d2.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f36d8.  v5:= temp @kind object;
  #L4f36da.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f36e0.  v5:= temp @kind object;
  #L4f36e2.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f36e8.  v6:= temp;
  #L4f36ea.  if v6 == 0 then goto L4f3596;
  #L4f36ee.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f36f4.  v6:= temp @kind object;
  #L4f36f6.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4f36fa.  call temp:= `apply`(v7, v4, v6) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f3700.  v6:= temp @kind object;
  #L4f3702.  call temp:= `requireNonNull`(v6, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3708.  v6:= temp @kind object;
  #L4f370a.  call `onNext`(v1, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f3710.  goto L4f36e2;
  #L4f3712.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f3714.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f371a.  return @kind void;
  #L4f371c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f371e.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f3724.  return @kind void;
  #L4f3726.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4f372a.  if v6 != v7 then goto L4f3802;
  #L4f372e.  v6:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.l` @type ^`int`;
  #L4f3732.  v7:= v6 + 1;
  #L4f3736.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.l` @type ^`int` := v7;
  #L4f373a.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f373e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f3744.  v9:= temp @kind object;
  #L4f3746.  call temp:= `put`(v7, v9, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f374c.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4f3750.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f3756.  v7:= temp @kind object;
  #L4f3758.  v9:= "The rightEnd returned a null ObservableSource" @kind object;
  #L4f375c.  call temp:= `requireNonNull`(v7, v9) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3762.  v7:= temp @kind object;
  #L4f3764.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4f3768.  v9:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4f376c.  call `<init>`(v9, v10, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4f3772.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f3776.  call temp:= `add`(v5, v9) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f377c.  call `subscribe`(v7, v9) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f3782.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3786.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f378c.  v5:= temp @kind object;
  #L4f378e.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4f3792.  if v5 == 0 then goto L4f37aa;
  #L4f3796.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f379c.  call `f`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4f37a2.  call `h`(v10, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f37a8.  return @kind void;
  #L4f37aa.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f37ae.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4f37b4.  v5:= temp @kind object;
  #L4f37b6.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f37bc.  v5:= temp @kind object;
  #L4f37be.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f37c4.  v6:= temp;
  #L4f37c6.  if v6 == 0 then goto L4f3596;
  #L4f37ca.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f37d0.  v6:= temp @kind object;
  #L4f37d2.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4f37d6.  call temp:= `apply`(v7, v6, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f37dc.  v6:= temp @kind object;
  #L4f37de.  call temp:= `requireNonNull`(v6, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f37e4.  v6:= temp @kind object;
  #L4f37e6.  call `onNext`(v1, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f37ec.  goto L4f37be;
  #L4f37ee.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f37f0.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f37f6.  return @kind void;
  #L4f37f8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f37fa.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4f3800.  return @kind void;
  #L4f3802.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4f3806.  if v6 != v5 then goto L4f3832;
  #L4f380a.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4f380e.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f3812.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4f3816.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f381c.  v6:= temp @kind object;
  #L4f381e.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f3824.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f3828.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f382e.  goto L4f3596;
  #L4f3832.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4f3836.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f383a.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4f383e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f3844.  v6:= temp @kind object;
  #L4f3846.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f384c.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4f3850.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4f3856.  goto L4f3596;
  catch `java.lang.Throwable` @[L4f3670..L4f368c] goto L4f371c;
  catch `java.lang.Throwable` @[L4f36f6..L4f370a] goto L4f3712;
  catch `java.lang.Throwable` @[L4f374c..L4f3768] goto L4f37f8;
  catch `java.lang.Throwable` @[L4f37d2..L4f37e6] goto L4f37ee;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f389c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f38a0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4f38a6.  v0:= temp @kind object;
  #L4f38a8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4f38ac.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f38b2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4f38b6.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4f38bc.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f38c2.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.rxjava3.core.Observer` v3 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4f38d4.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f38da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f38de.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4f38e4.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4f38ea.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L4f38f0.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f38f6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3438.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L4f343c.  return v0;
}
