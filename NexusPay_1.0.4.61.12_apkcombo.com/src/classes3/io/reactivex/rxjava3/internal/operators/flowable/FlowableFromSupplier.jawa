record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class, `io.reactivex.rxjava3.functions.Supplier` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier` v0 @kind this, `io.reactivex.rxjava3.functions.Supplier` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromSupplier;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c6030.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4c6036.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v1 @kind object;
  #L4c603a.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromSupplier;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6004.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4c6008.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4c600e.  v0:= temp @kind object;
  #L4c6010.  v1:= "The supplier returned a null value" @kind object;
  #L4c6014.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c601a.  v0:= temp @kind object;
  #L4c601c.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromSupplier;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c604c.  v0:= new `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription`;
  #L4c6050.  call `<init>`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4c6056.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c605c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4c6060.  call temp:= `get`(v1) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4c6066.  v1:= temp @kind object;
  #L4c6068.  v2:= "The supplier returned a null value" @kind object;
  #L4c606c.  call temp:= `requireNonNull`(v1, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c6072.  v4:= temp @kind object;
  #L4c6074.  call `complete`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4c607a.  return @kind void;
  #L4c607c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c607e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c6084.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L4c608a.  v0:= temp;
  #L4c608c.  if v0 == 0 then goto L4c6098;
  #L4c6090.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c6096.  goto L4c609e;
  #L4c6098.  call `onError`(v4, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c609e.  return @kind void;
  catch `java.lang.Throwable` @[L4c605c..L4c6074] goto L4c607c;
}
