record `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicQueueDisposable` @kind class {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.c` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f1038.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L4f103e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f1042.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4f1046.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f1088.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L4f108e.  v0:= temp;
  #L4f1090.  if v0 == 0 then goto L4f1096;
  #L4f1094.  return @kind void;
  #L4f1096.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4f109a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f10a0.  v0:= temp @kind object;
  #L4f10a2.  v1:= "The iterator returned a null value" @kind object;
  #L4f10a6.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f10ac.  v0:= temp @kind object;
  #L4f10ae.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f10b2.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f10b8.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L4f10be.  v0:= temp;
  #L4f10c0.  if v0 == 0 then goto L4f10c6;
  #L4f10c4.  return @kind void;
  #L4f10c6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4f10ca.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f10d0.  v0:= temp;
  #L4f10d2.  if v0 != 0 then goto L4f1088;
  #L4f10d6.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L4f10dc.  v0:= temp;
  #L4f10de.  if v0 != 0 then goto L4f10ec;
  #L4f10e2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f10e6.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f10ec.  return @kind void;
  #L4f10ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f10f0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f10f6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f10fa.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1100.  return @kind void;
  #L4f1102.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f1104.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4f110a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f110e.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1114.  return @kind void;
  catch `java.lang.Throwable` @[L4f1096..L4f10ae] goto L4f1102;
  catch `java.lang.Throwable` @[L4f10c6..L4f10d2] goto L4f10ee;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1058.  v0:= 1I;
  #L4f105a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4f105e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1070.  v0:= 1I;
  #L4f1072.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4f1076.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0f88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L4f0f8c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0fa0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L4f0fa4.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f0fdc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L4f0fe0.  v1:= 0I;
  #L4f0fe2.  if v0 == 0 then goto L4f0fe8;
  #L4f0fe6.  return v1 @kind object;
  #L4f0fe8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` @kind boolean;
  #L4f0fec.  v2:= 1I;
  #L4f0fee.  if v0 == 0 then goto L4f1008;
  #L4f0ff2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4f0ff6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f0ffc.  v0:= temp;
  #L4f0ffe.  if v0 != 0 then goto L4f100c;
  #L4f1002.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v2 @kind boolean;
  #L4f1006.  return v1 @kind object;
  #L4f1008.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L4f100c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4f1010.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f1016.  v0:= temp @kind object;
  #L4f1018.  v1:= "The iterator returned a null value" @kind object;
  #L4f101c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f1022.  v0:= temp @kind object;
  #L4f1024.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0fb8.  v0:= 1I;
  #L4f0fba.  v2:= v2 ^& v0 @kind int;
  #L4f0fbc.  if v2 == 0 then goto L4f0fc6;
  #L4f0fc0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4f0fc4.  return v0;
  #L4f0fc6.  v2:= 0I;
  #L4f0fc8.  return v2;
}
