record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cd984.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @kind direct;
  #L4cd98a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4cd98e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cd9a0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L4cd9a4.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cd9a8.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L4cd9ac.  if v2 == v0 then goto L4cd9ce;
  #L4cd9b0.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cd9b4.  if v3 == 0 then goto L4cd9ba;
  #L4cd9b8.  return @kind void;
  #L4cd9ba.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4cd9c0.  v3:= temp @kind object;
  #L4cd9c2.  call temp:= `tryOnNext`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cd9c8.  v2:= v2 + 1;
  #L4cd9cc.  goto L4cd9ac;
  #L4cd9ce.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cd9d2.  if v0 == 0 then goto L4cd9d8;
  #L4cd9d6.  return @kind void;
  #L4cd9d8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cd9de.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$b;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4cd9f0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L4cd9f4.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L4cd9f8.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4cd9fc.  v3:= 0L;
  #L4cda00.  v5:= v3 @kind wide;
  #L4cda02.  v7:= lcmp(v5, v10);
  #L4cda06.  if v7 == 0 then goto L4cda38;
  #L4cda0a.  if v1 == v0 then goto L4cda38;
  #L4cda0e.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cda12.  if v7 == 0 then goto L4cda18;
  #L4cda16.  return @kind void;
  #L4cda18.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4cda1e.  v7:= temp @kind object;
  #L4cda20.  call temp:= `tryOnNext`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4cda26.  v7:= temp;
  #L4cda28.  if v7 == 0 then goto L4cda32;
  #L4cda2c.  v7:= 1L;
  #L4cda30.  v5:= v5 + v7 @kind long;
  #L4cda32.  v1:= v1 + 1;
  #L4cda36.  goto L4cda02;
  #L4cda38.  if v1 != v0 then goto L4cda4c;
  #L4cda3c.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L4cda40.  if v10 != 0 then goto L4cda4a;
  #L4cda44.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cda4a.  return @kind void;
  #L4cda4c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cda52.  v10:= temp @kind wide;
  #L4cda54.  v7:= lcmp(v5, v10);
  #L4cda58.  if v7 != 0 then goto L4cda02;
  #L4cda5c.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L4cda60.  v10:= -v5 @kind long;
  #L4cda62.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4cda68.  v10:= temp @kind wide;
  #L4cda6a.  v5:= lcmp(v10, v3);
  #L4cda6e.  if v5 != 0 then goto L4cda00;
  #L4cda72.  return @kind void;
}
