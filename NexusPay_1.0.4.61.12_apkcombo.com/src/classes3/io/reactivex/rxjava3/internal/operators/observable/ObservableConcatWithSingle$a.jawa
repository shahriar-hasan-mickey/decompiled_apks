record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.SingleSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.SingleSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/SingleSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ec314.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ec31a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ec31e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.b` @type ^`io.reactivex.rxjava3.core.SingleSource` := v2 @kind object;
  #L4ec322.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4ec334.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ec33a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec2ec.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec2f2.  v0:= temp @kind object;
  #L4ec2f4.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ec2f8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec2fe.  v0:= temp;
  #L4ec300.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ec34c.  v0:= 1I;
  #L4ec34e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4ec352.  v0:= 0I;
  #L4ec354.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec35a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.b` @type ^`io.reactivex.rxjava3.core.SingleSource` @kind object;
  #L4ec35e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.b` @type ^`io.reactivex.rxjava3.core.SingleSource` := v0 @kind object;
  #L4ec362.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4ec368.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec37c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec380.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ec386.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec398.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec39c.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ec3a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4ec3b4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ec3ba.  v1:= temp;
  #L4ec3bc.  if v1 == 0 then goto L4ec3d2;
  #L4ec3c0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.c` @type ^`boolean` @kind boolean;
  #L4ec3c4.  if v1 != 0 then goto L4ec3d2;
  #L4ec3c8.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec3cc.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ec3d2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec3e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec3e8.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ec3ee.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ec3f2.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ec3f8.  return @kind void;
}
