record `io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f5fa8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4f5fae.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4f5fb2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v2 @kind wide;
  #L4f5fb6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.b` @type ^`long` := v4 @kind wide;
  #L4f5fba.  return @kind void;
}
procedure `java.lang.Integer` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.a:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f5f48.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L4f5f4c.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L4f5f50.  v4:= lcmp(v0, v2);
  #L4f5f54.  if v4 == 0 then goto L4f5f6e;
  #L4f5f58.  v2:= 1L;
  #L4f5f5c.  v2:= v2 + v0 @kind long;
  #L4f5f5e.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v2 @kind wide;
  #L4f5f62.  v1:= (`int`) v0 @kind l2i;
  #L4f5f64.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f5f6a.  v0:= temp @kind object;
  #L4f5f6c.  return v0 @kind object;
  #L4f5f6e.  v0:= 1I;
  #L4f5f70.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f5f76.  v0:= 0I;
  #L4f5f78.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5fcc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L4f5fd0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v0 @kind wide;
  #L4f5fd4.  v0:= 1I;
  #L4f5fd6.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f5fdc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5ff0.  v0:= 1I;
  #L4f5ff2.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4f5ff8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5ed8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f5ede.  v0:= temp;
  #L4f5ee0.  if v0 == 0 then goto L4f5ee8;
  #L4f5ee4.  v0:= 1I;
  #L4f5ee6.  goto L4f5eea;
  #L4f5ee8.  v0:= 0I;
  #L4f5eea.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f5efc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L4f5f00.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L4f5f04.  v4:= lcmp(v0, v2);
  #L4f5f08.  if v4 != 0 then goto L4f5f10;
  #L4f5f0c.  v0:= 1I;
  #L4f5f0e.  goto L4f5f12;
  #L4f5f10.  v0:= 0I;
  #L4f5f12.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4f5f8c.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.a:()Ljava/lang/Integer;` @kind virtual;
  #L4f5f92.  v0:= temp @kind object;
  #L4f5f94.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5f24.  v0:= 1I;
  #L4f5f26.  v2:= v2 ^& v0 @kind int;
  #L4f5f28.  if v2 == 0 then goto L4f5f32;
  #L4f5f2c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4f5f30.  return v0;
  #L4f5f32.  v2:= 0I;
  #L4f5f34.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRange$a;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f600c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.d` @type ^`boolean` @kind boolean;
  #L4f6010.  if v0 == 0 then goto L4f6016;
  #L4f6014.  return @kind void;
  #L4f6016.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f601a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L4f601e.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L4f6022.  v5:= lcmp(v3, v1);
  #L4f6026.  if v5 == 0 then goto L4f604e;
  #L4f602a.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f6030.  v5:= temp;
  #L4f6032.  if v5 != 0 then goto L4f604e;
  #L4f6036.  v5:= (`int`) v3 @kind l2i;
  #L4f6038.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4f603e.  v5:= temp @kind object;
  #L4f6040.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f6046.  v5:= 1L;
  #L4f604a.  v3:= v3 + v5 @kind long;
  #L4f604c.  goto L4f6022;
  #L4f604e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4f6054.  v1:= temp;
  #L4f6056.  if v1 != 0 then goto L4f6068;
  #L4f605a.  v1:= 1I;
  #L4f605c.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4f6062.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f6068.  return @kind void;
}
