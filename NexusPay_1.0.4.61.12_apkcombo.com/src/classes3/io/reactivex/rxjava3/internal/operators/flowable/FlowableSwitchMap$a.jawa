record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d3600.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d3606.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` := v1 @kind object;
  #L4d360a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` := v2 @kind wide;
  #L4d360e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int` := v4;
  #L4d3612.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4d3624.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d362a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d37bc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int`;
  #L4d37c0.  v1:= 1I;
  #L4d37c2.  if v0 == v1 then goto L4d37d8;
  #L4d37c6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d37cc.  v0:= temp @kind object;
  #L4d37ce.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4d37d2.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d37d8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d363c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4d3640.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4d3644.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4d3648.  v5:= lcmp(v1, v3);
  #L4d364c.  if v5 != 0 then goto L4d365c;
  #L4d3650.  v1:= 1I;
  #L4d3652.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4d3656.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4d365c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d3670.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4d3674.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4d3678.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4d367c.  v5:= lcmp(v1, v3);
  #L4d3680.  if v5 != 0 then goto L4d36b8;
  #L4d3684.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3688.  call temp:= `tryAddThrowable`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d368e.  v1:= temp;
  #L4d3690.  if v1 == 0 then goto L4d36b8;
  #L4d3694.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4d3698.  v1:= 1I;
  #L4d369a.  if v7 != 0 then goto L4d36ac;
  #L4d369e.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d36a2.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d36a8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v1 @kind boolean;
  #L4d36ac.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4d36b0.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4d36b6.  goto L4d36be;
  #L4d36b8.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d36be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d36d0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4d36d4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L4d36d8.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4d36dc.  v5:= lcmp(v1, v3);
  #L4d36e0.  if v5 != 0 then goto L4d3718;
  #L4d36e4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int`;
  #L4d36e8.  if v1 != 0 then goto L4d3712;
  #L4d36ec.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d36f0.  call temp:= `offer`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d36f6.  v7:= temp;
  #L4d36f8.  if v7 != 0 then goto L4d3712;
  #L4d36fc.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d3700.  v0:= "Queue full?!" @kind object;
  #L4d3704.  call `<init>`(v7, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d370a.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d3710.  return @kind void;
  #L4d3712.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4d3718.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d372c.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d3732.  v0:= temp;
  #L4d3734.  if v0 == 0 then goto L4d37a8;
  #L4d3738.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4d373c.  if v0 == 0 then goto L4d378a;
  #L4d3740.  v0:= v4 @kind object;
  #L4d3742.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4d3746.  v1:= 7I;
  #L4d3748.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4d374e.  v1:= temp;
  #L4d3750.  v2:= 1I;
  #L4d3752.  if v1 != v2 then goto L4d376e;
  #L4d3756.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L4d375a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d375e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L4d3762.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L4d3766.  call `b`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4d376c.  return @kind void;
  #L4d376e.  v2:= 2I;
  #L4d3770.  if v1 != v2 then goto L4d378a;
  #L4d3774.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L4d3778.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d377c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L4d3780.  v0:= (`long`) v0 @kind i2l;
  #L4d3782.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d3788.  return @kind void;
  #L4d378a.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4d378e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L4d3792.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4d3798.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d379c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L4d37a0.  v0:= (`long`) v0 @kind i2l;
  #L4d37a2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d37a8.  return @kind void;
}
