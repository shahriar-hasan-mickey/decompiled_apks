record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.d` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.e` @AccessFlag ;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4e8af8.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4e8afc.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4e8b02.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4e8b08.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4e8b0c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v4 @kind object;
  #L4e8b10.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4e8b40.  v1:= v0.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e8b44.  call `onNext`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e8b4a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e8b24.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4e8b28.  call `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L4e8b2e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4e8ba8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4e8bac.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4e8bb2.  v0:= temp @kind object;
  #L4e8bb4.  v1:= "The buffer supplied is null" @kind object;
  #L4e8bb8.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e8bbe.  v0:= temp @kind object;
  #L4e8bc0.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4e8bc4.  @monitorenter v2
  #L4e8bc6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L4e8bca.  if v1 != 0 then goto L4e8bd2;
  #L4e8bce.  @monitorexit v2
  #L4e8bd0.  return @kind void;
  #L4e8bd2.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L4e8bd6.  @monitorexit v2
  #L4e8bd8.  v0:= 0I;
  #L4e8bda.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4e8be0.  return @kind void;
  #L4e8be2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8be4.  @monitorexit v2
  #L4e8be6.  throw v0;
  #L4e8be8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8bea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e8bf0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @kind virtual;
  #L4e8bf6.  v1:= v2.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e8bfa.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e8c00.  return @kind void;
  catch `java.lang.Throwable` @[L4e8ba8..L4e8bc4] goto L4e8be8;
  catch `java.lang.Throwable` @[L4e8bc6..L4e8bd8] goto L4e8be2;
  catch `java.lang.Throwable` @[L4e8be4..L4e8be6] goto L4e8be2;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e8b5c.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4e8b60.  if v0 != 0 then goto L4e8b94;
  #L4e8b64.  v0:= 1I;
  #L4e8b66.  v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4e8b6a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e8b6e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e8b74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e8b78.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e8b7e.  call temp:= `enter`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4e8b84.  v0:= temp;
  #L4e8b86.  if v0 == 0 then goto L4e8b94;
  #L4e8b8a.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e8b8e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4e8b94.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e8ae0.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4e8ae4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e8c34.  @monitorenter v3
  #L4e8c36.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L4e8c3a.  if v0 != 0 then goto L4e8c42;
  #L4e8c3e.  @monitorexit v3
  #L4e8c40.  return @kind void;
  #L4e8c42.  v1:= 0I;
  #L4e8c44.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v1 @kind object;
  #L4e8c48.  @monitorexit v3
  #L4e8c4a.  v1:= v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e8c4e.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4e8c54.  v0:= 1I;
  #L4e8c56.  v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4e8c5a.  call temp:= `enter`(v3) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4e8c60.  v0:= temp;
  #L4e8c62.  if v0 == 0 then goto L4e8c76;
  #L4e8c66.  v0:= v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4e8c6a.  v1:= v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e8c6e.  v2:= 0I;
  #L4e8c70.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4e8c76.  return @kind void;
  #L4e8c78.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8c7a.  @monitorexit v3
  #L4e8c7c.  throw v0;
  catch `java.lang.Throwable` @[L4e8c36..L4e8c4a] goto L4e8c78;
  catch `java.lang.Throwable` @[L4e8c7a..L4e8c7c] goto L4e8c78;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e8ca4.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @kind virtual;
  #L4e8caa.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e8cae.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e8cb4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e8cc8.  @monitorenter v1
  #L4e8cca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L4e8cce.  if v0 != 0 then goto L4e8cd6;
  #L4e8cd2.  @monitorexit v1
  #L4e8cd4.  return @kind void;
  #L4e8cd6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e8cdc.  @monitorexit v1
  #L4e8cde.  return @kind void;
  #L4e8ce0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8ce2.  @monitorexit v1
  #L4e8ce4.  throw v2;
  catch `java.lang.Throwable` @[L4e8cca..L4e8ce4] goto L4e8ce0;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e8d04.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e8d08.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e8d0e.  v0:= temp;
  #L4e8d10.  if v0 == 0 then goto L4e8d82;
  #L4e8d14.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4e8d18.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4e8d1c.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4e8d22.  v0:= temp @kind object;
  #L4e8d24.  v1:= "The buffer supplied is null" @kind object;
  #L4e8d28.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e8d2e.  v0:= temp @kind object;
  #L4e8d30.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4e8d34.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L4e8d38.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$a`;
  #L4e8d3c.  call `<init>`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferExactBoundary$b;)V` @kind direct;
  #L4e8d42.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4e8d46.  v0:= v2.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e8d4a.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e8d50.  v0:= v2.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4e8d54.  if v0 != 0 then goto L4e8d82;
  #L4e8d58.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$b.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4e8d5c.  call `subscribe`(v0, v3) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e8d62.  goto L4e8d82;
  #L4e8d64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8d66.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4e8d6c.  v1:= 1I;
  #L4e8d6e.  v2.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L4e8d72.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e8d78.  v3:= v2.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e8d7c.  call `error`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4e8d82.  return @kind void;
  catch `java.lang.Throwable` @[L4e8d18..L4e8d34] goto L4e8d64;
}
