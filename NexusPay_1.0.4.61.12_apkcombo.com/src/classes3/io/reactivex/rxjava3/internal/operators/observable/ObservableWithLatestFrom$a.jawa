record `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ffcb8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ffcbe.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ffcc2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ffcc8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ffccc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ffcd0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ffcd6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ffcda.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4ffcde.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4ffce2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffdf0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffdf4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ffdfa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ffdfe.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ffe04.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.b:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffc98.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffc9c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ffca2.  v2:= temp;
  #L4ffca4.  return v2;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffcf4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffcf8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ffcfe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffd02.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ffd08.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffc6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffc70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ffc76.  v0:= temp @kind object;
  #L4ffc78.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ffc7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ffc82.  v0:= temp;
  #L4ffc84.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffd1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffd20.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ffd26.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ffd2a.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4ffd30.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffd44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffd48.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ffd4e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ffd52.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ffd58.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ffd6c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ffd72.  v0:= temp @kind object;
  #L4ffd74.  if v0 == 0 then goto L4ffdb4;
  #L4ffd78.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4ffd7c.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ffd82.  v3:= temp @kind object;
  #L4ffd84.  v0:= "The combiner returned a null value" @kind object;
  #L4ffd88.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ffd8e.  v3:= temp @kind object;
  #L4ffd90.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ffd94.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ffd9a.  goto L4ffdb4;
  #L4ffd9c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ffd9e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ffda4.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.dispose:()V` @kind virtual;
  #L4ffdaa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ffdae.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ffdb4.  return @kind void;
  catch `java.lang.Throwable` @[L4ffd78..L4ffd90] goto L4ffd9c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFrom$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffdd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ffdd8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ffdde.  return @kind void;
}
