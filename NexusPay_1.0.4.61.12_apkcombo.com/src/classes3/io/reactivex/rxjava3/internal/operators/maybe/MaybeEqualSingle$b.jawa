record `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.b` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4dcfa0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4dcfa6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` := v1 @kind object;
  #L4dcfaa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4dcfbc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4dcfc2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dcfd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` @kind object;
  #L4dcfd8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.a:()V` @kind virtual;
  #L4dcfde.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dcff0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` @kind object;
  #L4dcff4.  call `b`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.b:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;Ljava/lang/Throwable;)V` @kind virtual;
  #L4dcffa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4dd00c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4dd012.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4dd024.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` := v1 @kind object;
  #L4dd028.  v1:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$b.a` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$a` @kind object;
  #L4dd02c.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeEqualSingle$a;.a:()V` @kind virtual;
  #L4dd032.  return @kind void;
}
