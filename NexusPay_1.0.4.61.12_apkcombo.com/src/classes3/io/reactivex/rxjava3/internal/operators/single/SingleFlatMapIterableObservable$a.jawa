record `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5078b4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L5078ba.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L5078be.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L5078c2.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5078d4.  v0:= 0I;
  #L5078d6.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L5078da.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5078ec.  v0:= 1I;
  #L5078ee.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L5078f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L5078f6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L5078fc.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L507900.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L507904.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507814.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L507818.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50782c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L507830.  if v0 != 0 then goto L507838;
  #L507834.  v0:= 1I;
  #L507836.  goto L50783a;
  #L507838.  v0:= 0I;
  #L50783a.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507918.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L50791c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L507920.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L507924.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L50792a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50793c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L507940.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L507946.  v0:= temp;
  #L507948.  if v0 == 0 then goto L50795a;
  #L50794c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L507950.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L507954.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L50795a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50796c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L507970.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L507974.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50797a.  v3:= temp @kind object;
  #L50797c.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L507980.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L507986.  v3:= temp @kind object;
  #L507988.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50798e.  v1:= temp;
  #L507990.  if v1 != 0 then goto L50799c;
  #L507994.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L50799a.  return @kind void;
  #L50799c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L5079a0.  if v1 == 0 then goto L5079b8;
  #L5079a4.  v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L5079a8.  v3:= 0I;
  #L5079aa.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5079b0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L5079b6.  return @kind void;
  #L5079b8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L5079bc.  if v1 == 0 then goto L5079c2;
  #L5079c0.  return @kind void;
  #L5079c2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5079c8.  v1:= temp @kind object;
  #L5079ca.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5079d0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L5079d4.  if v1 == 0 then goto L5079da;
  #L5079d8.  return @kind void;
  #L5079da.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5079e0.  v1:= temp;
  #L5079e2.  if v1 != 0 then goto L5079b8;
  #L5079e6.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L5079ec.  return @kind void;
  #L5079ee.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5079f0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5079f6.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5079fc.  return @kind void;
  #L5079fe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L507a00.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L507a06.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L507a0c.  return @kind void;
  #L507a0e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L507a10.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L507a16.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L507a1a.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L507a20.  return @kind void;
  catch `java.lang.Throwable` @[L507970..L507990] goto L507a0e;
  catch `java.lang.Throwable` @[L5079c2..L5079ca] goto L5079fe;
  catch `java.lang.Throwable` @[L5079da..L5079e2] goto L5079ee;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L507870.  v0:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L507874.  v1:= 0I;
  #L507876.  if v0 == 0 then goto L5078a0;
  #L50787a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L507880.  v2:= temp @kind object;
  #L507882.  v3:= "The iterator returned a null value" @kind object;
  #L507886.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L50788c.  v2:= temp @kind object;
  #L50788e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L507894.  v0:= temp;
  #L507896.  if v0 != 0 then goto L50789e;
  #L50789a.  v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L50789e.  return v2 @kind object;
  #L5078a0.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50784c.  v0:= 2I;
  #L50784e.  v2:= v2 ^& v0 @kind int;
  #L507850.  if v2 == 0 then goto L50785c;
  #L507854.  v2:= 1I;
  #L507856.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L50785a.  return v0;
  #L50785c.  v2:= 0I;
  #L50785e.  return v2;
}
