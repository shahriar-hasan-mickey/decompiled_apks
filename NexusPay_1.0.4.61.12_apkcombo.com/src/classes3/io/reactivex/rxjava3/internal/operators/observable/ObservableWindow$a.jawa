record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.subjects.UnicastSubject` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fdd70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4fdd76.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fdd7a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.b` @type ^`long` := v2 @kind wide;
  #L4fdd7e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.c` @type ^`int` := v4;
  #L4fdd82.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4fdd86.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4fdd8c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4fdd90.  v1:= 1I;
  #L4fdd92.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4fdd98.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fddac.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fddb0.  v1:= 0I;
  #L4fddb2.  v2:= 1I;
  #L4fddb4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4fddba.  v0:= temp;
  #L4fddbc.  if v0 == 0 then goto L4fddc6;
  #L4fddc0.  call `run`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.run:()V` @kind virtual;
  #L4fddc6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fdd50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fdd54.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fdd5a.  v0:= temp;
  #L4fdd5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fddd8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4fdddc.  if v0 == 0 then goto L4fddec;
  #L4fdde0.  v1:= 0I;
  #L4fdde2.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v1 @kind object;
  #L4fdde6.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fddec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fddf0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fddf6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fde08.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4fde0c.  if v0 == 0 then goto L4fde1c;
  #L4fde10.  v1:= 0I;
  #L4fde12.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v1 @kind object;
  #L4fde16.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fde1c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fde20.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fde26.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4fde38.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` @kind object;
  #L4fde3c.  v1:= 0I;
  #L4fde3e.  if v0 != 0 then goto L4fde7e;
  #L4fde42.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4fde46.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4fde4c.  v2:= temp;
  #L4fde4e.  if v2 != 0 then goto L4fde7e;
  #L4fde52.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4fde58.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.c` @type ^`int`;
  #L4fde5c.  call temp:= `create`(v0, v7) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4fde62.  v0:= temp @kind object;
  #L4fde64.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v0 @kind object;
  #L4fde68.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.b`;
  #L4fde6c.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.<init>:(Lio/reactivex/rxjava3/subjects/Subject;)V` @kind direct;
  #L4fde72.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fde76.  call `onNext`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fde7c.  goto L4fde80;
  #L4fde7e.  v2:= v1 @kind object;
  #L4fde80.  if v0 == 0 then goto L4fded0;
  #L4fde84.  call `onNext`(v0, v8) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4fde8a.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.e` @type ^`long` @kind wide;
  #L4fde8e.  v5:= 1L;
  #L4fde92.  v3:= v3 + v5 @kind long;
  #L4fde94.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.e` @type ^`long` := v3 @kind wide;
  #L4fde98.  v5:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.b` @type ^`long` @kind wide;
  #L4fde9c.  v8:= lcmp(v3, v5);
  #L4fdea0.  if v8 < 0 then goto L4fdeb6;
  #L4fdea4.  v3:= 0L;
  #L4fdea8.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.e` @type ^`long` := v3 @kind wide;
  #L4fdeac.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v1 @kind object;
  #L4fdeb0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fdeb6.  if v2 == 0 then goto L4fded0;
  #L4fdeba.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/b;.a:()Z` @kind virtual;
  #L4fdec0.  v8:= temp;
  #L4fdec2.  if v8 == 0 then goto L4fded0;
  #L4fdec6.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.g` @type ^`io.reactivex.rxjava3.subjects.UnicastSubject` := v1 @kind object;
  #L4fdeca.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4fded0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fdee4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fdee8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fdeee.  v0:= temp;
  #L4fdef0.  if v0 == 0 then goto L4fdf02;
  #L4fdef4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fdef8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fdefc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fdf02.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindow$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fdf14.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4fdf1a.  v0:= temp;
  #L4fdf1c.  if v0 != 0 then goto L4fdf2a;
  #L4fdf20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fdf24.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fdf2a.  return @kind void;
}
