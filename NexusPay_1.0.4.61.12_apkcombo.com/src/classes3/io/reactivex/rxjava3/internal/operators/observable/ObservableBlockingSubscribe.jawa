record `io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e7de8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e7dee.  v0:= new `java.lang.IllegalStateException`;
  #L4e7df2.  v1:= "No instances!" @kind object;
  #L4e7df6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e7dfc.  throw v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.core.ObservableSource` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e7e10.  v0:= new `io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver`;
  #L4e7e14.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/BlockingIgnoringReceiver;.<init>:()V` @kind direct;
  #L4e7e1a.  v1:= new `io.reactivex.rxjava3.internal.observers.LambdaObserver`;
  #L4e7e1e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4e7e24.  v2:= temp @kind object;
  #L4e7e26.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4e7e2c.  v3:= temp @kind object;
  #L4e7e2e.  call `<init>`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/rxjava3/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L4e7e34.  call `subscribe`(v4, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e7e3a.  call `awaitForComplete`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.awaitForComplete:(Ljava/util/concurrent/CountDownLatch;Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind static;
  #L4e7e40.  v4:= v0.`io.reactivex.rxjava3.internal.util.BlockingIgnoringReceiver.error` @type ^`java.lang.Throwable` @kind object;
  #L4e7e44.  if v4 != 0 then goto L4e7e4a;
  #L4e7e48.  return @kind void;
  #L4e7e4a.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e7e50.  v4:= temp @kind object;
  #L4e7e52.  throw v4;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4e7e64.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L4e7e68.  call `<init>`(v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L4e7e6e.  v1:= new `io.reactivex.rxjava3.internal.observers.BlockingObserver`;
  #L4e7e72.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L4e7e78.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e7e7e.  call `subscribe`(v3, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4e7e84.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.isDisposed:()Z` @kind virtual;
  #L4e7e8a.  v3:= temp;
  #L4e7e8c.  if v3 == 0 then goto L4e7e92;
  #L4e7e90.  goto L4e7ed8;
  #L4e7e92.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4e7e98.  v3:= temp @kind object;
  #L4e7e9a.  if v3 != 0 then goto L4e7eb8;
  #L4e7e9e.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L4e7ea4.  v3:= temp @kind object;
  #L4e7ea6.  goto L4e7eb8;
  #L4e7ea8.  v3:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4e7eaa.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.dispose:()V` @kind virtual;
  #L4e7eb0.  call `onError`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e7eb6.  return @kind void;
  #L4e7eb8.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingObserver;.isDisposed:()Z` @kind virtual;
  #L4e7ebe.  v2:= temp;
  #L4e7ec0.  if v2 != 0 then goto L4e7ed8;
  #L4e7ec4.  v2:= `@@io.reactivex.rxjava3.internal.observers.BlockingObserver.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L4e7ec8.  if v3 == v2 then goto L4e7ed8;
  #L4e7ecc.  call temp:= `acceptFull`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/rxjava3/core/Observer;)Z` @kind static;
  #L4e7ed2.  v3:= temp;
  #L4e7ed4.  if v3 == 0 then goto L4e7e84;
  #L4e7ed8.  return @kind void;
  catch `java.lang.InterruptedException` @[L4e7e9e..L4e7ea6] goto L4e7ea8;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `io.reactivex.rxjava3.functions.Consumer` v4 @kind object, `io.reactivex.rxjava3.functions.Action` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e7efc.  v0:= "onNext is null" @kind object;
  #L4e7f00.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e7f06.  v0:= "onError is null" @kind object;
  #L4e7f0a.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e7f10.  v0:= "onComplete is null" @kind object;
  #L4e7f14.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4e7f1a.  v0:= new `io.reactivex.rxjava3.internal.observers.LambdaObserver`;
  #L4e7f1e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4e7f24.  v1:= temp @kind object;
  #L4e7f26.  call `<init>`(v0, v3, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;)V` @kind direct;
  #L4e7f2c.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBlockingSubscribe;.subscribe:(Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4e7f32.  return @kind void;
}
