record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d48b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d48b6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d48ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4d48be.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d48d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d48d4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d48da.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d48ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4d48f0.  if v0 != 0 then goto L4d4904;
  #L4d48f4.  v0:= 1I;
  #L4d48f6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d48fa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d48fe.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d4904.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d4918.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4d491c.  if v0 != 0 then goto L4d4932;
  #L4d4920.  v0:= 1I;
  #L4d4922.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4d4926.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d492a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d4930.  goto L4d4938;
  #L4d4932.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d4938.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d494c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4d4950.  if v0 != 0 then goto L4d49a2;
  #L4d4954.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4958.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d495e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4d4962.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4d4968.  v2:= temp;
  #L4d496a.  if v2 == 0 then goto L4d49a2;
  #L4d496e.  v2:= 1I;
  #L4d4970.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4d4974.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4978.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d497e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d4982.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d4988.  goto L4d49a2;
  #L4d498a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d498c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d4992.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d4996.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d499c.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d49a2.  return @kind void;
  catch `java.lang.Throwable` @[L4d495e..L4d496a] goto L4d498a;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d49c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d49c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d49ca.  v0:= temp;
  #L4d49cc.  if v0 == 0 then goto L4d49de;
  #L4d49d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d49d4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d49d8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d49de.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTakeUntilPredicate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d49f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d49f4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d49fa.  return @kind void;
}
