record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cd4d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4cd4da.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4cd4de.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` := v2 @kind object;
  #L4cd4e2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd4f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cd4f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cd4fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind object;
  #L4cd502.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.dispose:()V` @kind virtual;
  #L4cd508.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd51c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd520.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cd526.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind object;
  #L4cd52a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.dispose:()V` @kind virtual;
  #L4cd530.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd544.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd548.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cd54e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$a` @kind object;
  #L4cd552.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$a;.dispose:()V` @kind virtual;
  #L4cd558.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd56c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd570.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cd576.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd588.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cd58c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4cd592.  v0:= temp;
  #L4cd594.  if v0 == 0 then goto L4cd5a6;
  #L4cd598.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4cd59c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd5a0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cd5a6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd5b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$c.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cd5bc.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4cd5c2.  return @kind void;
}
