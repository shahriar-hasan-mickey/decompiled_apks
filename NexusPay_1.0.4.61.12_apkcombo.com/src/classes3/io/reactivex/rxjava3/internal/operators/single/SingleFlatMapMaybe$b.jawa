record `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L507b58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L507b5e.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L507b62.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L507b66.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L507b78.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L507b7e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507b30.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L507b36.  v0:= temp @kind object;
  #L507b38.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L507b3c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L507b42.  v0:= temp;
  #L507b44.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507b90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L507b94.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L507b9a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L507bac.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L507bb2.  v1:= temp;
  #L507bb4.  if v1 == 0 then goto L507bc2;
  #L507bb8.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L507bbc.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L507bc2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L507bd4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L507bd8.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L507bde.  v3:= temp @kind object;
  #L507be0.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L507be4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L507bea.  v3:= temp @kind object;
  #L507bec.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L507bf0.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.isDisposed:()Z` @kind virtual;
  #L507bf6.  v0:= temp;
  #L507bf8.  if v0 != 0 then goto L507c10;
  #L507bfc.  v0:= new `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a`;
  #L507c00.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L507c04.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind direct;
  #L507c0a.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L507c10.  return @kind void;
  #L507c12.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L507c14.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L507c1a.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L507c20.  return @kind void;
  catch `java.lang.Throwable` @[L507bd4..L507bf0] goto L507c12;
}
