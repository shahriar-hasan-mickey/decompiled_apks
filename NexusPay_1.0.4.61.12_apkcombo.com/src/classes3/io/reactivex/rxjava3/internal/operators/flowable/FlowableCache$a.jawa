record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.e` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bb3e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bb3ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4bb3ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` := v2 @kind object;
  #L4bb3f2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` @kind object;
  #L4bb3f6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L4bb3fa.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4bb3fe.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4bb404.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4bb408.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bb41c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bb420.  v1:= -9223372036854775808L;
  #L4bb424.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4bb42a.  v3:= temp @kind wide;
  #L4bb42c.  v0:= lcmp(v3, v1);
  #L4bb430.  if v0 == 0 then goto L4bb43e;
  #L4bb434.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` @kind object;
  #L4bb438.  call `f`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L4bb43e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb450.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4bb456.  v0:= temp;
  #L4bb458.  if v0 == 0 then goto L4bb470;
  #L4bb45c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4bb460.  call temp:= `addCancel`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4bb466.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableCache` @kind object;
  #L4bb46a.  call `g`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L4bb470.  return @kind void;
}
