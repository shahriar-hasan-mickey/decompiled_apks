record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d2930.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L4d2936.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d293a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.b` @type ^`int` := v2;
  #L4d293e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2950.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2954.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d295a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d296c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2970.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d2976.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2988.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d298c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d2992.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d29a4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.b` @type ^`int`;
  #L4d29a8.  call temp:= `size`(v3) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L4d29ae.  v1:= temp;
  #L4d29b0.  if v0 != v1 then goto L4d29c8;
  #L4d29b4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d29b8.  call temp:= `poll`(v3) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4d29be.  v1:= temp @kind object;
  #L4d29c0.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d29c6.  goto L4d29d6;
  #L4d29c8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d29cc.  v1:= 1L;
  #L4d29d0.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d29d6.  call temp:= `offer`(v3, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d29dc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d29f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d29f4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d29fa.  v0:= temp;
  #L4d29fc.  if v0 == 0 then goto L4d2a0e;
  #L4d2a00.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d2a04.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2a08.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d2a0e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipLast$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2a20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2a24.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d2a2a.  return @kind void;
}
