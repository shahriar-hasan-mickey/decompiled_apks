record `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f8b80.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f8b86.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f8b8a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f8b90.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f8b94.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4f8b98.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4f8b9c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8bb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f8bb4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f8bba.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @kind virtual;
  #L4f8bc0.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f8bfc.  v0:= 0I;
  #L4f8bfe.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f8c04.  v0:= temp @kind object;
  #L4f8c06.  if v0 == 0 then goto L4f8c14;
  #L4f8c0a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8c0e.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f8c14.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8c28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f8c2c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f8c32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8c36.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f8c3c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8bd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8bd8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f8bde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f8be2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f8be8.  return @kind void;
}
procedure `void` `e`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.f:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @AccessFlag  {
    temp;
    v0;

  #L4f8b60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8b64.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f8b6a.  v2:= temp;
  #L4f8b6c.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8b34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8b38.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8b3e.  v0:= temp @kind object;
  #L4f8b40.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4f8b44.  if v0 != v1 then goto L4f8b4c;
  #L4f8b48.  v0:= 1I;
  #L4f8b4a.  goto L4f8b4e;
  #L4f8b4c.  v0:= 0I;
  #L4f8b4e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8c50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8c54.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f8c5a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @kind virtual;
  #L4f8c60.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8c74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8c78.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4f8c7e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8c82.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f8c88.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4f8c9c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f8ca2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8cb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f8cb8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f8cbe.  v0:= temp;
  #L4f8cc0.  if v0 == 0 then goto L4f8cf6;
  #L4f8cc4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f8cc8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f8ccc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f8cd2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f8cd6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f8cdc.  v2:= temp @kind object;
  #L4f8cde.  if v2 != 0 then goto L4f8cf6;
  #L4f8ce2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4f8ce6.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$d`;
  #L4f8cea.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$d;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;)V` @kind direct;
  #L4f8cf0.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4f8cf6.  return @kind void;
}
