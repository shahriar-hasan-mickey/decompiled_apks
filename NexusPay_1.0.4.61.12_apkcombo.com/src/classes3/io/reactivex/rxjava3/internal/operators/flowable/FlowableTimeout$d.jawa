record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$c` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d5860.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d5866.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d586a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d586e.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d5872.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d5878.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4d587c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d5880.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d5886.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d588a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d588e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d5894.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d5898.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.a:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d5aa0.  v0:= 9223372036854775807L;
  #L4d5aaa.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5ab0.  v3:= temp;
  #L4d5ab2.  if v3 == 0 then goto L4d5acc;
  #L4d5ab6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5aba.  call temp:= `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d5ac0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5ac4.  call `onError`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5aca.  goto L4d5ad2;
  #L4d5acc.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5ad2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d5a58.  v0:= 9223372036854775807L;
  #L4d5a62.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5a68.  v3:= temp;
  #L4d5a6a.  if v3 == 0 then goto L4d5a8c;
  #L4d5a6e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5a72.  call temp:= `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d5a78.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5a7c.  v4:= new `java.util.concurrent.TimeoutException`;
  #L4d5a80.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4d5a86.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5a8c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v3 @kind this, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.c:(Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4d5b04.  if v4 == 0 then goto L4d5b2c;
  #L4d5b08.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a`;
  #L4d5b0c.  v1:= 0L;
  #L4d5b10.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L4d5b16.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5b1a.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d5b20.  v1:= temp;
  #L4d5b22.  if v1 == 0 then goto L4d5b2c;
  #L4d5b26.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d5b2c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d58ac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d58b0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d58b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d58ba.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d58c0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d58d4.  v0:= 9223372036854775807L;
  #L4d58de.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d58e4.  v2:= temp @kind wide;
  #L4d58e6.  v4:= lcmp(v2, v0);
  #L4d58ea.  if v4 == 0 then goto L4d5902;
  #L4d58ee.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d58f2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d58f8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d58fc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d5902.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d5914.  v0:= 9223372036854775807L;
  #L4d591e.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5924.  v2:= temp @kind wide;
  #L4d5926.  v4:= lcmp(v2, v0);
  #L4d592a.  if v4 == 0 then goto L4d5944;
  #L4d592e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5932.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5938.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d593c.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5942.  goto L4d594a;
  #L4d5944.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d594a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d595c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d5962.  v0:= temp @kind wide;
  #L4d5964.  v2:= 9223372036854775807L;
  #L4d596e.  v4:= lcmp(v0, v2);
  #L4d5972.  if v4 == 0 then goto L4d5a1a;
  #L4d5976.  v4:= 1L;
  #L4d597a.  v4:= v4 + v0 @kind long;
  #L4d597c.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5982.  v0:= temp;
  #L4d5984.  if v0 != 0 then goto L4d598a;
  #L4d5988.  goto L4d5a1a;
  #L4d598a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d598e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d5994.  v0:= temp @kind object;
  #L4d5996.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d599a.  if v0 == 0 then goto L4d59a4;
  #L4d599e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d59a4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d59a8.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d59ae.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d59b2.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d59b8.  v7:= temp @kind object;
  #L4d59ba.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L4d59be.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d59c4.  v7:= temp @kind object;
  #L4d59c6.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4d59ca.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$a`;
  #L4d59ce.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L4d59d4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d59d8.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d59de.  v1:= temp;
  #L4d59e0.  if v1 == 0 then goto L4d59ea;
  #L4d59e4.  call `subscribe`(v7, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d59ea.  return @kind void;
  #L4d59ec.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d59ee.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d59f4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d59f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d59fe.  v0:= temp @kind object;
  #L4d5a00.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4d5a04.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d5a0a.  call temp:= `getAndSet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5a10.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5a14.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5a1a.  return @kind void;
  catch `java.lang.Throwable` @[L4d59ae..L4d59ca] goto L4d59ec;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d5a38.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5a3c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5a40.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d5a46.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeout$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d5ae4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5ae8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$d.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5aec.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4d5af2.  return @kind void;
}
