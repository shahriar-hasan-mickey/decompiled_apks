record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c2208.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L4c220e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4c2212.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c2224.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c222a.  v3:= temp;
  #L4c222c.  if v3 != 0 then goto L4c223e;
  #L4c2230.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c2234.  v0:= 1L;
  #L4c2238.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c223e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c21bc.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c21c0.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4c21c4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c21ca.  v2:= temp @kind object;
  #L4c21cc.  if v2 != 0 then goto L4c21d4;
  #L4c21d0.  v0:= 0I;
  #L4c21d2.  return v0 @kind object;
  #L4c21d4.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4c21da.  v3:= temp;
  #L4c21dc.  if v3 == 0 then goto L4c21e2;
  #L4c21e0.  return v2 @kind object;
  #L4c21e2.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c21e6.  v3:= 2I;
  #L4c21e8.  if v2 != v3 then goto L4c21c4;
  #L4c21ec.  v2:= 1L;
  #L4c21f0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c21f6.  goto L4c21c4;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c21a0.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c21a6.  v1:= temp;
  #L4c21a8.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c2130.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c2134.  v1:= 0I;
  #L4c2136.  if v0 == 0 then goto L4c213c;
  #L4c213a.  return v1;
  #L4c213c.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4c2140.  if v0 == 0 then goto L4c2154;
  #L4c2144.  v4:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c2148.  v0:= 0I;
  #L4c214a.  call temp:= `tryOnNext`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c2150.  v4:= temp;
  #L4c2152.  return v4;
  #L4c2154.  v0:= 1I;
  #L4c2156.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4c215a.  call temp:= `test`(v2, v4) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4c2160.  v2:= temp;
  #L4c2162.  if v2 == 0 then goto L4c2178;
  #L4c2166.  v2:= v3.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c216a.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c2170.  v4:= temp;
  #L4c2172.  if v4 == 0 then goto L4c2178;
  #L4c2176.  v1:= 1I;
  #L4c2178.  return v1;
  #L4c217a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c217c.  call `fail`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c2182.  return v0;
  catch `java.lang.Throwable` @[L4c2156..L4c2162] goto L4c217a;
}
