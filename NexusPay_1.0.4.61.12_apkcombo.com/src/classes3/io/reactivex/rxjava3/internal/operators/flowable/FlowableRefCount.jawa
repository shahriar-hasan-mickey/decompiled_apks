record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `io.reactivex.rxjava3.flowables.ConnectableFlowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v7 @kind this, `io.reactivex.rxjava3.flowables.ConnectableFlowable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ce7bc.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ce7c0.  v2:= 1I;
  #L4ce7c2.  v3:= 0L;
  #L4ce7c6.  v6:= 0I;
  #L4ce7c8.  v0:= v7 @kind object;
  #L4ce7ca.  v1:= v8 @kind object;
  #L4ce7cc.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L4ce7d2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v0 @kind this, `io.reactivex.rxjava3.flowables.ConnectableFlowable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ce7e4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4ce7ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` := v1 @kind object;
  #L4ce7ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.c` @type ^`int` := v2;
  #L4ce7f2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @type ^`long` := v3 @kind wide;
  #L4ce7f6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4ce7fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.f` @type ^`io.reactivex.rxjava3.core.Scheduler` := v6 @kind object;
  #L4ce7fe.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ce810.  @monitorenter v5
  #L4ce812.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce816.  if v0 == 0 then goto L4ce88e;
  #L4ce81a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce81e.  if v0 == v6 then goto L4ce824;
  #L4ce822.  goto L4ce88e;
  #L4ce824.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L4ce828.  v2:= 1L;
  #L4ce82c.  v0:= v0 - v2 @kind long;
  #L4ce82e.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L4ce832.  v2:= 0L;
  #L4ce836.  v4:= lcmp(v0, v2);
  #L4ce83a.  if v4 != 0 then goto L4ce88a;
  #L4ce83e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L4ce842.  if v0 != 0 then goto L4ce848;
  #L4ce846.  goto L4ce88a;
  #L4ce848.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @type ^`long` @kind wide;
  #L4ce84c.  v4:= lcmp(v0, v2);
  #L4ce850.  if v4 != 0 then goto L4ce85e;
  #L4ce854.  call `g`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4ce85a.  @monitorexit v5
  #L4ce85c.  return @kind void;
  #L4ce85e.  v0:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4ce862.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4ce868.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ce86c.  @monitorexit v5
  #L4ce86e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.f` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4ce872.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.d` @type ^`long` @kind wide;
  #L4ce876.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ce87a.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ce880.  v6:= temp @kind object;
  #L4ce882.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4ce888.  return @kind void;
  #L4ce88a.  @monitorexit v5
  #L4ce88c.  return @kind void;
  #L4ce88e.  @monitorexit v5
  #L4ce890.  return @kind void;
  #L4ce892.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ce894.  @monitorexit v5
  #L4ce896.  throw v6;
  catch `java.lang.Throwable` @[L4ce812..L4ce86e] goto L4ce892;
  catch `java.lang.Throwable` @[L4ce88a..L4ce896] goto L4ce892;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ce970.  @monitorenter v6
  #L4ce972.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce976.  if v0 != v7 then goto L4ce9ba;
  #L4ce97a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ce97e.  v1:= 0I;
  #L4ce980.  if v0 == 0 then goto L4ce992;
  #L4ce984.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ce988.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ce98e.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v1 @kind object;
  #L4ce992.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L4ce996.  v4:= 1L;
  #L4ce99a.  v2:= v2 - v4 @kind long;
  #L4ce99c.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v2 @kind wide;
  #L4ce9a0.  v4:= 0L;
  #L4ce9a4.  v7:= lcmp(v2, v4);
  #L4ce9a8.  if v7 != 0 then goto L4ce9ba;
  #L4ce9ac.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v1 @kind object;
  #L4ce9b0.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L4ce9b4.  call `reset`(v7) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.reset:()V` @kind virtual;
  #L4ce9ba.  @monitorexit v6
  #L4ce9bc.  return @kind void;
  #L4ce9be.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ce9c0.  @monitorexit v6
  #L4ce9c2.  throw v7;
  catch `java.lang.Throwable` @[L4ce972..L4ce9c2] goto L4ce9be;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ce9e0.  @monitorenter v5
  #L4ce9e2.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L4ce9e6.  v2:= 0L;
  #L4ce9ea.  v4:= lcmp(v0, v2);
  #L4ce9ee.  if v4 != 0 then goto L4cea28;
  #L4ce9f2.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce9f6.  if v6 != v0 then goto L4cea28;
  #L4ce9fa.  v0:= 0I;
  #L4ce9fc.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v0 @kind object;
  #L4cea00.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cea06.  v0:= temp @kind object;
  #L4cea08.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4cea0c.  call temp:= `dispose`(v6) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cea12.  if v0 != 0 then goto L4cea1e;
  #L4cea16.  v0:= 1I;
  #L4cea18.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4cea1c.  goto L4cea28;
  #L4cea1e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L4cea22.  call `reset`(v6) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.reset:()V` @kind virtual;
  #L4cea28.  @monitorexit v5
  #L4cea2a.  return @kind void;
  #L4cea2c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cea2e.  @monitorexit v5
  #L4cea30.  throw v6;
  catch `java.lang.Throwable` @[L4ce9e2..L4cea30] goto L4cea2c;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v7 @kind this, `org.reactivestreams.Subscriber` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ce8bc.  @monitorenter v7
  #L4ce8be.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce8c2.  if v0 != 0 then goto L4ce8d4;
  #L4ce8c6.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a`;
  #L4ce8ca.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;)V` @kind direct;
  #L4ce8d0.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v0 @kind object;
  #L4ce8d4.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L4ce8d8.  v3:= 0L;
  #L4ce8dc.  v5:= lcmp(v1, v3);
  #L4ce8e0.  if v5 != 0 then goto L4ce8f6;
  #L4ce8e4.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ce8e8.  if v3 == 0 then goto L4ce8f6;
  #L4ce8ec.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ce8f0.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ce8f6.  v3:= 1L;
  #L4ce8fa.  v1:= v1 + v3 @kind long;
  #L4ce8fc.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v1 @kind wide;
  #L4ce900.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L4ce904.  v4:= 1I;
  #L4ce906.  if v3 != 0 then goto L4ce91e;
  #L4ce90a.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.c` @type ^`int`;
  #L4ce90e.  v5:= (`long`) v3 @kind i2l;
  #L4ce910.  v3:= lcmp(v1, v5);
  #L4ce914.  if v3 != 0 then goto L4ce91e;
  #L4ce918.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` := v4 @kind boolean;
  #L4ce91c.  goto L4ce920;
  #L4ce91e.  v4:= 0I;
  #L4ce920.  @monitorexit v7
  #L4ce922.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L4ce926.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b`;
  #L4ce92a.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind direct;
  #L4ce930.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4ce936.  if v4 == 0 then goto L4ce944;
  #L4ce93a.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L4ce93e.  call `connect`(v8, v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @kind virtual;
  #L4ce944.  return @kind void;
  #L4ce946.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ce948.  @monitorexit v7
  #L4ce94a.  throw v8;
  catch `java.lang.Throwable` @[L4ce8be..L4ce922] goto L4ce946;
  catch `java.lang.Throwable` @[L4ce948..L4ce94a] goto L4ce946;
}
