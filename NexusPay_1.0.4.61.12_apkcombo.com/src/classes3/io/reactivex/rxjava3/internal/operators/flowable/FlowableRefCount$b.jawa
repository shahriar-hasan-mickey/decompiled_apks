record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v2 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ce674.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4ce67a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4ce67e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` := v2 @kind object;
  #L4ce682.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` := v3 @kind object;
  #L4ce686.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce698.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce69c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ce6a2.  v0:= 0I;
  #L4ce6a4.  v1:= 1I;
  #L4ce6a6.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4ce6ac.  v0:= temp;
  #L4ce6ae.  if v0 == 0 then goto L4ce6c0;
  #L4ce6b2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L4ce6b6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce6ba.  call `e`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4ce6c0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce6d4.  v0:= 0I;
  #L4ce6d6.  v1:= 1I;
  #L4ce6d8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4ce6de.  v0:= temp;
  #L4ce6e0.  if v0 == 0 then goto L4ce6fc;
  #L4ce6e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L4ce6e8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce6ec.  call `f`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4ce6f2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ce6f6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ce6fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce710.  v0:= 0I;
  #L4ce712.  v1:= 1I;
  #L4ce714.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4ce71a.  v0:= temp;
  #L4ce71c.  if v0 == 0 then goto L4ce73a;
  #L4ce720.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L4ce724.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4ce728.  call `f`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4ce72e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ce732.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ce738.  goto L4ce740;
  #L4ce73a.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ce740.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce754.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ce758.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ce75e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce770.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce774.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ce77a.  v0:= temp;
  #L4ce77c.  if v0 == 0 then goto L4ce78e;
  #L4ce780.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4ce784.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ce788.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ce78e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce7a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce7a4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ce7aa.  return @kind void;
}
