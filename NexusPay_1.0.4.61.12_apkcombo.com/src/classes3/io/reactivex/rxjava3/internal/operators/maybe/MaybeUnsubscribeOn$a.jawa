record `io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e1e94.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e1e9a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4e1e9e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4e1ea2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e1eb4.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e1eb8.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4e1ebe.  v0:= temp @kind object;
  #L4e1ec0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e1ec4.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e1ec8.  if v0 == v1 then goto L4e1eda;
  #L4e1ecc.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4e1ed0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4e1ed4.  call temp:= `scheduleDirect`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4e1eda.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e1e6c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e1e72.  v0:= temp @kind object;
  #L4e1e74.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4e1e78.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e1e7e.  v0:= temp;
  #L4e1e80.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e1eec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e1ef0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4e1ef6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e1f08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e1f0c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e1f12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e1f24.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e1f2a.  v1:= temp;
  #L4e1f2c.  if v1 == 0 then goto L4e1f3a;
  #L4e1f30.  v1:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e1f34.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4e1f3a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e1f4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4e1f50.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4e1f56.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUnsubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e1f68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4e1f6c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e1f72.  return @kind void;
}
