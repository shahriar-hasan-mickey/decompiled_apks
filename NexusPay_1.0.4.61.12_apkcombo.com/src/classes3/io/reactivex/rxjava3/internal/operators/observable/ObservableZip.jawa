record `io.reactivex.rxjava3.internal.operators.observable.ObservableZip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.core.ObservableSource`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.a` @AccessFlag FINAL;
  `java.lang.Iterable` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableZip.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip` v0 @kind this, `io.reactivex.rxjava3.core.ObservableSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip;.<init>:([Lio/reactivex/rxjava3/core/ObservableSource;Ljava/lang/Iterable;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L500b0c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L500b12.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.a` @type ^`io.reactivex.rxjava3.core.ObservableSource`[] := v1 @kind object;
  #L500b16.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.b` @type ^`java.lang.Iterable` := v2 @kind object;
  #L500b1a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.c` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L500b1e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.d` @type ^`int` := v4;
  #L500b22.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.e` @type ^`boolean` := v5 @kind boolean;
  #L500b26.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableZip` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L500b38.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.a` @type ^`io.reactivex.rxjava3.core.ObservableSource`[] @kind object;
  #L500b3c.  if v0 != 0 then goto L500b94;
  #L500b40.  v0:= 8I;
  #L500b44.  v0:= new `io.reactivex.rxjava3.core.ObservableSource`[v0];
  #L500b48.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.b` @type ^`java.lang.Iterable` @kind object;
  #L500b4c.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L500b52.  v1:= temp @kind object;
  #L500b54.  v2:= 0I;
  #L500b56.  v3:= 0I;
  #L500b58.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L500b5e.  v4:= temp;
  #L500b60.  if v4 == 0 then goto L500b96;
  #L500b64.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L500b6a.  v4:= temp @kind object;
  #L500b6c.  v4:= (`io.reactivex.rxjava3.core.ObservableSource`) v4 @kind object;
  #L500b70.  v5:= length @variable v0;
  #L500b72.  if v3 != v5 then goto L500b88;
  #L500b76.  v5:= v3 ^> 2;
  #L500b7a.  v5:= v5 + v3 @kind int;
  #L500b7c.  v5:= new `io.reactivex.rxjava3.core.ObservableSource`[v5];
  #L500b80.  call `arraycopy`(v0, v2, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L500b86.  v0:= v5 @kind object;
  #L500b88.  v5:= v3 + 1;
  #L500b8c.  v0[v3]:= v4 @kind object;
  #L500b90.  v3:= v5;
  #L500b92.  goto L500b58;
  #L500b94.  v3:= length @variable v0;
  #L500b96.  if v3 != 0 then goto L500ba2;
  #L500b9a.  call `complete`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L500ba0.  return @kind void;
  #L500ba2.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableZip$a`;
  #L500ba6.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L500baa.  v4:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.e` @type ^`boolean` @kind boolean;
  #L500bae.  call `<init>`(v1, v7, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZ)V` @kind direct;
  #L500bb4.  v7:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableZip.d` @type ^`int`;
  #L500bb8.  call `f`(v1, v0, v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableZip$a;.f:([Lio/reactivex/rxjava3/core/ObservableSource;I)V` @kind virtual;
  #L500bbe.  return @kind void;
}
