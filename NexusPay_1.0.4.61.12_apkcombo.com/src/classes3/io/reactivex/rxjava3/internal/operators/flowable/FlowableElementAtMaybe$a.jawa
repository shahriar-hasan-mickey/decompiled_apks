record `io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c1bd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c1bd6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4c1bda.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.b` @type ^`long` := v2 @kind wide;
  #L4c1bde.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c1bf0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c1bf4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c1bfa.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c1bfe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4c1c02.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c1bac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c1bb0.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c1bb4.  if v0 != v1 then goto L4c1bbc;
  #L4c1bb8.  v0:= 1I;
  #L4c1bba.  goto L4c1bbe;
  #L4c1bbc.  v0:= 0I;
  #L4c1bbe.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c1c14.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c1c18.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4c1c1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L4c1c20.  if v0 != 0 then goto L4c1c34;
  #L4c1c24.  v0:= 1I;
  #L4c1c26.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c1c2a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c1c2e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4c1c34.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c1c48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L4c1c4c.  if v0 == 0 then goto L4c1c58;
  #L4c1c50.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c1c56.  return @kind void;
  #L4c1c58.  v0:= 1I;
  #L4c1c5a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c1c5e.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c1c62.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4c1c66.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c1c6a.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c1c70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c1c84.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L4c1c88.  if v0 == 0 then goto L4c1c8e;
  #L4c1c8c.  return @kind void;
  #L4c1c8e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.d` @type ^`long` @kind wide;
  #L4c1c92.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.b` @type ^`long` @kind wide;
  #L4c1c96.  v4:= lcmp(v0, v2);
  #L4c1c9a.  if v4 != 0 then goto L4c1cc2;
  #L4c1c9e.  v0:= 1I;
  #L4c1ca0.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c1ca4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c1ca8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c1cae.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4c1cb2.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4c1cb6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c1cba.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4c1cc0.  return @kind void;
  #L4c1cc2.  v2:= 1L;
  #L4c1cc6.  v0:= v0 + v2 @kind long;
  #L4c1cc8.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.d` @type ^`long` := v0 @kind wide;
  #L4c1ccc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableElementAtMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c1ce0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c1ce4.  call temp:= `validate`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c1cea.  v0:= temp;
  #L4c1cec.  if v0 == 0 then goto L4c1d0e;
  #L4c1cf0.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.c` @type ^`org.reactivestreams.Subscription` := v5 @kind object;
  #L4c1cf4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c1cf8.  call `onSubscribe`(v0, v4) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c1cfe.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$a.b` @type ^`long` @kind wide;
  #L4c1d02.  v2:= 1L;
  #L4c1d06.  v0:= v0 + v2 @kind long;
  #L4c1d08.  call `request`(v5, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c1d0e.  return @kind void;
}
