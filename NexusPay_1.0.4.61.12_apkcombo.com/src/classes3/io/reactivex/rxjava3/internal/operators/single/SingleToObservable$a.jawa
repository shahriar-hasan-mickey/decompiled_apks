record `io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a.a` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleToObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5098cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L5098d2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleToObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5098e4.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.dispose:()V` @kind super;
  #L5098ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L5098ee.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L5098f4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleToObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L509908.  call `error`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L50990e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleToObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509920.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L509924.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L50992a.  v0:= temp;
  #L50992c.  if v0 == 0 then goto L50993e;
  #L509930.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a.a` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L509934.  v2:= v1.`io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L509938.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L50993e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleToObservable$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleToObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L509950.  call `complete`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L509956.  return @kind void;
}
