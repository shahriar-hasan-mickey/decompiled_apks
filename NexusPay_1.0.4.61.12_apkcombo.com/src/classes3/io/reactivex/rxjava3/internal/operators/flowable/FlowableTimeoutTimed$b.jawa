record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$d` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.i` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.j` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @AccessFlag ;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d5bd0.  v0:= 1I;
  #L4d5bd2.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4d5bd8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d5bdc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.i` @type ^`long` := v3 @kind wide;
  #L4d5be0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4d5be4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v6 @kind object;
  #L4d5be8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @type ^`org.reactivestreams.Publisher` := v7 @kind object;
  #L4d5bec.  v2:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4d5bf0.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4d5bf6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L4d5bfa.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d5bfe.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d5c04.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4d5c08.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d5c0c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d5c12.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4d5c16.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d5d98.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5d9c.  v1:= 9223372036854775807L;
  #L4d5da6.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5dac.  v4:= temp;
  #L4d5dae.  if v4 == 0 then goto L4d5dfa;
  #L4d5db2.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5db6.  call temp:= `cancel`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d5dbc.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @type ^`long` @kind wide;
  #L4d5dc0.  v0:= 0L;
  #L4d5dc4.  v2:= lcmp(v4, v0);
  #L4d5dc8.  if v2 == 0 then goto L4d5dd2;
  #L4d5dcc.  call `produced`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4d5dd2.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4d5dd6.  v5:= 0I;
  #L4d5dd8.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L4d5ddc.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$a`;
  #L4d5de0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5de4.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L4d5dea.  call `subscribe`(v4, v5) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d5df0.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5df4.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5dfa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5c28.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L4d5c2e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5c32.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5c38.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d5e0c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5e10.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5e14.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$e`;
  #L4d5e18.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$e;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$d;)V` @kind direct;
  #L4d5e1e.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.i` @type ^`long` @kind wide;
  #L4d5e22.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d5e26.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d5e2c.  v5:= temp @kind object;
  #L4d5e2e.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d5e34.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d5c4c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5c50.  v1:= 9223372036854775807L;
  #L4d5c5a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5c60.  v3:= temp @kind wide;
  #L4d5c62.  v0:= lcmp(v3, v1);
  #L4d5c66.  if v0 == 0 then goto L4d5c88;
  #L4d5c6a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5c6e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5c74.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5c78.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d5c7e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5c82.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5c88.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d5c9c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5ca0.  v1:= 9223372036854775807L;
  #L4d5caa.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4d5cb0.  v3:= temp @kind wide;
  #L4d5cb2.  v0:= lcmp(v3, v1);
  #L4d5cb6.  if v0 == 0 then goto L4d5cda;
  #L4d5cba.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5cbe.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4d5cc4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5cc8.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d5cce.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4d5cd2.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5cd8.  goto L4d5ce0;
  #L4d5cda.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d5ce0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d5cf4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5cf8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d5cfe.  v0:= temp @kind wide;
  #L4d5d00.  v2:= 9223372036854775807L;
  #L4d5d0a.  v4:= lcmp(v0, v2);
  #L4d5d0e.  if v4 == 0 then goto L4d5d5c;
  #L4d5d12.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d5d16.  v3:= 1L;
  #L4d5d1a.  v5:= v0 + v3 @kind long;
  #L4d5d1e.  call temp:= `compareAndSet`(v2, v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4d5d24.  v0:= temp;
  #L4d5d26.  if v0 != 0 then goto L4d5d2c;
  #L4d5d2a.  goto L4d5d5c;
  #L4d5d2c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4d5d30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d5d36.  v0:= temp @kind object;
  #L4d5d38.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d5d3c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d5d42.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @type ^`long` @kind wide;
  #L4d5d46.  v0:= v0 + v3 @kind long;
  #L4d5d48.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @type ^`long` := v0 @kind wide;
  #L4d5d4c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d5d50.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d5d56.  call `e`(v7, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.e:(J)V` @kind virtual;
  #L4d5d5c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d5d70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d5d74.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d5d7a.  v0:= temp;
  #L4d5d7c.  if v0 == 0 then goto L4d5d86;
  #L4d5d80.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4d5d86.  return @kind void;
}
