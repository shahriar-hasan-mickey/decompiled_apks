record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.c` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.QueueSubscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Action` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c0e00.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4c0e06.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4c0e0a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.b` @type ^`io.reactivex.rxjava3.functions.Action` := v2 @kind object;
  #L4c0e0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0e20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0e24.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c0e2a.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L4c0e30.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0e44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c0e48.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c0e4e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c0f20.  v0:= 0I;
  #L4c0f22.  v1:= 1I;
  #L4c0f24.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c0f2a.  v0:= temp;
  #L4c0f2c.  if v0 == 0 then goto L4c0f4a;
  #L4c0f30.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.b` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4c0f34.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4c0f3a.  goto L4c0f4a;
  #L4c0f3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0f3e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0f44.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0f4a.  return @kind void;
  catch `java.lang.Throwable` @[L4c0f30..L4c0f3a] goto L4c0f3c;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0d50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c0d54.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c0d5a.  v0:= temp;
  #L4c0d5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0e60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c0e64.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c0e6a.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L4c0e70.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0e84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c0e88.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c0e8e.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L4c0e94.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0ea8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c0eac.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c0eb2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0ec4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0ec8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c0ece.  v0:= temp;
  #L4c0ed0.  if v0 == 0 then goto L4c0ef2;
  #L4c0ed4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4c0ed8.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4c0edc.  if v0 == 0 then goto L4c0ee8;
  #L4c0ee0.  v2:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L4c0ee4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L4c0ee8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c0eec.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c0ef2.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c0dd0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c0dd4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c0dda.  v0:= temp @kind object;
  #L4c0ddc.  if v0 != 0 then goto L4c0dee;
  #L4c0de0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.e` @type ^`boolean` @kind boolean;
  #L4c0de4.  if v1 == 0 then goto L4c0dee;
  #L4c0de8.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.e:()V` @kind virtual;
  #L4c0dee.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0f04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c0f08.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c0f0e.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c0d90.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c0d94.  v1:= 0I;
  #L4c0d96.  if v0 == 0 then goto L4c0dbc;
  #L4c0d9a.  v2:= v4 ^& 4;
  #L4c0d9e.  if v2 != 0 then goto L4c0dbc;
  #L4c0da2.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4c0da8.  v4:= temp;
  #L4c0daa.  if v4 == 0 then goto L4c0dba;
  #L4c0dae.  v0:= 1I;
  #L4c0db0.  if v4 != v0 then goto L4c0db6;
  #L4c0db4.  v1:= 1I;
  #L4c0db6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4c0dba.  return v4;
  #L4c0dbc.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinally$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0d70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$a.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4c0d74.  call temp:= `tryOnNext`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4c0d7a.  v2:= temp;
  #L4c0d7c.  return v2;
}
