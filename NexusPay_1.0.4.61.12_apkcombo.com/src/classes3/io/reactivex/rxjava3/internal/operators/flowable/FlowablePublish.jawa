record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.<init>:(Lorg/reactivestreams/Publisher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4cd688.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L4cd68e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4cd692.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @type ^`int` := v2;
  #L4cd696.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cd69a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cd6a0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cd6a4.  return @kind void;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cd6b8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd6bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd6c2.  v0:= temp @kind object;
  #L4cd6c4.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`) v0 @kind object;
  #L4cd6c8.  if v0 == 0 then goto L4cd6d8;
  #L4cd6cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.isDisposed:()Z` @kind virtual;
  #L4cd6d2.  v1:= temp;
  #L4cd6d4.  if v1 == 0 then goto L4cd6fe;
  #L4cd6d8.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`;
  #L4cd6dc.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd6e0.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @type ^`int`;
  #L4cd6e4.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L4cd6ea.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd6ee.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cd6f4.  v0:= temp;
  #L4cd6f6.  if v0 != 0 then goto L4cd6fc;
  #L4cd6fa.  goto L4cd6b8;
  #L4cd6fc.  v0:= v1 @kind object;
  #L4cd6fe.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cd702.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4cd708.  v1:= temp;
  #L4cd70a.  v2:= 1I;
  #L4cd70c.  v3:= 0I;
  #L4cd70e.  if v1 != 0 then goto L4cd724;
  #L4cd712.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4cd716.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4cd71c.  v1:= temp;
  #L4cd71e.  if v1 == 0 then goto L4cd724;
  #L4cd722.  goto L4cd726;
  #L4cd724.  v2:= 0I;
  #L4cd726.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4cd72c.  if v2 == 0 then goto L4cd73a;
  #L4cd730.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4cd734.  call `subscribe`(v5, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4cd73a.  return @kind void;
  #L4cd73c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4cd73e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4cd744.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4cd74a.  v5:= temp @kind object;
  #L4cd74c.  throw v5;
  catch `java.lang.Throwable` @[L4cd726..L4cd72c] goto L4cd73c;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cd76c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd770.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd776.  v0:= temp @kind object;
  #L4cd778.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`) v0 @kind object;
  #L4cd77c.  if v0 == 0 then goto L4cd798;
  #L4cd780.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.isDisposed:()Z` @kind virtual;
  #L4cd786.  v1:= temp;
  #L4cd788.  if v1 == 0 then goto L4cd798;
  #L4cd78c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd790.  v2:= 0I;
  #L4cd792.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cd798.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cd670.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4cd674.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cd7ac.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd7b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cd7b6.  v0:= temp @kind object;
  #L4cd7b8.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`) v0 @kind object;
  #L4cd7bc.  if v0 != 0 then goto L4cd7e6;
  #L4cd7c0.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b`;
  #L4cd7c4.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd7c8.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.c` @type ^`int`;
  #L4cd7cc.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L4cd7d2.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cd7d6.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4cd7dc.  v0:= temp;
  #L4cd7de.  if v0 != 0 then goto L4cd7e4;
  #L4cd7e2.  goto L4cd7ac;
  #L4cd7e4.  v0:= v1 @kind object;
  #L4cd7e6.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`;
  #L4cd7ea.  call `<init>`(v1, v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;)V` @kind direct;
  #L4cd7f0.  call `onSubscribe`(v5, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4cd7f6.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)Z` @kind virtual;
  #L4cd7fc.  v5:= temp;
  #L4cd7fe.  if v5 == 0 then goto L4cd81e;
  #L4cd802.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L4cd808.  v5:= temp;
  #L4cd80a.  if v5 == 0 then goto L4cd816;
  #L4cd80e.  call `d`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)V` @kind virtual;
  #L4cd814.  goto L4cd81c;
  #L4cd816.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L4cd81c.  return @kind void;
  #L4cd81e.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @type ^`java.lang.Throwable` @kind object;
  #L4cd822.  if v5 == 0 then goto L4cd832;
  #L4cd826.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd82a.  call `onError`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cd830.  goto L4cd83c;
  #L4cd832.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4cd836.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4cd83c.  return @kind void;
}
