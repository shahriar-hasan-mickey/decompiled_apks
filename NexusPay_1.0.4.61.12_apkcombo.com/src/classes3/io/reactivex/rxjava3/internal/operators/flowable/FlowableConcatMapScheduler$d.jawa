record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.core.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bdc50.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L4bdc56.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4bdc5a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4bdc5e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bdc64.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4bdc68.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bdcc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdcc8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdcce.  v2:= temp;
  #L4bdcd0.  if v2 == 0 then goto L4bdd02;
  #L4bdcd4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdcd8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdcde.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bdce4.  v2:= temp;
  #L4bdce6.  if v2 != 0 then goto L4bdd02;
  #L4bdcea.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdcee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdcf2.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdcf8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdcfc.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdd02.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bdd14.  call temp:= `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.f:()Z` @kind virtual;
  #L4bdd1a.  v0:= temp;
  #L4bdd1c.  if v0 == 0 then goto L4bdd54;
  #L4bdd20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdd24.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bdd2a.  v2:= 1I;
  #L4bdd2c.  v0:= 0I;
  #L4bdd2e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bdd34.  v2:= temp;
  #L4bdd36.  if v2 == 0 then goto L4bdd3c;
  #L4bdd3a.  return @kind void;
  #L4bdd3c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdd40.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdd44.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdd4a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdd4e.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdd54.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bdc7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4bdc80.  if v0 != 0 then goto L4bdcb2;
  #L4bdc84.  v0:= 1I;
  #L4bdc86.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4bdc8a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bdc8e.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4bdc94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdc98.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdc9e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdca2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdca8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdcac.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bdcb2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4bdff0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bdff4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bdffa.  v0:= temp;
  #L4bdffc.  if v0 != 0 then goto L4be00a;
  #L4be000.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4be004.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4be00a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4be01c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4be020.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4be026.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.f:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4bdc1c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4bdc22.  v0:= temp;
  #L4bdc24.  v1:= 1I;
  #L4bdc26.  v2:= 0I;
  #L4bdc28.  if v0 != 0 then goto L4bdc3a;
  #L4bdc2c.  call temp:= `compareAndSet`(v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bdc32.  v0:= temp;
  #L4bdc34.  if v0 == 0 then goto L4bdc3a;
  #L4bdc38.  goto L4bdc3c;
  #L4bdc3a.  v1:= 0I;
  #L4bdc3c.  return v1;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bdd68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdd6c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdd72.  v2:= temp;
  #L4bdd74.  if v2 == 0 then goto L4bdda6;
  #L4bdd78.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bdd7c.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4bdd82.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bdd88.  v2:= temp;
  #L4bdd8a.  if v2 != 0 then goto L4bdda6;
  #L4bdd8e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdd92.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdd96.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdd9c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdda0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdda6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bddb8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bddbc.  call `request`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L4bddc2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4bddd4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4bddd8.  if v0 == 0 then goto L4bddde;
  #L4bdddc.  return @kind void;
  #L4bddde.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` @kind boolean;
  #L4bdde2.  if v0 != 0 then goto L4bdfa8;
  #L4bdde6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L4bddea.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bddee.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bddf4.  v1:= temp @kind object;
  #L4bddf6.  v2:= 0I;
  #L4bddf8.  v3:= 1I;
  #L4bddfa.  if v1 != 0 then goto L4bde02;
  #L4bddfe.  v4:= 1I;
  #L4bde00.  goto L4bde04;
  #L4bde02.  v4:= 0I;
  #L4bde04.  if v0 == 0 then goto L4bde22;
  #L4bde08.  if v4 == 0 then goto L4bde22;
  #L4bde0c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bde10.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4bde16.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bde1a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bde20.  return @kind void;
  #L4bde22.  if v4 != 0 then goto L4bdfa8;
  #L4bde26.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bde2a.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bde30.  v0:= temp @kind object;
  #L4bde32.  v1:= "The mapper returned a null Publisher" @kind object;
  #L4bde36.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bde3c.  v0:= temp @kind object;
  #L4bde3e.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L4bde42.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @type ^`int`;
  #L4bde46.  if v1 == v3 then goto L4bde6e;
  #L4bde4a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int`;
  #L4bde4e.  v1:= v1 + v3 @kind int;
  #L4bde50.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.d` @type ^`int`;
  #L4bde54.  if v1 != v4 then goto L4bde6a;
  #L4bde58.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v2;
  #L4bde5c.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bde60.  v5:= (`long`) v1 @kind i2l;
  #L4bde62.  call `request`(v4, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bde68.  goto L4bde6e;
  #L4bde6a.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v1;
  #L4bde6e.  v1:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4bde72.  if v1 == 0 then goto L4bdf2c;
  #L4bde76.  v0:= (`io.reactivex.rxjava3.functions.Supplier`) v0 @kind object;
  #L4bde7a.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bde80.  v0:= temp @kind object;
  #L4bde82.  if v0 == 0 then goto L4bddd4;
  #L4bde86.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L4bde8a.  if v1 == 0 then goto L4bde90;
  #L4bde8e.  goto L4bddd4;
  #L4bde90.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bde94.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L4bde9a.  v1:= temp;
  #L4bde9c.  if v1 == 0 then goto L4bdedc;
  #L4bdea0.  call temp:= `f`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$d;.f:()Z` @kind virtual;
  #L4bdea6.  v1:= temp;
  #L4bdea8.  if v1 == 0 then goto L4bddd4;
  #L4bdeac.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdeb0.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bdeb6.  call temp:= `compareAndSet`(v7, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bdebc.  v0:= temp;
  #L4bdebe.  if v0 != 0 then goto L4bddd4;
  #L4bdec2.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdec6.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdeca.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bded0.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bded4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdeda.  return @kind void;
  #L4bdedc.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L4bdee0.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bdee4.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$g`;
  #L4bdee8.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4bdeee.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4bdef4.  goto L4bdfa8;
  #L4bdef6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdef8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdefe.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdf02.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdf08.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdf0c.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdf12.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdf16.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdf1a.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdf20.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdf24.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdf2a.  return @kind void;
  #L4bdf2c.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L4bdf30.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4bdf34.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4bdf3a.  goto L4bdfa8;
  #L4bdf3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdf3e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdf44.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdf48.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdf4e.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdf52.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdf58.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdf5c.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdf60.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdf66.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdf6a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdf70.  return @kind void;
  #L4bdf72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdf74.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdf7a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bdf7e.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bdf84.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdf88.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdf8e.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdf92.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4bdf96.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4bdf9c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4bdfa0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdfa6.  return @kind void;
  #L4bdfa8.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$d.o` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bdfac.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bdfb2.  v0:= temp;
  #L4bdfb4.  if v0 != 0 then goto L4bddd4;
  #L4bdfb8.  return @kind void;
  catch `java.lang.Throwable` @[L4bddea..L4bddf6] goto L4bdf72;
  catch `java.lang.Throwable` @[L4bde26..L4bde42] goto L4bdf3c;
  catch `java.lang.Throwable` @[L4bde7a..L4bde82] goto L4bdef6;
}
