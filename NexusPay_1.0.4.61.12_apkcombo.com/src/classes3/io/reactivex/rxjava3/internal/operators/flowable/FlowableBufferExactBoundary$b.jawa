record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @AccessFlag ;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Supplier;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ba354.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4ba358.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4ba35e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4ba364.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4ba368.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L4ba36c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4ba31c.  v1:= v0.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba320.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ba326.  v1:= 1I;
  #L4ba328.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ba2fc.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4ba300.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L4ba306.  v1:= temp;
  #L4ba308.  return v1;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ba3e4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4ba3e8.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4ba3ee.  v0:= temp @kind object;
  #L4ba3f0.  v1:= "The buffer supplied is null" @kind object;
  #L4ba3f4.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ba3fa.  v0:= temp @kind object;
  #L4ba3fc.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4ba400.  @monitorenter v2
  #L4ba402.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L4ba406.  if v1 != 0 then goto L4ba40e;
  #L4ba40a.  @monitorexit v2
  #L4ba40c.  return @kind void;
  #L4ba40e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4ba412.  @monitorexit v2
  #L4ba414.  v0:= 0I;
  #L4ba416.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4ba41c.  return @kind void;
  #L4ba41e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba420.  @monitorexit v2
  #L4ba422.  throw v0;
  #L4ba424.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba426.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba42c.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L4ba432.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba436.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba43c.  return @kind void;
  catch `java.lang.Throwable` @[L4ba3e4..L4ba400] goto L4ba424;
  catch `java.lang.Throwable` @[L4ba402..L4ba414] goto L4ba41e;
  catch `java.lang.Throwable` @[L4ba420..L4ba422] goto L4ba41e;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba380.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4ba384.  if v0 != 0 then goto L4ba3b8;
  #L4ba388.  v0:= 1I;
  #L4ba38a.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4ba38e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba392.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba398.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ba39c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ba3a2.  call temp:= `enter`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4ba3a8.  v0:= temp;
  #L4ba3aa.  if v0 == 0 then goto L4ba3b8;
  #L4ba3ae.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ba3b2.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba3b8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4ba3cc.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L4ba3d2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba33c.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4ba340.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ba470.  @monitorenter v3
  #L4ba472.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L4ba476.  if v0 != 0 then goto L4ba47e;
  #L4ba47a.  @monitorexit v3
  #L4ba47c.  return @kind void;
  #L4ba47e.  v1:= 0I;
  #L4ba480.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L4ba484.  @monitorexit v3
  #L4ba486.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ba48a.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ba490.  v0:= 1I;
  #L4ba492.  v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4ba496.  call temp:= `enter`(v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4ba49c.  v0:= temp;
  #L4ba49e.  if v0 == 0 then goto L4ba4b2;
  #L4ba4a2.  v0:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ba4a6.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba4aa.  v2:= 0I;
  #L4ba4ac.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L4ba4b2.  return @kind void;
  #L4ba4b4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba4b6.  @monitorexit v3
  #L4ba4b8.  throw v0;
  catch `java.lang.Throwable` @[L4ba472..L4ba486] goto L4ba4b4;
  catch `java.lang.Throwable` @[L4ba4b6..L4ba4b8] goto L4ba4b4;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba4e0.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L4ba4e6.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba4ea.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ba4f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba504.  @monitorenter v1
  #L4ba506.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L4ba50a.  if v0 != 0 then goto L4ba512;
  #L4ba50e.  @monitorexit v1
  #L4ba510.  return @kind void;
  #L4ba512.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ba518.  @monitorexit v1
  #L4ba51a.  return @kind void;
  #L4ba51c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba51e.  @monitorexit v1
  #L4ba520.  throw v2;
  catch `java.lang.Throwable` @[L4ba506..L4ba520] goto L4ba51c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ba540.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ba544.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ba54a.  v0:= temp;
  #L4ba54c.  if v0 != 0 then goto L4ba552;
  #L4ba550.  return @kind void;
  #L4ba552.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4ba556.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4ba55a.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4ba560.  v0:= temp @kind object;
  #L4ba562.  v1:= "The buffer supplied is null" @kind object;
  #L4ba566.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ba56c.  v0:= temp @kind object;
  #L4ba56e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4ba572.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4ba576.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$a`;
  #L4ba57a.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;)V` @kind direct;
  #L4ba580.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4ba584.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba588.  call `onSubscribe`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ba58e.  v1:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4ba592.  if v1 != 0 then goto L4ba5b0;
  #L4ba596.  v1:= 9223372036854775807L;
  #L4ba5a0.  call `request`(v4, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ba5a6.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4ba5aa.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4ba5b0.  return @kind void;
  #L4ba5b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba5b4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba5ba.  v1:= 1I;
  #L4ba5bc.  v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L4ba5c0.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ba5c6.  v4:= v3.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ba5ca.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4ba5d0.  return @kind void;
  catch `java.lang.Throwable` @[L4ba556..L4ba572] goto L4ba5b2;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferExactBoundary$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4ba5f0.  call `requested`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4ba5f6.  return @kind void;
}
