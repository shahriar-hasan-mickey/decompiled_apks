record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @AccessFlag FINAL;
  `java.util.Queue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c6420.  v0:= new `java.lang.Object`;
  #L4c6424.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c642a.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` := v0 @kind object;
  #L4c642e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.Function` v5 @kind object, `int` v6 , `boolean` v7 , `java.util.Map` v8 @kind object, `java.util.Queue` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;IZLjava/util/Map;Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c6440.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c6446.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4c644a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c6450.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4c6454.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c6458.  v1:= 1I;
  #L4c645a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4c6460.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4c6464.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c6468.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c646e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4c6472.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L4c6476.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4c647a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.rxjava3.functions.Function` := v5 @kind object;
  #L4c647e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int` := v6;
  #L4c6482.  v3:= v6 ^> 2;
  #L4c6486.  v6:= v6 - v3 @kind int;
  #L4c6488.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`int` := v6;
  #L4c648c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`boolean` := v7 @kind boolean;
  #L4c6490.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` := v8 @kind object;
  #L4c6494.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` := v9 @kind object;
  #L4c6498.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4c653c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L4c6540.  if v0 == 0 then goto L4c6580;
  #L4c6544.  v0:= 0I;
  #L4c6546.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L4c654a.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c6550.  v1:= temp @kind object;
  #L4c6552.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L4c6556.  if v1 == 0 then goto L4c6570;
  #L4c655a.  v1:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` @kind object;
  #L4c655e.  call temp:= `m`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.m:()Z` @kind virtual;
  #L4c6564.  v1:= temp;
  #L4c6566.  if v1 == 0 then goto L4c6546;
  #L4c656a.  v0:= v0 + 1;
  #L4c656e.  goto L4c6546;
  #L4c6570.  if v0 == 0 then goto L4c6580;
  #L4c6574.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6578.  v0:= -v0 @kind int;
  #L4c657a.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c6580.  return @kind void;
}
procedure `java.lang.String` `b`(`long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.b:(J)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4c63e0.  v0:= new `java.lang.StringBuilder`;
  #L4c63e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4c63ea.  v1:= "Unable to emit a new group (#" @kind object;
  #L4c63ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c63f4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c63fa.  v2:= ") due to lack of requests. Please make sure the downstream can always accept a new group as well as each group is consumed in order for the whole operator to be able to proceed." @kind object;
  #L4c63fe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4c6404.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4c640a.  v2:= temp @kind object;
  #L4c640c.  return v2 @kind object;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c6890.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c6894.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`int`;
  #L4c6898.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c689e.  v2:= temp @kind wide;
  #L4c68a0.  call temp:= `addCap`(v2, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4c68a6.  v4:= temp @kind wide;
  #L4c68a8.  call temp:= `compareAndSet`(v0, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4c68ae.  v2:= temp;
  #L4c68b0.  if v2 == 0 then goto L4c6898;
  #L4c68b4.  v7:= (`long`) v1 @kind i2l;
  #L4c68b6.  v2:= lcmp(v4, v7);
  #L4c68ba.  if v2 >= 0 then goto L4c68c0;
  #L4c68be.  return @kind void;
  #L4c68c0.  v2:= v4 - v7 @kind long;
  #L4c68c4.  call temp:= `compareAndSet`(v0, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4c68ca.  v2:= temp;
  #L4c68cc.  if v2 == 0 then goto L4c68da;
  #L4c68d0.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c68d4.  call `request`(v2, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c68da.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c68e0.  v4:= temp @kind wide;
  #L4c68e2.  goto L4c68b4;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c64ac.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c64b0.  v1:= 0I;
  #L4c64b2.  v2:= 1I;
  #L4c64b4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c64ba.  v0:= temp;
  #L4c64bc.  if v0 == 0 then goto L4c64e0;
  #L4c64c0.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L4c64c6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c64ca.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c64d0.  v0:= temp;
  #L4c64d2.  if v0 != 0 then goto L4c64e0;
  #L4c64d6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c64da.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c64e0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c64f4.  if v2 == 0 then goto L4c64fa;
  #L4c64f8.  goto L4c64fe;
  #L4c64fa.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` @kind object;
  #L4c64fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4c6502.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c6508.  v2:= temp @kind object;
  #L4c650a.  if v2 == 0 then goto L4c6528;
  #L4c650e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6512.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c6518.  v2:= temp;
  #L4c651a.  if v2 != 0 then goto L4c6528;
  #L4c651e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c6522.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c6528.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6594.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L4c6598.  if v0 != 0 then goto L4c65f0;
  #L4c659c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4c65a0.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c65a6.  v0:= temp @kind object;
  #L4c65a8.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c65ae.  v0:= temp @kind object;
  #L4c65b0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c65b6.  v1:= temp;
  #L4c65b8.  if v1 == 0 then goto L4c65d0;
  #L4c65bc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c65c2.  v1:= temp @kind object;
  #L4c65c4.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L4c65c8.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onComplete:()V` @kind virtual;
  #L4c65ce.  goto L4c65b0;
  #L4c65d0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4c65d4.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c65da.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L4c65e0.  v0:= 1I;
  #L4c65e2.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` := v0 @kind boolean;
  #L4c65e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c65ea.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c65f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6604.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L4c6608.  if v0 == 0 then goto L4c6614;
  #L4c660c.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c6612.  return @kind void;
  #L4c6614.  v0:= 1I;
  #L4c6616.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` := v0 @kind boolean;
  #L4c661a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4c661e.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c6624.  v0:= temp @kind object;
  #L4c6626.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c662c.  v0:= temp @kind object;
  #L4c662e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c6634.  v1:= temp;
  #L4c6636.  if v1 == 0 then goto L4c664e;
  #L4c663a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c6640.  v1:= temp @kind object;
  #L4c6642.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L4c6646.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c664c.  goto L4c662e;
  #L4c664e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4c6652.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c6658.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L4c665e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c6662.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6668.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c667c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L4c6680.  if v0 == 0 then goto L4c6686;
  #L4c6684.  return @kind void;
  #L4c6686.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c668a.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c6690.  v0:= temp @kind object;
  #L4c6692.  v1:= 0I;
  #L4c6694.  if v0 == 0 then goto L4c669c;
  #L4c6698.  v2:= v0 @kind object;
  #L4c669a.  goto L4c66a0;
  #L4c669c.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`java.lang.Object` @kind object;
  #L4c66a0.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4c66a4.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c66aa.  v3:= temp @kind object;
  #L4c66ac.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b`) v3 @kind object;
  #L4c66b0.  if v3 != 0 then goto L4c66ec;
  #L4c66b4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c66b8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c66be.  v1:= temp;
  #L4c66c0.  if v1 == 0 then goto L4c66c6;
  #L4c66c4.  return @kind void;
  #L4c66c6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L4c66ca.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`boolean` @kind boolean;
  #L4c66ce.  call temp:= `e`(v0, v1, v6, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.e:(Ljava/lang/Object;ILio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;` @kind static;
  #L4c66d4.  v3:= temp @kind object;
  #L4c66d6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`java.util.Map` @kind object;
  #L4c66da.  call temp:= `put`(v1, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c66e0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c66e4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c66ea.  v1:= 1I;
  #L4c66ec.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c66f0.  call temp:= `apply`(v2, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c66f6.  v7:= temp @kind object;
  #L4c66f8.  v2:= "The valueSelector returned a null value." @kind object;
  #L4c66fc.  call temp:= `nullCheck`(v7, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c6702.  v7:= temp @kind object;
  #L4c6704.  call `onNext`(v3, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c670a.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L4c6710.  if v1 == 0 then goto L4c678a;
  #L4c6714.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L4c6718.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c671e.  v4:= temp @kind wide;
  #L4c6720.  v7:= lcmp(v1, v4);
  #L4c6724.  if v7 == 0 then goto L4c6764;
  #L4c6728.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L4c672c.  v4:= 1L;
  #L4c6730.  v1:= v1 + v4 @kind long;
  #L4c6732.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` := v1 @kind wide;
  #L4c6736.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c673a.  call `onNext`(v7, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c6740.  v7:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` @kind object;
  #L4c6744.  call temp:= `l`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.l:()Z` @kind virtual;
  #L4c674a.  v7:= temp;
  #L4c674c.  if v7 == 0 then goto L4c678a;
  #L4c6750.  call `cancel`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4c6756.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$b;.onComplete:()V` @kind virtual;
  #L4c675c.  call `c`(v6, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.c:(J)V` @kind virtual;
  #L4c6762.  goto L4c678a;
  #L4c6764.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c6768.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c676e.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c6772.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L4c6776.  call temp:= `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.b:(J)Ljava/lang/String;` @kind static;
  #L4c677c.  v0:= temp @kind object;
  #L4c677e.  call `<init>`(v7, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c6784.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c678a.  return @kind void;
  #L4c678c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c678e.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c6794.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c6798.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c679e.  if v1 == 0 then goto L4c67e6;
  #L4c67a2.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L4c67a6.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c67ac.  v4:= temp @kind wide;
  #L4c67ae.  v2:= lcmp(v0, v4);
  #L4c67b2.  if v2 == 0 then goto L4c67c2;
  #L4c67b6.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c67ba.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c67c0.  goto L4c67e6;
  #L4c67c2.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c67c6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`long` @kind wide;
  #L4c67ca.  call temp:= `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.b:(J)Ljava/lang/String;` @kind static;
  #L4c67d0.  v1:= temp @kind object;
  #L4c67d2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c67d8.  call temp:= `initCause`(v0, v7) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4c67de.  call `onError`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c67e4.  return @kind void;
  #L4c67e6.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c67ec.  return @kind void;
  #L4c67ee.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c67f0.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c67f6.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c67fa.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c6800.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c6806.  return @kind void;
  catch `java.lang.Throwable` @[L4c6686..L4c6692] goto L4c67ee;
  catch `java.lang.Throwable` @[L4c66ec..L4c6704] goto L4c678c;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6830.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c6834.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c683a.  v0:= temp;
  #L4c683c.  if v0 == 0 then goto L4c685a;
  #L4c6840.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4c6844.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c6848.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c684e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L4c6852.  v0:= (`long`) v0 @kind i2l;
  #L4c6854.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c685a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c686c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c6872.  v0:= temp;
  #L4c6874.  if v0 == 0 then goto L4c687e;
  #L4c6878.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c687e.  return @kind void;
}
