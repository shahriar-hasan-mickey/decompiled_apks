record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c7134.  v0:= 1I;
  #L4c7136.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c713c.  v0:= temp @kind object;
  #L4c713e.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c7142.  v0:= 2I;
  #L4c7144.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c714a.  v0:= temp @kind object;
  #L4c714c.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c7150.  v0:= 3I;
  #L4c7152.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c7158.  v0:= temp @kind object;
  #L4c715a.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c715e.  v0:= 4I;
  #L4c7160.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c7166.  v0:= temp @kind object;
  #L4c7168.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c716c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c7180.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c7186.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4c718a.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c718e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c7194.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4c7198.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4c719c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4c71a2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4c71a6.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c71aa.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4c71b0.  v0:= temp;
  #L4c71b2.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c71b8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4c71bc.  v2:= new `java.util.LinkedHashMap`;
  #L4c71c0.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c71c6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L4c71ca.  v2:= new `java.util.LinkedHashMap`;
  #L4c71ce.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c71d4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L4c71d8.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c71dc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c71e2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c71e6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4c71ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4c71ee.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L4c71f2.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c71f6.  v3:= 2I;
  #L4c71f8.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4c71fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4c7202.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7744.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c7748.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c774e.  v0:= temp;
  #L4c7750.  if v0 == 0 then goto L4c7766;
  #L4c7754.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c7758.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c775e.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L4c7764.  goto L4c776c;
  #L4c7766.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c776c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7780.  @monitorenter v1
  #L4c7782.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c7786.  if v2 == 0 then goto L4c7790;
  #L4c778a.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c778e.  goto L4c7794;
  #L4c7790.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c7794.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c779a.  @monitorexit v1
  #L4c779c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L4c77a2.  return @kind void;
  #L4c77a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c77a6.  @monitorexit v1
  #L4c77a8.  throw v2;
  catch `java.lang.Throwable` @[L4c7782..L4c779c] goto L4c77a4;
  catch `java.lang.Throwable` @[L4c77a6..L4c77a8] goto L4c77a4;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c76e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c76ec.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c76f2.  v0:= temp;
  #L4c76f4.  if v0 == 0 then goto L4c7700;
  #L4c76f8.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L4c76fe.  goto L4c7706;
  #L4c7700.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c7706.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7214.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L4c7218.  if v0 == 0 then goto L4c721e;
  #L4c721c.  return @kind void;
  #L4c721e.  v0:= 1I;
  #L4c7220.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L4c7224.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L4c722a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c7230.  v0:= temp;
  #L4c7232.  if v0 != 0 then goto L4c7240;
  #L4c7236.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c723a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c7240.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7718.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c771c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c7722.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c7726.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c772c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L4c7732.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7698.  @monitorenter v1
  #L4c769a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c769e.  if v2 == 0 then goto L4c76a8;
  #L4c76a2.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4c76a6.  goto L4c76ac;
  #L4c76a8.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L4c76ac.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c76b2.  @monitorexit v1
  #L4c76b4.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L4c76ba.  return @kind void;
  #L4c76bc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c76be.  @monitorexit v1
  #L4c76c0.  throw v2;
  catch `java.lang.Throwable` @[L4c769a..L4c76b4] goto L4c76bc;
  catch `java.lang.Throwable` @[L4c76be..L4c76c0] goto L4c76bc;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L4c7254.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c7258.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c725e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4c7270.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c7276.  v0:= temp;
  #L4c7278.  if v0 == 0 then goto L4c727e;
  #L4c727c.  return @kind void;
  #L4c727e.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c7282.  v1:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c7286.  v2:= 1I;
  #L4c7288.  v3:= 1I;
  #L4c728a.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L4c728e.  if v4 == 0 then goto L4c729a;
  #L4c7292.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c7298.  return @kind void;
  #L4c729a.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c729e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c72a4.  v4:= temp @kind object;
  #L4c72a6.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4c72aa.  if v4 == 0 then goto L4c72c2;
  #L4c72ae.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c72b4.  call `f`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L4c72ba.  call `h`(v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c72c0.  return @kind void;
  #L4c72c2.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c72c6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c72cc.  v4:= temp;
  #L4c72ce.  v5:= 0I;
  #L4c72d0.  if v4 != 0 then goto L4c72d8;
  #L4c72d4.  v4:= 1I;
  #L4c72d6.  goto L4c72da;
  #L4c72d8.  v4:= 0I;
  #L4c72da.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c72e0.  v6:= temp @kind object;
  #L4c72e2.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L4c72e6.  if v6 != 0 then goto L4c72ee;
  #L4c72ea.  v7:= 1I;
  #L4c72ec.  goto L4c72f0;
  #L4c72ee.  v7:= 0I;
  #L4c72f0.  if v4 == 0 then goto L4c7352;
  #L4c72f4.  if v7 == 0 then goto L4c7352;
  #L4c72f8.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c72fc.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c7302.  v0:= temp @kind object;
  #L4c7304.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c730a.  v0:= temp @kind object;
  #L4c730c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c7312.  v2:= temp;
  #L4c7314.  if v2 == 0 then goto L4c732c;
  #L4c7318.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c731e.  v2:= temp @kind object;
  #L4c7320.  v2:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v2 @kind object;
  #L4c7324.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4c732a.  goto L4c730c;
  #L4c732c.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c7330.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c7336.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c733a.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c7340.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c7344.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c734a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c7350.  return @kind void;
  #L4c7352.  if v7 == 0 then goto L4c7366;
  #L4c7356.  v3:= -v3 @kind int;
  #L4c7358.  call temp:= `addAndGet`(v11, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c735e.  v3:= temp;
  #L4c7360.  if v3 != 0 then goto L4c728a;
  #L4c7364.  return @kind void;
  #L4c7366.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c736c.  v4:= temp @kind object;
  #L4c736e.  v7:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c7372.  if v6 != v7 then goto L4c7498;
  #L4c7376.  call temp:= `create`() @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:()Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4c737c.  v5:= temp @kind object;
  #L4c737e.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int`;
  #L4c7382.  v7:= v6 + 1;
  #L4c7386.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int` := v7;
  #L4c738a.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c738e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c7394.  v8:= temp @kind object;
  #L4c7396.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c739c.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c73a0.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c73a6.  v7:= temp @kind object;
  #L4c73a8.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L4c73ac.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c73b2.  v7:= temp @kind object;
  #L4c73b4.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4c73b8.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L4c73bc.  call `<init>`(v8, v11, v2, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L4c73c2.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c73c6.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c73cc.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4c73d2.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c73d6.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c73dc.  v6:= temp @kind object;
  #L4c73de.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4c73e2.  if v6 == 0 then goto L4c73fa;
  #L4c73e6.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c73ec.  call `f`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L4c73f2.  call `h`(v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c73f8.  return @kind void;
  #L4c73fa.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c73fe.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c7404.  v4:= temp @kind object;
  #L4c7406.  v6:= "The resultSelector returned a null value" @kind object;
  #L4c740a.  call temp:= `requireNonNull`(v4, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c7410.  v4:= temp @kind object;
  #L4c7412.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c7416.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c741c.  v6:= temp @kind wide;
  #L4c741e.  v8:= 0L;
  #L4c7422.  v10:= lcmp(v6, v8);
  #L4c7426.  if v10 == 0 then goto L4c746e;
  #L4c742a.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c7430.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c7434.  v6:= 1L;
  #L4c7438.  call temp:= `produced`(v4, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c743e.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c7442.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c7448.  v4:= temp @kind object;
  #L4c744a.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c7450.  v4:= temp @kind object;
  #L4c7452.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c7458.  v6:= temp;
  #L4c745a.  if v6 == 0 then goto L4c728a;
  #L4c745e.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c7464.  v6:= temp @kind object;
  #L4c7466.  call `onNext`(v5, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c746c.  goto L4c7452;
  #L4c746e.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c7472.  v3:= "Could not emit value due to lack of requests" @kind object;
  #L4c7476.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c747c.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c7482.  return @kind void;
  #L4c7484.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7486.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c748c.  return @kind void;
  #L4c748e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7490.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c7496.  return @kind void;
  #L4c7498.  v7:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c749c.  if v6 != v7 then goto L4c755a;
  #L4c74a0.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int`;
  #L4c74a4.  v7:= v6 + 1;
  #L4c74a8.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int` := v7;
  #L4c74ac.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c74b0.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c74b6.  v8:= temp @kind object;
  #L4c74b8.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c74be.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c74c2.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c74c8.  v7:= temp @kind object;
  #L4c74ca.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L4c74ce.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c74d4.  v7:= temp @kind object;
  #L4c74d6.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4c74da.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`;
  #L4c74de.  call `<init>`(v8, v11, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L4c74e4.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c74e8.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c74ee.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4c74f4.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c74f8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c74fe.  v5:= temp @kind object;
  #L4c7500.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4c7504.  if v5 == 0 then goto L4c751c;
  #L4c7508.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c750e.  call `f`(v11) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L4c7514.  call `h`(v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c751a.  return @kind void;
  #L4c751c.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c7520.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c7526.  v5:= temp @kind object;
  #L4c7528.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c752e.  v5:= temp @kind object;
  #L4c7530.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c7536.  v6:= temp;
  #L4c7538.  if v6 == 0 then goto L4c728a;
  #L4c753c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c7542.  v6:= temp @kind object;
  #L4c7544.  v6:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v6 @kind object;
  #L4c7548.  call `onNext`(v6, v4) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c754e.  goto L4c7530;
  #L4c7550.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c7552.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L4c7558.  return @kind void;
  #L4c755a.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4c755e.  if v6 != v5 then goto L4c759a;
  #L4c7562.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L4c7566.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c756a.  v6:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4c756e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c7574.  v6:= temp @kind object;
  #L4c7576.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c757c.  v5:= temp @kind object;
  #L4c757e.  v5:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v5 @kind object;
  #L4c7582.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c7586.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c758c.  if v5 == 0 then goto L4c728a;
  #L4c7590.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4c7596.  goto L4c728a;
  #L4c759a.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L4c759e.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c75a2.  v6:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L4c75a6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c75ac.  v6:= temp @kind object;
  #L4c75ae.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c75b4.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c75b8.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c75be.  goto L4c728a;
  catch `java.lang.Throwable` @[L4c739c..L4c73b8] goto L4c748e;
  catch `java.lang.Throwable` @[L4c73fa..L4c7412] goto L4c7484;
  catch `java.lang.Throwable` @[L4c74be..L4c74da] goto L4c7550;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c75f8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c75fc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c7602.  v0:= temp @kind object;
  #L4c7604.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c7608.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c760e.  v1:= temp @kind object;
  #L4c7610.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c7616.  v1:= temp @kind object;
  #L4c7618.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c761e.  v2:= temp;
  #L4c7620.  if v2 == 0 then goto L4c7638;
  #L4c7624.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c762a.  v2:= temp @kind object;
  #L4c762c.  v2:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v2 @kind object;
  #L4c7630.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c7636.  goto L4c7618;
  #L4c7638.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c763c.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c7642.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L4c7646.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c764c.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c7652.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4c7664.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c766a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c766e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c7674.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c767a.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L4c7680.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c7686.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c77d0.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c77d6.  v0:= temp;
  #L4c77d8.  if v0 == 0 then goto L4c77e6;
  #L4c77dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c77e0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c77e6.  return @kind void;
}
