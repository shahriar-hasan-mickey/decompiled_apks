record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f71a8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f71ae.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.c` @type ^`boolean` := v2 @kind boolean;
  #L4f71b2.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4f71b6.  v0:= 0I;
  #L4f71b8.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f71be.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` := v2 @kind object;
  #L4f71c2.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f71c8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f7240.  call temp:= `error`(v2) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4f7246.  v2:= temp @kind object;
  #L4f7248.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f724e.  v2:= temp @kind object;
  #L4f7250.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4f7254.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f725a.  call `d`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4f7260.  call `l`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.l:()V` @kind virtual;
  #L4f7266.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4f7278.  call temp:= `next`(v2) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f727e.  v2:= temp @kind object;
  #L4f7280.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f7286.  v2:= temp @kind object;
  #L4f7288.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4f728c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f7292.  call `d`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4f7298.  call `k`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.k:()V` @kind virtual;
  #L4f729e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f72ec.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f72f2.  v0:= temp;
  #L4f72f4.  if v0 == 0 then goto L4f72fa;
  #L4f72f8.  return @kind void;
  #L4f72fa.  v0:= 1I;
  #L4f72fc.  call temp:= `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L4f7302.  v1:= temp @kind object;
  #L4f7304.  v1:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v1 @kind object;
  #L4f7308.  if v1 != 0 then goto L4f7318;
  #L4f730c.  call temp:= `f`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;` @kind virtual;
  #L4f7312.  v1:= temp @kind object;
  #L4f7314.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4f7318.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L4f731e.  v2:= temp;
  #L4f7320.  v3:= 0I;
  #L4f7322.  if v2 == 0 then goto L4f732c;
  #L4f7326.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4f732a.  return @kind void;
  #L4f732c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7332.  v2:= temp @kind object;
  #L4f7334.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4f7338.  if v2 == 0 then goto L4f7362;
  #L4f733c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4f7340.  call temp:= `g`(v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f7346.  v1:= temp @kind object;
  #L4f7348.  v4:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.b` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f734c.  call temp:= `accept`(v1, v4) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/rxjava3/core/Observer;)Z` @kind static;
  #L4f7352.  v1:= temp;
  #L4f7354.  if v1 == 0 then goto L4f735e;
  #L4f7358.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4f735c.  return @kind void;
  #L4f735e.  v1:= v2 @kind object;
  #L4f7360.  goto L4f7318;
  #L4f7362.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4f7366.  v0:= -v0 @kind int;
  #L4f7368.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f736e.  v0:= temp;
  #L4f7370.  if v0 != 0 then goto L4f72fc;
  #L4f7374.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4f7208.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4f720e.  v0:= temp @kind object;
  #L4f7210.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f7216.  v0:= temp @kind object;
  #L4f7218.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4f721c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f7222.  call `d`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4f7228.  call `l`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.l:()V` @kind virtual;
  #L4f722e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L4f71dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` @kind object;
  #L4f71e0.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f71e6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` := v2 @kind object;
  #L4f71ea.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4f71ee.  v2:= v2 + 1;
  #L4f71f2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v2;
  #L4f71f6.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4f7180.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;

  #L4f7160.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f7166.  v0:= temp @kind object;
  #L4f7168.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4f716c.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4f7194.  return v1 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.h:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4f72b0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f72b6.  v0:= temp @kind object;
  #L4f72b8.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4f72bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f72c2.  v0:= temp @kind object;
  #L4f72c4.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4f72c8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4f72cc.  v1:= v1 + -1;
  #L4f72d0.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v1;
  #L4f72d4.  call `i`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4f72da.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4f7388.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.c` @type ^`boolean` @kind boolean;
  #L4f738c.  if v0 == 0 then goto L4f73ac;
  #L4f7390.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4f7394.  v1:= 0I;
  #L4f7396.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f739c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f73a2.  v3:= temp @kind object;
  #L4f73a4.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f73aa.  v3:= v0 @kind object;
  #L4f73ac.  call `set`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f73b2.  return @kind void;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.j:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4f73c4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f73ca.  v0:= temp @kind object;
  #L4f73cc.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4f73d0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4f73d4.  if v1 == 0 then goto L4f73f8;
  #L4f73d8.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4f73dc.  v2:= 0I;
  #L4f73de.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f73e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f73ea.  v0:= temp @kind object;
  #L4f73ec.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f73f2.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f73f8.  return @kind void;
}
procedure `void` `k`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.k:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.l:()V` @AccessFlag  {
    temp;

  #L4f740c.  call `j`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.j:()V` @kind virtual;
  #L4f7412.  return @kind void;
}
