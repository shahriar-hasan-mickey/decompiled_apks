record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d37ec.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`;
  #L4d37f0.  v1:= 0I;
  #L4d37f2.  v2:= -1L;
  #L4d37f6.  v4:= 1I;
  #L4d37f8.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L4d37fe.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` := v0 @kind object;
  #L4d3802.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4d3808.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d381c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d3822.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d3826.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d382c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4d3830.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d3834.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d383a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4d383e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d3842.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4d3846.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int` := v4;
  #L4d384a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L4d384e.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d3852.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d3858.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4d385c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d38ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d38b0.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L4d38b4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d38ba.  v0:= temp @kind object;
  #L4d38bc.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L4d38c0.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L4d38c4.  if v0 == v1 then goto L4d38d2;
  #L4d38c8.  if v0 == 0 then goto L4d38d2;
  #L4d38cc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4d38d2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4d38e4.  v1:= v17 @kind object;
  #L4d38e8.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d38ee.  v0:= temp;
  #L4d38f0.  if v0 == 0 then goto L4d38f6;
  #L4d38f4.  return @kind void;
  #L4d38f6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d38fa.  v4:= 1I;
  #L4d38fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4d3900.  if v0 == 0 then goto L4d3906;
  #L4d3904.  return @kind void;
  #L4d3906.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4d390a.  if v0 == 0 then goto L4d3970;
  #L4d390e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4d3912.  if v0 == 0 then goto L4d3932;
  #L4d3916.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d391a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3920.  v0:= temp @kind object;
  #L4d3922.  if v0 != 0 then goto L4d3970;
  #L4d3926.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d392a.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d3930.  return @kind void;
  #L4d3932.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3936.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d393c.  v0:= temp @kind object;
  #L4d393e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4d3942.  if v0 == 0 then goto L4d3958;
  #L4d3946.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4d394c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3950.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d3956.  return @kind void;
  #L4d3958.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d395c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3962.  v0:= temp @kind object;
  #L4d3964.  if v0 != 0 then goto L4d3970;
  #L4d3968.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d396e.  return @kind void;
  #L4d3970.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3974.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d397a.  v0:= temp @kind object;
  #L4d397c.  v5:= v0 @kind object;
  #L4d397e.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v5 @kind object;
  #L4d3982.  v6:= 0I;
  #L4d3984.  if v5 == 0 then goto L4d3990;
  #L4d3988.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d398c.  v7:= v0 @kind object;
  #L4d398e.  goto L4d3992;
  #L4d3990.  v7:= v6 @kind object;
  #L4d3992.  if v7 == 0 then goto L4d3b1e;
  #L4d3996.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d399a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d39a0.  v8:= temp @kind wide;
  #L4d39a2.  v10:= 0L;
  #L4d39a6.  v12:= v10 @kind wide;
  #L4d39a8.  v15:= lcmp(v12, v8);
  #L4d39ac.  if v15 == 0 then goto L4d3a72;
  #L4d39b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4d39b4.  if v0 == 0 then goto L4d39ba;
  #L4d39b8.  return @kind void;
  #L4d39ba.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L4d39be.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d39c4.  v16:= temp @kind object;
  #L4d39c6.  v3:= v16 @kind object;
  #L4d39ca.  goto L4d39f0;
  #L4d39cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d39ce.  v16:= v0 @kind object;
  #L4d39d2.  call `throwIfFatal`(v16) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d39d8.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4d39de.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d39e2.  v3:= v16 @kind object;
  #L4d39e6.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d39ec.  v3:= v6 @kind object;
  #L4d39ee.  v0:= 1I;
  #L4d39f0.  if v3 != 0 then goto L4d39fa;
  #L4d39f4.  v16:= 1I;
  #L4d39f8.  goto L4d39fe;
  #L4d39fa.  v16:= 0I;
  #L4d39fe.  v14:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3a02.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3a08.  v14:= temp @kind object;
  #L4d3a0a.  if v5 == v14 then goto L4d3a12;
  #L4d3a0e.  v14:= 1I;
  #L4d3a10.  goto L4d3a74;
  #L4d3a12.  if v0 == 0 then goto L4d3a5e;
  #L4d3a16.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4d3a1a.  if v0 != 0 then goto L4d3a4e;
  #L4d3a1e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3a22.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3a28.  v0:= temp @kind object;
  #L4d3a2a.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4d3a2e.  if v0 == 0 then goto L4d3a3e;
  #L4d3a32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3a36.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d3a3c.  return @kind void;
  #L4d3a3e.  if v16 == 0 then goto L4d3a5e;
  #L4d3a42.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3a46.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3a4c.  goto L4d3a0e;
  #L4d3a4e.  if v16 == 0 then goto L4d3a5e;
  #L4d3a52.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3a56.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3a5c.  goto L4d3a0e;
  #L4d3a5e.  if v16 == 0 then goto L4d3a64;
  #L4d3a62.  goto L4d3a72;
  #L4d3a64.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d3a6a.  v14:= 1L;
  #L4d3a6e.  v12:= v12 + v14 @kind long;
  #L4d3a70.  goto L4d39a8;
  #L4d3a72.  v14:= 0I;
  #L4d3a74.  if v15 != 0 then goto L4d3ae2;
  #L4d3a78.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L4d3a7c.  if v0 == 0 then goto L4d3ae2;
  #L4d3a80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4d3a84.  if v0 != 0 then goto L4d3ac8;
  #L4d3a88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3a8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3a92.  v0:= temp @kind object;
  #L4d3a94.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4d3a98.  if v0 == 0 then goto L4d3aae;
  #L4d3a9c.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4d3aa2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3aa6.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d3aac.  return @kind void;
  #L4d3aae.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4d3ab4.  v0:= temp;
  #L4d3ab6.  if v0 == 0 then goto L4d3ae2;
  #L4d3aba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3abe.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3ac4.  goto L4d38fc;
  #L4d3ac8.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4d3ace.  v0:= temp;
  #L4d3ad0.  if v0 == 0 then goto L4d3ae2;
  #L4d3ad4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3ad8.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3ade.  goto L4d38fc;
  #L4d3ae2.  v0:= lcmp(v12, v10);
  #L4d3ae6.  if v0 == 0 then goto L4d3b16;
  #L4d3aea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4d3aee.  if v0 != 0 then goto L4d3b16;
  #L4d3af2.  v6:= 9223372036854775807L;
  #L4d3afc.  v0:= lcmp(v8, v6);
  #L4d3b00.  if v0 == 0 then goto L4d3b10;
  #L4d3b04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d3b08.  v6:= -v12 @kind long;
  #L4d3b0a.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4d3b10.  call `b`(v5, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.b:(J)V` @kind virtual;
  #L4d3b16.  if v14 == 0 then goto L4d3b1e;
  #L4d3b1a.  goto L4d38fc;
  #L4d3b1e.  v0:= -v4 @kind int;
  #L4d3b20.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d3b26.  v4:= temp;
  #L4d3b28.  if v4 != 0 then goto L4d38fc;
  #L4d3b2c.  return @kind void;
  catch `java.lang.Throwable` @[L4d39be..L4d39c6] goto L4d39cc;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3870.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L4d3874.  if v0 != 0 then goto L4d3898;
  #L4d3878.  v0:= 1I;
  #L4d387a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4d387e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3882.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d3888.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4d388e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3892.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4d3898.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3b4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4d3b50.  if v0 == 0 then goto L4d3b56;
  #L4d3b54.  return @kind void;
  #L4d3b56.  v0:= 1I;
  #L4d3b58.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v0 @kind boolean;
  #L4d3b5c.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4d3b62.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3b74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4d3b78.  if v0 != 0 then goto L4d3ba8;
  #L4d3b7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d3b80.  call temp:= `tryAddThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d3b86.  v0:= temp;
  #L4d3b88.  if v0 == 0 then goto L4d3ba8;
  #L4d3b8c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L4d3b90.  if v2 != 0 then goto L4d3b9a;
  #L4d3b94.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L4d3b9a.  v2:= 1I;
  #L4d3b9c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v2 @kind boolean;
  #L4d3ba0.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4d3ba6.  goto L4d3bae;
  #L4d3ba8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d3bae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d3bc0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L4d3bc4.  if v0 == 0 then goto L4d3bca;
  #L4d3bc8.  return @kind void;
  #L4d3bca.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4d3bce.  v2:= 1L;
  #L4d3bd2.  v0:= v0 + v2 @kind long;
  #L4d3bd4.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` := v0 @kind wide;
  #L4d3bd8.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3bdc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3be2.  v2:= temp @kind object;
  #L4d3be4.  v2:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v2 @kind object;
  #L4d3be8.  if v2 == 0 then goto L4d3bf2;
  #L4d3bec.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L4d3bf2.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d3bf6.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d3bfc.  v5:= temp @kind object;
  #L4d3bfe.  v2:= "The publisher returned is null" @kind object;
  #L4d3c02.  call temp:= `requireNonNull`(v5, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d3c08.  v5:= temp @kind object;
  #L4d3c0a.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L4d3c0e.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`;
  #L4d3c12.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int`;
  #L4d3c16.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L4d3c1c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3c20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d3c26.  v0:= temp @kind object;
  #L4d3c28.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L4d3c2c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L4d3c30.  if v0 != v1 then goto L4d3c36;
  #L4d3c34.  goto L4d3c4c;
  #L4d3c36.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3c3a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3c40.  v0:= temp;
  #L4d3c42.  if v0 == 0 then goto L4d3c1c;
  #L4d3c46.  call `subscribe`(v5, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d3c4c.  return @kind void;
  #L4d3c4e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d3c50.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d3c56.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3c5a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d3c60.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d3c66.  return @kind void;
  catch `java.lang.Throwable` @[L4d3bf2..L4d3c0e] goto L4d3c4e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d3c84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3c88.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d3c8e.  v0:= temp;
  #L4d3c90.  if v0 == 0 then goto L4d3ca2;
  #L4d3c94.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d3c98.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d3c9c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d3ca2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d3cb4.  call temp:= `validate`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d3cba.  v0:= temp;
  #L4d3cbc.  if v0 == 0 then goto L4d3cf6;
  #L4d3cc0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d3cc4.  call temp:= `add`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d3cca.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L4d3cce.  v0:= 0L;
  #L4d3cd2.  v2:= lcmp(v4, v0);
  #L4d3cd6.  if v2 != 0 then goto L4d3cf0;
  #L4d3cda.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d3cde.  v0:= 9223372036854775807L;
  #L4d3ce8.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d3cee.  goto L4d3cf6;
  #L4d3cf0.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L4d3cf6.  return @kind void;
}
