record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cdfc8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4cdfce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.a` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L4cdfd2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cdfe4.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L4cdfea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4cdfee.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4cdff4.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4cdff8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4cdffc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce010.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce014.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ce018.  if v0 != v1 then goto L4ce01e;
  #L4ce01c.  return @kind void;
  #L4ce01e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4ce022.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4ce026.  if v0 == 0 then goto L4ce032;
  #L4ce02a.  call `complete`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4ce030.  goto L4ce03c;
  #L4ce032.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ce036.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ce03c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce050.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce054.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ce058.  if v0 != v1 then goto L4ce064;
  #L4ce05c.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ce062.  return @kind void;
  #L4ce064.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4ce068.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ce06c.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ce072.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce084.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce088.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4ce08c.  if v0 != v1 then goto L4ce092;
  #L4ce090.  return @kind void;
  #L4ce092.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L4ce096.  if v0 != 0 then goto L4ce0a0;
  #L4ce09a.  v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4ce09e.  goto L4ce0d6;
  #L4ce0a0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.a` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4ce0a4.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ce0aa.  v3:= temp @kind object;
  #L4ce0ac.  v0:= "The reducer returned a null value" @kind object;
  #L4ce0b0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ce0b6.  v3:= temp @kind object;
  #L4ce0b8.  v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4ce0bc.  goto L4ce0d6;
  #L4ce0be.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ce0c0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ce0c6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce0ca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ce0d0.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ce0d6.  return @kind void;
  catch `java.lang.Throwable` @[L4ce0a0..L4ce0bc] goto L4ce0be;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReduce$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ce0f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4ce0f8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ce0fe.  v0:= temp;
  #L4ce100.  if v0 == 0 then goto L4ce122;
  #L4ce104.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReduce$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4ce108.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ce10c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ce112.  v0:= 9223372036854775807L;
  #L4ce11c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ce122.  return @kind void;
}
