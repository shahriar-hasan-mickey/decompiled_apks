record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.m` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4c267c.  v0:= 0I;
  #L4c267e.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v0];
  #L4c2682.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] := v1 @kind object;
  #L4c2686.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v0];
  #L4c268a.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] := v0 @kind object;
  #L4c268e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c26a0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c26a6.  v0:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c26aa.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c26b0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v0 @kind object;
  #L4c26b4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c26b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c26be.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c26c2.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c26c6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c26cc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4c26d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4c26d4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4c26d8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` := v4 @kind boolean;
  #L4c26dc.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int` := v5;
  #L4c26e0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int` := v6;
  #L4c26e4.  v2:= 1I;
  #L4c26e6.  v3:= v5 ^> 1;
  #L4c26ea.  call temp:= `max`(v2, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4c26f0.  v2:= temp;
  #L4c26f2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int` := v2;
  #L4c26f6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c26fa.  v3:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4c26fe.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c2704.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c2580.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2584.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c258a.  v0:= temp @kind object;
  #L4c258c.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L4c2590.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4c2594.  v2:= 0I;
  #L4c2596.  if v0 != v1 then goto L4c25a2;
  #L4c259a.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4c25a0.  return v2;
  #L4c25a2.  v1:= length @variable v0;
  #L4c25a4.  v3:= v1 + 1;
  #L4c25a8.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v3];
  #L4c25ac.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c25b2.  v3[v1]:= v5 @kind object;
  #L4c25b6.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c25ba.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c25c0.  v0:= temp;
  #L4c25c2.  if v0 == 0 then goto L4c2580;
  #L4c25c6.  v5:= 1I;
  #L4c25c8.  return v5;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c25dc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4c25e0.  v1:= 1I;
  #L4c25e2.  if v0 == 0 then goto L4c25ee;
  #L4c25e6.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @kind virtual;
  #L4c25ec.  return v1;
  #L4c25ee.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4c25f2.  if v0 != 0 then goto L4c261c;
  #L4c25f6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c25fa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c2600.  v0:= temp @kind object;
  #L4c2602.  if v0 == 0 then goto L4c261c;
  #L4c2606.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @kind virtual;
  #L4c260c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c2610.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c2614.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c261a.  return v1;
  #L4c261c.  v0:= 0I;
  #L4c261e.  return v0;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L4c2764.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c2768.  if v0 == 0 then goto L4c2772;
  #L4c276c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c2772.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2718.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4c271c.  if v0 != 0 then goto L4c2750;
  #L4c2720.  v0:= 1I;
  #L4c2722.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4c2726.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c272a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c2730.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.d:()V` @kind virtual;
  #L4c2736.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c273c.  v0:= temp;
  #L4c273e.  if v0 != 0 then goto L4c2750;
  #L4c2742.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c2746.  if v0 == 0 then goto L4c2750;
  #L4c274a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4c2750.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c2784.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2788.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4c278c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c2792.  v0:= temp @kind object;
  #L4c2794.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L4c2798.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4c279c.  if v0 == v1 then goto L4c27c2;
  #L4c27a0.  v1:= length @variable v0;
  #L4c27a2.  v2:= 0I;
  #L4c27a4.  if v2 >= v1 then goto L4c27b8;
  #L4c27a8.  v3:= v0[v2] @kind object;
  #L4c27ac.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4c27b2.  v2:= v2 + 1;
  #L4c27b6.  goto L4c27a4;
  #L4c27b8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c27bc.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c27c2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4c27d4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c27da.  v0:= temp;
  #L4c27dc.  if v0 != 0 then goto L4c27e6;
  #L4c27e0.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L4c27e6.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v24 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L4c27f8.  v1:= v24 @kind object;
  #L4c27fc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c2800.  v4:= 1I;
  #L4c2802.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4c2808.  v0:= temp;
  #L4c280a.  if v0 == 0 then goto L4c2810;
  #L4c280e.  return @kind void;
  #L4c2810.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c2814.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c2818.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c281e.  v5:= temp @kind wide;
  #L4c2820.  v7:= 9223372036854775807L;
  #L4c282a.  v10:= lcmp(v5, v7);
  #L4c282e.  if v10 != 0 then goto L4c2836;
  #L4c2832.  v10:= 1I;
  #L4c2834.  goto L4c2838;
  #L4c2836.  v10:= 0I;
  #L4c2838.  v11:= 1L;
  #L4c283c.  v13:= 0L;
  #L4c2840.  if v0 == 0 then goto L4c28a2;
  #L4c2844.  v7:= v13 @kind wide;
  #L4c2846.  v15:= v7 @kind wide;
  #L4c2848.  v17:= lcmp(v5, v13);
  #L4c284c.  if v17 == 0 then goto L4c287a;
  #L4c2850.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c2856.  v9:= temp @kind object;
  #L4c2858.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4c285e.  v18:= temp;
  #L4c2860.  if v18 == 0 then goto L4c2866;
  #L4c2864.  return @kind void;
  #L4c2866.  if v9 != 0 then goto L4c286c;
  #L4c286a.  goto L4c287a;
  #L4c286c.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c2872.  v15:= v15 + v11 @kind long;
  #L4c2874.  v7:= v7 + v11 @kind long;
  #L4c2876.  v5:= v5 - v11 @kind long;
  #L4c2878.  goto L4c2848;
  #L4c287a.  v0:= lcmp(v7, v13);
  #L4c287e.  if v0 == 0 then goto L4c28a4;
  #L4c2882.  if v10 == 0 then goto L4c2892;
  #L4c2886.  v5:= 9223372036854775807L;
  #L4c2890.  goto L4c28a4;
  #L4c2892.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c2896.  v5:= -v7 @kind long;
  #L4c2898.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c289e.  v5:= temp @kind wide;
  #L4c28a0.  goto L4c28a4;
  #L4c28a2.  v15:= v13 @kind wide;
  #L4c28a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4c28a8.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c28ac.  v8:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c28b0.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c28b6.  v8:= temp @kind object;
  #L4c28b8.  v8:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v8 @kind object;
  #L4c28bc.  v9:= length @variable v8;
  #L4c28be.  if v0 == 0 then goto L4c28e6;
  #L4c28c2.  if v7 == 0 then goto L4c28d2;
  #L4c28c6.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c28cc.  v0:= temp;
  #L4c28ce.  if v0 == 0 then goto L4c28e6;
  #L4c28d2.  if v9 != 0 then goto L4c28e6;
  #L4c28d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c28da.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c28de.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c28e4.  return @kind void;
  #L4c28e6.  v18:= v4;
  #L4c28ea.  if v9 == 0 then goto L4c2aea;
  #L4c28ee.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` @kind wide;
  #L4c28f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int`;
  #L4c28f6.  if v9 <= v0 then goto L4c290a;
  #L4c28fa.  v7:= v8[v0] @kind object;
  #L4c28fe.  v11:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4c2902.  v7:= lcmp(v11, v3);
  #L4c2906.  if v7 == 0 then goto L4c2948;
  #L4c290a.  if v9 > v0 then goto L4c2910;
  #L4c290e.  v0:= 0I;
  #L4c2910.  v7:= 0I;
  #L4c2912.  if v7 >= v9 then goto L4c2938;
  #L4c2916.  v11:= v8[v0] @kind object;
  #L4c291a.  v11:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4c291e.  v21:= lcmp(v11, v3);
  #L4c2922.  if v21 != 0 then goto L4c2928;
  #L4c2926.  goto L4c2938;
  #L4c2928.  v0:= v0 + 1;
  #L4c292c.  if v0 != v9 then goto L4c2932;
  #L4c2930.  v0:= 0I;
  #L4c2932.  v7:= v7 + 1;
  #L4c2936.  goto L4c2912;
  #L4c2938.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int` := v0;
  #L4c293c.  v3:= v8[v0] @kind object;
  #L4c2940.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4c2944.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` := v3 @kind wide;
  #L4c2948.  v3:= v0;
  #L4c294a.  v0:= 0I;
  #L4c294c.  v4:= 0I;
  #L4c294e.  if v4 >= v9 then goto L4c2aca;
  #L4c2952.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4c2958.  v7:= temp;
  #L4c295a.  if v7 == 0 then goto L4c2960;
  #L4c295e.  return @kind void;
  #L4c2960.  v7:= v8[v3] @kind object;
  #L4c2964.  v11:= 0I;
  #L4c2966.  v12:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c296a.  if v12 != 0 then goto L4c297a;
  #L4c296e.  v21:= v8 @kind object;
  #L4c2972.  v22:= v9;
  #L4c2976.  goto L4c2a5c;
  #L4c297a.  v21:= v8 @kind object;
  #L4c297e.  v22:= v9;
  #L4c2982.  v8:= v13 @kind wide;
  #L4c2984.  v23:= lcmp(v5, v13);
  #L4c2988.  if v23 == 0 then goto L4c2a0c;
  #L4c298c.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4c2992.  v11:= temp;
  #L4c2994.  if v11 == 0 then goto L4c299a;
  #L4c2998.  return @kind void;
  #L4c299a.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c29a0.  v11:= temp @kind object;
  #L4c29a2.  if v11 != 0 then goto L4c29a8;
  #L4c29a6.  goto L4c2a0c;
  #L4c29a8.  call `onNext`(v2, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c29ae.  v19:= 1L;
  #L4c29b2.  v5:= v5 - v19 @kind long;
  #L4c29b6.  v8:= v8 + v19 @kind long;
  #L4c29ba.  goto L4c2984;
  #L4c29bc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c29be.  v8:= v0 @kind object;
  #L4c29c0.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c29c6.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4c29cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c29d0.  call temp:= `tryAddThrowableOrReport`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c29d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4c29da.  if v0 != 0 then goto L4c29e8;
  #L4c29de.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c29e2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c29e8.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4c29ee.  v0:= temp;
  #L4c29f0.  if v0 == 0 then goto L4c29f6;
  #L4c29f4.  return @kind void;
  #L4c29f6.  call `i`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L4c29fc.  v4:= v4 + 1;
  #L4c2a00.  v9:= v22;
  #L4c2a04.  v0:= 1I;
  #L4c2a06.  v7:= 1L;
  #L4c2a0a.  goto L4c2aba;
  #L4c2a0c.  v12:= lcmp(v8, v13);
  #L4c2a10.  if v12 == 0 then goto L4c2a3e;
  #L4c2a14.  if v10 != 0 then goto L4c2a28;
  #L4c2a18.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c2a1c.  v13:= -v8 @kind long;
  #L4c2a1e.  call temp:= `addAndGet`(v5, v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c2a24.  v5:= temp @kind wide;
  #L4c2a26.  goto L4c2a32;
  #L4c2a28.  v5:= 9223372036854775807L;
  #L4c2a32.  call `a`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @kind virtual;
  #L4c2a38.  v8:= 0L;
  #L4c2a3c.  goto L4c2a40;
  #L4c2a3e.  v8:= v13 @kind wide;
  #L4c2a40.  v12:= lcmp(v5, v8);
  #L4c2a44.  if v12 == 0 then goto L4c2a5c;
  #L4c2a48.  if v11 != 0 then goto L4c2a4e;
  #L4c2a4c.  goto L4c2a5c;
  #L4c2a4e.  v8:= v21 @kind object;
  #L4c2a52.  v9:= v22;
  #L4c2a56.  v13:= 0L;
  #L4c2a5a.  goto L4c2966;
  #L4c2a5c.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` @kind boolean;
  #L4c2a60.  v9:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c2a64.  if v8 == 0 then goto L4c2a96;
  #L4c2a68.  if v9 == 0 then goto L4c2a78;
  #L4c2a6c.  call temp:= `isEmpty`(v9) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c2a72.  v8:= temp;
  #L4c2a74.  if v8 == 0 then goto L4c2a96;
  #L4c2a78.  call `i`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L4c2a7e.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4c2a84.  v0:= temp;
  #L4c2a86.  if v0 == 0 then goto L4c2a8c;
  #L4c2a8a.  return @kind void;
  #L4c2a8c.  v7:= 1L;
  #L4c2a90.  v15:= v15 + v7 @kind long;
  #L4c2a92.  v0:= 1I;
  #L4c2a94.  goto L4c2a9a;
  #L4c2a96.  v7:= 1L;
  #L4c2a9a.  v11:= 0L;
  #L4c2a9e.  v9:= lcmp(v5, v11);
  #L4c2aa2.  if v9 != 0 then goto L4c2aac;
  #L4c2aa6.  v9:= v0;
  #L4c2aa8.  v11:= 1I;
  #L4c2aaa.  goto L4c2ad2;
  #L4c2aac.  v3:= v3 + 1;
  #L4c2ab0.  v9:= v22;
  #L4c2ab4.  if v3 != v9 then goto L4c2aba;
  #L4c2ab8.  v3:= 0I;
  #L4c2aba.  v11:= 1I;
  #L4c2abc.  v4:= v4 + v11 @kind int;
  #L4c2abe.  v8:= v21 @kind object;
  #L4c2ac2.  v13:= 0L;
  #L4c2ac6.  goto L4c294e;
  #L4c2aca.  v21:= v8 @kind object;
  #L4c2ace.  v11:= 1I;
  #L4c2ad0.  v9:= v0;
  #L4c2ad2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int` := v3;
  #L4c2ad6.  v0:= v21[v3] @kind object;
  #L4c2ada.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4c2ade.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` := v3 @kind wide;
  #L4c2ae2.  v3:= v15 @kind wide;
  #L4c2ae4.  v5:= 0L;
  #L4c2ae8.  goto L4c2af2;
  #L4c2aea.  v11:= 1I;
  #L4c2aec.  v5:= v13 @kind wide;
  #L4c2aee.  v3:= v15 @kind wide;
  #L4c2af0.  v9:= 0I;
  #L4c2af2.  v0:= lcmp(v3, v5);
  #L4c2af6.  if v0 == 0 then goto L4c2b0c;
  #L4c2afa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4c2afe.  if v0 != 0 then goto L4c2b0c;
  #L4c2b02.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c2b06.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c2b0c.  if v9 == 0 then goto L4c2b18;
  #L4c2b10.  v4:= v18;
  #L4c2b14.  goto L4c2802;
  #L4c2b18.  v3:= v18;
  #L4c2b1c.  v0:= -v3 @kind int;
  #L4c2b1e.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c2b24.  v4:= temp;
  #L4c2b26.  if v4 != 0 then goto L4c2802;
  #L4c2b2a.  return @kind void;
  catch `java.lang.Throwable` @[L4c299a..L4c29a2] goto L4c29bc;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.g:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c2630.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c2634.  if v0 != 0 then goto L4c2668;
  #L4c2638.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L4c263c.  v1:= 2147483647I;
  #L4c2642.  if v0 != v1 then goto L4c2656;
  #L4c2646.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c264a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L4c264e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c2654.  goto L4c2664;
  #L4c2656.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4c265a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L4c265e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4c2664.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4c2668.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.h:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c2b48.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c2b4c.  call temp:= `tryAddThrowableOrReport`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c2b52.  v4:= temp;
  #L4c2b54.  if v4 == 0 then goto L4c2ba2;
  #L4c2b58.  v4:= 1I;
  #L4c2b5a.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v4 @kind boolean;
  #L4c2b5e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4c2b62.  if v3 != 0 then goto L4c2b9c;
  #L4c2b66.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c2b6a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c2b70.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2b74.  v4:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4c2b78.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c2b7e.  v3:= temp @kind object;
  #L4c2b80.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v3 @kind object;
  #L4c2b84.  v4:= length @variable v3;
  #L4c2b86.  v0:= 0I;
  #L4c2b88.  if v0 >= v4 then goto L4c2b9c;
  #L4c2b8c.  v1:= v3[v0] @kind object;
  #L4c2b90.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4c2b96.  v0:= v0 + 1;
  #L4c2b9a.  goto L4c2b88;
  #L4c2b9c.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c2ba2.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c2dc0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2dc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c2dca.  v0:= temp @kind object;
  #L4c2dcc.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L4c2dd0.  v1:= length @variable v0;
  #L4c2dd2.  if v1 != 0 then goto L4c2dd8;
  #L4c2dd6.  return @kind void;
  #L4c2dd8.  v2:= -1I;
  #L4c2dda.  v3:= 0I;
  #L4c2ddc.  v4:= 0I;
  #L4c2dde.  if v4 >= v1 then goto L4c2df4;
  #L4c2de2.  v5:= v0[v4] @kind object;
  #L4c2de6.  if v5 != v7 then goto L4c2dee;
  #L4c2dea.  v2:= v4;
  #L4c2dec.  goto L4c2df4;
  #L4c2dee.  v4:= v4 + 1;
  #L4c2df2.  goto L4c2dde;
  #L4c2df4.  if v2 >= 0 then goto L4c2dfa;
  #L4c2df8.  return @kind void;
  #L4c2dfa.  v4:= 1I;
  #L4c2dfc.  if v1 != v4 then goto L4c2e06;
  #L4c2e00.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4c2e04.  goto L4c2e24;
  #L4c2e06.  v5:= v1 + -1;
  #L4c2e0a.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v5];
  #L4c2e0e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c2e14.  v3:= v2 + 1;
  #L4c2e18.  v1:= v1 - v2 @kind int;
  #L4c2e1a.  v1:= v1 - v4 @kind int;
  #L4c2e1c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4c2e22.  v1:= v5 @kind object;
  #L4c2e24.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2e28.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c2e2e.  v0:= temp;
  #L4c2e30.  if v0 == 0 then goto L4c2dc0;
  #L4c2e34.  return @kind void;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v7 @kind this, `java.lang.Object` v8 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.j:(Ljava/lang/Object;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c2e78.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c2e7e.  v0:= temp;
  #L4c2e80.  v1:= "Inner queue full?!" @kind object;
  #L4c2e84.  if v0 != 0 then goto L4c2f36;
  #L4c2e88.  v0:= 0I;
  #L4c2e8a.  v2:= 1I;
  #L4c2e8c.  call temp:= `compareAndSet`(v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c2e92.  v0:= temp;
  #L4c2e94.  if v0 == 0 then goto L4c2f36;
  #L4c2e98.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c2e9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c2ea2.  v2:= temp @kind wide;
  #L4c2ea4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c2ea8.  v4:= 0L;
  #L4c2eac.  v6:= lcmp(v2, v4);
  #L4c2eb0.  if v6 == 0 then goto L4c2ef6;
  #L4c2eb4.  if v0 == 0 then goto L4c2ec4;
  #L4c2eb8.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c2ebe.  v4:= temp;
  #L4c2ec0.  if v4 == 0 then goto L4c2ef6;
  #L4c2ec4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c2ec8.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c2ece.  v0:= 9223372036854775807L;
  #L4c2ed8.  v8:= lcmp(v2, v0);
  #L4c2edc.  if v8 == 0 then goto L4c2eea;
  #L4c2ee0.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c2ee4.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4c2eea.  v0:= 1L;
  #L4c2eee.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @kind virtual;
  #L4c2ef4.  goto L4c2f28;
  #L4c2ef6.  if v0 != 0 then goto L4c2f0c;
  #L4c2efa.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4c2efe.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L4c2f02.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4c2f08.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4c2f0c.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c2f12.  v8:= temp;
  #L4c2f14.  if v8 != 0 then goto L4c2f28;
  #L4c2f18.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c2f1c.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c2f22.  call `onError`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c2f28.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c2f2e.  v8:= temp;
  #L4c2f30.  if v8 != 0 then goto L4c2f7c;
  #L4c2f34.  return @kind void;
  #L4c2f36.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4c2f3a.  if v0 != 0 then goto L4c2f50;
  #L4c2f3e.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4c2f42.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L4c2f46.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4c2f4c.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4c2f50.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c2f56.  v8:= temp;
  #L4c2f58.  if v8 != 0 then goto L4c2f6e;
  #L4c2f5c.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c2f60.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c2f66.  call `onError`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c2f6c.  return @kind void;
  #L4c2f6e.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c2f74.  v8:= temp;
  #L4c2f76.  if v8 == 0 then goto L4c2f7c;
  #L4c2f7a.  return @kind void;
  #L4c2f7c.  call `f`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L4c2f82.  return @kind void;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.k:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4c2f94.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c2f9a.  v0:= temp;
  #L4c2f9c.  v1:= "Scalar queue full?!" @kind object;
  #L4c2fa0.  if v0 != 0 then goto L4c3076;
  #L4c2fa4.  v0:= 0I;
  #L4c2fa6.  v2:= 1I;
  #L4c2fa8.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c2fae.  v3:= temp;
  #L4c2fb0.  if v3 == 0 then goto L4c3076;
  #L4c2fb4.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c2fb8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c2fbe.  v3:= temp @kind wide;
  #L4c2fc0.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c2fc4.  v6:= 0L;
  #L4c2fc8.  v8:= lcmp(v3, v6);
  #L4c2fcc.  if v8 == 0 then goto L4c3040;
  #L4c2fd0.  if v5 == 0 then goto L4c2fe0;
  #L4c2fd4.  call temp:= `isEmpty`(v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4c2fda.  v6:= temp;
  #L4c2fdc.  if v6 == 0 then goto L4c3040;
  #L4c2fe0.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c2fe4.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c2fea.  v5:= 9223372036854775807L;
  #L4c2ff4.  v10:= lcmp(v3, v5);
  #L4c2ff8.  if v10 == 0 then goto L4c3006;
  #L4c2ffc.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c3000.  call temp:= `decrementAndGet`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4c3006.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L4c300a.  v1:= 2147483647I;
  #L4c3010.  if v10 == v1 then goto L4c3068;
  #L4c3014.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4c3018.  if v10 != 0 then goto L4c3068;
  #L4c301c.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int`;
  #L4c3020.  v10:= v10 + v2 @kind int;
  #L4c3022.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v10;
  #L4c3026.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int`;
  #L4c302a.  if v10 != v1 then goto L4c3068;
  #L4c302e.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v0;
  #L4c3032.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c3036.  v0:= (`long`) v1 @kind i2l;
  #L4c3038.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c303e.  goto L4c3068;
  #L4c3040.  if v5 != 0 then goto L4c304c;
  #L4c3044.  call temp:= `g`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.g:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4c304a.  v5:= temp @kind object;
  #L4c304c.  call temp:= `offer`(v5, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c3052.  v10:= temp;
  #L4c3054.  if v10 != 0 then goto L4c3068;
  #L4c3058.  v10:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c305c.  call `<init>`(v10, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c3062.  call `onError`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c3068.  call temp:= `decrementAndGet`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c306e.  v10:= temp;
  #L4c3070.  if v10 != 0 then goto L4c30aa;
  #L4c3074.  return @kind void;
  #L4c3076.  call temp:= `g`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.g:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4c307c.  v0:= temp @kind object;
  #L4c307e.  call temp:= `offer`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c3084.  v10:= temp;
  #L4c3086.  if v10 != 0 then goto L4c309c;
  #L4c308a.  v10:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4c308e.  call `<init>`(v10, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c3094.  call `onError`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c309a.  return @kind void;
  #L4c309c.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c30a2.  v10:= temp;
  #L4c30a4.  if v10 == 0 then goto L4c30aa;
  #L4c30a8.  return @kind void;
  #L4c30aa.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L4c30b0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2bb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4c2bb8.  if v0 == 0 then goto L4c2bbe;
  #L4c2bbc.  return @kind void;
  #L4c2bbe.  v0:= 1I;
  #L4c2bc0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4c2bc4.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c2bca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c2bdc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4c2be0.  if v0 == 0 then goto L4c2bec;
  #L4c2be4.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c2bea.  return @kind void;
  #L4c2bec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c2bf0.  call temp:= `tryAddThrowableOrReport`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c2bf6.  v4:= temp;
  #L4c2bf8.  if v4 == 0 then goto L4c2c3c;
  #L4c2bfc.  v4:= 1I;
  #L4c2bfe.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` := v4 @kind boolean;
  #L4c2c02.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4c2c06.  if v4 != 0 then goto L4c2c36;
  #L4c2c0a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c2c0e.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4c2c12.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c2c18.  v4:= temp @kind object;
  #L4c2c1a.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v4 @kind object;
  #L4c2c1e.  v0:= length @variable v4;
  #L4c2c20.  v1:= 0I;
  #L4c2c22.  if v1 >= v0 then goto L4c2c36;
  #L4c2c26.  v2:= v4[v1] @kind object;
  #L4c2c2a.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4c2c30.  v1:= v1 + 1;
  #L4c2c34.  goto L4c2c22;
  #L4c2c36.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c2c3c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c2c50.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4c2c54.  if v0 == 0 then goto L4c2c5a;
  #L4c2c58.  return @kind void;
  #L4c2c5a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c2c5e.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c2c64.  v7:= temp @kind object;
  #L4c2c66.  v0:= "The mapper returned a null Publisher" @kind object;
  #L4c2c6a.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c2c70.  v7:= temp @kind object;
  #L4c2c72.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L4c2c76.  v0:= instanceof @variable v7 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4c2c7a.  if v0 == 0 then goto L4c2cee;
  #L4c2c7e.  v7:= (`io.reactivex.rxjava3.functions.Supplier`) v7 @kind object;
  #L4c2c82.  call temp:= `get`(v7) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4c2c88.  v7:= temp @kind object;
  #L4c2c8a.  if v7 == 0 then goto L4c2c96;
  #L4c2c8e.  call `k`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.k:(Ljava/lang/Object;)V` @kind virtual;
  #L4c2c94.  goto L4c2d1c;
  #L4c2c96.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L4c2c9a.  v0:= 2147483647I;
  #L4c2ca0.  if v7 == v0 then goto L4c2d1c;
  #L4c2ca4.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4c2ca8.  if v7 != 0 then goto L4c2d1c;
  #L4c2cac.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int`;
  #L4c2cb0.  v7:= v7 + 1;
  #L4c2cb4.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v7;
  #L4c2cb8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int`;
  #L4c2cbc.  if v7 != v0 then goto L4c2d1c;
  #L4c2cc0.  v7:= 0I;
  #L4c2cc2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v7;
  #L4c2cc6.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c2cca.  v0:= (`long`) v0 @kind i2l;
  #L4c2ccc.  call `request`(v7, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c2cd2.  goto L4c2d1c;
  #L4c2cd4.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c2cd6.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c2cdc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c2ce0.  call temp:= `tryAddThrowableOrReport`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c2ce6.  call `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c2cec.  return @kind void;
  #L4c2cee.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`;
  #L4c2cf2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L4c2cf6.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.m` @type ^`long` @kind wide;
  #L4c2cfa.  v4:= 1L;
  #L4c2cfe.  v4:= v4 + v2 @kind long;
  #L4c2d00.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.m` @type ^`long` := v4 @kind wide;
  #L4c2d04.  call `<init>`(v0, v6, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;IJ)V` @kind direct;
  #L4c2d0a.  call temp:= `a`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)Z` @kind virtual;
  #L4c2d10.  v1:= temp;
  #L4c2d12.  if v1 == 0 then goto L4c2d1c;
  #L4c2d16.  call `subscribe`(v7, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4c2d1c.  return @kind void;
  #L4c2d1e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c2d20.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c2d26.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c2d2a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4c2d30.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c2d36.  return @kind void;
  catch `java.lang.Throwable` @[L4c2c5a..L4c2c76] goto L4c2d1e;
  catch `java.lang.Throwable` @[L4c2c7e..L4c2c8a] goto L4c2cd4;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c2d60.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c2d64.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4c2d6a.  v0:= temp;
  #L4c2d6c.  if v0 == 0 then goto L4c2dae;
  #L4c2d70.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4c2d74.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c2d78.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c2d7e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4c2d82.  if v0 != 0 then goto L4c2dae;
  #L4c2d86.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L4c2d8a.  v1:= 2147483647I;
  #L4c2d90.  if v0 != v1 then goto L4c2da6;
  #L4c2d94.  v0:= 9223372036854775807L;
  #L4c2d9e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c2da4.  goto L4c2dae;
  #L4c2da6.  v0:= (`long`) v0 @kind i2l;
  #L4c2da8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c2dae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c2e48.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c2e4e.  v0:= temp;
  #L4c2e50.  if v0 == 0 then goto L4c2e64;
  #L4c2e54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c2e58.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c2e5e.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4c2e64.  return @kind void;
}
