record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d96ac.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d96b2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d96b6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4d96ba.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[v4];
  #L4d96be.  v3:= 0I;
  #L4d96c0.  if v3 >= v4 then goto L4d96d8;
  #L4d96c4.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`;
  #L4d96c8.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;I)V` @kind direct;
  #L4d96ce.  v2[v3]:= v0 @kind object;
  #L4d96d2.  v3:= v3 + 1;
  #L4d96d6.  goto L4d96c0;
  #L4d96d8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] := v2 @kind object;
  #L4d96dc.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4d96e0.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4d96e6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L4d96ea.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d96ee.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d96f4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4d96f8.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d96fc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d9702.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4d9706.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d970a.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d9710.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4d9714.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4d9760.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L4d9764.  v1:= 0I;
  #L4d9766.  v2:= length @variable v0;
  #L4d9768.  if v1 >= v2 then goto L4d9780;
  #L4d976c.  if v1 == v4 then goto L4d977a;
  #L4d9770.  v2:= v0[v1] @kind object;
  #L4d9774.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4d977a.  v1:= v1 + 1;
  #L4d977e.  goto L4d9766;
  #L4d9780.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L4d9794.  if v2 != 0 then goto L4d97bc;
  #L4d9798.  v2:= 1I;
  #L4d979a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4d979e.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d97a2.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d97a8.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4d97ae.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d97b2.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d97b6.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d97bc.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4d97d0.  v0:= 1I;
  #L4d97d2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4d97d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d97da.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d97e0.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4d97e6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d97ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d97ee.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d97f4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d9728.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d972c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d9732.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L4d9736.  v1:= length @variable v0;
  #L4d9738.  v2:= 0I;
  #L4d973a.  if v2 >= v1 then goto L4d974e;
  #L4d973e.  v3:= v0[v2] @kind object;
  #L4d9742.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L4d9748.  v2:= v2 + 1;
  #L4d974c.  goto L4d973a;
  #L4d974e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4d9808.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4d980c.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L4d9812.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v5 @kind this, `org.reactivestreams.Publisher`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.e:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d991c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L4d9920.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9924.  v2:= 0I;
  #L4d9926.  if v2 >= v7 then goto L4d9950;
  #L4d992a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d9930.  v3:= temp @kind object;
  #L4d9932.  v4:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4d9936.  if v3 != v4 then goto L4d993c;
  #L4d993a.  return @kind void;
  #L4d993c.  v3:= v6[v2] @kind object;
  #L4d9940.  v4:= v0[v2] @kind object;
  #L4d9944.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d994a.  v2:= v2 + 1;
  #L4d994e.  goto L4d9926;
  #L4d9950.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d9824.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4d9828.  if v0 != 0 then goto L4d9848;
  #L4d982c.  v0:= 1I;
  #L4d982e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4d9832.  v0:= -1I;
  #L4d9834.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4d983a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d983e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9842.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d9848.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d985c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4d9860.  if v0 == 0 then goto L4d986c;
  #L4d9864.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d986a.  return @kind void;
  #L4d986c.  v0:= 1I;
  #L4d986e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4d9872.  v0:= -1I;
  #L4d9874.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4d987a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d987e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d9882.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d9888.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d989c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d98a2.  v3:= temp;
  #L4d98a4.  if v3 != 0 then goto L4d98ca;
  #L4d98a8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4d98ac.  if v3 != 0 then goto L4d98ca;
  #L4d98b0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d98b4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d98ba.  v3:= temp @kind object;
  #L4d98bc.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4d98c0.  v0:= 1L;
  #L4d98c4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d98ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d98dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d98e0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d98e4.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d98ea.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d98fc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d9900.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d9904.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4d990a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d960c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L4d9610.  v1:= 0I;
  #L4d9612.  if v0 == 0 then goto L4d9618;
  #L4d9616.  return v1;
  #L4d9618.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4d961c.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4d9622.  v2:= temp;
  #L4d9624.  v3:= v2 + 1;
  #L4d9628.  v3:= new `java.lang.Object`[v3];
  #L4d962c.  v3[v1]:= v6 @kind object;
  #L4d9630.  v6:= 0I;
  #L4d9632.  if v6 >= v2 then goto L4d964e;
  #L4d9636.  call temp:= `get`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4d963c.  v4:= temp @kind object;
  #L4d963e.  if v4 != 0 then goto L4d9644;
  #L4d9642.  return v1;
  #L4d9644.  v6:= v6 + 1;
  #L4d9648.  v3[v6]:= v4 @kind object;
  #L4d964c.  goto L4d9632;
  #L4d964e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d9652.  call temp:= `apply`(v6, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d9658.  v6:= temp @kind object;
  #L4d965a.  v0:= "The combiner returned a null value" @kind object;
  #L4d965e.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d9664.  v6:= temp @kind object;
  #L4d9666.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d966a.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d966e.  call temp:= `onNext`(v0, v6, v5, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @kind static;
  #L4d9674.  v6:= 1I;
  #L4d9676.  return v6;
  #L4d9678.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d967a.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d9680.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @kind virtual;
  #L4d9686.  call `onError`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d968c.  return v1;
  catch `java.lang.Throwable` @[L4d964e..L4d9666] goto L4d9678;
}
