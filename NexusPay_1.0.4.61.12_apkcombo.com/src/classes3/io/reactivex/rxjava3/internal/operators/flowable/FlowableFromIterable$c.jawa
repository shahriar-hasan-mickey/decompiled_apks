record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c5b84.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L4c5b8a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4c5b8e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c5ba0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4c5ba4.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c5ba8.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5bac.  if v2 == 0 then goto L4c5bb2;
  #L4c5bb0.  return @kind void;
  #L4c5bb2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c5bb8.  v2:= temp @kind object;
  #L4c5bba.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5bbe.  if v3 == 0 then goto L4c5bc4;
  #L4c5bc2.  return @kind void;
  #L4c5bc4.  if v2 != 0 then goto L4c5bde;
  #L4c5bc8.  v0:= new `java.lang.NullPointerException`;
  #L4c5bcc.  v2:= "Iterator.next() returned a null value" @kind object;
  #L4c5bd0.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5bd6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5bdc.  return @kind void;
  #L4c5bde.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c5be4.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5be8.  if v2 == 0 then goto L4c5bee;
  #L4c5bec.  return @kind void;
  #L4c5bee.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c5bf4.  v2:= temp;
  #L4c5bf6.  if v2 != 0 then goto L4c5ba8;
  #L4c5bfa.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5bfe.  if v0 != 0 then goto L4c5c08;
  #L4c5c02.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c5c08.  return @kind void;
  #L4c5c0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5c0c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5c12.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5c18.  return @kind void;
  #L4c5c1a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5c1c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5c22.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5c28.  return @kind void;
  catch `java.lang.Throwable` @[L4c5bb2..L4c5bba] goto L4c5c1a;
  catch `java.lang.Throwable` @[L4c5bee..L4c5bf6] goto L4c5c0a;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$c;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c5c54.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L4c5c58.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c5c5c.  v2:= 0L;
  #L4c5c60.  v4:= v2 @kind wide;
  #L4c5c62.  v6:= lcmp(v4, v9);
  #L4c5c66.  if v6 == 0 then goto L4c5cf4;
  #L4c5c6a.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5c6e.  if v6 == 0 then goto L4c5c74;
  #L4c5c72.  return @kind void;
  #L4c5c74.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c5c7a.  v6:= temp @kind object;
  #L4c5c7c.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5c80.  if v7 == 0 then goto L4c5c86;
  #L4c5c84.  return @kind void;
  #L4c5c86.  if v6 != 0 then goto L4c5ca0;
  #L4c5c8a.  v9:= new `java.lang.NullPointerException`;
  #L4c5c8e.  v10:= "Iterator.next() returned a null value" @kind object;
  #L4c5c92.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c5c98.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5c9e.  return @kind void;
  #L4c5ca0.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c5ca6.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5caa.  if v6 == 0 then goto L4c5cb0;
  #L4c5cae.  return @kind void;
  #L4c5cb0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c5cb6.  v6:= temp;
  #L4c5cb8.  if v6 != 0 then goto L4c5ccc;
  #L4c5cbc.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4c5cc0.  if v9 != 0 then goto L4c5cca;
  #L4c5cc4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c5cca.  return @kind void;
  #L4c5ccc.  v6:= 1L;
  #L4c5cd0.  v4:= v4 + v6 @kind long;
  #L4c5cd2.  goto L4c5c62;
  #L4c5cd4.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5cd6.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5cdc.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5ce2.  return @kind void;
  #L4c5ce4.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c5ce6.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5cec.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c5cf2.  return @kind void;
  #L4c5cf4.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c5cfa.  v9:= temp @kind wide;
  #L4c5cfc.  v6:= lcmp(v4, v9);
  #L4c5d00.  if v6 != 0 then goto L4c5c62;
  #L4c5d04.  v9:= -v4 @kind long;
  #L4c5d06.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4c5d0c.  v9:= temp @kind wide;
  #L4c5d0e.  v4:= lcmp(v9, v2);
  #L4c5d12.  if v4 != 0 then goto L4c5c60;
  #L4c5d16.  return @kind void;
  catch `java.lang.Throwable` @[L4c5c74..L4c5c7c] goto L4c5ce4;
  catch `java.lang.Throwable` @[L4c5cb0..L4c5cb8] goto L4c5cd4;
}
