record `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L509184.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L50918a.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` := v1 @kind object;
  #L50918e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L5091a0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L5091a6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5091b8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5091be.  v0:= temp @kind object;
  #L5091c0.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L5091c4.  if v0 == v1 then goto L5091e2;
  #L5091c8.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L5091ce.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L5091d2.  v1:= new `java.util.concurrent.CancellationException`;
  #L5091d6.  call `<init>`(v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L5091dc.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5091e2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5091f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L5091f8.  call `a`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5091fe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509210.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L509216.  v2:= temp;
  #L509218.  if v2 == 0 then goto L509230;
  #L50921c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L509220.  v0:= new `java.util.concurrent.CancellationException`;
  #L509224.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L50922a.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L509230.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509244.  v0:= 9223372036854775807L;
  #L50924e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L509254.  return @kind void;
}
