record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5033fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L503402.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L503406.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L50340a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L50340e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503420.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L503424.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L50342a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50343c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L503440.  if v0 == 0 then goto L503446;
  #L503444.  return @kind void;
  #L503446.  v0:= 1I;
  #L503448.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L50344c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L503450.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L503456.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503468.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L50346c.  if v0 == 0 then goto L503478;
  #L503470.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L503476.  return @kind void;
  #L503478.  v0:= 1I;
  #L50347a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L50347e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L503482.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L503488.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50349c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L5034a2.  v3:= temp;
  #L5034a4.  if v3 != 0 then goto L5034be;
  #L5034a8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L5034ac.  if v3 != 0 then goto L5034be;
  #L5034b0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5034b4.  v0:= 1L;
  #L5034b8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L5034be.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5034d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L5034d4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L5034da.  v0:= temp;
  #L5034dc.  if v0 == 0 then goto L5034ee;
  #L5034e0.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L5034e4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L5034e8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L5034ee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L503500.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L503504.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L50350a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L503300.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L503304.  v1:= 0I;
  #L503306.  if v0 == 0 then goto L50330c;
  #L50330a.  return v1;
  #L50330c.  v2:= 0L;
  #L503310.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L503314.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50331a.  v0:= temp @kind object;
  #L50331c.  v4:= "The mapper returned a null value" @kind object;
  #L503320.  call temp:= `requireNonNull`(v0, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L503326.  v10:= temp @kind object;
  #L503328.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L50332c.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L503332.  v10:= temp;
  #L503334.  return v10;
  #L503336.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L503338.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L50333e.  v4:= 1I;
  #L503340.  v5:= 2I;
  #L503342.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L503346.  v7:= 1L;
  #L50334a.  v2:= v2 + v7 @kind long;
  #L50334c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L503352.  v7:= temp @kind object;
  #L503354.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50335a.  v6:= temp @kind object;
  #L50335c.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L503360.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L503366.  v6:= temp @kind object;
  #L503368.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L50336c.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L503370.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L503376.  v6:= temp;
  #L503378.  v6:= v7[v6];
  #L50337c.  if v6 == v4 then goto L503310;
  #L503380.  if v6 == v5 then goto L5033a4;
  #L503384.  v10:= 3I;
  #L503386.  if v6 == v10 then goto L503398;
  #L50338a.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L503390.  call `onError`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L503396.  return v1;
  #L503398.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L50339e.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @kind virtual;
  #L5033a4.  return v1;
  #L5033a6.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5033a8.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L5033ae.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L5033b4.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L5033b8.  v3:= new `java.lang.Throwable`[v5];
  #L5033bc.  v3[v1]:= v0 @kind object;
  #L5033c0.  v3[v4]:= v10 @kind object;
  #L5033c4.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L5033ca.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5033d0.  return v1;
  catch `java.lang.Throwable` @[L503310..L503328] goto L503336;
  catch `java.lang.Throwable` @[L503342..L50336c] goto L5033a6;
}
