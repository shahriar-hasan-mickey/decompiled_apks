record `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;ILio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e7798.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e779e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` := v1 @kind object;
  #L4e77a2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int` := v2;
  #L4e77a6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` := v3 @kind object;
  #L4e77aa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4e77bc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e77c2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e77d4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4e77d8.  if v0 == 0 then goto L4e77e8;
  #L4e77dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e77e0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4e77e6.  goto L4e780c;
  #L4e77e8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4e77ec.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4e77f0.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4e77f6.  v0:= temp;
  #L4e77f8.  if v0 == 0 then goto L4e780c;
  #L4e77fc.  v0:= 1I;
  #L4e77fe.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4e7802.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e7806.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4e780c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e7820.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4e7824.  if v0 == 0 then goto L4e7834;
  #L4e7828.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e782c.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e7832.  goto L4e7860;
  #L4e7834.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4e7838.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4e783c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4e7842.  v0:= temp;
  #L4e7844.  if v0 == 0 then goto L4e785a;
  #L4e7848.  v0:= 1I;
  #L4e784a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4e784e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e7852.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4e7858.  goto L4e7860;
  #L4e785a.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4e7860.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e7874.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4e7878.  if v0 == 0 then goto L4e7888;
  #L4e787c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e7880.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e7886.  goto L4e78c0;
  #L4e7888.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4e788c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4e7890.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4e7896.  v0:= temp;
  #L4e7898.  if v0 == 0 then goto L4e78ae;
  #L4e789c.  v0:= 1I;
  #L4e789e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4e78a2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4e78a6.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4e78ac.  goto L4e78c0;
  #L4e78ae.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e78b4.  v3:= temp @kind object;
  #L4e78b6.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4e78ba.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4e78c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableAmb$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4e78d4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4e78da.  return @kind void;
}
