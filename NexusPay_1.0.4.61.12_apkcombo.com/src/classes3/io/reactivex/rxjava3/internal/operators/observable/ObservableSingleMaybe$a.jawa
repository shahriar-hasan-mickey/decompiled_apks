record `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9dfc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f9e02.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4f9e06.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9e18.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9e1c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f9e22.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9ddc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9de0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4f9de6.  v0:= temp;
  #L4f9de8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f9e34.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L4f9e38.  if v0 == 0 then goto L4f9e3e;
  #L4f9e3c.  return @kind void;
  #L4f9e3e.  v0:= 1I;
  #L4f9e40.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4f9e44.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L4f9e48.  v1:= 0I;
  #L4f9e4a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4f9e4e.  if v0 != 0 then goto L4f9e5e;
  #L4f9e52.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f9e56.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4f9e5c.  goto L4f9e68;
  #L4f9e5e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f9e62.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f9e68.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9e7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L4f9e80.  if v0 == 0 then goto L4f9e8c;
  #L4f9e84.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f9e8a.  return @kind void;
  #L4f9e8c.  v0:= 1I;
  #L4f9e8e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4f9e92.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f9e96.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f9e9c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f9eb0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L4f9eb4.  if v0 == 0 then goto L4f9eba;
  #L4f9eb8.  return @kind void;
  #L4f9eba.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L4f9ebe.  if v0 == 0 then goto L4f9eec;
  #L4f9ec2.  v3:= 1I;
  #L4f9ec4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4f9ec8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9ecc.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f9ed2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f9ed6.  v0:= new `java.lang.IllegalArgumentException`;
  #L4f9eda.  v1:= "Sequence contains more than one element!" @kind object;
  #L4f9ede.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f9ee4.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f9eea.  return @kind void;
  #L4f9eec.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4f9ef0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9f04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4f9f08.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4f9f0e.  v0:= temp;
  #L4f9f10.  if v0 == 0 then goto L4f9f22;
  #L4f9f14.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4f9f18.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f9f1c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f9f22.  return @kind void;
}
