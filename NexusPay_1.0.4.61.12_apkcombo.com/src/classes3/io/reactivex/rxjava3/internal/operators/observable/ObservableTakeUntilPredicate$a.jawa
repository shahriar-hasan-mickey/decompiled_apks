record `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fbc0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fbc12.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4fbc16.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4fbc1a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbc2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbc30.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fbc36.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbbec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbbf0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4fbbf6.  v0:= temp;
  #L4fbbf8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbc48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4fbc4c.  if v0 != 0 then goto L4fbc60;
  #L4fbc50.  v0:= 1I;
  #L4fbc52.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4fbc56.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbc5a.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fbc60.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbc74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4fbc78.  if v0 != 0 then goto L4fbc8e;
  #L4fbc7c.  v0:= 1I;
  #L4fbc7e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4fbc82.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbc86.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4fbc8c.  goto L4fbc94;
  #L4fbc8e.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4fbc94.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbca8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4fbcac.  if v0 != 0 then goto L4fbcfe;
  #L4fbcb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbcb4.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4fbcba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4fbcbe.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4fbcc4.  v2:= temp;
  #L4fbcc6.  if v2 == 0 then goto L4fbcfe;
  #L4fbcca.  v2:= 1I;
  #L4fbccc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4fbcd0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbcd4.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fbcda.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbcde.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4fbce4.  goto L4fbcfe;
  #L4fbce6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fbce8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4fbcee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbcf2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4fbcf8.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4fbcfe.  return @kind void;
  catch `java.lang.Throwable` @[L4fbcba..L4fbcc6] goto L4fbce6;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTakeUntilPredicate$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fbd1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4fbd20.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4fbd26.  v0:= temp;
  #L4fbd28.  if v0 == 0 then goto L4fbd3a;
  #L4fbd2c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4fbd30.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4fbd34.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4fbd3a.  return @kind void;
}
