record `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` v2 @kind object, `int` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b8b44.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b8b4a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b8b4e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b8b54.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4b8b58.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` := v2 @kind object;
  #L4b8b5c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int` := v3;
  #L4b8b60.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L4b8b64.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4b8b78.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b8b7e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b8b90.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4b8b94.  if v0 == 0 then goto L4b8ba4;
  #L4b8b98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8b9c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b8ba2.  goto L4b8bdc;
  #L4b8ba4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L4b8ba8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L4b8bac.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L4b8bb2.  v0:= temp;
  #L4b8bb4.  if v0 == 0 then goto L4b8bca;
  #L4b8bb8.  v0:= 1I;
  #L4b8bba.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4b8bbe.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8bc2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b8bc8.  goto L4b8bdc;
  #L4b8bca.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b8bd0.  v0:= temp @kind object;
  #L4b8bd2.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4b8bd6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b8bdc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b8bf0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4b8bf4.  if v0 == 0 then goto L4b8c04;
  #L4b8bf8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8bfc.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b8c02.  goto L4b8c42;
  #L4b8c04.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L4b8c08.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L4b8c0c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L4b8c12.  v0:= temp;
  #L4b8c14.  if v0 == 0 then goto L4b8c2a;
  #L4b8c18.  v0:= 1I;
  #L4b8c1a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4b8c1e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8c22.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b8c28.  goto L4b8c42;
  #L4b8c2a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b8c30.  v0:= temp @kind object;
  #L4b8c32.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4b8c36.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b8c3c.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b8c42.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b8c54.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4b8c58.  if v0 == 0 then goto L4b8c68;
  #L4b8c5c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8c60.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b8c66.  goto L4b8ca0;
  #L4b8c68.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L4b8c6c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L4b8c70.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L4b8c76.  v0:= temp;
  #L4b8c78.  if v0 == 0 then goto L4b8c8e;
  #L4b8c7c.  v0:= 1I;
  #L4b8c7e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4b8c82.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b8c86.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b8c8c.  goto L4b8ca0;
  #L4b8c8e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b8c94.  v3:= temp @kind object;
  #L4b8c96.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4b8c9a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b8ca0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8cb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b8cb8.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b8cbe.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b8cd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b8cd4.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4b8cda.  return @kind void;
}
