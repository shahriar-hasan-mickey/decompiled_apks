record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.o` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d7bcc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d7bd2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d7bd6.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4d7bda.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4d7be0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4d7be4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4d7be8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4d7bec.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`int` := v4;
  #L4d7bf0.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4d7bf4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4d7bfa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4d7bfe.  v1:= new `java.util.ArrayList`;
  #L4d7c02.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4d7c08.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` := v1 @kind object;
  #L4d7c0c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d7c10.  v2:= 1L;
  #L4d7c14.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4d7c1a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d7c1e.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4d7c22.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4d7c28.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4d7c2c.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d7c30.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d7c36.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4d7c3a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c`;
  #L4d7c3e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @kind direct;
  #L4d7c44.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` := v1 @kind object;
  #L4d7c48.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d7c4c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d7c52.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d7c56.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4d7ce4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d7ce8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d7cee.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d7cf4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4d7d08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7d0c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d7d12.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7d16.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7d1c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7d20.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d7d26.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d7d2a.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d7d30.  v2:= temp;
  #L4d7d32.  if v2 == 0 then goto L4d7d42;
  #L4d7d36.  v2:= 1I;
  #L4d7d38.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v2 @kind boolean;
  #L4d7d3c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d7d42.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4d7d54.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d7d5a.  v0:= temp;
  #L4d7d5c.  if v0 == 0 then goto L4d7d62;
  #L4d7d60.  return @kind void;
  #L4d7d62.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d7d66.  v1:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d7d6a.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4d7d6e.  v3:= 1I;
  #L4d7d70.  v4:= 1I;
  #L4d7d72.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` @kind boolean;
  #L4d7d76.  if v5 == 0 then goto L4d7d8a;
  #L4d7d7a.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d7d80.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4d7d86.  goto L4d7f92;
  #L4d7d8a.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` @kind boolean;
  #L4d7d8e.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d7d94.  v6:= temp @kind object;
  #L4d7d96.  if v6 != 0 then goto L4d7d9e;
  #L4d7d9a.  v7:= 1I;
  #L4d7d9c.  goto L4d7da0;
  #L4d7d9e.  v7:= 0I;
  #L4d7da0.  if v5 == 0 then goto L4d7dc4;
  #L4d7da4.  if v7 != 0 then goto L4d7db8;
  #L4d7da8.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d7dac.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d7db2.  v5:= temp @kind object;
  #L4d7db4.  if v5 == 0 then goto L4d7dc4;
  #L4d7db8.  call `g`(v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.g:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d7dbe.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v3 @kind boolean;
  #L4d7dc2.  goto L4d7d72;
  #L4d7dc4.  if v7 != 0 then goto L4d7f52;
  #L4d7dc8.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b` @kind boolean;
  #L4d7dcc.  if v5 == 0 then goto L4d7efa;
  #L4d7dd0.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d7dd4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d7dda.  v5:= temp;
  #L4d7ddc.  if v5 != 0 then goto L4d7d72;
  #L4d7de0.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.l` @type ^`long` @kind wide;
  #L4d7de4.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d7de8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d7dee.  v9:= temp @kind wide;
  #L4d7df0.  v5:= lcmp(v9, v7);
  #L4d7df4.  if v5 == 0 then goto L4d7eb8;
  #L4d7df8.  v9:= 1L;
  #L4d7dfc.  v7:= v7 + v9 @kind long;
  #L4d7dfe.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.l` @type ^`long` := v7 @kind wide;
  #L4d7e02.  v6:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b`) v6 @kind object;
  #L4d7e06.  v5:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b.a` @type ^`java.lang.Object` @kind object;
  #L4d7e0a.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d7e0e.  call temp:= `apply`(v6, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d7e14.  v5:= temp @kind object;
  #L4d7e16.  v6:= "The closingIndicator returned a null Publisher" @kind object;
  #L4d7e1a.  call temp:= `requireNonNull`(v5, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d7e20.  v5:= temp @kind object;
  #L4d7e22.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L4d7e26.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d7e2a.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4d7e30.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`int`;
  #L4d7e34.  call temp:= `create`(v6, v11) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4d7e3a.  v6:= temp @kind object;
  #L4d7e3c.  v7:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a`;
  #L4d7e40.  call `<init>`(v7, v11, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;Lio/reactivex/rxjava3/processors/UnicastProcessor;)V` @kind direct;
  #L4d7e46.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d7e4c.  call temp:= `e`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.e:()Z` @kind virtual;
  #L4d7e52.  v8:= temp;
  #L4d7e54.  if v8 == 0 then goto L4d7e60;
  #L4d7e58.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d7e5e.  goto L4d7d72;
  #L4d7e60.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4d7e66.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7e6a.  call temp:= `add`(v6, v7) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d7e70.  call `subscribe`(v5, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d7e76.  goto L4d7d72;
  #L4d7e7a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d7e7c.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d7e82.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7e86.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d7e8c.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7e90.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7e96.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7e9a.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d7ea0.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d7ea6.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d7eaa.  call temp:= `tryAddThrowableOrReport`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d7eb0.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v3 @kind boolean;
  #L4d7eb4.  goto L4d7d72;
  #L4d7eb8.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7ebc.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d7ec2.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7ec6.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7ecc.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7ed0.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d7ed6.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d7eda.  v6:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d7ede.  call temp:= `e`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4d7ee4.  v7:= temp @kind object;
  #L4d7ee6.  call `<init>`(v6, v7) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d7eec.  call temp:= `tryAddThrowableOrReport`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d7ef2.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v3 @kind boolean;
  #L4d7ef6.  goto L4d7d72;
  #L4d7efa.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` @kind boolean;
  #L4d7efe.  if v5 == 0 then goto L4d7f2a;
  #L4d7f02.  v5:= v6 @kind object;
  #L4d7f04.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a`) v5 @kind object;
  #L4d7f08.  v5:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.c` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4d7f0c.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4d7f12.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7f16.  v6:= (`io.reactivex.rxjava3.disposables.Disposable`) v6 @kind object;
  #L4d7f1a.  call temp:= `delete`(v7, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4d7f20.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d7f26.  goto L4d7d72;
  #L4d7f2a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d7f30.  v5:= temp @kind object;
  #L4d7f32.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d7f38.  v7:= temp;
  #L4d7f3a.  if v7 == 0 then goto L4d7d72;
  #L4d7f3e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d7f44.  v7:= temp @kind object;
  #L4d7f46.  v7:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v7 @kind object;
  #L4d7f4a.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4d7f50.  goto L4d7f32;
  #L4d7f52.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.o` @type ^`boolean` @kind boolean;
  #L4d7f56.  if v5 == 0 then goto L4d7f92;
  #L4d7f5a.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4d7f60.  v5:= temp;
  #L4d7f62.  if v5 != 0 then goto L4d7f92;
  #L4d7f66.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7f6a.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d7f70.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7f74.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7f7a.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7f7e.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d7f84.  call `g`(v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.g:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d7f8a.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v3 @kind boolean;
  #L4d7f8e.  goto L4d7d72;
  #L4d7f92.  v4:= -v4 @kind int;
  #L4d7f94.  call temp:= `addAndGet`(v11, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d7f9a.  v4:= temp;
  #L4d7f9c.  if v4 != 0 then goto L4d7d72;
  #L4d7fa0.  return @kind void;
  catch `java.lang.Throwable` @[L4d7e0a..L4d7e26] goto L4d7e7a;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d7c68.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d7c6c.  v1:= 0I;
  #L4d7c6e.  v2:= 1I;
  #L4d7c70.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d7c76.  v0:= temp;
  #L4d7c78.  if v0 == 0 then goto L4d7cd2;
  #L4d7c7c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d7c80.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4d7c86.  v0:= temp @kind wide;
  #L4d7c88.  v3:= 0L;
  #L4d7c8c.  v5:= lcmp(v0, v3);
  #L4d7c90.  if v5 != 0 then goto L4d7cc8;
  #L4d7c94.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d7c98.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d7c9e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7ca2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7ca8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7cac.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d7cb2.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d7cb6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4d7cbc.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v2 @kind boolean;
  #L4d7cc0.  call `c`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d7cc6.  goto L4d7cd2;
  #L4d7cc8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7ccc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7cd2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d80ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d80b0.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b`;
  #L4d80b4.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4d80ba.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d80c0.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d80c6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4d80d8.  v0:= 1I;
  #L4d80da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.o` @type ^`boolean` := v0 @kind boolean;
  #L4d80de.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d80e4.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.f:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4d80f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d80fc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d8102.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d8106.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d810c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d8110.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d8116.  v2:= temp;
  #L4d8118.  if v2 == 0 then goto L4d8128;
  #L4d811c.  v2:= 1I;
  #L4d811e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v2 @kind boolean;
  #L4d8122.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d8128.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.g:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4d81c4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d81c8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4d81ce.  v0:= temp @kind object;
  #L4d81d0.  if v0 != 0 then goto L4d8208;
  #L4d81d4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4d81d8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d81de.  v0:= temp @kind object;
  #L4d81e0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d81e6.  v1:= temp;
  #L4d81e8.  if v1 == 0 then goto L4d8200;
  #L4d81ec.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d81f2.  v1:= temp @kind object;
  #L4d81f4.  v1:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v1 @kind object;
  #L4d81f8.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4d81fe.  goto L4d81e0;
  #L4d8200.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d8206.  goto L4d8242;
  #L4d8208.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4d820c.  if v0 == v1 then goto L4d8242;
  #L4d8210.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4d8214.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d821a.  v1:= temp @kind object;
  #L4d821c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d8222.  v2:= temp;
  #L4d8224.  if v2 == 0 then goto L4d823c;
  #L4d8228.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d822e.  v2:= temp @kind object;
  #L4d8230.  v2:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v2 @kind object;
  #L4d8234.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d823a.  goto L4d821c;
  #L4d823c.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8242.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7fc0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7fc4.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7fca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d7fce.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d7fd4.  v0:= 1I;
  #L4d7fd6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v0 @kind boolean;
  #L4d7fda.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d7fe0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7ff4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d7ff8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d7ffe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d8002.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d8008.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d800c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d8012.  v2:= temp;
  #L4d8014.  if v2 == 0 then goto L4d8024;
  #L4d8018.  v2:= 1I;
  #L4d801a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v2 @kind boolean;
  #L4d801e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d8024.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d8038.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d803c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d8042.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d8048.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d805c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8060.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d8066.  v0:= temp;
  #L4d8068.  if v0 == 0 then goto L4d8098;
  #L4d806c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4d8070.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d8074.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d807a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4d807e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d8082.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d8088.  v0:= 9223372036854775807L;
  #L4d8092.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d8098.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d813c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d8142.  v0:= temp;
  #L4d8144.  if v0 == 0 then goto L4d8152;
  #L4d8148.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d814c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d8152.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d8164.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d8168.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4d816e.  v0:= temp @kind wide;
  #L4d8170.  v2:= 0L;
  #L4d8174.  v4:= lcmp(v0, v2);
  #L4d8178.  if v4 != 0 then goto L4d81b0;
  #L4d817c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d8180.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d8186.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4d818a.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4d8190.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4d8194.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4d819a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d819e.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4d81a4.  v0:= 1I;
  #L4d81a6.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4d81aa.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4d81b0.  return @kind void;
}
