record `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L502ba0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L502ba6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L502bb8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L502bbe.  v0:= temp;
  #L502bc0.  if v0 == 0 then goto L502bc6;
  #L502bc4.  return @kind void;
  #L502bc6.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L502bcc.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502d6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502d70.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L502d76.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L502d7c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L502d90.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502d94.  v1:= 0I;
  #L502d96.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L502d9c.  v0:= temp;
  #L502d9e.  if v0 == 0 then goto L502db0;
  #L502da2.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L502da8.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L502dae.  goto L502dc6;
  #L502db0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502db4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L502dba.  v0:= temp @kind object;
  #L502dbc.  if v3 == v0 then goto L502dc6;
  #L502dc0.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L502dc6.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.f:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L502dd8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L502dde.  v0:= temp;
  #L502de0.  v1:= "Queue full?!" @kind object;
  #L502de4.  if v0 != 0 then goto L502ea6;
  #L502de8.  v0:= 0I;
  #L502dea.  v2:= 1I;
  #L502dec.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L502df2.  v0:= temp;
  #L502df4.  if v0 == 0 then goto L502ea6;
  #L502df8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502dfc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L502e02.  v2:= temp @kind wide;
  #L502e04.  v4:= 0L;
  #L502e08.  v0:= lcmp(v2, v4);
  #L502e0c.  if v0 == 0 then goto L502e4e;
  #L502e10.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L502e14.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L502e1a.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502e1e.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L502e24.  v0:= temp @kind wide;
  #L502e26.  v2:= 9223372036854775807L;
  #L502e30.  v8:= lcmp(v0, v2);
  #L502e34.  if v8 == 0 then goto L502e42;
  #L502e38.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502e3c.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L502e42.  v0:= 1L;
  #L502e46.  call `c`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L502e4c.  goto L502e98;
  #L502e4e.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L502e54.  v7:= temp @kind object;
  #L502e56.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L502e5c.  v7:= temp;
  #L502e5e.  if v7 != 0 then goto L502e98;
  #L502e62.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L502e68.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L502e6c.  call `<init>`(v7, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L502e72.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502e76.  v0:= 0I;
  #L502e78.  call temp:= `compareAndSet`(v8, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L502e7e.  v8:= temp;
  #L502e80.  if v8 == 0 then goto L502e90;
  #L502e84.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L502e88.  call `onError`(v8, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L502e8e.  goto L502e96;
  #L502e90.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L502e96.  return @kind void;
  #L502e98.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L502e9e.  v7:= temp;
  #L502ea0.  if v7 != 0 then goto L502ee0;
  #L502ea4.  return @kind void;
  #L502ea6.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L502eac.  v7:= temp @kind object;
  #L502eae.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L502eb4.  v7:= temp;
  #L502eb6.  if v7 != 0 then goto L502ed2;
  #L502eba.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L502ec0.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L502ec4.  call `<init>`(v7, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L502eca.  call `e`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L502ed0.  return @kind void;
  #L502ed2.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L502ed8.  v7:= temp;
  #L502eda.  if v7 == 0 then goto L502ee0;
  #L502ede.  return @kind void;
  #L502ee0.  call `g`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L502ee6.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L502be0.  v0:= v18 @kind object;
  #L502be4.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L502be8.  v2:= length @variable v1;
  #L502bea.  v3:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L502bee.  v5:= 1I;
  #L502bf0.  v6:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502bf4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L502bfa.  v6:= temp @kind wide;
  #L502bfc.  v8:= 0L;
  #L502c00.  v10:= v8 @kind wide;
  #L502c02.  v13:= lcmp(v10, v6);
  #L502c06.  if v13 == 0 then goto L502cae;
  #L502c0a.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L502c0e.  if v13 == 0 then goto L502c1a;
  #L502c12.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L502c18.  return @kind void;
  #L502c1a.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502c1e.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L502c24.  v13:= temp @kind object;
  #L502c26.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L502c2a.  if v13 == 0 then goto L502c3c;
  #L502c2e.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L502c34.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L502c3a.  return @kind void;
  #L502c3c.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502c40.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L502c46.  v13:= temp;
  #L502c48.  if v13 != 0 then goto L502c50;
  #L502c4c.  v13:= 1I;
  #L502c4e.  goto L502c52;
  #L502c50.  v13:= 0I;
  #L502c52.  v14:= 0I;
  #L502c54.  v15:= 1I;
  #L502c56.  v4:= length @variable v1;
  #L502c58.  if v14 >= v4 then goto L502c9a;
  #L502c5c.  v4:= v1[v14] @kind object;
  #L502c60.  v12:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L502c64.  if v12 == 0 then goto L502c94;
  #L502c68.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L502c6e.  v12:= temp @kind object;
  #L502c70.  if v12 == 0 then goto L502c94;
  #L502c74.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L502c7a.  call `d`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L502c80.  v16:= 1L;
  #L502c84.  v10:= v10 + v16 @kind long;
  #L502c88.  v4:= lcmp(v10, v6);
  #L502c8c.  if v4 != 0 then goto L502c92;
  #L502c90.  goto L502cae;
  #L502c92.  v15:= 0I;
  #L502c94.  v14:= v14 + 1;
  #L502c98.  goto L502c56;
  #L502c9a.  if v13 == 0 then goto L502caa;
  #L502c9e.  if v15 == 0 then goto L502caa;
  #L502ca2.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L502ca8.  return @kind void;
  #L502caa.  if v15 == 0 then goto L502c02;
  #L502cae.  v4:= lcmp(v10, v6);
  #L502cb2.  if v4 != 0 then goto L502d38;
  #L502cb6.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L502cba.  if v4 == 0 then goto L502cc6;
  #L502cbe.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L502cc4.  return @kind void;
  #L502cc6.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L502cca.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L502cd0.  v4:= temp @kind object;
  #L502cd2.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L502cd6.  if v4 == 0 then goto L502ce8;
  #L502cda.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L502ce0.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L502ce6.  return @kind void;
  #L502ce8.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502cec.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L502cf2.  v4:= temp;
  #L502cf4.  if v4 != 0 then goto L502cfc;
  #L502cf8.  v4:= 1I;
  #L502cfa.  goto L502cfe;
  #L502cfc.  v4:= 0I;
  #L502cfe.  v6:= 0I;
  #L502d00.  if v6 >= v2 then goto L502d26;
  #L502d04.  v7:= v1[v6] @kind object;
  #L502d08.  v7:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L502d0c.  if v7 == 0 then goto L502d20;
  #L502d10.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L502d16.  v7:= temp;
  #L502d18.  if v7 != 0 then goto L502d20;
  #L502d1c.  v12:= 0I;
  #L502d1e.  goto L502d28;
  #L502d20.  v6:= v6 + 1;
  #L502d24.  goto L502d00;
  #L502d26.  v12:= 1I;
  #L502d28.  if v4 == 0 then goto L502d38;
  #L502d2c.  if v12 == 0 then goto L502d38;
  #L502d30.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L502d36.  return @kind void;
  #L502d38.  v4:= lcmp(v10, v8);
  #L502d3c.  if v4 == 0 then goto L502d4a;
  #L502d40.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L502d44.  call temp:= `produced`(v4, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L502d4a.  v4:= -v5 @kind int;
  #L502d4c.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L502d52.  v5:= temp;
  #L502d54.  if v5 != 0 then goto L502bf0;
  #L502d58.  return @kind void;
}
