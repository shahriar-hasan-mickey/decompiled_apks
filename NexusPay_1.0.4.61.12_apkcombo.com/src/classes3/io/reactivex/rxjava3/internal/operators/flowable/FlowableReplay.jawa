record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind class, `io.reactivex.rxjava3.internal.fuseable.HasUpstreamPublisher` @kind interface {
  `io.reactivex.rxjava3.core.Flowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.d` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.e` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.functions.Supplier` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4d02d4.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$b`;
  #L4d02d8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$b;.<init>:()V` @kind direct;
  #L4d02de.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.f` @type ^`io.reactivex.rxjava3.functions.Supplier` := v0 @kind object;
  #L4d02e2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.rxjava3.core.Flowable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/core/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4d02f4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L4d02fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4d02fe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.rxjava3.core.Flowable` := v2 @kind object;
  #L4d0302.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4d0306.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.d` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4d030a.  return @kind void;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `create`(`io.reactivex.rxjava3.core.Flowable` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;IZ)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4d01d0.  v0:= 2147483647I;
  #L4d01d6.  if v2 != v0 then goto L4d01e4;
  #L4d01da.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L4d01e0.  v1:= temp @kind object;
  #L4d01e2.  return v1 @kind object;
  #L4d01e4.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$g`;
  #L4d01e8.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$g;.<init>:(IZ)V` @kind direct;
  #L4d01ee.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L4d01f4.  v1:= temp @kind object;
  #L4d01f6.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `create`(`io.reactivex.rxjava3.core.Flowable` v8 @kind object, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.rxjava3.core.Scheduler` v12 @kind object, `int` v13 , `boolean` v14 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4d026c.  v7:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$j`;
  #L4d0270.  v0:= v7 @kind object;
  #L4d0272.  v1:= v13;
  #L4d0274.  v2:= v9 @kind wide;
  #L4d0276.  v4:= v11 @kind object;
  #L4d0278.  v5:= v12 @kind object;
  #L4d027a.  v6:= v14;
  #L4d027c.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$j;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L4d0282.  call temp:= `e`(v8, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L4d0288.  v8:= temp @kind object;
  #L4d028a.  return v8 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `create`(`io.reactivex.rxjava3.core.Flowable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d0240.  v5:= 2147483647I;
  #L4d0246.  v0:= v7 @kind object;
  #L4d0248.  v1:= v8 @kind wide;
  #L4d024a.  v3:= v10 @kind object;
  #L4d024c.  v4:= v11 @kind object;
  #L4d024e.  v6:= v12;
  #L4d0250.  call temp:= `create`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/rxjava3/core/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;IZ)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L4d0256.  v7:= temp @kind object;
  #L4d0258.  return v7 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `createFrom`(`io.reactivex.rxjava3.core.Flowable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4d029c.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.f` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4d02a0.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L4d02a6.  v1:= temp @kind object;
  #L4d02a8.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.flowables.ConnectableFlowable` `e`(`io.reactivex.rxjava3.core.Flowable` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.e:(Lio/reactivex/rxjava3/core/Flowable;Lio/reactivex/rxjava3/functions/Supplier;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4d0208.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d020c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d0212.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$h`;
  #L4d0216.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$h;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L4d021c.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay`;
  #L4d0220.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/core/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/functions/Supplier;)V` @kind direct;
  #L4d0226.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/flowables/ConnectableFlowable;)Lio/reactivex/rxjava3/flowables/ConnectableFlowable;` @kind static;
  #L4d022c.  v3:= temp @kind object;
  #L4d022e.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `multicastSelector`(`io.reactivex.rxjava3.functions.Supplier` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.multicastSelector:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4d01b4.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$d`;
  #L4d01b8.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$d;.<init>:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4d01be.  return v0 @kind object;
}
procedure `void` `connect`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v4 @kind this, `io.reactivex.rxjava3.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.connect:(Lio/reactivex/rxjava3/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d031c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0320.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d0326.  v0:= temp @kind object;
  #L4d0328.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`) v0 @kind object;
  #L4d032c.  if v0 == 0 then goto L4d033c;
  #L4d0330.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @kind virtual;
  #L4d0336.  v1:= temp;
  #L4d0338.  if v1 == 0 then goto L4d036e;
  #L4d033c.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.d` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4d0340.  call temp:= `get`(v1) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4d0346.  v1:= temp @kind object;
  #L4d0348.  v1:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f`) v1 @kind object;
  #L4d034c.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`;
  #L4d0350.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0354.  call `<init>`(v2, v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$f;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4d035a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d035e.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d0364.  v0:= temp;
  #L4d0366.  if v0 != 0 then goto L4d036c;
  #L4d036a.  goto L4d031c;
  #L4d036c.  v0:= v2 @kind object;
  #L4d036e.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d0372.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4d0378.  v1:= temp;
  #L4d037a.  v2:= 1I;
  #L4d037c.  v3:= 0I;
  #L4d037e.  if v1 != 0 then goto L4d0396;
  #L4d0382.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d0386.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d038c.  v1:= temp;
  #L4d038e.  if v1 == 0 then goto L4d0396;
  #L4d0392.  v1:= 1I;
  #L4d0394.  goto L4d0398;
  #L4d0396.  v1:= 0I;
  #L4d0398.  call `accept`(v5, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4d039e.  if v1 == 0 then goto L4d03ac;
  #L4d03a2.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4d03a6.  call `subscribe`(v5, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4d03ac.  return @kind void;
  #L4d03ae.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d03b0.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d03b6.  if v1 == 0 then goto L4d03c4;
  #L4d03ba.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4d03be.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4d03c4.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d03ca.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4d03d0.  v5:= temp @kind object;
  #L4d03d2.  throw v5;
  #L4d03d4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d03d6.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d03dc.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4d03e2.  v5:= temp @kind object;
  #L4d03e4.  throw v5;
  catch `java.lang.Throwable` @[L4d033c..L4d034c] goto L4d03d4;
  catch `java.lang.Throwable` @[L4d0398..L4d039e] goto L4d03ae;
}
procedure `void` `reset`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d0410.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0414.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d041a.  v0:= temp @kind object;
  #L4d041c.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$i`) v0 @kind object;
  #L4d0420.  if v0 == 0 then goto L4d043c;
  #L4d0424.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$i;.isDisposed:()Z` @kind virtual;
  #L4d042a.  v1:= temp;
  #L4d042c.  if v1 == 0 then goto L4d043c;
  #L4d0430.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d0434.  v2:= 0I;
  #L4d0436.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d043c.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d02bc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4d02c0.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4d0450.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4d0454.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d045a.  return @kind void;
}
