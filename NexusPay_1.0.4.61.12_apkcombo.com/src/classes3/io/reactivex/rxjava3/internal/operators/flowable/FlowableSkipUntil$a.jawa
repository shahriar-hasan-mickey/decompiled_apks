record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d2ebc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d2ec2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d2ec6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d2eca.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d2ed0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d2ed4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d2ed8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d2ede.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4d2ee2.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a`;
  #L4d2ee6.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;)V` @kind direct;
  #L4d2eec.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` := v1 @kind object;
  #L4d2ef0.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4d2ef4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4d2efa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4d2efe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2f10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d2f14.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d2f1a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L4d2f1e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d2f24.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2f38.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L4d2f3c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d2f42.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2f46.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d2f4a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d2f50.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2f64.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L4d2f68.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d2f6e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2f72.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d2f76.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4d2f7c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2f90.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d2f96.  v3:= temp;
  #L4d2f98.  if v3 != 0 then goto L4d2fb6;
  #L4d2f9c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d2fa0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d2fa6.  v3:= temp @kind object;
  #L4d2fa8.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4d2fac.  v0:= 1L;
  #L4d2fb0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d2fb6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2fc8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d2fcc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d2fd0.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d2fd6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2fe8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d2fec.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d2ff0.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4d2ff6.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSkipUntil$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2e8c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.f` @type ^`boolean` @kind boolean;
  #L4d2e90.  if v0 == 0 then goto L4d2ea6;
  #L4d2e94.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2e98.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d2e9c.  call temp:= `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)Z` @kind static;
  #L4d2ea2.  v3:= 1I;
  #L4d2ea4.  return v3;
  #L4d2ea6.  v3:= 0I;
  #L4d2ea8.  return v3;
}
