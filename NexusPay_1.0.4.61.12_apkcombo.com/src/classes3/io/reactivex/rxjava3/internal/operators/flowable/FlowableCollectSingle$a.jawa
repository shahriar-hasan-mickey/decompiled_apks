record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiConsumer` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bb9e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bb9e6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4bb9ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiConsumer` := v3 @kind object;
  #L4bb9ee.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4bb9f2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bba04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bba08.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bba0e.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4bba12.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4bba16.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb9bc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bb9c0.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4bb9c4.  if v0 != v1 then goto L4bb9cc;
  #L4bb9c8.  v0:= 1I;
  #L4bb9ca.  goto L4bb9ce;
  #L4bb9cc.  v0:= 0I;
  #L4bb9ce.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bba28.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L4bba2c.  if v0 == 0 then goto L4bba32;
  #L4bba30.  return @kind void;
  #L4bba32.  v0:= 1I;
  #L4bba34.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4bba38.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4bba3c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4bba40.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4bba44.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L4bba48.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4bba4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bba60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L4bba64.  if v0 == 0 then goto L4bba70;
  #L4bba68.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bba6e.  return @kind void;
  #L4bba70.  v0:= 1I;
  #L4bba72.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4bba76.  v0:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4bba7a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4bba7e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4bba82.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bba88.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bba9c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L4bbaa0.  if v0 == 0 then goto L4bbaa6;
  #L4bbaa4.  return @kind void;
  #L4bbaa6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.rxjava3.functions.BiConsumer` @kind object;
  #L4bbaaa.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L4bbaae.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4bbab4.  goto L4bbace;
  #L4bbab6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bbab8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bbabe.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bbac2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4bbac8.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bbace.  return @kind void;
  catch `java.lang.Throwable` @[L4bbaa6..L4bbab4] goto L4bbab6;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bbaec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4bbaf0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4bbaf6.  v0:= temp;
  #L4bbaf8.  if v0 == 0 then goto L4bbb1a;
  #L4bbafc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4bbb00.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4bbb04.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bbb0a.  v0:= 9223372036854775807L;
  #L4bbb14.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4bbb1a.  return @kind void;
}
