record `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `org.reactivestreams.Publisher` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.<init>:(ILio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c6b30.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4c6b36.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c6b3a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c6b40.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4c6b44.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4c6b48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c6b4e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4c6b52.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c6b56.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c6b5c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c6b60.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c6b64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c6b6a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4c6b6e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4c6b72.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c6b78.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4c6b7c.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c6b80.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c6b86.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4c6b8a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` := v3 @kind object;
  #L4c6b8e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.a` @type ^`java.lang.Object` := v4 @kind object;
  #L4c6b92.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` := v5 @kind boolean;
  #L4c6b96.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c6ba8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c6bac.  v1:= 0I;
  #L4c6bae.  v2:= 1I;
  #L4c6bb0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c6bb6.  v0:= temp;
  #L4c6bb8.  if v0 == 0 then goto L4c6bc8;
  #L4c6bbc.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.e:()V` @kind virtual;
  #L4c6bc2.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L4c6bc8.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6c54.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6c58.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c6c5e.  v1:= temp @kind object;
  #L4c6c60.  if v1 == 0 then goto L4c6c72;
  #L4c6c64.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int`;
  #L4c6c68.  v1:= v1 + 1;
  #L4c6c6c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int` := v1;
  #L4c6c70.  goto L4c6c58;
  #L4c6c72.  call `n`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L4c6c78.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4c6c8c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c6c92.  v0:= temp;
  #L4c6c94.  if v0 == 0 then goto L4c6c9a;
  #L4c6c98.  return @kind void;
  #L4c6c9a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.j` @type ^`boolean` @kind boolean;
  #L4c6c9e.  if v0 == 0 then goto L4c6caa;
  #L4c6ca2.  call `h`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @kind virtual;
  #L4c6ca8.  goto L4c6cb0;
  #L4c6caa.  call `i`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.i:()V` @kind virtual;
  #L4c6cb0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c6bdc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6be0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c6be6.  v0:= temp;
  #L4c6be8.  v0:= v0 ^& 2;
  #L4c6bec.  if v0 != 0 then goto L4c6c12;
  #L4c6bf0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c6bf4.  v1:= 0I;
  #L4c6bf6.  v2:= 1I;
  #L4c6bf8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c6bfe.  v0:= temp;
  #L4c6c00.  if v0 == 0 then goto L4c6c12;
  #L4c6c04.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L4c6c08.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.a` @type ^`java.lang.Object` @kind object;
  #L4c6c0c.  call `cancel`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L4c6c12.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `boolean` v6 , `long` v7 , `boolean` v9 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.f:(ZZLorg/reactivestreams/Subscriber;ZJZ)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c69a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c69ac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c69b2.  v0:= temp;
  #L4c69b4.  v1:= 1I;
  #L4c69b6.  if v0 == 0 then goto L4c69c2;
  #L4c69ba.  call `g`(v2, v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.g:(JZ)V` @kind virtual;
  #L4c69c0.  return v1;
  #L4c69c2.  if v3 == 0 then goto L4c6a36;
  #L4c69c6.  if v6 == 0 then goto L4c69f6;
  #L4c69ca.  if v4 == 0 then goto L4c6a36;
  #L4c69ce.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c69d2.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L4c69d8.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L4c69dc.  if v3 == 0 then goto L4c69e8;
  #L4c69e0.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c69e6.  goto L4c69f4;
  #L4c69e8.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c69ee.  call `j`(v2, v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @kind virtual;
  #L4c69f4.  return v1;
  #L4c69f6.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L4c69fa.  if v3 == 0 then goto L4c6a1a;
  #L4c69fe.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6a02.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c6a08.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c6a0c.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L4c6a12.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6a18.  return v1;
  #L4c6a1a.  if v4 == 0 then goto L4c6a36;
  #L4c6a1e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c6a22.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.lazySet:(Z)V` @kind virtual;
  #L4c6a28.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c6a2e.  call `j`(v2, v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @kind virtual;
  #L4c6a34.  return v1;
  #L4c6a36.  v3:= 0I;
  #L4c6a38.  return v3;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this, `long` v3 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.g:(JZ)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c6c24.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6c28.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c6c2e.  v0:= temp @kind object;
  #L4c6c30.  if v0 == 0 then goto L4c6c3c;
  #L4c6c34.  v0:= 1L;
  #L4c6c38.  v3:= v3 + v0 @kind long;
  #L4c6c3a.  goto L4c6c24;
  #L4c6c3c.  call `j`(v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @kind virtual;
  #L4c6c42.  return @kind void;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c6cc4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6cc8.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6ccc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6cd2.  v1:= temp @kind object;
  #L4c6cd4.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4c6cd8.  v2:= 1I;
  #L4c6cda.  if v1 == 0 then goto L4c6d3a;
  #L4c6cde.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c6ce2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c6ce8.  v3:= temp;
  #L4c6cea.  if v3 == 0 then goto L4c6cf0;
  #L4c6cee.  return @kind void;
  #L4c6cf0.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L4c6cf4.  if v3 == 0 then goto L4c6d16;
  #L4c6cf8.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` @kind boolean;
  #L4c6cfc.  if v4 != 0 then goto L4c6d16;
  #L4c6d00.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L4c6d04.  if v4 == 0 then goto L4c6d16;
  #L4c6d08.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c6d0e.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6d14.  return @kind void;
  #L4c6d16.  v4:= 0I;
  #L4c6d18.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c6d1e.  if v3 == 0 then goto L4c6d3a;
  #L4c6d22.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L4c6d26.  if v0 == 0 then goto L4c6d32;
  #L4c6d2a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6d30.  goto L4c6d38;
  #L4c6d32.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c6d38.  return @kind void;
  #L4c6d3a.  v2:= -v2 @kind int;
  #L4c6d3c.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c6d42.  v2:= temp;
  #L4c6d44.  if v2 != 0 then goto L4c6d4a;
  #L4c6d48.  return @kind void;
  #L4c6d4a.  if v1 != 0 then goto L4c6cda;
  #L4c6d4e.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6d52.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6d58.  v1:= temp @kind object;
  #L4c6d5a.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4c6d5e.  goto L4c6cda;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v25 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L4c6d70.  v8:= v25 @kind object;
  #L4c6d74.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6d78.  v10:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` @kind boolean;
  #L4c6d7c.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6d80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6d86.  v0:= temp @kind object;
  #L4c6d88.  v0:= (`org.reactivestreams.Subscriber`) v0 @kind object;
  #L4c6d8c.  v11:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c6d90.  v13:= v0 @kind object;
  #L4c6d92.  v14:= 1I;
  #L4c6d94.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c6d9a.  v0:= temp;
  #L4c6d9c.  v15:= 0I;
  #L4c6d9e.  v5:= 0L;
  #L4c6da2.  if v0 == 0 then goto L4c6db0;
  #L4c6da6.  call `g`(v8, v5, v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.g:(JZ)V` @kind virtual;
  #L4c6dac.  goto L4c6e88;
  #L4c6db0.  if v13 == 0 then goto L4c6e88;
  #L4c6db4.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c6db8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c6dbe.  v16:= temp @kind wide;
  #L4c6dc0.  v3:= v5 @kind wide;
  #L4c6dc2.  v18:= lcmp(v3, v16);
  #L4c6dc6.  if v18 == 0 then goto L4c6e36;
  #L4c6dca.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L4c6dce.  call temp:= `poll`(v9) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c6dd4.  v7:= temp @kind object;
  #L4c6dd6.  if v7 != 0 then goto L4c6de0;
  #L4c6dda.  v19:= 1I;
  #L4c6dde.  goto L4c6de4;
  #L4c6de0.  v19:= 0I;
  #L4c6de4.  v20:= v19 ^~ 1;
  #L4c6de8.  v0:= v25 @kind object;
  #L4c6dec.  v2:= v19;
  #L4c6df0.  v21:= v3 @kind wide;
  #L4c6df4.  v3:= v13 @kind object;
  #L4c6df6.  v4:= v10;
  #L4c6df8.  v23:= v5 @kind wide;
  #L4c6dfc.  v5:= v21 @kind wide;
  #L4c6e00.  v12:= v7 @kind object;
  #L4c6e02.  v7:= v20;
  #L4c6e06.  call temp:= `f`(v0, v1, v2, v3, v4, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.f:(ZZLorg/reactivestreams/Subscriber;ZJZ)Z` @kind virtual;
  #L4c6e0c.  v0:= temp;
  #L4c6e0e.  if v0 == 0 then goto L4c6e14;
  #L4c6e12.  goto L4c6d94;
  #L4c6e14.  if v19 == 0 then goto L4c6e1e;
  #L4c6e18.  v5:= v21 @kind wide;
  #L4c6e1c.  goto L4c6e3c;
  #L4c6e1e.  call `onNext`(v13, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c6e24.  v0:= 1L;
  #L4c6e28.  v5:= v21 @kind wide;
  #L4c6e2c.  v3:= v5 + v0 @kind long;
  #L4c6e30.  v5:= v23 @kind wide;
  #L4c6e34.  goto L4c6dc2;
  #L4c6e36.  v23:= v5 @kind wide;
  #L4c6e3a.  v5:= v3 @kind wide;
  #L4c6e3c.  if v18 != 0 then goto L4c6e6e;
  #L4c6e40.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L4c6e44.  call temp:= `isEmpty`(v9) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4c6e4a.  v2:= temp;
  #L4c6e4c.  v7:= 0I;
  #L4c6e4e.  v0:= v25 @kind object;
  #L4c6e52.  v3:= v13 @kind object;
  #L4c6e54.  v4:= v10;
  #L4c6e56.  v21:= v5 @kind wide;
  #L4c6e5a.  call temp:= `f`(v0, v1, v2, v3, v4, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.f:(ZZLorg/reactivestreams/Subscriber;ZJZ)Z` @kind virtual;
  #L4c6e60.  v0:= temp;
  #L4c6e62.  if v0 == 0 then goto L4c6e68;
  #L4c6e66.  goto L4c6d94;
  #L4c6e68.  v3:= v21 @kind wide;
  #L4c6e6c.  goto L4c6e70;
  #L4c6e6e.  v3:= v5 @kind wide;
  #L4c6e70.  v0:= lcmp(v3, v23);
  #L4c6e74.  if v0 == 0 then goto L4c6e88;
  #L4c6e78.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c6e7c.  call temp:= `produced`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c6e82.  call `k`(v8, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @kind virtual;
  #L4c6e88.  v0:= -v14 @kind int;
  #L4c6e8a.  call temp:= `addAndGet`(v8, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c6e90.  v14:= temp;
  #L4c6e92.  if v14 != 0 then goto L4c6e98;
  #L4c6e96.  return @kind void;
  #L4c6e98.  if v13 != 0 then goto L4c6d94;
  #L4c6e9c.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6ea0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6ea6.  v0:= temp @kind object;
  #L4c6ea8.  v13:= v0 @kind object;
  #L4c6eaa.  v13:= (`org.reactivestreams.Subscriber`) v13 @kind object;
  #L4c6eae.  goto L4c6d94;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6a4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6a50.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4c6a56.  v0:= temp;
  #L4c6a58.  if v0 == 0 then goto L4c6a66;
  #L4c6a5c.  call `n`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L4c6a62.  v0:= 1I;
  #L4c6a64.  return v0;
  #L4c6a66.  call `n`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L4c6a6c.  v0:= 0I;
  #L4c6a6e.  return v0;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this, `long` v3 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.j:(JZ)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c6f2c.  if v5 == 0 then goto L4c6f36;
  #L4c6f30.  v0:= 1L;
  #L4c6f34.  v3:= v3 + v0 @kind long;
  #L4c6f36.  v0:= 0L;
  #L4c6f3a.  v5:= lcmp(v3, v0);
  #L4c6f3e.  if v5 == 0 then goto L4c6f48;
  #L4c6f42.  call `k`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @kind virtual;
  #L4c6f48.  return @kind void;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @AccessFlag  {
    temp;
    v0;

  #L4c6f8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6f90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c6f96.  v0:= temp;
  #L4c6f98.  v0:= v0 ^& 2;
  #L4c6f9c.  if v0 != 0 then goto L4c6faa;
  #L4c6fa0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L4c6fa4.  call `c`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.c:(J)V` @kind virtual;
  #L4c6faa.  return @kind void;
}
procedure `boolean` `l`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.l:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c6a80.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6a84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c6a8a.  v0:= temp;
  #L4c6a8c.  v1:= 0I;
  #L4c6a8e.  if v0 != 0 then goto L4c6aa6;
  #L4c6a92.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6a96.  v2:= 2I;
  #L4c6a98.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c6a9e.  v0:= temp;
  #L4c6aa0.  if v0 == 0 then goto L4c6aa6;
  #L4c6aa4.  v1:= 1I;
  #L4c6aa6.  return v1;
}
procedure `boolean` `m`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.m:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c6ab8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.m` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c6abc.  v1:= 0I;
  #L4c6abe.  v2:= 1I;
  #L4c6ac0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c6ac6.  v0:= temp;
  #L4c6ac8.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v2 @kind boolean;
  #L4c6acc.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L4c6ad2.  return v0;
}
procedure `void` `n`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c7040.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int`;
  #L4c7044.  if v0 == 0 then goto L4c7056;
  #L4c7048.  v1:= 0I;
  #L4c704a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int` := v1;
  #L4c704e.  v0:= (`long`) v0 @kind i2l;
  #L4c7050.  call `k`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.k:(J)V` @kind virtual;
  #L4c7056.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6ec4.  v0:= 1I;
  #L4c6ec6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v0 @kind boolean;
  #L4c6eca.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L4c6ed0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4c6ee4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4c6ee8.  v1:= 1I;
  #L4c6eea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v1 @kind boolean;
  #L4c6eee.  call `drain`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L4c6ef4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6f08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6f0c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4c6f12.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L4c6f18.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6af8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c6afc.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c6b02.  v0:= temp @kind object;
  #L4c6b04.  if v0 == 0 then goto L4c6b16;
  #L4c6b08.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int`;
  #L4c6b0c.  v1:= v1 + 1;
  #L4c6b10.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`int` := v1;
  #L4c6b14.  return v0 @kind object;
  #L4c6b16.  call `n`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.n:()V` @kind virtual;
  #L4c6b1c.  v0:= 0I;
  #L4c6b1e.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6f5c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4c6f62.  v0:= temp;
  #L4c6f64.  if v0 == 0 then goto L4c6f78;
  #L4c6f68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c6f6c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4c6f72.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L4c6f78.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c6ae4.  v1:= 0I;
  #L4c6ae6.  return v1;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c6fbc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6fc0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c6fc6.  v0:= temp;
  #L4c6fc8.  v1:= v0 ^& 1;
  #L4c6fcc.  if v1 == 0 then goto L4c6fe6;
  #L4c6fd0.  v0:= new `java.lang.IllegalStateException`;
  #L4c6fd4.  v1:= "Only one Subscriber allowed!" @kind object;
  #L4c6fd8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c6fde.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4c6fe4.  return @kind void;
  #L4c6fe6.  v1:= v0 ^| 1;
  #L4c6fea.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c6fee.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c6ff4.  v0:= temp;
  #L4c6ff6.  if v0 == 0 then goto L4c6fbc;
  #L4c6ffa.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4c7000.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c7004.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c700a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4c700e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4c7014.  v4:= temp;
  #L4c7016.  if v4 == 0 then goto L4c7028;
  #L4c701a.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c701e.  v0:= 0I;
  #L4c7020.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c7026.  goto L4c702e;
  #L4c7028.  call `drain`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L4c702e.  return @kind void;
}
