record `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c9e38.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c9e3e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4c9e42.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c9e46.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c9e4c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c9e50.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a`;
  #L4c9e54.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;)V` @kind direct;
  #L4c9e5a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` := v2 @kind object;
  #L4c9e5e.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c9e62.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c9e68.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4c9e6c.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4c9e70.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4c9e76.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4c9e7a.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4c9e80.  v2:= temp;
  #L4c9e82.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @type ^`int` := v2;
  #L4c9e86.  v0:= v2 ^> 2;
  #L4c9e8a.  v2:= v2 - v0 @kind int;
  #L4c9e8c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int` := v2;
  #L4c9e90.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4c9ef0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c9ef6.  v0:= temp;
  #L4c9ef8.  if v0 != 0 then goto L4c9f02;
  #L4c9efc.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4c9f02.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4c9f14.  v0:= v18 @kind object;
  #L4c9f18.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c9f1c.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L4c9f20.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int`;
  #L4c9f24.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int`;
  #L4c9f28.  v6:= 1I;
  #L4c9f2a.  v7:= 1I;
  #L4c9f2c.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4c9f30.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4c9f36.  v8:= temp @kind wide;
  #L4c9f38.  v11:= 2I;
  #L4c9f3a.  v12:= 0I;
  #L4c9f3c.  v13:= lcmp(v2, v8);
  #L4c9f40.  if v13 == 0 then goto L4ca012;
  #L4c9f44.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` @kind boolean;
  #L4c9f48.  if v14 == 0 then goto L4c9f56;
  #L4c9f4c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4c9f50.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4c9f54.  return @kind void;
  #L4c9f56.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9f5a.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c9f60.  v14:= temp @kind object;
  #L4c9f62.  if v14 == 0 then goto L4c9f7e;
  #L4c9f66.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4c9f6a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4c9f6e.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9f72.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c9f76.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4c9f7c.  return @kind void;
  #L4c9f7e.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int`;
  #L4c9f82.  v15:= 1L;
  #L4c9f86.  if v14 != v6 then goto L4c9fa0;
  #L4c9f8a.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` @kind object;
  #L4c9f8e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4c9f92.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v11;
  #L4c9f96.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c9f9c.  v2:= v2 + v15 @kind long;
  #L4c9f9e.  goto L4c9f38;
  #L4c9fa0.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4c9fa4.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c9fa8.  if v10 == 0 then goto L4c9fb6;
  #L4c9fac.  call temp:= `poll`(v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c9fb2.  v10:= temp @kind object;
  #L4c9fb4.  goto L4c9fb8;
  #L4c9fb6.  v10:= v12 @kind object;
  #L4c9fb8.  if v10 != 0 then goto L4c9fc2;
  #L4c9fbc.  v17:= 1I;
  #L4c9fc0.  goto L4c9fc6;
  #L4c9fc2.  v17:= 0I;
  #L4c9fc6.  if v6 == 0 then goto L4c9fde;
  #L4c9fca.  if v17 == 0 then goto L4c9fde;
  #L4c9fce.  if v14 != v11 then goto L4c9fde;
  #L4c9fd2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4c9fd6.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c9fdc.  return @kind void;
  #L4c9fde.  if v17 == 0 then goto L4c9fe4;
  #L4c9fe2.  goto L4ca012;
  #L4c9fe4.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c9fea.  v2:= v2 + v15 @kind long;
  #L4c9fec.  v4:= v4 + 1;
  #L4c9ff0.  if v4 != v5 then goto L4ca00e;
  #L4c9ff4.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c9ff8.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c9ffe.  v4:= temp @kind object;
  #L4ca000.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4ca004.  v10:= (`long`) v5 @kind i2l;
  #L4ca006.  call `request`(v4, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ca00c.  v4:= 0I;
  #L4ca00e.  v6:= 1I;
  #L4ca010.  goto L4c9f38;
  #L4ca012.  if v13 != 0 then goto L4ca08c;
  #L4ca016.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` @kind boolean;
  #L4ca01a.  if v6 == 0 then goto L4ca028;
  #L4ca01e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4ca022.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca026.  return @kind void;
  #L4ca028.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca02c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ca032.  v6:= temp @kind object;
  #L4ca034.  if v6 == 0 then goto L4ca050;
  #L4ca038.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4ca03c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca040.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca044.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca048.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4ca04e.  return @kind void;
  #L4ca050.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` @kind boolean;
  #L4ca054.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ca058.  if v8 == 0 then goto L4ca06e;
  #L4ca05c.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ca062.  v8:= temp;
  #L4ca064.  if v8 == 0 then goto L4ca06a;
  #L4ca068.  goto L4ca06e;
  #L4ca06a.  v10:= 0I;
  #L4ca06c.  goto L4ca070;
  #L4ca06e.  v10:= 1I;
  #L4ca070.  if v6 == 0 then goto L4ca08c;
  #L4ca074.  if v10 == 0 then goto L4ca08c;
  #L4ca078.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int`;
  #L4ca07c.  if v6 != v11 then goto L4ca08c;
  #L4ca080.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4ca084.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ca08a.  return @kind void;
  #L4ca08c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L4ca090.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v4;
  #L4ca094.  v6:= -v7 @kind int;
  #L4ca096.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ca09c.  v7:= temp;
  #L4ca09e.  if v7 != 0 then goto L4ca0a4;
  #L4ca0a2.  return @kind void;
  #L4ca0a4.  v6:= 1I;
  #L4ca0a6.  goto L4c9f2c;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c9e08.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c9e0c.  if v0 != 0 then goto L4c9e26;
  #L4c9e10.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4c9e14.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4c9e1a.  v1:= temp;
  #L4c9e1c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4c9e22.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4c9e26.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c9ea4.  v0:= 1I;
  #L4c9ea6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4c9eaa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c9eae.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c9eb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` @kind object;
  #L4c9eb8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c9ebe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c9ec2.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c9ec8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c9ece.  v0:= temp;
  #L4c9ed0.  if v0 != 0 then goto L4c9ede;
  #L4c9ed4.  v0:= 0I;
  #L4c9ed6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4c9eda.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v0 @kind object;
  #L4c9ede.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4ca210.  v0:= 2I;
  #L4ca212.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v0;
  #L4ca216.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4ca21c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4ca230.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca234.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ca23a.  v2:= temp;
  #L4ca23c.  if v2 == 0 then goto L4ca250;
  #L4ca240.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca244.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ca24a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4ca250.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ca264.  v0:= 0I;
  #L4ca266.  v1:= 1I;
  #L4ca268.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4ca26e.  v0:= temp;
  #L4ca270.  if v0 == 0 then goto L4ca2be;
  #L4ca274.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L4ca278.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ca27c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ca282.  v4:= temp @kind wide;
  #L4ca284.  v0:= lcmp(v4, v2);
  #L4ca288.  if v0 == 0 then goto L4ca2a8;
  #L4ca28c.  v0:= 1L;
  #L4ca290.  v2:= v2 + v0 @kind long;
  #L4ca292.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L4ca296.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca29a.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca2a0.  v7:= 2I;
  #L4ca2a2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v7;
  #L4ca2a6.  goto L4ca2d4;
  #L4ca2a8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4ca2ac.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v1;
  #L4ca2b0.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ca2b6.  v7:= temp;
  #L4ca2b8.  if v7 != 0 then goto L4ca2d4;
  #L4ca2bc.  return @kind void;
  #L4ca2be.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4ca2c2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v1;
  #L4ca2c6.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ca2cc.  v7:= temp;
  #L4ca2ce.  if v7 == 0 then goto L4ca2d4;
  #L4ca2d2.  return @kind void;
  #L4ca2d4.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4ca2da.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca0bc.  v0:= 1I;
  #L4ca0be.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4ca0c2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4ca0c8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca0dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ca0e0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ca0e6.  v2:= temp;
  #L4ca0e8.  if v2 == 0 then goto L4ca0fc;
  #L4ca0ec.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a$a` @kind object;
  #L4ca0f0.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ca0f6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4ca0fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ca110.  v0:= 0I;
  #L4ca112.  v1:= 1I;
  #L4ca114.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4ca11a.  v2:= temp;
  #L4ca11c.  if v2 == 0 then goto L4ca1b8;
  #L4ca120.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L4ca124.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ca128.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ca12e.  v4:= temp @kind wide;
  #L4ca130.  v6:= lcmp(v4, v2);
  #L4ca134.  if v6 == 0 then goto L4ca19c;
  #L4ca138.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4ca13c.  if v4 == 0 then goto L4ca156;
  #L4ca140.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4ca146.  v5:= temp;
  #L4ca148.  if v5 == 0 then goto L4ca14e;
  #L4ca14c.  goto L4ca156;
  #L4ca14e.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca154.  goto L4ca1aa;
  #L4ca156.  v4:= 1L;
  #L4ca15a.  v2:= v2 + v4 @kind long;
  #L4ca15c.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L4ca160.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ca164.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ca16a.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int`;
  #L4ca16e.  v8:= v8 + v1 @kind int;
  #L4ca170.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int`;
  #L4ca174.  if v8 != v1 then goto L4ca196;
  #L4ca178.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v0;
  #L4ca17c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca180.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ca186.  v0:= temp @kind object;
  #L4ca188.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4ca18c.  v1:= (`long`) v8 @kind i2l;
  #L4ca18e.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ca194.  goto L4ca1aa;
  #L4ca196.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v8;
  #L4ca19a.  goto L4ca1aa;
  #L4ca19c.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4ca1a2.  v0:= temp @kind object;
  #L4ca1a4.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca1aa.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ca1b0.  v8:= temp;
  #L4ca1b2.  if v8 != 0 then goto L4ca1d4;
  #L4ca1b6.  return @kind void;
  #L4ca1b8.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4ca1be.  v0:= temp @kind object;
  #L4ca1c0.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ca1c6.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ca1cc.  v8:= temp;
  #L4ca1ce.  if v8 == 0 then goto L4ca1d4;
  #L4ca1d2.  return @kind void;
  #L4ca1d4.  call `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4ca1da.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ca1ec.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ca1f0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @type ^`int`;
  #L4ca1f4.  v1:= (`long`) v1 @kind i2l;
  #L4ca1f6.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4ca1fc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ca2ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4ca2f0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ca2f6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4ca2fc.  return @kind void;
}
