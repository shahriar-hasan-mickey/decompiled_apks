record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c062c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4c0632.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c0636.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` := v3 @kind object;
  #L4c063a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c064c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4c0650.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4c0656.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.clear:()V` @kind super;
  #L4c065c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0670.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c0674.  if v0 != 0 then goto L4c0692;
  #L4c0678.  v0:= 1I;
  #L4c067a.  v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4c067e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4c0682.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4c0688.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c068c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4c0692.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c06a4.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c06a8.  if v0 == 0 then goto L4c06b4;
  #L4c06ac.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c06b2.  goto L4c06ce;
  #L4c06b4.  v0:= 1I;
  #L4c06b6.  v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4c06ba.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4c06be.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4c06c4.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c06c8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c06ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c06e0.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4c06e4.  if v0 == 0 then goto L4c06ea;
  #L4c06e8.  return @kind void;
  #L4c06ea.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4c06ee.  if v0 != 0 then goto L4c0740;
  #L4c06f2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c06f6.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c06fc.  v0:= temp @kind object;
  #L4c06fe.  v1:= "The keySelector returned a null key" @kind object;
  #L4c0702.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c0708.  v0:= temp @kind object;
  #L4c070a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4c070e.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c0714.  v0:= temp;
  #L4c0716.  if v0 == 0 then goto L4c0726;
  #L4c071a.  v0:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c071e.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c0724.  goto L4c074c;
  #L4c0726.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c072a.  v0:= 1L;
  #L4c072e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c0734.  goto L4c074c;
  #L4c0736.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0738.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c073e.  return @kind void;
  #L4c0740.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4c0744.  v0:= 0I;
  #L4c0746.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c074c.  return @kind void;
  catch `java.lang.Throwable` @[L4c06f2..L4c0716] goto L4c0736;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c05c4.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L4c05c8.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c05ce.  v0:= temp @kind object;
  #L4c05d0.  if v0 == 0 then goto L4c0618;
  #L4c05d4.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4c05d8.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c05dc.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c05e2.  v2:= temp @kind object;
  #L4c05e4.  v3:= "The keySelector returned a null key" @kind object;
  #L4c05e8.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c05ee.  v2:= temp @kind object;
  #L4c05f0.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4c05f6.  v1:= temp;
  #L4c05f8.  if v1 == 0 then goto L4c05fe;
  #L4c05fc.  goto L4c0618;
  #L4c05fe.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4c0602.  v1:= 2I;
  #L4c0604.  if v0 != v1 then goto L4c05c4;
  #L4c0608.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4c060c.  v1:= 1L;
  #L4c0610.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4c0616.  goto L4c05c4;
  #L4c0618.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinct$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4c05a8.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4c05ae.  v1:= temp;
  #L4c05b0.  return v1;
}
