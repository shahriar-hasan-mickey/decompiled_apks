record `io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this, `io.reactivex.rxjava3.functions.Consumer` v1 @kind object, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.Action` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4dab34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4dab3a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.a` @type ^`io.reactivex.rxjava3.functions.Consumer` := v1 @kind object;
  #L4dab3e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v2 @kind object;
  #L4dab42.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.c` @type ^`io.reactivex.rxjava3.functions.Action` := v3 @kind object;
  #L4dab46.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4dab58.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4dab5e.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4daae8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4daaec.  v1:= `@@io.reactivex.rxjava3.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4daaf0.  if v0 == v1 then goto L4daaf8;
  #L4daaf4.  v0:= 1I;
  #L4daaf6.  goto L4daafa;
  #L4daaf8.  v0:= 0I;
  #L4daafa.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dab0c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4dab12.  v0:= temp @kind object;
  #L4dab14.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4dab18.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4dab1e.  v0:= temp;
  #L4dab20.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dab70.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dab74.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dab7a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.c` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4dab7e.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L4dab84.  goto L4dab94;
  #L4dab86.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dab88.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dab8e.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dab94.  return @kind void;
  catch `java.lang.Throwable` @[L4dab7a..L4dab84] goto L4dab86;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dabb4.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dabb8.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dabbe.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dabc2.  call `accept`(v0, v5) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4dabc8.  goto L4dabf4;
  #L4dabca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dabcc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dabd2.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4dabd6.  v2:= 2I;
  #L4dabd8.  v2:= new `java.lang.Throwable`[v2];
  #L4dabdc.  v3:= 0I;
  #L4dabde.  v2[v3]:= v5 @kind object;
  #L4dabe2.  v5:= 1I;
  #L4dabe4.  v2[v5]:= v0 @kind object;
  #L4dabe8.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4dabee.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dabf4.  return @kind void;
  catch `java.lang.Throwable` @[L4dabbe..L4dabc8] goto L4dabca;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4dac14.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4dac1a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCallbackObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dac2c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4dac30.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4dac36.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver.a` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4dac3a.  call `accept`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4dac40.  goto L4dac50;
  #L4dac42.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4dac44.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4dac4a.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4dac50.  return @kind void;
  catch `java.lang.Throwable` @[L4dac36..L4dac40] goto L4dac42;
}
