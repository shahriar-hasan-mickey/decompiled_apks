record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L502584.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L50258a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.a` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L50258e.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.b` @type ^`int` := v2;
  #L502592.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.c` @type ^`int` := v3;
  #L502596.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50256c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.b` @type ^`int`;
  #L502570.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5025a8.  call temp:= `validate`(v3, v4) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L5025ae.  v0:= temp;
  #L5025b0.  if v0 != 0 then goto L5025b6;
  #L5025b4.  return @kind void;
  #L5025b6.  v0:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L5025ba.  v1:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a`;
  #L5025be.  v2:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.c` @type ^`int`;
  #L5025c2.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.<init>:([Lorg/reactivestreams/Subscriber;I)V` @kind direct;
  #L5025c8.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L5025ce.  return @kind void;
}
