record `io.reactivex.rxjava3.kotlin.MaybesKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `io.reactivex.rxjava3.core.Maybe` `zipWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/kotlin/MaybesKt;.zipWith:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L51637c.  v0:= "$this$zipWith" @kind object;
  #L516380.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L516386.  v0:= "other" @kind object;
  #L51638a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L516390.  v0:= `@@io.reactivex.rxjava3.kotlin.MaybesKt$a.a` @type ^`io.reactivex.rxjava3.kotlin.MaybesKt$a` @kind object;
  #L516394.  call temp:= `zipWith`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipWith:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L51639a.  v1:= temp @kind object;
  #L51639c.  v2:= "zipWith(other, BiFunction { t, u -> Pair(t, u) })" @kind object;
  #L5163a0.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5163a6.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zipWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lio/reactivex/rxjava3/kotlin/MaybesKt;.zipWith:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/core/MaybeSource;Lkotlin/jvm/functions/Function2;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L5163b8.  v0:= "$this$zipWith" @kind object;
  #L5163bc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5163c2.  v0:= "other" @kind object;
  #L5163c6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5163cc.  v0:= "zipper" @kind object;
  #L5163d0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5163d6.  v0:= new `io.reactivex.rxjava3.kotlin.MaybesKt$zipWith$1`;
  #L5163da.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/kotlin/MaybesKt$zipWith$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L5163e0.  call temp:= `zipWith`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipWith:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L5163e6.  v1:= temp @kind object;
  #L5163e8.  v2:= "zipWith(other, BiFunctioâ€¦-> zipper.invoke(t, u) })" @kind object;
  #L5163ec.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5163f2.  return v1 @kind object;
}
